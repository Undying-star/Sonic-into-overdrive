 AS V1.42 Beta [Bld 89] - source file s1.asm - page 1 - 2/27/2022 20:33:18


       1/       0 :                     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       2/       0 :                     ; ASSEMBLY OPTIONS:
       3/       0 :                     ;
       4/       0 : =$0                 zeroOffsetOptimization = 0
       5/       0 :                     ;	| If 1, makes a handful of zero-offset instructions smaller
       6/       0 :                     ;
       7/       0 :                     ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       8/       0 :                     ; AS-specific macros and assembler settings
       9/       0 :                     		CPU 68000
      10/       0 :                     		include "s1.macrosetup.asm"
(1)    1/       0 :                     
(1)    2/       0 :                     	padding off	; we don't want AS padding out dc.b instructions
(1)    3/       0 :                     	;listing off		; We don't need to generate anything for a listing file
(1)    4/       0 :                     	;listing on			; Want full listing file
(1)    5/       0 :                     	;listing noskipped	; Want listing file, but only the non-skipped part of conditional assembly
(1)    6/       0 :                     	listing purecode	; Want listing file, but only the final code in expanded macros
(1)    7/       0 :                     	page	0	; Don't want form feeds
(1)    8/       0 :                     	supmode on	; we don't need warnings about privileged instructions
(1)    9/       0 :                     
(1)   10/       0 :                     
(1)   11/       0 : =$0                 paddingSoFar set 0
(1)   12/       0 :                     
(1)   13/       0 :                     ; 128 = 80h = z80, 32988 = 80DCh = z80unDoC 
(1)   14/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   15/       0 :                     
(1)   16/       0 :                     ; make org safer (impossible to overwrite previously assembled bytes) and count padding
(1)   17/       0 :                     ; and also make it work in Z80 code without creating a new segment
(1)   18/       0 :                     org macro address
(1)   19/       0 :                     	if notZ80(MOMCPU)
(1)   20/       0 :                     		if address < *
(1)   21/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   22/       0 :                     		elseif address > *
(1)   23/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   24/       0 :                     			!org address
(1)   25/       0 :                     		endif
(1)   26/       0 :                     	else
(1)   27/       0 :                     		if address < $
(1)   28/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   29/       0 :                     		else
(1)   30/       0 :                     			while address > $
(1)   31/       0 :                     				db 0
(1)   32/       0 :                     			endm
(1)   33/       0 :                     		endif
(1)   34/       0 :                     	endif
(1)   35/       0 :                         endm
(1)   36/       0 :                     
(1)   37/       0 :                     ; define the cnop pseudo-instruction
(1)   38/       0 :                     cnop macro offset,alignment
(1)   39/       0 :                     	if notZ80(MOMCPU)
(1)   40/       0 :                     		org (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   41/       0 :                     	else
(1)   42/       0 :                     		org ($-1+(alignment)-(($-1+(-(offset)))#(alignment)))
(1)   43/       0 :                     	endif
(1)   44/       0 :                         endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; redefine align in terms of cnop, for the padding counter
(1)   47/       0 :                     align macro alignment
(1)   48/       0 :                     	cnop 0,alignment
(1)   49/       0 :                         endm
(1)   50/       0 :                     
(1)   51/       0 :                     ; define the even pseudo-instruction
(1)   52/       0 :                     even macro
(1)   53/       0 :                     	if notZ80(MOMCPU)
(1)   54/       0 :                     		if (*)&1
(1)   55/       0 :                     paddingSoFar		set paddingSoFar+1
(1)   56/       0 :                     			dc.b 0 ;ds.b 1 
(1)   57/       0 :                     		endif
(1)   58/       0 :                     	else
(1)   59/       0 :                     		if ($)&1
(1)   60/       0 :                     			db 0
(1)   61/       0 :                     		endif
(1)   62/       0 :                     	endif
(1)   63/       0 :                         endm
(1)   64/       0 :                     
(1)   65/       0 :                     ; make ds work in Z80 code without creating a new segment
(1)   66/       0 :                     ds macro
(1)   67/       0 :                     	if notZ80(MOMCPU)
(1)   68/       0 :                     		!ds.ATTRIBUTE ALLARGS
(1)   69/       0 :                     	else
(1)   70/       0 :                     		rept ALLARGS
(1)   71/       0 :                     			db 0
(1)   72/       0 :                     		endm
(1)   73/       0 :                     	endif
(1)   74/       0 :                        endm
(1)   75/       0 :                     
(1)   77/       0 :                     ; define a trace macro
(1)   78/       0 :                     ; lets you easily check what address a location in this disassembly assembles to
(1)   79/       0 :                     ; if used in Z80 code, the displayed PC will be relative to the start of Z80 RAM
(1)   80/       0 :                     trace macro optionalMessageWithoutQuotes
(1)   81/       0 :                         if MOMPASS=1
(1)   82/       0 :                     	if notZ80(MOMCPU)
(1)   83/       0 :                     		if ("ALLARGS"<>"")
(1)   84/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{*} msg=ALLARGS"
(1)   85/       0 :                     		else
(1)   86/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{*}"
(1)   87/       0 :                     		endif
(1)   88/       0 :                     	else
(1)   89/       0 :                     		if ("ALLARGS"<>"")
(1)   90/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=\{$}h msg=ALLARGS"
(1)   91/       0 :                     		else
(1)   92/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=\{$}h"
(1)   93/       0 :                     		endif
(1)   94/       0 :                     	endif
(1)   95/       0 :                     tracenum := (tracenum+1)
(1)   96/       0 :                         endif
(1)   97/       0 :                        endm
(1)  102/       0 : =$0                 tracenum := 0
(1)  103/       0 :                     
(1)  105/       0 :                         ; disable a space optimization in AS so we can build a bit-perfect ROM
(1)  106/       0 :                         ; (the hard way, but it requires no modification of AS itself)
(1)  107/       0 :                     
(1)  108/       0 :                     
(1)  109/       0 :                     chkop function op,ref,(substr(lowstring(op),0,strlen(ref))<>ref)
(1)  110/       0 :                     
(1)  111/       0 :                     ; 1-arg instruction that's self-patching to remove 0-offset optimization
(1)  112/       0 :                     insn1op	 macro oper,x
(1)  113/       0 :                     	  if (chkop("x","0(") && chkop("x","id(") && chkop("x","slot_rout("))
(1)  114/       0 :                     		!oper	x
(1)  115/       0 :                     	  else
(1)  116/       0 :                     		!oper	1+x
(1)  117/       0 :                     		!org	*-1
(1)  118/       0 :                     		!dc.b	0
(1)  119/       0 :                     	  endif
(1)  120/       0 :                     	 endm
(1)  121/       0 :                     
(1)  122/       0 :                     ; 2-arg instruction that's self-patching to remove 0-offset optimization
(1)  123/       0 :                     insn2op	 macro oper,x,y
(1)  124/       0 :                     	  if (chkop("x","0(") && chkop("x","id(") && chkop("x","slot_rout("))
(1)  125/       0 :                     		  if (chkop("y","0(") && chkop("y","id(") && chkop("y","slot_rout("))
(1)  126/       0 :                     			!oper	x,y
(1)  127/       0 :                     		  else
(1)  128/       0 :                     			!oper	x,1+y
(1)  129/       0 :                     			!org	*-1
(1)  130/       0 :                     			!dc.b	0
(1)  131/       0 :                     		  endif
(1)  132/       0 :                     	  else
(1)  133/       0 :                     		if chkop("y","d")
(1)  134/       0 :                     		  if (chkop("y","0(") && chkop("y","id(") && chkop("y","slot_rout("))
(1)  135/       0 :                     start:
(1)  136/       0 :                     			!oper	1+x,y
(1)  137/       0 :                     end:
(1)  138/       0 :                     			!org	start+3
(1)  139/       0 :                     			!dc.b	0
(1)  140/       0 :                     			!org	end
(1)  141/       0 :                     		  else
(1)  142/       0 :                     			!oper	1+x,1+y
(1)  143/       0 :                     			!org	*-3
(1)  144/       0 :                     			!dc.b	0
(1)  145/       0 :                     			!org	*+1
(1)  146/       0 :                     			!dc.b	0
(1)  147/       0 :                     		  endif
(1)  148/       0 :                     		else
(1)  149/       0 :                     			!oper	1+x,y
(1)  150/       0 :                     			!org	*-1
(1)  151/       0 :                     			!dc.b	0
(1)  152/       0 :                     		endif
(1)  153/       0 :                     	  endif
(1)  154/       0 :                     	 endm
(1)  155/       0 :                     
(1)  156/       0 :                     	; instructions that were used with 0(a#) syntax
(1)  157/       0 :                     	; defined to assemble as they originally did
(1)  158/       0 :                     _move	macro
(1)  159/       0 :                     		insn2op move.ATTRIBUTE, ALLARGS
(1)  160/       0 :                     	endm
(1)  161/       0 :                     _add	macro
(1)  162/       0 :                     		insn2op add.ATTRIBUTE, ALLARGS
(1)  163/       0 :                     	endm
(1)  164/       0 :                     _addq	macro
(1)  165/       0 :                     		insn2op addq.ATTRIBUTE, ALLARGS
(1)  166/       0 :                     	endm
(1)  167/       0 :                     _cmp	macro
(1)  168/       0 :                     		insn2op cmp.ATTRIBUTE, ALLARGS
(1)  169/       0 :                     	endm
(1)  170/       0 :                     _cmpi	macro
(1)  171/       0 :                     		insn2op cmpi.ATTRIBUTE, ALLARGS
(1)  172/       0 :                     	endm
(1)  173/       0 :                     _clr	macro
(1)  174/       0 :                     		insn1op clr.ATTRIBUTE, ALLARGS
(1)  175/       0 :                     	endm
(1)  176/       0 :                     _tst	macro
(1)  177/       0 :                     		insn1op tst.ATTRIBUTE, ALLARGS
(1)  178/       0 :                     	endm
(1)  179/       0 :                     
      11/       0 :                     
      12/       0 :                     StartOfRom:
      13/       0 : 00FF FE00 0000 0206 Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
                    0000 03D6 0000 03DE 
      14/      10 : 0000 03E6 0000 03F2 		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
                    0000 03FA 0000 0402 
      15/      20 : 0000 040A 0000 0412 		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
                    0000 041A 0000 0426 
      16/      30 : 0000 0432 0000 0432 		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
                    0000 0432 0000 0432 
      17/      40 : 0000 0432 0000 0432 		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
                    0000 0432 0000 0432 
      18/      50 : 0000 0432 0000 0432 		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
                    0000 0432 0000 0432 
      19/      60 : 0000 0432 0000 0200 		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
                    0000 0200 0000 0200 
      20/      70 : 0000 1126 0000 0200 		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
                    0000 0B10 0000 0200 
      21/      80 : 0000 0200 0000 0200 		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
                    0000 0200 0000 0200 
      22/      90 : 0000 0200 0000 0200 		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
                    0000 0200 0000 0200 
      23/      A0 : 0000 0200 0000 0200 		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
                    0000 0200 0000 0200 
      24/      B0 : 0000 0200 0000 0200 		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
                    0000 0200 0000 0200 
      25/      C0 : 0000 0200 0000 0200 		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
                    0000 0200 0000 0200 
      26/      D0 : 0000 0200 0000 0200 		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
                    0000 0200 0000 0200 
      27/      E0 : 0000 0200 0000 0200 		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
                    0000 0200 0000 0200 
      28/      F0 : 0000 0200 0000 0200 		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
                    0000 0200 0000 0200 
      29/     100 : 5345 4741 204D 4547 Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID
                    4120 4452 4956 4520 
      30/     110 : 2843 2953 4547 4120 Date:		dc.b "(C)SEGA 1991.APR" ; Release date
                    3139 3931 2E41 5052 
      31/     120 : 534F 4E49 4320 494E Title_Local:	dc.b "SONIC INTO OVERDRIVE                            " ; Domestic name
                    544F 204F 5645 5244 
                    5249 5645 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
      32/     150 : 534F 4E49 4320 494E Title_Int:	dc.b "SONIC INTO OVERDRIVE                            " ; International name
                    544F 204F 5645 5244 
                    5249 5645 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
      33/     180 : 474D 2030 3030 3031 Serial:		dc.b "GM 00001009-00"   ; Serial/version number
                    3030 392D 3030      
      34/     18E : 0000                Checksum:	dc.w 0
      35/     190 : 4A20 2020 2020 2020 		dc.b "J               " ; I/O support
                    2020 2020 2020 2020 
      36/     1A0 : 0000 0000           RomStartLoc:	dc.l StartOfRom		; ROM start
      37/     1A4 : 0008 0FE9           RomEndLoc:	dc.l EndOfRom-1		; ROM end
      38/     1A8 : 00FF 0000           RamStartLoc:	dc.l $FF0000		; RAM start
      39/     1AC : 00FF FFFF           RamEndLoc:	dc.l $FFFFFF		; RAM end
      40/     1B0 : 2020 2020           SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
      41/     1B4 : 2020 2020           		dc.l $20202020		; SRAM start
      42/     1B8 : 2020 2020           		dc.l $20202020		; SRAM end
      43/     1BC : 2020 2020 2020 2020 Notes:		dc.b "                                                    "
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020           
      44/     1F0 : 4A55 4520 2020 2020 Region:		dc.b "JUE             " ; Region
                    2020 2020 2020 2020 
      45/     200 :                     
      46/     200 :                     ; ===========================================================================
      47/     200 :                     
      48/     200 :                     ErrorTrap:
      49/     200 : 4E71                		nop	
      50/     202 : 4E71                		nop	
      51/     204 : 60FA                		bra.s	ErrorTrap
      52/     206 :                     ; ===========================================================================
      53/     206 :                     
      54/     206 :                     EntryPoint:
      55/     206 : 4AB9 00A1 0008      		tst.l	($A10008).l	; test port A control
      56/     20C : 6606                		bne.s	PortA_Ok
      57/     20E : 4A79 00A1 000C      		tst.w	($A1000C).l	; test port C control
      58/     214 :                     
      59/     214 :                     PortA_Ok:
      60/     214 : 667C                		bne.s	PortC_Ok
      61/     216 : 4BFA 007C           		lea	SetupValues(pc),a5
      62/     21A : 4C9D 00E0           		movem.w	(a5)+,d5-d7
      63/     21E : 4CDD 1F00           		movem.l	(a5)+,a0-a4
      64/     222 : 1029 EF01           		move.b	-$10FF(a1),d0	; get hardware version
      65/     226 : 0200 000F           		andi.b	#$F,d0
      66/     22A : 6708                		beq.s	SkipSecurity
      67/     22C : 237C 5345 4741 2F00 		move.l	#'SEGA',$2F00(a1)
      68/     234 :                     
      69/     234 :                     SkipSecurity:
      70/     234 : 3014                		move.w	(a4),d0		; check	if VDP works
      71/     236 : 7000                		moveq	#0,d0
      72/     238 : 2C40                		movea.l	d0,a6
      73/     23A : 4E66                		move	a6,usp		; set usp to $0
      74/     23C : 7217                		moveq	#$17,d1
      75/     23E :                     
      76/     23E :                     VDPInitLoop:
      77/     23E : 1A1D                		move.b	(a5)+,d5	; add $8000 to value
      78/     240 : 3885                		move.w	d5,(a4)		; move value to	VDP register
      79/     242 : DA47                		add.w	d7,d5		; next register
      80/     244 : 51C9 FFF8           		dbf	d1,VDPInitLoop
      81/     248 : 289D                		move.l	(a5)+,(a4)
      82/     24A : 3680                		move.w	d0,(a3)		; clear	the screen
      83/     24C : 3287                		move.w	d7,(a1)		; stop the Z80
      84/     24E : 3487                		move.w	d7,(a2)		; reset	the Z80
      85/     250 :                     
      86/     250 :                     WaitForZ80:
      87/     250 : 0111                		btst	d0,(a1)		; has the Z80 stopped?
      88/     252 : 66FC                		bne.s	WaitForZ80	; if not, branch
      89/     254 : 7425                		moveq	#$25,d2
      90/     256 :                     
      91/     256 :                     Z80InitLoop:
      92/     256 : 10DD                		move.b	(a5)+,(a0)+
      93/     258 : 51CA FFFC           		dbf	d2,Z80InitLoop
      94/     25C : 3480                		move.w	d0,(a2)
      95/     25E : 3280                		move.w	d0,(a1)		; start	the Z80
      96/     260 : 3487                		move.w	d7,(a2)		; reset	the Z80
      97/     262 :                     
      98/     262 :                     ClrRAMLoop:
      99/     262 : 2D00                		move.l	d0,-(a6)
     100/     264 : 51CE FFFC           		dbf	d6,ClrRAMLoop	; clear	the entire RAM
     101/     268 : 289D                		move.l	(a5)+,(a4)	; set VDP display mode and increment
     102/     26A : 289D                		move.l	(a5)+,(a4)	; set VDP to CRAM write
     103/     26C : 761F                		moveq	#$1F,d3
     104/     26E :                     
     105/     26E :                     ClrCRAMLoop:
     106/     26E : 2680                		move.l	d0,(a3)
     107/     270 : 51CB FFFC           		dbf	d3,ClrCRAMLoop	; clear	the CRAM
     108/     274 : 289D                		move.l	(a5)+,(a4)
     109/     276 : 7813                		moveq	#$13,d4
     110/     278 :                     
     111/     278 :                     ClrVDPStuff:
     112/     278 : 2680                		move.l	d0,(a3)
     113/     27A : 51CC FFFC           		dbf	d4,ClrVDPStuff
     114/     27E : 7A03                		moveq	#3,d5
     115/     280 :                     
     116/     280 :                     PSGInitLoop:
     117/     280 : 175D 0011           		move.b	(a5)+,$11(a3)	; reset	the PSG
     118/     284 : 51CD FFFA           		dbf	d5,PSGInitLoop
     119/     288 : 3480                		move.w	d0,(a2)
     120/     28A : 4CD6 7FFF           		movem.l	(a6),d0-a6	; clear	all registers
     121/     28E : 46FC 2700           		move	#$2700,sr	; set the sr
     122/     292 :                     
     123/     292 :                     PortC_Ok:
     124/     292 : 606C                		bra.s	GameProgram
     125/     294 :                     ; ===========================================================================
     126/     294 : 8000                SetupValues:	dc.w $8000		; XREF: PortA_Ok
     127/     296 : 3FFF                		dc.w $3FFF
     128/     298 : 0100                		dc.w $100
     129/     29A :                     
     130/     29A : 00A0 0000           		dc.l $A00000		; start	of Z80 RAM
     131/     29E : 00A1 1100           		dc.l $A11100		; Z80 bus request
     132/     2A2 : 00A1 1200           		dc.l $A11200		; Z80 reset
     133/     2A6 : 00C0 0000           		dc.l $C00000
     134/     2AA : 00C0 0004           		dc.l $C00004		; address for VDP registers
     135/     2AE :                     
     136/     2AE : 0414 303C           		dc.b 4,	$14, $30, $3C	; values for VDP registers
     137/     2B2 : 076C 0000           		dc.b 7,	$6C, 0,	0
     138/     2B6 : 0000 FF00           		dc.b 0,	0, $FF,	0
     139/     2BA : 8137 0001           		dc.b $81, $37, 0, 1
     140/     2BE : 0100 00FF           		dc.b 1,	0, 0, $FF
     141/     2C2 : FF00 0080           		dc.b $FF, 0, 0,	$80
     142/     2C6 :                     
     143/     2C6 : 4000 0080           		dc.l $40000080
     144/     2CA :                     
     145/     2CA : AF01 D91F 1127 0021 		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
                    2600 F977           
     146/     2D6 : EDB0 DDE1 FDE1 ED47 		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
                    ED4F                
     147/     2E0 : D1E1 F108 D9C1 D1E1 		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
                    F1F9 F3             
     148/     2EB : ED56 36E9 E9        		dc.b $ED, $56, $36, $E9, $E9
     149/     2F0 :                     
     150/     2F0 : 8104                		dc.w $8104		; value	for VDP	display	mode
     151/     2F2 : 8F02                		dc.w $8F02		; value	for VDP	increment
     152/     2F4 : C000 0000           		dc.l $C0000000		; value	for CRAM write mode
     153/     2F8 : 4000 0010           		dc.l $40000010
     154/     2FC :                     
     155/     2FC : 9FBF DFFF           		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
     156/     300 :                     ; ===========================================================================
     157/     300 :                     
     158/     300 :                     GameProgram:
     159/     300 : 4A79 00C0 0004      		tst.w	($C00004).l
     160/     306 : 0839 0006 00A1 000D 		btst	#6,($A1000D).l
     161/     30E : 670C                		beq.s	CheckSumCheck
     162/     310 : 0CB8 696E 6974 FFFC 		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
     163/     318 : 6700 004A           		beq.w	GameInit	; if yes, branch
     164/     31C :                     
     165/     31C :                     CheckSumCheck:
     166/     31C : 207C 0000 0200      		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
     167/     322 : 227C 0000 01A4      		movea.l	#RomEndLoc,a1	; stop at end of ROM
     168/     328 : 2011                		move.l	(a1),d0
     169/     32A : 7200                		moveq	#0,d1
     170/     32C :                     
     171/     32C :                     loc_32C:
     172/     32C : D258                		add.w	(a0)+,d1
     173/     32E : B088                		cmp.l	a0,d0
     174/     330 : 64FA                		bcc.s	loc_32C
     175/     332 : 227C 0000 018E      		movea.l	#Checksum,a1	; read the checksum
     176/     338 : B251                		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
     177/     33A : 6600 007C           		bne.w	CheckSumError	; if they don"t match, branch
     178/     33E : 4DF8 FE00           		lea	($FFFFFE00).w,a6
     179/     342 : 7E00                		moveq	#0,d7
     180/     344 : 3C3C 007F           		move.w	#$7F,d6
     181/     348 :                     
     182/     348 :                     loc_348:
     183/     348 : 2CC7                		move.l	d7,(a6)+
     184/     34A : 51CE FFFC           		dbf	d6,loc_348
     185/     34E : 1039 00A1 0001      		move.b	($A10001).l,d0
     186/     354 : 0200 00C0           		andi.b	#$C0,d0
     187/     358 : 11C0 FFF8           		move.b	d0,($FFFFFFF8).w
     188/     35C : 21FC 696E 6974 FFFC 		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won"t be run again
     189/     364 :                     
     190/     364 :                     GameInit:
     191/     364 : 4DF9 00FF 0000      		lea	($FF0000).l,a6
     192/     36A : 7E00                		moveq	#0,d7
     193/     36C : 3C3C 3F7F           		move.w	#$3F7F,d6
     194/     370 :                     
     195/     370 :                     GameClrRAM:
     196/     370 : 2CC7                		move.l	d7,(a6)+
     197/     372 : 51CE FFFC           		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
     198/     376 : 6100 0EAA           		bsr.w	VDPSetupGame
     199/     37A : 6100 0FD6           		bsr.w	SoundDriverLoad
     200/     37E : 6100 0E36           		bsr.w	JoypadInit
     201/     382 : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
     202/     388 :                     
     203/     388 :                     MainGameLoop:
     204/     388 : 1038 F600           		move.b	($FFFFF600).w,d0 ; load	Game Mode
     205/     38C : 0240 001C           		andi.w	#$1C,d0
     206/     390 : 4EBB 0004           		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
     207/     394 : 60F2                		bra.s	MainGameLoop
     208/     396 :                     ; ===========================================================================
     209/     396 :                     ; ---------------------------------------------------------------------------
     210/     396 :                     ; Main game mode array
     211/     396 :                     ; ---------------------------------------------------------------------------
     212/     396 :                     
     213/     396 :                     GameModeArray:
     214/     396 : 6000 2A88           		bra.w	SegaScreen	; Sega Screen ($00)
     215/     39A :                     ; ===========================================================================
     216/     39A : 6000 2B8C           		bra.w	TitleScreen	; Title	Screen ($04)
     217/     39E :                     ; ===========================================================================
     218/     39E : 6000 3412           		bra.w	Level		; Demo Mode ($08)
     219/     3A2 :                     ; ===========================================================================
     220/     3A2 : 6000 340E           		bra.w	Level		; Normal Level ($0C)
     221/     3A6 :                     ; ===========================================================================
     222/     3A6 : 6000 4248           		bra.w	SpecialStage	; Special Stage	($10)
     223/     3AA :                     ; ===========================================================================
     224/     3AA : 6000 4948           		bra.w	ContinueScreen	; Continue Screen ($14)
     225/     3AE :                     ; ===========================================================================
     226/     3AE : 6000 4D4A           		bra.w	EndingSequence	; End of game sequence ($18)
     227/     3B2 :                     ; ===========================================================================
     228/     3B2 : 6000 541C           		bra.w	Credits		; Credits ($1C)
     229/     3B6 :                     ; ===========================================================================
     230/     3B6 : 4E75                		rts	
     231/     3B8 :                     ; ===========================================================================
     232/     3B8 :                     
     233/     3B8 :                     CheckSumError:
     234/     3B8 : 6100 0E68           		bsr.w	VDPSetupGame
     235/     3BC : 23FC C000 0000 00C0 		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
                    0004                
     236/     3C6 : 7E3F                		moveq	#$3F,d7
     237/     3C8 :                     
     238/     3C8 :                     CheckSum_Red:
     239/     3C8 : 33FC 000E 00C0 0000 		move.w	#$E,($C00000).l	; fill screen with colour red
     240/     3D0 : 51CF FFF6           		dbf	d7,CheckSum_Red	; repeat $3F more times
     241/     3D4 :                     
     242/     3D4 :                     CheckSum_Loop:
     243/     3D4 : 60FE                		bra.s	CheckSum_Loop
     244/     3D6 :                     ; ===========================================================================
     245/     3D6 :                     
     246/     3D6 :                     BusError:
     247/     3D6 : 11FC 0002 FC44      		move.b	#2,($FFFFFC44).w
     248/     3DC : 605C                		bra.s	loc_43A
     249/     3DE :                     ; ===========================================================================
     250/     3DE :                     
     251/     3DE :                     AddressError:
     252/     3DE : 11FC 0004 FC44      		move.b	#4,($FFFFFC44).w
     253/     3E4 : 6054                		bra.s	loc_43A
     254/     3E6 :                     ; ===========================================================================
     255/     3E6 :                     
     256/     3E6 :                     IllegalInstr:
     257/     3E6 : 11FC 0006 FC44      		move.b	#6,($FFFFFC44).w
     258/     3EC : 54AF 0002           		addq.l	#2,2(sp)
     259/     3F0 : 6070                		bra.s	loc_462
     260/     3F2 :                     ; ===========================================================================
     261/     3F2 :                     
     262/     3F2 :                     ZeroDivide:
     263/     3F2 : 11FC 0008 FC44      		move.b	#8,($FFFFFC44).w
     264/     3F8 : 6068                		bra.s	loc_462
     265/     3FA :                     ; ===========================================================================
     266/     3FA :                     
     267/     3FA :                     ChkInstr:
     268/     3FA : 11FC 000A FC44      		move.b	#$A,($FFFFFC44).w
     269/     400 : 6060                		bra.s	loc_462
     270/     402 :                     ; ===========================================================================
     271/     402 :                     
     272/     402 :                     TrapvInstr:
     273/     402 : 11FC 000C FC44      		move.b	#$C,($FFFFFC44).w
     274/     408 : 6058                		bra.s	loc_462
     275/     40A :                     ; ===========================================================================
     276/     40A :                     
     277/     40A :                     PrivilegeViol:
     278/     40A : 11FC 000E FC44      		move.b	#$E,($FFFFFC44).w
     279/     410 : 6050                		bra.s	loc_462
     280/     412 :                     ; ===========================================================================
     281/     412 :                     
     282/     412 :                     Trace:
     283/     412 : 11FC 0010 FC44      		move.b	#$10,($FFFFFC44).w
     284/     418 : 6048                		bra.s	loc_462
     285/     41A :                     ; ===========================================================================
     286/     41A :                     
     287/     41A :                     Line1010Emu:
     288/     41A : 11FC 0012 FC44      		move.b	#$12,($FFFFFC44).w
     289/     420 : 54AF 0002           		addq.l	#2,2(sp)
     290/     424 : 603C                		bra.s	loc_462
     291/     426 :                     ; ===========================================================================
     292/     426 :                     
     293/     426 :                     Line1111Emu:
     294/     426 : 11FC 0014 FC44      		move.b	#$14,($FFFFFC44).w
     295/     42C : 54AF 0002           		addq.l	#2,2(sp)
     296/     430 : 6030                		bra.s	loc_462
     297/     432 :                     ; ===========================================================================
     298/     432 :                     
     299/     432 :                     ErrorExcept:
     300/     432 : 11FC 0000 FC44      		move.b	#0,($FFFFFC44).w
     301/     438 : 6028                		bra.s	loc_462
     302/     43A :                     ; ===========================================================================
     303/     43A :                     
     304/     43A :                     loc_43A:
     305/     43A : 46FC 2700           		move	#$2700,sr
     306/     43E : 544F                		addq.w	#2,sp
     307/     440 : 21DF FC40           		move.l	(sp)+,($FFFFFC40).w
     308/     444 : 544F                		addq.w	#2,sp
     309/     446 : 48F8 FFFF FC00      		movem.l	d0-a7,($FFFFFC00).w
     310/     44C : 6100 003A           		bsr.w	ShowErrorMsg
     311/     450 : 202F 0002           		move.l	2(sp),d0
     312/     454 : 6100 0164           		bsr.w	sub_5BA
     313/     458 : 2038 FC40           		move.l	($FFFFFC40).w,d0
     314/     45C : 6100 015C           		bsr.w	sub_5BA
     315/     460 : 6016                		bra.s	loc_478
     316/     462 :                     ; ===========================================================================
     317/     462 :                     
     318/     462 :                     loc_462:
     319/     462 : 46FC 2700           		move	#$2700,sr
     320/     466 : 48F8 FFFF FC00      		movem.l	d0-a7,($FFFFFC00).w
     321/     46C : 6100 001A           		bsr.w	ShowErrorMsg
     322/     470 : 202F 0002           		move.l	2(sp),d0
     323/     474 : 6100 0144           		bsr.w	sub_5BA
     324/     478 :                     
     325/     478 :                     loc_478:
     326/     478 : 6100 0166           		bsr.w	ErrorWaitForC
     327/     47C : 4CF8 FFFF FC00      		movem.l	($FFFFFC00).w,d0-a7
     328/     482 : 46FC 2300           		move	#$2300,sr
     329/     486 : 4E73                		rte	
     330/     488 :                     
     331/     488 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     332/     488 :                     
     333/     488 :                     
     334/     488 :                     ShowErrorMsg:				; XREF: loc_43A; loc_462
     335/     488 : 4DF9 00C0 0000      		lea	($C00000).l,a6
     336/     48E : 23FC 7800 0003 00C0 		move.l	#$78000003,($C00004).l
                    0004                
     337/     498 : 41F9 0000 05F0      		lea	(Art_Text).l,a0
     338/     49E : 323C 027F           		move.w	#$27F,d1
     339/     4A2 :                     
     340/     4A2 :                     Error_LoadGfx:
     341/     4A2 : 3C98                		move.w	(a0)+,(a6)
     342/     4A4 : 51C9 FFFC           		dbf	d1,Error_LoadGfx
     343/     4A8 : 7000                		moveq	#0,d0		; clear	d0
     344/     4AA : 1038 FC44           		move.b	($FFFFFC44).w,d0 ; load	error code
     345/     4AE : 303B 0022           		move.w	ErrorText(pc,d0.w),d0
     346/     4B2 : 41FB 001E           		lea	ErrorText(pc,d0.w),a0
     347/     4B6 : 23FC 4604 0003 00C0 		move.l	#$46040003,($C00004).l ; position
                    0004                
     348/     4C0 : 7212                		moveq	#$12,d1		; number of characters
     349/     4C2 :                     
     350/     4C2 :                     Error_LoopChars:
     351/     4C2 : 7000                		moveq	#0,d0
     352/     4C4 : 1018                		move.b	(a0)+,d0
     353/     4C6 : 0640 0790           		addi.w	#$790,d0
     354/     4CA : 3C80                		move.w	d0,(a6)
     355/     4CC : 51C9 FFF4           		dbf	d1,Error_LoopChars ; repeat for	number of characters
     356/     4D0 : 4E75                		rts	
     357/     4D2 :                     ; End of function ShowErrorMsg
     358/     4D2 :                     
     359/     4D2 :                     ; ===========================================================================
     360/     4D2 : 0016 0029           ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
     361/     4D6 : 003C 004F           		dc.w asc_50E-ErrorText,	asc_521-ErrorText
     362/     4DA : 0062 0075           		dc.w asc_534-ErrorText,	asc_547-ErrorText
     363/     4DE : 0088 009B           		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
     364/     4E2 : 00AE 00C1           		dc.w asc_580-ErrorText,	asc_593-ErrorText
     365/     4E6 : 00D4                		dc.w asc_5A6-ErrorText
     366/     4E8 : 4552 524F 5220 4558 asc_4E8:	dc.b "ERROR EXCEPTION    "
                    4345 5054 494F 4E20 
                    2020 20             
     367/     4FB : 4255 5320 4552 524F asc_4FB:	dc.b "BUS ERROR          "
                    5220 2020 2020 2020 
                    2020 20             
     368/     50E : 4144 4452 4553 5320 asc_50E:	dc.b "ADDRESS ERROR      "
                    4552 524F 5220 2020 
                    2020 20             
     369/     521 : 494C 4C45 4741 4C20 asc_521:	dc.b "ILLEGAL INSTRUCTION"
                    494E 5354 5255 4354 
                    494F 4E             
     370/     534 : 4045 524F 2044 4956 asc_534:	dc.b "@ERO DIVIDE        "
                    4944 4520 2020 2020 
                    2020 20             
     371/     547 : 4348 4B20 494E 5354 asc_547:	dc.b "CHK INSTRUCTION    "
                    5255 4354 494F 4E20 
                    2020 20             
     372/     55A : 5452 4150 5620 494E asc_55A:	dc.b "TRAPV INSTRUCTION  "
                    5354 5255 4354 494F 
                    4E20 20             
     373/     56D : 5052 4956 494C 4547 asc_56D:	dc.b "PRIVILEGE VIOLATION"
                    4520 5649 4F4C 4154 
                    494F 4E             
     374/     580 : 5452 4143 4520 2020 asc_580:	dc.b "TRACE              "
                    2020 2020 2020 2020 
                    2020 20             
     375/     593 : 4C49 4E45 2031 3031 asc_593:	dc.b "LINE 1010 EMULATOR "
                    3020 454D 554C 4154 
                    4F52 20             
     376/     5A6 : 4C49 4E45 2031 3131 asc_5A6:	dc.b "LINE 1111 EMULATOR "
                    3120 454D 554C 4154 
                    4F52 20             
     377/     5B9 : (MACRO)             		align 2
     377/     5B9 :  (MACRO-2)                  cnop 0,2
     377/     5B9 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
     377/     5B9 : =$1                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
     377/     5BA :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
     378/     5BA :                     
     379/     5BA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     380/     5BA :                     
     381/     5BA :                     
     382/     5BA :                     sub_5BA:				; XREF: loc_43A; loc_462
     383/     5BA : 3CBC 07CA           		move.w	#$7CA,(a6)
     384/     5BE : 7407                		moveq	#7,d2
     385/     5C0 :                     
     386/     5C0 :                     loc_5C0:
     387/     5C0 : E998                		rol.l	#4,d0
     388/     5C2 : 6106                		bsr.s	sub_5CA
     389/     5C4 : 51CA FFFA           		dbf	d2,loc_5C0
     390/     5C8 : 4E75                		rts	
     391/     5CA :                     ; End of function sub_5BA
     392/     5CA :                     
     393/     5CA :                     
     394/     5CA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     395/     5CA :                     
     396/     5CA :                     
     397/     5CA :                     sub_5CA:				; XREF: sub_5BA
     398/     5CA : 3200                		move.w	d0,d1
     399/     5CC : 0241 000F           		andi.w	#$F,d1
     400/     5D0 : 0C41 000A           		cmpi.w	#$A,d1
     401/     5D4 : 6502                		bcs.s	loc_5D8
     402/     5D6 : 5E41                		addq.w	#7,d1
     403/     5D8 :                     
     404/     5D8 :                     loc_5D8:
     405/     5D8 : 0641 07C0           		addi.w	#$7C0,d1
     406/     5DC : 3C81                		move.w	d1,(a6)
     407/     5DE : 4E75                		rts	
     408/     5E0 :                     ; End of function sub_5CA
     409/     5E0 :                     
     410/     5E0 :                     
     411/     5E0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     412/     5E0 :                     
     413/     5E0 :                     
     414/     5E0 :                     ErrorWaitForC:				; XREF: loc_478
     415/     5E0 : 6100 0C04           		bsr.w	ReadJoypads
     416/     5E4 : 0C38 0020 F605      		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
     417/     5EA : 6600 FFF4           		bne.w	ErrorWaitForC	; if not, branch
     418/     5EE : 4E75                		rts	
     419/     5F0 :                     ; End of function ErrorWaitForC
     420/     5F0 :                     
     421/     5F0 :                     ; ===========================================================================
     422/     5F0 :                     
     423/     5F0 :                     Art_Text:	binclude	artunc/menutext.bin	; text used in level select and debug mode
     424/     B10 : (MACRO)             		align 2
     424/     B10 :  (MACRO-2)                  cnop 0,2
     424/     B10 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
     425/     B10 :                     
     426/     B10 :                     ; ===========================================================================
     427/     B10 :                     
     428/     B10 :                     loc_B10:				; XREF: Vectors
     429/     B10 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
     430/     B14 : 4A38 F62A           		tst.b	($FFFFF62A).w
     431/     B18 : 676E                		beq.s	loc_B88
     432/     B1A : 3039 00C0 0004      		move.w	($C00004).l,d0
     433/     B20 : 23FC 4000 0010 00C0 		move.l	#$40000010,($C00004).l
                    0004                
     434/     B2A : 23F8 F616 00C0 0000 		move.l	($FFFFF616).w,($C00000).l
     435/     B32 : 0838 0006 FFF8      		btst	#6,($FFFFFFF8).w
     436/     B38 : 6708                		beq.s	loc_B42
     437/     B3A : 303C 0700           		move.w	#$700,d0
     438/     B3E :                     
     439/     B3E :                     loc_B3E:
     440/     B3E : 51C8 FFFE           		dbf	d0,loc_B3E
     441/     B42 :                     
     442/     B42 :                     loc_B42:
     443/     B42 : 1038 F62A           		move.b	($FFFFF62A).w,d0
     444/     B46 : 11FC 0000 F62A      		move.b	#0,($FFFFF62A).w
     445/     B4C : 31FC 0001 F644      		move.w	#1,($FFFFF644).w
     446/     B52 : 0240 003E           		andi.w	#$3E,d0
     447/     B56 : 303B 0016           		move.w	off_B6E(pc,d0.w),d0
     448/     B5A : 4EBB 0012           		jsr	off_B6E(pc,d0.w)
     449/     B5E :                     
     450/     B5E :                     loc_B5E:				; XREF: loc_B88
     451/     B5E : 4EB9 0007 28EA      		jsr	(sub_71B4C).l
     452/     B64 :                     
     453/     B64 :                     loc_B64:				; XREF: loc_D50
     454/     B64 : 52B8 FE0C           		addq.l	#1,($FFFFFE0C).w
     455/     B68 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
     456/     B6C : 4E73                		rte	
     457/     B6E :                     ; ===========================================================================
     458/     B6E : 001A 00C4           off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
     459/     B72 : 00D6 00F0           		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
     460/     B76 : 0100 0238           		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
     461/     B7A : 0304 041C           		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
     462/     B7E : 00F6 042C           		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
     463/     B82 : 00C8 0438           		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
     464/     B86 : 0304                		dc.w loc_E72-off_B6E
     465/     B88 :                     ; ===========================================================================
     466/     B88 :                     
     467/     B88 :                     loc_B88:				; XREF: loc_B10; off_B6E
     468/     B88 : 0C38 008C F600      		cmpi.b	#$8C,($FFFFF600).w
     469/     B8E : 670A                		beq.s	loc_B9A
     470/     B90 : 0C38 000C F600      		cmpi.b	#$C,($FFFFF600).w
     471/     B96 : 6600 FFC6           		bne.w	loc_B5E
     472/     B9A :                     
     473/     B9A :                     loc_B9A:
     474/     B9A : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
     475/     BA0 : 6600 FFBC           		bne.w	loc_B5E		; if not, branch
     476/     BA4 : 3039 00C0 0004      		move.w	($C00004).l,d0
     477/     BAA : 0838 0006 FFF8      		btst	#6,($FFFFFFF8).w
     478/     BB0 : 6708                		beq.s	loc_BBA
     479/     BB2 : 303C 0700           		move.w	#$700,d0
     480/     BB6 :                     
     481/     BB6 :                     loc_BB6:
     482/     BB6 : 51C8 FFFE           		dbf	d0,loc_BB6
     483/     BBA :                     
     484/     BBA :                     loc_BBA:
     485/     BBA : 31FC 0001 F644      		move.w	#1,($FFFFF644).w
     486/     BC0 : 33FC 0100 00A1 1100 		move.w	#$100,($A11100).l
     487/     BC8 :                     
     488/     BC8 :                     loc_BC8:
     489/     BC8 : 0839 0000 00A1 1100 		btst	#0,($A11100).l
     490/     BD0 : 66F6                		bne.s	loc_BC8
     491/     BD2 : 4A38 F64E           		tst.b	($FFFFF64E).w
     492/     BD6 : 6626                		bne.s	loc_BFE
     493/     BD8 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     494/     BDE : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     495/     BE4 : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     496/     BEA : 3ABC 977F           		move.w	#$977F,(a5)
     497/     BEE : 3ABC C000           		move.w	#$C000,(a5)
     498/     BF2 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     499/     BF8 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     500/     BFC : 6024                		bra.s	loc_C22
     501/     BFE :                     ; ===========================================================================
     502/     BFE :                     
     503/     BFE :                     loc_BFE:				; XREF: loc_BC8
     504/     BFE : 4BF9 00C0 0004      		lea	($C00004).l,a5
     505/     C04 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     506/     C0A : 2ABC 96FD 9540      		move.l	#$96FD9540,(a5)
     507/     C10 : 3ABC 977F           		move.w	#$977F,(a5)
     508/     C14 : 3ABC C000           		move.w	#$C000,(a5)
     509/     C18 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     510/     C1E : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     511/     C22 :                     
     512/     C22 :                     loc_C22:				; XREF: loc_BC8
     513/     C22 : 3AB8 F624           		move.w	($FFFFF624).w,(a5)
     514/     C26 : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l
     515/     C2E : 6000 FF2E           		bra.w	loc_B5E
     516/     C32 :                     ; ===========================================================================
     517/     C32 :                     
     518/     C32 :                     loc_C32:				; XREF: off_B6E
     519/     C32 : 6100 043A           		bsr.w	sub_106E
     520/     C36 :                     
     521/     C36 :                     loc_C36:				; XREF: off_B6E
     522/     C36 : 4A78 F614           		tst.w	($FFFFF614).w
     523/     C3A : 6700 0006           		beq.w	locret_C42
     524/     C3E : 5378 F614           		subq.w	#1,($FFFFF614).w
     525/     C42 :                     
     526/     C42 :                     locret_C42:
     527/     C42 : 4E75                		rts	
     528/     C44 :                     ; ===========================================================================
     529/     C44 :                     
     530/     C44 :                     loc_C44:				; XREF: off_B6E
     531/     C44 : 6100 0428           		bsr.w	sub_106E
     532/     C48 : 6100 5C48           		bsr.w	sub_6886
     533/     C4C : 6100 09F4           		bsr.w	sub_1642
     534/     C50 : 4A78 F614           		tst.w	($FFFFF614).w
     535/     C54 : 6700 0006           		beq.w	locret_C5C
     536/     C58 : 5378 F614           		subq.w	#1,($FFFFF614).w
     537/     C5C :                     
     538/     C5C :                     locret_C5C:
     539/     C5C : 4E75                		rts	
     540/     C5E :                     ; ===========================================================================
     541/     C5E :                     
     542/     C5E :                     loc_C5E:				; XREF: off_B6E
     543/     C5E : 6100 040E           		bsr.w	sub_106E
     544/     C62 : 4E75                		rts	
     545/     C64 :                     ; ===========================================================================
     546/     C64 :                     
     547/     C64 :                     loc_C64:				; XREF: off_B6E
     548/     C64 : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
     549/     C6A : 6700 013A           		beq.w	loc_DA6		; if yes, branch
     550/     C6E :                     
     551/     C6E :                     loc_C6E:				; XREF: off_B6E
     552/     C6E : 33FC 0100 00A1 1100 		move.w	#$100,($A11100).l ; stop the Z80
     553/     C76 :                     
     554/     C76 :                     loc_C76:
     555/     C76 : 0839 0000 00A1 1100 		btst	#0,($A11100).l	; has Z80 stopped?
     556/     C7E : 66F6                		bne.s	loc_C76		; if not, branch
     557/     C80 : 6100 0564           		bsr.w	ReadJoypads
     558/     C84 : 4A38 F64E           		tst.b	($FFFFF64E).w
     559/     C88 : 6626                		bne.s	loc_CB0
     560/     C8A : 4BF9 00C0 0004      		lea	($C00004).l,a5
     561/     C90 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     562/     C96 : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     563/     C9C : 3ABC 977F           		move.w	#$977F,(a5)
     564/     CA0 : 3ABC C000           		move.w	#$C000,(a5)
     565/     CA4 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     566/     CAA : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     567/     CAE : 6024                		bra.s	loc_CD4
     568/     CB0 :                     ; ===========================================================================
     569/     CB0 :                     
     570/     CB0 :                     loc_CB0:				; XREF: loc_C76
     571/     CB0 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     572/     CB6 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     573/     CBC : 2ABC 96FD 9540      		move.l	#$96FD9540,(a5)
     574/     CC2 : 3ABC 977F           		move.w	#$977F,(a5)
     575/     CC6 : 3ABC C000           		move.w	#$C000,(a5)
     576/     CCA : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     577/     CD0 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     578/     CD4 :                     
     579/     CD4 :                     loc_CD4:				; XREF: loc_C76
     580/     CD4 : 3AB8 F624           		move.w	($FFFFF624).w,(a5)
     581/     CD8 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     582/     CDE : 2ABC 9401 93C0      		move.l	#$940193C0,(a5)
     583/     CE4 : 2ABC 96E6 9500      		move.l	#$96E69500,(a5)
     584/     CEA : 3ABC 977F           		move.w	#$977F,(a5)
     585/     CEE : 3ABC 7C00           		move.w	#$7C00,(a5)
     586/     CF2 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     587/     CF8 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     588/     CFC : 4BF9 00C0 0004      		lea	($C00004).l,a5
     589/     D02 : 2ABC 9401 9340      		move.l	#$94019340,(a5)
     590/     D08 : 2ABC 96FC 9500      		move.l	#$96FC9500,(a5)
     591/     D0E : 3ABC 977F           		move.w	#$977F,(a5)
     592/     D12 : 3ABC 7800           		move.w	#$7800,(a5)
     593/     D16 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     594/     D1C : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     595/     D20 : 4A38 F767           		tst.b	($FFFFF767).w
     596/     D24 : 672A                		beq.s	loc_D50
     597/     D26 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     598/     D2C : 2ABC 9401 9370      		move.l	#$94019370,(a5)
     599/     D32 : 2ABC 96E4 9500      		move.l	#$96E49500,(a5)
     600/     D38 : 3ABC 977F           		move.w	#$977F,(a5)
     601/     D3C : 3ABC 7000           		move.w	#$7000,(a5)
     602/     D40 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     603/     D46 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     604/     D4A : 11FC 0000 F767      		move.b	#0,($FFFFF767).w
     605/     D50 :                     
     606/     D50 :                     loc_D50:
     607/     D50 : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l
     608/     D58 : 4CF8 00FF F700      		movem.l	($FFFFF700).w,d0-d7
     609/     D5E : 48F8 00FF FF10      		movem.l	d0-d7,($FFFFFF10).w
     610/     D64 : 4CF8 0003 F754      		movem.l	($FFFFF754).w,d0-d1
     611/     D6A : 48F8 0003 FF30      		movem.l	d0-d1,($FFFFFF30).w
     612/     D70 : 0C38 0060 F625      		cmpi.b	#$60,($FFFFF625).w
     613/     D76 : 640C                		bcc.s	Demo_Time
     614/     D78 : 11FC 0001 F64F      		move.b	#1,($FFFFF64F).w
     615/     D7E : 588F                		addq.l	#4,sp
     616/     D80 : 6000 FDE2           		bra.w	loc_B64
     617/     D84 :                     
     618/     D84 :                     ; ---------------------------------------------------------------------------
     619/     D84 :                     ; Subroutine to	run a demo for an amount of time
     620/     D84 :                     ; ---------------------------------------------------------------------------
     621/     D84 :                     
     622/     D84 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     623/     D84 :                     
     624/     D84 :                     
     625/     D84 :                     Demo_Time:				; XREF: loc_D50; PalToCRAM
     626/     D84 : 6100 5B38           		bsr.w	LoadTilesAsYouMove
     627/     D88 : 4EB9 0001 C2BE      		jsr	(AniArt_Load).l
     628/     D8E : 4EB9 0001 C94E      		jsr	(HudUpdate).l
     629/     D94 : 6100 08C8           		bsr.w	sub_165E
     630/     D98 : 4A78 F614           		tst.w	($FFFFF614).w	; is there time	left on	the demo?
     631/     D9C : 6700 0006           		beq.w	Demo_TimeEnd	; if not, branch
     632/     DA0 : 5378 F614           		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
     633/     DA4 :                     
     634/     DA4 :                     Demo_TimeEnd:
     635/     DA4 : 4E75                		rts	
     636/     DA6 :                     ; End of function Demo_Time
     637/     DA6 :                     
     638/     DA6 :                     ; ===========================================================================
     639/     DA6 :                     
     640/     DA6 :                     loc_DA6:				; XREF: off_B6E
     641/     DA6 : 33FC 0100 00A1 1100 		move.w	#$100,($A11100).l ; stop the Z80
     642/     DAE :                     
     643/     DAE :                     loc_DAE:
     644/     DAE : 0839 0000 00A1 1100 		btst	#0,($A11100).l	; has Z80 stopped?
     645/     DB6 : 66F6                		bne.s	loc_DAE		; if not, branch
     646/     DB8 : 6100 042C           		bsr.w	ReadJoypads
     647/     DBC : 4BF9 00C0 0004      		lea	($C00004).l,a5
     648/     DC2 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     649/     DC8 : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     650/     DCE : 3ABC 977F           		move.w	#$977F,(a5)
     651/     DD2 : 3ABC C000           		move.w	#$C000,(a5)
     652/     DD6 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     653/     DDC : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     654/     DE0 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     655/     DE6 : 2ABC 9401 9340      		move.l	#$94019340,(a5)
     656/     DEC : 2ABC 96FC 9500      		move.l	#$96FC9500,(a5)
     657/     DF2 : 3ABC 977F           		move.w	#$977F,(a5)
     658/     DF6 : 3ABC 7800           		move.w	#$7800,(a5)
     659/     DFA : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     660/     E00 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     661/     E04 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     662/     E0A : 2ABC 9401 93C0      		move.l	#$940193C0,(a5)
     663/     E10 : 2ABC 96E6 9500      		move.l	#$96E69500,(a5)
     664/     E16 : 3ABC 977F           		move.w	#$977F,(a5)
     665/     E1A : 3ABC 7C00           		move.w	#$7C00,(a5)
     666/     E1E : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     667/     E24 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     668/     E28 : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l
     669/     E30 : 6100 3B44           		bsr.w	PalCycle_SS
     670/     E34 : 4A38 F767           		tst.b	($FFFFF767).w
     671/     E38 : 672A                		beq.s	loc_E64
     672/     E3A : 4BF9 00C0 0004      		lea	($C00004).l,a5
     673/     E40 : 2ABC 9401 9370      		move.l	#$94019370,(a5)
     674/     E46 : 2ABC 96E4 9500      		move.l	#$96E49500,(a5)
     675/     E4C : 3ABC 977F           		move.w	#$977F,(a5)
     676/     E50 : 3ABC 7000           		move.w	#$7000,(a5)
     677/     E54 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     678/     E5A : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     679/     E5E : 11FC 0000 F767      		move.b	#0,($FFFFF767).w
     680/     E64 :                     
     681/     E64 :                     loc_E64:
     682/     E64 : 4A78 F614           		tst.w	($FFFFF614).w
     683/     E68 : 6700 0006           		beq.w	locret_E70
     684/     E6C : 5378 F614           		subq.w	#1,($FFFFF614).w
     685/     E70 :                     
     686/     E70 :                     locret_E70:
     687/     E70 : 4E75                		rts	
     688/     E72 :                     ; ===========================================================================
     689/     E72 :                     
     690/     E72 :                     loc_E72:				; XREF: off_B6E
     691/     E72 : 33FC 0100 00A1 1100 		move.w	#$100,($A11100).l ; stop the Z80
     692/     E7A :                     
     693/     E7A :                     loc_E7A:
     694/     E7A : 0839 0000 00A1 1100 		btst	#0,($A11100).l	; has Z80 stopped?
     695/     E82 : 66F6                		bne.s	loc_E7A		; if not, branch
     696/     E84 : 6100 0360           		bsr.w	ReadJoypads
     697/     E88 : 4A38 F64E           		tst.b	($FFFFF64E).w
     698/     E8C : 6626                		bne.s	loc_EB4
     699/     E8E : 4BF9 00C0 0004      		lea	($C00004).l,a5
     700/     E94 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     701/     E9A : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     702/     EA0 : 3ABC 977F           		move.w	#$977F,(a5)
     703/     EA4 : 3ABC C000           		move.w	#$C000,(a5)
     704/     EA8 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     705/     EAE : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     706/     EB2 : 6024                		bra.s	loc_ED8
     707/     EB4 :                     ; ===========================================================================
     708/     EB4 :                     
     709/     EB4 :                     loc_EB4:				; XREF: loc_E7A
     710/     EB4 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     711/     EBA : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     712/     EC0 : 2ABC 96FD 9540      		move.l	#$96FD9540,(a5)
     713/     EC6 : 3ABC 977F           		move.w	#$977F,(a5)
     714/     ECA : 3ABC C000           		move.w	#$C000,(a5)
     715/     ECE : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     716/     ED4 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     717/     ED8 :                     
     718/     ED8 :                     loc_ED8:				; XREF: loc_E7A
     719/     ED8 : 3AB8 F624           		move.w	($FFFFF624).w,(a5)
     720/     EDC : 4BF9 00C0 0004      		lea	($C00004).l,a5
     721/     EE2 : 2ABC 9401 93C0      		move.l	#$940193C0,(a5)
     722/     EE8 : 2ABC 96E6 9500      		move.l	#$96E69500,(a5)
     723/     EEE :                     
     724/     EEE :                     loc_EEE:
     725/     EEE : 3ABC 977F           		move.w	#$977F,(a5)
     726/     EF2 : 3ABC 7C00           		move.w	#$7C00,(a5)
     727/     EF6 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     728/     EFC : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     729/     F00 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     730/     F06 : 2ABC 9401 9340      		move.l	#$94019340,(a5)
     731/     F0C : 2ABC 96FC 9500      		move.l	#$96FC9500,(a5)
     732/     F12 : 3ABC 977F           		move.w	#$977F,(a5)
     733/     F16 : 3ABC 7800           		move.w	#$7800,(a5)
     734/     F1A : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     735/     F20 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     736/     F24 : 4A38 F767           		tst.b	($FFFFF767).w
     737/     F28 : 672A                		beq.s	loc_F54
     738/     F2A : 4BF9 00C0 0004      		lea	($C00004).l,a5
     739/     F30 : 2ABC 9401 9370      		move.l	#$94019370,(a5)
     740/     F36 : 2ABC 96E4 9500      		move.l	#$96E49500,(a5)
     741/     F3C : 3ABC 977F           		move.w	#$977F,(a5)
     742/     F40 : 3ABC 7000           		move.w	#$7000,(a5)
     743/     F44 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     744/     F4A : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     745/     F4E : 11FC 0000 F767      		move.b	#0,($FFFFF767).w
     746/     F54 :                     
     747/     F54 :                     loc_F54:
     748/     F54 : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l	; start	the Z80
     749/     F5C : 4CF8 00FF F700      		movem.l	($FFFFF700).w,d0-d7
     750/     F62 : 48F8 00FF FF10      		movem.l	d0-d7,($FFFFFF10).w
     751/     F68 : 4CF8 0003 F754      		movem.l	($FFFFF754).w,d0-d1
     752/     F6E : 48F8 0003 FF30      		movem.l	d0-d1,($FFFFFF30).w
     753/     F74 : 6100 5948           		bsr.w	LoadTilesAsYouMove
     754/     F78 : 4EB9 0001 C2BE      		jsr	(AniArt_Load).l
     755/     F7E : 4EB9 0001 C94E      		jsr	(HudUpdate).l
     756/     F84 : 6100 06BC           		bsr.w	sub_1642
     757/     F88 : 4E75                		rts	
     758/     F8A :                     ; ===========================================================================
     759/     F8A :                     
     760/     F8A :                     loc_F8A:				; XREF: off_B6E
     761/     F8A : 6100 00E2           		bsr.w	sub_106E
     762/     F8E : 5238 F628           		addq.b	#1,($FFFFF628).w
     763/     F92 : 11FC 000E F62A      		move.b	#$E,($FFFFF62A).w
     764/     F98 : 4E75                		rts	
     765/     F9A :                     ; ===========================================================================
     766/     F9A :                     
     767/     F9A :                     loc_F9A:				; XREF: off_B6E
     768/     F9A : 6100 00D2           		bsr.w	sub_106E
     769/     F9E : 3AB8 F624           		move.w	($FFFFF624).w,(a5)
     770/     FA2 : 6000 069E           		bra.w	sub_1642
     771/     FA6 :                     ; ===========================================================================
     772/     FA6 :                     
     773/     FA6 :                     loc_FA6:				; XREF: off_B6E
     774/     FA6 : 33FC 0100 00A1 1100 		move.w	#$100,($A11100).l ; stop the Z80
     775/     FAE :                     
     776/     FAE :                     loc_FAE:
     777/     FAE : 0839 0000 00A1 1100 		btst	#0,($A11100).l	; has Z80 stopped?
     778/     FB6 : 66F6                		bne.s	loc_FAE		; if not, branch
     779/     FB8 : 6100 022C           		bsr.w	ReadJoypads
     780/     FBC : 4BF9 00C0 0004      		lea	($C00004).l,a5
     781/     FC2 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     782/     FC8 : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     783/     FCE : 3ABC 977F           		move.w	#$977F,(a5)
     784/     FD2 : 3ABC C000           		move.w	#$C000,(a5)
     785/     FD6 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     786/     FDC : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     787/     FE0 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     788/     FE6 : 2ABC 9401 9340      		move.l	#$94019340,(a5)
     789/     FEC : 2ABC 96FC 9500      		move.l	#$96FC9500,(a5)
     790/     FF2 : 3ABC 977F           		move.w	#$977F,(a5)
     791/     FF6 : 3ABC 7800           		move.w	#$7800,(a5)
     792/     FFA : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     793/    1000 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     794/    1004 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     795/    100A : 2ABC 9401 93C0      		move.l	#$940193C0,(a5)
     796/    1010 : 2ABC 96E6 9500      		move.l	#$96E69500,(a5)
     797/    1016 : 3ABC 977F           		move.w	#$977F,(a5)
     798/    101A : 3ABC 7C00           		move.w	#$7C00,(a5)
     799/    101E : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     800/    1024 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     801/    1028 : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l	; start	the Z80
     802/    1030 : 4A38 F767           		tst.b	($FFFFF767).w
     803/    1034 : 672A                		beq.s	loc_1060
     804/    1036 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     805/    103C : 2ABC 9401 9370      		move.l	#$94019370,(a5)
     806/    1042 : 2ABC 96E4 9500      		move.l	#$96E49500,(a5)
     807/    1048 : 3ABC 977F           		move.w	#$977F,(a5)
     808/    104C : 3ABC 7000           		move.w	#$7000,(a5)
     809/    1050 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     810/    1056 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     811/    105A : 11FC 0000 F767      		move.b	#0,($FFFFF767).w
     812/    1060 :                     
     813/    1060 :                     loc_1060:
     814/    1060 : 4A78 F614           		tst.w	($FFFFF614).w
     815/    1064 : 6700 0006           		beq.w	locret_106C
     816/    1068 : 5378 F614           		subq.w	#1,($FFFFF614).w
     817/    106C :                     
     818/    106C :                     locret_106C:
     819/    106C : 4E75                		rts	
     820/    106E :                     
     821/    106E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     822/    106E :                     
     823/    106E :                     
     824/    106E :                     sub_106E:				; XREF: loc_C32; et al
     825/    106E : 33FC 0100 00A1 1100 		move.w	#$100,($A11100).l ; stop the Z80
     826/    1076 :                     
     827/    1076 :                     loc_1076:
     828/    1076 : 0839 0000 00A1 1100 		btst	#0,($A11100).l	; has Z80 stopped?
     829/    107E : 66F6                		bne.s	loc_1076	; if not, branch
     830/    1080 : 6100 0164           		bsr.w	ReadJoypads
     831/    1084 : 4A38 F64E           		tst.b	($FFFFF64E).w
     832/    1088 : 6626                		bne.s	loc_10B0
     833/    108A : 4BF9 00C0 0004      		lea	($C00004).l,a5
     834/    1090 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     835/    1096 : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     836/    109C : 3ABC 977F           		move.w	#$977F,(a5)
     837/    10A0 : 3ABC C000           		move.w	#$C000,(a5)
     838/    10A4 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     839/    10AA : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     840/    10AE : 6024                		bra.s	loc_10D4
     841/    10B0 :                     ; ===========================================================================
     842/    10B0 :                     
     843/    10B0 :                     loc_10B0:				; XREF: sub_106E
     844/    10B0 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     845/    10B6 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     846/    10BC : 2ABC 96FD 9540      		move.l	#$96FD9540,(a5)
     847/    10C2 : 3ABC 977F           		move.w	#$977F,(a5)
     848/    10C6 : 3ABC C000           		move.w	#$C000,(a5)
     849/    10CA : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     850/    10D0 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     851/    10D4 :                     
     852/    10D4 :                     loc_10D4:				; XREF: sub_106E
     853/    10D4 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     854/    10DA : 2ABC 9401 9340      		move.l	#$94019340,(a5)
     855/    10E0 : 2ABC 96FC 9500      		move.l	#$96FC9500,(a5)
     856/    10E6 : 3ABC 977F           		move.w	#$977F,(a5)
     857/    10EA : 3ABC 7800           		move.w	#$7800,(a5)
     858/    10EE : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     859/    10F4 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     860/    10F8 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     861/    10FE : 2ABC 9401 93C0      		move.l	#$940193C0,(a5)
     862/    1104 : 2ABC 96E6 9500      		move.l	#$96E69500,(a5)
     863/    110A : 3ABC 977F           		move.w	#$977F,(a5)
     864/    110E : 3ABC 7C00           		move.w	#$7C00,(a5)
     865/    1112 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     866/    1118 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     867/    111C : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l	; start	the Z80
     868/    1124 : 4E75                		rts	
     869/    1126 :                     ; End of function sub_106E
     870/    1126 :                     
     871/    1126 :                     ; ---------------------------------------------------------------------------
     872/    1126 :                     ; Subroutine to	move pallets from the RAM to CRAM
     873/    1126 :                     ; ---------------------------------------------------------------------------
     874/    1126 :                     
     875/    1126 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     876/    1126 :                     
     877/    1126 :                     
     878/    1126 :                     PalToCRAM:
     879/    1126 : 46FC 2700           		move	#$2700,sr
     880/    112A : 4A78 F644           		tst.w	($FFFFF644).w
     881/    112E : 676C                		beq.s	locret_119C
     882/    1130 : 31FC 0000 F644      		move.w	#0,($FFFFF644).w
     883/    1136 : 48E7 00C0           		movem.l	a0-a1,-(sp)
     884/    113A : 43F9 00C0 0000      		lea	($C00000).l,a1
     885/    1140 : 41F8 FA80           		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
     886/    1144 : 237C C000 0000 0004 		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
     887/    114C : 2298                		move.l	(a0)+,(a1)	; move pallet to CRAM
     888/    114E : 2298                		move.l	(a0)+,(a1)
     889/    1150 : 2298                		move.l	(a0)+,(a1)
     890/    1152 : 2298                		move.l	(a0)+,(a1)
     891/    1154 : 2298                		move.l	(a0)+,(a1)
     892/    1156 : 2298                		move.l	(a0)+,(a1)
     893/    1158 : 2298                		move.l	(a0)+,(a1)
     894/    115A : 2298                		move.l	(a0)+,(a1)
     895/    115C : 2298                		move.l	(a0)+,(a1)
     896/    115E : 2298                		move.l	(a0)+,(a1)
     897/    1160 : 2298                		move.l	(a0)+,(a1)
     898/    1162 : 2298                		move.l	(a0)+,(a1)
     899/    1164 : 2298                		move.l	(a0)+,(a1)
     900/    1166 : 2298                		move.l	(a0)+,(a1)
     901/    1168 : 2298                		move.l	(a0)+,(a1)
     902/    116A : 2298                		move.l	(a0)+,(a1)
     903/    116C : 2298                		move.l	(a0)+,(a1)
     904/    116E : 2298                		move.l	(a0)+,(a1)
     905/    1170 : 2298                		move.l	(a0)+,(a1)
     906/    1172 : 2298                		move.l	(a0)+,(a1)
     907/    1174 : 2298                		move.l	(a0)+,(a1)
     908/    1176 : 2298                		move.l	(a0)+,(a1)
     909/    1178 : 2298                		move.l	(a0)+,(a1)
     910/    117A : 2298                		move.l	(a0)+,(a1)
     911/    117C : 2298                		move.l	(a0)+,(a1)
     912/    117E : 2298                		move.l	(a0)+,(a1)
     913/    1180 : 2298                		move.l	(a0)+,(a1)
     914/    1182 : 2298                		move.l	(a0)+,(a1)
     915/    1184 : 2298                		move.l	(a0)+,(a1)
     916/    1186 : 2298                		move.l	(a0)+,(a1)
     917/    1188 : 2298                		move.l	(a0)+,(a1)
     918/    118A : 2298                		move.l	(a0)+,(a1)
     919/    118C : 337C 8ADF 0004      		move.w	#$8ADF,4(a1)
     920/    1192 : 4CDF 0300           		movem.l	(sp)+,a0-a1
     921/    1196 : 4A38 F64F           		tst.b	($FFFFF64F).w
     922/    119A : 6602                		bne.s	loc_119E
     923/    119C :                     
     924/    119C :                     locret_119C:
     925/    119C : 4E73                		rte	
     926/    119E :                     ; ===========================================================================
     927/    119E :                     
     928/    119E :                     loc_119E:				; XREF: PalToCRAM
     929/    119E : 4238 F64F           		clr.b	($FFFFF64F).w
     930/    11A2 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
     931/    11A6 : 6100 FBDC           		bsr.w	Demo_Time
     932/    11AA : 4EB9 0007 28EA      		jsr	(sub_71B4C).l
     933/    11B0 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
     934/    11B4 : 4E73                		rte	
     935/    11B6 :                     ; End of function PalToCRAM
     936/    11B6 :                     
     937/    11B6 :                     ; ---------------------------------------------------------------------------
     938/    11B6 :                     ; Subroutine to	initialise joypads
     939/    11B6 :                     ; ---------------------------------------------------------------------------
     940/    11B6 :                     
     941/    11B6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     942/    11B6 :                     
     943/    11B6 :                     
     944/    11B6 :                     JoypadInit:				; XREF: GameClrRAM
     945/    11B6 : 33FC 0100 00A1 1100 		move.w	#$100,($A11100).l ; stop the Z80
     946/    11BE :                     
     947/    11BE :                     Joypad_WaitZ80:
     948/    11BE : 0839 0000 00A1 1100 		btst	#0,($A11100).l	; has the Z80 stopped?
     949/    11C6 : 66F6                		bne.s	Joypad_WaitZ80	; if not, branch
     950/    11C8 : 7040                		moveq	#$40,d0
     951/    11CA : 13C0 00A1 0009      		move.b	d0,($A10009).l	; init port 1 (joypad 1)
     952/    11D0 : 13C0 00A1 000B      		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
     953/    11D6 : 13C0 00A1 000D      		move.b	d0,($A1000D).l	; init port 3 (extra)
     954/    11DC : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l	; start	the Z80
     955/    11E4 : 4E75                		rts	
     956/    11E6 :                     ; End of function JoypadInit
     957/    11E6 :                     
     958/    11E6 :                     ; ---------------------------------------------------------------------------
     959/    11E6 :                     ; Subroutine to	read joypad input, and send it to the RAM
     960/    11E6 :                     ; ---------------------------------------------------------------------------
     961/    11E6 :                     
     962/    11E6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     963/    11E6 :                     
     964/    11E6 :                     
     965/    11E6 :                     ReadJoypads:
     966/    11E6 : 41F8 F604           		lea	($FFFFF604).w,a0 ; address where joypad	states are written
     967/    11EA : 43F9 00A1 0003      		lea	($A10003).l,a1	; first	joypad port
     968/    11F0 : 6102                		bsr.s	Joypad_Read	; do the first joypad
     969/    11F2 : 5449                		addq.w	#2,a1		; do the second	joypad
     970/    11F4 :                     
     971/    11F4 :                     Joypad_Read:
     972/    11F4 : 12BC 0000           		move.b	#0,(a1)
     973/    11F8 : 4E71                		nop	
     974/    11FA : 4E71                		nop	
     975/    11FC : 1011                		move.b	(a1),d0
     976/    11FE : E508                		lsl.b	#2,d0
     977/    1200 : 0200 00C0           		andi.b	#$C0,d0
     978/    1204 : 12BC 0040           		move.b	#$40,(a1)
     979/    1208 : 4E71                		nop	
     980/    120A : 4E71                		nop	
     981/    120C : 1211                		move.b	(a1),d1
     982/    120E : 0201 003F           		andi.b	#$3F,d1
     983/    1212 : 8001                		or.b	d1,d0
     984/    1214 : 4600                		not.b	d0
     985/    1216 : 1210                		move.b	(a0),d1
     986/    1218 : B101                		eor.b	d0,d1
     987/    121A : 10C0                		move.b	d0,(a0)+
     988/    121C : C200                		and.b	d0,d1
     989/    121E : 10C1                		move.b	d1,(a0)+
     990/    1220 : 4E75                		rts	
     991/    1222 :                     ; End of function ReadJoypads
     992/    1222 :                     
     993/    1222 :                     
     994/    1222 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     995/    1222 :                     
     996/    1222 :                     
     997/    1222 :                     VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
     998/    1222 : 41F9 00C0 0004      		lea	($C00004).l,a0
     999/    1228 : 43F9 00C0 0000      		lea	($C00000).l,a1
    1000/    122E : 45F9 0000 129E      		lea	(VDPSetupArray).l,a2
    1001/    1234 : 7E12                		moveq	#$12,d7
    1002/    1236 :                     
    1003/    1236 :                     VDP_Loop:
    1004/    1236 : 309A                		move.w	(a2)+,(a0)
    1005/    1238 : 51CF FFFC           		dbf	d7,VDP_Loop	; set the VDP registers
    1006/    123C :                     
    1007/    123C : 3039 0000 12A0      		move.w	(VDPSetupArray+2).l,d0
    1008/    1242 : 31C0 F60C           		move.w	d0,($FFFFF60C).w
    1009/    1246 : 31FC 8ADF F624      		move.w	#$8ADF,($FFFFF624).w
    1010/    124C : 7000                		moveq	#0,d0
    1011/    124E : 23FC C000 0000 00C0 		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
                    0004                
    1012/    1258 : 3E3C 003F           		move.w	#$3F,d7
    1013/    125C :                     
    1014/    125C :                     VDP_ClrCRAM:
    1015/    125C : 3280                		move.w	d0,(a1)
    1016/    125E : 51CF FFFC           		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
    1017/    1262 :                     
    1018/    1262 : 42B8 F616           		clr.l	($FFFFF616).w
    1019/    1266 : 42B8 F61A           		clr.l	($FFFFF61A).w
    1020/    126A : 2F01                		move.l	d1,-(sp)
    1021/    126C : 4BF9 00C0 0004      		lea	($C00004).l,a5
    1022/    1272 : 3ABC 8F01           		move.w	#$8F01,(a5)
    1023/    1276 : 2ABC 94FF 93FF      		move.l	#$94FF93FF,(a5)
    1024/    127C : 3ABC 9780           		move.w	#$9780,(a5)
    1025/    1280 : 2ABC 4000 0080      		move.l	#$40000080,(a5)
    1026/    1286 : 33FC 0000 00C0 0000 		move.w	#0,($C00000).l	; clear	the screen
    1027/    128E :                     
    1028/    128E :                     loc_128E:
    1029/    128E : 3215                		move.w	(a5),d1
    1030/    1290 : 0801 0001           		btst	#1,d1
    1031/    1294 : 66F8                		bne.s	loc_128E
    1032/    1296 :                     
    1033/    1296 : 3ABC 8F02           		move.w	#$8F02,(a5)
    1034/    129A : 221F                		move.l	(sp)+,d1
    1035/    129C : 4E75                		rts	
    1036/    129E :                     ; End of function VDPSetupGame
    1037/    129E :                     
    1038/    129E :                     ; ===========================================================================
    1039/    129E : 8004 8134 8230 8328 VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
    1040/    12A6 : 8407 857C 8600 8700 		dc.w $8407, $857C, $8600, $8700
    1041/    12AE : 8800 8900 8A00 8B00 		dc.w $8800, $8900, $8A00, $8B00
    1042/    12B6 : 8C81 8D3F 8E00 8F02 		dc.w $8C81, $8D3F, $8E00, $8F02
    1043/    12BE : 9001 9100 9200      		dc.w $9001, $9100, $9200
    1044/    12C4 :                     
    1045/    12C4 :                     ; ---------------------------------------------------------------------------
    1046/    12C4 :                     ; Subroutine to	clear the screen
    1047/    12C4 :                     ; ---------------------------------------------------------------------------
    1048/    12C4 :                     
    1049/    12C4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1050/    12C4 :                     
    1051/    12C4 :                     
    1052/    12C4 :                     ClearScreen:
    1053/    12C4 : 4BF9 00C0 0004      		lea	($C00004).l,a5
    1054/    12CA : 3ABC 8F01           		move.w	#$8F01,(a5)
    1055/    12CE : 2ABC 940F 93FF      		move.l	#$940F93FF,(a5)
    1056/    12D4 : 3ABC 9780           		move.w	#$9780,(a5)
    1057/    12D8 : 2ABC 4000 0083      		move.l	#$40000083,(a5)
    1058/    12DE : 33FC 0000 00C0 0000 		move.w	#0,($C00000).l
    1059/    12E6 :                     
    1060/    12E6 :                     loc_12E6:
    1061/    12E6 : 3215                		move.w	(a5),d1
    1062/    12E8 : 0801 0001           		btst	#1,d1
    1063/    12EC : 66F8                		bne.s	loc_12E6
    1064/    12EE :                     
    1065/    12EE : 3ABC 8F02           		move.w	#$8F02,(a5)
    1066/    12F2 : 4BF9 00C0 0004      		lea	($C00004).l,a5
    1067/    12F8 : 3ABC 8F01           		move.w	#$8F01,(a5)
    1068/    12FC : 2ABC 940F 93FF      		move.l	#$940F93FF,(a5)
    1069/    1302 : 3ABC 9780           		move.w	#$9780,(a5)
    1070/    1306 : 2ABC 6000 0083      		move.l	#$60000083,(a5)
    1071/    130C : 33FC 0000 00C0 0000 		move.w	#0,($C00000).l
    1072/    1314 :                     
    1073/    1314 :                     loc_1314:
    1074/    1314 : 3215                		move.w	(a5),d1
    1075/    1316 : 0801 0001           		btst	#1,d1
    1076/    131A : 66F8                		bne.s	loc_1314
    1077/    131C :                     
    1078/    131C : 3ABC 8F02           		move.w	#$8F02,(a5)
    1079/    1320 : 21FC 0000 0000 F616 		move.l	#0,($FFFFF616).w
    1080/    1328 : 21FC 0000 0000 F61A 		move.l	#0,($FFFFF61A).w
    1081/    1330 : 43F8 F800           		lea	($FFFFF800).w,a1
    1082/    1334 : 7000                		moveq	#0,d0
    1083/    1336 : 323C 00A0           		move.w	#$A0,d1
    1084/    133A :                     
    1085/    133A :                     loc_133A:
    1086/    133A : 22C0                		move.l	d0,(a1)+
    1087/    133C : 51C9 FFFC           		dbf	d1,loc_133A
    1088/    1340 :                     
    1089/    1340 : 43F8 CC00           		lea	($FFFFCC00).w,a1
    1090/    1344 : 7000                		moveq	#0,d0
    1091/    1346 : 323C 0100           		move.w	#$100,d1
    1092/    134A :                     
    1093/    134A :                     loc_134A:
    1094/    134A : 22C0                		move.l	d0,(a1)+
    1095/    134C : 51C9 FFFC           		dbf	d1,loc_134A
    1096/    1350 : 4E75                		rts	
    1097/    1352 :                     ; End of function ClearScreen
    1098/    1352 :                     
    1099/    1352 :                     ; ---------------------------------------------------------------------------
    1100/    1352 :                     ; Subroutine to	load the sound driver
    1101/    1352 :                     ; ---------------------------------------------------------------------------
    1102/    1352 :                     
    1103/    1352 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1104/    1352 :                     
    1105/    1352 :                     
    1106/    1352 :                     SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
    1107/    1352 : 4E71                		nop	
    1108/    1354 : 33FC 0100 00A1 1100 		move.w	#$100,($A11100).l ; stop the Z80
    1109/    135C : 33FC 0100 00A1 1200 		move.w	#$100,($A11200).l ; reset the Z80
    1110/    1364 : 41F9 0007 3C3A      		lea	(Kos_Z80).l,a0	; load sound driver
    1111/    136A : 43F9 00A0 0000      		lea	($A00000).l,a1
    1112/    1370 : 6100 052A           		bsr.w	KosDec		; decompress
    1113/    1374 : 33FC 0000 00A1 1200 		move.w	#0,($A11200).l
    1114/    137C : 4E71                		nop	
    1115/    137E : 4E71                		nop	
    1116/    1380 : 4E71                		nop	
    1117/    1382 : 4E71                		nop	
    1118/    1384 : 33FC 0100 00A1 1200 		move.w	#$100,($A11200).l ; reset the Z80
    1119/    138C : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l	; start	the Z80
    1120/    1394 : 4E75                		rts	
    1121/    1396 :                     ; End of function SoundDriverLoad
    1122/    1396 :                     
    1123/    1396 :                     ; ---------------------------------------------------------------------------
    1124/    1396 :                     ; Subroutine to	play a sound or	music track
    1125/    1396 :                     ; ---------------------------------------------------------------------------
    1126/    1396 :                     
    1127/    1396 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1128/    1396 :                     
    1129/    1396 :                     
    1130/    1396 :                     PlaySound:
    1131/    1396 : 11C0 F00A           		move.b	d0,($FFFFF00A).w
    1132/    139A : 4E75                		rts	
    1133/    139C :                     ; End of function PlaySound
    1134/    139C :                     
    1135/    139C :                     ; ---------------------------------------------------------------------------
    1136/    139C :                     ; Subroutine to	play a special sound/music (E0-E4)
    1137/    139C :                     ;
    1138/    139C :                     ; E0 - Fade out
    1139/    139C :                     ; E1 - Sega
    1140/    139C :                     ; E2 - Speed up
    1141/    139C :                     ; E3 - Normal speed
    1142/    139C :                     ; E4 - Stop
    1143/    139C :                     ; ---------------------------------------------------------------------------
    1144/    139C :                     
    1145/    139C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1146/    139C :                     
    1147/    139C :                     
    1148/    139C :                     PlaySound_Special:
    1149/    139C : 11C0 F00B           		move.b	d0,($FFFFF00B).w
    1150/    13A0 : 4E75                		rts	
    1151/    13A2 :                     ; End of function PlaySound_Special
    1152/    13A2 :                     
    1153/    13A2 :                     ; ===========================================================================
    1154/    13A2 :                     ; ---------------------------------------------------------------------------
    1155/    13A2 :                     ; Unused sound/music subroutine
    1156/    13A2 :                     ; ---------------------------------------------------------------------------
    1157/    13A2 :                     
    1158/    13A2 :                     PlaySound_Unk:
    1159/    13A2 : 11C0 F00C           		move.b	d0,($FFFFF00C).w
    1160/    13A6 : 4E75                		rts	
    1161/    13A8 :                     
    1162/    13A8 :                     ; ---------------------------------------------------------------------------
    1163/    13A8 :                     ; Subroutine to	pause the game
    1164/    13A8 :                     ; ---------------------------------------------------------------------------
    1165/    13A8 :                     
    1166/    13A8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1167/    13A8 :                     
    1168/    13A8 :                     
    1169/    13A8 :                     PauseGame:				; XREF: Level_MainLoop; et al
    1170/    13A8 : 4E71                		nop	
    1171/    13AA : 4A38 FE12           		tst.b	($FFFFFE12).w	; do you have any lives	left?
    1172/    13AE : 675A                		beq.s	Unpause		; if not, branch
    1173/    13B0 : 4A78 F63A           		tst.w	($FFFFF63A).w	; is game already paused?
    1174/    13B4 : 6608                		bne.s	loc_13BE	; if yes, branch
    1175/    13B6 : 0838 0007 F605      		btst	#7,($FFFFF605).w ; is Start button pressed?
    1176/    13BC : 6752                		beq.s	Pause_DoNothing	; if not, branch
    1177/    13BE :                     
    1178/    13BE :                     loc_13BE:
    1179/    13BE : 31FC 0001 F63A      		move.w	#1,($FFFFF63A).w ; freeze time
    1180/    13C4 : 11FC 0001 F003      		move.b	#1,($FFFFF003).w ; pause music
    1181/    13CA :                     
    1182/    13CA :                     loc_13CA:
    1183/    13CA : 11FC 0010 F62A      		move.b	#$10,($FFFFF62A).w
    1184/    13D0 : 6100 15E6           		bsr.w	DelayProgram
    1185/    13D4 : 4A38 FFE1           		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
    1186/    13D8 : 6722                		beq.s	Pause_ChkStart	; if not, branch
    1187/    13DA : 0838 0006 F605      		btst	#6,($FFFFF605).w ; is button A pressed?
    1188/    13E0 : 670A                		beq.s	Pause_ChkBC	; if not, branch
    1189/    13E2 : 11FC 0004 F600      		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
    1190/    13E8 : 4E71                		nop	
    1191/    13EA : 6018                		bra.s	loc_1404
    1192/    13EC :                     ; ===========================================================================
    1193/    13EC :                     
    1194/    13EC :                     Pause_ChkBC:				; XREF: PauseGame
    1195/    13EC : 0838 0004 F604      		btst	#4,($FFFFF604).w ; is button B pressed?
    1196/    13F2 : 661E                		bne.s	Pause_SlowMo	; if yes, branch
    1197/    13F4 : 0838 0005 F605      		btst	#5,($FFFFF605).w ; is button C pressed?
    1198/    13FA : 6616                		bne.s	Pause_SlowMo	; if yes, branch
    1199/    13FC :                     
    1200/    13FC :                     Pause_ChkStart:				; XREF: PauseGame
    1201/    13FC : 0838 0007 F605      		btst	#7,($FFFFF605).w ; is Start button pressed?
    1202/    1402 : 67C6                		beq.s	loc_13CA	; if not, branch
    1203/    1404 :                     
    1204/    1404 :                     loc_1404:				; XREF: PauseGame
    1205/    1404 : 11FC 0080 F003      		move.b	#$80,($FFFFF003).w
    1206/    140A :                     
    1207/    140A :                     Unpause:				; XREF: PauseGame
    1208/    140A : 31FC 0000 F63A      		move.w	#0,($FFFFF63A).w ; unpause the game
    1209/    1410 :                     
    1210/    1410 :                     Pause_DoNothing:			; XREF: PauseGame
    1211/    1410 : 4E75                		rts	
    1212/    1412 :                     ; ===========================================================================
    1213/    1412 :                     
    1214/    1412 :                     Pause_SlowMo:				; XREF: PauseGame
    1215/    1412 : 31FC 0001 F63A      		move.w	#1,($FFFFF63A).w
    1216/    1418 : 11FC 0080 F003      		move.b	#$80,($FFFFF003).w
    1217/    141E : 4E75                		rts	
    1218/    1420 :                     ; End of function PauseGame
    1219/    1420 :                     
    1220/    1420 :                     ; ---------------------------------------------------------------------------
    1221/    1420 :                     ; Subroutine to	display	patterns via the VDP
    1222/    1420 :                     ; ---------------------------------------------------------------------------
    1223/    1420 :                     
    1224/    1420 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1225/    1420 :                     
    1226/    1420 :                     
    1227/    1420 :                     ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
    1228/    1420 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    1229/    1426 : 283C 0080 0000      		move.l	#$800000,d4
    1230/    142C :                     
    1231/    142C :                     loc_142C:
    1232/    142C : 2D40 0004           		move.l	d0,4(a6)
    1233/    1430 : 3601                		move.w	d1,d3
    1234/    1432 :                     
    1235/    1432 :                     loc_1432:
    1236/    1432 : 3C99                		move.w	(a1)+,(a6)
    1237/    1434 : 51CB FFFC           		dbf	d3,loc_1432
    1238/    1438 : D084                		add.l	d4,d0
    1239/    143A : 51CA FFF0           		dbf	d2,loc_142C
    1240/    143E : 4E75                		rts	
    1241/    1440 :                     ; End of function ShowVDPGraphics
    1242/    1440 :                     
    1243/    1440 :                     ; ---------------------------------------------------------------------------
    1244/    1440 :                     ; Nemesis decompression	algorithm
    1245/    1440 :                     ; ---------------------------------------------------------------------------
    1246/    1440 :                     
    1247/    1440 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1248/    1440 :                     
    1249/    1440 :                     
    1250/    1440 :                     NemDec:
    1251/    1440 : 48E7 FFDC           		movem.l	d0-a1/a3-a5,-(sp)
    1252/    1444 : 47F9 0000 1502      		lea	(loc_1502).l,a3
    1253/    144A : 49F9 00C0 0000      		lea	($C00000).l,a4
    1254/    1450 : 600A                		bra.s	loc_145C
    1255/    1452 :                     ; ===========================================================================
    1256/    1452 : 48E7 FFDC           		movem.l	d0-a1/a3-a5,-(sp)
    1257/    1456 : 47F9 0000 1518      		lea	(loc_1518).l,a3
    1258/    145C :                     
    1259/    145C :                     loc_145C:				; XREF: NemDec
    1260/    145C : 43F8 AA00           		lea	($FFFFAA00).w,a1
    1261/    1460 : 3418                		move.w	(a0)+,d2
    1262/    1462 : E34A                		lsl.w	#1,d2
    1263/    1464 : 6404                		bcc.s	loc_146A
    1264/    1466 : D6FC 000A           		adda.w	#$A,a3
    1265/    146A :                     
    1266/    146A :                     loc_146A:
    1267/    146A : E54A                		lsl.w	#2,d2
    1268/    146C : 3A42                		movea.w	d2,a5
    1269/    146E : 7608                		moveq	#8,d3
    1270/    1470 : 7400                		moveq	#0,d2
    1271/    1472 : 7800                		moveq	#0,d4
    1272/    1474 : 6100 00B8           		bsr.w	NemDec4
    1273/    1478 : 1A18                		move.b	(a0)+,d5
    1274/    147A : E145                		asl.w	#8,d5
    1275/    147C : 1A18                		move.b	(a0)+,d5
    1276/    147E : 3C3C 0010           		move.w	#$10,d6
    1277/    1482 : 6106                		bsr.s	NemDec2
    1278/    1484 : 4CDF 3BFF           		movem.l	(sp)+,d0-a1/a3-a5
    1279/    1488 : 4E75                		rts	
    1280/    148A :                     ; End of function NemDec
    1281/    148A :                     
    1282/    148A :                     
    1283/    148A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1284/    148A :                     
    1285/    148A :                     
    1286/    148A :                     NemDec2:				; XREF: NemDec
    1287/    148A : 3E06                		move.w	d6,d7
    1288/    148C : 5147                		subq.w	#8,d7
    1289/    148E : 3205                		move.w	d5,d1
    1290/    1490 : EE69                		lsr.w	d7,d1
    1291/    1492 : 0C01 00FC           		cmpi.b	#-4,d1
    1292/    1496 : 643E                		bcc.s	loc_14D6
    1293/    1498 : 0241 00FF           		andi.w	#$FF,d1
    1294/    149C : D241                		add.w	d1,d1
    1295/    149E : 1031 1000           		move.b	(a1,d1.w),d0
    1296/    14A2 : 4880                		ext.w	d0
    1297/    14A4 : 9C40                		sub.w	d0,d6
    1298/    14A6 : 0C46 0009           		cmpi.w	#9,d6
    1299/    14AA : 6406                		bcc.s	loc_14B2
    1300/    14AC : 5046                		addq.w	#8,d6
    1301/    14AE : E145                		asl.w	#8,d5
    1302/    14B0 : 1A18                		move.b	(a0)+,d5
    1303/    14B2 :                     
    1304/    14B2 :                     loc_14B2:
    1305/    14B2 : 1231 1001           		move.b	1(a1,d1.w),d1
    1306/    14B6 : 3001                		move.w	d1,d0
    1307/    14B8 : 0241 000F           		andi.w	#$F,d1
    1308/    14BC : 0240 00F0           		andi.w	#$F0,d0
    1309/    14C0 :                     
    1310/    14C0 :                     loc_14C0:				; XREF: NemDec3
    1311/    14C0 : E848                		lsr.w	#4,d0
    1312/    14C2 :                     
    1313/    14C2 :                     loc_14C2:				; XREF: NemDec3
    1314/    14C2 : E98C                		lsl.l	#4,d4
    1315/    14C4 : 8801                		or.b	d1,d4
    1316/    14C6 : 5343                		subq.w	#1,d3
    1317/    14C8 : 6606                		bne.s	loc_14D0
    1318/    14CA : 4ED3                		jmp	(a3)
    1319/    14CC :                     ; End of function NemDec2
    1320/    14CC :                     
    1321/    14CC :                     
    1322/    14CC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1323/    14CC :                     
    1324/    14CC :                     
    1325/    14CC :                     NemDec3:				; XREF: loc_1502
    1326/    14CC : 7800                		moveq	#0,d4
    1327/    14CE : 7608                		moveq	#8,d3
    1328/    14D0 :                     
    1329/    14D0 :                     loc_14D0:				; XREF: NemDec2
    1330/    14D0 : 51C8 FFF0           		dbf	d0,loc_14C2
    1331/    14D4 : 60B4                		bra.s	NemDec2
    1332/    14D6 :                     ; ===========================================================================
    1333/    14D6 :                     
    1334/    14D6 :                     loc_14D6:				; XREF: NemDec2
    1335/    14D6 : 5D46                		subq.w	#6,d6
    1336/    14D8 : 0C46 0009           		cmpi.w	#9,d6
    1337/    14DC : 6406                		bcc.s	loc_14E4
    1338/    14DE : 5046                		addq.w	#8,d6
    1339/    14E0 : E145                		asl.w	#8,d5
    1340/    14E2 : 1A18                		move.b	(a0)+,d5
    1341/    14E4 :                     
    1342/    14E4 :                     loc_14E4:				; XREF: NemDec3
    1343/    14E4 : 5F46                		subq.w	#7,d6
    1344/    14E6 : 3205                		move.w	d5,d1
    1345/    14E8 : EC69                		lsr.w	d6,d1
    1346/    14EA : 3001                		move.w	d1,d0
    1347/    14EC : 0241 000F           		andi.w	#$F,d1
    1348/    14F0 : 0240 0070           		andi.w	#$70,d0
    1349/    14F4 : 0C46 0009           		cmpi.w	#9,d6
    1350/    14F8 : 64C6                		bcc.s	loc_14C0
    1351/    14FA : 5046                		addq.w	#8,d6
    1352/    14FC : E145                		asl.w	#8,d5
    1353/    14FE : 1A18                		move.b	(a0)+,d5
    1354/    1500 : 60BE                		bra.s	loc_14C0
    1355/    1502 :                     ; End of function NemDec3
    1356/    1502 :                     
    1357/    1502 :                     ; ===========================================================================
    1358/    1502 :                     
    1359/    1502 :                     loc_1502:				; XREF: NemDec
    1360/    1502 : 2884                		move.l	d4,(a4)
    1361/    1504 : 534D                		subq.w	#1,a5
    1362/    1506 : 380D                		move.w	a5,d4
    1363/    1508 : 66C2                		bne.s	NemDec3
    1364/    150A : 4E75                		rts	
    1365/    150C :                     ; ===========================================================================
    1366/    150C : B982                		eor.l	d4,d2
    1367/    150E : 2882                		move.l	d2,(a4)
    1368/    1510 : 534D                		subq.w	#1,a5
    1369/    1512 : 380D                		move.w	a5,d4
    1370/    1514 : 66B6                		bne.s	NemDec3
    1371/    1516 : 4E75                		rts	
    1372/    1518 :                     ; ===========================================================================
    1373/    1518 :                     
    1374/    1518 :                     loc_1518:				; XREF: NemDec
    1375/    1518 : 28C4                		move.l	d4,(a4)+
    1376/    151A : 534D                		subq.w	#1,a5
    1377/    151C : 380D                		move.w	a5,d4
    1378/    151E : 66AC                		bne.s	NemDec3
    1379/    1520 : 4E75                		rts	
    1380/    1522 :                     ; ===========================================================================
    1381/    1522 : B982                		eor.l	d4,d2
    1382/    1524 : 28C2                		move.l	d2,(a4)+
    1383/    1526 : 534D                		subq.w	#1,a5
    1384/    1528 : 380D                		move.w	a5,d4
    1385/    152A : 66A0                		bne.s	NemDec3
    1386/    152C : 4E75                		rts	
    1387/    152E :                     
    1388/    152E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1389/    152E :                     
    1390/    152E :                     
    1391/    152E :                     NemDec4:				; XREF: NemDec
    1392/    152E : 1018                		move.b	(a0)+,d0
    1393/    1530 :                     
    1394/    1530 :                     loc_1530:
    1395/    1530 : 0C00 00FF           		cmpi.b	#-1,d0
    1396/    1534 : 6602                		bne.s	loc_1538
    1397/    1536 : 4E75                		rts	
    1398/    1538 :                     ; ===========================================================================
    1399/    1538 :                     
    1400/    1538 :                     loc_1538:				; XREF: NemDec4
    1401/    1538 : 3E00                		move.w	d0,d7
    1402/    153A :                     
    1403/    153A :                     loc_153A:
    1404/    153A : 1018                		move.b	(a0)+,d0
    1405/    153C : 0C00 0080           		cmpi.b	#$80,d0
    1406/    1540 : 64EE                		bcc.s	loc_1530
    1407/    1542 : 1200                		move.b	d0,d1
    1408/    1544 : 0247 000F           		andi.w	#$F,d7
    1409/    1548 : 0241 0070           		andi.w	#$70,d1
    1410/    154C : 8E41                		or.w	d1,d7
    1411/    154E : 0240 000F           		andi.w	#$F,d0
    1412/    1552 : 1200                		move.b	d0,d1
    1413/    1554 : E149                		lsl.w	#8,d1
    1414/    1556 : 8E41                		or.w	d1,d7
    1415/    1558 : 7208                		moveq	#8,d1
    1416/    155A : 9240                		sub.w	d0,d1
    1417/    155C : 660A                		bne.s	loc_1568
    1418/    155E : 1018                		move.b	(a0)+,d0
    1419/    1560 : D040                		add.w	d0,d0
    1420/    1562 : 3387 0000           		move.w	d7,(a1,d0.w)
    1421/    1566 : 60D2                		bra.s	loc_153A
    1422/    1568 :                     ; ===========================================================================
    1423/    1568 :                     
    1424/    1568 :                     loc_1568:				; XREF: NemDec4
    1425/    1568 : 1018                		move.b	(a0)+,d0
    1426/    156A : E368                		lsl.w	d1,d0
    1427/    156C : D040                		add.w	d0,d0
    1428/    156E : 7A01                		moveq	#1,d5
    1429/    1570 : E36D                		lsl.w	d1,d5
    1430/    1572 : 5345                		subq.w	#1,d5
    1431/    1574 :                     
    1432/    1574 :                     loc_1574:
    1433/    1574 : 3387 0000           		move.w	d7,(a1,d0.w)
    1434/    1578 : 5440                		addq.w	#2,d0
    1435/    157A : 51CD FFF8           		dbf	d5,loc_1574
    1436/    157E : 60BA                		bra.s	loc_153A
    1437/    1580 :                     ; End of function NemDec4
    1438/    1580 :                     
    1439/    1580 :                     ; ---------------------------------------------------------------------------
    1440/    1580 :                     ; Subroutine to	load pattern load cues
    1441/    1580 :                     ; ---------------------------------------------------------------------------
    1442/    1580 :                     
    1443/    1580 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1444/    1580 :                     
    1445/    1580 :                     
    1446/    1580 :                     LoadPLC:
    1447/    1580 : 48E7 0060           		movem.l	a1-a2,-(sp)
    1448/    1584 : 43F9 0001 D8A8      		lea	(ArtLoadCues).l,a1
    1449/    158A : D040                		add.w	d0,d0
    1450/    158C : 3031 0000           		move.w	(a1,d0.w),d0
    1451/    1590 : 43F1 0000           		lea	(a1,d0.w),a1
    1452/    1594 : 45F8 F680           		lea	($FFFFF680).w,a2
    1453/    1598 :                     
    1454/    1598 :                     loc_1598:
    1455/    1598 : 4A92                		tst.l	(a2)
    1456/    159A : 6704                		beq.s	loc_15A0
    1457/    159C : 5C4A                		addq.w	#6,a2
    1458/    159E : 60F8                		bra.s	loc_1598
    1459/    15A0 :                     ; ===========================================================================
    1460/    15A0 :                     
    1461/    15A0 :                     loc_15A0:				; XREF: LoadPLC
    1462/    15A0 : 3019                		move.w	(a1)+,d0
    1463/    15A2 : 6B08                		bmi.s	loc_15AC
    1464/    15A4 :                     
    1465/    15A4 :                     loc_15A4:
    1466/    15A4 : 24D9                		move.l	(a1)+,(a2)+
    1467/    15A6 : 34D9                		move.w	(a1)+,(a2)+
    1468/    15A8 : 51C8 FFFA           		dbf	d0,loc_15A4
    1469/    15AC :                     
    1470/    15AC :                     loc_15AC:
    1471/    15AC : 4CDF 0600           		movem.l	(sp)+,a1-a2
    1472/    15B0 : 4E75                		rts	
    1473/    15B2 :                     ; End of function LoadPLC
    1474/    15B2 :                     
    1475/    15B2 :                     
    1476/    15B2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1477/    15B2 :                     
    1478/    15B2 :                     
    1479/    15B2 :                     LoadPLC2:
    1480/    15B2 : 48E7 0060           		movem.l	a1-a2,-(sp)
    1481/    15B6 : 43F9 0001 D8A8      		lea	(ArtLoadCues).l,a1
    1482/    15BC : D040                		add.w	d0,d0
    1483/    15BE : 3031 0000           		move.w	(a1,d0.w),d0
    1484/    15C2 : 43F1 0000           		lea	(a1,d0.w),a1
    1485/    15C6 : 6116                		bsr.s	ClearPLC
    1486/    15C8 : 45F8 F680           		lea	($FFFFF680).w,a2
    1487/    15CC : 3019                		move.w	(a1)+,d0
    1488/    15CE : 6B08                		bmi.s	loc_15D8
    1489/    15D0 :                     
    1490/    15D0 :                     loc_15D0:
    1491/    15D0 : 24D9                		move.l	(a1)+,(a2)+
    1492/    15D2 : 34D9                		move.w	(a1)+,(a2)+
    1493/    15D4 : 51C8 FFFA           		dbf	d0,loc_15D0
    1494/    15D8 :                     
    1495/    15D8 :                     loc_15D8:
    1496/    15D8 : 4CDF 0600           		movem.l	(sp)+,a1-a2
    1497/    15DC : 4E75                		rts	
    1498/    15DE :                     ; End of function LoadPLC2
    1499/    15DE :                     
    1500/    15DE :                     ; ---------------------------------------------------------------------------
    1501/    15DE :                     ; Subroutine to	clear the pattern load cues
    1502/    15DE :                     ; ---------------------------------------------------------------------------
    1503/    15DE :                     
    1504/    15DE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1505/    15DE :                     
    1506/    15DE :                     
    1507/    15DE :                     ClearPLC:				; XREF: LoadPLC2
    1508/    15DE : 45F8 F680           		lea	($FFFFF680).w,a2
    1509/    15E2 : 701F                		moveq	#$1F,d0
    1510/    15E4 :                     
    1511/    15E4 :                     ClearPLC_Loop:
    1512/    15E4 : 429A                		clr.l	(a2)+
    1513/    15E6 : 51C8 FFFC           		dbf	d0,ClearPLC_Loop
    1514/    15EA : 4E75                		rts	
    1515/    15EC :                     ; End of function ClearPLC
    1516/    15EC :                     
    1517/    15EC :                     ; ---------------------------------------------------------------------------
    1518/    15EC :                     ; Subroutine to	use graphics listed in a pattern load cue
    1519/    15EC :                     ; ---------------------------------------------------------------------------
    1520/    15EC :                     
    1521/    15EC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1522/    15EC :                     
    1523/    15EC :                     
    1524/    15EC :                     RunPLC_RAM:				; XREF: Pal_FadeTo
    1525/    15EC : 4AB8 F680           		tst.l	($FFFFF680).w
    1526/    15F0 : 674E                		beq.s	locret_1640
    1527/    15F2 : 4A78 F6F8           		tst.w	($FFFFF6F8).w
    1528/    15F6 : 6648                		bne.s	locret_1640
    1529/    15F8 : 2078 F680           		movea.l	($FFFFF680).w,a0
    1530/    15FC : 47F9 0000 1502      		lea	(loc_1502).l,a3
    1531/    1602 : 43F8 AA00           		lea	($FFFFAA00).w,a1
    1532/    1606 : 3418                		move.w	(a0)+,d2
    1533/    1608 : 6A04                		bpl.s	loc_160E
    1534/    160A : D6FC 000A           		adda.w	#$A,a3
    1535/    160E :                     
    1536/    160E :                     loc_160E:
    1537/    160E : 0242 7FFF           		andi.w	#$7FFF,d2
    1538/    1612 : 31C2 F6F8           		move.w	d2,($FFFFF6F8).w
    1539/    1616 : 6100 FF16           		bsr.w	NemDec4
    1540/    161A : 1A18                		move.b	(a0)+,d5
    1541/    161C : E145                		asl.w	#8,d5
    1542/    161E : 1A18                		move.b	(a0)+,d5
    1543/    1620 : 7C10                		moveq	#$10,d6
    1544/    1622 : 7000                		moveq	#0,d0
    1545/    1624 : 21C8 F680           		move.l	a0,($FFFFF680).w
    1546/    1628 : 21CB F6E0           		move.l	a3,($FFFFF6E0).w
    1547/    162C : 21C0 F6E4           		move.l	d0,($FFFFF6E4).w
    1548/    1630 : 21C0 F6E8           		move.l	d0,($FFFFF6E8).w
    1549/    1634 : 21C0 F6EC           		move.l	d0,($FFFFF6EC).w
    1550/    1638 : 21C5 F6F0           		move.l	d5,($FFFFF6F0).w
    1551/    163C : 21C6 F6F4           		move.l	d6,($FFFFF6F4).w
    1552/    1640 :                     
    1553/    1640 :                     locret_1640:
    1554/    1640 : 4E75                		rts	
    1555/    1642 :                     ; End of function RunPLC_RAM
    1556/    1642 :                     
    1557/    1642 :                     
    1558/    1642 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1559/    1642 :                     
    1560/    1642 :                     
    1561/    1642 :                     sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
    1562/    1642 : 4A78 F6F8           		tst.w	($FFFFF6F8).w
    1563/    1646 : 6700 0092           		beq.w	locret_16DA
    1564/    164A : 31FC 0009 F6FA      		move.w	#9,($FFFFF6FA).w
    1565/    1650 : 7000                		moveq	#0,d0
    1566/    1652 : 3038 F684           		move.w	($FFFFF684).w,d0
    1567/    1656 : 0678 0120 F684      		addi.w	#$120,($FFFFF684).w
    1568/    165C : 6018                		bra.s	loc_1676
    1569/    165E :                     ; End of function sub_1642
    1570/    165E :                     
    1571/    165E :                     
    1572/    165E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1573/    165E :                     
    1574/    165E :                     
    1575/    165E :                     sub_165E:				; XREF: Demo_Time
    1576/    165E : 4A78 F6F8           		tst.w	($FFFFF6F8).w
    1577/    1662 : 6776                		beq.s	locret_16DA
    1578/    1664 : 31FC 0003 F6FA      		move.w	#3,($FFFFF6FA).w
    1579/    166A : 7000                		moveq	#0,d0
    1580/    166C : 3038 F684           		move.w	($FFFFF684).w,d0
    1581/    1670 : 0678 0060 F684      		addi.w	#$60,($FFFFF684).w
    1582/    1676 :                     
    1583/    1676 :                     loc_1676:				; XREF: sub_1642
    1584/    1676 : 49F9 00C0 0004      		lea	($C00004).l,a4
    1585/    167C : E588                		lsl.l	#2,d0
    1586/    167E : E448                		lsr.w	#2,d0
    1587/    1680 : 0040 4000           		ori.w	#$4000,d0
    1588/    1684 : 4840                		swap	d0
    1589/    1686 : 2880                		move.l	d0,(a4)
    1590/    1688 : 594C                		subq.w	#4,a4
    1591/    168A : 2078 F680           		movea.l	($FFFFF680).w,a0
    1592/    168E : 2678 F6E0           		movea.l	($FFFFF6E0).w,a3
    1593/    1692 : 2038 F6E4           		move.l	($FFFFF6E4).w,d0
    1594/    1696 : 2238 F6E8           		move.l	($FFFFF6E8).w,d1
    1595/    169A : 2438 F6EC           		move.l	($FFFFF6EC).w,d2
    1596/    169E : 2A38 F6F0           		move.l	($FFFFF6F0).w,d5
    1597/    16A2 : 2C38 F6F4           		move.l	($FFFFF6F4).w,d6
    1598/    16A6 : 43F8 AA00           		lea	($FFFFAA00).w,a1
    1599/    16AA :                     
    1600/    16AA :                     loc_16AA:				; XREF: sub_165E
    1601/    16AA : 3A7C 0008           		movea.w	#8,a5
    1602/    16AE : 6100 FE1C           		bsr.w	NemDec3
    1603/    16B2 : 5378 F6F8           		subq.w	#1,($FFFFF6F8).w
    1604/    16B6 : 6724                		beq.s	loc_16DC
    1605/    16B8 : 5378 F6FA           		subq.w	#1,($FFFFF6FA).w
    1606/    16BC : 66EC                		bne.s	loc_16AA
    1607/    16BE : 21C8 F680           		move.l	a0,($FFFFF680).w
    1608/    16C2 : 21CB F6E0           		move.l	a3,($FFFFF6E0).w
    1609/    16C6 : 21C0 F6E4           		move.l	d0,($FFFFF6E4).w
    1610/    16CA : 21C1 F6E8           		move.l	d1,($FFFFF6E8).w
    1611/    16CE : 21C2 F6EC           		move.l	d2,($FFFFF6EC).w
    1612/    16D2 : 21C5 F6F0           		move.l	d5,($FFFFF6F0).w
    1613/    16D6 : 21C6 F6F4           		move.l	d6,($FFFFF6F4).w
    1614/    16DA :                     
    1615/    16DA :                     locret_16DA:				; XREF: sub_1642
    1616/    16DA : 4E75                		rts	
    1617/    16DC :                     ; ===========================================================================
    1618/    16DC :                     
    1619/    16DC :                     loc_16DC:				; XREF: sub_165E
    1620/    16DC : 41F8 F680           		lea	($FFFFF680).w,a0
    1621/    16E0 : 7015                		moveq	#$15,d0
    1622/    16E2 :                     
    1623/    16E2 :                     loc_16E2:				; XREF: sub_165E
    1624/    16E2 : 20E8 0006           		move.l	6(a0),(a0)+
    1625/    16E6 : 51C8 FFFA           		dbf	d0,loc_16E2
    1626/    16EA : 4E75                		rts	
    1627/    16EC :                     ; End of function sub_165E
    1628/    16EC :                     
    1629/    16EC :                     ; ---------------------------------------------------------------------------
    1630/    16EC :                     ; Subroutine to	execute	the pattern load cue
    1631/    16EC :                     ; ---------------------------------------------------------------------------
    1632/    16EC :                     
    1633/    16EC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1634/    16EC :                     
    1635/    16EC :                     
    1636/    16EC :                     RunPLC_ROM:
    1637/    16EC : 43F9 0001 D8A8      		lea	(ArtLoadCues).l,a1 ; load the PLC index
    1638/    16F2 : D040                		add.w	d0,d0
    1639/    16F4 : 3031 0000           		move.w	(a1,d0.w),d0
    1640/    16F8 : 43F1 0000           		lea	(a1,d0.w),a1
    1641/    16FC : 3219                		move.w	(a1)+,d1	; load number of entries in the	PLC
    1642/    16FE :                     
    1643/    16FE :                     RunPLC_Loop:
    1644/    16FE : 2059                		movea.l	(a1)+,a0	; get art pointer
    1645/    1700 : 7000                		moveq	#0,d0
    1646/    1702 : 3019                		move.w	(a1)+,d0	; get VRAM address
    1647/    1704 : E588                		lsl.l	#2,d0		; divide address by $20
    1648/    1706 : E448                		lsr.w	#2,d0
    1649/    1708 : 0040 4000           		ori.w	#$4000,d0
    1650/    170C : 4840                		swap	d0
    1651/    170E : 23C0 00C0 0004      		move.l	d0,($C00004).l	; put the VRAM address into VDP
    1652/    1714 : 6100 FD2A           		bsr.w	NemDec		; decompress
    1653/    1718 : 51C9 FFE4           		dbf	d1,RunPLC_Loop	; loop for number of entries
    1654/    171C : 4E75                		rts	
    1655/    171E :                     ; End of function RunPLC_ROM
    1656/    171E :                     
    1657/    171E :                     ; ---------------------------------------------------------------------------
    1658/    171E :                     ; Enigma decompression algorithm
    1659/    171E :                     ; ---------------------------------------------------------------------------
    1660/    171E :                     
    1661/    171E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1662/    171E :                     
    1663/    171E :                     
    1664/    171E :                     EniDec:
    1665/    171E : 48E7 FF7C           		movem.l	d0-d7/a1-a5,-(sp)
    1666/    1722 : 3640                		movea.w	d0,a3
    1667/    1724 : 1018                		move.b	(a0)+,d0
    1668/    1726 : 4880                		ext.w	d0
    1669/    1728 : 3A40                		movea.w	d0,a5
    1670/    172A : 1818                		move.b	(a0)+,d4
    1671/    172C : E70C                		lsl.b	#3,d4
    1672/    172E : 3458                		movea.w	(a0)+,a2
    1673/    1730 : D4CB                		adda.w	a3,a2
    1674/    1732 : 3858                		movea.w	(a0)+,a4
    1675/    1734 : D8CB                		adda.w	a3,a4
    1676/    1736 : 1A18                		move.b	(a0)+,d5
    1677/    1738 : E145                		asl.w	#8,d5
    1678/    173A : 1A18                		move.b	(a0)+,d5
    1679/    173C : 7C10                		moveq	#$10,d6
    1680/    173E :                     
    1681/    173E :                     loc_173E:				; XREF: loc_1768
    1682/    173E : 7007                		moveq	#7,d0
    1683/    1740 : 3E06                		move.w	d6,d7
    1684/    1742 : 9E40                		sub.w	d0,d7
    1685/    1744 : 3205                		move.w	d5,d1
    1686/    1746 : EE69                		lsr.w	d7,d1
    1687/    1748 : 0241 007F           		andi.w	#$7F,d1
    1688/    174C : 3401                		move.w	d1,d2
    1689/    174E : 0C41 0040           		cmpi.w	#$40,d1
    1690/    1752 : 6404                		bcc.s	loc_1758
    1691/    1754 : 7006                		moveq	#6,d0
    1692/    1756 : E24A                		lsr.w	#1,d2
    1693/    1758 :                     
    1694/    1758 :                     loc_1758:
    1695/    1758 : 6100 0132           		bsr.w	sub_188C
    1696/    175C : 0242 000F           		andi.w	#$F,d2
    1697/    1760 : E849                		lsr.w	#4,d1
    1698/    1762 : D241                		add.w	d1,d1
    1699/    1764 : 4EFB 104E           		jmp	loc_17B4(pc,d1.w)
    1700/    1768 :                     ; End of function EniDec
    1701/    1768 :                     
    1702/    1768 :                     ; ===========================================================================
    1703/    1768 :                     
    1704/    1768 :                     loc_1768:				; XREF: loc_17B4
    1705/    1768 : 32CA                		move.w	a2,(a1)+
    1706/    176A : 524A                		addq.w	#1,a2
    1707/    176C : 51CA FFFA           		dbf	d2,loc_1768
    1708/    1770 : 60CC                		bra.s	loc_173E
    1709/    1772 :                     ; ===========================================================================
    1710/    1772 :                     
    1711/    1772 :                     loc_1772:				; XREF: loc_17B4
    1712/    1772 : 32CC                		move.w	a4,(a1)+
    1713/    1774 : 51CA FFFC           		dbf	d2,loc_1772
    1714/    1778 : 60C4                		bra.s	loc_173E
    1715/    177A :                     ; ===========================================================================
    1716/    177A :                     
    1717/    177A :                     loc_177A:				; XREF: loc_17B4
    1718/    177A : 6100 0060           		bsr.w	loc_17DC
    1719/    177E :                     
    1720/    177E :                     loc_177E:
    1721/    177E : 32C1                		move.w	d1,(a1)+
    1722/    1780 : 51CA FFFC           		dbf	d2,loc_177E
    1723/    1784 : 60B8                		bra.s	loc_173E
    1724/    1786 :                     ; ===========================================================================
    1725/    1786 :                     
    1726/    1786 :                     loc_1786:				; XREF: loc_17B4
    1727/    1786 : 6100 0054           		bsr.w	loc_17DC
    1728/    178A :                     
    1729/    178A :                     loc_178A:
    1730/    178A : 32C1                		move.w	d1,(a1)+
    1731/    178C : 5241                		addq.w	#1,d1
    1732/    178E : 51CA FFFA           		dbf	d2,loc_178A
    1733/    1792 : 60AA                		bra.s	loc_173E
    1734/    1794 :                     ; ===========================================================================
    1735/    1794 :                     
    1736/    1794 :                     loc_1794:				; XREF: loc_17B4
    1737/    1794 : 6100 0046           		bsr.w	loc_17DC
    1738/    1798 :                     
    1739/    1798 :                     loc_1798:
    1740/    1798 : 32C1                		move.w	d1,(a1)+
    1741/    179A : 5341                		subq.w	#1,d1
    1742/    179C : 51CA FFFA           		dbf	d2,loc_1798
    1743/    17A0 : 609C                		bra.s	loc_173E
    1744/    17A2 :                     ; ===========================================================================
    1745/    17A2 :                     
    1746/    17A2 :                     loc_17A2:				; XREF: loc_17B4
    1747/    17A2 : 0C42 000F           		cmpi.w	#$F,d2
    1748/    17A6 : 671C                		beq.s	loc_17C4
    1749/    17A8 :                     
    1750/    17A8 :                     loc_17A8:
    1751/    17A8 : 6100 0032           		bsr.w	loc_17DC
    1752/    17AC : 32C1                		move.w	d1,(a1)+
    1753/    17AE : 51CA FFF8           		dbf	d2,loc_17A8
    1754/    17B2 : 608A                		bra.s	loc_173E
    1755/    17B4 :                     ; ===========================================================================
    1756/    17B4 :                     
    1757/    17B4 :                     loc_17B4:				; XREF: EniDec
    1758/    17B4 : 60B2                		bra.s	loc_1768
    1759/    17B6 :                     ; ===========================================================================
    1760/    17B6 : 60B0                		bra.s	loc_1768
    1761/    17B8 :                     ; ===========================================================================
    1762/    17B8 : 60B8                		bra.s	loc_1772
    1763/    17BA :                     ; ===========================================================================
    1764/    17BA : 60B6                		bra.s	loc_1772
    1765/    17BC :                     ; ===========================================================================
    1766/    17BC : 60BC                		bra.s	loc_177A
    1767/    17BE :                     ; ===========================================================================
    1768/    17BE : 60C6                		bra.s	loc_1786
    1769/    17C0 :                     ; ===========================================================================
    1770/    17C0 : 60D2                		bra.s	loc_1794
    1771/    17C2 :                     ; ===========================================================================
    1772/    17C2 : 60DE                		bra.s	loc_17A2
    1773/    17C4 :                     ; ===========================================================================
    1774/    17C4 :                     
    1775/    17C4 :                     loc_17C4:				; XREF: loc_17A2
    1776/    17C4 : 5348                		subq.w	#1,a0
    1777/    17C6 : 0C46 0010           		cmpi.w	#$10,d6
    1778/    17CA : 6602                		bne.s	loc_17CE
    1779/    17CC : 5348                		subq.w	#1,a0
    1780/    17CE :                     
    1781/    17CE :                     loc_17CE:
    1782/    17CE : 3008                		move.w	a0,d0
    1783/    17D0 : E248                		lsr.w	#1,d0
    1784/    17D2 : 6402                		bcc.s	loc_17D6
    1785/    17D4 : 5248                		addq.w	#1,a0
    1786/    17D6 :                     
    1787/    17D6 :                     loc_17D6:
    1788/    17D6 : 4CDF 3EFF           		movem.l	(sp)+,d0-d7/a1-a5
    1789/    17DA : 4E75                		rts	
    1790/    17DC :                     ; ===========================================================================
    1791/    17DC :                     
    1792/    17DC :                     loc_17DC:				; XREF: loc_17A2
    1793/    17DC : 360B                		move.w	a3,d3
    1794/    17DE : 1204                		move.b	d4,d1
    1795/    17E0 : D201                		add.b	d1,d1
    1796/    17E2 : 640A                		bcc.s	loc_17EE
    1797/    17E4 : 5346                		subq.w	#1,d6
    1798/    17E6 : 0D05                		btst	d6,d5
    1799/    17E8 : 6704                		beq.s	loc_17EE
    1800/    17EA : 0043 8000           		ori.w	#-$8000,d3
    1801/    17EE :                     
    1802/    17EE :                     loc_17EE:
    1803/    17EE : D201                		add.b	d1,d1
    1804/    17F0 : 640A                		bcc.s	loc_17FC
    1805/    17F2 : 5346                		subq.w	#1,d6
    1806/    17F4 : 0D05                		btst	d6,d5
    1807/    17F6 : 6704                		beq.s	loc_17FC
    1808/    17F8 : 0643 4000           		addi.w	#$4000,d3
    1809/    17FC :                     
    1810/    17FC :                     loc_17FC:
    1811/    17FC : D201                		add.b	d1,d1
    1812/    17FE : 640A                		bcc.s	loc_180A
    1813/    1800 : 5346                		subq.w	#1,d6
    1814/    1802 : 0D05                		btst	d6,d5
    1815/    1804 : 6704                		beq.s	loc_180A
    1816/    1806 : 0643 2000           		addi.w	#$2000,d3
    1817/    180A :                     
    1818/    180A :                     loc_180A:
    1819/    180A : D201                		add.b	d1,d1
    1820/    180C : 640A                		bcc.s	loc_1818
    1821/    180E : 5346                		subq.w	#1,d6
    1822/    1810 : 0D05                		btst	d6,d5
    1823/    1812 : 6704                		beq.s	loc_1818
    1824/    1814 : 0043 1000           		ori.w	#$1000,d3
    1825/    1818 :                     
    1826/    1818 :                     loc_1818:
    1827/    1818 : D201                		add.b	d1,d1
    1828/    181A : 640A                		bcc.s	loc_1826
    1829/    181C : 5346                		subq.w	#1,d6
    1830/    181E : 0D05                		btst	d6,d5
    1831/    1820 : 6704                		beq.s	loc_1826
    1832/    1822 : 0043 0800           		ori.w	#$800,d3
    1833/    1826 :                     
    1834/    1826 :                     loc_1826:
    1835/    1826 : 3205                		move.w	d5,d1
    1836/    1828 : 3E06                		move.w	d6,d7
    1837/    182A : 9E4D                		sub.w	a5,d7
    1838/    182C : 6428                		bcc.s	loc_1856
    1839/    182E : 3C07                		move.w	d7,d6
    1840/    1830 : 0646 0010           		addi.w	#$10,d6
    1841/    1834 : 4447                		neg.w	d7
    1842/    1836 : EF69                		lsl.w	d7,d1
    1843/    1838 : 1A10                		move.b	(a0),d5
    1844/    183A : EF3D                		rol.b	d7,d5
    1845/    183C : DE47                		add.w	d7,d7
    1846/    183E : CA7B 702A           		and.w	word_186C-2(pc,d7.w),d5
    1847/    1842 : D245                		add.w	d5,d1
    1848/    1844 :                     
    1849/    1844 :                     loc_1844:				; XREF: loc_1868
    1850/    1844 : 300D                		move.w	a5,d0
    1851/    1846 : D040                		add.w	d0,d0
    1852/    1848 : C27B 0020           		and.w	word_186C-2(pc,d0.w),d1
    1853/    184C : D243                		add.w	d3,d1
    1854/    184E : 1A18                		move.b	(a0)+,d5
    1855/    1850 : E14D                		lsl.w	#8,d5
    1856/    1852 : 1A18                		move.b	(a0)+,d5
    1857/    1854 : 4E75                		rts	
    1858/    1856 :                     ; ===========================================================================
    1859/    1856 :                     
    1860/    1856 :                     loc_1856:				; XREF: loc_1826
    1861/    1856 : 6710                		beq.s	loc_1868
    1862/    1858 : EE69                		lsr.w	d7,d1
    1863/    185A : 300D                		move.w	a5,d0
    1864/    185C : D040                		add.w	d0,d0
    1865/    185E : C27B 000A           		and.w	word_186C-2(pc,d0.w),d1
    1866/    1862 : D243                		add.w	d3,d1
    1867/    1864 : 300D                		move.w	a5,d0
    1868/    1866 : 6024                		bra.s	sub_188C
    1869/    1868 :                     ; ===========================================================================
    1870/    1868 :                     
    1871/    1868 :                     loc_1868:				; XREF: loc_1856
    1872/    1868 : 7C10                		moveq	#$10,d6
    1873/    186A :                     
    1874/    186A :                     loc_186A:
    1875/    186A : 60D8                		bra.s	loc_1844
    1876/    186C :                     ; ===========================================================================
    1877/    186C : 0001 0003 0007 000F word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
                    001F 003F 007F 00FF 
                    01FF 03FF 07FF      
    1878/    1882 : 0FFF 1FFF 3FFF 7FFF 		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
                    FFFF                
    1879/    188C :                     
    1880/    188C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1881/    188C :                     
    1882/    188C :                     
    1883/    188C :                     sub_188C:				; XREF: EniDec
    1884/    188C : 9C40                		sub.w	d0,d6
    1885/    188E : 0C46 0009           		cmpi.w	#9,d6
    1886/    1892 : 6406                		bcc.s	locret_189A
    1887/    1894 : 5046                		addq.w	#8,d6
    1888/    1896 : E145                		asl.w	#8,d5
    1889/    1898 : 1A18                		move.b	(a0)+,d5
    1890/    189A :                     
    1891/    189A :                     locret_189A:
    1892/    189A : 4E75                		rts	
    1893/    189C :                     ; End of function sub_188C
    1894/    189C :                     
    1895/    189C :                     ; ---------------------------------------------------------------------------
    1896/    189C :                     ; Kosinski decompression algorithm
    1897/    189C :                     ; ---------------------------------------------------------------------------
    1898/    189C :                     
    1899/    189C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1900/    189C :                     
    1901/    189C :                     
    1902/    189C :                     KosDec:
    1903/    189C :                     
    1904/    189C : =$FFFFFFFFFF..      var_2		= -2
    1905/    189C : =$FFFFFFFFFF..      var_1		= -1
    1906/    189C :                     
    1907/    189C : 558F                		subq.l	#2,sp
    1908/    189E : 1F58 0001           		move.b	(a0)+,2+var_1(sp)
    1909/    18A2 : 1E98                		move.b	(a0)+,(sp)
    1910/    18A4 : 3A17                		move.w	(sp),d5
    1911/    18A6 : 780F                		moveq	#$F,d4
    1912/    18A8 :                     
    1913/    18A8 :                     loc_18A8:
    1914/    18A8 : E24D                		lsr.w	#1,d5
    1915/    18AA : 40C6                		move	sr,d6
    1916/    18AC : 51CC 000C           		dbf	d4,loc_18BA
    1917/    18B0 : 1F58 0001           		move.b	(a0)+,2+var_1(sp)
    1918/    18B4 : 1E98                		move.b	(a0)+,(sp)
    1919/    18B6 : 3A17                		move.w	(sp),d5
    1920/    18B8 : 780F                		moveq	#$F,d4
    1921/    18BA :                     
    1922/    18BA :                     loc_18BA:
    1923/    18BA : 44C6                		move	d6,ccr
    1924/    18BC : 6404                		bcc.s	loc_18C2
    1925/    18BE : 12D8                		move.b	(a0)+,(a1)+
    1926/    18C0 : 60E6                		bra.s	loc_18A8
    1927/    18C2 :                     ; ===========================================================================
    1928/    18C2 :                     
    1929/    18C2 :                     loc_18C2:				; XREF: KosDec
    1930/    18C2 : 7600                		moveq	#0,d3
    1931/    18C4 : E24D                		lsr.w	#1,d5
    1932/    18C6 : 40C6                		move	sr,d6
    1933/    18C8 : 51CC 000C           		dbf	d4,loc_18D6
    1934/    18CC : 1F58 0001           		move.b	(a0)+,2+var_1(sp)
    1935/    18D0 : 1E98                		move.b	(a0)+,(sp)
    1936/    18D2 : 3A17                		move.w	(sp),d5
    1937/    18D4 : 780F                		moveq	#$F,d4
    1938/    18D6 :                     
    1939/    18D6 :                     loc_18D6:
    1940/    18D6 : 44C6                		move	d6,ccr
    1941/    18D8 : 652C                		bcs.s	loc_1906
    1942/    18DA : E24D                		lsr.w	#1,d5
    1943/    18DC : 51CC 000C           		dbf	d4,loc_18EA
    1944/    18E0 : 1F58 0001           		move.b	(a0)+,2+var_1(sp)
    1945/    18E4 : 1E98                		move.b	(a0)+,(sp)
    1946/    18E6 : 3A17                		move.w	(sp),d5
    1947/    18E8 : 780F                		moveq	#$F,d4
    1948/    18EA :                     
    1949/    18EA :                     loc_18EA:
    1950/    18EA : E353                		roxl.w	#1,d3
    1951/    18EC : E24D                		lsr.w	#1,d5
    1952/    18EE : 51CC 000C           		dbf	d4,loc_18FC
    1953/    18F2 : 1F58 0001           		move.b	(a0)+,2+var_1(sp)
    1954/    18F6 : 1E98                		move.b	(a0)+,(sp)
    1955/    18F8 : 3A17                		move.w	(sp),d5
    1956/    18FA : 780F                		moveq	#$F,d4
    1957/    18FC :                     
    1958/    18FC :                     loc_18FC:
    1959/    18FC : E353                		roxl.w	#1,d3
    1960/    18FE : 5243                		addq.w	#1,d3
    1961/    1900 : 74FF                		moveq	#-1,d2
    1962/    1902 : 1418                		move.b	(a0)+,d2
    1963/    1904 : 6016                		bra.s	loc_191C
    1964/    1906 :                     ; ===========================================================================
    1965/    1906 :                     
    1966/    1906 :                     loc_1906:				; XREF: loc_18C2
    1967/    1906 : 1018                		move.b	(a0)+,d0
    1968/    1908 : 1218                		move.b	(a0)+,d1
    1969/    190A : 74FF                		moveq	#-1,d2
    1970/    190C : 1401                		move.b	d1,d2
    1971/    190E : EB4A                		lsl.w	#5,d2
    1972/    1910 : 1400                		move.b	d0,d2
    1973/    1912 : 0241 0007           		andi.w	#7,d1
    1974/    1916 : 6710                		beq.s	loc_1928
    1975/    1918 : 1601                		move.b	d1,d3
    1976/    191A : 5243                		addq.w	#1,d3
    1977/    191C :                     
    1978/    191C :                     loc_191C:
    1979/    191C : 1031 2000           		move.b	(a1,d2.w),d0
    1980/    1920 : 12C0                		move.b	d0,(a1)+
    1981/    1922 : 51CB FFF8           		dbf	d3,loc_191C
    1982/    1926 : 6080                		bra.s	loc_18A8
    1983/    1928 :                     ; ===========================================================================
    1984/    1928 :                     
    1985/    1928 :                     loc_1928:				; XREF: loc_1906
    1986/    1928 : 1218                		move.b	(a0)+,d1
    1987/    192A : 670C                		beq.s	loc_1938
    1988/    192C : 0C01 0001           		cmpi.b	#1,d1
    1989/    1930 : 6700 FF76           		beq.w	loc_18A8
    1990/    1934 : 1601                		move.b	d1,d3
    1991/    1936 : 60E4                		bra.s	loc_191C
    1992/    1938 :                     ; ===========================================================================
    1993/    1938 :                     
    1994/    1938 :                     loc_1938:				; XREF: loc_1928
    1995/    1938 : 548F                		addq.l	#2,sp
    1996/    193A : 4E75                		rts	
    1997/    193C :                     ; End of function KosDec
    1998/    193C :                     
    1999/    193C :                     ; ---------------------------------------------------------------------------
    2000/    193C :                     ; Pallet cycling routine loading subroutine
    2001/    193C :                     ; ---------------------------------------------------------------------------
    2002/    193C :                     
    2003/    193C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2004/    193C :                     
    2005/    193C :                     
    2006/    193C :                     PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
    2007/    193C : 7400                		moveq	#0,d2
    2008/    193E : 7000                		moveq	#0,d0
    2009/    1940 : 1038 FE10           		move.b	($FFFFFE10).w,d0 ; get level number
    2010/    1944 : D040                		add.w	d0,d0		; multiply by 2
    2011/    1946 : 303B 0006           		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
    2012/    194A : 4EFB 0002           		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
    2013/    194E :                     ; End of function PalCycle_Load
    2014/    194E :                     
    2015/    194E :                     ; ===========================================================================
    2016/    194E :                     ; ---------------------------------------------------------------------------
    2017/    194E :                     ; Pallet cycling routines
    2018/    194E :                     ; ---------------------------------------------------------------------------
    2019/    194E : 0016                PalCycle:	dc.w PalCycle_GHZ-PalCycle
    2020/    1950 : 0044                		dc.w PalCycle_LZ-PalCycle
    2021/    1952 : 00F6                		dc.w PalCycle_MZ-PalCycle
    2022/    1954 : 00F8                		dc.w PalCycle_SLZ-PalCycle
    2023/    1956 : 0134                		dc.w PalCycle_SYZ-PalCycle
    2024/    1958 : 017A                		dc.w PalCycle_SBZ-PalCycle
    2025/    195A : 0016                		dc.w PalCycle_GHZ-PalCycle
    2026/    195C :                     
    2027/    195C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2028/    195C :                     
    2029/    195C :                     
    2030/    195C :                     PalCycle_Title:				; XREF: TitleScreen
    2031/    195C : 41F9 0000 1B66      		lea	(Pal_TitleCyc).l,a0
    2032/    1962 : 6006                		bra.s	loc_196A
    2033/    1964 :                     ; ===========================================================================
    2034/    1964 :                     
    2035/    1964 :                     PalCycle_GHZ:				; XREF: PalCycle
    2036/    1964 : 41F9 0000 1B86      		lea	(Pal_GHZCyc).l,a0
    2037/    196A :                     
    2038/    196A :                     loc_196A:				; XREF: PalCycle_Title
    2039/    196A : 5378 F634           		subq.w	#1,($FFFFF634).w
    2040/    196E : 6A20                		bpl.s	locret_1990
    2041/    1970 : 31FC 0005 F634      		move.w	#5,($FFFFF634).w
    2042/    1976 : 3038 F632           		move.w	($FFFFF632).w,d0
    2043/    197A : 5278 F632           		addq.w	#1,($FFFFF632).w
    2044/    197E : 0240 0003           		andi.w	#3,d0
    2045/    1982 : E748                		lsl.w	#3,d0
    2046/    1984 : 43F8 FB50           		lea	($FFFFFB50).w,a1
    2047/    1988 : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    2048/    198C : 22B0 0004           		move.l	4(a0,d0.w),(a1)
    2049/    1990 :                     
    2050/    1990 :                     locret_1990:
    2051/    1990 : 4E75                		rts	
    2052/    1992 :                     ; End of function PalCycle_Title
    2053/    1992 :                     
    2054/    1992 :                     
    2055/    1992 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2056/    1992 :                     
    2057/    1992 :                     
    2058/    1992 :                     PalCycle_LZ:				; XREF: PalCycle
    2059/    1992 : 5378 F634           		subq.w	#1,($FFFFF634).w
    2060/    1996 : 6A40                		bpl.s	loc_19D8
    2061/    1998 : 31FC 0002 F634      		move.w	#2,($FFFFF634).w
    2062/    199E : 3038 F632           		move.w	($FFFFF632).w,d0
    2063/    19A2 : 5278 F632           		addq.w	#1,($FFFFF632).w
    2064/    19A6 : 0240 0003           		andi.w	#3,d0
    2065/    19AA : E748                		lsl.w	#3,d0
    2066/    19AC : 41F9 0000 1BA6      		lea	(Pal_LZCyc1).l,a0
    2067/    19B2 : 0C38 0003 FE11      		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
    2068/    19B8 : 6606                		bne.s	loc_19C0
    2069/    19BA : 41F9 0000 1BEA      		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
    2070/    19C0 :                     
    2071/    19C0 :                     loc_19C0:
    2072/    19C0 : 43F8 FB56           		lea	($FFFFFB56).w,a1
    2073/    19C4 : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    2074/    19C8 : 22B0 0004           		move.l	4(a0,d0.w),(a1)
    2075/    19CC : 43F8 FAD6           		lea	($FFFFFAD6).w,a1
    2076/    19D0 : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    2077/    19D4 : 22B0 0004           		move.l	4(a0,d0.w),(a1)
    2078/    19D8 :                     
    2079/    19D8 :                     loc_19D8:
    2080/    19D8 : 3038 FE04           		move.w	($FFFFFE04).w,d0
    2081/    19DC : 0240 0007           		andi.w	#7,d0
    2082/    19E0 : 103B 005A           		move.b	byte_1A3C(pc,d0.w),d0
    2083/    19E4 : 6754                		beq.s	locret_1A3A
    2084/    19E6 : 7201                		moveq	#1,d1
    2085/    19E8 : 4A38 F7C0           		tst.b	($FFFFF7C0).w
    2086/    19EC : 6702                		beq.s	loc_19F0
    2087/    19EE : 4441                		neg.w	d1
    2088/    19F0 :                     
    2089/    19F0 :                     loc_19F0:
    2090/    19F0 : 3038 F650           		move.w	($FFFFF650).w,d0
    2091/    19F4 : 0240 0003           		andi.w	#3,d0
    2092/    19F8 : D041                		add.w	d1,d0
    2093/    19FA : 0C40 0003           		cmpi.w	#3,d0
    2094/    19FE : 650A                		bcs.s	loc_1A0A
    2095/    1A00 : 3200                		move.w	d0,d1
    2096/    1A02 : 7000                		moveq	#0,d0
    2097/    1A04 : 4A41                		tst.w	d1
    2098/    1A06 : 6A02                		bpl.s	loc_1A0A
    2099/    1A08 : 7002                		moveq	#2,d0
    2100/    1A0A :                     
    2101/    1A0A :                     loc_1A0A:
    2102/    1A0A : 31C0 F650           		move.w	d0,($FFFFF650).w
    2103/    1A0E : D040                		add.w	d0,d0
    2104/    1A10 : 3200                		move.w	d0,d1
    2105/    1A12 : D040                		add.w	d0,d0
    2106/    1A14 : D041                		add.w	d1,d0
    2107/    1A16 : 41F9 0000 1BC6      		lea	(Pal_LZCyc2).l,a0
    2108/    1A1C : 43F8 FB76           		lea	($FFFFFB76).w,a1
    2109/    1A20 : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    2110/    1A24 : 32B0 0004           		move.w	4(a0,d0.w),(a1)
    2111/    1A28 : 41F9 0000 1BD8      		lea	(Pal_LZCyc3).l,a0
    2112/    1A2E : 43F8 FAF6           		lea	($FFFFFAF6).w,a1
    2113/    1A32 : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    2114/    1A36 : 32B0 0004           		move.w	4(a0,d0.w),(a1)
    2115/    1A3A :                     
    2116/    1A3A :                     locret_1A3A:
    2117/    1A3A : 4E75                		rts	
    2118/    1A3C :                     ; End of function PalCycle_LZ
    2119/    1A3C :                     
    2120/    1A3C :                     ; ===========================================================================
    2121/    1A3C : 0100 0001 0000 0100 byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
    2122/    1A44 :                     ; ===========================================================================
    2123/    1A44 :                     
    2124/    1A44 :                     PalCycle_MZ:				; XREF: PalCycle
    2125/    1A44 : 4E75                		rts	
    2126/    1A46 :                     
    2127/    1A46 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2128/    1A46 :                     
    2129/    1A46 :                     
    2130/    1A46 :                     PalCycle_SLZ:				; XREF: PalCycle
    2131/    1A46 : 5378 F634           		subq.w	#1,($FFFFF634).w
    2132/    1A4A : 6A34                		bpl.s	locret_1A80
    2133/    1A4C : 31FC 0007 F634      		move.w	#7,($FFFFF634).w
    2134/    1A52 : 3038 F632           		move.w	($FFFFF632).w,d0
    2135/    1A56 : 5240                		addq.w	#1,d0
    2136/    1A58 : 0C40 0006           		cmpi.w	#6,d0
    2137/    1A5C : 6502                		bcs.s	loc_1A60
    2138/    1A5E : 7000                		moveq	#0,d0
    2139/    1A60 :                     
    2140/    1A60 :                     loc_1A60:
    2141/    1A60 : 31C0 F632           		move.w	d0,($FFFFF632).w
    2142/    1A64 : 3200                		move.w	d0,d1
    2143/    1A66 : D241                		add.w	d1,d1
    2144/    1A68 : D041                		add.w	d1,d0
    2145/    1A6A : D040                		add.w	d0,d0
    2146/    1A6C : 41F9 0000 1C52      		lea	(Pal_SLZCyc).l,a0
    2147/    1A72 : 43F8 FB56           		lea	($FFFFFB56).w,a1
    2148/    1A76 : 32B0 0000           		move.w	(a0,d0.w),(a1)
    2149/    1A7A : 2370 0002 0004      		move.l	2(a0,d0.w),4(a1)
    2150/    1A80 :                     
    2151/    1A80 :                     locret_1A80:
    2152/    1A80 : 4E75                		rts	
    2153/    1A82 :                     ; End of function PalCycle_SLZ
    2154/    1A82 :                     
    2155/    1A82 :                     
    2156/    1A82 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2157/    1A82 :                     
    2158/    1A82 :                     
    2159/    1A82 :                     PalCycle_SYZ:				; XREF: PalCycle
    2160/    1A82 : 5378 F634           		subq.w	#1,($FFFFF634).w
    2161/    1A86 : 6A3E                		bpl.s	locret_1AC6
    2162/    1A88 : 31FC 0005 F634      		move.w	#5,($FFFFF634).w
    2163/    1A8E : 3038 F632           		move.w	($FFFFF632).w,d0
    2164/    1A92 : 5278 F632           		addq.w	#1,($FFFFF632).w
    2165/    1A96 : 0240 0003           		andi.w	#3,d0
    2166/    1A9A : E548                		lsl.w	#2,d0
    2167/    1A9C : 3200                		move.w	d0,d1
    2168/    1A9E : D040                		add.w	d0,d0
    2169/    1AA0 : 41F9 0000 1C76      		lea	(Pal_SYZCyc1).l,a0
    2170/    1AA6 : 43F8 FB6E           		lea	($FFFFFB6E).w,a1
    2171/    1AAA : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    2172/    1AAE : 22B0 0004           		move.l	4(a0,d0.w),(a1)
    2173/    1AB2 : 41F9 0000 1C96      		lea	(Pal_SYZCyc2).l,a0
    2174/    1AB8 : 43F8 FB76           		lea	($FFFFFB76).w,a1
    2175/    1ABC : 32B0 1000           		move.w	(a0,d1.w),(a1)
    2176/    1AC0 : 3370 1002 0004      		move.w	2(a0,d1.w),4(a1)
    2177/    1AC6 :                     
    2178/    1AC6 :                     locret_1AC6:
    2179/    1AC6 : 4E75                		rts	
    2180/    1AC8 :                     ; End of function PalCycle_SYZ
    2181/    1AC8 :                     
    2182/    1AC8 :                     
    2183/    1AC8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2184/    1AC8 :                     
    2185/    1AC8 :                     
    2186/    1AC8 :                     PalCycle_SBZ:				; XREF: PalCycle
    2187/    1AC8 : 45F9 0000 1CA6      		lea	(Pal_SBZCycList).l,a2
    2188/    1ACE : 4A38 FE11           		tst.b	($FFFFFE11).w
    2189/    1AD2 : 6706                		beq.s	loc_1ADA
    2190/    1AD4 : 45F9 0000 1CDE      		lea	(Pal_SBZCycList2).l,a2
    2191/    1ADA :                     
    2192/    1ADA :                     loc_1ADA:
    2193/    1ADA : 43F8 F650           		lea	($FFFFF650).w,a1
    2194/    1ADE : 321A                		move.w	(a2)+,d1
    2195/    1AE0 :                     
    2196/    1AE0 :                     loc_1AE0:
    2197/    1AE0 : 5311                		subq.b	#1,(a1)
    2198/    1AE2 : 6B06                		bmi.s	loc_1AEA
    2199/    1AE4 : 5489                		addq.l	#2,a1
    2200/    1AE6 : 5C8A                		addq.l	#6,a2
    2201/    1AE8 : 601C                		bra.s	loc_1B06
    2202/    1AEA :                     ; ===========================================================================
    2203/    1AEA :                     
    2204/    1AEA :                     loc_1AEA:				; XREF: PalCycle_SBZ
    2205/    1AEA : 12DA                		move.b	(a2)+,(a1)+
    2206/    1AEC : 1011                		move.b	(a1),d0
    2207/    1AEE : 5200                		addq.b	#1,d0
    2208/    1AF0 : B01A                		cmp.b	(a2)+,d0
    2209/    1AF2 : 6502                		bcs.s	loc_1AF6
    2210/    1AF4 : 7000                		moveq	#0,d0
    2211/    1AF6 :                     
    2212/    1AF6 :                     loc_1AF6:
    2213/    1AF6 : 12C0                		move.b	d0,(a1)+
    2214/    1AF8 : 0240 000F           		andi.w	#$F,d0
    2215/    1AFC : D040                		add.w	d0,d0
    2216/    1AFE : 305A                		movea.w	(a2)+,a0
    2217/    1B00 : 365A                		movea.w	(a2)+,a3
    2218/    1B02 : 36B0 0000           		move.w	(a0,d0.w),(a3)
    2219/    1B06 :                     
    2220/    1B06 :                     loc_1B06:				; XREF: PalCycle_SBZ
    2221/    1B06 : 51C9 FFD8           		dbf	d1,loc_1AE0
    2222/    1B0A : 5378 F634           		subq.w	#1,($FFFFF634).w
    2223/    1B0E : 6A54                		bpl.s	locret_1B64
    2224/    1B10 : 41F9 0000 1D4A      		lea	(Pal_SBZCyc4).l,a0
    2225/    1B16 : 31FC 0001 F634      		move.w	#1,($FFFFF634).w
    2226/    1B1C : 4A38 FE11           		tst.b	($FFFFFE11).w
    2227/    1B20 : 670C                		beq.s	loc_1B2E
    2228/    1B22 : 41F9 0000 1DB0      		lea	(Pal_SBZCyc10).l,a0
    2229/    1B28 : 31FC 0000 F634      		move.w	#0,($FFFFF634).w
    2230/    1B2E :                     
    2231/    1B2E :                     loc_1B2E:
    2232/    1B2E : 72FF                		moveq	#-1,d1
    2233/    1B30 : 4A38 F7C0           		tst.b	($FFFFF7C0).w
    2234/    1B34 : 6702                		beq.s	loc_1B38
    2235/    1B36 : 4441                		neg.w	d1
    2236/    1B38 :                     
    2237/    1B38 :                     loc_1B38:
    2238/    1B38 : 3038 F632           		move.w	($FFFFF632).w,d0
    2239/    1B3C : 0240 0003           		andi.w	#3,d0
    2240/    1B40 : D041                		add.w	d1,d0
    2241/    1B42 : 0C40 0003           		cmpi.w	#3,d0
    2242/    1B46 : 650A                		bcs.s	loc_1B52
    2243/    1B48 : 3200                		move.w	d0,d1
    2244/    1B4A : 7000                		moveq	#0,d0
    2245/    1B4C : 4A41                		tst.w	d1
    2246/    1B4E : 6A02                		bpl.s	loc_1B52
    2247/    1B50 : 7002                		moveq	#2,d0
    2248/    1B52 :                     
    2249/    1B52 :                     loc_1B52:
    2250/    1B52 : 31C0 F632           		move.w	d0,($FFFFF632).w
    2251/    1B56 : D040                		add.w	d0,d0
    2252/    1B58 : 43F8 FB58           		lea	($FFFFFB58).w,a1
    2253/    1B5C : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    2254/    1B60 : 32B0 0004           		move.w	4(a0,d0.w),(a1)
    2255/    1B64 :                     
    2256/    1B64 :                     locret_1B64:
    2257/    1B64 : 4E75                		rts	
    2258/    1B66 :                     ; End of function PalCycle_SBZ
    2259/    1B66 :                     
    2260/    1B66 :                     ; ===========================================================================
    2261/    1B66 :                     Pal_TitleCyc:	binclude	pallet/c_title.bin
    2262/    1B86 :                     Pal_GHZCyc:	binclude	pallet/c_ghz.bin
    2263/    1BA6 :                     Pal_LZCyc1:	binclude	pallet/c_lz_wat.bin	; waterfalls pallet
    2264/    1BC6 :                     Pal_LZCyc2:	binclude	pallet/c_lz_bel.bin	; conveyor belt pallet
    2265/    1BD8 :                     Pal_LZCyc3:	binclude	pallet/c_lz_buw.bin	; conveyor belt (underwater) pallet
    2266/    1BEA :                     Pal_SBZ3Cyc1:	binclude	pallet/c_sbz3_w.bin	; waterfalls pallet
    2267/    1C52 :                     Pal_SLZCyc:	binclude	pallet/c_slz.bin
    2268/    1C76 :                     Pal_SYZCyc1:	binclude	pallet/c_syz_1.bin
    2269/    1C96 :                     Pal_SYZCyc2:	binclude	pallet/c_syz_2.bin
    2270/    1CA6 :                     
    2271/    1CA6 :                     Pal_SBZCycList:
    2272/    1CA6 :                     		include	"_inc/SBZ pallet script 1.asm"
(1)    1/    1CA6 :                     ; ---------------------------------------------------------------------------
(1)    2/    1CA6 :                     ; Scrap Brain Zone 1 pallet cycling script
(1)    3/    1CA6 :                     ; ---------------------------------------------------------------------------
(1)    4/    1CA6 : 0008                	dc.w 8			; number of entries - 1
(1)    5/    1CA8 : 0708                	dc.b 7,	8		; duration in frames, number of	colours
(1)    6/    1CAA : 1D0A                	dc.w Pal_SBZCyc1	; pallet pointer
(1)    7/    1CAC : FB50                	dc.w $FB50		; RAM address
(1)    8/    1CAE : 0D08                	dc.b $D, 8
(1)    9/    1CB0 : 1D2A                	dc.w Pal_SBZCyc2
(1)   10/    1CB2 : FB52                	dc.w $FB52
(1)   11/    1CB4 : 0E08                	dc.b $E, 8
(1)   12/    1CB6 : 1D3A                	dc.w Pal_SBZCyc3
(1)   13/    1CB8 : FB6E                	dc.w $FB6E
(1)   14/    1CBA : 0B08                	dc.b $B, 8
(1)   15/    1CBC : 1D56                	dc.w Pal_SBZCyc5
(1)   16/    1CBE : FB70                	dc.w $FB70
(1)   17/    1CC0 : 0708                	dc.b 7,	8
(1)   18/    1CC2 : 1D66                	dc.w Pal_SBZCyc6
(1)   19/    1CC4 : FB72                	dc.w $FB72
(1)   20/    1CC6 : 1C10                	dc.b $1C, $10
(1)   21/    1CC8 : 1D76                	dc.w Pal_SBZCyc7
(1)   22/    1CCA : FB7E                	dc.w $FB7E
(1)   23/    1CCC : 0303                	dc.b 3,	3
(1)   24/    1CCE : 1D96                	dc.w Pal_SBZCyc8
(1)   25/    1CD0 : FB78                	dc.w $FB78
(1)   26/    1CD2 : 0303                	dc.b 3,	3
(1)   27/    1CD4 : 1D98                	dc.w Pal_SBZCyc8+2
(1)   28/    1CD6 : FB7A                	dc.w $FB7A
(1)   29/    1CD8 : 0303                	dc.b 3,	3
(1)   30/    1CDA : 1D9A                	dc.w Pal_SBZCyc8+4
(1)   31/    1CDC : FB7C                	dc.w $FB7C
(1)   32/    1CDE : (MACRO)             	align 2
(1)   32/    1CDE :  (MACRO-2)                  cnop 0,2
(1)   32/    1CDE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    2273/    1CDE :                     
    2274/    1CDE :                     Pal_SBZCycList2:
    2275/    1CDE :                     		include	"_inc/SBZ pallet script 2.asm"
(1)    1/    1CDE :                     ; ---------------------------------------------------------------------------
(1)    2/    1CDE :                     ; Scrap Brain Zone 2 pallet cycling script
(1)    3/    1CDE :                     ; ---------------------------------------------------------------------------
(1)    4/    1CDE : 0006                	dc.w 6
(1)    5/    1CE0 : 0708                	dc.b 7,	8
(1)    6/    1CE2 : 1D0A                	dc.w Pal_SBZCyc1
(1)    7/    1CE4 : FB50                	dc.w $FB50
(1)    8/    1CE6 : 0D08                	dc.b $D, 8
(1)    9/    1CE8 : 1D2A                	dc.w Pal_SBZCyc2
(1)   10/    1CEA : FB52                	dc.w $FB52
(1)   11/    1CEC : 0908                	dc.b 9,	8
(1)   12/    1CEE : 1DA0                	dc.w Pal_SBZCyc9
(1)   13/    1CF0 : FB70                	dc.w $FB70
(1)   14/    1CF2 : 0708                	dc.b 7,	8
(1)   15/    1CF4 : 1D66                	dc.w Pal_SBZCyc6
(1)   16/    1CF6 : FB72                	dc.w $FB72
(1)   17/    1CF8 : 0303                	dc.b 3,	3
(1)   18/    1CFA : 1D96                	dc.w Pal_SBZCyc8
(1)   19/    1CFC : FB78                	dc.w $FB78
(1)   20/    1CFE : 0303                	dc.b 3,	3
(1)   21/    1D00 : 1D98                	dc.w Pal_SBZCyc8+2
(1)   22/    1D02 : FB7A                	dc.w $FB7A
(1)   23/    1D04 : 0303                	dc.b 3,	3
(1)   24/    1D06 : 1D9A                	dc.w Pal_SBZCyc8+4
(1)   25/    1D08 : FB7C                	dc.w $FB7C
(1)   26/    1D0A : (MACRO)             	align 2
(1)   26/    1D0A :  (MACRO-2)                  cnop 0,2
(1)   26/    1D0A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    2276/    1D0A :                     
    2277/    1D0A :                     Pal_SBZCyc1:	binclude	pallet/c_sbz_1.bin
    2278/    1D2A :                     Pal_SBZCyc2:	binclude	pallet/c_sbz_2.bin
    2279/    1D3A :                     Pal_SBZCyc3:	binclude	pallet/c_sbz_3.bin
    2280/    1D4A :                     Pal_SBZCyc4:	binclude	pallet/c_sbz_4.bin
    2281/    1D56 :                     Pal_SBZCyc5:	binclude	pallet/c_sbz_5.bin
    2282/    1D66 :                     Pal_SBZCyc6:	binclude	pallet/c_sbz_6.bin
    2283/    1D76 :                     Pal_SBZCyc7:	binclude	pallet/c_sbz_7.bin
    2284/    1D96 :                     Pal_SBZCyc8:	binclude	pallet/c_sbz_8.bin
    2285/    1DA0 :                     Pal_SBZCyc9:	binclude	pallet/c_sbz_9.bin
    2286/    1DB0 :                     Pal_SBZCyc10:	binclude	pallet/c_sbz_10.bin
    2287/    1DBC :                     ; ---------------------------------------------------------------------------
    2288/    1DBC :                     ; Subroutine to	fade out and fade in
    2289/    1DBC :                     ; ---------------------------------------------------------------------------
    2290/    1DBC :                     
    2291/    1DBC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2292/    1DBC :                     
    2293/    1DBC :                     
    2294/    1DBC :                     Pal_FadeTo:
    2295/    1DBC : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    2296/    1DC2 :                     
    2297/    1DC2 :                     Pal_FadeTo2:
    2298/    1DC2 : 7000                		moveq	#0,d0
    2299/    1DC4 : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2300/    1DC8 : 1038 F626           		move.b	($FFFFF626).w,d0
    2301/    1DCC : D0C0                		adda.w	d0,a0
    2302/    1DCE : 7200                		moveq	#0,d1
    2303/    1DD0 : 1038 F627           		move.b	($FFFFF627).w,d0
    2304/    1DD4 :                     
    2305/    1DD4 :                     Pal_ToBlack:
    2306/    1DD4 : 30C1                		move.w	d1,(a0)+
    2307/    1DD6 : 51C8 FFFC           		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
    2308/    1DDA :                     
    2309/    1DDA : 383C 0015           		move.w	#$15,d4
    2310/    1DDE :                     
    2311/    1DDE :                     loc_1DCE:
    2312/    1DDE : 11FC 0012 F62A      		move.b	#$12,($FFFFF62A).w
    2313/    1DE4 : 6100 0BD2           		bsr.w	DelayProgram
    2314/    1DE8 : 610A                		bsr.s	Pal_FadeIn
    2315/    1DEA : 6100 F800           		bsr.w	RunPLC_RAM
    2316/    1DEE : 51CC FFEE           		dbf	d4,loc_1DCE
    2317/    1DF2 : 4E75                		rts	
    2318/    1DF4 :                     ; End of function Pal_FadeTo
    2319/    1DF4 :                     
    2320/    1DF4 :                     ; ---------------------------------------------------------------------------
    2321/    1DF4 :                     ; Pallet fade-in subroutine
    2322/    1DF4 :                     ; ---------------------------------------------------------------------------
    2323/    1DF4 :                     
    2324/    1DF4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2325/    1DF4 :                     
    2326/    1DF4 :                     
    2327/    1DF4 :                     Pal_FadeIn:				; XREF: Pal_FadeTo
    2328/    1DF4 : 7000                		moveq	#0,d0
    2329/    1DF6 : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2330/    1DFA : 43F8 FB80           		lea	($FFFFFB80).w,a1
    2331/    1DFE : 1038 F626           		move.b	($FFFFF626).w,d0
    2332/    1E02 : D0C0                		adda.w	d0,a0
    2333/    1E04 : D2C0                		adda.w	d0,a1
    2334/    1E06 : 1038 F627           		move.b	($FFFFF627).w,d0
    2335/    1E0A :                     
    2336/    1E0A :                     loc_1DFA:
    2337/    1E0A : 612A                		bsr.s	Pal_AddColor
    2338/    1E0C : 51C8 FFFC           		dbf	d0,loc_1DFA
    2339/    1E10 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
    2340/    1E16 : 661C                		bne.s	locret_1E24
    2341/    1E18 : 7000                		moveq	#0,d0
    2342/    1E1A : 41F8 FA80           		lea	($FFFFFA80).w,a0
    2343/    1E1E : 43F8 FA00           		lea	($FFFFFA00).w,a1
    2344/    1E22 : 1038 F626           		move.b	($FFFFF626).w,d0
    2345/    1E26 : D0C0                		adda.w	d0,a0
    2346/    1E28 : D2C0                		adda.w	d0,a1
    2347/    1E2A : 1038 F627           		move.b	($FFFFF627).w,d0
    2348/    1E2E :                     
    2349/    1E2E :                     loc_1E1E:
    2350/    1E2E : 6106                		bsr.s	Pal_AddColor
    2351/    1E30 : 51C8 FFFC           		dbf	d0,loc_1E1E
    2352/    1E34 :                     
    2353/    1E34 :                     locret_1E24:
    2354/    1E34 : 4E75                		rts	
    2355/    1E36 :                     ; End of function Pal_FadeIn
    2356/    1E36 :                     
    2357/    1E36 :                     
    2358/    1E36 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2359/    1E36 :                     
    2360/    1E36 :                     
    2361/    1E36 :                     Pal_AddColor:				; XREF: Pal_FadeIn
    2362/    1E36 : 3419                		move.w	(a1)+,d2
    2363/    1E38 : 3610                		move.w	(a0),d3
    2364/    1E3A : B642                		cmp.w	d2,d3
    2365/    1E3C : 6720                		beq.s	loc_1E4E
    2366/    1E3E : 3203                		move.w	d3,d1
    2367/    1E40 : 0641 0200           		addi.w	#$200,d1	; increase blue	value
    2368/    1E44 : B242                		cmp.w	d2,d1		; has blue reached threshold level?
    2369/    1E46 : 6204                		bhi.s	Pal_AddGreen	; if yes, branch
    2370/    1E48 : 30C1                		move.w	d1,(a0)+	; update pallet
    2371/    1E4A : 4E75                		rts	
    2372/    1E4C :                     ; ===========================================================================
    2373/    1E4C :                     
    2374/    1E4C :                     Pal_AddGreen:				; XREF: Pal_AddColor
    2375/    1E4C : 3203                		move.w	d3,d1
    2376/    1E4E : 0641 0020           		addi.w	#$20,d1		; increase green value
    2377/    1E52 : B242                		cmp.w	d2,d1
    2378/    1E54 : 6204                		bhi.s	Pal_AddRed
    2379/    1E56 : 30C1                		move.w	d1,(a0)+	; update pallet
    2380/    1E58 : 4E75                		rts	
    2381/    1E5A :                     ; ===========================================================================
    2382/    1E5A :                     
    2383/    1E5A :                     Pal_AddRed:				; XREF: Pal_AddGreen
    2384/    1E5A : 5458                		addq.w	#2,(a0)+	; increase red value
    2385/    1E5C : 4E75                		rts	
    2386/    1E5E :                     ; ===========================================================================
    2387/    1E5E :                     
    2388/    1E5E :                     loc_1E4E:				; XREF: Pal_AddColor
    2389/    1E5E : 5448                		addq.w	#2,a0
    2390/    1E60 : 4E75                		rts	
    2391/    1E62 :                     ; End of function Pal_AddColor
    2392/    1E62 :                     
    2393/    1E62 :                     
    2394/    1E62 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2395/    1E62 :                     
    2396/    1E62 :                     
    2397/    1E62 :                     Pal_FadeFrom:
    2398/    1E62 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    2399/    1E68 : 383C 0015           		move.w	#$15,d4
    2400/    1E6C :                     
    2401/    1E6C :                     loc_1E5C:
    2402/    1E6C : 11FC 0012 F62A      		move.b	#$12,($FFFFF62A).w
    2403/    1E72 : 6100 0B44           		bsr.w	DelayProgram
    2404/    1E76 : 610A                		bsr.s	Pal_FadeOut
    2405/    1E78 : 6100 F772           		bsr.w	RunPLC_RAM
    2406/    1E7C : 51CC FFEE           		dbf	d4,loc_1E5C
    2407/    1E80 : 4E75                		rts	
    2408/    1E82 :                     ; End of function Pal_FadeFrom
    2409/    1E82 :                     
    2410/    1E82 :                     ; ---------------------------------------------------------------------------
    2411/    1E82 :                     ; Pallet fade-out subroutine
    2412/    1E82 :                     ; ---------------------------------------------------------------------------
    2413/    1E82 :                     
    2414/    1E82 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2415/    1E82 :                     
    2416/    1E82 :                     
    2417/    1E82 :                     Pal_FadeOut:				; XREF: Pal_FadeFrom
    2418/    1E82 : 7000                		moveq	#0,d0
    2419/    1E84 : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2420/    1E88 : 1038 F626           		move.b	($FFFFF626).w,d0
    2421/    1E8C : D0C0                		adda.w	d0,a0
    2422/    1E8E : 1038 F627           		move.b	($FFFFF627).w,d0
    2423/    1E92 :                     
    2424/    1E92 :                     loc_1E82:
    2425/    1E92 : 611C                		bsr.s	Pal_DecColor
    2426/    1E94 : 51C8 FFFC           		dbf	d0,loc_1E82
    2427/    1E98 :                     
    2428/    1E98 : 7000                		moveq	#0,d0
    2429/    1E9A : 41F8 FA80           		lea	($FFFFFA80).w,a0
    2430/    1E9E : 1038 F626           		move.b	($FFFFF626).w,d0
    2431/    1EA2 : D0C0                		adda.w	d0,a0
    2432/    1EA4 : 1038 F627           		move.b	($FFFFF627).w,d0
    2433/    1EA8 :                     
    2434/    1EA8 :                     loc_1E98:
    2435/    1EA8 : 6106                		bsr.s	Pal_DecColor
    2436/    1EAA : 51C8 FFFC           		dbf	d0,loc_1E98
    2437/    1EAE : 4E75                		rts	
    2438/    1EB0 :                     ; End of function Pal_FadeOut
    2439/    1EB0 :                     
    2440/    1EB0 :                     
    2441/    1EB0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2442/    1EB0 :                     
    2443/    1EB0 :                     
    2444/    1EB0 :                     Pal_DecColor:				; XREF: Pal_FadeOut
    2445/    1EB0 : 3410                		move.w	(a0),d2
    2446/    1EB2 : 6728                		beq.s	loc_1ECC
    2447/    1EB4 : 3202                		move.w	d2,d1
    2448/    1EB6 : 0241 000E           		andi.w	#$E,d1
    2449/    1EBA : 6704                		beq.s	Pal_DecGreen
    2450/    1EBC : 5558                		subq.w	#2,(a0)+	; decrease red value
    2451/    1EBE : 4E75                		rts	
    2452/    1EC0 :                     ; ===========================================================================
    2453/    1EC0 :                     
    2454/    1EC0 :                     Pal_DecGreen:				; XREF: Pal_DecColor
    2455/    1EC0 : 3202                		move.w	d2,d1
    2456/    1EC2 : 0241 00E0           		andi.w	#$E0,d1
    2457/    1EC6 : 6706                		beq.s	Pal_DecBlue
    2458/    1EC8 : 0458 0020           		subi.w	#$20,(a0)+	; decrease green value
    2459/    1ECC : 4E75                		rts	
    2460/    1ECE :                     ; ===========================================================================
    2461/    1ECE :                     
    2462/    1ECE :                     Pal_DecBlue:				; XREF: Pal_DecGreen
    2463/    1ECE : 3202                		move.w	d2,d1
    2464/    1ED0 : 0241 0E00           		andi.w	#$E00,d1
    2465/    1ED4 : 6706                		beq.s	loc_1ECC
    2466/    1ED6 : 0458 0200           		subi.w	#$200,(a0)+	; decrease blue	value
    2467/    1EDA : 4E75                		rts	
    2468/    1EDC :                     ; ===========================================================================
    2469/    1EDC :                     
    2470/    1EDC :                     loc_1ECC:				; XREF: Pal_DecColor
    2471/    1EDC : 5448                		addq.w	#2,a0
    2472/    1EDE : 4E75                		rts	
    2473/    1EE0 :                     ; End of function Pal_DecColor
    2474/    1EE0 :                     
    2475/    1EE0 :                     ; ---------------------------------------------------------------------------
    2476/    1EE0 :                     ; Subroutine to	fill the pallet	with white (special stage)
    2477/    1EE0 :                     ; ---------------------------------------------------------------------------
    2478/    1EE0 :                     
    2479/    1EE0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2480/    1EE0 :                     
    2481/    1EE0 :                     
    2482/    1EE0 :                     Pal_MakeWhite:				; XREF: SpecialStage
    2483/    1EE0 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    2484/    1EE6 : 7000                		moveq	#0,d0
    2485/    1EE8 : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2486/    1EEC : 1038 F626           		move.b	($FFFFF626).w,d0
    2487/    1EF0 : D0C0                		adda.w	d0,a0
    2488/    1EF2 : 323C 0EEE           		move.w	#$EEE,d1
    2489/    1EF6 : 1038 F627           		move.b	($FFFFF627).w,d0
    2490/    1EFA :                     
    2491/    1EFA :                     PalWhite_Loop:
    2492/    1EFA : 30C1                		move.w	d1,(a0)+
    2493/    1EFC : 51C8 FFFC           		dbf	d0,PalWhite_Loop
    2494/    1F00 : 383C 0015           		move.w	#$15,d4
    2495/    1F04 :                     
    2496/    1F04 :                     loc_1EF4:
    2497/    1F04 : 11FC 0012 F62A      		move.b	#$12,($FFFFF62A).w
    2498/    1F0A : 6100 0AAC           		bsr.w	DelayProgram
    2499/    1F0E : 610A                		bsr.s	Pal_WhiteToBlack
    2500/    1F10 : 6100 F6DA           		bsr.w	RunPLC_RAM
    2501/    1F14 : 51CC FFEE           		dbf	d4,loc_1EF4
    2502/    1F18 : 4E75                		rts	
    2503/    1F1A :                     ; End of function Pal_MakeWhite
    2504/    1F1A :                     
    2505/    1F1A :                     
    2506/    1F1A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2507/    1F1A :                     
    2508/    1F1A :                     
    2509/    1F1A :                     Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
    2510/    1F1A : 7000                		moveq	#0,d0
    2511/    1F1C : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2512/    1F20 : 43F8 FB80           		lea	($FFFFFB80).w,a1
    2513/    1F24 : 1038 F626           		move.b	($FFFFF626).w,d0
    2514/    1F28 : D0C0                		adda.w	d0,a0
    2515/    1F2A : D2C0                		adda.w	d0,a1
    2516/    1F2C : 1038 F627           		move.b	($FFFFF627).w,d0
    2517/    1F30 :                     
    2518/    1F30 :                     loc_1F20:
    2519/    1F30 : 612A                		bsr.s	Pal_DecColor2
    2520/    1F32 : 51C8 FFFC           		dbf	d0,loc_1F20
    2521/    1F36 :                     
    2522/    1F36 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
    2523/    1F3C : 661C                		bne.s	locret_1F4A
    2524/    1F3E : 7000                		moveq	#0,d0
    2525/    1F40 : 41F8 FA80           		lea	($FFFFFA80).w,a0
    2526/    1F44 : 43F8 FA00           		lea	($FFFFFA00).w,a1
    2527/    1F48 : 1038 F626           		move.b	($FFFFF626).w,d0
    2528/    1F4C : D0C0                		adda.w	d0,a0
    2529/    1F4E : D2C0                		adda.w	d0,a1
    2530/    1F50 : 1038 F627           		move.b	($FFFFF627).w,d0
    2531/    1F54 :                     
    2532/    1F54 :                     loc_1F44:
    2533/    1F54 : 6106                		bsr.s	Pal_DecColor2
    2534/    1F56 : 51C8 FFFC           		dbf	d0,loc_1F44
    2535/    1F5A :                     
    2536/    1F5A :                     locret_1F4A:
    2537/    1F5A : 4E75                		rts	
    2538/    1F5C :                     ; End of function Pal_WhiteToBlack
    2539/    1F5C :                     
    2540/    1F5C :                     
    2541/    1F5C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2542/    1F5C :                     
    2543/    1F5C :                     
    2544/    1F5C :                     Pal_DecColor2:				; XREF: Pal_WhiteToBlack
    2545/    1F5C : 3419                		move.w	(a1)+,d2
    2546/    1F5E : 3610                		move.w	(a0),d3
    2547/    1F60 : B642                		cmp.w	d2,d3
    2548/    1F62 : 6724                		beq.s	loc_1F78
    2549/    1F64 : 3203                		move.w	d3,d1
    2550/    1F66 : 0441 0200           		subi.w	#$200,d1	; decrease blue	value
    2551/    1F6A : 6508                		bcs.s	loc_1F64
    2552/    1F6C : B242                		cmp.w	d2,d1
    2553/    1F6E : 6504                		bcs.s	loc_1F64
    2554/    1F70 : 30C1                		move.w	d1,(a0)+
    2555/    1F72 : 4E75                		rts	
    2556/    1F74 :                     ; ===========================================================================
    2557/    1F74 :                     
    2558/    1F74 :                     loc_1F64:				; XREF: Pal_DecColor2
    2559/    1F74 : 3203                		move.w	d3,d1
    2560/    1F76 : 0441 0020           		subi.w	#$20,d1		; decrease green value
    2561/    1F7A : 6508                		bcs.s	loc_1F74
    2562/    1F7C : B242                		cmp.w	d2,d1
    2563/    1F7E : 6504                		bcs.s	loc_1F74
    2564/    1F80 : 30C1                		move.w	d1,(a0)+
    2565/    1F82 : 4E75                		rts	
    2566/    1F84 :                     ; ===========================================================================
    2567/    1F84 :                     
    2568/    1F84 :                     loc_1F74:				; XREF: loc_1F64
    2569/    1F84 : 5558                		subq.w	#2,(a0)+	; decrease red value
    2570/    1F86 : 4E75                		rts	
    2571/    1F88 :                     ; ===========================================================================
    2572/    1F88 :                     
    2573/    1F88 :                     loc_1F78:				; XREF: Pal_DecColor2
    2574/    1F88 : 5448                		addq.w	#2,a0
    2575/    1F8A : 4E75                		rts	
    2576/    1F8C :                     ; End of function Pal_DecColor2
    2577/    1F8C :                     
    2578/    1F8C :                     ; ---------------------------------------------------------------------------
    2579/    1F8C :                     ; Subroutine to	make a white flash when	you enter a special stage
    2580/    1F8C :                     ; ---------------------------------------------------------------------------
    2581/    1F8C :                     
    2582/    1F8C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2583/    1F8C :                     
    2584/    1F8C :                     
    2585/    1F8C :                     Pal_MakeFlash:				; XREF: SpecialStage
    2586/    1F8C : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    2587/    1F92 : 383C 0015           		move.w	#$15,d4
    2588/    1F96 :                     
    2589/    1F96 :                     loc_1F86:
    2590/    1F96 : 11FC 0012 F62A      		move.b	#$12,($FFFFF62A).w
    2591/    1F9C : 6100 0A1A           		bsr.w	DelayProgram
    2592/    1FA0 : 610A                		bsr.s	Pal_ToWhite
    2593/    1FA2 : 6100 F648           		bsr.w	RunPLC_RAM
    2594/    1FA6 : 51CC FFEE           		dbf	d4,loc_1F86
    2595/    1FAA : 4E75                		rts	
    2596/    1FAC :                     ; End of function Pal_MakeFlash
    2597/    1FAC :                     
    2598/    1FAC :                     
    2599/    1FAC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2600/    1FAC :                     
    2601/    1FAC :                     
    2602/    1FAC :                     Pal_ToWhite:				; XREF: Pal_MakeFlash
    2603/    1FAC : 7000                		moveq	#0,d0
    2604/    1FAE : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2605/    1FB2 : 1038 F626           		move.b	($FFFFF626).w,d0
    2606/    1FB6 : D0C0                		adda.w	d0,a0
    2607/    1FB8 : 1038 F627           		move.b	($FFFFF627).w,d0
    2608/    1FBC :                     
    2609/    1FBC :                     loc_1FAC:
    2610/    1FBC : 611C                		bsr.s	Pal_AddColor2
    2611/    1FBE : 51C8 FFFC           		dbf	d0,loc_1FAC
    2612/    1FC2 : 7000                		moveq	#0,d0
    2613/    1FC4 : 41F8 FA80           		lea	($FFFFFA80).w,a0
    2614/    1FC8 : 1038 F626           		move.b	($FFFFF626).w,d0
    2615/    1FCC : D0C0                		adda.w	d0,a0
    2616/    1FCE : 1038 F627           		move.b	($FFFFF627).w,d0
    2617/    1FD2 :                     
    2618/    1FD2 :                     loc_1FC2:
    2619/    1FD2 : 6106                		bsr.s	Pal_AddColor2
    2620/    1FD4 : 51C8 FFFC           		dbf	d0,loc_1FC2
    2621/    1FD8 : 4E75                		rts	
    2622/    1FDA :                     ; End of function Pal_ToWhite
    2623/    1FDA :                     
    2624/    1FDA :                     
    2625/    1FDA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2626/    1FDA :                     
    2627/    1FDA :                     
    2628/    1FDA :                     Pal_AddColor2:				; XREF: Pal_ToWhite
    2629/    1FDA : 3410                		move.w	(a0),d2
    2630/    1FDC : 0C42 0EEE           		cmpi.w	#$EEE,d2
    2631/    1FE0 : 6734                		beq.s	loc_2006
    2632/    1FE2 : 3202                		move.w	d2,d1
    2633/    1FE4 : 0241 000E           		andi.w	#$E,d1
    2634/    1FE8 : 0C41 000E           		cmpi.w	#$E,d1
    2635/    1FEC : 6704                		beq.s	loc_1FE2
    2636/    1FEE : 5458                		addq.w	#2,(a0)+	; increase red value
    2637/    1FF0 : 4E75                		rts	
    2638/    1FF2 :                     ; ===========================================================================
    2639/    1FF2 :                     
    2640/    1FF2 :                     loc_1FE2:				; XREF: Pal_AddColor2
    2641/    1FF2 : 3202                		move.w	d2,d1
    2642/    1FF4 : 0241 00E0           		andi.w	#$E0,d1
    2643/    1FF8 : 0C41 00E0           		cmpi.w	#$E0,d1
    2644/    1FFC : 6706                		beq.s	loc_1FF4
    2645/    1FFE : 0658 0020           		addi.w	#$20,(a0)+	; increase green value
    2646/    2002 : 4E75                		rts	
    2647/    2004 :                     ; ===========================================================================
    2648/    2004 :                     
    2649/    2004 :                     loc_1FF4:				; XREF: loc_1FE2
    2650/    2004 : 3202                		move.w	d2,d1
    2651/    2006 : 0241 0E00           		andi.w	#$E00,d1
    2652/    200A : 0C41 0E00           		cmpi.w	#$E00,d1
    2653/    200E : 6706                		beq.s	loc_2006
    2654/    2010 : 0658 0200           		addi.w	#$200,(a0)+	; increase blue	value
    2655/    2014 : 4E75                		rts	
    2656/    2016 :                     ; ===========================================================================
    2657/    2016 :                     
    2658/    2016 :                     loc_2006:				; XREF: Pal_AddColor2
    2659/    2016 : 5448                		addq.w	#2,a0
    2660/    2018 : 4E75                		rts	
    2661/    201A :                     ; End of function Pal_AddColor2
    2662/    201A :                     
    2663/    201A :                     ; ---------------------------------------------------------------------------
    2664/    201A :                     ; Pallet cycling routine - Sega	logo
    2665/    201A :                     ; ---------------------------------------------------------------------------
    2666/    201A :                     
    2667/    201A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2668/    201A :                     
    2669/    201A :                     
    2670/    201A :                     PalCycle_Sega:				; XREF: SegaScreen
    2671/    201A : 4A38 F635           		tst.b	($FFFFF635).w
    2672/    201E : 665A                		bne.s	loc_206A
    2673/    2020 : 43F8 FB20           		lea	($FFFFFB20).w,a1
    2674/    2024 : 41F9 0000 20D0      		lea	(Pal_Sega1).l,a0
    2675/    202A : 7205                		moveq	#5,d1
    2676/    202C : 3038 F632           		move.w	($FFFFF632).w,d0
    2677/    2030 :                     
    2678/    2030 :                     loc_2020:
    2679/    2030 : 6A08                		bpl.s	loc_202A
    2680/    2032 : 5448                		addq.w	#2,a0
    2681/    2034 : 5341                		subq.w	#1,d1
    2682/    2036 : 5440                		addq.w	#2,d0
    2683/    2038 : 60F6                		bra.s	loc_2020
    2684/    203A :                     ; ===========================================================================
    2685/    203A :                     
    2686/    203A :                     loc_202A:				; XREF: PalCycle_Sega
    2687/    203A : 3400                		move.w	d0,d2
    2688/    203C : 0242 001E           		andi.w	#$1E,d2
    2689/    2040 : 6602                		bne.s	loc_2034
    2690/    2042 : 5440                		addq.w	#2,d0
    2691/    2044 :                     
    2692/    2044 :                     loc_2034:
    2693/    2044 : 0C40 0060           		cmpi.w	#$60,d0
    2694/    2048 : 6404                		bcc.s	loc_203E
    2695/    204A : 3398 0000           		move.w	(a0)+,(a1,d0.w)
    2696/    204E :                     
    2697/    204E :                     loc_203E:
    2698/    204E : 5440                		addq.w	#2,d0
    2699/    2050 : 51C9 FFE8           		dbf	d1,loc_202A
    2700/    2054 : 3038 F632           		move.w	($FFFFF632).w,d0
    2701/    2058 : 5440                		addq.w	#2,d0
    2702/    205A : 3400                		move.w	d0,d2
    2703/    205C : 0242 001E           		andi.w	#$1E,d2
    2704/    2060 : 6602                		bne.s	loc_2054
    2705/    2062 : 5440                		addq.w	#2,d0
    2706/    2064 :                     
    2707/    2064 :                     loc_2054:
    2708/    2064 : 0C40 0064           		cmpi.w	#$64,d0
    2709/    2068 : 6D08                		blt.s	loc_2062
    2710/    206A : 31FC 0401 F634      		move.w	#$401,($FFFFF634).w
    2711/    2070 : 70F4                		moveq	#-$C,d0
    2712/    2072 :                     
    2713/    2072 :                     loc_2062:
    2714/    2072 : 31C0 F632           		move.w	d0,($FFFFF632).w
    2715/    2076 : 7001                		moveq	#1,d0
    2716/    2078 : 4E75                		rts	
    2717/    207A :                     ; ===========================================================================
    2718/    207A :                     
    2719/    207A :                     loc_206A:				; XREF: loc_202A
    2720/    207A : 5338 F634           		subq.b	#1,($FFFFF634).w
    2721/    207E : 6A4C                		bpl.s	loc_20BC
    2722/    2080 : 11FC 0004 F634      		move.b	#4,($FFFFF634).w
    2723/    2086 : 3038 F632           		move.w	($FFFFF632).w,d0
    2724/    208A : 0640 000C           		addi.w	#$C,d0
    2725/    208E : 0C40 0030           		cmpi.w	#$30,d0
    2726/    2092 : 6504                		bcs.s	loc_2088
    2727/    2094 : 7000                		moveq	#0,d0
    2728/    2096 : 4E75                		rts	
    2729/    2098 :                     ; ===========================================================================
    2730/    2098 :                     
    2731/    2098 :                     loc_2088:				; XREF: loc_206A
    2732/    2098 : 31C0 F632           		move.w	d0,($FFFFF632).w
    2733/    209C : 41F9 0000 20DC      		lea	(Pal_Sega2).l,a0
    2734/    20A2 : 41F0 0000           		lea	(a0,d0.w),a0
    2735/    20A6 : 43F8 FB04           		lea	($FFFFFB04).w,a1
    2736/    20AA : 22D8                		move.l	(a0)+,(a1)+
    2737/    20AC : 22D8                		move.l	(a0)+,(a1)+
    2738/    20AE : 3298                		move.w	(a0)+,(a1)
    2739/    20B0 : 43F8 FB20           		lea	($FFFFFB20).w,a1
    2740/    20B4 : 7000                		moveq	#0,d0
    2741/    20B6 : 722C                		moveq	#$2C,d1
    2742/    20B8 :                     
    2743/    20B8 :                     loc_20A8:
    2744/    20B8 : 3400                		move.w	d0,d2
    2745/    20BA : 0242 001E           		andi.w	#$1E,d2
    2746/    20BE : 6602                		bne.s	loc_20B2
    2747/    20C0 : 5440                		addq.w	#2,d0
    2748/    20C2 :                     
    2749/    20C2 :                     loc_20B2:
    2750/    20C2 : 3390 0000           		move.w	(a0),(a1,d0.w)
    2751/    20C6 : 5440                		addq.w	#2,d0
    2752/    20C8 : 51C9 FFEE           		dbf	d1,loc_20A8
    2753/    20CC :                     
    2754/    20CC :                     loc_20BC:
    2755/    20CC : 7001                		moveq	#1,d0
    2756/    20CE : 4E75                		rts	
    2757/    20D0 :                     ; End of function PalCycle_Sega
    2758/    20D0 :                     
    2759/    20D0 :                     ; ===========================================================================
    2760/    20D0 :                     
    2761/    20D0 :                     Pal_Sega1:	binclude	pallet/sega1.bin
    2762/    20DC :                     Pal_Sega2:	binclude	pallet/sega2.bin
    2763/    210C :                     
    2764/    210C :                     ; ---------------------------------------------------------------------------
    2765/    210C :                     ; Subroutines to load pallets
    2766/    210C :                     ; ---------------------------------------------------------------------------
    2767/    210C :                     
    2768/    210C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2769/    210C :                     
    2770/    210C :                     
    2771/    210C :                     PalLoad1:
    2772/    210C : 43F9 0000 2178      		lea	(PalPointers).l,a1
    2773/    2112 : E748                		lsl.w	#3,d0
    2774/    2114 : D2C0                		adda.w	d0,a1
    2775/    2116 : 2459                		movea.l	(a1)+,a2
    2776/    2118 : 3659                		movea.w	(a1)+,a3
    2777/    211A : D6FC 0080           		adda.w	#$80,a3
    2778/    211E : 3E19                		move.w	(a1)+,d7
    2779/    2120 :                     
    2780/    2120 :                     loc_2110:
    2781/    2120 : 26DA                		move.l	(a2)+,(a3)+
    2782/    2122 : 51CF FFFC           		dbf	d7,loc_2110
    2783/    2126 : 4E75                		rts	
    2784/    2128 :                     ; End of function PalLoad1
    2785/    2128 :                     
    2786/    2128 :                     
    2787/    2128 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2788/    2128 :                     
    2789/    2128 :                     
    2790/    2128 :                     PalLoad2:
    2791/    2128 : 43F9 0000 2178      		lea	(PalPointers).l,a1
    2792/    212E : E748                		lsl.w	#3,d0
    2793/    2130 : D2C0                		adda.w	d0,a1
    2794/    2132 : 2459                		movea.l	(a1)+,a2
    2795/    2134 : 3659                		movea.w	(a1)+,a3
    2796/    2136 : 3E19                		move.w	(a1)+,d7
    2797/    2138 :                     
    2798/    2138 :                     loc_2128:
    2799/    2138 : 26DA                		move.l	(a2)+,(a3)+
    2800/    213A : 51CF FFFC           		dbf	d7,loc_2128
    2801/    213E : 4E75                		rts	
    2802/    2140 :                     ; End of function PalLoad2
    2803/    2140 :                     
    2804/    2140 :                     ; ---------------------------------------------------------------------------
    2805/    2140 :                     ; Underwater pallet loading subroutine
    2806/    2140 :                     ; ---------------------------------------------------------------------------
    2807/    2140 :                     
    2808/    2140 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2809/    2140 :                     
    2810/    2140 :                     
    2811/    2140 :                     PalLoad3_Water:
    2812/    2140 : 43F9 0000 2178      		lea	(PalPointers).l,a1
    2813/    2146 : E748                		lsl.w	#3,d0
    2814/    2148 : D2C0                		adda.w	d0,a1
    2815/    214A : 2459                		movea.l	(a1)+,a2
    2816/    214C : 3659                		movea.w	(a1)+,a3
    2817/    214E : 96FC 0080           		suba.w	#$80,a3
    2818/    2152 : 3E19                		move.w	(a1)+,d7
    2819/    2154 :                     
    2820/    2154 :                     loc_2144:
    2821/    2154 : 26DA                		move.l	(a2)+,(a3)+
    2822/    2156 : 51CF FFFC           		dbf	d7,loc_2144
    2823/    215A : 4E75                		rts	
    2824/    215C :                     ; End of function PalLoad3_Water
    2825/    215C :                     
    2826/    215C :                     
    2827/    215C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2828/    215C :                     
    2829/    215C :                     
    2830/    215C :                     PalLoad4_Water:
    2831/    215C : 43F9 0000 2178      		lea	(PalPointers).l,a1
    2832/    2162 : E748                		lsl.w	#3,d0
    2833/    2164 : D2C0                		adda.w	d0,a1
    2834/    2166 : 2459                		movea.l	(a1)+,a2
    2835/    2168 : 3659                		movea.w	(a1)+,a3
    2836/    216A : 96FC 0100           		suba.w	#$100,a3
    2837/    216E : 3E19                		move.w	(a1)+,d7
    2838/    2170 :                     
    2839/    2170 :                     loc_2160:
    2840/    2170 : 26DA                		move.l	(a2)+,(a3)+
    2841/    2172 : 51CF FFFC           		dbf	d7,loc_2160
    2842/    2176 : 4E75                		rts	
    2843/    2178 :                     ; End of function PalLoad4_Water
    2844/    2178 :                     
    2845/    2178 :                     ; ===========================================================================
    2846/    2178 :                     ; ---------------------------------------------------------------------------
    2847/    2178 :                     ; Pallet pointers
    2848/    2178 :                     ; ---------------------------------------------------------------------------
    2849/    2178 :                     PalPointers:
    2850/    2178 :                     		include	"_inc/Pallet pointers.asm"
(1)    1/    2178 :                     ; ---------------------------------------------------------------------------
(1)    2/    2178 :                     ; Pallet pointers
(1)    3/    2178 :                     ; ---------------------------------------------------------------------------
(1)    4/    2178 : 0000 2218           	dc.l Pal_SegaBG		; pallet address
(1)    5/    217C : FB00                	dc.w $FB00		; RAM address
(1)    6/    217E : 001F                	dc.w $1F		; (pallet length / 2) - 1
(1)    7/    2180 : 0000 2298           	dc.l Pal_Title
(1)    8/    2184 : FB00                	dc.w $FB00
(1)    9/    2186 : 001F                	dc.w $1F
(1)   10/    2188 : 0000 2318           	dc.l Pal_LevelSel
(1)   11/    218C : FB00                	dc.w $FB00
(1)   12/    218E : 001F                	dc.w $1F
(1)   13/    2190 : 0000 2398           	dc.l Pal_Sonic
(1)   14/    2194 : FB00                	dc.w $FB00
(1)   15/    2196 : 0007                	dc.w 7
(1)   16/    2198 : 0000 23B8           	dc.l Pal_GHZ
(1)   17/    219C : FB20                	dc.w $FB20
(1)   18/    219E : 0017                	dc.w $17
(1)   19/    21A0 : 0000 2418           	dc.l Pal_LZ
(1)   20/    21A4 : FB20                	dc.w $FB20
(1)   21/    21A6 : 0017                	dc.w $17
(1)   22/    21A8 : 0000 24F8           	dc.l Pal_MZ
(1)   23/    21AC : FB20                	dc.w $FB20
(1)   24/    21AE : 0017                	dc.w $17
(1)   25/    21B0 : 0000 2558           	dc.l Pal_SLZ
(1)   26/    21B4 : FB20                	dc.w $FB20
(1)   27/    21B6 : 0017                	dc.w $17
(1)   28/    21B8 : 0000 25B8           	dc.l Pal_SYZ
(1)   29/    21BC : FB20                	dc.w $FB20
(1)   30/    21BE : 0017                	dc.w $17
(1)   31/    21C0 : 0000 2618           	dc.l Pal_SBZ1
(1)   32/    21C4 : FB20                	dc.w $FB20
(1)   33/    21C6 : 0017                	dc.w $17
(1)   34/    21C8 : 0000 26D8           	dc.l Pal_Special
(1)   35/    21CC : FB00                	dc.w $FB00
(1)   36/    21CE : 001F                	dc.w $1F
(1)   37/    21D0 : 0000 2478           	dc.l Pal_LZWater
(1)   38/    21D4 : FB00                	dc.w $FB00
(1)   39/    21D6 : 001F                	dc.w $1F
(1)   40/    21D8 : 0000 2758           	dc.l Pal_SBZ3
(1)   41/    21DC : FB20                	dc.w $FB20
(1)   42/    21DE : 0017                	dc.w $17
(1)   43/    21E0 : 0000 27B8           	dc.l Pal_SBZ3Water
(1)   44/    21E4 : FB00                	dc.w $FB00
(1)   45/    21E6 : 001F                	dc.w $1F
(1)   46/    21E8 : 0000 2678           	dc.l Pal_SBZ2
(1)   47/    21EC : FB20                	dc.w $FB20
(1)   48/    21EE : 0017                	dc.w $17
(1)   49/    21F0 : 0000 2838           	dc.l Pal_LZSonWater
(1)   50/    21F4 : FB00                	dc.w $FB00
(1)   51/    21F6 : 0007                	dc.w 7
(1)   52/    21F8 : 0000 2858           	dc.l Pal_SBZ3SonWat
(1)   53/    21FC : FB00                	dc.w $FB00
(1)   54/    21FE : 0007                	dc.w 7
(1)   55/    2200 : 0000 2878           	dc.l Pal_SpeResult
(1)   56/    2204 : FB00                	dc.w $FB00
(1)   57/    2206 : 001F                	dc.w $1F
(1)   58/    2208 : 0000 28F8           	dc.l Pal_SpeContinue
(1)   59/    220C : FB00                	dc.w $FB00
(1)   60/    220E : 000F                	dc.w $F
(1)   61/    2210 : 0000 2938           	dc.l Pal_Ending
(1)   62/    2214 : FB00                	dc.w $FB00
(1)   63/    2216 : 001F                	dc.w $1F
(1)   64/    2218 :                     	
    2851/    2218 :                     
    2852/    2218 :                     ; ---------------------------------------------------------------------------
    2853/    2218 :                     ; Pallet data
    2854/    2218 :                     ; ---------------------------------------------------------------------------
    2855/    2218 :                     Pal_SegaBG:	binclude	pallet/sega_bg.bin
    2856/    2298 :                     Pal_Title:	binclude	pallet/title.bin
    2857/    2318 :                     Pal_LevelSel:	binclude	pallet/levelsel.bin
    2858/    2398 :                     Pal_Sonic:	binclude	pallet/sonic.bin
    2859/    23B8 :                     Pal_GHZ:	binclude	pallet/ghz.bin
    2860/    2418 :                     Pal_LZ:		binclude	pallet/lz.bin
    2861/    2478 :                     Pal_LZWater:	binclude	pallet/lz_uw.bin	; LZ underwater pallets
    2862/    24F8 :                     Pal_MZ:		binclude	pallet/mz.bin
    2863/    2558 :                     Pal_SLZ:	binclude	pallet/slz.bin
    2864/    25B8 :                     Pal_SYZ:	binclude	pallet/syz.bin
    2865/    2618 :                     Pal_SBZ1:	binclude	pallet/sbz_act1.bin	; SBZ act 1 pallets
    2866/    2678 :                     Pal_SBZ2:	binclude	pallet/sbz_act2.bin	; SBZ act 2 & Final Zone pallets
    2867/    26D8 :                     Pal_Special:	binclude	pallet/special.bin	; special stage pallets
    2868/    2758 :                     Pal_SBZ3:	binclude	pallet/sbz_act3.bin	; SBZ act 3 pallets
    2869/    27B8 :                     Pal_SBZ3Water:	binclude	pallet/sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
    2870/    2838 :                     Pal_LZSonWater:	binclude	pallet/son_lzuw.bin	; Sonic (underwater in LZ) pallet
    2871/    2858 :                     Pal_SBZ3SonWat:	binclude	pallet/son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
    2872/    2878 :                     Pal_SpeResult:	binclude	pallet/ssresult.bin	; special stage results screen pallets
    2873/    28F8 :                     Pal_SpeContinue:binclude	pallet/sscontin.bin	; special stage results screen continue pallet
    2874/    2938 :                     Pal_Ending:	binclude	pallet/ending.bin	; ending sequence pallets
    2875/    29B8 :                     
    2876/    29B8 :                     ; ---------------------------------------------------------------------------
    2877/    29B8 :                     ; Subroutine to	delay the program by ($FFFFF62A) frames
    2878/    29B8 :                     ; ---------------------------------------------------------------------------
    2879/    29B8 :                     
    2880/    29B8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2881/    29B8 :                     
    2882/    29B8 :                     
    2883/    29B8 :                     DelayProgram:				; XREF: PauseGame
    2884/    29B8 : 46FC 2300           		move	#$2300,sr
    2885/    29BC :                     
    2886/    29BC :                     loc_29AC:
    2887/    29BC : 4A38 F62A           		tst.b	($FFFFF62A).w
    2888/    29C0 : 66FA                		bne.s	loc_29AC
    2889/    29C2 : 4E75                		rts	
    2890/    29C4 :                     ; End of function DelayProgram
    2891/    29C4 :                     
    2892/    29C4 :                     ; ---------------------------------------------------------------------------
    2893/    29C4 :                     ; Subroutine to	generate a pseudo-random number	in d0
    2894/    29C4 :                     ; ---------------------------------------------------------------------------
    2895/    29C4 :                     
    2896/    29C4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2897/    29C4 :                     
    2898/    29C4 :                     
    2899/    29C4 :                     RandomNumber:
    2900/    29C4 : 2238 F636           		move.l	($FFFFF636).w,d1
    2901/    29C8 : 6606                		bne.s	loc_29C0
    2902/    29CA : 223C 2A6D 365A      		move.l	#$2A6D365A,d1
    2903/    29D0 :                     
    2904/    29D0 :                     loc_29C0:
    2905/    29D0 : 2001                		move.l	d1,d0
    2906/    29D2 : E581                		asl.l	#2,d1
    2907/    29D4 : D280                		add.l	d0,d1
    2908/    29D6 : E781                		asl.l	#3,d1
    2909/    29D8 : D280                		add.l	d0,d1
    2910/    29DA : 3001                		move.w	d1,d0
    2911/    29DC : 4841                		swap	d1
    2912/    29DE : D041                		add.w	d1,d0
    2913/    29E0 : 3200                		move.w	d0,d1
    2914/    29E2 : 4841                		swap	d1
    2915/    29E4 : 21C1 F636           		move.l	d1,($FFFFF636).w
    2916/    29E8 : 4E75                		rts	
    2917/    29EA :                     ; End of function RandomNumber
    2918/    29EA :                     
    2919/    29EA :                     
    2920/    29EA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2921/    29EA :                     
    2922/    29EA :                     
    2923/    29EA :                     CalcSine:				; XREF: SS_BGAnimate; et al
    2924/    29EA : 0240 00FF           		andi.w	#$FF,d0
    2925/    29EE : D040                		add.w	d0,d0
    2926/    29F0 : 0640 0080           		addi.w	#$80,d0
    2927/    29F4 : 323B 000C           		move.w	Sine_Data(pc,d0.w),d1
    2928/    29F8 : 0440 0080           		subi.w	#$80,d0
    2929/    29FC : 303B 0004           		move.w	Sine_Data(pc,d0.w),d0
    2930/    2A00 : 4E75                		rts	
    2931/    2A02 :                     ; End of function CalcSine
    2932/    2A02 :                     
    2933/    2A02 :                     ; ===========================================================================
    2934/    2A02 :                     
    2935/    2A02 :                     Sine_Data:	binclude	misc/sinewave.bin	; values for a 360º sine wave
    2936/    2C82 :                     
    2937/    2C82 :                     ; ===========================================================================
    2938/    2C82 : 48E7 6000           		movem.l	d1-d2,-(sp)
    2939/    2C86 : 3200                		move.w	d0,d1
    2940/    2C88 : 4841                		swap	d1
    2941/    2C8A : 7000                		moveq	#0,d0
    2942/    2C8C : 3200                		move.w	d0,d1
    2943/    2C8E : 7407                		moveq	#7,d2
    2944/    2C90 :                     
    2945/    2C90 :                     loc_2C80:
    2946/    2C90 : E599                		rol.l	#2,d1
    2947/    2C92 : D040                		add.w	d0,d0
    2948/    2C94 : 5240                		addq.w	#1,d0
    2949/    2C96 : 9240                		sub.w	d0,d1
    2950/    2C98 : 6410                		bcc.s	loc_2C9A
    2951/    2C9A : D240                		add.w	d0,d1
    2952/    2C9C : 5340                		subq.w	#1,d0
    2953/    2C9E : 51CA FFF0           		dbf	d2,loc_2C80
    2954/    2CA2 : E248                		lsr.w	#1,d0
    2955/    2CA4 : 4CDF 0006           		movem.l	(sp)+,d1-d2
    2956/    2CA8 : 4E75                		rts	
    2957/    2CAA :                     ; ===========================================================================
    2958/    2CAA :                     
    2959/    2CAA :                     loc_2C9A:
    2960/    2CAA : 5240                		addq.w	#1,d0
    2961/    2CAC : 51CA FFE2           		dbf	d2,loc_2C80
    2962/    2CB0 : E248                		lsr.w	#1,d0
    2963/    2CB2 : 4CDF 0006           		movem.l	(sp)+,d1-d2
    2964/    2CB6 : 4E75                		rts	
    2965/    2CB8 :                     
    2966/    2CB8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2967/    2CB8 :                     
    2968/    2CB8 :                     
    2969/    2CB8 :                     CalcAngle:
    2970/    2CB8 : 48E7 1800           		movem.l	d3-d4,-(sp)
    2971/    2CBC : 7600                		moveq	#0,d3
    2972/    2CBE : 7800                		moveq	#0,d4
    2973/    2CC0 : 3601                		move.w	d1,d3
    2974/    2CC2 : 3802                		move.w	d2,d4
    2975/    2CC4 : 8843                		or.w	d3,d4
    2976/    2CC6 : 674C                		beq.s	loc_2D04
    2977/    2CC8 : 3802                		move.w	d2,d4
    2978/    2CCA : 4A43                		tst.w	d3
    2979/    2CCC : 6A00 0004           		bpl.w	loc_2CC2
    2980/    2CD0 : 4443                		neg.w	d3
    2981/    2CD2 :                     
    2982/    2CD2 :                     loc_2CC2:
    2983/    2CD2 : 4A44                		tst.w	d4
    2984/    2CD4 : 6A00 0004           		bpl.w	loc_2CCA
    2985/    2CD8 : 4444                		neg.w	d4
    2986/    2CDA :                     
    2987/    2CDA :                     loc_2CCA:
    2988/    2CDA : B843                		cmp.w	d3,d4
    2989/    2CDC : 6400 000E           		bcc.w	loc_2CDC
    2990/    2CE0 : E18C                		lsl.l	#8,d4
    2991/    2CE2 : 88C3                		divu.w	d3,d4
    2992/    2CE4 : 7000                		moveq	#0,d0
    2993/    2CE6 : 103B 4036           		move.b	Angle_Data(pc,d4.w),d0
    2994/    2CEA : 600A                		bra.s	loc_2CE6
    2995/    2CEC :                     ; ===========================================================================
    2996/    2CEC :                     
    2997/    2CEC :                     loc_2CDC:				; XREF: CalcAngle
    2998/    2CEC : E18B                		lsl.l	#8,d3
    2999/    2CEE : 86C4                		divu.w	d4,d3
    3000/    2CF0 : 7040                		moveq	#$40,d0
    3001/    2CF2 : 903B 302A           		sub.b	Angle_Data(pc,d3.w),d0
    3002/    2CF6 :                     
    3003/    2CF6 :                     loc_2CE6:
    3004/    2CF6 : 4A41                		tst.w	d1
    3005/    2CF8 : 6A00 0008           		bpl.w	loc_2CF2
    3006/    2CFC : 4440                		neg.w	d0
    3007/    2CFE : 0640 0080           		addi.w	#$80,d0
    3008/    2D02 :                     
    3009/    2D02 :                     loc_2CF2:
    3010/    2D02 : 4A42                		tst.w	d2
    3011/    2D04 : 6A00 0008           		bpl.w	loc_2CFE
    3012/    2D08 : 4440                		neg.w	d0
    3013/    2D0A : 0640 0100           		addi.w	#$100,d0
    3014/    2D0E :                     
    3015/    2D0E :                     loc_2CFE:
    3016/    2D0E : 4CDF 0018           		movem.l	(sp)+,d3-d4
    3017/    2D12 : 4E75                		rts	
    3018/    2D14 :                     ; ===========================================================================
    3019/    2D14 :                     
    3020/    2D14 :                     loc_2D04:				; XREF: CalcAngle
    3021/    2D14 : 303C 0040           		move.w	#$40,d0
    3022/    2D18 : 4CDF 0018           		movem.l	(sp)+,d3-d4
    3023/    2D1C : 4E75                		rts	
    3024/    2D1E :                     ; End of function CalcAngle
    3025/    2D1E :                     
    3026/    2D1E :                     ; ===========================================================================
    3027/    2D1E :                     
    3028/    2D1E :                     Angle_Data:	binclude	misc/angles.bin
    3029/    2E20 :                     
    3030/    2E20 :                     ; ===========================================================================
    3031/    2E20 :                     
    3032/    2E20 :                     ; ---------------------------------------------------------------------------
    3033/    2E20 :                     ; Sega screen
    3034/    2E20 :                     ; ---------------------------------------------------------------------------
    3035/    2E20 :                     
    3036/    2E20 :                     SegaScreen:				; XREF: GameModeArray
    3037/    2E20 : 103C 00E4           		move.b	#$E4,d0
    3038/    2E24 : 6100 E576           		bsr.w	PlaySound_Special ; stop music
    3039/    2E28 : 6100 E7B4           		bsr.w	ClearPLC
    3040/    2E2C : 6100 F034           		bsr.w	Pal_FadeFrom
    3041/    2E30 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    3042/    2E36 : 3CBC 8004           		move.w	#$8004,(a6)
    3043/    2E3A : 3CBC 8230           		move.w	#$8230,(a6)
    3044/    2E3E : 3CBC 8407           		move.w	#$8407,(a6)
    3045/    2E42 : 3CBC 8700           		move.w	#$8700,(a6)
    3046/    2E46 : 3CBC 8B00           		move.w	#$8B00,(a6)
    3047/    2E4A : 4238 F64E           		clr.b	($FFFFF64E).w
    3048/    2E4E : 46FC 2700           		move	#$2700,sr
    3049/    2E52 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    3050/    2E56 : 0200 00BF           		andi.b	#$BF,d0
    3051/    2E5A : 33C0 00C0 0004      		move.w	d0,($C00004).l
    3052/    2E60 : 6100 E462           		bsr.w	ClearScreen
    3053/    2E64 : 23FC 4000 0000 00C0 		move.l	#$40000000,($C00004).l
                    0004                
    3054/    2E6E : 41F9 0001 DE96      		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
    3055/    2E74 : 6100 E5CA           		bsr.w	NemDec
    3056/    2E78 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    3057/    2E7E : 41F9 0001 E2F8      		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
    3058/    2E84 : 303C 0000           		move.w	#0,d0
    3059/    2E88 : 6100 E894           		bsr.w	EniDec
    3060/    2E8C : 43F9 00FF 0000      		lea	($FF0000).l,a1
    3061/    2E92 : 203C 6510 0003      		move.l	#$65100003,d0
    3062/    2E98 : 7217                		moveq	#$17,d1
    3063/    2E9A : 7407                		moveq	#7,d2
    3064/    2E9C : 6100 E582           		bsr.w	ShowVDPGraphics
    3065/    2EA0 : 43F9 00FF 0180      		lea	($FF0180).l,a1
    3066/    2EA6 : 203C 4000 0003      		move.l	#$40000003,d0
    3067/    2EAC : 7227                		moveq	#$27,d1
    3068/    2EAE : 741B                		moveq	#$1B,d2
    3069/    2EB0 : 6100 E56E           		bsr.w	ShowVDPGraphics
    3070/    2EB4 : 7000                		moveq	#0,d0
    3071/    2EB6 : 6100 F270           		bsr.w	PalLoad2	; load Sega logo pallet
    3072/    2EBA : 31FC FFF6 F632      		move.w	#-$A,($FFFFF632).w
    3073/    2EC0 : 31FC 0000 F634      		move.w	#0,($FFFFF634).w
    3074/    2EC6 : 31FC 0000 F662      		move.w	#0,($FFFFF662).w
    3075/    2ECC : 31FC 0000 F660      		move.w	#0,($FFFFF660).w
    3076/    2ED2 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    3077/    2ED6 : 0000 0040           		ori.b	#$40,d0
    3078/    2EDA : 33C0 00C0 0004      		move.w	d0,($C00004).l
    3079/    2EE0 :                     
    3080/    2EE0 :                     Sega_WaitPallet:
    3081/    2EE0 : 11FC 0002 F62A      		move.b	#2,($FFFFF62A).w
    3082/    2EE6 : 6100 FAD0           		bsr.w	DelayProgram
    3083/    2EEA : 6100 F12E           		bsr.w	PalCycle_Sega
    3084/    2EEE : 66F0                		bne.s	Sega_WaitPallet
    3085/    2EF0 :                     
    3086/    2EF0 : 103C 00E1           		move.b	#$E1,d0
    3087/    2EF4 : 6100 E4A6           		bsr.w	PlaySound_Special ; play "SEGA"	sound
    3088/    2EF8 : 11FC 0014 F62A      		move.b	#$14,($FFFFF62A).w
    3089/    2EFE : 6100 FAB8           		bsr.w	DelayProgram
    3090/    2F02 : 31FC 001E F614      		move.w	#$1E,($FFFFF614).w
    3091/    2F08 :                     
    3092/    2F08 :                     Sega_WaitEnd:
    3093/    2F08 : 11FC 0002 F62A      		move.b	#2,($FFFFF62A).w
    3094/    2F0E : 6100 FAA8           		bsr.w	DelayProgram
    3095/    2F12 : 4A78 F614           		tst.w	($FFFFF614).w
    3096/    2F16 : 6708                		beq.s	Sega_GotoTitle
    3097/    2F18 : 0238 0080 F605      		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
    3098/    2F1E : 67E8                		beq.s	Sega_WaitEnd	; if not, branch
    3099/    2F20 :                     
    3100/    2F20 :                     Sega_GotoTitle:
    3101/    2F20 : 11FC 0004 F600      		move.b	#4,($FFFFF600).w ; go to title screen
    3102/    2F26 : 4E75                		rts	
    3103/    2F28 :                     ; ===========================================================================
    3104/    2F28 :                     
    3105/    2F28 :                     ; ---------------------------------------------------------------------------
    3106/    2F28 :                     ; Title	screen
    3107/    2F28 :                     ; ---------------------------------------------------------------------------
    3108/    2F28 :                     
    3109/    2F28 :                     TitleScreen:				; XREF: GameModeArray
    3110/    2F28 : 103C 00E4           		move.b	#$E4,d0
    3111/    2F2C : 6100 E46E           		bsr.w	PlaySound_Special ; stop music
    3112/    2F30 : 6100 E6AC           		bsr.w	ClearPLC
    3113/    2F34 : 6100 EF2C           		bsr.w	Pal_FadeFrom
    3114/    2F38 : 46FC 2700           		move	#$2700,sr
    3115/    2F3C : 6100 E414           		bsr.w	SoundDriverLoad
    3116/    2F40 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    3117/    2F46 : 3CBC 8004           		move.w	#$8004,(a6)
    3118/    2F4A : 3CBC 8230           		move.w	#$8230,(a6)
    3119/    2F4E : 3CBC 8407           		move.w	#$8407,(a6)
    3120/    2F52 : 3CBC 9001           		move.w	#$9001,(a6)
    3121/    2F56 : 3CBC 9200           		move.w	#$9200,(a6)
    3122/    2F5A : 3CBC 8B03           		move.w	#$8B03,(a6)
    3123/    2F5E : 3CBC 8720           		move.w	#$8720,(a6)
    3124/    2F62 : 4238 F64E           		clr.b	($FFFFF64E).w
    3125/    2F66 : 6100 E35C           		bsr.w	ClearScreen
    3126/    2F6A : 43F8 D000           		lea	($FFFFD000).w,a1
    3127/    2F6E : 7000                		moveq	#0,d0
    3128/    2F70 : 323C 07FF           		move.w	#$7FF,d1
    3129/    2F74 :                     
    3130/    2F74 :                     Title_ClrObjRam:
    3131/    2F74 : 22C0                		move.l	d0,(a1)+
    3132/    2F76 : 51C9 FFFC           		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
    3133/    2F7A :                     
    3134/    2F7A : 23FC 4000 0000 00C0 		move.l	#$40000000,($C00004).l
                    0004                
    3135/    2F84 : 41F9 0002 0F7A      		lea	(Nem_JapNames).l,a0 ; load Japanese credits
    3136/    2F8A : 6100 E4B4           		bsr.w	NemDec
    3137/    2F8E : 23FC 54C0 0000 00C0 		move.l	#$54C00000,($C00004).l
                    0004                
    3138/    2F98 : 41F9 0006 2DB8      		lea	(Nem_CreditText).l,a0 ;	load alphabet
    3139/    2F9E : 6100 E4A0           		bsr.w	NemDec
    3140/    2FA2 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    3141/    2FA8 : 41F9 0002 0EBC      		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
    3142/    2FAE : 303C 0000           		move.w	#0,d0
    3143/    2FB2 : 6100 E76A           		bsr.w	EniDec
    3144/    2FB6 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    3145/    2FBC : 203C 4000 0003      		move.l	#$40000003,d0
    3146/    2FC2 : 7227                		moveq	#$27,d1
    3147/    2FC4 : 741B                		moveq	#$1B,d2
    3148/    2FC6 : 6100 E458           		bsr.w	ShowVDPGraphics
    3149/    2FCA : 43F8 FB80           		lea	($FFFFFB80).w,a1
    3150/    2FCE : 7000                		moveq	#0,d0
    3151/    2FD0 : 323C 001F           		move.w	#$1F,d1
    3152/    2FD4 :                     
    3153/    2FD4 :                     Title_ClrPallet:
    3154/    2FD4 : 22C0                		move.l	d0,(a1)+
    3155/    2FD6 : 51C9 FFFC           		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
    3156/    2FDA :                     
    3157/    2FDA : 7003                		moveq	#3,d0		; load Sonic"s pallet
    3158/    2FDC : 6100 F12E           		bsr.w	PalLoad1
    3159/    2FE0 : 11FC 008A D080      		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
    3160/    2FE6 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    3161/    2FEC : 4EB9 0000 D768      		jsr	(BuildSprites).l
    3162/    2FF2 : 6100 EDC8           		bsr.w	Pal_FadeTo
    3163/    2FF6 : 46FC 2700           		move	#$2700,sr
    3164/    2FFA : 23FC 4000 0001 00C0 		move.l	#$40000001,($C00004).l
                    0004                
    3165/    3004 : 41F9 0001 E504      		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
    3166/    300A : 6100 E434           		bsr.w	NemDec
    3167/    300E : 23FC 6000 0001 00C0 		move.l	#$60000001,($C00004).l
                    0004                
    3168/    3018 : 41F9 0001 F510      		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
    3169/    301E : 6100 E420           		bsr.w	NemDec
    3170/    3022 : 23FC 6200 0002 00C0 		move.l	#$62000002,($C00004).l
                    0004                
    3171/    302C : 41F9 0002 0E88      		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
    3172/    3032 : 6100 E40C           		bsr.w	NemDec
    3173/    3036 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    3174/    303C : 2D7C 5000 0003 0004 		move.l	#$50000003,4(a6)
    3175/    3044 : 4BF9 0000 05F0      		lea	(Art_Text).l,a5
    3176/    304A : 323C 028F           		move.w	#$28F,d1
    3177/    304E :                     
    3178/    304E :                     Title_LoadText:
    3179/    304E : 3C9D                		move.w	(a5)+,(a6)
    3180/    3050 : 51C9 FFFC           		dbf	d1,Title_LoadText ; load uncompressed text patterns
    3181/    3054 :                     
    3182/    3054 : 11FC 0000 FE30      		move.b	#0,($FFFFFE30).w ; clear lamppost counter
    3183/    305A : 31FC 0000 FE08      		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
    3184/    3060 : 31FC 0000 FFF0      		move.w	#0,($FFFFFFF0).w ; disable debug mode
    3185/    3066 : 31FC 0000 FFEA      		move.w	#0,($FFFFFFEA).w
    3186/    306C : 31FC 0000 FE10      		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
    3187/    3072 : 31FC 0000 F634      		move.w	#0,($FFFFF634).w ; disable pallet cycling
    3188/    3078 : 6100 2E50           		bsr.w	LevelSizeLoad
    3189/    307C : 6100 3214           		bsr.w	DeformBgLayer
    3190/    3080 : 43F8 B000           		lea	($FFFFB000).w,a1
    3191/    3084 : 41F9 0003 CB72      		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
    3192/    308A : 303C 0000           		move.w	#0,d0
    3193/    308E : 6100 E68E           		bsr.w	EniDec
    3194/    3092 : 41F9 0003 FE2C      		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
    3195/    3098 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    3196/    309E : 6100 E7FC           		bsr.w	KosDec
    3197/    30A2 : 6100 3C7A           		bsr.w	LevelLayoutLoad
    3198/    30A6 : 6100 EDBA           		bsr.w	Pal_FadeFrom
    3199/    30AA : 46FC 2700           		move	#$2700,sr
    3200/    30AE : 6100 E214           		bsr.w	ClearScreen
    3201/    30B2 : 4BF9 00C0 0004      		lea	($C00004).l,a5
    3202/    30B8 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    3203/    30BE : 47F8 F708           		lea	($FFFFF708).w,a3
    3204/    30C2 : 49F8 A440           		lea	($FFFFA440).w,a4
    3205/    30C6 : 343C 6000           		move.w	#$6000,d2
    3206/    30CA : 6100 3BBE           		bsr.w	LoadTilesFromStart2
    3207/    30CE : 43F9 00FF 0000      		lea	($FF0000).l,a1
    3208/    30D4 : 41F9 0001 E3F0      		lea	(Eni_Title).l,a0 ; load	title screen mappings
    3209/    30DA : 303C 0000           		move.w	#0,d0
    3210/    30DE : 6100 E63E           		bsr.w	EniDec
    3211/    30E2 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    3212/    30E8 : 203C 4206 0003      		move.l	#$42060003,d0
    3213/    30EE : 7221                		moveq	#$21,d1
    3214/    30F0 : 7415                		moveq	#$15,d2
    3215/    30F2 : 6100 E32C           		bsr.w	ShowVDPGraphics
    3216/    30F6 : 23FC 4000 0000 00C0 		move.l	#$40000000,($C00004).l
                    0004                
    3217/    3100 : 41F9 0003 D486      		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
    3218/    3106 : 6100 E338           		bsr.w	NemDec
    3219/    310A : 7001                		moveq	#1,d0		; load title screen pallet
    3220/    310C : 6100 EFFE           		bsr.w	PalLoad1
    3221/    3110 : 103C 008A           		move.b	#$8A,d0		; play title screen music
    3222/    3114 : 6100 E286           		bsr.w	PlaySound_Special
    3223/    3118 : 11FC 0000 FFFA      		move.b	#0,($FFFFFFFA).w ; disable debug mode
    3224/    311E : 31FC 0178 F614      		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
    3225/    3124 : 43F8 D080           		lea	($FFFFD080).w,a1
    3226/    3128 : 7000                		moveq	#0,d0
    3227/    312A : 323C 000F           		move.w	#$F,d1	; ($40 / 4) - 1
    3228/    312E :                     
    3229/    312E :                     Title_ClrObjRam2:
    3230/    312E : 22C0                		move.l	d0,(a1)+
    3231/    3130 : 51C9 FFFC           		dbf	d1,Title_ClrObjRam2
    3232/    3134 :                     
    3233/    3134 : 11FC 000E D040      		move.b	#$E,($FFFFD040).w ; load big Sonic object
    3234/    313A : 11FC 000F D080      		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
    3235/    3140 : 11FC 000F D0C0      		move.b	#$F,($FFFFD0C0).w ; load "TM" object
    3236/    3146 : 11FC 0003 D0DA      		move.b	#3,($FFFFD0DA).w
    3237/    314C : 11FC 000F D100      		move.b	#$F,($FFFFD100).w
    3238/    3152 : 11FC 0002 D11A      		move.b	#2,($FFFFD11A).w
    3239/    3158 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    3240/    315E : 6100 3132           		bsr.w	DeformBgLayer
    3241/    3162 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    3242/    3168 : 7000                		moveq	#0,d0
    3243/    316A : 6100 E446           		bsr.w	LoadPLC2
    3244/    316E : 31FC 0000 FFE4      		move.w	#0,($FFFFFFE4).w
    3245/    3174 : 31FC 0000 FFE6      		move.w	#0,($FFFFFFE6).w
    3246/    317A : 3038 F60C           		move.w	($FFFFF60C).w,d0
    3247/    317E : 0000 0040           		ori.b	#$40,d0
    3248/    3182 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    3249/    3188 : 6100 EC32           		bsr.w	Pal_FadeTo
    3250/    318C :                     
    3251/    318C :                     loc_317C:
    3252/    318C : 11FC 0004 F62A      		move.b	#4,($FFFFF62A).w
    3253/    3192 : 6100 F824           		bsr.w	DelayProgram
    3254/    3196 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    3255/    319C : 6100 30F4           		bsr.w	DeformBgLayer
    3256/    31A0 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    3257/    31A6 : 6100 E7B4           		bsr.w	PalCycle_Title
    3258/    31AA : 6100 E440           		bsr.w	RunPLC_RAM
    3259/    31AE : 3038 D008           		move.w	($FFFFD008).w,d0
    3260/    31B2 : 5440                		addq.w	#2,d0
    3261/    31B4 : 31C0 D008           		move.w	d0,($FFFFD008).w ; move	Sonic to the right
    3262/    31B8 : 0C40 1C00           		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
    3263/    31BC : 6508                		bcs.s	Title_ChkRegion	; if not, branch
    3264/    31BE : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; go to Sega screen
    3265/    31C4 : 4E75                		rts	
    3266/    31C6 :                     ; ===========================================================================
    3267/    31C6 :                     
    3268/    31C6 :                     Title_ChkRegion:
    3269/    31C6 : 4A38 FFF8           		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
    3270/    31CA : 6A08                		bpl.s	Title_RegionJ	; if Japanese, branch
    3271/    31CC : 41F9 0000 33BA      		lea	(LevelSelectCode_US).l,a0 ; load US code
    3272/    31D2 : 6006                		bra.s	Title_EnterCheat
    3273/    31D4 :                     ; ===========================================================================
    3274/    31D4 :                     
    3275/    31D4 :                     Title_RegionJ:				; XREF: Title_ChkRegion
    3276/    31D4 : 41F9 0000 33B4      		lea	(LevelSelectCode_J).l,a0 ; load	J code
    3277/    31DA :                     
    3278/    31DA :                     Title_EnterCheat:			; XREF: Title_ChkRegion
    3279/    31DA : 3038 FFE4           		move.w	($FFFFFFE4).w,d0
    3280/    31DE : D0C0                		adda.w	d0,a0
    3281/    31E0 : 1038 F605           		move.b	($FFFFF605).w,d0 ; get button press
    3282/    31E4 : 0200 000F           		andi.b	#$F,d0		; read only up/down/left/right buttons
    3283/    31E8 : B010                		cmp.b	(a0),d0		; does button press match the cheat code?
    3284/    31EA : 6634                		bne.s	loc_3210	; if not, branch
    3285/    31EC : 5278 FFE4           		addq.w	#1,($FFFFFFE4).w ; next	button press
    3286/    31F0 : 4A00                		tst.b	d0
    3287/    31F2 : 663E                		bne.s	Title_CountC
    3288/    31F4 : 41F8 FFE0           		lea	($FFFFFFE0).w,a0
    3289/    31F8 : 3238 FFE6           		move.w	($FFFFFFE6).w,d1
    3290/    31FC : E249                		lsr.w	#1,d1
    3291/    31FE : 0241 0003           		andi.w	#3,d1
    3292/    3202 : 670C                		beq.s	Title_PlayRing
    3293/    3204 : 4A38 FFF8           		tst.b	($FFFFFFF8).w
    3294/    3208 : 6A06                		bpl.s	Title_PlayRing
    3295/    320A : 7201                		moveq	#1,d1
    3296/    320C : 1181 1001           		move.b	d1,1(a0,d1.w)
    3297/    3210 :                     
    3298/    3210 :                     Title_PlayRing:
    3299/    3210 : 11BC 0001 1000      		move.b	#1,(a0,d1.w)	; activate cheat
    3300/    3216 : 103C 00B5           		move.b	#$B5,d0		; play ring sound when code is entered
    3301/    321A : 6100 E180           		bsr.w	PlaySound_Special
    3302/    321E : 6012                		bra.s	Title_CountC
    3303/    3220 :                     ; ===========================================================================
    3304/    3220 :                     
    3305/    3220 :                     loc_3210:				; XREF: Title_EnterCheat
    3306/    3220 : 4A00                		tst.b	d0
    3307/    3222 : 670E                		beq.s	Title_CountC
    3308/    3224 : 0C78 0009 FFE4      		cmpi.w	#9,($FFFFFFE4).w
    3309/    322A : 6706                		beq.s	Title_CountC
    3310/    322C : 31FC 0000 FFE4      		move.w	#0,($FFFFFFE4).w
    3311/    3232 :                     
    3312/    3232 :                     Title_CountC:
    3313/    3232 : 1038 F605           		move.b	($FFFFF605).w,d0
    3314/    3236 : 0200 0020           		andi.b	#$20,d0		; is C button pressed?
    3315/    323A : 6704                		beq.s	loc_3230	; if not, branch
    3316/    323C : 5278 FFE6           		addq.w	#1,($FFFFFFE6).w ; increment C button counter
    3317/    3240 :                     
    3318/    3240 :                     loc_3230:
    3319/    3240 : 4A78 F614           		tst.w	($FFFFF614).w
    3320/    3244 : 6700 017A           		beq.w	Demo
    3321/    3248 : 0238 0080 F605      		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
    3322/    324E : 6700 FF3C           		beq.w	loc_317C	; if not, branch
    3323/    3252 :                     
    3324/    3252 :                     Title_ChkLevSel:
    3325/    3252 : 4A38 FFE0           		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
    3326/    3256 : 6700 00FA           		beq.w	PlayLevel	; if not, play level
    3327/    325A : 0838 0006 F604      		btst	#6,($FFFFF604).w ; check if A is pressed
    3328/    3260 : 6700 00F0           		beq.w	PlayLevel	; if not, play level
    3329/    3264 : 7002                		moveq	#2,d0
    3330/    3266 : 6100 EEC0           		bsr.w	PalLoad2	; load level select pallet
    3331/    326A : 43F8 CC00           		lea	($FFFFCC00).w,a1
    3332/    326E : 7000                		moveq	#0,d0
    3333/    3270 : 323C 00DF           		move.w	#$DF,d1
    3334/    3274 :                     
    3335/    3274 :                     Title_ClrScroll:
    3336/    3274 : 22C0                		move.l	d0,(a1)+
    3337/    3276 : 51C9 FFFC           		dbf	d1,Title_ClrScroll ; fill scroll data with 0
    3338/    327A :                     
    3339/    327A : 21C0 F616           		move.l	d0,($FFFFF616).w
    3340/    327E : 46FC 2700           		move	#$2700,sr
    3341/    3282 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    3342/    3288 : 23FC 6000 0003 00C0 		move.l	#$60000003,($C00004).l
                    0004                
    3343/    3292 : 323C 03FF           		move.w	#$3FF,d1
    3344/    3296 :                     
    3345/    3296 :                     Title_ClrVram:
    3346/    3296 : 2C80                		move.l	d0,(a6)
    3347/    3298 : 51C9 FFFC           		dbf	d1,Title_ClrVram ; fill	VRAM with 0
    3348/    329C :                     
    3349/    329C : 6100 0258           		bsr.w	LevSelTextLoad
    3350/    32A0 :                     
    3351/    32A0 :                     ; ---------------------------------------------------------------------------
    3352/    32A0 :                     ; Level	Select
    3353/    32A0 :                     ; ---------------------------------------------------------------------------
    3354/    32A0 :                     
    3355/    32A0 :                     LevelSelect:
    3356/    32A0 : 11FC 0004 F62A      		move.b	#4,($FFFFF62A).w
    3357/    32A6 : 6100 F710           		bsr.w	DelayProgram
    3358/    32AA : 6100 01C4           		bsr.w	LevSelControls
    3359/    32AE : 6100 E33C           		bsr.w	RunPLC_RAM
    3360/    32B2 : 4AB8 F680           		tst.l	($FFFFF680).w
    3361/    32B6 : 66E8                		bne.s	LevelSelect
    3362/    32B8 : 0238 00F0 F605      		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
    3363/    32BE : 67E0                		beq.s	LevelSelect	; if not, branch
    3364/    32C0 : 3038 FF82           		move.w	($FFFFFF82).w,d0
    3365/    32C4 : 0C40 0014           		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
    3366/    32C8 : 6650                		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
    3367/    32CA : 3038 FF84           		move.w	($FFFFFF84).w,d0
    3368/    32CE : 0640 0080           		addi.w	#$80,d0
    3369/    32D2 : 4A38 FFE3           		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
    3370/    32D6 : 670C                		beq.s	LevSel_NoCheat	; if not, branch
    3371/    32D8 : 0C40 009F           		cmpi.w	#$9F,d0		; is sound $9F being played?
    3372/    32DC : 6718                		beq.s	LevSel_Ending	; if yes, branch
    3373/    32DE : 0C40 009E           		cmpi.w	#$9E,d0		; is sound $9E being played?
    3374/    32E2 : 6720                		beq.s	LevSel_Credits	; if yes, branch
    3375/    32E4 :                     
    3376/    32E4 :                     LevSel_NoCheat:
    3377/    32E4 : 0C40 0094           		cmpi.w	#$94,d0		; is sound $80-$94 being played?
    3378/    32E8 : 6506                		bcs.s	LevSel_PlaySnd	; if yes, branch
    3379/    32EA : 0C40 00A0           		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
    3380/    32EE : 65B0                		bcs.s	LevelSelect	; if yes, branch
    3381/    32F0 :                     
    3382/    32F0 :                     LevSel_PlaySnd:
    3383/    32F0 : 6100 E0AA           		bsr.w	PlaySound_Special
    3384/    32F4 : 60AA                		bra.s	LevelSelect
    3385/    32F6 :                     ; ===========================================================================
    3386/    32F6 :                     
    3387/    32F6 :                     LevSel_Ending:				; XREF: LevelSelect
    3388/    32F6 : 11FC 0018 F600      		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
    3389/    32FC : 31FC 0600 FE10      		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
    3390/    3302 : 4E75                		rts	
    3391/    3304 :                     ; ===========================================================================
    3392/    3304 :                     
    3393/    3304 :                     LevSel_Credits:				; XREF: LevelSelect
    3394/    3304 : 11FC 001C F600      		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
    3395/    330A : 103C 0091           		move.b	#$91,d0
    3396/    330E : 6100 E08C           		bsr.w	PlaySound_Special ; play credits music
    3397/    3312 : 31FC 0000 FFF4      		move.w	#0,($FFFFFFF4).w
    3398/    3318 : 4E75                		rts	
    3399/    331A :                     ; ===========================================================================
    3400/    331A :                     
    3401/    331A :                     LevSel_Level_SS:			; XREF: LevelSelect
    3402/    331A : D040                		add.w	d0,d0
    3403/    331C : 303B 006C           		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
    3404/    3320 : 6B00 FF7E           		bmi.w	LevelSelect
    3405/    3324 : 0C40 0700           		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
    3406/    3328 : 6620                		bne.s	LevSel_Level	; if not, branch
    3407/    332A : 11FC 0010 F600      		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
    3408/    3330 : 4278 FE10           		clr.w	($FFFFFE10).w	; clear	level
    3409/    3334 : 11FC 0003 FE12      		move.b	#3,($FFFFFE12).w ; set lives to	3
    3410/    333A : 7000                		moveq	#0,d0
    3411/    333C : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    3412/    3340 : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    3413/    3344 : 21C0 FE26           		move.l	d0,($FFFFFE26).w ; clear score
    3414/    3348 : 4E75                		rts	
    3415/    334A :                     ; ===========================================================================
    3416/    334A :                     
    3417/    334A :                     LevSel_Level:				; XREF: LevSel_Level_SS
    3418/    334A : 0240 3FFF           		andi.w	#$3FFF,d0
    3419/    334E : 31C0 FE10           		move.w	d0,($FFFFFE10).w ; set level number
    3420/    3352 :                     
    3421/    3352 :                     PlayLevel:				; XREF: ROM:00003246j ...
    3422/    3352 : 11FC 000C F600      		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
    3423/    3358 : 11FC 0003 FE12      		move.b	#3,($FFFFFE12).w ; set lives to	3
    3424/    335E : 7000                		moveq	#0,d0
    3425/    3360 : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    3426/    3364 : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    3427/    3368 : 21C0 FE26           		move.l	d0,($FFFFFE26).w ; clear score
    3428/    336C : 11C0 FE16           		move.b	d0,($FFFFFE16).w ; clear special stage number
    3429/    3370 : 11C0 FE57           		move.b	d0,($FFFFFE57).w ; clear emeralds
    3430/    3374 : 21C0 FE58           		move.l	d0,($FFFFFE58).w ; clear emeralds
    3431/    3378 : 21C0 FE5C           		move.l	d0,($FFFFFE5C).w ; clear emeralds
    3432/    337C : 11C0 FE18           		move.b	d0,($FFFFFE18).w ; clear continues
    3433/    3380 : 103C 00E0           		move.b	#$E0,d0
    3434/    3384 : 6100 E016           		bsr.w	PlaySound_Special ; fade out music
    3435/    3388 : 4E75                		rts	
    3436/    338A :                     ; ===========================================================================
    3437/    338A :                     ; ---------------------------------------------------------------------------
    3438/    338A :                     ; Level	select - level pointers
    3439/    338A :                     ; ---------------------------------------------------------------------------
    3440/    338A :                     LSelectPointers:
    3441/    338A :                     		binclude	misc/ls_point.bin
    3442/    33B4 : (MACRO)             		align 2
    3442/    33B4 :  (MACRO-2)                  cnop 0,2
    3442/    33B4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    3443/    33B4 :                     ; ---------------------------------------------------------------------------
    3444/    33B4 :                     ; Level	select codes
    3445/    33B4 :                     ; ---------------------------------------------------------------------------
    3446/    33B4 :                     LevelSelectCode_J:
    3447/    33B4 :                     		binclude	misc/ls_jcode.bin
    3448/    33BA : (MACRO)             		align 2
    3448/    33BA :  (MACRO-2)                  cnop 0,2
    3448/    33BA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    3449/    33BA :                     
    3450/    33BA :                     LevelSelectCode_US:
    3451/    33BA :                     		binclude	misc/ls_ucode.bin
    3452/    33C0 : (MACRO)             		align 2
    3452/    33C0 :  (MACRO-2)                  cnop 0,2
    3452/    33C0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    3453/    33C0 :                     ; ===========================================================================
    3454/    33C0 :                     
    3455/    33C0 :                     ; ---------------------------------------------------------------------------
    3456/    33C0 :                     ; Demo mode
    3457/    33C0 :                     ; ---------------------------------------------------------------------------
    3458/    33C0 :                     
    3459/    33C0 :                     Demo:					; XREF: TitleScreen
    3460/    33C0 : 31FC 001E F614      		move.w	#$1E,($FFFFF614).w
    3461/    33C6 :                     
    3462/    33C6 :                     loc_33B6:				; XREF: loc_33E4
    3463/    33C6 : 11FC 0004 F62A      		move.b	#4,($FFFFF62A).w
    3464/    33CC : 6100 F5EA           		bsr.w	DelayProgram
    3465/    33D0 : 6100 2EC0           		bsr.w	DeformBgLayer
    3466/    33D4 : 6100 E566           		bsr.w	PalCycle_Load
    3467/    33D8 : 6100 E212           		bsr.w	RunPLC_RAM
    3468/    33DC : 3038 D008           		move.w	($FFFFD008).w,d0
    3469/    33E0 : 5440                		addq.w	#2,d0
    3470/    33E2 : 31C0 D008           		move.w	d0,($FFFFD008).w
    3471/    33E6 : 0C40 1C00           		cmpi.w	#$1C00,d0
    3472/    33EA : 6508                		bcs.s	loc_33E4
    3473/    33EC : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
    3474/    33F2 : 4E75                		rts	
    3475/    33F4 :                     ; ===========================================================================
    3476/    33F4 :                     
    3477/    33F4 :                     loc_33E4:				; XREF: Demo
    3478/    33F4 : 0238 0080 F605      		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
    3479/    33FA : 6600 FE56           		bne.w	Title_ChkLevSel	; if yes, branch
    3480/    33FE : 4A78 F614           		tst.w	($FFFFF614).w
    3481/    3402 : 6600 FFC2           		bne.w	loc_33B6
    3482/    3406 : 103C 00E0           		move.b	#$E0,d0
    3483/    340A : 6100 DF90           		bsr.w	PlaySound_Special ; fade out music
    3484/    340E : 3038 FFF2           		move.w	($FFFFFFF2).w,d0 ; load	demo number
    3485/    3412 : 0240 0007           		andi.w	#7,d0
    3486/    3416 : D040                		add.w	d0,d0
    3487/    3418 : 303B 004E           		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
    3488/    341C : 31C0 FE10           		move.w	d0,($FFFFFE10).w
    3489/    3420 : 5278 FFF2           		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
    3490/    3424 : 0C78 0004 FFF2      		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
    3491/    342A : 6506                		bcs.s	loc_3422	; if yes, branch
    3492/    342C : 31FC 0000 FFF2      		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
    3493/    3432 :                     
    3494/    3432 :                     loc_3422:
    3495/    3432 : 31FC 0001 FFF0      		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
    3496/    3438 : 11FC 0008 F600      		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
    3497/    343E : 0C40 0600           		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
    3498/    3442 : 660E                		bne.s	Demo_Level	; if not, branch
    3499/    3444 : 11FC 0010 F600      		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
    3500/    344A : 4278 FE10           		clr.w	($FFFFFE10).w	; clear	level number
    3501/    344E : 4238 FE16           		clr.b	($FFFFFE16).w	; clear	special	stage number
    3502/    3452 :                     
    3503/    3452 :                     Demo_Level:
    3504/    3452 : 11FC 0003 FE12      		move.b	#3,($FFFFFE12).w ; set lives to	3
    3505/    3458 : 7000                		moveq	#0,d0
    3506/    345A : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    3507/    345E : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    3508/    3462 : 21C0 FE26           		move.l	d0,($FFFFFE26).w ; clear score
    3509/    3466 : 4E75                		rts	
    3510/    3468 :                     ; ===========================================================================
    3511/    3468 :                     ; ---------------------------------------------------------------------------
    3512/    3468 :                     ; Levels used in demos
    3513/    3468 :                     ; ---------------------------------------------------------------------------
    3514/    3468 :                     Demo_Levels:	binclude	misc/dm_ord1.bin
    3515/    3470 : (MACRO)             		align 2
    3515/    3470 :  (MACRO-2)                  cnop 0,2
    3515/    3470 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    3516/    3470 :                     
    3517/    3470 :                     ; ---------------------------------------------------------------------------
    3518/    3470 :                     ; Subroutine to	change what you"re selecting in the level select
    3519/    3470 :                     ; ---------------------------------------------------------------------------
    3520/    3470 :                     
    3521/    3470 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    3522/    3470 :                     
    3523/    3470 :                     
    3524/    3470 :                     LevSelControls:				; XREF: LevelSelect
    3525/    3470 : 1238 F605           		move.b	($FFFFF605).w,d1
    3526/    3474 : 0201 0003           		andi.b	#3,d1		; is up/down pressed and held?
    3527/    3478 : 6606                		bne.s	LevSel_UpDown	; if yes, branch
    3528/    347A : 5378 FF80           		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
    3529/    347E : 6A3A                		bpl.s	LevSel_SndTest	; if time remains, branch
    3530/    3480 :                     
    3531/    3480 :                     LevSel_UpDown:
    3532/    3480 : 31FC 000B FF80      		move.w	#$B,($FFFFFF80).w ; reset time delay
    3533/    3486 : 1238 F604           		move.b	($FFFFF604).w,d1
    3534/    348A : 0201 0003           		andi.b	#3,d1		; is up/down pressed?
    3535/    348E : 672A                		beq.s	LevSel_SndTest	; if not, branch
    3536/    3490 : 3038 FF82           		move.w	($FFFFFF82).w,d0
    3537/    3494 : 0801 0000           		btst	#0,d1		; is up	pressed?
    3538/    3498 : 6706                		beq.s	LevSel_Down	; if not, branch
    3539/    349A : 5340                		subq.w	#1,d0		; move up 1 selection
    3540/    349C : 6402                		bcc.s	LevSel_Down
    3541/    349E : 7014                		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
    3542/    34A0 :                     
    3543/    34A0 :                     LevSel_Down:
    3544/    34A0 : 0801 0001           		btst	#1,d1		; is down pressed?
    3545/    34A4 : 670A                		beq.s	LevSel_Refresh	; if not, branch
    3546/    34A6 : 5240                		addq.w	#1,d0		; move down 1 selection
    3547/    34A8 : 0C40 0015           		cmpi.w	#$15,d0
    3548/    34AC : 6502                		bcs.s	LevSel_Refresh
    3549/    34AE : 7000                		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
    3550/    34B0 :                     
    3551/    34B0 :                     LevSel_Refresh:
    3552/    34B0 : 31C0 FF82           		move.w	d0,($FFFFFF82).w ; set new selection
    3553/    34B4 : 6100 0040           		bsr.w	LevSelTextLoad	; refresh text
    3554/    34B8 : 4E75                		rts	
    3555/    34BA :                     ; ===========================================================================
    3556/    34BA :                     
    3557/    34BA :                     LevSel_SndTest:				; XREF: LevSelControls
    3558/    34BA : 0C78 0014 FF82      		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
    3559/    34C0 : 6632                		bne.s	LevSel_NoMove	; if not, branch
    3560/    34C2 : 1238 F605           		move.b	($FFFFF605).w,d1
    3561/    34C6 : 0201 000C           		andi.b	#$C,d1		; is left/right	pressed?
    3562/    34CA : 6728                		beq.s	LevSel_NoMove	; if not, branch
    3563/    34CC : 3038 FF84           		move.w	($FFFFFF84).w,d0
    3564/    34D0 : 0801 0002           		btst	#2,d1		; is left pressed?
    3565/    34D4 : 6706                		beq.s	LevSel_Right	; if not, branch
    3566/    34D6 : 5340                		subq.w	#1,d0		; subtract 1 from sound	test
    3567/    34D8 : 6402                		bcc.s	LevSel_Right
    3568/    34DA : 704F                		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
    3569/    34DC :                     
    3570/    34DC :                     LevSel_Right:
    3571/    34DC : 0801 0003           		btst	#3,d1		; is right pressed?
    3572/    34E0 : 670A                		beq.s	LevSel_Refresh2	; if not, branch
    3573/    34E2 : 5240                		addq.w	#1,d0		; add 1	to sound test
    3574/    34E4 : 0C40 0050           		cmpi.w	#$50,d0
    3575/    34E8 : 6502                		bcs.s	LevSel_Refresh2
    3576/    34EA : 7000                		moveq	#0,d0		; if sound test	moves above $4F, set to	0
    3577/    34EC :                     
    3578/    34EC :                     LevSel_Refresh2:
    3579/    34EC : 31C0 FF84           		move.w	d0,($FFFFFF84).w ; set sound test number
    3580/    34F0 : 6100 0004           		bsr.w	LevSelTextLoad	; refresh text
    3581/    34F4 :                     
    3582/    34F4 :                     LevSel_NoMove:
    3583/    34F4 : 4E75                		rts	
    3584/    34F6 :                     ; End of function LevSelControls
    3585/    34F6 :                     
    3586/    34F6 :                     ; ---------------------------------------------------------------------------
    3587/    34F6 :                     ; Subroutine to load level select text
    3588/    34F6 :                     ; ---------------------------------------------------------------------------
    3589/    34F6 :                     
    3590/    34F6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    3591/    34F6 :                     
    3592/    34F6 :                     
    3593/    34F6 :                     LevSelTextLoad:				; XREF: TitleScreen
    3594/    34F6 : 43F9 0000 35B2      		lea	(LevelMenuText).l,a1
    3595/    34FC : 4DF9 00C0 0000      		lea	($C00000).l,a6
    3596/    3502 : 283C 6210 0003      		move.l	#$62100003,d4	; screen position (text)
    3597/    3508 : 363C E680           		move.w	#$E680,d3	; VRAM setting
    3598/    350C : 7214                		moveq	#$14,d1		; number of lines of text
    3599/    350E :                     
    3600/    350E :                     loc_34FE:				; XREF: LevSelTextLoad+26j
    3601/    350E : 2D44 0004           		move.l	d4,4(a6)
    3602/    3512 : 6100 0082           		bsr.w	LevSel_ChgLine
    3603/    3516 : 0684 0080 0000      		addi.l	#$800000,d4
    3604/    351C : 51C9 FFF0           		dbf	d1,loc_34FE
    3605/    3520 : 7000                		moveq	#0,d0
    3606/    3522 : 3038 FF82           		move.w	($FFFFFF82).w,d0
    3607/    3526 : 3200                		move.w	d0,d1
    3608/    3528 : 283C 6210 0003      		move.l	#$62100003,d4
    3609/    352E : EF48                		lsl.w	#7,d0
    3610/    3530 : 4840                		swap	d0
    3611/    3532 : D880                		add.l	d0,d4
    3612/    3534 : 43F9 0000 35B2      		lea	(LevelMenuText).l,a1
    3613/    353A : E749                		lsl.w	#3,d1
    3614/    353C : 3001                		move.w	d1,d0
    3615/    353E : D241                		add.w	d1,d1
    3616/    3540 : D240                		add.w	d0,d1
    3617/    3542 : D2C1                		adda.w	d1,a1
    3618/    3544 : 363C C680           		move.w	#$C680,d3
    3619/    3548 : 2D44 0004           		move.l	d4,4(a6)
    3620/    354C : 6100 0048           		bsr.w	LevSel_ChgLine
    3621/    3550 : 363C E680           		move.w	#$E680,d3
    3622/    3554 : 0C78 0014 FF82      		cmpi.w	#$14,($FFFFFF82).w
    3623/    355A : 6604                		bne.s	loc_3550
    3624/    355C : 363C C680           		move.w	#$C680,d3
    3625/    3560 :                     
    3626/    3560 :                     loc_3550:
    3627/    3560 : 23FC 6C30 0003 00C0 		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
                    0004                
    3628/    356A : 3038 FF84           		move.w	($FFFFFF84).w,d0
    3629/    356E : 0640 0080           		addi.w	#$80,d0
    3630/    3572 : 1400                		move.b	d0,d2
    3631/    3574 : E808                		lsr.b	#4,d0
    3632/    3576 : 6100 000A           		bsr.w	LevSel_ChgSnd
    3633/    357A : 1002                		move.b	d2,d0
    3634/    357C : 6100 0004           		bsr.w	LevSel_ChgSnd
    3635/    3580 : 4E75                		rts	
    3636/    3582 :                     ; End of function LevSelTextLoad
    3637/    3582 :                     
    3638/    3582 :                     
    3639/    3582 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    3640/    3582 :                     
    3641/    3582 :                     
    3642/    3582 :                     LevSel_ChgSnd:				; XREF: LevSelTextLoad
    3643/    3582 : 0240 000F           		andi.w	#$F,d0
    3644/    3586 : 0C00 000A           		cmpi.b	#$A,d0
    3645/    358A : 6504                		bcs.s	loc_3580
    3646/    358C : 0600 0007           		addi.b	#7,d0
    3647/    3590 :                     
    3648/    3590 :                     loc_3580:
    3649/    3590 : D043                		add.w	d3,d0
    3650/    3592 : 3C80                		move.w	d0,(a6)
    3651/    3594 : 4E75                		rts	
    3652/    3596 :                     ; End of function LevSel_ChgSnd
    3653/    3596 :                     
    3654/    3596 :                     
    3655/    3596 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    3656/    3596 :                     
    3657/    3596 :                     
    3658/    3596 :                     LevSel_ChgLine:				; XREF: LevSelTextLoad
    3659/    3596 : 7417                		moveq	#$17,d2		; number of characters per line
    3660/    3598 :                     
    3661/    3598 :                     loc_3588:
    3662/    3598 : 7000                		moveq	#0,d0
    3663/    359A : 1019                		move.b	(a1)+,d0
    3664/    359C : 6A0A                		bpl.s	loc_3598
    3665/    359E : 3CBC 0000           		move.w	#0,(a6)
    3666/    35A2 : 51CA FFF4           		dbf	d2,loc_3588
    3667/    35A6 : 4E75                		rts	
    3668/    35A8 :                     ; ===========================================================================
    3669/    35A8 :                     
    3670/    35A8 :                     loc_3598:				; XREF: LevSel_ChgLine
    3671/    35A8 : D043                		add.w	d3,d0
    3672/    35AA : 3C80                		move.w	d0,(a6)
    3673/    35AC : 51CA FFEA           		dbf	d2,loc_3588
    3674/    35B0 : 4E75                		rts	
    3675/    35B2 :                     ; End of function LevSel_ChgLine
    3676/    35B2 :                     
    3677/    35B2 :                     ; ===========================================================================
    3678/    35B2 :                     ; ---------------------------------------------------------------------------
    3679/    35B2 :                     ; Level	select menu text
    3680/    35B2 :                     ; ---------------------------------------------------------------------------
    3681/    35B2 :                     LevelMenuText:	binclude	misc/menutext.bin
    3682/    37AA : (MACRO)             		align 2
    3682/    37AA :  (MACRO-2)                  cnop 0,2
    3682/    37AA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    3683/    37AA :                     ; ---------------------------------------------------------------------------
    3684/    37AA :                     ; Music	playlist
    3685/    37AA :                     ; ---------------------------------------------------------------------------
    3686/    37AA :                     MusicList:	binclude	misc/muslist1.bin
    3687/    37B2 : (MACRO)             		align 2
    3687/    37B2 :  (MACRO-2)                  cnop 0,2
    3687/    37B2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    3688/    37B2 :                     ; ===========================================================================
    3689/    37B2 :                     
    3690/    37B2 :                     ; ---------------------------------------------------------------------------
    3691/    37B2 :                     ; Level
    3692/    37B2 :                     ; ---------------------------------------------------------------------------
    3693/    37B2 :                     
    3694/    37B2 :                     Level:					; XREF: GameModeArray
    3695/    37B2 : 08F8 0007 F600      		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
    3696/    37B8 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3697/    37BC : 6B08                		bmi.s	loc_37B6
    3698/    37BE : 103C 00E0           		move.b	#$E0,d0
    3699/    37C2 : 6100 DBD8           		bsr.w	PlaySound_Special ; fade out music
    3700/    37C6 :                     
    3701/    37C6 :                     loc_37B6:
    3702/    37C6 : 6100 DE16           		bsr.w	ClearPLC
    3703/    37CA : 6100 E696           		bsr.w	Pal_FadeFrom
    3704/    37CE : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3705/    37D2 : 6B3E                		bmi.s	Level_ClrRam
    3706/    37D4 : 46FC 2700           		move	#$2700,sr
    3707/    37D8 : 23FC 7000 0002 00C0 		move.l	#$70000002,($C00004).l
                    0004                
    3708/    37E2 : 41F9 0003 9B54      		lea	(Nem_TitleCard).l,a0 ; load title card patterns
    3709/    37E8 : 6100 DC56           		bsr.w	NemDec
    3710/    37EC : 46FC 2300           		move	#$2300,sr
    3711/    37F0 : 7000                		moveq	#0,d0
    3712/    37F2 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    3713/    37F6 : E948                		lsl.w	#4,d0
    3714/    37F8 : 45F9 0001 D838      		lea	(MainLoadBlocks).l,a2
    3715/    37FE : 45F2 0000           		lea	(a2,d0.w),a2
    3716/    3802 : 7000                		moveq	#0,d0
    3717/    3804 : 1012                		move.b	(a2),d0
    3718/    3806 : 6704                		beq.s	loc_37FC
    3719/    3808 : 6100 DD76           		bsr.w	LoadPLC		; load level patterns
    3720/    380C :                     
    3721/    380C :                     loc_37FC:
    3722/    380C : 7001                		moveq	#1,d0
    3723/    380E : 6100 DD70           		bsr.w	LoadPLC		; load standard	patterns
    3724/    3812 :                     
    3725/    3812 :                     Level_ClrRam:
    3726/    3812 : 43F8 D000           		lea	($FFFFD000).w,a1
    3727/    3816 : 7000                		moveq	#0,d0
    3728/    3818 : 323C 07FF           		move.w	#$7FF,d1
    3729/    381C :                     
    3730/    381C :                     Level_ClrObjRam:
    3731/    381C : 22C0                		move.l	d0,(a1)+
    3732/    381E : 51C9 FFFC           		dbf	d1,Level_ClrObjRam ; clear object RAM
    3733/    3822 :                     
    3734/    3822 : 43F8 F628           		lea	($FFFFF628).w,a1
    3735/    3826 : 7000                		moveq	#0,d0
    3736/    3828 : 323C 0015           		move.w	#$15,d1
    3737/    382C :                     
    3738/    382C :                     Level_ClrVars:
    3739/    382C : 22C0                		move.l	d0,(a1)+
    3740/    382E : 51C9 FFFC           		dbf	d1,Level_ClrVars ; clear misc variables
    3741/    3832 :                     
    3742/    3832 : 43F8 F700           		lea	($FFFFF700).w,a1
    3743/    3836 : 7000                		moveq	#0,d0
    3744/    3838 : 323C 003F           		move.w	#$3F,d1
    3745/    383C :                     
    3746/    383C :                     Level_ClrVars2:
    3747/    383C : 22C0                		move.l	d0,(a1)+
    3748/    383E : 51C9 FFFC           		dbf	d1,Level_ClrVars2 ; clear misc variables
    3749/    3842 :                     
    3750/    3842 : 43F8 FE60           		lea	($FFFFFE60).w,a1
    3751/    3846 : 7000                		moveq	#0,d0
    3752/    3848 : 323C 0047           		move.w	#$47,d1
    3753/    384C :                     
    3754/    384C :                     Level_ClrVars3:
    3755/    384C : 22C0                		move.l	d0,(a1)+
    3756/    384E : 51C9 FFFC           		dbf	d1,Level_ClrVars3 ; clear object variables
    3757/    3852 :                     
    3758/    3852 : 46FC 2700           		move	#$2700,sr
    3759/    3856 : 6100 DA6C           		bsr.w	ClearScreen
    3760/    385A : 4DF9 00C0 0004      		lea	($C00004).l,a6
    3761/    3860 : 3CBC 8B03           		move.w	#$8B03,(a6)
    3762/    3864 : 3CBC 8230           		move.w	#$8230,(a6)
    3763/    3868 : 3CBC 8407           		move.w	#$8407,(a6)
    3764/    386C : 3CBC 857C           		move.w	#$857C,(a6)
    3765/    3870 : 3CBC 9001           		move.w	#$9001,(a6)
    3766/    3874 : 3CBC 8004           		move.w	#$8004,(a6)
    3767/    3878 : 3CBC 8720           		move.w	#$8720,(a6)
    3768/    387C : 31FC 8ADF F624      		move.w	#$8ADF,($FFFFF624).w
    3769/    3882 : 3CB8 F624           		move.w	($FFFFF624).w,(a6)
    3770/    3886 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
    3771/    388C : 6630                		bne.s	Level_LoadPal	; if not, branch
    3772/    388E : 3CBC 8014           		move.w	#$8014,(a6)
    3773/    3892 : 7000                		moveq	#0,d0
    3774/    3894 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    3775/    3898 : D040                		add.w	d0,d0
    3776/    389A : 43F9 0000 3C3E      		lea	(WaterHeight).l,a1 ; load water	height array
    3777/    38A0 : 3031 0000           		move.w	(a1,d0.w),d0
    3778/    38A4 : 31C0 F646           		move.w	d0,($FFFFF646).w ; set water heights
    3779/    38A8 : 31C0 F648           		move.w	d0,($FFFFF648).w
    3780/    38AC : 31C0 F64A           		move.w	d0,($FFFFF64A).w
    3781/    38B0 : 4238 F64D           		clr.b	($FFFFF64D).w	; clear	water routine counter
    3782/    38B4 : 4238 F64E           		clr.b	($FFFFF64E).w	; clear	water movement
    3783/    38B8 : 11FC 0001 F64C      		move.b	#1,($FFFFF64C).w ; enable water
    3784/    38BE :                     
    3785/    38BE :                     Level_LoadPal:
    3786/    38BE : 31FC 001E FE14      		move.w	#$1E,($FFFFFE14).w
    3787/    38C4 : 46FC 2300           		move	#$2300,sr
    3788/    38C8 : 7003                		moveq	#3,d0
    3789/    38CA : 6100 E85C           		bsr.w	PalLoad2	; load Sonic"s pallet line
    3790/    38CE : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
    3791/    38D4 : 661C                		bne.s	Level_GetBgm	; if not, branch
    3792/    38D6 : 700F                		moveq	#$F,d0		; pallet number	$0F (LZ)
    3793/    38D8 : 0C38 0003 FE11      		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
    3794/    38DE : 6602                		bne.s	Level_WaterPal	; if not, branch
    3795/    38E0 : 7010                		moveq	#$10,d0		; pallet number	$10 (SBZ3)
    3796/    38E2 :                     
    3797/    38E2 :                     Level_WaterPal:
    3798/    38E2 : 6100 E85C           		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
    3799/    38E6 : 4A38 FE30           		tst.b	($FFFFFE30).w
    3800/    38EA : 6706                		beq.s	Level_GetBgm
    3801/    38EC : 11F8 FE53 F64E      		move.b	($FFFFFE53).w,($FFFFF64E).w
    3802/    38F2 :                     
    3803/    38F2 :                     Level_GetBgm:
    3804/    38F2 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3805/    38F6 : 6B5E                		bmi.s	loc_3946
    3806/    38F8 : 7000                		moveq	#0,d0
    3807/    38FA : 1038 FE10           		move.b	($FFFFFE10).w,d0
    3808/    38FE : 0C78 0103 FE10      		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
    3809/    3904 : 6602                		bne.s	Level_BgmNotLZ4	; if not, branch
    3810/    3906 : 7005                		moveq	#5,d0		; move 5 to d0
    3811/    3908 :                     
    3812/    3908 :                     Level_BgmNotLZ4:
    3813/    3908 : 0C78 0502 FE10      		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
    3814/    390E : 6602                		bne.s	Level_PlayBgm	; if not, branch
    3815/    3910 : 7006                		moveq	#6,d0		; move 6 to d0
    3816/    3912 :                     
    3817/    3912 :                     Level_PlayBgm:
    3818/    3912 : 43F9 0000 37AA      		lea	(MusicList).l,a1 ; load	music playlist
    3819/    3918 : 1031 0000           		move.b	(a1,d0.w),d0	; add d0 to a1
    3820/    391C : 6100 DA78           		bsr.w	PlaySound	; play music
    3821/    3920 : 11FC 0034 D080      		move.b	#$34,($FFFFD080).w ; load title	card object
    3822/    3926 :                     
    3823/    3926 :                     Level_TtlCard:
    3824/    3926 : 11FC 000C F62A      		move.b	#$C,($FFFFF62A).w
    3825/    392C : 6100 F08A           		bsr.w	DelayProgram
    3826/    3930 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    3827/    3936 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    3828/    393C : 6100 DCAE           		bsr.w	RunPLC_RAM
    3829/    3940 : 3038 D108           		move.w	($FFFFD108).w,d0
    3830/    3944 : B078 D130           		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
    3831/    3948 : 66DC                		bne.s	Level_TtlCard	; if not, branch
    3832/    394A : 4AB8 F680           		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
    3833/    394E : 66D6                		bne.s	Level_TtlCard	; if yes, branch
    3834/    3950 : 4EB9 0001 CAB8      		jsr	(Hud_Base).l
    3835/    3956 :                     
    3836/    3956 :                     loc_3946:
    3837/    3956 : 7003                		moveq	#3,d0
    3838/    3958 : 6100 E7B2           		bsr.w	PalLoad1	; load Sonic"s pallet line
    3839/    395C : 6100 256C           		bsr.w	LevelSizeLoad
    3840/    3960 : 6100 2930           		bsr.w	DeformBgLayer
    3841/    3964 : 08F8 0002 F754      		bset	#2,($FFFFF754).w
    3842/    396A : 6100 3346           		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
    3843/    396E : 6100 32F4           		bsr.w	LoadTilesFromStart
    3844/    3972 : 4EB9 0001 4EC8      		jsr	(FloorLog_Unk).l
    3845/    3978 : 6100 078A           		bsr.w	ColIndexLoad
    3846/    397C : 6100 0266           		bsr.w	LZWaterEffects
    3847/    3980 : 11FC 0001 D000      		move.b	#1,($FFFFD000).w ; load	Sonic object
    3848/    3986 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3849/    398A : 6B06                		bmi.s	Level_ChkDebug
    3850/    398C : 11FC 0021 D040      		move.b	#$21,($FFFFD040).w ; load HUD object
    3851/    3992 :                     
    3852/    3992 :                     Level_ChkDebug:
    3853/    3992 : 4A38 FFE2           		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
    3854/    3996 : 670E                		beq.s	Level_ChkWater	; if not, branch
    3855/    3998 : 0838 0006 F604      		btst	#6,($FFFFF604).w ; is A	button pressed?
    3856/    399E : 6706                		beq.s	Level_ChkWater	; if not, branch
    3857/    39A0 : 11FC 0001 FFFA      		move.b	#1,($FFFFFFFA).w ; enable debug	mode
    3858/    39A6 :                     
    3859/    39A6 :                     Level_ChkWater:
    3860/    39A6 : 31FC 0000 F602      		move.w	#0,($FFFFF602).w
    3861/    39AC : 31FC 0000 F604      		move.w	#0,($FFFFF604).w
    3862/    39B2 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
    3863/    39B8 : 6618                		bne.s	Level_LoadObj	; if not, branch
    3864/    39BA : 11FC 001B D780      		move.b	#$1B,($FFFFD780).w ; load water	surface	object
    3865/    39C0 : 31FC 0060 D788      		move.w	#$60,($FFFFD788).w
    3866/    39C6 : 11FC 001B D7C0      		move.b	#$1B,($FFFFD7C0).w
    3867/    39CC : 31FC 0120 D7C8      		move.w	#$120,($FFFFD7C8).w
    3868/    39D2 :                     
    3869/    39D2 :                     Level_LoadObj:
    3870/    39D2 : 4EB9 0000 D9E4      		jsr	(ObjPosLoad).l
    3871/    39D8 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    3872/    39DE : 4EB9 0000 D768      		jsr	(BuildSprites).l
    3873/    39E4 : 7000                		moveq	#0,d0
    3874/    39E6 : 4A38 FE30           		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
    3875/    39EA : 660C                		bne.s	loc_39E8	; if yes, branch
    3876/    39EC : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    3877/    39F0 : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    3878/    39F4 : 11C0 FE1B           		move.b	d0,($FFFFFE1B).w ; clear lives counter
    3879/    39F8 :                     
    3880/    39F8 :                     loc_39E8:
    3881/    39F8 : 11C0 FE1A           		move.b	d0,($FFFFFE1A).w
    3882/    39FC : 11C0 FE2C           		move.b	d0,($FFFFFE2C).w ; clear shield
    3883/    3A00 : 11C0 FE2D           		move.b	d0,($FFFFFE2D).w ; clear invincibility
    3884/    3A04 : 11C0 FE2E           		move.b	d0,($FFFFFE2E).w ; clear speed shoes
    3885/    3A08 : 11C0 FE2F           		move.b	d0,($FFFFFE2F).w
    3886/    3A0C : 31C0 FE08           		move.w	d0,($FFFFFE08).w
    3887/    3A10 : 31C0 FE02           		move.w	d0,($FFFFFE02).w
    3888/    3A14 : 31C0 FE04           		move.w	d0,($FFFFFE04).w
    3889/    3A18 : 6100 0712           		bsr.w	OscillateNumInit
    3890/    3A1C : 11FC 0001 FE1F      		move.b	#1,($FFFFFE1F).w ; update score	counter
    3891/    3A22 : 11FC 0001 FE1D      		move.b	#1,($FFFFFE1D).w ; update rings	counter
    3892/    3A28 : 11FC 0001 FE1E      		move.b	#1,($FFFFFE1E).w ; update time counter
    3893/    3A2E : 31FC 0000 F790      		move.w	#0,($FFFFF790).w
    3894/    3A34 : 4238 FF90           		clr.b   ($FFFFFF90).w
    3895/    3A38 : 43F9 0000 4094      		lea	(Demo_Index).l,a1 ; load demo data
    3896/    3A3E : 7000                		moveq	#0,d0
    3897/    3A40 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    3898/    3A44 : E548                		lsl.w	#2,d0
    3899/    3A46 : 2271 0000           		movea.l	(a1,d0.w),a1
    3900/    3A4A : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    3901/    3A4E : 6A12                		bpl.s	Level_Demo	; if yes, branch
    3902/    3A50 : 43F9 0000 40B4      		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
    3903/    3A56 : 3038 FFF4           		move.w	($FFFFFFF4).w,d0
    3904/    3A5A : 5340                		subq.w	#1,d0
    3905/    3A5C : E548                		lsl.w	#2,d0
    3906/    3A5E : 2271 0000           		movea.l	(a1,d0.w),a1
    3907/    3A62 :                     
    3908/    3A62 :                     Level_Demo:
    3909/    3A62 : 11E9 0001 F792      		move.b	1(a1),($FFFFF792).w ; load key press duration
    3910/    3A68 : 5338 F792           		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
    3911/    3A6C : 31FC 0708 F614      		move.w	#1800,($FFFFF614).w
    3912/    3A72 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3913/    3A76 : 6A14                		bpl.s	Level_ChkWaterPal
    3914/    3A78 : 31FC 021C F614      		move.w	#540,($FFFFF614).w
    3915/    3A7E : 0C78 0004 FFF4      		cmpi.w	#4,($FFFFFFF4).w
    3916/    3A84 : 6606                		bne.s	Level_ChkWaterPal
    3917/    3A86 : 31FC 01FE F614      		move.w	#510,($FFFFF614).w
    3918/    3A8C :                     
    3919/    3A8C :                     Level_ChkWaterPal:
    3920/    3A8C : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
    3921/    3A92 : 6610                		bne.s	Level_Delay	; if not, branch
    3922/    3A94 : 700B                		moveq	#$B,d0		; pallet $0B (LZ underwater)
    3923/    3A96 : 0C38 0003 FE11      		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
    3924/    3A9C : 6602                		bne.s	Level_WaterPal2	; if not, branch
    3925/    3A9E : 700D                		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
    3926/    3AA0 :                     
    3927/    3AA0 :                     Level_WaterPal2:
    3928/    3AA0 : 6100 E6BA           		bsr.w	PalLoad4_Water
    3929/    3AA4 :                     
    3930/    3AA4 :                     Level_Delay:
    3931/    3AA4 : 323C 0003           		move.w	#3,d1
    3932/    3AA8 :                     
    3933/    3AA8 :                     Level_DelayLoop:
    3934/    3AA8 : 11FC 0008 F62A      		move.b	#8,($FFFFF62A).w
    3935/    3AAE : 6100 EF08           		bsr.w	DelayProgram
    3936/    3AB2 : 51C9 FFF4           		dbf	d1,Level_DelayLoop
    3937/    3AB6 :                     
    3938/    3AB6 : 31FC 202F F626      		move.w	#$202F,($FFFFF626).w
    3939/    3ABC : 6100 E304           		bsr.w	Pal_FadeTo2
    3940/    3AC0 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3941/    3AC4 : 6B12                		bmi.s	Level_ClrCardArt
    3942/    3AC6 : 5438 D0A4           		addq.b	#2,($FFFFD0A4).w ; make	title card move
    3943/    3ACA : 5838 D0E4           		addq.b	#4,($FFFFD0E4).w
    3944/    3ACE : 5838 D124           		addq.b	#4,($FFFFD124).w
    3945/    3AD2 : 5838 D164           		addq.b	#4,($FFFFD164).w
    3946/    3AD6 : 6018                		bra.s	Level_StartGame
    3947/    3AD8 :                     ; ===========================================================================
    3948/    3AD8 :                     
    3949/    3AD8 :                     Level_ClrCardArt:
    3950/    3AD8 : 7002                		moveq	#2,d0
    3951/    3ADA : 4EB9 0000 1580      		jsr	(LoadPLC).l	; load explosion patterns
    3952/    3AE0 : 7000                		moveq	#0,d0
    3953/    3AE2 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    3954/    3AE6 : 0640 0015           		addi.w	#$15,d0
    3955/    3AEA : 4EB9 0000 1580      		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
    3956/    3AF0 :                     
    3957/    3AF0 :                     Level_StartGame:
    3958/    3AF0 : 08B8 0007 F600      		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
    3959/    3AF6 :                     
    3960/    3AF6 :                     ; ---------------------------------------------------------------------------
    3961/    3AF6 :                     ; Main level loop (when	all title card and loading sequences are finished)
    3962/    3AF6 :                     ; ---------------------------------------------------------------------------
    3963/    3AF6 :                     
    3964/    3AF6 :                     Level_MainLoop:
    3965/    3AF6 : 6100 D8B0           		bsr.w	PauseGame
    3966/    3AFA : 11FC 0008 F62A      		move.b	#8,($FFFFF62A).w
    3967/    3B00 : 6100 EEB6           		bsr.w	DelayProgram
    3968/    3B04 : 5278 FE04           		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
    3969/    3B08 : 6100 04DA           		bsr.w	MoveSonicInDemo
    3970/    3B0C : 6100 00D6           		bsr.w	LZWaterEffects
    3971/    3B10 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    3972/    3B16 : 4A78 FE08           		tst.w	($FFFFFE08).w
    3973/    3B1A : 6608                		bne.s	loc_3B10
    3974/    3B1C : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    3975/    3B22 : 6404                		bcc.s	loc_3B14
    3976/    3B24 :                     
    3977/    3B24 :                     loc_3B10:
    3978/    3B24 : 6100 276C           		bsr.w	DeformBgLayer
    3979/    3B28 :                     
    3980/    3B28 :                     loc_3B14:
    3981/    3B28 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    3982/    3B2E : 4EB9 0000 D9E4      		jsr	(ObjPosLoad).l
    3983/    3B34 : 6100 DE06           		bsr.w	PalCycle_Load
    3984/    3B38 : 6100 DAB2           		bsr.w	RunPLC_RAM
    3985/    3B3C : 6100 0644           		bsr.w	OscillateNumDo
    3986/    3B40 : 6100 06D8           		bsr.w	ChangeRingFrame
    3987/    3B44 : 6100 0742           		bsr.w	SignpostArtLoad
    3988/    3B48 : 0C38 0008 F600      		cmpi.b	#8,($FFFFF600).w
    3989/    3B4E : 6714                		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
    3990/    3B50 : 4A78 FE02           		tst.w	($FFFFFE02).w	; is the level set to restart?
    3991/    3B54 : 6600 FC5C           		bne.w	Level		; if yes, branch
    3992/    3B58 : 0C38 000C F600      		cmpi.b	#$C,($FFFFF600).w
    3993/    3B5E : 6700 FF96           		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
    3994/    3B62 : 4E75                		rts	
    3995/    3B64 :                     ; ===========================================================================
    3996/    3B64 :                     
    3997/    3B64 :                     Level_ChkDemo:				; XREF: Level_MainLoop
    3998/    3B64 : 4A78 FE02           		tst.w	($FFFFFE02).w	; is level set to restart?
    3999/    3B68 : 6618                		bne.s	Level_EndDemo	; if yes, branch
    4000/    3B6A : 4A78 F614           		tst.w	($FFFFF614).w	; is there time	left on	the demo?
    4001/    3B6E : 6712                		beq.s	Level_EndDemo	; if not, branch
    4002/    3B70 : 0C38 0008 F600      		cmpi.b	#8,($FFFFF600).w
    4003/    3B76 : 6700 FF7E           		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
    4004/    3B7A : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; go to Sega screen
    4005/    3B80 : 4E75                		rts	
    4006/    3B82 :                     ; ===========================================================================
    4007/    3B82 :                     
    4008/    3B82 :                     Level_EndDemo:				; XREF: Level_ChkDemo
    4009/    3B82 : 0C38 0008 F600      		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
    4010/    3B88 : 6612                		bne.s	loc_3B88	; if not, branch
    4011/    3B8A : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; go to Sega screen
    4012/    3B90 : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    4013/    3B94 : 6A06                		bpl.s	loc_3B88	; if yes, branch
    4014/    3B96 : 11FC 001C F600      		move.b	#$1C,($FFFFF600).w ; go	to credits
    4015/    3B9C :                     
    4016/    3B9C :                     loc_3B88:
    4017/    3B9C : 31FC 003C F614      		move.w	#$3C,($FFFFF614).w
    4018/    3BA2 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    4019/    3BA8 : 4278 F794           		clr.w	($FFFFF794).w
    4020/    3BAC :                     
    4021/    3BAC :                     loc_3B98:
    4022/    3BAC : 11FC 0008 F62A      		move.b	#8,($FFFFF62A).w
    4023/    3BB2 : 6100 EE04           		bsr.w	DelayProgram
    4024/    3BB6 : 6100 042C           		bsr.w	MoveSonicInDemo
    4025/    3BBA : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    4026/    3BC0 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    4027/    3BC6 : 4EB9 0000 D9E4      		jsr	(ObjPosLoad).l
    4028/    3BCC : 5378 F794           		subq.w	#1,($FFFFF794).w
    4029/    3BD0 : 6A0A                		bpl.s	loc_3BC8
    4030/    3BD2 : 31FC 0002 F794      		move.w	#2,($FFFFF794).w
    4031/    3BD8 : 6100 E2A8           		bsr.w	Pal_FadeOut
    4032/    3BDC :                     
    4033/    3BDC :                     loc_3BC8:
    4034/    3BDC : 4A78 F614           		tst.w	($FFFFF614).w
    4035/    3BE0 : 66CA                		bne.s	loc_3B98
    4036/    3BE2 : 4E75                		rts	
    4037/    3BE4 :                     ; ===========================================================================
    4038/    3BE4 :                     ; ---------------------------------------------------------------------------
    4039/    3BE4 :                     ; Subroutine to	do special water effects in Labyrinth Zone
    4040/    3BE4 :                     ; ---------------------------------------------------------------------------
    4041/    3BE4 :                     
    4042/    3BE4 :                     LZWaterEffects:				; XREF: Level
    4043/    3BE4 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
    4044/    3BEA : 6650                		bne.s	locret_3C28	; if not, branch
    4045/    3BEC : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    4046/    3BF2 : 640C                		bcc.s	LZMoveWater
    4047/    3BF4 : 6100 0250           		bsr.w	LZWindTunnels
    4048/    3BF8 : 6100 034E           		bsr.w	LZWaterSlides
    4049/    3BFC : 6100 0048           		bsr.w	LZDynamicWater
    4050/    3C00 :                     
    4051/    3C00 :                     LZMoveWater:
    4052/    3C00 : 4238 F64E           		clr.b	($FFFFF64E).w
    4053/    3C04 : 7000                		moveq	#0,d0
    4054/    3C06 : 1038 FE60           		move.b	($FFFFFE60).w,d0
    4055/    3C0A : E248                		lsr.w	#1,d0
    4056/    3C0C : D078 F648           		add.w	($FFFFF648).w,d0
    4057/    3C10 : 31C0 F646           		move.w	d0,($FFFFF646).w
    4058/    3C14 : 3038 F646           		move.w	($FFFFF646).w,d0
    4059/    3C18 : 9078 F704           		sub.w	($FFFFF704).w,d0
    4060/    3C1C : 6410                		bcc.s	loc_3C1A
    4061/    3C1E : 4A40                		tst.w	d0
    4062/    3C20 : 6A0C                		bpl.s	loc_3C1A
    4063/    3C22 : 11FC 00DF F625      		move.b	#-$21,($FFFFF625).w
    4064/    3C28 : 11FC 0001 F64E      		move.b	#1,($FFFFF64E).w
    4065/    3C2E :                     
    4066/    3C2E :                     loc_3C1A:
    4067/    3C2E : 0C40 00DF           		cmpi.w	#$DF,d0
    4068/    3C32 : 6504                		bcs.s	loc_3C24
    4069/    3C34 : 303C 00DF           		move.w	#$DF,d0
    4070/    3C38 :                     
    4071/    3C38 :                     loc_3C24:
    4072/    3C38 : 11C0 F625           		move.b	d0,($FFFFF625).w
    4073/    3C3C :                     
    4074/    3C3C :                     locret_3C28:
    4075/    3C3C : 4E75                		rts	
    4076/    3C3E :                     ; ===========================================================================
    4077/    3C3E :                     ; ---------------------------------------------------------------------------
    4078/    3C3E :                     ; Labyrinth default water heights
    4079/    3C3E :                     ; ---------------------------------------------------------------------------
    4080/    3C3E :                     WaterHeight:	binclude	misc/lz_heigh.bin
    4081/    3C46 : (MACRO)             		align 2
    4081/    3C46 :  (MACRO-2)                  cnop 0,2
    4081/    3C46 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    4082/    3C46 :                     ; ===========================================================================
    4083/    3C46 :                     
    4084/    3C46 :                     ; ---------------------------------------------------------------------------
    4085/    3C46 :                     ; Labyrinth dynamic water routines
    4086/    3C46 :                     ; ---------------------------------------------------------------------------
    4087/    3C46 :                     
    4088/    3C46 :                     LZDynamicWater:				; XREF: LZWaterEffects
    4089/    3C46 : 7000                		moveq	#0,d0
    4090/    3C48 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    4091/    3C4C : D040                		add.w	d0,d0
    4092/    3C4E : 303B 0020           		move.w	DynWater_Index(pc,d0.w),d0
    4093/    3C52 : 4EBB 001C           		jsr	DynWater_Index(pc,d0.w)
    4094/    3C56 : 7200                		moveq	#0,d1
    4095/    3C58 : 1238 F64C           		move.b	($FFFFF64C).w,d1
    4096/    3C5C : 3038 F64A           		move.w	($FFFFF64A).w,d0
    4097/    3C60 : 9078 F648           		sub.w	($FFFFF648).w,d0
    4098/    3C64 : 6708                		beq.s	locret_3C5A
    4099/    3C66 : 6402                		bcc.s	loc_3C56
    4100/    3C68 : 4441                		neg.w	d1
    4101/    3C6A :                     
    4102/    3C6A :                     loc_3C56:
    4103/    3C6A : D378 F648           		add.w	d1,($FFFFF648).w
    4104/    3C6E :                     
    4105/    3C6E :                     locret_3C5A:
    4106/    3C6E : 4E75                		rts	
    4107/    3C70 :                     ; ===========================================================================
    4108/    3C70 : 0008                DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
    4109/    3C72 : 009A                		dc.w DynWater_LZ2-DynWater_Index
    4110/    3C74 : 00BC                		dc.w DynWater_LZ3-DynWater_Index
    4111/    3C76 : 01C0                		dc.w DynWater_SBZ3-DynWater_Index
    4112/    3C78 :                     ; ===========================================================================
    4113/    3C78 :                     
    4114/    3C78 :                     DynWater_LZ1:				; XREF: DynWater_Index
    4115/    3C78 : 3038 F700           		move.w	($FFFFF700).w,d0
    4116/    3C7C : 1438 F64D           		move.b	($FFFFF64D).w,d2
    4117/    3C80 : 6662                		bne.s	loc_3CD0
    4118/    3C82 : 323C 00B8           		move.w	#$B8,d1
    4119/    3C86 : 0C40 0600           		cmpi.w	#$600,d0
    4120/    3C8A : 653C                		bcs.s	loc_3CB4
    4121/    3C8C : 323C 0108           		move.w	#$108,d1
    4122/    3C90 : 0C78 0200 D00C      		cmpi.w	#$200,($FFFFD00C).w
    4123/    3C96 : 6536                		bcs.s	loc_3CBA
    4124/    3C98 : 0C40 0C00           		cmpi.w	#$C00,d0
    4125/    3C9C : 652A                		bcs.s	loc_3CB4
    4126/    3C9E : 323C 0318           		move.w	#$318,d1
    4127/    3CA2 : 0C40 1080           		cmpi.w	#$1080,d0
    4128/    3CA6 : 6520                		bcs.s	loc_3CB4
    4129/    3CA8 : 11FC 0080 F7E5      		move.b	#-$80,($FFFFF7E5).w
    4130/    3CAE : 323C 05C8           		move.w	#$5C8,d1
    4131/    3CB2 : 0C40 1380           		cmpi.w	#$1380,d0
    4132/    3CB6 : 6510                		bcs.s	loc_3CB4
    4133/    3CB8 : 323C 03A8           		move.w	#$3A8,d1
    4134/    3CBC : B278 F648           		cmp.w	($FFFFF648).w,d1
    4135/    3CC0 : 6606                		bne.s	loc_3CB4
    4136/    3CC2 : 11FC 0001 F64D      		move.b	#1,($FFFFF64D).w
    4137/    3CC8 :                     
    4138/    3CC8 :                     loc_3CB4:
    4139/    3CC8 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4140/    3CCC : 4E75                		rts	
    4141/    3CCE :                     ; ===========================================================================
    4142/    3CCE :                     
    4143/    3CCE :                     loc_3CBA:				; XREF: DynWater_LZ1
    4144/    3CCE : 0C40 0C80           		cmpi.w	#$C80,d0
    4145/    3CD2 : 65F4                		bcs.s	loc_3CB4
    4146/    3CD4 : 323C 00E8           		move.w	#$E8,d1
    4147/    3CD8 : 0C40 1500           		cmpi.w	#$1500,d0
    4148/    3CDC : 65EA                		bcs.s	loc_3CB4
    4149/    3CDE : 323C 0108           		move.w	#$108,d1
    4150/    3CE2 : 60E4                		bra.s	loc_3CB4
    4151/    3CE4 :                     ; ===========================================================================
    4152/    3CE4 :                     
    4153/    3CE4 :                     loc_3CD0:				; XREF: DynWater_LZ1
    4154/    3CE4 : 5302                		subq.b	#1,d2
    4155/    3CE6 : 6620                		bne.s	locret_3CF4
    4156/    3CE8 : 0C78 02E0 D00C      		cmpi.w	#$2E0,($FFFFD00C).w
    4157/    3CEE : 6418                		bcc.s	locret_3CF4
    4158/    3CF0 : 323C 03A8           		move.w	#$3A8,d1
    4159/    3CF4 : 0C40 1300           		cmpi.w	#$1300,d0
    4160/    3CF8 : 650A                		bcs.s	loc_3CF0
    4161/    3CFA : 323C 0108           		move.w	#$108,d1
    4162/    3CFE : 11FC 0002 F64D      		move.b	#2,($FFFFF64D).w
    4163/    3D04 :                     
    4164/    3D04 :                     loc_3CF0:
    4165/    3D04 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4166/    3D08 :                     
    4167/    3D08 :                     locret_3CF4:
    4168/    3D08 : 4E75                		rts	
    4169/    3D0A :                     ; ===========================================================================
    4170/    3D0A :                     
    4171/    3D0A :                     DynWater_LZ2:				; XREF: DynWater_Index
    4172/    3D0A : 3038 F700           		move.w	($FFFFF700).w,d0
    4173/    3D0E : 323C 0328           		move.w	#$328,d1
    4174/    3D12 : 0C40 0500           		cmpi.w	#$500,d0
    4175/    3D16 : 650E                		bcs.s	loc_3D12
    4176/    3D18 : 323C 03C8           		move.w	#$3C8,d1
    4177/    3D1C : 0C40 0B00           		cmpi.w	#$B00,d0
    4178/    3D20 : 6504                		bcs.s	loc_3D12
    4179/    3D22 : 323C 0428           		move.w	#$428,d1
    4180/    3D26 :                     
    4181/    3D26 :                     loc_3D12:
    4182/    3D26 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4183/    3D2A : 4E75                		rts	
    4184/    3D2C :                     ; ===========================================================================
    4185/    3D2C :                     
    4186/    3D2C :                     DynWater_LZ3:				; XREF: DynWater_Index
    4187/    3D2C : 3038 F700           		move.w	($FFFFF700).w,d0
    4188/    3D30 : 1438 F64D           		move.b	($FFFFF64D).w,d2
    4189/    3D34 : 663C                		bne.s	loc_3D5E
    4190/    3D36 : 323C 0900           		move.w	#$900,d1
    4191/    3D3A : 0C40 0600           		cmpi.w	#$600,d0
    4192/    3D3E : 6528                		bcs.s	loc_3D54
    4193/    3D40 : 0C78 03C0 D00C      		cmpi.w	#$3C0,($FFFFD00C).w
    4194/    3D46 : 6520                		bcs.s	loc_3D54
    4195/    3D48 : 0C78 0600 D00C      		cmpi.w	#$600,($FFFFD00C).w
    4196/    3D4E : 6418                		bcc.s	loc_3D54
    4197/    3D50 : 323C 04C8           		move.w	#$4C8,d1
    4198/    3D54 : 11FC 004B A506      		move.b	#$4B,($FFFFA506).w ; change level layout
    4199/    3D5A : 11FC 0001 F64D      		move.b	#1,($FFFFF64D).w
    4200/    3D60 : 303C 00B7           		move.w	#$B7,d0
    4201/    3D64 : 6100 D636           		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
    4202/    3D68 :                     
    4203/    3D68 :                     loc_3D54:
    4204/    3D68 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4205/    3D6C : 31C1 F648           		move.w	d1,($FFFFF648).w
    4206/    3D70 : 4E75                		rts	
    4207/    3D72 :                     ; ===========================================================================
    4208/    3D72 :                     
    4209/    3D72 :                     loc_3D5E:				; XREF: DynWater_LZ3
    4210/    3D72 : 5302                		subq.b	#1,d2
    4211/    3D74 : 6646                		bne.s	loc_3DA8
    4212/    3D76 : 323C 04C8           		move.w	#$4C8,d1
    4213/    3D7A : 0C40 0770           		cmpi.w	#$770,d0
    4214/    3D7E : 6536                		bcs.s	loc_3DA2
    4215/    3D80 : 323C 0308           		move.w	#$308,d1
    4216/    3D84 : 0C40 1400           		cmpi.w	#$1400,d0
    4217/    3D88 : 652C                		bcs.s	loc_3DA2
    4218/    3D8A : 0C78 0508 F64A      		cmpi.w	#$508,($FFFFF64A).w
    4219/    3D90 : 6710                		beq.s	loc_3D8E
    4220/    3D92 : 0C78 0600 D00C      		cmpi.w	#$600,($FFFFD00C).w
    4221/    3D98 : 6408                		bcc.s	loc_3D8E
    4222/    3D9A : 0C78 0280 D00C      		cmpi.w	#$280,($FFFFD00C).w
    4223/    3DA0 : 6414                		bcc.s	loc_3DA2
    4224/    3DA2 :                     
    4225/    3DA2 :                     loc_3D8E:
    4226/    3DA2 : 323C 0508           		move.w	#$508,d1
    4227/    3DA6 : 31C1 F648           		move.w	d1,($FFFFF648).w
    4228/    3DAA : 0C40 1770           		cmpi.w	#$1770,d0
    4229/    3DAE : 6506                		bcs.s	loc_3DA2
    4230/    3DB0 : 11FC 0002 F64D      		move.b	#2,($FFFFF64D).w
    4231/    3DB6 :                     
    4232/    3DB6 :                     loc_3DA2:
    4233/    3DB6 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4234/    3DBA : 4E75                		rts	
    4235/    3DBC :                     ; ===========================================================================
    4236/    3DBC :                     
    4237/    3DBC :                     loc_3DA8:
    4238/    3DBC : 5302                		subq.b	#1,d2
    4239/    3DBE : 6626                		bne.s	loc_3DD2
    4240/    3DC0 : 323C 0508           		move.w	#$508,d1
    4241/    3DC4 : 0C40 1860           		cmpi.w	#$1860,d0
    4242/    3DC8 : 6516                		bcs.s	loc_3DCC
    4243/    3DCA : 323C 0188           		move.w	#$188,d1
    4244/    3DCE : 0C40 1AF0           		cmpi.w	#$1AF0,d0
    4245/    3DD2 : 6406                		bcc.s	loc_3DC6
    4246/    3DD4 : B278 F648           		cmp.w	($FFFFF648).w,d1
    4247/    3DD8 : 6606                		bne.s	loc_3DCC
    4248/    3DDA :                     
    4249/    3DDA :                     loc_3DC6:
    4250/    3DDA : 11FC 0003 F64D      		move.b	#3,($FFFFF64D).w
    4251/    3DE0 :                     
    4252/    3DE0 :                     loc_3DCC:
    4253/    3DE0 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4254/    3DE4 : 4E75                		rts	
    4255/    3DE6 :                     ; ===========================================================================
    4256/    3DE6 :                     
    4257/    3DE6 :                     loc_3DD2:
    4258/    3DE6 : 5302                		subq.b	#1,d2
    4259/    3DE8 : 6638                		bne.s	loc_3E0E
    4260/    3DEA : 323C 0188           		move.w	#$188,d1
    4261/    3DEE : 0C40 1AF0           		cmpi.w	#$1AF0,d0
    4262/    3DF2 : 6524                		bcs.s	loc_3E04
    4263/    3DF4 : 323C 0900           		move.w	#$900,d1
    4264/    3DF8 : 0C40 1BC0           		cmpi.w	#$1BC0,d0
    4265/    3DFC : 651A                		bcs.s	loc_3E04
    4266/    3DFE : 11FC 0004 F64D      		move.b	#4,($FFFFF64D).w
    4267/    3E04 : 31FC 0608 F64A      		move.w	#$608,($FFFFF64A).w
    4268/    3E0A : 31FC 07C0 F648      		move.w	#$7C0,($FFFFF648).w
    4269/    3E10 : 11FC 0001 F7E8      		move.b	#1,($FFFFF7E8).w
    4270/    3E16 : 4E75                		rts	
    4271/    3E18 :                     ; ===========================================================================
    4272/    3E18 :                     
    4273/    3E18 :                     loc_3E04:
    4274/    3E18 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4275/    3E1C : 31C1 F648           		move.w	d1,($FFFFF648).w
    4276/    3E20 : 4E75                		rts	
    4277/    3E22 :                     ; ===========================================================================
    4278/    3E22 :                     
    4279/    3E22 :                     loc_3E0E:
    4280/    3E22 : 0C40 1E00           		cmpi.w	#$1E00,d0
    4281/    3E26 : 6506                		bcs.s	locret_3E1A
    4282/    3E28 : 31FC 0128 F64A      		move.w	#$128,($FFFFF64A).w
    4283/    3E2E :                     
    4284/    3E2E :                     locret_3E1A:
    4285/    3E2E : 4E75                		rts	
    4286/    3E30 :                     ; ===========================================================================
    4287/    3E30 :                     
    4288/    3E30 :                     DynWater_SBZ3:				; XREF: DynWater_Index
    4289/    3E30 : 323C 0228           		move.w	#$228,d1
    4290/    3E34 : 0C78 0F00 F700      		cmpi.w	#$F00,($FFFFF700).w
    4291/    3E3A : 6504                		bcs.s	loc_3E2C
    4292/    3E3C : 323C 04C8           		move.w	#$4C8,d1
    4293/    3E40 :                     
    4294/    3E40 :                     loc_3E2C:
    4295/    3E40 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4296/    3E44 : 4E75                		rts
    4297/    3E46 :                     
    4298/    3E46 :                     ; ---------------------------------------------------------------------------
    4299/    3E46 :                     ; Labyrinth Zone "wind tunnels"	subroutine
    4300/    3E46 :                     ; ---------------------------------------------------------------------------
    4301/    3E46 :                     
    4302/    3E46 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4303/    3E46 :                     
    4304/    3E46 :                     
    4305/    3E46 :                     LZWindTunnels:				; XREF: LZWaterEffects
    4306/    3E46 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	being used?
    4307/    3E4A : 6600 00D2           		bne.w	locret_3F0A	; if yes, branch
    4308/    3E4E : 45F9 0000 3F28      		lea	(LZWind_Data).l,a2
    4309/    3E54 : 7000                		moveq	#0,d0
    4310/    3E56 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    4311/    3E5A : E748                		lsl.w	#3,d0
    4312/    3E5C : D4C0                		adda.w	d0,a2
    4313/    3E5E : 7200                		moveq	#0,d1
    4314/    3E60 : 4A38 FE11           		tst.b	($FFFFFE11).w
    4315/    3E64 : 6604                		bne.s	loc_3E56
    4316/    3E66 : 7201                		moveq	#1,d1
    4317/    3E68 : 514A                		subq.w	#8,a2
    4318/    3E6A :                     
    4319/    3E6A :                     loc_3E56:
    4320/    3E6A : 43F8 D000           		lea	($FFFFD000).w,a1
    4321/    3E6E :                     
    4322/    3E6E :                     LZWind_Loop:
    4323/    3E6E : 3029 0008           		move.w	8(a1),d0
    4324/    3E72 : B052                		cmp.w	(a2),d0
    4325/    3E74 : 6500 0092           		bcs.w	loc_3EF4
    4326/    3E78 : B06A 0004           		cmp.w	4(a2),d0
    4327/    3E7C : 6400 008A           		bcc.w	loc_3EF4
    4328/    3E80 : 3429 000C           		move.w	$C(a1),d2
    4329/    3E84 : B46A 0002           		cmp.w	2(a2),d2
    4330/    3E88 : 657E                		bcs.s	loc_3EF4
    4331/    3E8A : B46A 0006           		cmp.w	6(a2),d2
    4332/    3E8E : 6478                		bcc.s	loc_3EF4
    4333/    3E90 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
    4334/    3E94 : 0200 003F           		andi.b	#$3F,d0
    4335/    3E98 : 660A                		bne.s	loc_3E90
    4336/    3E9A : 303C 00D0           		move.w	#$D0,d0
    4337/    3E9E : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play rushing water sound
    4338/    3EA4 :                     
    4339/    3EA4 :                     loc_3E90:
    4340/    3EA4 : 4A38 F7C9           		tst.b	($FFFFF7C9).w
    4341/    3EA8 : 6600 0074           		bne.w	locret_3F0A
    4342/    3EAC : 0C29 0004 0024      		cmpi.b	#4,$24(a1)
    4343/    3EB2 : 6466                		bcc.s	loc_3F06
    4344/    3EB4 : 11FC 0001 F7C7      		move.b	#1,($FFFFF7C7).w
    4345/    3EBA : 0440 0080           		subi.w	#$80,d0
    4346/    3EBE : B052                		cmp.w	(a2),d0
    4347/    3EC0 : 6410                		bcc.s	LZWind_Move
    4348/    3EC2 : 7002                		moveq	#2,d0
    4349/    3EC4 : 0C38 0001 FE11      		cmpi.b	#1,($FFFFFE11).w
    4350/    3ECA : 6602                		bne.s	loc_3EBA
    4351/    3ECC : 4440                		neg.w	d0
    4352/    3ECE :                     
    4353/    3ECE :                     loc_3EBA:
    4354/    3ECE : D169 000C           		add.w	d0,$C(a1)
    4355/    3ED2 :                     
    4356/    3ED2 :                     LZWind_Move:
    4357/    3ED2 : 5869 0008           		addq.w	#4,8(a1)
    4358/    3ED6 : 337C 0400 0010      		move.w	#$400,$10(a1)	; move Sonic horizontally
    4359/    3EDC : 337C 0000 0012      		move.w	#0,$12(a1)
    4360/    3EE2 : 137C 000F 001C      		move.b	#$F,$1C(a1)	; use floating animation
    4361/    3EE8 : 08E9 0001 0022      		bset	#1,$22(a1)
    4362/    3EEE : 0838 0000 F602      		btst	#0,($FFFFF602).w ; is up pressed?
    4363/    3EF4 : 6704                		beq.s	LZWind_MoveDown	; if not, branch
    4364/    3EF6 : 5369 000C           		subq.w	#1,$C(a1)	; move Sonic up
    4365/    3EFA :                     
    4366/    3EFA :                     LZWind_MoveDown:
    4367/    3EFA : 0838 0001 F602      		btst	#1,($FFFFF602).w ; is down being pressed?
    4368/    3F00 : 6704                		beq.s	locret_3EF2	; if not, branch
    4369/    3F02 : 5269 000C           		addq.w	#1,$C(a1)	; move Sonic down
    4370/    3F06 :                     
    4371/    3F06 :                     locret_3EF2:
    4372/    3F06 : 4E75                		rts	
    4373/    3F08 :                     ; ===========================================================================
    4374/    3F08 :                     
    4375/    3F08 :                     loc_3EF4:				; XREF: LZWindTunnels
    4376/    3F08 : 504A                		addq.w	#8,a2
    4377/    3F0A : 51C9 FF62           		dbf	d1,LZWind_Loop
    4378/    3F0E : 4A38 F7C7           		tst.b	($FFFFF7C7).w
    4379/    3F12 : 670A                		beq.s	locret_3F0A
    4380/    3F14 : 137C 0000 001C      		move.b	#0,$1C(a1)
    4381/    3F1A :                     
    4382/    3F1A :                     loc_3F06:
    4383/    3F1A : 4238 F7C7           		clr.b	($FFFFF7C7).w
    4384/    3F1E :                     
    4385/    3F1E :                     locret_3F0A:
    4386/    3F1E : 4E75                		rts	
    4387/    3F20 :                     ; End of function LZWindTunnels
    4388/    3F20 :                     
    4389/    3F20 :                     ; ===========================================================================
    4390/    3F20 : 0A80 0300 0C10 0380 		dc.w $A80, $300, $C10, $380
    4391/    3F28 : 0F80 0100 1410 0180 LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
                    0460 0400 0710 0480 
                    0A20                
    4392/    3F3A : 0600 1610 06E0 0C80 		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
                    0600 13D0 0680      
    4393/    3F48 :                     					; XREF: LZWindTunnels
    4394/    3F48 : (MACRO)             		align 2
    4394/    3F48 :  (MACRO-2)                  cnop 0,2
    4394/    3F48 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    4395/    3F48 :                     
    4396/    3F48 :                     ; ---------------------------------------------------------------------------
    4397/    3F48 :                     ; Labyrinth Zone water slide subroutine
    4398/    3F48 :                     ; ---------------------------------------------------------------------------
    4399/    3F48 :                     
    4400/    3F48 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4401/    3F48 :                     
    4402/    3F48 :                     
    4403/    3F48 :                     LZWaterSlides:				; XREF: LZWaterEffects
    4404/    3F48 : 43F8 D000           		lea	($FFFFD000).w,a1
    4405/    3F4C : 0829 0001 0022      		btst	#1,$22(a1)
    4406/    3F52 : 662A                		bne.s	loc_3F6A
    4407/    3F54 : 3029 000C           		move.w	$C(a1),d0
    4408/    3F58 : E248                		lsr.w	#1,d0
    4409/    3F5A : 0240 0380           		andi.w	#$380,d0
    4410/    3F5E : 1229 0008           		move.b	8(a1),d1
    4411/    3F62 : 0241 007F           		andi.w	#$7F,d1
    4412/    3F66 : D041                		add.w	d1,d0
    4413/    3F68 : 45F8 A400           		lea	($FFFFA400).w,a2
    4414/    3F6C : 1032 0000           		move.b	(a2,d0.w),d0
    4415/    3F70 : 45FA 0071           		lea	byte_3FCF(pc),a2
    4416/    3F74 : 7206                		moveq	#6,d1
    4417/    3F76 :                     
    4418/    3F76 :                     loc_3F62:
    4419/    3F76 : B022                		cmp.b	-(a2),d0
    4420/    3F78 : 57C9 FFFC           		dbeq	d1,loc_3F62
    4421/    3F7C : 6712                		beq.s	LZSlide_Move
    4422/    3F7E :                     
    4423/    3F7E :                     loc_3F6A:
    4424/    3F7E : 4A38 F7CA           		tst.b	($FFFFF7CA).w
    4425/    3F82 : 670A                		beq.s	locret_3F7A
    4426/    3F84 : 337C 0005 003E      		move.w	#5,$3E(a1)
    4427/    3F8A : 4238 F7CA           		clr.b	($FFFFF7CA).w
    4428/    3F8E :                     
    4429/    3F8E :                     locret_3F7A:
    4430/    3F8E : 4E75                		rts	
    4431/    3F90 :                     ; ===========================================================================
    4432/    3F90 :                     
    4433/    3F90 :                     LZSlide_Move:				; XREF: LZWaterSlides
    4434/    3F90 : 0C41 0003           		cmpi.w	#3,d1
    4435/    3F94 : 6402                		bcc.s	loc_3F84
    4436/    3F96 : 4E71                		nop	
    4437/    3F98 :                     
    4438/    3F98 :                     loc_3F84:
    4439/    3F98 : 08A9 0000 0022      		bclr	#0,$22(a1)
    4440/    3F9E : 103B 1034           		move.b	byte_3FC0(pc,d1.w),d0
    4441/    3FA2 : 1340 0014           		move.b	d0,$14(a1)
    4442/    3FA6 : 6A06                		bpl.s	loc_3F9A
    4443/    3FA8 : 08E9 0000 0022      		bset	#0,$22(a1)
    4444/    3FAE :                     
    4445/    3FAE :                     loc_3F9A:
    4446/    3FAE : 4229 0015           		clr.b	$15(a1)
    4447/    3FB2 : 137C 001B 001C      		move.b	#$1B,$1C(a1)	; use Sonic"s "sliding" animation
    4448/    3FB8 : 11FC 0001 F7CA      		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
    4449/    3FBE : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
    4450/    3FC2 : 0200 001F           		andi.b	#$1F,d0
    4451/    3FC6 : 660A                		bne.s	locret_3FBE
    4452/    3FC8 : 303C 00D0           		move.w	#$D0,d0
    4453/    3FCC : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play water sound
    4454/    3FD2 :                     
    4455/    3FD2 :                     locret_3FBE:
    4456/    3FD2 : 4E75                		rts	
    4457/    3FD4 :                     ; End of function LZWaterSlides
    4458/    3FD4 :                     
    4459/    3FD4 :                     ; ===========================================================================
    4460/    3FD4 : 0AF5 0AF6 F5F4 0B00 byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
                    0207 034C 4B08 04   
    4461/    3FE3 : 00                  byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
    4462/    3FE4 : (MACRO)             		align 2
    4462/    3FE4 :  (MACRO-2)                  cnop 0,2
    4462/    3FE4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    4463/    3FE4 :                     
    4464/    3FE4 :                     ; ---------------------------------------------------------------------------
    4465/    3FE4 :                     ; Subroutine to	move Sonic in demo mode
    4466/    3FE4 :                     ; ---------------------------------------------------------------------------
    4467/    3FE4 :                     
    4468/    3FE4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4469/    3FE4 :                     
    4470/    3FE4 :                     
    4471/    3FE4 :                     MoveSonicInDemo:			; XREF: Level_MainLoop; et al
    4472/    3FE4 : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    4473/    3FE8 : 663A                		bne.s	MoveDemo_On	; if yes, branch
    4474/    3FEA : 4E75                		rts	
    4475/    3FEC :                     ; ===========================================================================
    4476/    3FEC :                     
    4477/    3FEC :                     ; This is an unused subroutine for recording a demo
    4478/    3FEC :                     
    4479/    3FEC :                     MoveDemo_Record:
    4480/    3FEC : 43F9 0008 0000      		lea	($80000).l,a1
    4481/    3FF2 : 3038 F790           		move.w	($FFFFF790).w,d0
    4482/    3FF6 : D2C0                		adda.w	d0,a1
    4483/    3FF8 : 1038 F604           		move.b	($FFFFF604).w,d0
    4484/    3FFC : B011                		cmp.b	(a1),d0
    4485/    3FFE : 660E                		bne.s	loc_3FFA
    4486/    4000 : 5229 0001           		addq.b	#1,1(a1)
    4487/    4004 : 0C29 00FF 0001      		cmpi.b	#$FF,1(a1)
    4488/    400A : 6702                		beq.s	loc_3FFA
    4489/    400C : 4E75                		rts	
    4490/    400E :                     ; ===========================================================================
    4491/    400E :                     
    4492/    400E :                     loc_3FFA:				; XREF: MoveDemo_Record
    4493/    400E : 1340 0002           		move.b	d0,2(a1)
    4494/    4012 : 137C 0000 0003      		move.b	#0,3(a1)
    4495/    4018 : 5478 F790           		addq.w	#2,($FFFFF790).w
    4496/    401C : 0278 03FF F790      		andi.w	#$3FF,($FFFFF790).w
    4497/    4022 : 4E75                		rts	
    4498/    4024 :                     ; ===========================================================================
    4499/    4024 :                     
    4500/    4024 :                     MoveDemo_On:				; XREF: MoveSonicInDemo
    4501/    4024 : 4A38 F604           		tst.b	($FFFFF604).w
    4502/    4028 : 6A0C                		bpl.s	loc_4022
    4503/    402A : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    4504/    402E : 6B06                		bmi.s	loc_4022
    4505/    4030 : 11FC 0004 F600      		move.b	#4,($FFFFF600).w
    4506/    4036 :                     
    4507/    4036 :                     loc_4022:
    4508/    4036 : 43F9 0000 4094      		lea	(Demo_Index).l,a1
    4509/    403C : 7000                		moveq	#0,d0
    4510/    403E : 1038 FE10           		move.b	($FFFFFE10).w,d0
    4511/    4042 : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w
    4512/    4048 : 6602                		bne.s	loc_4038
    4513/    404A : 7006                		moveq	#6,d0
    4514/    404C :                     
    4515/    404C :                     loc_4038:
    4516/    404C : E548                		lsl.w	#2,d0
    4517/    404E : 2271 0000           		movea.l	(a1,d0.w),a1
    4518/    4052 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    4519/    4056 : 6A12                		bpl.s	loc_4056
    4520/    4058 : 43F9 0000 40B4      		lea	(Demo_EndIndex).l,a1
    4521/    405E : 3038 FFF4           		move.w	($FFFFFFF4).w,d0
    4522/    4062 : 5340                		subq.w	#1,d0
    4523/    4064 : E548                		lsl.w	#2,d0
    4524/    4066 : 2271 0000           		movea.l	(a1,d0.w),a1
    4525/    406A :                     
    4526/    406A :                     loc_4056:
    4527/    406A : 3038 F790           		move.w	($FFFFF790).w,d0
    4528/    406E : D2C0                		adda.w	d0,a1
    4529/    4070 : 1011                		move.b	(a1),d0
    4530/    4072 : 41F8 F604           		lea	($FFFFF604).w,a0
    4531/    4076 : 1200                		move.b	d0,d1
    4532/    4078 : 1410                		move.b	(a0),d2
    4533/    407A : B500                		eor.b	d2,d0
    4534/    407C : 10C1                		move.b	d1,(a0)+
    4535/    407E : C001                		and.b	d1,d0
    4536/    4080 : 10C0                		move.b	d0,(a0)+
    4537/    4082 : 5338 F792           		subq.b	#1,($FFFFF792).w
    4538/    4086 : 640A                		bcc.s	locret_407E
    4539/    4088 : 11E9 0003 F792      		move.b	3(a1),($FFFFF792).w
    4540/    408E : 5478 F790           		addq.w	#2,($FFFFF790).w
    4541/    4092 :                     
    4542/    4092 :                     locret_407E:
    4543/    4092 : 4E75                		rts	
    4544/    4094 :                     ; End of function MoveSonicInDemo
    4545/    4094 :                     
    4546/    4094 :                     ; ===========================================================================
    4547/    4094 :                     ; ---------------------------------------------------------------------------
    4548/    4094 :                     ; Demo sequence	pointers
    4549/    4094 :                     ; ---------------------------------------------------------------------------
    4550/    4094 :                     Demo_Index:
    4551/    4094 :                     		include	"_inc/Demo pointers for intro.asm"
(1)    1/    4094 :                     ; ---------------------------------------------------------------------------
(1)    2/    4094 :                     ; Demo sequence	pointers
(1)    3/    4094 :                     ; ---------------------------------------------------------------------------
(1)    4/    4094 : 0000 42C0           	dc.l Demo_GHZ
(1)    5/    4098 : 0000 42C0           	dc.l Demo_GHZ
(1)    6/    409C : 0000 4340           	dc.l Demo_MZ
(1)    7/    40A0 : 0000 4340           	dc.l Demo_MZ
(1)    8/    40A4 : 0000 4470           	dc.l Demo_SYZ
(1)    9/    40A8 : 0000 4470           	dc.l Demo_SYZ
(1)   10/    40AC : 0000 44F0           	dc.l Demo_SS
(1)   11/    40B0 : 0000 44F0           	dc.l Demo_SS
    4552/    40B4 :                     
    4553/    40B4 :                     Demo_EndIndex:
    4554/    40B4 :                     		include	"_inc/Demo pointers for ending.asm"
(1)    1/    40B4 :                     ; ---------------------------------------------------------------------------
(1)    2/    40B4 :                     ; Demo (ending) sequence pointers
(1)    3/    40B4 :                     ; ---------------------------------------------------------------------------
(1)    4/    40B4 : 0000 5D5C           	dc.l Demo_EndGHZ1
(1)    5/    40B8 : 0000 5D8A           	dc.l Demo_EndMZ
(1)    6/    40BC : 0000 5DCA           	dc.l Demo_EndSYZ
(1)    7/    40C0 : 0000 5DFA           	dc.l Demo_EndLZ
(1)    8/    40C4 : 0000 5E2A           	dc.l Demo_EndSLZ
(1)    9/    40C8 : 0000 5E4A           	dc.l Demo_EndSBZ1
(1)   10/    40CC : 0000 5E6A           	dc.l Demo_EndSBZ2
(1)   11/    40D0 : 0000 5E9A           	dc.l Demo_EndGHZ2
    4555/    40D4 :                     
    4556/    40D4 : 008B 0837 0042 085C 		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
                    006A 085F 002F 082C 
    4557/    40E4 : 0021 0803 2830 0808 		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
                    002E 0815 000F 0846 
    4558/    40F4 : 001A 08FF 08CA 0000 		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
                    0000 0000 0000 0000 
    4559/    4104 : (MACRO)             		align 2
    4559/    4104 :  (MACRO-2)                  cnop 0,2
    4559/    4104 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    4560/    4104 :                     
    4561/    4104 :                     ; ---------------------------------------------------------------------------
    4562/    4104 :                     ; Collision index loading subroutine
    4563/    4104 :                     ; ---------------------------------------------------------------------------
    4564/    4104 :                     
    4565/    4104 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4566/    4104 :                     
    4567/    4104 :                     
    4568/    4104 :                     ColIndexLoad:				; XREF: Level
    4569/    4104 : 7000                		moveq	#0,d0
    4570/    4106 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    4571/    410A : E548                		lsl.w	#2,d0
    4572/    410C : 21FB 0006 F796      		move.l	ColPointers(pc,d0.w),($FFFFF796).w
    4573/    4112 : 4E75                		rts	
    4574/    4114 :                     ; End of function ColIndexLoad
    4575/    4114 :                     
    4576/    4114 :                     ; ===========================================================================
    4577/    4114 :                     ; ---------------------------------------------------------------------------
    4578/    4114 :                     ; Collision index pointers
    4579/    4114 :                     ; ---------------------------------------------------------------------------
    4580/    4114 :                     ColPointers:
    4581/    4114 :                     		include	"_inc/Collision index pointers.asm"
(1)    1/    4114 :                     ; ---------------------------------------------------------------------------
(1)    2/    4114 :                     ; Collision index pointers
(1)    3/    4114 :                     ; ---------------------------------------------------------------------------
(1)    4/    4114 : 0006 5842           	dc.l Col_GHZ
(1)    5/    4118 : 0006 59FA           	dc.l Col_LZ
(1)    6/    411C : 0006 5AC2           	dc.l Col_MZ
(1)    7/    4120 : 0006 5C52           	dc.l Col_SLZ
(1)    8/    4124 : 0006 5E46           	dc.l Col_SYZ
(1)    9/    4128 : 0006 603A           	dc.l Col_SBZ
    4582/    412C :                     
    4583/    412C :                     ; ---------------------------------------------------------------------------
    4584/    412C :                     ; Oscillating number subroutine
    4585/    412C :                     ; ---------------------------------------------------------------------------
    4586/    412C :                     
    4587/    412C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4588/    412C :                     
    4589/    412C :                     
    4590/    412C :                     OscillateNumInit:			; XREF: Level
    4591/    412C : 43F8 FE5E           		lea	($FFFFFE5E).w,a1
    4592/    4130 : 45F9 0000 4140      		lea	(Osc_Data).l,a2
    4593/    4136 : 7220                		moveq	#$20,d1
    4594/    4138 :                     
    4595/    4138 :                     Osc_Loop:
    4596/    4138 : 32DA                		move.w	(a2)+,(a1)+
    4597/    413A : 51C9 FFFC           		dbf	d1,Osc_Loop
    4598/    413E : 4E75                		rts	
    4599/    4140 :                     ; End of function OscillateNumInit
    4600/    4140 :                     
    4601/    4140 :                     ; ===========================================================================
    4602/    4140 : 007C 0080           Osc_Data:	dc.w $7C, $80		; baseline values
    4603/    4144 : 0000 0080           		dc.w 0,	$80
    4604/    4148 : 0000 0080           		dc.w 0,	$80
    4605/    414C : 0000 0080           		dc.w 0,	$80
    4606/    4150 : 0000 0080           		dc.w 0,	$80
    4607/    4154 : 0000 0080           		dc.w 0,	$80
    4608/    4158 : 0000 0080           		dc.w 0,	$80
    4609/    415C : 0000 0080           		dc.w 0,	$80
    4610/    4160 : 0000 0080           		dc.w 0,	$80
    4611/    4164 : 0000 50F0           		dc.w 0,	$50F0
    4612/    4168 : 011E 2080           		dc.w $11E, $2080
    4613/    416C : 00B4 3080           		dc.w $B4, $3080
    4614/    4170 : 010E 5080           		dc.w $10E, $5080
    4615/    4174 : 01C2 7080           		dc.w $1C2, $7080
    4616/    4178 : 0276 0080           		dc.w $276, $80
    4617/    417C : 0000 0080           		dc.w 0,	$80
    4618/    4180 : 0000                		dc.w 0
    4619/    4182 : (MACRO)             		align 2
    4619/    4182 :  (MACRO-2)                  cnop 0,2
    4619/    4182 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    4620/    4182 :                     
    4621/    4182 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4622/    4182 :                     
    4623/    4182 :                     
    4624/    4182 :                     OscillateNumDo:				; XREF: Level
    4625/    4182 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    4626/    4188 : 644E                		bcc.s	locret_41C4
    4627/    418A : 43F8 FE5E           		lea	($FFFFFE5E).w,a1
    4628/    418E : 45F9 0000 41DA      		lea	(Osc_Data2).l,a2
    4629/    4194 : 3619                		move.w	(a1)+,d3
    4630/    4196 : 720F                		moveq	#$F,d1
    4631/    4198 :                     
    4632/    4198 :                     loc_4184:
    4633/    4198 : 341A                		move.w	(a2)+,d2
    4634/    419A : 381A                		move.w	(a2)+,d4
    4635/    419C : 0303                		btst	d1,d3
    4636/    419E : 6618                		bne.s	loc_41A4
    4637/    41A0 : 3029 0002           		move.w	2(a1),d0
    4638/    41A4 : D042                		add.w	d2,d0
    4639/    41A6 : 3340 0002           		move.w	d0,2(a1)
    4640/    41AA : (MACRO)             		_add.w	d0,0(a1)
    4640/    41AA :  (MACRO-2)                          insn2op add.w, d0,0(a1)
    4640/    41AA : D169 0001                                   !add.w   d0,1+0(a1)
    4640/    41AD :                                             !org    *-1
    4640/    41AD : 00                                          !dc.b   0
    4641/    41AE : (MACRO)             		_cmp.b	0(a1),d4
    4641/    41AE :  (MACRO-2)                          insn2op cmp.b, 0(a1),d4
    4641/    41AE : B829 0001                                   !cmp.b   1+0(a1),d4
    4641/    41B1 :                                             !org    *-1
    4641/    41B1 : 00                                          !dc.b   0
    4642/    41B2 : 621A                		bhi.s	loc_41BA
    4643/    41B4 : 03C3                		bset	d1,d3
    4644/    41B6 : 6016                		bra.s	loc_41BA
    4645/    41B8 :                     ; ===========================================================================
    4646/    41B8 :                     
    4647/    41B8 :                     loc_41A4:				; XREF: OscillateNumDo
    4648/    41B8 : 3029 0002           		move.w	2(a1),d0
    4649/    41BC : 9042                		sub.w	d2,d0
    4650/    41BE : 3340 0002           		move.w	d0,2(a1)
    4651/    41C2 : (MACRO)             		_add.w	d0,0(a1)
    4651/    41C2 :  (MACRO-2)                          insn2op add.w, d0,0(a1)
    4651/    41C2 : D169 0001                                   !add.w   d0,1+0(a1)
    4651/    41C5 :                                             !org    *-1
    4651/    41C5 : 00                                          !dc.b   0
    4652/    41C6 : (MACRO)             		_cmp.b	0(a1),d4
    4652/    41C6 :  (MACRO-2)                          insn2op cmp.b, 0(a1),d4
    4652/    41C6 : B829 0001                                   !cmp.b   1+0(a1),d4
    4652/    41C9 :                                             !org    *-1
    4652/    41C9 : 00                                          !dc.b   0
    4653/    41CA : 6302                		bls.s	loc_41BA
    4654/    41CC : 0383                		bclr	d1,d3
    4655/    41CE :                     
    4656/    41CE :                     loc_41BA:
    4657/    41CE : 5849                		addq.w	#4,a1
    4658/    41D0 : 51C9 FFC6           		dbf	d1,loc_4184
    4659/    41D4 : 31C3 FE5E           		move.w	d3,($FFFFFE5E).w
    4660/    41D8 :                     
    4661/    41D8 :                     locret_41C4:
    4662/    41D8 : 4E75                		rts	
    4663/    41DA :                     ; End of function OscillateNumDo
    4664/    41DA :                     
    4665/    41DA :                     ; ===========================================================================
    4666/    41DA : 0002 0010           Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
    4667/    41DE : 0002 0018           		dc.w 2,	$18
    4668/    41E2 : 0002 0020           		dc.w 2,	$20
    4669/    41E6 : 0002 0030           		dc.w 2,	$30
    4670/    41EA : 0004 0020           		dc.w 4,	$20
    4671/    41EE : 0008 0008           		dc.w 8,	8
    4672/    41F2 : 0008 0040           		dc.w 8,	$40
    4673/    41F6 : 0004 0040           		dc.w 4,	$40
    4674/    41FA : 0002 0050           		dc.w 2,	$50
    4675/    41FE : 0002 0050           		dc.w 2,	$50
    4676/    4202 : 0002 0020           		dc.w 2,	$20
    4677/    4206 : 0003 0030           		dc.w 3,	$30
    4678/    420A : 0005 0050           		dc.w 5,	$50
    4679/    420E : 0007 0070           		dc.w 7,	$70
    4680/    4212 : 0002 0010           		dc.w 2,	$10
    4681/    4216 : 0002 0010           		dc.w 2,	$10
    4682/    421A : (MACRO)             		align 2
    4682/    421A :  (MACRO-2)                  cnop 0,2
    4682/    421A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    4683/    421A :                     
    4684/    421A :                     ; ---------------------------------------------------------------------------
    4685/    421A :                     ; Subroutine to	change object animation	variables (rings, giant	rings)
    4686/    421A :                     ; ---------------------------------------------------------------------------
    4687/    421A :                     
    4688/    421A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4689/    421A :                     
    4690/    421A :                     
    4691/    421A :                     ChangeRingFrame:			; XREF: Level
    4692/    421A : 5338 FEC0           		subq.b	#1,($FFFFFEC0).w
    4693/    421E : 6A10                		bpl.s	loc_421C
    4694/    4220 : 11FC 000B FEC0      		move.b	#$B,($FFFFFEC0).w
    4695/    4226 : 5338 FEC1           		subq.b	#1,($FFFFFEC1).w
    4696/    422A : 0238 0007 FEC1      		andi.b	#7,($FFFFFEC1).w
    4697/    4230 :                     
    4698/    4230 :                     loc_421C:
    4699/    4230 : 5338 FEC2           		subq.b	#1,($FFFFFEC2).w
    4700/    4234 : 6A10                		bpl.s	loc_4232
    4701/    4236 : 11FC 0007 FEC2      		move.b	#7,($FFFFFEC2).w
    4702/    423C : 5238 FEC3           		addq.b	#1,($FFFFFEC3).w
    4703/    4240 : 0238 0003 FEC3      		andi.b	#3,($FFFFFEC3).w
    4704/    4246 :                     
    4705/    4246 :                     loc_4232:
    4706/    4246 : 5338 FEC4           		subq.b	#1,($FFFFFEC4).w
    4707/    424A : 6A18                		bpl.s	loc_4250
    4708/    424C : 11FC 0007 FEC4      		move.b	#7,($FFFFFEC4).w
    4709/    4252 : 5238 FEC5           		addq.b	#1,($FFFFFEC5).w
    4710/    4256 : 0C38 0006 FEC5      		cmpi.b	#6,($FFFFFEC5).w
    4711/    425C : 6506                		bcs.s	loc_4250
    4712/    425E : 11FC 0000 FEC5      		move.b	#0,($FFFFFEC5).w
    4713/    4264 :                     
    4714/    4264 :                     loc_4250:
    4715/    4264 : 4A38 FEC6           		tst.b	($FFFFFEC6).w
    4716/    4268 : 671C                		beq.s	locret_4272
    4717/    426A : 7000                		moveq	#0,d0
    4718/    426C : 1038 FEC6           		move.b	($FFFFFEC6).w,d0
    4719/    4270 : D078 FEC8           		add.w	($FFFFFEC8).w,d0
    4720/    4274 : 31C0 FEC8           		move.w	d0,($FFFFFEC8).w
    4721/    4278 : EF58                		rol.w	#7,d0
    4722/    427A : 0240 0003           		andi.w	#3,d0
    4723/    427E : 11C0 FEC7           		move.b	d0,($FFFFFEC7).w
    4724/    4282 : 5338 FEC6           		subq.b	#1,($FFFFFEC6).w
    4725/    4286 :                     
    4726/    4286 :                     locret_4272:
    4727/    4286 : 4E75                		rts	
    4728/    4288 :                     ; End of function ChangeRingFrame
    4729/    4288 :                     
    4730/    4288 :                     ; ---------------------------------------------------------------------------
    4731/    4288 :                     ; End-of-act signpost pattern loading subroutine
    4732/    4288 :                     ; ---------------------------------------------------------------------------
    4733/    4288 :                     
    4734/    4288 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4735/    4288 :                     
    4736/    4288 :                     
    4737/    4288 :                     SignpostArtLoad:			; XREF: Level
    4738/    4288 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	being used?
    4739/    428C : 6600 0030           		bne.w	Signpost_Exit	; if yes, branch
    4740/    4290 : 0C38 0002 FE11      		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
    4741/    4296 : 6726                		beq.s	Signpost_Exit	; if yes, branch
    4742/    4298 : 3038 F700           		move.w	($FFFFF700).w,d0
    4743/    429C : 3238 F72A           		move.w	($FFFFF72A).w,d1
    4744/    42A0 : 0441 0100           		subi.w	#$100,d1
    4745/    42A4 : B041                		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
    4746/    42A6 : 6D16                		blt.s	Signpost_Exit	; if not, branch
    4747/    42A8 : 4A38 FE1E           		tst.b	($FFFFFE1E).w
    4748/    42AC : 6710                		beq.s	Signpost_Exit
    4749/    42AE : B278 F728           		cmp.w	($FFFFF728).w,d1
    4750/    42B2 : 670A                		beq.s	Signpost_Exit
    4751/    42B4 : 31C1 F728           		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
    4752/    42B8 : 7012                		moveq	#$12,d0
    4753/    42BA : 6000 D2F6           		bra.w	LoadPLC2	; load signpost	patterns
    4754/    42BE :                     ; ===========================================================================
    4755/    42BE :                     
    4756/    42BE :                     Signpost_Exit:
    4757/    42BE : 4E75                		rts	
    4758/    42C0 :                     ; End of function SignpostArtLoad
    4759/    42C0 :                     
    4760/    42C0 :                     ; ===========================================================================
    4761/    42C0 :                     Demo_GHZ:	binclude	demodata/i_ghz.bin
    4762/    4340 :                     Demo_MZ:	binclude	demodata/i_mz.bin
    4763/    4470 :                     Demo_SYZ:	binclude	demodata/i_syz.bin
    4764/    44F0 :                     Demo_SS:	binclude	demodata/i_ss.bin
    4765/    45F0 :                     ; ===========================================================================
    4766/    45F0 :                     
    4767/    45F0 :                     ; ---------------------------------------------------------------------------
    4768/    45F0 :                     ; Special Stage
    4769/    45F0 :                     ; ---------------------------------------------------------------------------
    4770/    45F0 :                     
    4771/    45F0 :                     SpecialStage:				; XREF: GameModeArray
    4772/    45F0 : 303C 00CA           		move.w	#$CA,d0
    4773/    45F4 : 6100 CDA6           		bsr.w	PlaySound_Special ; play special stage entry sound
    4774/    45F8 : 6100 D992           		bsr.w	Pal_MakeFlash
    4775/    45FC : 46FC 2700           		move	#$2700,sr
    4776/    4600 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    4777/    4606 : 3CBC 8B03           		move.w	#$8B03,(a6)
    4778/    460A : 3CBC 8004           		move.w	#$8004,(a6)
    4779/    460E : 31FC 8AAF F624      		move.w	#$8AAF,($FFFFF624).w
    4780/    4614 : 3CBC 9011           		move.w	#$9011,(a6)
    4781/    4618 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    4782/    461C : 0200 00BF           		andi.b	#$BF,d0
    4783/    4620 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    4784/    4626 : 6100 CC9C           		bsr.w	ClearScreen
    4785/    462A : 46FC 2300           		move	#$2300,sr
    4786/    462E : 4BF9 00C0 0004      		lea	($C00004).l,a5
    4787/    4634 : 3ABC 8F01           		move.w	#$8F01,(a5)
    4788/    4638 : 2ABC 946F 93FF      		move.l	#$946F93FF,(a5)
    4789/    463E : 3ABC 9780           		move.w	#$9780,(a5)
    4790/    4642 : 2ABC 5000 0081      		move.l	#$50000081,(a5)
    4791/    4648 : 33FC 0000 00C0 0000 		move.w	#0,($C00000).l
    4792/    4650 :                     
    4793/    4650 :                     loc_463C:
    4794/    4650 : 3215                		move.w	(a5),d1
    4795/    4652 : 0801 0001           		btst	#1,d1
    4796/    4656 : 66F8                		bne.s	loc_463C
    4797/    4658 : 3ABC 8F02           		move.w	#$8F02,(a5)
    4798/    465C : 6100 0252           		bsr.w	SS_BGLoad
    4799/    4660 : 7014                		moveq	#$14,d0
    4800/    4662 : 6100 D088           		bsr.w	RunPLC_ROM	; load special stage patterns
    4801/    4666 : 43F8 D000           		lea	($FFFFD000).w,a1
    4802/    466A : 7000                		moveq	#0,d0
    4803/    466C : 323C 07FF           		move.w	#$7FF,d1
    4804/    4670 :                     
    4805/    4670 :                     SS_ClrObjRam:
    4806/    4670 : 22C0                		move.l	d0,(a1)+
    4807/    4672 : 51C9 FFFC           		dbf	d1,SS_ClrObjRam	; clear	the object RAM
    4808/    4676 :                     
    4809/    4676 : 43F8 F700           		lea	($FFFFF700).w,a1
    4810/    467A : 7000                		moveq	#0,d0
    4811/    467C : 323C 003F           		move.w	#$3F,d1
    4812/    4680 :                     
    4813/    4680 :                     SS_ClrRam:
    4814/    4680 : 22C0                		move.l	d0,(a1)+
    4815/    4682 : 51C9 FFFC           		dbf	d1,SS_ClrRam	; clear	variables
    4816/    4686 :                     
    4817/    4686 : 43F8 FE60           		lea	($FFFFFE60).w,a1
    4818/    468A : 7000                		moveq	#0,d0
    4819/    468C : 323C 0027           		move.w	#$27,d1
    4820/    4690 :                     
    4821/    4690 :                     SS_ClrRam2:
    4822/    4690 : 22C0                		move.l	d0,(a1)+
    4823/    4692 : 51C9 FFFC           		dbf	d1,SS_ClrRam2	; clear	variables
    4824/    4696 :                     
    4825/    4696 : 43F8 AA00           		lea	($FFFFAA00).w,a1
    4826/    469A : 7000                		moveq	#0,d0
    4827/    469C : 323C 007F           		move.w	#$7F,d1
    4828/    46A0 :                     
    4829/    46A0 :                     SS_ClrNemRam:
    4830/    46A0 : 22C0                		move.l	d0,(a1)+
    4831/    46A2 : 51C9 FFFC           		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
    4832/    46A6 :                     
    4833/    46A6 : 4238 F64E           		clr.b	($FFFFF64E).w
    4834/    46AA : 4278 FE02           		clr.w	($FFFFFE02).w
    4835/    46AE : 700A                		moveq	#$A,d0
    4836/    46B0 : 6100 DA5A           		bsr.w	PalLoad1	; load special stage pallet
    4837/    46B4 : 4EB9 0001 B916      		jsr	(SS_Load).l
    4838/    46BA : 21FC 0000 0000 F700 		move.l	#0,($FFFFF700).w
    4839/    46C2 : 21FC 0000 0000 F704 		move.l	#0,($FFFFF704).w
    4840/    46CA : 11FC 0009 D000      		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
    4841/    46D0 : 6100 02A4           		bsr.w	PalCycle_SS
    4842/    46D4 : 4278 F780           		clr.w	($FFFFF780).w	; set stage angle to "upright"
    4843/    46D8 : 31FC 0040 F782      		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
    4844/    46DE : 303C 0089           		move.w	#$89,d0
    4845/    46E2 : 6100 CCB2           		bsr.w	PlaySound	; play special stage BG	music
    4846/    46E6 : 31FC 0000 F790      		move.w	#0,($FFFFF790).w
    4847/    46EC : 43F9 0000 4094      		lea	(Demo_Index).l,a1
    4848/    46F2 : 7006                		moveq	#6,d0
    4849/    46F4 : E548                		lsl.w	#2,d0
    4850/    46F6 : 2271 0000           		movea.l	(a1,d0.w),a1
    4851/    46FA : 11E9 0001 F792      		move.b	1(a1),($FFFFF792).w
    4852/    4700 : 5338 F792           		subq.b	#1,($FFFFF792).w
    4853/    4704 : 4278 FE20           		clr.w	($FFFFFE20).w
    4854/    4708 : 4238 FE1B           		clr.b	($FFFFFE1B).w
    4855/    470C : 31FC 0000 FE08      		move.w	#0,($FFFFFE08).w
    4856/    4712 : 31FC 0708 F614      		move.w	#1800,($FFFFF614).w
    4857/    4718 : 4A38 FFE2           		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
    4858/    471C : 670E                		beq.s	SS_NoDebug	; if not, branch
    4859/    471E : 0838 0006 F604      		btst	#6,($FFFFF604).w ; is A	button pressed?
    4860/    4724 : 6706                		beq.s	SS_NoDebug	; if not, branch
    4861/    4726 : 11FC 0001 FFFA      		move.b	#1,($FFFFFFFA).w ; enable debug	mode
    4862/    472C :                     
    4863/    472C :                     SS_NoDebug:
    4864/    472C : 3038 F60C           		move.w	($FFFFF60C).w,d0
    4865/    4730 : 0000 0040           		ori.b	#$40,d0
    4866/    4734 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    4867/    473A : 6100 D7A4           		bsr.w	Pal_MakeWhite
    4868/    473E :                     
    4869/    473E :                     ; ---------------------------------------------------------------------------
    4870/    473E :                     ; Main Special Stage loop
    4871/    473E :                     ; ---------------------------------------------------------------------------
    4872/    473E :                     
    4873/    473E :                     SS_MainLoop:
    4874/    473E : 6100 CC68           		bsr.w	PauseGame
    4875/    4742 : 11FC 000A F62A      		move.b	#$A,($FFFFF62A).w
    4876/    4748 : 6100 E26E           		bsr.w	DelayProgram
    4877/    474C : 6100 F896           		bsr.w	MoveSonicInDemo
    4878/    4750 : 31F8 F604 F602      		move.w	($FFFFF604).w,($FFFFF602).w
    4879/    4756 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    4880/    475C : 4EB9 0000 D768      		jsr	(BuildSprites).l
    4881/    4762 : 4EB9 0001 B3E8      		jsr	(SS_ShowLayout).l
    4882/    4768 : 6100 048E           		bsr.w	SS_BGAnimate
    4883/    476C : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    4884/    4770 : 6708                		beq.s	SS_ChkEnd	; if not, branch
    4885/    4772 : 4A78 F614           		tst.w	($FFFFF614).w	; is there time	left on	the demo?
    4886/    4776 : 6700 0130           		beq.w	SS_ToSegaScreen	; if not, branch
    4887/    477A :                     
    4888/    477A :                     SS_ChkEnd:
    4889/    477A : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
    4890/    4780 : 6700 FFBC           		beq.w	SS_MainLoop	; if yes, branch
    4891/    4784 :                     
    4892/    4784 : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    4893/    4788 : 6600 011E           		bne.w	SS_ToSegaScreen	; if yes, branch
    4894/    478C : 11FC 000C F600      		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
    4895/    4792 : 0C78 0503 FE10      		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
    4896/    4798 : 6504                		bcs.s	SS_End		; if not, branch
    4897/    479A : 4278 FE10           		clr.w	($FFFFFE10).w	; set to GHZ1
    4898/    479E :                     
    4899/    479E :                     SS_End:
    4900/    479E : 31FC 003C F614      		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
    4901/    47A4 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    4902/    47AA : 4278 F794           		clr.w	($FFFFF794).w
    4903/    47AE :                     
    4904/    47AE :                     SS_EndLoop:
    4905/    47AE : 11FC 0016 F62A      		move.b	#$16,($FFFFF62A).w
    4906/    47B4 : 6100 E202           		bsr.w	DelayProgram
    4907/    47B8 : 6100 F82A           		bsr.w	MoveSonicInDemo
    4908/    47BC : 31F8 F604 F602      		move.w	($FFFFF604).w,($FFFFF602).w
    4909/    47C2 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    4910/    47C8 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    4911/    47CE : 4EB9 0001 B3E8      		jsr	(SS_ShowLayout).l
    4912/    47D4 : 6100 0422           		bsr.w	SS_BGAnimate
    4913/    47D8 : 5378 F794           		subq.w	#1,($FFFFF794).w
    4914/    47DC : 6A0A                		bpl.s	loc_47D4
    4915/    47DE : 31FC 0002 F794      		move.w	#2,($FFFFF794).w
    4916/    47E4 : 6100 D7C6           		bsr.w	Pal_ToWhite
    4917/    47E8 :                     
    4918/    47E8 :                     loc_47D4:
    4919/    47E8 : 4A78 F614           		tst.w	($FFFFF614).w
    4920/    47EC : 66C0                		bne.s	SS_EndLoop
    4921/    47EE :                     
    4922/    47EE : 46FC 2700           		move	#$2700,sr
    4923/    47F2 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    4924/    47F8 : 3CBC 8230           		move.w	#$8230,(a6)
    4925/    47FC : 3CBC 8407           		move.w	#$8407,(a6)
    4926/    4800 : 3CBC 9001           		move.w	#$9001,(a6)
    4927/    4804 : 6100 CABE           		bsr.w	ClearScreen
    4928/    4808 : 23FC 7000 0002 00C0 		move.l	#$70000002,($C00004).l
                    0004                
    4929/    4812 : 41F9 0003 9B54      		lea	(Nem_TitleCard).l,a0 ; load title card patterns
    4930/    4818 : 6100 CC26           		bsr.w	NemDec
    4931/    481C : 4EB9 0001 CAB8      		jsr	(Hud_Base).l
    4932/    4822 : 46FC 2300           		move	#$2300,sr
    4933/    4826 : 7011                		moveq	#$11,d0
    4934/    4828 : 6100 D8FE           		bsr.w	PalLoad2	; load results screen pallet
    4935/    482C : 7000                		moveq	#0,d0
    4936/    482E : 6100 CD82           		bsr.w	LoadPLC2
    4937/    4832 : 701B                		moveq	#$1B,d0
    4938/    4834 : 6100 CD4A           		bsr.w	LoadPLC		; load results screen patterns
    4939/    4838 : 11FC 0001 FE1F      		move.b	#1,($FFFFFE1F).w ; update score	counter
    4940/    483E : 11FC 0001 F7D6      		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
    4941/    4844 : 3038 FE20           		move.w	($FFFFFE20).w,d0
    4942/    4848 : C0FC 000A           		mulu.w	#10,d0		; multiply rings by 10
    4943/    484C : 31C0 F7D4           		move.w	d0,($FFFFF7D4).w ; set rings bonus
    4944/    4850 : 303C 008E           		move.w	#$8E,d0
    4945/    4854 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play end-of-level music
    4946/    485A : 43F8 D000           		lea	($FFFFD000).w,a1
    4947/    485E : 7000                		moveq	#0,d0
    4948/    4860 : 323C 07FF           		move.w	#$7FF,d1
    4949/    4864 :                     
    4950/    4864 :                     SS_EndClrObjRam:
    4951/    4864 : 22C0                		move.l	d0,(a1)+
    4952/    4866 : 51C9 FFFC           		dbf	d1,SS_EndClrObjRam ; clear object RAM
    4953/    486A :                     
    4954/    486A : 11FC 007E D5C0      		move.b	#$7E,($FFFFD5C0).w ; load results screen object
    4955/    4870 :                     
    4956/    4870 :                     SS_NormalExit:
    4957/    4870 : 6100 CB36           		bsr.w	PauseGame
    4958/    4874 : 11FC 000C F62A      		move.b	#$C,($FFFFF62A).w
    4959/    487A : 6100 E13C           		bsr.w	DelayProgram
    4960/    487E : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    4961/    4884 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    4962/    488A : 6100 CD60           		bsr.w	RunPLC_RAM
    4963/    488E : 4A78 FE02           		tst.w	($FFFFFE02).w
    4964/    4892 : 67DC                		beq.s	SS_NormalExit
    4965/    4894 : 4AB8 F680           		tst.l	($FFFFF680).w
    4966/    4898 : 66D6                		bne.s	SS_NormalExit
    4967/    489A : 303C 00CA           		move.w	#$CA,d0
    4968/    489E : 6100 CAFC           		bsr.w	PlaySound_Special ; play special stage exit sound
    4969/    48A2 : 6100 D6E8           		bsr.w	Pal_MakeFlash
    4970/    48A6 : 4E75                		rts	
    4971/    48A8 :                     ; ===========================================================================
    4972/    48A8 :                     
    4973/    48A8 :                     SS_ToSegaScreen:
    4974/    48A8 : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
    4975/    48AE : 4E75                		rts
    4976/    48B0 :                     
    4977/    48B0 :                     ; ---------------------------------------------------------------------------
    4978/    48B0 :                     ; Special stage	background loading subroutine
    4979/    48B0 :                     ; ---------------------------------------------------------------------------
    4980/    48B0 :                     
    4981/    48B0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4982/    48B0 :                     
    4983/    48B0 :                     
    4984/    48B0 :                     SS_BGLoad:				; XREF: SpecialStage
    4985/    48B0 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    4986/    48B6 : 41F9 0002 DD16      		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
    4987/    48BC : 303C 4051           		move.w	#$4051,d0
    4988/    48C0 : 6100 CE5C           		bsr.w	EniDec
    4989/    48C4 : 263C 5000 0001      		move.l	#$50000001,d3
    4990/    48CA : 45F9 00FF 0080      		lea	($FF0080).l,a2
    4991/    48D0 : 7E06                		moveq	#6,d7
    4992/    48D2 :                     
    4993/    48D2 :                     loc_48BE:
    4994/    48D2 : 2003                		move.l	d3,d0
    4995/    48D4 : 7C03                		moveq	#3,d6
    4996/    48D6 : 7800                		moveq	#0,d4
    4997/    48D8 : 0C47 0003           		cmpi.w	#3,d7
    4998/    48DC : 6402                		bcc.s	loc_48CC
    4999/    48DE : 7801                		moveq	#1,d4
    5000/    48E0 :                     
    5001/    48E0 :                     loc_48CC:
    5002/    48E0 : 7A07                		moveq	#7,d5
    5003/    48E2 :                     
    5004/    48E2 :                     loc_48CE:
    5005/    48E2 : 224A                		movea.l	a2,a1
    5006/    48E4 : 0A04 0001           		eori.b	#1,d4
    5007/    48E8 : 660C                		bne.s	loc_48E2
    5008/    48EA : 0C47 0006           		cmpi.w	#6,d7
    5009/    48EE : 6616                		bne.s	loc_48F2
    5010/    48F0 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    5011/    48F6 :                     
    5012/    48F6 :                     loc_48E2:
    5013/    48F6 : 48E7 F800           		movem.l	d0-d4,-(sp)
    5014/    48FA : 7207                		moveq	#7,d1
    5015/    48FC : 7407                		moveq	#7,d2
    5016/    48FE : 6100 CB20           		bsr.w	ShowVDPGraphics
    5017/    4902 : 4CDF 001F           		movem.l	(sp)+,d0-d4
    5018/    4906 :                     
    5019/    4906 :                     loc_48F2:
    5020/    4906 : 0680 0010 0000      		addi.l	#$100000,d0
    5021/    490C : 51CD FFD4           		dbf	d5,loc_48CE
    5022/    4910 : 0680 0380 0000      		addi.l	#$3800000,d0
    5023/    4916 : 0A04 0001           		eori.b	#1,d4
    5024/    491A : 51CE FFC4           		dbf	d6,loc_48CC
    5025/    491E : 0683 1000 0000      		addi.l	#$10000000,d3
    5026/    4924 : 6A0A                		bpl.s	loc_491C
    5027/    4926 : 4843                		swap	d3
    5028/    4928 : 0683 0000 C000      		addi.l	#$C000,d3
    5029/    492E : 4843                		swap	d3
    5030/    4930 :                     
    5031/    4930 :                     loc_491C:
    5032/    4930 : D4FC 0080           		adda.w	#$80,a2
    5033/    4934 : 51CF FF9C           		dbf	d7,loc_48BE
    5034/    4938 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    5035/    493E : 41F9 0002 EADA      		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
    5036/    4944 : 303C 4000           		move.w	#$4000,d0
    5037/    4948 : 6100 CDD4           		bsr.w	EniDec
    5038/    494C : 43F9 00FF 0000      		lea	($FF0000).l,a1
    5039/    4952 : 203C 4000 0003      		move.l	#$40000003,d0
    5040/    4958 : 723F                		moveq	#$3F,d1
    5041/    495A : 741F                		moveq	#$1F,d2
    5042/    495C : 6100 CAC2           		bsr.w	ShowVDPGraphics
    5043/    4960 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    5044/    4966 : 203C 5000 0003      		move.l	#$50000003,d0
    5045/    496C : 723F                		moveq	#$3F,d1
    5046/    496E : 743F                		moveq	#$3F,d2
    5047/    4970 : 6100 CAAE           		bsr.w	ShowVDPGraphics
    5048/    4974 : 4E75                		rts	
    5049/    4976 :                     ; End of function SS_BGLoad
    5050/    4976 :                     
    5051/    4976 :                     ; ---------------------------------------------------------------------------
    5052/    4976 :                     ; Pallet cycling routine - special stage
    5053/    4976 :                     ; ---------------------------------------------------------------------------
    5054/    4976 :                     
    5055/    4976 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    5056/    4976 :                     
    5057/    4976 :                     
    5058/    4976 :                     PalCycle_SS:				; XREF: loc_DA6; SpecialStage
    5059/    4976 : 4A78 F63A           		tst.w	($FFFFF63A).w
    5060/    497A : 667E                		bne.s	locret_49E6
    5061/    497C : 5378 F79C           		subq.w	#1,($FFFFF79C).w
    5062/    4980 : 6A78                		bpl.s	locret_49E6
    5063/    4982 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    5064/    4988 : 3038 F79A           		move.w	($FFFFF79A).w,d0
    5065/    498C : 5278 F79A           		addq.w	#1,($FFFFF79A).w
    5066/    4990 : 0240 001F           		andi.w	#$1F,d0
    5067/    4994 : E548                		lsl.w	#2,d0
    5068/    4996 : 41F9 0000 4A50      		lea	(byte_4A3C).l,a0
    5069/    499C : D0C0                		adda.w	d0,a0
    5070/    499E : 1018                		move.b	(a0)+,d0
    5071/    49A0 : 6A04                		bpl.s	loc_4992
    5072/    49A2 : 303C 01FF           		move.w	#$1FF,d0
    5073/    49A6 :                     
    5074/    49A6 :                     loc_4992:
    5075/    49A6 : 31C0 F79C           		move.w	d0,($FFFFF79C).w
    5076/    49AA : 7000                		moveq	#0,d0
    5077/    49AC : 1018                		move.b	(a0)+,d0
    5078/    49AE : 31C0 F7A0           		move.w	d0,($FFFFF7A0).w
    5079/    49B2 : 43F9 0000 4AD0      		lea	(byte_4ABC).l,a1
    5080/    49B8 : 43F1 0000           		lea	(a1,d0.w),a1
    5081/    49BC : 303C 8200           		move.w	#-$7E00,d0
    5082/    49C0 : 1019                		move.b	(a1)+,d0
    5083/    49C2 : 3C80                		move.w	d0,(a6)
    5084/    49C4 : 11D1 F616           		move.b	(a1),($FFFFF616).w
    5085/    49C8 : 303C 8400           		move.w	#-$7C00,d0
    5086/    49CC : 1018                		move.b	(a0)+,d0
    5087/    49CE : 3C80                		move.w	d0,(a6)
    5088/    49D0 : 23FC 4000 0010 00C0 		move.l	#$40000010,($C00004).l
                    0004                
    5089/    49DA : 23F8 F616 00C0 0000 		move.l	($FFFFF616).w,($C00000).l
    5090/    49E2 : 7000                		moveq	#0,d0
    5091/    49E4 : 1018                		move.b	(a0)+,d0
    5092/    49E6 : 6B14                		bmi.s	loc_49E8
    5093/    49E8 : 43F9 0000 4ADE      		lea	(Pal_SSCyc1).l,a1
    5094/    49EE : D2C0                		adda.w	d0,a1
    5095/    49F0 : 45F8 FB4E           		lea	($FFFFFB4E).w,a2
    5096/    49F4 : 24D9                		move.l	(a1)+,(a2)+
    5097/    49F6 : 24D9                		move.l	(a1)+,(a2)+
    5098/    49F8 : 24D9                		move.l	(a1)+,(a2)+
    5099/    49FA :                     
    5100/    49FA :                     locret_49E6:
    5101/    49FA : 4E75                		rts	
    5102/    49FC :                     ; ===========================================================================
    5103/    49FC :                     
    5104/    49FC :                     loc_49E8:				; XREF: PalCycle_SS
    5105/    49FC : 3238 F79E           		move.w	($FFFFF79E).w,d1
    5106/    4A00 : 0C40 008A           		cmpi.w	#$8A,d0
    5107/    4A04 : 6502                		bcs.s	loc_49F4
    5108/    4A06 : 5241                		addq.w	#1,d1
    5109/    4A08 :                     
    5110/    4A08 :                     loc_49F4:
    5111/    4A08 : C2FC 002A           		mulu.w	#$2A,d1
    5112/    4A0C : 43F9 0000 4B26      		lea	(Pal_SSCyc2).l,a1
    5113/    4A12 : D2C1                		adda.w	d1,a1
    5114/    4A14 : 0240 007F           		andi.w	#$7F,d0
    5115/    4A18 : 0880 0000           		bclr	#0,d0
    5116/    4A1C : 670E                		beq.s	loc_4A18
    5117/    4A1E : 45F8 FB6E           		lea	($FFFFFB6E).w,a2
    5118/    4A22 : 24D1                		move.l	(a1),(a2)+
    5119/    4A24 : 24E9 0004           		move.l	4(a1),(a2)+
    5120/    4A28 : 24E9 0008           		move.l	8(a1),(a2)+
    5121/    4A2C :                     
    5122/    4A2C :                     loc_4A18:
    5123/    4A2C : D2FC 000C           		adda.w	#$C,a1
    5124/    4A30 : 45F8 FB5A           		lea	($FFFFFB5A).w,a2
    5125/    4A34 : 0C40 000A           		cmpi.w	#$A,d0
    5126/    4A38 : 6508                		bcs.s	loc_4A2E
    5127/    4A3A : 0440 000A           		subi.w	#$A,d0
    5128/    4A3E : 45F8 FB7A           		lea	($FFFFFB7A).w,a2
    5129/    4A42 :                     
    5130/    4A42 :                     loc_4A2E:
    5131/    4A42 : 3200                		move.w	d0,d1
    5132/    4A44 : D040                		add.w	d0,d0
    5133/    4A46 : D041                		add.w	d1,d0
    5134/    4A48 : D2C0                		adda.w	d0,a1
    5135/    4A4A : 24D9                		move.l	(a1)+,(a2)+
    5136/    4A4C : 34D9                		move.w	(a1)+,(a2)+
    5137/    4A4E : 4E75                		rts	
    5138/    4A50 :                     ; End of function PalCycle_SS
    5139/    4A50 :                     
    5140/    4A50 :                     ; ===========================================================================
    5141/    4A50 : 0300 0792 0300 0790 byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
                    0300 078E 0300 078C 
    5142/    4A60 :                     					; XREF: PalCycle_SS
    5143/    4A60 : 0300 078B 0300 0780 		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
                    0300 0782 0300 0784 
    5144/    4A70 : 0300 0786 0300 0788 		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
                    0708 0700 070A 070C 
    5145/    4A80 : FF0C 0718 FF0C 0718 		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
                    070A 070C 0708 0700 
    5146/    4A90 : 0300 0688 0300 0686 		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
                    0300 0684 0300 0682 
    5147/    4AA0 : 0300 0681 0300 068A 		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
                    0300 068C 0300 068E 
    5148/    4AB0 : 0300 0690 0300 0692 		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
                    0702 0624 0704 0630 
    5149/    4AC0 : FF06 063C FF06 063C 		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
                    0704 0630 0702 0624 
    5150/    4AD0 : (MACRO)             		align 2
    5150/    4AD0 :  (MACRO-2)                  cnop 0,2
    5150/    4AD0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    5151/    4AD0 : 1001 1800 1801 2000 byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
                    2001 2800 2801      
    5152/    4ADE :                     					; XREF: PalCycle_SS
    5153/    4ADE : (MACRO)             		align 2
    5153/    4ADE :  (MACRO-2)                  cnop 0,2
    5153/    4ADE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    5154/    4ADE :                     
    5155/    4ADE :                     Pal_SSCyc1:	binclude	pallet/c_ss_1.bin
    5156/    4B26 : (MACRO)             		align 2
    5156/    4B26 :  (MACRO-2)                  cnop 0,2
    5156/    4B26 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    5157/    4B26 :                     Pal_SSCyc2:	binclude	pallet/c_ss_2.bin
    5158/    4BF8 : (MACRO)             		align 2
    5158/    4BF8 :  (MACRO-2)                  cnop 0,2
    5158/    4BF8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    5159/    4BF8 :                     
    5160/    4BF8 :                     ; ---------------------------------------------------------------------------
    5161/    4BF8 :                     ; Subroutine to	make the special stage background animated
    5162/    4BF8 :                     ; ---------------------------------------------------------------------------
    5163/    4BF8 :                     
    5164/    4BF8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    5165/    4BF8 :                     
    5166/    4BF8 :                     
    5167/    4BF8 :                     SS_BGAnimate:				; XREF: SpecialStage
    5168/    4BF8 : 3038 F7A0           		move.w	($FFFFF7A0).w,d0
    5169/    4BFC : 660C                		bne.s	loc_4BF6
    5170/    4BFE : 31FC 0000 F70C      		move.w	#0,($FFFFF70C).w
    5171/    4C04 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    5172/    4C0A :                     
    5173/    4C0A :                     loc_4BF6:
    5174/    4C0A : 0C40 0008           		cmpi.w	#8,d0
    5175/    4C0E : 6452                		bcc.s	loc_4C4E
    5176/    4C10 : 0C40 0006           		cmpi.w	#6,d0
    5177/    4C14 : 660E                		bne.s	loc_4C10
    5178/    4C16 : 5278 F718           		addq.w	#1,($FFFFF718).w
    5179/    4C1A : 5278 F70C           		addq.w	#1,($FFFFF70C).w
    5180/    4C1E : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    5181/    4C24 :                     
    5182/    4C24 :                     loc_4C10:
    5183/    4C24 : 7000                		moveq	#0,d0
    5184/    4C26 : 3038 F708           		move.w	($FFFFF708).w,d0
    5185/    4C2A : 4440                		neg.w	d0
    5186/    4C2C : 4840                		swap	d0
    5187/    4C2E : 43F9 0000 4CE0      		lea	(byte_4CCC).l,a1
    5188/    4C34 : 47F8 AA00           		lea	($FFFFAA00).w,a3
    5189/    4C38 : 7609                		moveq	#9,d3
    5190/    4C3A :                     
    5191/    4C3A :                     loc_4C26:
    5192/    4C3A : 302B 0002           		move.w	2(a3),d0
    5193/    4C3E : 6100 DDAA           		bsr.w	CalcSine
    5194/    4C42 : 7400                		moveq	#0,d2
    5195/    4C44 : 1419                		move.b	(a1)+,d2
    5196/    4C46 : C1C2                		muls.w	d2,d0
    5197/    4C48 : E080                		asr.l	#8,d0
    5198/    4C4A : 36C0                		move.w	d0,(a3)+
    5199/    4C4C : 1419                		move.b	(a1)+,d2
    5200/    4C4E : 4882                		ext.w	d2
    5201/    4C50 : D55B                		add.w	d2,(a3)+
    5202/    4C52 : 51CB FFE6           		dbf	d3,loc_4C26
    5203/    4C56 : 47F8 AA00           		lea	($FFFFAA00).w,a3
    5204/    4C5A : 45F9 0000 4CCC      		lea	(byte_4CB8).l,a2
    5205/    4C60 : 6030                		bra.s	loc_4C7E
    5206/    4C62 :                     ; ===========================================================================
    5207/    4C62 :                     
    5208/    4C62 :                     loc_4C4E:				; XREF: SS_BGAnimate
    5209/    4C62 : 0C40 000C           		cmpi.w	#$C,d0
    5210/    4C66 : 6620                		bne.s	loc_4C74
    5211/    4C68 : 5378 F718           		subq.w	#1,($FFFFF718).w
    5212/    4C6C : 47F8 AB00           		lea	($FFFFAB00).w,a3
    5213/    4C70 : 243C 0001 8000      		move.l	#$18000,d2
    5214/    4C76 : 7206                		moveq	#6,d1
    5215/    4C78 :                     
    5216/    4C78 :                     loc_4C64:
    5217/    4C78 : 2013                		move.l	(a3),d0
    5218/    4C7A : 9082                		sub.l	d2,d0
    5219/    4C7C : 26C0                		move.l	d0,(a3)+
    5220/    4C7E : 0482 0000 2000      		subi.l	#$2000,d2
    5221/    4C84 : 51C9 FFF2           		dbf	d1,loc_4C64
    5222/    4C88 :                     
    5223/    4C88 :                     loc_4C74:
    5224/    4C88 : 47F8 AB00           		lea	($FFFFAB00).w,a3
    5225/    4C8C : 45F9 0000 4CD8      		lea	(byte_4CC4).l,a2
    5226/    4C92 :                     
    5227/    4C92 :                     loc_4C7E:
    5228/    4C92 : 43F8 CC00           		lea	($FFFFCC00).w,a1
    5229/    4C96 : 3038 F718           		move.w	($FFFFF718).w,d0
    5230/    4C9A : 4440                		neg.w	d0
    5231/    4C9C : 4840                		swap	d0
    5232/    4C9E : 7600                		moveq	#0,d3
    5233/    4CA0 : 161A                		move.b	(a2)+,d3
    5234/    4CA2 : 3438 F70C           		move.w	($FFFFF70C).w,d2
    5235/    4CA6 : 4442                		neg.w	d2
    5236/    4CA8 : 0242 00FF           		andi.w	#$FF,d2
    5237/    4CAC : E54A                		lsl.w	#2,d2
    5238/    4CAE :                     
    5239/    4CAE :                     loc_4C9A:
    5240/    4CAE : 301B                		move.w	(a3)+,d0
    5241/    4CB0 : 544B                		addq.w	#2,a3
    5242/    4CB2 : 7200                		moveq	#0,d1
    5243/    4CB4 : 121A                		move.b	(a2)+,d1
    5244/    4CB6 : 5341                		subq.w	#1,d1
    5245/    4CB8 :                     
    5246/    4CB8 :                     loc_4CA4:
    5247/    4CB8 : 2380 2000           		move.l	d0,(a1,d2.w)
    5248/    4CBC : 5842                		addq.w	#4,d2
    5249/    4CBE : 0242 03FC           		andi.w	#$3FC,d2
    5250/    4CC2 : 51C9 FFF4           		dbf	d1,loc_4CA4
    5251/    4CC6 : 51CB FFE6           		dbf	d3,loc_4C9A
    5252/    4CCA : 4E75                		rts	
    5253/    4CCC :                     ; End of function SS_BGAnimate
    5254/    4CCC :                     
    5255/    4CCC :                     ; ===========================================================================
    5256/    4CCC : 0928 1810 2818 1030 byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
                    1808 1000           
    5257/    4CD8 : (MACRO)             		align 2
    5257/    4CD8 :  (MACRO-2)                  cnop 0,2
    5257/    4CD8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    5258/    4CD8 : 0630 3030 2818 1818 byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
    5259/    4CE0 : (MACRO)             		align 2
    5259/    4CE0 :  (MACRO-2)                  cnop 0,2
    5259/    4CE0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    5260/    4CE0 : 0802 04FF 0203 08FF byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
                    0402 0203 08FD 0402 
                    0203 02FF           
    5261/    4CF4 : (MACRO)             		align 2
    5261/    4CF4 :  (MACRO-2)                  cnop 0,2
    5261/    4CF4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    5262/    4CF4 :                     					; XREF: SS_BGAnimate
    5263/    4CF4 :                     ; ===========================================================================
    5264/    4CF4 :                     
    5265/    4CF4 :                     ; ---------------------------------------------------------------------------
    5266/    4CF4 :                     ; Continue screen
    5267/    4CF4 :                     ; ---------------------------------------------------------------------------
    5268/    4CF4 :                     
    5269/    4CF4 :                     ContinueScreen:				; XREF: GameModeArray
    5270/    4CF4 : 6100 D16C           		bsr.w	Pal_FadeFrom
    5271/    4CF8 : 46FC 2700           		move	#$2700,sr
    5272/    4CFC : 3038 F60C           		move.w	($FFFFF60C).w,d0
    5273/    4D00 : 0200 00BF           		andi.b	#$BF,d0
    5274/    4D04 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    5275/    4D0A : 4DF9 00C0 0004      		lea	($C00004).l,a6
    5276/    4D10 : 3CBC 8004           		move.w	#$8004,(a6)
    5277/    4D14 : 3CBC 8700           		move.w	#$8700,(a6)
    5278/    4D18 : 6100 C5AA           		bsr.w	ClearScreen
    5279/    4D1C : 43F8 D000           		lea	($FFFFD000).w,a1
    5280/    4D20 : 7000                		moveq	#0,d0
    5281/    4D22 : 323C 07FF           		move.w	#$7FF,d1
    5282/    4D26 :                     
    5283/    4D26 :                     Cont_ClrObjRam:
    5284/    4D26 : 22C0                		move.l	d0,(a1)+
    5285/    4D28 : 51C9 FFFC           		dbf	d1,Cont_ClrObjRam ; clear object RAM
    5286/    4D2C :                     
    5287/    4D2C : 23FC 7000 0002 00C0 		move.l	#$70000002,($C00004).l
                    0004                
    5288/    4D36 : 41F9 0003 9B54      		lea	(Nem_TitleCard).l,a0 ; load title card patterns
    5289/    4D3C : 6100 C702           		bsr.w	NemDec
    5290/    4D40 : 23FC 6000 0002 00C0 		move.l	#$60000002,($C00004).l
                    0004                
    5291/    4D4A : 41F9 0003 BD70      		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
    5292/    4D50 : 6100 C6EE           		bsr.w	NemDec
    5293/    4D54 : 23FC 6A20 0002 00C0 		move.l	#$6A200002,($C00004).l
                    0004                
    5294/    4D5E : 41F9 0003 C020      		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
    5295/    4D64 : 6100 C6DA           		bsr.w	NemDec
    5296/    4D68 : 720A                		moveq	#10,d1
    5297/    4D6A : 4EB9 0001 CBCE      		jsr	(ContScrCounter).l	; run countdown	(start from 10)
    5298/    4D70 : 7012                		moveq	#$12,d0
    5299/    4D72 : 6100 D398           		bsr.w	PalLoad1	; load continue	screen pallet
    5300/    4D76 : 103C 0090           		move.b	#$90,d0
    5301/    4D7A : 6100 C61A           		bsr.w	PlaySound	; play continue	music
    5302/    4D7E : 31FC 0293 F614      		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
    5303/    4D84 : 42B8 F700           		clr.l	($FFFFF700).w
    5304/    4D88 : 21FC 0100 0000 F704 		move.l	#$1000000,($FFFFF704).w
    5305/    4D90 : 11FC 0081 D000      		move.b	#$81,($FFFFD000).w ; load Sonic	object
    5306/    4D96 : 11FC 0080 D040      		move.b	#$80,($FFFFD040).w ; load continue screen objects
    5307/    4D9C : 11FC 0080 D080      		move.b	#$80,($FFFFD080).w
    5308/    4DA2 : 11FC 0003 D098      		move.b	#3,($FFFFD098).w
    5309/    4DA8 : 11FC 0004 D09A      		move.b	#4,($FFFFD09A).w
    5310/    4DAE : 11FC 0080 D0C0      		move.b	#$80,($FFFFD0C0).w
    5311/    4DB4 : 11FC 0004 D0E4      		move.b	#4,($FFFFD0E4).w
    5312/    4DBA : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    5313/    4DC0 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    5314/    4DC6 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    5315/    4DCA : 0000 0040           		ori.b	#$40,d0
    5316/    4DCE : 33C0 00C0 0004      		move.w	d0,($C00004).l
    5317/    4DD4 : 6100 CFE6           		bsr.w	Pal_FadeTo
    5318/    4DD8 :                     
    5319/    4DD8 :                     ; ---------------------------------------------------------------------------
    5320/    4DD8 :                     ; Continue screen main loop
    5321/    4DD8 :                     ; ---------------------------------------------------------------------------
    5322/    4DD8 :                     
    5323/    4DD8 :                     Cont_MainLoop:
    5324/    4DD8 : 11FC 0016 F62A      		move.b	#$16,($FFFFF62A).w
    5325/    4DDE : 6100 DBD8           		bsr.w	DelayProgram
    5326/    4DE2 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    5327/    4DE8 : 641C                		bcc.s	loc_4DF2
    5328/    4DEA : 46FC 2700           		move	#$2700,sr
    5329/    4DEE : 3238 F614           		move.w	($FFFFF614).w,d1
    5330/    4DF2 : 82FC 003C           		divu.w	#$3C,d1
    5331/    4DF6 : 0281 0000 000F      		andi.l	#$F,d1
    5332/    4DFC : 4EB9 0001 CBCE      		jsr	(ContScrCounter).l
    5333/    4E02 : 46FC 2300           		move	#$2300,sr
    5334/    4E06 :                     
    5335/    4E06 :                     loc_4DF2:
    5336/    4E06 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    5337/    4E0C : 4EB9 0000 D768      		jsr	(BuildSprites).l
    5338/    4E12 : 0C78 0180 D008      		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
    5339/    4E18 : 6418                		bcc.s	Cont_GotoLevel	; if yes, branch
    5340/    4E1A : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    5341/    4E20 : 64B6                		bcc.s	Cont_MainLoop
    5342/    4E22 : 4A78 F614           		tst.w	($FFFFF614).w
    5343/    4E26 : 6600 FFB0           		bne.w	Cont_MainLoop
    5344/    4E2A : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; go to Sega screen
    5345/    4E30 : 4E75                		rts	
    5346/    4E32 :                     ; ===========================================================================
    5347/    4E32 :                     
    5348/    4E32 :                     Cont_GotoLevel:				; XREF: Cont_MainLoop
    5349/    4E32 : 11FC 000C F600      		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
    5350/    4E38 : 11FC 0003 FE12      		move.b	#3,($FFFFFE12).w ; set lives to	3
    5351/    4E3E : 7000                		moveq	#0,d0
    5352/    4E40 : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    5353/    4E44 : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    5354/    4E48 : 21C0 FE26           		move.l	d0,($FFFFFE26).w ; clear score
    5355/    4E4C : 11C0 FE30           		move.b	d0,($FFFFFE30).w ; clear lamppost count
    5356/    4E50 : 5338 FE18           		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
    5357/    4E54 : 4E75                		rts	
    5358/    4E56 :                     ; ===========================================================================
    5359/    4E56 :                     
    5360/    4E56 :                     ; ---------------------------------------------------------------------------
    5361/    4E56 :                     ; Object 80 - Continue screen elements
    5362/    4E56 :                     ; ---------------------------------------------------------------------------
    5363/    4E56 :                     
    5364/    4E56 :                     Obj80:					; XREF: Obj_Index
    5365/    4E56 : 7000                		moveq	#0,d0
    5366/    4E58 : 1028 0024           		move.b	$24(a0),d0
    5367/    4E5C : 323B 0006           		move.w	Obj80_Index(pc,d0.w),d1
    5368/    4E60 : 4EFB 1002           		jmp	Obj80_Index(pc,d1.w)
    5369/    4E64 :                     ; ===========================================================================
    5370/    4E64 : 0008                Obj80_Index:	dc.w Obj80_Main-Obj80_Index
    5371/    4E66 : 0038                		dc.w Obj80_Display-Obj80_Index
    5372/    4E68 : 005C                		dc.w Obj80_MakeMiniSonic-Obj80_Index
    5373/    4E6A : 00D0                		dc.w Obj80_ChkType-Obj80_Index
    5374/    4E6C :                     ; ===========================================================================
    5375/    4E6C :                     
    5376/    4E6C :                     Obj80_Main:				; XREF: Obj80_Index
    5377/    4E6C : 5428 0024           		addq.b	#2,$24(a0)
    5378/    4E70 : 217C 0000 506A 0004 		move.l	#Map_obj80,4(a0)
    5379/    4E78 : 317C 8500 0002      		move.w	#$8500,2(a0)
    5380/    4E7E : 117C 0000 0001      		move.b	#0,1(a0)
    5381/    4E84 : 117C 003C 0019      		move.b	#$3C,$19(a0)
    5382/    4E8A : 317C 0120 0008      		move.w	#$120,8(a0)
    5383/    4E90 : 317C 00C0 000A      		move.w	#$C0,$A(a0)
    5384/    4E96 : 31FC 0000 FE20      		move.w	#0,($FFFFFE20).w ; clear rings
    5385/    4E9C :                     
    5386/    4E9C :                     Obj80_Display:				; XREF: Obj80_Index
    5387/    4E9C : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
    5388/    4EA2 :                     ; ===========================================================================
    5389/    4EA2 :                     Obj80_MiniSonicPos:
    5390/    4EA2 : 0116 012A 0102 013E 		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
                    00EE 0152 00DA 0166 
                    00C6                
    5391/    4EB4 : 017A 00B2 018E 009E 		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
                    01A2 008A           
    5392/    4EC0 :                     ; ===========================================================================
    5393/    4EC0 :                     
    5394/    4EC0 :                     Obj80_MakeMiniSonic:			; XREF: Obj80_Index
    5395/    4EC0 : 2248                		movea.l	a0,a1
    5396/    4EC2 : 45F9 0000 4EA2      		lea	(Obj80_MiniSonicPos).l,a2
    5397/    4EC8 : 7200                		moveq	#0,d1
    5398/    4ECA : 1238 FE18           		move.b	($FFFFFE18).w,d1
    5399/    4ECE : 5501                		subq.b	#2,d1
    5400/    4ED0 : 6406                		bcc.s	loc_4EC4
    5401/    4ED2 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
    5402/    4ED8 :                     ; ===========================================================================
    5403/    4ED8 :                     
    5404/    4ED8 :                     loc_4EC4:				; XREF: Obj80_MakeMiniSonic
    5405/    4ED8 : 7601                		moveq	#1,d3
    5406/    4EDA : 0C01 000E           		cmpi.b	#$E,d1
    5407/    4EDE : 6504                		bcs.s	loc_4ED0
    5408/    4EE0 : 7600                		moveq	#0,d3
    5409/    4EE2 : 720E                		moveq	#$E,d1
    5410/    4EE4 :                     
    5411/    4EE4 :                     loc_4ED0:
    5412/    4EE4 : 1401                		move.b	d1,d2
    5413/    4EE6 : 0202 0001           		andi.b	#1,d2
    5414/    4EEA :                     
    5415/    4EEA :                     Obj80_MiniSonLoop:
    5416/    4EEA : (MACRO)             		_move.b	#$80,0(a1)	; load mini Sonic object
    5416/    4EEA :  (MACRO-2)                          insn2op move.b, #$80,0(a1)
    5416/    4EEA : 137C 0080 0001                              !move.b   #$80,1+0(a1)
    5416/    4EEF :                                             !org    *-1
    5416/    4EEF : 00                                          !dc.b   0
    5417/    4EF0 : 335A 0008           		move.w	(a2)+,8(a1)
    5418/    4EF4 : 4A02                		tst.b	d2
    5419/    4EF6 : 6706                		beq.s	loc_4EEA
    5420/    4EF8 : 0469 000A 0008      		subi.w	#$A,8(a1)
    5421/    4EFE :                     
    5422/    4EFE :                     loc_4EEA:
    5423/    4EFE : 337C 00D0 000A      		move.w	#$D0,$A(a1)
    5424/    4F04 : 137C 0006 001A      		move.b	#6,$1A(a1)
    5425/    4F0A : 137C 0006 0024      		move.b	#6,$24(a1)
    5426/    4F10 : 237C 0000 506A 0004 		move.l	#Map_obj80,4(a1)
    5427/    4F18 : 337C 8551 0002      		move.w	#$8551,2(a1)
    5428/    4F1E : 137C 0000 0001      		move.b	#0,1(a1)
    5429/    4F24 : 43E9 0040           		lea	$40(a1),a1
    5430/    4F28 : 51C9 FFC0           		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
    5431/    4F2C : 43E9 FFC0           		lea	-$40(a1),a1
    5432/    4F30 : 1343 0028           		move.b	d3,$28(a1)
    5433/    4F34 :                     
    5434/    4F34 :                     Obj80_ChkType:				; XREF: Obj80_Index
    5435/    4F34 : 4A28 0028           		tst.b	$28(a0)
    5436/    4F38 : 671A                		beq.s	loc_4F40
    5437/    4F3A : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    5438/    4F40 : 6512                		bcs.s	loc_4F40
    5439/    4F42 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
    5440/    4F46 : 0200 0001           		andi.b	#1,d0
    5441/    4F4A : 6608                		bne.s	loc_4F40
    5442/    4F4C : 4A78 D010           		tst.w	($FFFFD010).w
    5443/    4F50 : 6618                		bne.s	Obj80_Delete
    5444/    4F52 : 4E75                		rts	
    5445/    4F54 :                     ; ===========================================================================
    5446/    4F54 :                     
    5447/    4F54 :                     loc_4F40:				; XREF: Obj80_ChkType
    5448/    4F54 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
    5449/    4F58 : 0200 000F           		andi.b	#$F,d0
    5450/    4F5C : 6606                		bne.s	Obj80_Display2
    5451/    4F5E : 0868 0000 001A      		bchg	#0,$1A(a0)
    5452/    4F64 :                     
    5453/    4F64 :                     Obj80_Display2:
    5454/    4F64 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
    5455/    4F6A :                     ; ===========================================================================
    5456/    4F6A :                     
    5457/    4F6A :                     Obj80_Delete:				; XREF: Obj80_ChkType
    5458/    4F6A : 4EF9 0000 D74A      		jmp	(DeleteObject).l
    5459/    4F70 :                     ; ===========================================================================
    5460/    4F70 :                     
    5461/    4F70 :                     ; ---------------------------------------------------------------------------
    5462/    4F70 :                     ; Object 81 - Sonic on the continue screen
    5463/    4F70 :                     ; ---------------------------------------------------------------------------
    5464/    4F70 :                     
    5465/    4F70 :                     Obj81:					; XREF: Obj_Index
    5466/    4F70 : 7000                		moveq	#0,d0
    5467/    4F72 : 1028 0024           		move.b	$24(a0),d0
    5468/    4F76 : 323B 000C           		move.w	Obj81_Index(pc,d0.w),d1
    5469/    4F7A : 4EBB 1008           		jsr	Obj81_Index(pc,d1.w)
    5470/    4F7E : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
    5471/    4F84 :                     ; ===========================================================================
    5472/    4F84 : 0008                Obj81_Index:	dc.w Obj81_Main-Obj81_Index
    5473/    4F86 : 003E                		dc.w Obj81_ChkLand-Obj81_Index
    5474/    4F88 : 0076                		dc.w Obj81_Animate-Obj81_Index
    5475/    4F8A : 00B0                		dc.w Obj81_Run-Obj81_Index
    5476/    4F8C :                     ; ===========================================================================
    5477/    4F8C :                     
    5478/    4F8C :                     Obj81_Main:				; XREF: Obj81_Index
    5479/    4F8C : 5428 0024           		addq.b	#2,$24(a0)
    5480/    4F90 : 317C 00A0 0008      		move.w	#$A0,8(a0)
    5481/    4F96 : 317C 00C0 000C      		move.w	#$C0,$C(a0)
    5482/    4F9C : 217C 0002 1422 0004 		move.l	#Map_Sonic,4(a0)
    5483/    4FA4 : 317C 0780 0002      		move.w	#$780,2(a0)
    5484/    4FAA : 117C 0004 0001      		move.b	#4,1(a0)
    5485/    4FB0 : 117C 0002 0018      		move.b	#2,$18(a0)
    5486/    4FB6 : 117C 001D 001C      		move.b	#$1D,$1C(a0)	; use "floating" animation
    5487/    4FBC : 317C 0400 0012      		move.w	#$400,$12(a0)	; make Sonic fall from above
    5488/    4FC2 :                     
    5489/    4FC2 :                     Obj81_ChkLand:				; XREF: Obj81_Index
    5490/    4FC2 : 0C68 01A0 000C      		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
    5491/    4FC8 : 661E                		bne.s	Obj81_ShowFall	; if not, branch
    5492/    4FCA : 5428 0024           		addq.b	#2,$24(a0)
    5493/    4FCE : 4268 0012           		clr.w	$12(a0)		; stop Sonic falling
    5494/    4FD2 : 217C 0000 506A 0004 		move.l	#Map_obj80,4(a0)
    5495/    4FDA : 317C 8500 0002      		move.w	#$8500,2(a0)
    5496/    4FE0 : 117C 0000 001C      		move.b	#0,$1C(a0)
    5497/    4FE6 : 6012                		bra.s	Obj81_Animate
    5498/    4FE8 :                     ; ===========================================================================
    5499/    4FE8 :                     
    5500/    4FE8 :                     Obj81_ShowFall:				; XREF: Obj81_ChkLand
    5501/    4FE8 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
    5502/    4FEE : 4EB9 0001 3C32      		jsr	(Sonic_Animate).l
    5503/    4FF4 : 4EF9 0001 3EBA      		jmp	(LoadSonicDynPLC).l
    5504/    4FFA :                     ; ===========================================================================
    5505/    4FFA :                     
    5506/    4FFA :                     Obj81_Animate:				; XREF: Obj81_Index
    5507/    4FFA : 4A38 F605           		tst.b	($FFFFF605).w	; is any button	pressed?
    5508/    4FFE : 6B0C                		bmi.s	Obj81_GetUp	; if yes, branch
    5509/    5000 : 43F9 0000 505C      		lea	(Ani_obj81).l,a1
    5510/    5006 : 4EF9 0000 A734      		jmp	(AnimateSprite).l
    5511/    500C :                     ; ===========================================================================
    5512/    500C :                     
    5513/    500C :                     Obj81_GetUp:				; XREF: Obj81_Animate
    5514/    500C : 5428 0024           		addq.b	#2,$24(a0)
    5515/    5010 : 217C 0002 1422 0004 		move.l	#Map_Sonic,4(a0)
    5516/    5018 : 317C 0780 0002      		move.w	#$780,2(a0)
    5517/    501E : 117C 001E 001C      		move.b	#$1E,$1C(a0)	; use "getting up" animation
    5518/    5024 : 4268 0014           		clr.w	$14(a0)
    5519/    5028 : 5168 000C           		subq.w	#8,$C(a0)
    5520/    502C : 103C 00E0           		move.b	#$E0,d0
    5521/    5030 : 6100 C36A           		bsr.w	PlaySound_Special ; fade out music
    5522/    5034 :                     
    5523/    5034 :                     Obj81_Run:				; XREF: Obj81_Index
    5524/    5034 : 0C68 0800 0014      		cmpi.w	#$800,$14(a0)	; check	Sonic"s "run speed" (not moving)
    5525/    503A : 6608                		bne.s	Obj81_AddSpeed	; if too low, branch
    5526/    503C : 317C 1000 0010      		move.w	#$1000,$10(a0)	; move Sonic to	the right
    5527/    5042 : 6006                		bra.s	Obj81_ShowRun
    5528/    5044 :                     ; ===========================================================================
    5529/    5044 :                     
    5530/    5044 :                     Obj81_AddSpeed:				; XREF: Obj81_Run
    5531/    5044 : 0668 0020 0014      		addi.w	#$20,$14(a0)	; increase "run	speed"
    5532/    504A :                     
    5533/    504A :                     Obj81_ShowRun:				; XREF: Obj81_Run
    5534/    504A : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
    5535/    5050 : 4EB9 0001 3C32      		jsr	(Sonic_Animate).l
    5536/    5056 : 4EF9 0001 3EBA      		jmp	(LoadSonicDynPLC).l
    5537/    505C :                     ; ===========================================================================
    5538/    505C :                     Ani_obj81:
    5539/    505C :                     		include	"_anim/obj81.asm"
(1)    1/    505C :                     ; ---------------------------------------------------------------------------
(1)    2/    505C :                     ; Animation script - Sonic on the continue screen
(1)    3/    505C :                     ; ---------------------------------------------------------------------------
(1)    4/    505C : 0002                		dc.w byte_504A-Ani_obj81
(1)    5/    505E : 0401 0101 0102 0202 byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
                    0303 FF             
(1)    6/    5069 : (MACRO)             		align 2
(1)    6/    5069 :  (MACRO-2)                  cnop 0,2
(1)    6/    5069 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)    6/    5069 : =$2                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)    6/    506A :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
    5540/    506A :                     
    5541/    506A :                     ; ---------------------------------------------------------------------------
    5542/    506A :                     ; Sprite mappings - Continue screen
    5543/    506A :                     ; ---------------------------------------------------------------------------
    5544/    506A :                     Map_obj80:
    5545/    506A :                     		include	"_maps/obj80.asm"
(1)    1/    506A :                     ; ---------------------------------------------------------------------------
(1)    2/    506A :                     ; Sprite mappings - Continue screen
(1)    3/    506A :                     ; ---------------------------------------------------------------------------
(1)    4/    506A : 0010 0048           		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
(1)    5/    506E : 0058 0068           		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
(1)    6/    5072 : 0078 0083           		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
(1)    7/    5076 : 0083 0089           		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
(1)    8/    507A : 0B                  byte_5066:	dc.b $B
(1)    9/    507B : F805 0088 C4        		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
(1)   10/    5080 : F805 00B2 D4        		dc.b $F8, 5, 0,	$B2, $D4
(1)   11/    5085 : F805 00AE E4        		dc.b $F8, 5, 0,	$AE, $E4
(1)   12/    508A : F805 00C2 F4        		dc.b $F8, 5, 0,	$C2, $F4
(1)   13/    508F : F801 00A0 04        		dc.b $F8, 1, 0,	$A0, 4
(1)   14/    5094 : F805 00AE 0C        		dc.b $F8, 5, 0,	$AE, $C
(1)   15/    5099 : F805 00C6 1C        		dc.b $F8, 5, 0,	$C6, $1C
(1)   16/    509E : F805 0090 2C        		dc.b $F8, 5, 0,	$90, $2C
(1)   17/    50A3 : 3805 2021 E8        		dc.b $38, 5, $20, $21, $E8
(1)   18/    50A8 : 3805 2021 08        		dc.b $38, 5, $20, $21, 8
(1)   19/    50AD : 3605 01FC F8        		dc.b $36, 5, 1,	$FC, $F8
(1)   20/    50B2 : 03                  byte_509E:	dc.b 3
(1)   21/    50B3 : 0405 0015 FC        		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
(1)   22/    50B8 : F40A 0006 EC        		dc.b $F4, $A, 0, 6, $EC
(1)   23/    50BD : F406 000F 04        		dc.b $F4, 6, 0,	$F, 4
(1)   24/    50C2 : 03                  byte_50AE:	dc.b 3
(1)   25/    50C3 : 0405 0019 FC        		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
(1)   26/    50C8 : F40A 0006 EC        		dc.b $F4, $A, 0, 6, $EC
(1)   27/    50CD : F406 000F 04        		dc.b $F4, 6, 0,	$F, 4
(1)   28/    50D2 : 03                  byte_50BE:	dc.b 3
(1)   29/    50D3 : 0405 001D FC        		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
(1)   30/    50D8 : F40A 0006 EC        		dc.b $F4, $A, 0, 6, $EC
(1)   31/    50DD : F406 000F 04        		dc.b $F4, 6, 0,	$F, 4
(1)   32/    50E2 : 02                  byte_50CE:	dc.b 2
(1)   33/    50E3 : 6009 2000 E8        		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
(1)   34/    50E8 : 6009 2800 00        		dc.b $60, 9, $28, 0, 0
(1)   35/    50ED : 01                  byte_50D9:	dc.b 1
(1)   36/    50EE : 0006 0012 00        		dc.b 0,	6, 0, $12, 0	; mini Sonic
(1)   37/    50F3 : 01                  byte_50DF:	dc.b 1
(1)   38/    50F4 : 0006 0018 00        		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
(1)   39/    50F9 : (MACRO)             		align 2
(1)   39/    50F9 :  (MACRO-2)                  cnop 0,2
(1)   39/    50F9 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   39/    50F9 : =$3                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   39/    50FA :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
    5546/    50FA :                     
    5547/    50FA :                     ; ===========================================================================
    5548/    50FA :                     ; ---------------------------------------------------------------------------
    5549/    50FA :                     ; Ending sequence in Green Hill	Zone
    5550/    50FA :                     ; ---------------------------------------------------------------------------
    5551/    50FA :                     
    5552/    50FA :                     EndingSequence:				; XREF: GameModeArray
    5553/    50FA : 103C 00E4           		move.b	#$E4,d0
    5554/    50FE : 6100 C29C           		bsr.w	PlaySound_Special ; stop music
    5555/    5102 : 6100 CD5E           		bsr.w	Pal_FadeFrom
    5556/    5106 : 43F8 D000           		lea	($FFFFD000).w,a1
    5557/    510A : 7000                		moveq	#0,d0
    5558/    510C : 323C 07FF           		move.w	#$7FF,d1
    5559/    5110 :                     
    5560/    5110 :                     End_ClrObjRam:
    5561/    5110 : 22C0                		move.l	d0,(a1)+
    5562/    5112 : 51C9 FFFC           		dbf	d1,End_ClrObjRam ; clear object	RAM
    5563/    5116 :                     
    5564/    5116 : 43F8 F628           		lea	($FFFFF628).w,a1
    5565/    511A : 7000                		moveq	#0,d0
    5566/    511C : 323C 0015           		move.w	#$15,d1
    5567/    5120 :                     
    5568/    5120 :                     End_ClrRam:
    5569/    5120 : 22C0                		move.l	d0,(a1)+
    5570/    5122 : 51C9 FFFC           		dbf	d1,End_ClrRam	; clear	variables
    5571/    5126 :                     
    5572/    5126 : 43F8 F700           		lea	($FFFFF700).w,a1
    5573/    512A : 7000                		moveq	#0,d0
    5574/    512C : 323C 003F           		move.w	#$3F,d1
    5575/    5130 :                     
    5576/    5130 :                     End_ClrRam2:
    5577/    5130 : 22C0                		move.l	d0,(a1)+
    5578/    5132 : 51C9 FFFC           		dbf	d1,End_ClrRam2	; clear	variables
    5579/    5136 :                     
    5580/    5136 : 43F8 FE60           		lea	($FFFFFE60).w,a1
    5581/    513A : 7000                		moveq	#0,d0
    5582/    513C : 323C 0047           		move.w	#$47,d1
    5583/    5140 :                     
    5584/    5140 :                     End_ClrRam3:
    5585/    5140 : 22C0                		move.l	d0,(a1)+
    5586/    5142 : 51C9 FFFC           		dbf	d1,End_ClrRam3	; clear	variables
    5587/    5146 :                     
    5588/    5146 : 46FC 2700           		move	#$2700,sr
    5589/    514A : 3038 F60C           		move.w	($FFFFF60C).w,d0
    5590/    514E : 0200 00BF           		andi.b	#$BF,d0
    5591/    5152 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    5592/    5158 : 6100 C16A           		bsr.w	ClearScreen
    5593/    515C : 4DF9 00C0 0004      		lea	($C00004).l,a6
    5594/    5162 : 3CBC 8B03           		move.w	#$8B03,(a6)
    5595/    5166 : 3CBC 8230           		move.w	#$8230,(a6)
    5596/    516A : 3CBC 8407           		move.w	#$8407,(a6)
    5597/    516E : 3CBC 857C           		move.w	#$857C,(a6)
    5598/    5172 : 3CBC 9001           		move.w	#$9001,(a6)
    5599/    5176 : 3CBC 8004           		move.w	#$8004,(a6)
    5600/    517A : 3CBC 8720           		move.w	#$8720,(a6)
    5601/    517E : 31FC 8ADF F624      		move.w	#$8ADF,($FFFFF624).w
    5602/    5184 : 3CB8 F624           		move.w	($FFFFF624).w,(a6)
    5603/    5188 : 31FC 001E FE14      		move.w	#$1E,($FFFFFE14).w
    5604/    518E : 31FC 0600 FE10      		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
    5605/    5194 : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
    5606/    519A : 6706                		beq.s	End_LoadData	; if yes, branch
    5607/    519C : 31FC 0601 FE10      		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
    5608/    51A2 :                     
    5609/    51A2 :                     End_LoadData:
    5610/    51A2 : 701C                		moveq	#$1C,d0
    5611/    51A4 : 6100 C546           		bsr.w	RunPLC_ROM	; load ending sequence patterns
    5612/    51A8 : 4EB9 0001 CAB8      		jsr	(Hud_Base).l
    5613/    51AE : 6100 0D1A           		bsr.w	LevelSizeLoad
    5614/    51B2 : 6100 10DE           		bsr.w	DeformBgLayer
    5615/    51B6 : 08F8 0002 F754      		bset	#2,($FFFFF754).w
    5616/    51BC : 6100 1AF4           		bsr.w	MainLoadBlockLoad
    5617/    51C0 : 6100 1AA2           		bsr.w	LoadTilesFromStart
    5618/    51C4 : 21FC 0006 5842 F796 		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
    5619/    51CC : 46FC 2300           		move	#$2300,sr
    5620/    51D0 : 41F9 0006 25A0      		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
    5621/    51D6 : 43F8 9400           		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
    5622/    51DA : 6100 C6C0           		bsr.w	KosDec
    5623/    51DE : 7003                		moveq	#3,d0
    5624/    51E0 : 6100 CF2A           		bsr.w	PalLoad1	; load Sonic"s pallet
    5625/    51E4 : 303C 008B           		move.w	#$8B,d0
    5626/    51E8 : 6100 C1AC           		bsr.w	PlaySound	; play ending sequence music
    5627/    51EC : 0838 0006 F604      		btst	#6,($FFFFF604).w ; is button A pressed?
    5628/    51F2 : 6706                		beq.s	End_LoadSonic	; if not, branch
    5629/    51F4 : 11FC 0001 FFFA      		move.b	#1,($FFFFFFFA).w ; enable debug	mode
    5630/    51FA :                     
    5631/    51FA :                     End_LoadSonic:
    5632/    51FA : 11FC 0001 D000      		move.b	#1,($FFFFD000).w ; load	Sonic object
    5633/    5200 : 08F8 0000 D022      		bset	#0,($FFFFD022).w ; make	Sonic face left
    5634/    5206 : 11FC 0001 F7CC      		move.b	#1,($FFFFF7CC).w ; lock	controls
    5635/    520C : 31FC 0400 F602      		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
    5636/    5212 : 31FC F800 D014      		move.w	#$F800,($FFFFD014).w ; set Sonic"s speed
    5637/    5218 : 11FC 0021 D040      		move.b	#$21,($FFFFD040).w ; load HUD object
    5638/    521E : 4EB9 0000 D9E4      		jsr	(ObjPosLoad).l
    5639/    5224 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    5640/    522A : 4EB9 0000 D768      		jsr	(BuildSprites).l
    5641/    5230 : 7000                		moveq	#0,d0
    5642/    5232 : 31C0 FE20           		move.w	d0,($FFFFFE20).w
    5643/    5236 : 21C0 FE22           		move.l	d0,($FFFFFE22).w
    5644/    523A : 11C0 FE1B           		move.b	d0,($FFFFFE1B).w
    5645/    523E : 11C0 FE2C           		move.b	d0,($FFFFFE2C).w
    5646/    5242 : 11C0 FE2D           		move.b	d0,($FFFFFE2D).w
    5647/    5246 : 11C0 FE2E           		move.b	d0,($FFFFFE2E).w
    5648/    524A : 11C0 FE2F           		move.b	d0,($FFFFFE2F).w
    5649/    524E : 31C0 FE08           		move.w	d0,($FFFFFE08).w
    5650/    5252 : 31C0 FE02           		move.w	d0,($FFFFFE02).w
    5651/    5256 : 31C0 FE04           		move.w	d0,($FFFFFE04).w
    5652/    525A : 6100 EED0           		bsr.w	OscillateNumInit
    5653/    525E : 11FC 0001 FE1F      		move.b	#1,($FFFFFE1F).w
    5654/    5264 : 11FC 0001 FE1D      		move.b	#1,($FFFFFE1D).w
    5655/    526A : 11FC 0000 FE1E      		move.b	#0,($FFFFFE1E).w
    5656/    5270 : 31FC 0708 F614      		move.w	#1800,($FFFFF614).w
    5657/    5276 : 11FC 0018 F62A      		move.b	#$18,($FFFFF62A).w
    5658/    527C : 6100 D73A           		bsr.w	DelayProgram
    5659/    5280 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    5660/    5284 : 0000 0040           		ori.b	#$40,d0
    5661/    5288 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    5662/    528E : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    5663/    5294 : 6100 CB26           		bsr.w	Pal_FadeTo
    5664/    5298 :                     
    5665/    5298 :                     ; ---------------------------------------------------------------------------
    5666/    5298 :                     ; Main ending sequence loop
    5667/    5298 :                     ; ---------------------------------------------------------------------------
    5668/    5298 :                     
    5669/    5298 :                     End_MainLoop:
    5670/    5298 : 6100 C10E           		bsr.w	PauseGame
    5671/    529C : 11FC 0018 F62A      		move.b	#$18,($FFFFF62A).w
    5672/    52A2 : 6100 D714           		bsr.w	DelayProgram
    5673/    52A6 : 5278 FE04           		addq.w	#1,($FFFFFE04).w
    5674/    52AA : 6100 00D8           		bsr.w	End_MoveSonic
    5675/    52AE : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    5676/    52B4 : 6100 0FDC           		bsr.w	DeformBgLayer
    5677/    52B8 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    5678/    52BE : 4EB9 0000 D9E4      		jsr	(ObjPosLoad).l
    5679/    52C4 : 6100 C676           		bsr.w	PalCycle_Load
    5680/    52C8 : 6100 EEB8           		bsr.w	OscillateNumDo
    5681/    52CC : 6100 EF4C           		bsr.w	ChangeRingFrame
    5682/    52D0 : 0C38 0018 F600      		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
    5683/    52D6 : 6716                		beq.s	loc_52DA	; if yes, branch
    5684/    52D8 : 11FC 001C F600      		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
    5685/    52DE : 103C 0091           		move.b	#$91,d0
    5686/    52E2 : 6100 C0B8           		bsr.w	PlaySound_Special ; play credits music
    5687/    52E6 : 31FC 0000 FFF4      		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
    5688/    52EC : 4E75                		rts	
    5689/    52EE :                     ; ===========================================================================
    5690/    52EE :                     
    5691/    52EE :                     loc_52DA:
    5692/    52EE : 4A78 FE02           		tst.w	($FFFFFE02).w	; is level set to restart?
    5693/    52F2 : 6700 FFA4           		beq.w	End_MainLoop	; if not, branch
    5694/    52F6 :                     
    5695/    52F6 : 4278 FE02           		clr.w	($FFFFFE02).w
    5696/    52FA : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    5697/    5300 : 4278 F794           		clr.w	($FFFFF794).w
    5698/    5304 :                     
    5699/    5304 :                     End_AllEmlds:				; XREF: loc_5334
    5700/    5304 : 6100 C0A2           		bsr.w	PauseGame
    5701/    5308 : 11FC 0018 F62A      		move.b	#$18,($FFFFF62A).w
    5702/    530E : 6100 D6A8           		bsr.w	DelayProgram
    5703/    5312 : 5278 FE04           		addq.w	#1,($FFFFFE04).w
    5704/    5316 : 6100 006C           		bsr.w	End_MoveSonic
    5705/    531A : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    5706/    5320 : 6100 0F70           		bsr.w	DeformBgLayer
    5707/    5324 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    5708/    532A : 4EB9 0000 D9E4      		jsr	(ObjPosLoad).l
    5709/    5330 : 6100 EE50           		bsr.w	OscillateNumDo
    5710/    5334 : 6100 EEE4           		bsr.w	ChangeRingFrame
    5711/    5338 : 5378 F794           		subq.w	#1,($FFFFF794).w
    5712/    533C : 6A0A                		bpl.s	loc_5334
    5713/    533E : 31FC 0002 F794      		move.w	#2,($FFFFF794).w
    5714/    5344 : 6100 CC66           		bsr.w	Pal_ToWhite
    5715/    5348 :                     
    5716/    5348 :                     loc_5334:
    5717/    5348 : 4A78 FE02           		tst.w	($FFFFFE02).w
    5718/    534C : 6700 FFB6           		beq.w	End_AllEmlds
    5719/    5350 : 4278 FE02           		clr.w	($FFFFFE02).w
    5720/    5354 : 31FC 2E2F A480      		move.w	#$2E2F,($FFFFA480).w ; modify level layout
    5721/    535A : 4BF9 00C0 0004      		lea	($C00004).l,a5
    5722/    5360 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    5723/    5366 : 47F8 F700           		lea	($FFFFF700).w,a3
    5724/    536A : 49F8 A400           		lea	($FFFFA400).w,a4
    5725/    536E : 343C 4000           		move.w	#$4000,d2
    5726/    5372 : 6100 1916           		bsr.w	LoadTilesFromStart2
    5727/    5376 : 7013                		moveq	#$13,d0
    5728/    5378 : 6100 CD92           		bsr.w	PalLoad1	; load ending pallet
    5729/    537C : 6100 CB62           		bsr.w	Pal_MakeWhite
    5730/    5380 : 6000 FF16           		bra.w	End_MainLoop
    5731/    5384 :                     
    5732/    5384 :                     ; ---------------------------------------------------------------------------
    5733/    5384 :                     ; Subroutine controlling Sonic on the ending sequence
    5734/    5384 :                     ; ---------------------------------------------------------------------------
    5735/    5384 :                     
    5736/    5384 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    5737/    5384 :                     
    5738/    5384 :                     
    5739/    5384 :                     End_MoveSonic:				; XREF: End_MainLoop
    5740/    5384 : 1038 F7D7           		move.b	($FFFFF7D7).w,d0
    5741/    5388 : 661A                		bne.s	End_MoveSonic2
    5742/    538A : 0C78 0090 D008      		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
    5743/    5390 : 6462                		bcc.s	End_MoveSonExit	; if not, branch
    5744/    5392 : 5438 F7D7           		addq.b	#2,($FFFFF7D7).w
    5745/    5396 : 11FC 0001 F7CC      		move.b	#1,($FFFFF7CC).w ; lock	player"s controls
    5746/    539C : 31FC 0800 F602      		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
    5747/    53A2 : 4E75                		rts	
    5748/    53A4 :                     ; ===========================================================================
    5749/    53A4 :                     
    5750/    53A4 :                     End_MoveSonic2:				; XREF: End_MoveSonic
    5751/    53A4 : 5500                		subq.b	#2,d0
    5752/    53A6 : 6634                		bne.s	End_MoveSonic3
    5753/    53A8 : 0C78 00A0 D008      		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
    5754/    53AE : 6544                		bcs.s	End_MoveSonExit	; if not, branch
    5755/    53B0 : 5438 F7D7           		addq.b	#2,($FFFFF7D7).w
    5756/    53B4 : 7000                		moveq	#0,d0
    5757/    53B6 : 11C0 F7CC           		move.b	d0,($FFFFF7CC).w
    5758/    53BA : 31C0 F602           		move.w	d0,($FFFFF602).w ; stop	Sonic moving
    5759/    53BE : 31C0 D014           		move.w	d0,($FFFFD014).w
    5760/    53C2 : 11FC 0081 F7C8      		move.b	#$81,($FFFFF7C8).w
    5761/    53C8 : 11FC 0003 D01A      		move.b	#3,($FFFFD01A).w
    5762/    53CE : 31FC 0505 D01C      		move.w	#$505,($FFFFD01C).w ; use "standing" animation
    5763/    53D4 : 11FC 0003 D01E      		move.b	#3,($FFFFD01E).w
    5764/    53DA : 4E75                		rts	
    5765/    53DC :                     ; ===========================================================================
    5766/    53DC :                     
    5767/    53DC :                     End_MoveSonic3:				; XREF: End_MoveSonic
    5768/    53DC : 5500                		subq.b	#2,d0
    5769/    53DE : 6614                		bne.s	End_MoveSonExit
    5770/    53E0 : 5438 F7D7           		addq.b	#2,($FFFFF7D7).w
    5771/    53E4 : 31FC 00A0 D008      		move.w	#$A0,($FFFFD008).w
    5772/    53EA : 11FC 0087 D000      		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
    5773/    53F0 : 4278 D024           		clr.w	($FFFFD024).w
    5774/    53F4 :                     
    5775/    53F4 :                     End_MoveSonExit:
    5776/    53F4 : 4E75                		rts	
    5777/    53F6 :                     ; End of function End_MoveSonic
    5778/    53F6 :                     
    5779/    53F6 :                     ; ===========================================================================
    5780/    53F6 :                     ; ---------------------------------------------------------------------------
    5781/    53F6 :                     ; Object 87 - Sonic on ending sequence
    5782/    53F6 :                     ; ---------------------------------------------------------------------------
    5783/    53F6 :                     
    5784/    53F6 :                     Obj87:					; XREF: Obj_Index
    5785/    53F6 : 7000                		moveq	#0,d0
    5786/    53F8 : 1028 0025           		move.b	$25(a0),d0
    5787/    53FC : 323B 000C           		move.w	Obj87_Index(pc,d0.w),d1
    5788/    5400 : 4EBB 1008           		jsr	Obj87_Index(pc,d1.w)
    5789/    5404 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
    5790/    540A :                     ; ===========================================================================
    5791/    540A : 0014 0058           Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
    5792/    540E : 00D6 0070           		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
    5793/    5412 : 008C 00D6           		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
    5794/    5416 : 00B8 00D6           		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
    5795/    541A : 00E2 00D6           		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
    5796/    541E :                     ; ===========================================================================
    5797/    541E :                     
    5798/    541E :                     Obj87_Main:				; XREF: Obj87_Index
    5799/    541E : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
    5800/    5424 : 670E                		beq.s	Obj87_Main2	; if yes, branch
    5801/    5426 : 0628 0010 0025      		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
    5802/    542C : 317C 00D8 0030      		move.w	#$D8,$30(a0)
    5803/    5432 : 4E75                		rts	
    5804/    5434 :                     ; ===========================================================================
    5805/    5434 :                     
    5806/    5434 :                     Obj87_Main2:				; XREF: Obj87_Main
    5807/    5434 : 5428 0025           		addq.b	#2,$25(a0)
    5808/    5438 : 217C 0000 568C 0004 		move.l	#Map_obj87,4(a0)
    5809/    5440 : 317C 03E1 0002      		move.w	#$3E1,2(a0)
    5810/    5446 : 117C 0004 0001      		move.b	#4,1(a0)
    5811/    544C : 4228 0022           		clr.b	$22(a0)
    5812/    5450 : 117C 0002 0018      		move.b	#2,$18(a0)
    5813/    5456 : 117C 0000 001A      		move.b	#0,$1A(a0)
    5814/    545C : 317C 0050 0030      		move.w	#$50,$30(a0)	; set duration for Sonic to pause
    5815/    5462 :                     
    5816/    5462 :                     Obj87_MakeEmlds:			; XREF: Obj87_Index
    5817/    5462 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from duration
    5818/    5466 : 6610                		bne.s	Obj87_Wait
    5819/    5468 : 5428 0025           		addq.b	#2,$25(a0)
    5820/    546C : 317C 0001 001C      		move.w	#1,$1C(a0)
    5821/    5472 : 11FC 0088 D400      		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
    5822/    5478 :                     
    5823/    5478 :                     Obj87_Wait:
    5824/    5478 : 4E75                		rts	
    5825/    547A :                     ; ===========================================================================
    5826/    547A :                     
    5827/    547A :                     Obj87_LookUp:				; XREF: Obj87_Index
    5828/    547A : 0C79 2000 00FF D43C 		cmpi.w	#$2000,($FFD43C).l
    5829/    5482 : 6610                		bne.s	locret_5480
    5830/    5484 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
    5831/    548A : 317C 005A 0030      		move.w	#$5A,$30(a0)
    5832/    5490 : 5428 0025           		addq.b	#2,$25(a0)
    5833/    5494 :                     
    5834/    5494 :                     locret_5480:
    5835/    5494 : 4E75                		rts	
    5836/    5496 :                     ; ===========================================================================
    5837/    5496 :                     
    5838/    5496 :                     Obj87_ClrObjRam:			; XREF: Obj87_Index
    5839/    5496 : 5368 0030           		subq.w	#1,$30(a0)
    5840/    549A : 6624                		bne.s	Obj87_Wait2
    5841/    549C : 43F8 D400           		lea	($FFFFD400).w,a1
    5842/    54A0 : 323C 00FF           		move.w	#$FF,d1
    5843/    54A4 :                     
    5844/    54A4 :                     Obj87_ClrLoop:
    5845/    54A4 : 4299                		clr.l	(a1)+
    5846/    54A6 : 51C9 FFFC           		dbf	d1,Obj87_ClrLoop ; clear the object RAM
    5847/    54AA : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w
    5848/    54B0 : 5428 0025           		addq.b	#2,$25(a0)
    5849/    54B4 : 117C 0001 001C      		move.b	#1,$1C(a0)
    5850/    54BA : 317C 003C 0030      		move.w	#$3C,$30(a0)
    5851/    54C0 :                     
    5852/    54C0 :                     Obj87_Wait2:
    5853/    54C0 : 4E75                		rts	
    5854/    54C2 :                     ; ===========================================================================
    5855/    54C2 :                     
    5856/    54C2 :                     Obj87_MakeLogo:				; XREF: Obj87_Index
    5857/    54C2 : 5368 0030           		subq.w	#1,$30(a0)
    5858/    54C6 : 6616                		bne.s	Obj87_Wait3
    5859/    54C8 : 5428 0025           		addq.b	#2,$25(a0)
    5860/    54CC : 317C 00B4 0030      		move.w	#$B4,$30(a0)
    5861/    54D2 : 117C 0002 001C      		move.b	#2,$1C(a0)
    5862/    54D8 : 11FC 0089 D400      		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
    5863/    54DE :                     
    5864/    54DE :                     Obj87_Wait3:
    5865/    54DE : 4E75                		rts	
    5866/    54E0 :                     ; ===========================================================================
    5867/    54E0 :                     
    5868/    54E0 :                     Obj87_Animate:				; XREF: Obj87_Index
    5869/    54E0 : 43F9 0000 552A      		lea	(Ani_obj87).l,a1
    5870/    54E6 : 4EF9 0000 A734      		jmp	(AnimateSprite).l
    5871/    54EC :                     ; ===========================================================================
    5872/    54EC :                     
    5873/    54EC :                     Obj87_Leap:				; XREF: Obj87_Index
    5874/    54EC : 5368 0030           		subq.w	#1,$30(a0)
    5875/    54F0 : 6636                		bne.s	Obj87_Wait4
    5876/    54F2 : 5428 0025           		addq.b	#2,$25(a0)
    5877/    54F6 : 217C 0000 568C 0004 		move.l	#Map_obj87,4(a0)
    5878/    54FE : 317C 03E1 0002      		move.w	#$3E1,2(a0)
    5879/    5504 : 117C 0004 0001      		move.b	#4,1(a0)
    5880/    550A : 4228 0022           		clr.b	$22(a0)
    5881/    550E : 117C 0002 0018      		move.b	#2,$18(a0)
    5882/    5514 : 117C 0005 001A      		move.b	#5,$1A(a0)
    5883/    551A : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "leaping"	animation
    5884/    5520 : 11FC 0089 D400      		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
    5885/    5526 : 60B8                		bra.s	Obj87_Animate
    5886/    5528 :                     ; ===========================================================================
    5887/    5528 :                     
    5888/    5528 :                     Obj87_Wait4:				; XREF: Obj87_Leap
    5889/    5528 : 4E75                		rts	
    5890/    552A :                     ; ===========================================================================
    5891/    552A :                     Ani_obj87:
    5892/    552A :                     		include	"_anim/obj87.asm"
(1)    1/    552A :                     ; ---------------------------------------------------------------------------
(1)    2/    552A :                     ; Animation script - Sonic on the ending sequence
(1)    3/    552A :                     ; ---------------------------------------------------------------------------
(1)    4/    552A : 0006                		dc.w byte_551C-Ani_obj87
(1)    5/    552C : 0014                		dc.w byte_552A-Ani_obj87
(1)    6/    552E : 001E                		dc.w byte_5534-Ani_obj87
(1)    7/    5530 : 0301 0001 0001 0001 byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
                    0001 0001 02FA      
(1)    8/    553E : 0503 0403 0403 0403 byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
                    FA00                
(1)    9/    5548 : 0305 0505 0607 FE01 byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
(1)   10/    5550 : (MACRO)             		align 2
(1)   10/    5550 :  (MACRO-2)                  cnop 0,2
(1)   10/    5550 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    5893/    5550 :                     
    5894/    5550 :                     ; ===========================================================================
    5895/    5550 :                     ; ---------------------------------------------------------------------------
    5896/    5550 :                     ; Object 88 - chaos emeralds on	the ending sequence
    5897/    5550 :                     ; ---------------------------------------------------------------------------
    5898/    5550 :                     
    5899/    5550 :                     Obj88:					; XREF: Obj_Index
    5900/    5550 : 7000                		moveq	#0,d0
    5901/    5552 : 1028 0024           		move.b	$24(a0),d0
    5902/    5556 : 323B 000C           		move.w	Obj88_Index(pc,d0.w),d1
    5903/    555A : 4EBB 1008           		jsr	Obj88_Index(pc,d1.w)
    5904/    555E : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
    5905/    5564 :                     ; ===========================================================================
    5906/    5564 : 0004                Obj88_Index:	dc.w Obj88_Main-Obj88_Index
    5907/    5566 : 006C                		dc.w Obj88_Move-Obj88_Index
    5908/    5568 :                     ; ===========================================================================
    5909/    5568 :                     
    5910/    5568 :                     Obj88_Main:				; XREF: Obj88_Index
    5911/    5568 : 0C38 0002 D01A      		cmpi.b	#2,($FFFFD01A).w
    5912/    556E : 6704                		beq.s	Obj88_Main2
    5913/    5570 : 588F                		addq.l	#4,sp
    5914/    5572 : 4E75                		rts	
    5915/    5574 :                     ; ===========================================================================
    5916/    5574 :                     
    5917/    5574 :                     Obj88_Main2:				; XREF: Obj88_Main
    5918/    5574 : 3178 D008 0008      		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
    5919/    557A : 3178 D00C 000C      		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
    5920/    5580 : 2248                		movea.l	a0,a1
    5921/    5582 : 7600                		moveq	#0,d3
    5922/    5584 : 7401                		moveq	#1,d2
    5923/    5586 : 7205                		moveq	#5,d1
    5924/    5588 :                     
    5925/    5588 :                     Obj88_MainLoop:
    5926/    5588 : 12BC 0088           		move.b	#$88,(a1)	; load chaos emerald object
    5927/    558C : 5429 0024           		addq.b	#2,$24(a1)
    5928/    5590 : 237C 0000 5786 0004 		move.l	#Map_obj88,4(a1)
    5929/    5598 : 337C 03C5 0002      		move.w	#$3C5,2(a1)
    5930/    559E : 137C 0004 0001      		move.b	#4,1(a1)
    5931/    55A4 : 137C 0001 0018      		move.b	#1,$18(a1)
    5932/    55AA : 3368 0008 0038      		move.w	8(a0),$38(a1)
    5933/    55B0 : 3368 000C 003A      		move.w	$C(a0),$3A(a1)
    5934/    55B6 : 1342 001C           		move.b	d2,$1C(a1)
    5935/    55BA : 1342 001A           		move.b	d2,$1A(a1)
    5936/    55BE : 5202                		addq.b	#1,d2
    5937/    55C0 : 1343 0026           		move.b	d3,$26(a1)
    5938/    55C4 : 0603 002A           		addi.b	#$2A,d3
    5939/    55C8 : 43E9 0040           		lea	$40(a1),a1
    5940/    55CC : 51C9 FFBA           		dbf	d1,Obj88_MainLoop ; repeat 5 more times
    5941/    55D0 :                     
    5942/    55D0 :                     Obj88_Move:				; XREF: Obj88_Index
    5943/    55D0 : 3028 003E           		move.w	$3E(a0),d0
    5944/    55D4 : D168 0026           		add.w	d0,$26(a0)
    5945/    55D8 : 1028 0026           		move.b	$26(a0),d0
    5946/    55DC : 4EB9 0000 29EA      		jsr	(CalcSine).l
    5947/    55E2 : 7800                		moveq	#0,d4
    5948/    55E4 : 1828 003C           		move.b	$3C(a0),d4
    5949/    55E8 : C3C4                		muls.w	d4,d1
    5950/    55EA : E081                		asr.l	#8,d1
    5951/    55EC : C1C4                		muls.w	d4,d0
    5952/    55EE : E080                		asr.l	#8,d0
    5953/    55F0 : D268 0038           		add.w	$38(a0),d1
    5954/    55F4 : D068 003A           		add.w	$3A(a0),d0
    5955/    55F8 : 3141 0008           		move.w	d1,8(a0)
    5956/    55FC : 3140 000C           		move.w	d0,$C(a0)
    5957/    5600 : 0C68 2000 003C      		cmpi.w	#$2000,$3C(a0)
    5958/    5606 : 6706                		beq.s	loc_55FA
    5959/    5608 : 0668 0020 003C      		addi.w	#$20,$3C(a0)
    5960/    560E :                     
    5961/    560E :                     loc_55FA:
    5962/    560E : 0C68 2000 003E      		cmpi.w	#$2000,$3E(a0)
    5963/    5614 : 6706                		beq.s	loc_5608
    5964/    5616 : 0668 0020 003E      		addi.w	#$20,$3E(a0)
    5965/    561C :                     
    5966/    561C :                     loc_5608:
    5967/    561C : 0C68 0140 003A      		cmpi.w	#$140,$3A(a0)
    5968/    5622 : 6704                		beq.s	locret_5614
    5969/    5624 : 5368 003A           		subq.w	#1,$3A(a0)
    5970/    5628 :                     
    5971/    5628 :                     locret_5614:
    5972/    5628 : 4E75                		rts	
    5973/    562A :                     ; ===========================================================================
    5974/    562A :                     ; ---------------------------------------------------------------------------
    5975/    562A :                     ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
    5976/    562A :                     ; ---------------------------------------------------------------------------
    5977/    562A :                     
    5978/    562A :                     Obj89:					; XREF: Obj_Index
    5979/    562A : 7000                		moveq	#0,d0
    5980/    562C : 1028 0024           		move.b	$24(a0),d0
    5981/    5630 : 323B 0006           		move.w	Obj89_Index(pc,d0.w),d1
    5982/    5634 : 4EFB 1002           		jmp	Obj89_Index(pc,d1.w)
    5983/    5638 :                     ; ===========================================================================
    5984/    5638 : 0006                Obj89_Index:	dc.w Obj89_Main-Obj89_Index
    5985/    563A : 0030                		dc.w Obj89_Move-Obj89_Index
    5986/    563C : 0048                		dc.w Obj89_GotoCredits-Obj89_Index
    5987/    563E :                     ; ===========================================================================
    5988/    563E :                     
    5989/    563E :                     Obj89_Main:				; XREF: Obj89_Index
    5990/    563E : 5428 0024           		addq.b	#2,$24(a0)
    5991/    5642 : 317C FFE0 0008      		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
    5992/    5648 : 317C 00D8 000A      		move.w	#$D8,$A(a0)
    5993/    564E : 217C 0000 57BE 0004 		move.l	#Map_obj89,4(a0)
    5994/    5656 : 317C 05C5 0002      		move.w	#$5C5,2(a0)
    5995/    565C : 117C 0000 0001      		move.b	#0,1(a0)
    5996/    5662 : 117C 0000 0018      		move.b	#0,$18(a0)
    5997/    5668 :                     
    5998/    5668 :                     Obj89_Move:				; XREF: Obj89_Index
    5999/    5668 : 0C68 00C0 0008      		cmpi.w	#$C0,8(a0)	; has object reached $C0?
    6000/    566E : 6706                		beq.s	Obj89_Delay	; if yes, branch
    6001/    5670 : 0668 0010 0008      		addi.w	#$10,8(a0)	; move object to the right
    6002/    5676 :                     ; ===========================================================================
    6003/    5676 :                     
    6004/    5676 :                     Obj89_Delay:				; XREF: Obj89_Move
    6005/    5676 : 5428 0024           		addq.b	#2,$24(a0)
    6006/    567A : 317C 0078 0030      		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
    6007/    5680 :                     
    6008/    5680 :                     Obj89_GotoCredits:			; XREF: Obj89_Index
    6009/    5680 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from duration
    6010/    5684 : 6A06                		bpl.s	Obj89_Display
    6011/    5686 : 11FC 001C F600      		move.b	#$1C,($FFFFF600).w ; exit to credits
    6012/    568C :                     
    6013/    568C :                     Obj89_Display:
    6014/    568C :                     ; ===========================================================================
    6015/    568C :                     ; ---------------------------------------------------------------------------
    6016/    568C :                     ; Sprite mappings - Sonic on the ending	sequence
    6017/    568C :                     ; ---------------------------------------------------------------------------
    6018/    568C :                     Map_obj87:
    6019/    568C :                     		include	"_maps/obj87.asm"
(1)    1/    568C :                     ; ---------------------------------------------------------------------------
(1)    2/    568C :                     ; Sprite mappings - Sonic on the ending	sequence
(1)    3/    568C :                     ; ---------------------------------------------------------------------------
(1)    4/    568C : 0010 001B           		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
(1)    5/    5690 : 002B 0036           		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
(1)    6/    5694 : 0041 004C           		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
(1)    7/    5698 : 005C 0080           		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
(1)    8/    569C : 02                  byte_5690:	dc.b 2
(1)    9/    569D : EC0B 0000 F8        		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
(1)   10/    56A2 : 0C0C 000C F0        		dc.b $C, $C, 0,	$C, $F0
(1)   11/    56A7 : 03                  byte_569B:	dc.b 3
(1)   12/    56A8 : FC0D 0010 F0        		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
(1)   13/    56AD : EC0B 0000 F8        		dc.b $EC, $B, 0, 0, $F8
(1)   14/    56B2 : 0C0C 000C F0        		dc.b $C, $C, 0,	$C, $F0
(1)   15/    56B7 : 02                  byte_56AB:	dc.b 2
(1)   16/    56B8 : EC09 0018 F8        		dc.b $EC, 9, 0,	$18, $F8 ; looking up
(1)   17/    56BD : FC0E 001E F0        		dc.b $FC, $E, 0, $1E, $F0
(1)   18/    56C2 : 02                  byte_56B6:	dc.b 2
(1)   19/    56C3 : EC09 002A F8        		dc.b $EC, 9, 0,	$2A, $F8 ; confused
(1)   20/    56C8 : FC0E 0030 F0        		dc.b $FC, $E, 0, $30, $F0
(1)   21/    56CD : 02                  byte_56C1:	dc.b 2
(1)   22/    56CE : EC09 082A F0        		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
(1)   23/    56D3 : FC0E 0830 F0        		dc.b $FC, $E, 8, $30, $F0
(1)   24/    56D8 : 03                  byte_56CC:	dc.b 3
(1)   25/    56D9 : EC06 003C F0        		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
(1)   26/    56DE : EC06 083C 00        		dc.b $EC, 6, 8,	$3C, 0
(1)   27/    56E3 : 040D 0042 F0        		dc.b 4,	$D, 0, $42, $F0
(1)   28/    56E8 : 07                  byte_56DC:	dc.b 7
(1)   29/    56E9 : B20C 004A F8        		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
(1)   30/    56EE : BA0F 004E F0        		dc.b $BA, $F, 0, $4E, $F0
(1)   31/    56F3 : BA05 005E 10        		dc.b $BA, 5, 0,	$5E, $10
(1)   32/    56F8 : CA02 0062 10        		dc.b $CA, 2, 0,	$62, $10
(1)   33/    56FD : DA0C 0065 F0        		dc.b $DA, $C, 0, $65, $F0
(1)   34/    5702 : E208 0069 F8        		dc.b $E2, 8, 0,	$69, $F8
(1)   35/    5707 : EA05 006C F8        		dc.b $EA, 5, 0,	$6C, $F8
(1)   36/    570C : 18                  byte_5700:	dc.b $18
(1)   37/    570D : 800F 0070 F8        		dc.b $80, $F, 0, $70, $F8 ; leaping #3
(1)   38/    5712 : 900B 0080 E0        		dc.b $90, $B, 0, $80, $E0
(1)   39/    5717 : 900B 008C 18        		dc.b $90, $B, 0, $8C, $18
(1)   40/    571C : 980B 0098 30        		dc.b $98, $B, 0, $98, $30
(1)   41/    5721 : A00F 00A4 58        		dc.b $A0, $F, 0, $A4, $58
(1)   42/    5726 : 8800 00B4 F0        		dc.b $88, 0, 0,	$B4, $F0
(1)   43/    572B : 8005 00B5 18        		dc.b $80, 5, 0,	$B5, $18
(1)   44/    5730 : A00F 00B9 F8        		dc.b $A0, $F, 0, $B9, $F8
(1)   45/    5735 : B00B 00C9 E0        		dc.b $B0, $B, 0, $C9, $E0
(1)   46/    573A : B80F 00D5 38        		dc.b $B8, $F, 0, $D5, $38
(1)   47/    573F : A805 00E5 48        		dc.b $A8, 5, 0,	$E5, $48
(1)   48/    5744 : C002 00E9 58        		dc.b $C0, 2, 0,	$E9, $58
(1)   49/    5749 : C00F 00EC F8        		dc.b $C0, $F, 0, $EC, $F8
(1)   50/    574E : B80F 00FC 18        		dc.b $B8, $F, 0, $FC, $18
(1)   51/    5753 : B008 010C 18        		dc.b $B0, 8, 1,	$C, $18
(1)   52/    5758 : D80D 010F 30        		dc.b $D8, $D, 1, $F, $30
(1)   53/    575D : D808 0117 18        		dc.b $D8, 8, 1,	$17, $18
(1)   54/    5762 : D80F 011A D8        		dc.b $D8, $F, 1, $1A, $D8
(1)   55/    5767 : E00D 012A F8        		dc.b $E0, $D, 1, $2A, $F8
(1)   56/    576C : E000 0132 28        		dc.b $E0, 0, 1,	$32, $28
(1)   57/    5771 : D004 0133 E0        		dc.b $D0, 4, 1,	$33, $E0
(1)   58/    5776 : E805 0135 C8        		dc.b $E8, 5, 1,	$35, $C8
(1)   59/    577B : F80C 0139 C8        		dc.b $F8, $C, 1, $39, $C8
(1)   60/    5780 : F006 013D F8        		dc.b $F0, 6, 1,	$3D, $F8
(1)   61/    5785 : (MACRO)             		align 2
(1)   61/    5785 :  (MACRO-2)                  cnop 0,2
(1)   61/    5785 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   61/    5785 : =$4                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   61/    5786 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
    6020/    5786 :                     
    6021/    5786 :                     ; ---------------------------------------------------------------------------
    6022/    5786 :                     ; Sprite mappings - chaos emeralds on the ending sequence
    6023/    5786 :                     ; ---------------------------------------------------------------------------
    6024/    5786 :                     Map_obj88:
    6025/    5786 :                     		include	"_maps/obj88.asm"
(1)    1/    5786 :                     ; ---------------------------------------------------------------------------
(1)    2/    5786 :                     ; Sprite mappings - chaos emeralds on the ending sequence
(1)    3/    5786 :                     ; ---------------------------------------------------------------------------
(1)    4/    5786 : 000E 0014           		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
(1)    5/    578A : 001A 0020           		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
(1)    6/    578E : 0026 002C           		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
(1)    7/    5792 : 0032                		dc.w byte_57AC-Map_obj88
(1)    8/    5794 : 01                  byte_5788:	dc.b 1
(1)    9/    5795 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   10/    579A : 01                  byte_578E:	dc.b 1
(1)   11/    579B : F805 0004 F8        		dc.b $F8, 5, 0,	4, $F8
(1)   12/    57A0 : 01                  byte_5794:	dc.b 1
(1)   13/    57A1 : F805 4010 F8        		dc.b $F8, 5, $40, $10, $F8
(1)   14/    57A6 : 01                  byte_579A:	dc.b 1
(1)   15/    57A7 : F805 2018 F8        		dc.b $F8, 5, $20, $18, $F8
(1)   16/    57AC : 01                  byte_57A0:	dc.b 1
(1)   17/    57AD : F805 4014 F8        		dc.b $F8, 5, $40, $14, $F8
(1)   18/    57B2 : 01                  byte_57A6:	dc.b 1
(1)   19/    57B3 : F805 0008 F8        		dc.b $F8, 5, 0,	8, $F8
(1)   20/    57B8 : 01                  byte_57AC:	dc.b 1
(1)   21/    57B9 : F805 000C F8        		dc.b $F8, 5, 0,	$C, $F8
(1)   22/    57BE : (MACRO)             		align 2
(1)   22/    57BE :  (MACRO-2)                  cnop 0,2
(1)   22/    57BE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6026/    57BE :                     
    6027/    57BE :                     ; ---------------------------------------------------------------------------
    6028/    57BE :                     ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
    6029/    57BE :                     ; ---------------------------------------------------------------------------
    6030/    57BE :                     Map_obj89:
    6031/    57BE :                     		include	"_maps/obj89.asm"
(1)    1/    57BE :                     ; ---------------------------------------------------------------------------
(1)    2/    57BE :                     ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
(1)    3/    57BE :                     ; ---------------------------------------------------------------------------
(1)    4/    57BE : 0002                		dc.w byte_57B4-Map_obj89
(1)    5/    57C0 : 03                  byte_57B4:	dc.b 3
(1)    6/    57C1 : F00F 0000 D0        		dc.b $F0, $F, 0, 0, $D0
(1)    7/    57C6 : F00F 0010 F0        		dc.b $F0, $F, 0, $10, $F0
(1)    8/    57CB : F00F 0020 10        		dc.b $F0, $F, 0, $20, $10
(1)    9/    57D0 : (MACRO)             		align 2
(1)    9/    57D0 :  (MACRO-2)                  cnop 0,2
(1)    9/    57D0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6032/    57D0 :                     
    6033/    57D0 :                     ; ===========================================================================
    6034/    57D0 :                     ; ---------------------------------------------------------------------------
    6035/    57D0 :                     ; Credits ending sequence
    6036/    57D0 :                     ; ---------------------------------------------------------------------------
    6037/    57D0 :                     
    6038/    57D0 :                     Credits:				; XREF: GameModeArray
    6039/    57D0 : 6100 BE0C           		bsr.w	ClearPLC
    6040/    57D4 : 6100 C68C           		bsr.w	Pal_FadeFrom
    6041/    57D8 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    6042/    57DE : 3CBC 8004           		move.w	#$8004,(a6)
    6043/    57E2 : 3CBC 8230           		move.w	#$8230,(a6)
    6044/    57E6 : 3CBC 8407           		move.w	#$8407,(a6)
    6045/    57EA : 3CBC 9001           		move.w	#$9001,(a6)
    6046/    57EE : 3CBC 9200           		move.w	#$9200,(a6)
    6047/    57F2 : 3CBC 8B03           		move.w	#$8B03,(a6)
    6048/    57F6 : 3CBC 8720           		move.w	#$8720,(a6)
    6049/    57FA : 4238 F64E           		clr.b	($FFFFF64E).w
    6050/    57FE : 6100 BAC4           		bsr.w	ClearScreen
    6051/    5802 : 43F8 D000           		lea	($FFFFD000).w,a1
    6052/    5806 : 7000                		moveq	#0,d0
    6053/    5808 : 323C 07FF           		move.w	#$7FF,d1
    6054/    580C :                     
    6055/    580C :                     Cred_ClrObjRam:
    6056/    580C : 22C0                		move.l	d0,(a1)+
    6057/    580E : 51C9 FFFC           		dbf	d1,Cred_ClrObjRam ; clear object RAM
    6058/    5812 :                     
    6059/    5812 : 23FC 7400 0002 00C0 		move.l	#$74000002,($C00004).l
                    0004                
    6060/    581C : 41F9 0006 2DB8      		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
    6061/    5822 : 6100 BC1C           		bsr.w	NemDec
    6062/    5826 : 43F8 FB80           		lea	($FFFFFB80).w,a1
    6063/    582A : 7000                		moveq	#0,d0
    6064/    582C : 323C 001F           		move.w	#$1F,d1
    6065/    5830 :                     
    6066/    5830 :                     Cred_ClrPallet:
    6067/    5830 : 22C0                		move.l	d0,(a1)+
    6068/    5832 : 51C9 FFFC           		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
    6069/    5836 :                     
    6070/    5836 : 7003                		moveq	#3,d0
    6071/    5838 : 6100 C8D2           		bsr.w	PalLoad1	; load Sonic"s pallet
    6072/    583C : 11FC 008A D080      		move.b	#$8A,($FFFFD080).w ; load credits object
    6073/    5842 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    6074/    5848 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    6075/    584E : 6100 0054           		bsr.w	EndingDemoLoad
    6076/    5852 : 7000                		moveq	#0,d0
    6077/    5854 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    6078/    5858 : E948                		lsl.w	#4,d0
    6079/    585A : 45F9 0001 D838      		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
    6080/    5860 : 45F2 0000           		lea	(a2,d0.w),a2
    6081/    5864 : 7000                		moveq	#0,d0
    6082/    5866 : 1012                		move.b	(a2),d0
    6083/    5868 : 6704                		beq.s	loc_5862
    6084/    586A : 6100 BD14           		bsr.w	LoadPLC		; load level patterns
    6085/    586E :                     
    6086/    586E :                     loc_5862:
    6087/    586E : 7001                		moveq	#1,d0
    6088/    5870 : 6100 BD0E           		bsr.w	LoadPLC		; load standard	level patterns
    6089/    5874 : 31FC 0078 F614      		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
    6090/    587A : 6100 C540           		bsr.w	Pal_FadeTo
    6091/    587E :                     
    6092/    587E :                     Cred_WaitLoop:
    6093/    587E : 11FC 0004 F62A      		move.b	#4,($FFFFF62A).w
    6094/    5884 : 6100 D132           		bsr.w	DelayProgram
    6095/    5888 : 6100 BD62           		bsr.w	RunPLC_RAM
    6096/    588C : 4A78 F614           		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
    6097/    5890 : 66EC                		bne.s	Cred_WaitLoop	; if not, branch
    6098/    5892 : 4AB8 F680           		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
    6099/    5896 : 66E6                		bne.s	Cred_WaitLoop	; if not, branch
    6100/    5898 : 0C78 0009 FFF4      		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
    6101/    589E : 6700 0098           		beq.w	TryAgainEnd	; if yes, branch
    6102/    58A2 : 4E75                		rts	
    6103/    58A4 :                     
    6104/    58A4 :                     ; ---------------------------------------------------------------------------
    6105/    58A4 :                     ; Ending sequence demo loading subroutine
    6106/    58A4 :                     ; ---------------------------------------------------------------------------
    6107/    58A4 :                     
    6108/    58A4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6109/    58A4 :                     
    6110/    58A4 :                     
    6111/    58A4 :                     EndingDemoLoad:				; XREF: Credits
    6112/    58A4 : 3038 FFF4           		move.w	($FFFFFFF4).w,d0
    6113/    58A8 : 0240 000F           		andi.w	#$F,d0
    6114/    58AC : D040                		add.w	d0,d0
    6115/    58AE : 303B 0054           		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
    6116/    58B2 : 31C0 FE10           		move.w	d0,($FFFFFE10).w ; set level from level	array
    6117/    58B6 : 5278 FFF4           		addq.w	#1,($FFFFFFF4).w
    6118/    58BA : 0C78 0009 FFF4      		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
    6119/    58C0 : 6440                		bcc.s	EndDemo_Exit	; if yes, branch
    6120/    58C2 : 31FC 8001 FFF0      		move.w	#$8001,($FFFFFFF0).w ; force demo mode
    6121/    58C8 : 11FC 0008 F600      		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
    6122/    58CE : 11FC 0003 FE12      		move.b	#3,($FFFFFE12).w ; set lives to	3
    6123/    58D4 : 7000                		moveq	#0,d0
    6124/    58D6 : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    6125/    58DA : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    6126/    58DE : 21C0 FE26           		move.l	d0,($FFFFFE26).w ; clear score
    6127/    58E2 : 11C0 FE30           		move.b	d0,($FFFFFE30).w ; clear lamppost counter
    6128/    58E6 : 0C78 0004 FFF4      		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
    6129/    58EC : 6614                		bne.s	EndDemo_Exit	; if not, branch
    6130/    58EE : 43F9 0000 5914      		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
    6131/    58F4 : 45F8 FE30           		lea	($FFFFFE30).w,a2
    6132/    58F8 : 303C 0008           		move.w	#8,d0
    6133/    58FC :                     
    6134/    58FC :                     EndDemo_LampLoad:
    6135/    58FC : 24D9                		move.l	(a1)+,(a2)+
    6136/    58FE : 51C8 FFFC           		dbf	d0,EndDemo_LampLoad
    6137/    5902 :                     
    6138/    5902 :                     EndDemo_Exit:
    6139/    5902 : 4E75                		rts	
    6140/    5904 :                     ; End of function EndingDemoLoad
    6141/    5904 :                     
    6142/    5904 :                     ; ===========================================================================
    6143/    5904 :                     ; ---------------------------------------------------------------------------
    6144/    5904 :                     ; Levels used in the end sequence demos
    6145/    5904 :                     ; ---------------------------------------------------------------------------
    6146/    5904 :                     EndDemo_Levels:	binclude	misc/dm_ord2.bin
    6147/    5914 :                     
    6148/    5914 :                     ; ---------------------------------------------------------------------------
    6149/    5914 :                     ; Lamppost variables in the end sequence demo (Star Light Zone)
    6150/    5914 :                     ; ---------------------------------------------------------------------------
    6151/    5914 :                     EndDemo_LampVar:
    6152/    5914 : 0101                		dc.b 1,	1		; XREF: EndingDemoLoad
    6153/    5916 : 0A00 062C 000D      		dc.w $A00, $62C, $D
    6154/    591C : 0000 0000           		dc.l 0
    6155/    5920 : 0000                		dc.b 0,	0
    6156/    5922 : 0800 0957 05CC 04AB 		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
                    03A6 0000 028C 0000 
                    0000 0308           
    6157/    5936 : 0101                		dc.b 1,	1
    6158/    5938 :                     ; ===========================================================================
    6159/    5938 :                     ; ---------------------------------------------------------------------------
    6160/    5938 :                     ; "TRY AGAIN" and "END"	screens
    6161/    5938 :                     ; ---------------------------------------------------------------------------
    6162/    5938 :                     
    6163/    5938 :                     TryAgainEnd:				; XREF: Credits
    6164/    5938 : 6100 BCA4           		bsr.w	ClearPLC
    6165/    593C : 6100 C524           		bsr.w	Pal_FadeFrom
    6166/    5940 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    6167/    5946 : 3CBC 8004           		move.w	#$8004,(a6)
    6168/    594A : 3CBC 8230           		move.w	#$8230,(a6)
    6169/    594E : 3CBC 8407           		move.w	#$8407,(a6)
    6170/    5952 : 3CBC 9001           		move.w	#$9001,(a6)
    6171/    5956 : 3CBC 9200           		move.w	#$9200,(a6)
    6172/    595A : 3CBC 8B03           		move.w	#$8B03,(a6)
    6173/    595E : 3CBC 8720           		move.w	#$8720,(a6)
    6174/    5962 : 4238 F64E           		clr.b	($FFFFF64E).w
    6175/    5966 : 6100 B95C           		bsr.w	ClearScreen
    6176/    596A : 43F8 D000           		lea	($FFFFD000).w,a1
    6177/    596E : 7000                		moveq	#0,d0
    6178/    5970 : 323C 07FF           		move.w	#$7FF,d1
    6179/    5974 :                     
    6180/    5974 :                     TryAg_ClrObjRam:
    6181/    5974 : 22C0                		move.l	d0,(a1)+
    6182/    5976 : 51C9 FFFC           		dbf	d1,TryAg_ClrObjRam ; clear object RAM
    6183/    597A :                     
    6184/    597A : 701D                		moveq	#$1D,d0
    6185/    597C : 6100 BD6E           		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
    6186/    5980 : 43F8 FB80           		lea	($FFFFFB80).w,a1
    6187/    5984 : 7000                		moveq	#0,d0
    6188/    5986 : 323C 001F           		move.w	#$1F,d1
    6189/    598A :                     
    6190/    598A :                     TryAg_ClrPallet:
    6191/    598A : 22C0                		move.l	d0,(a1)+
    6192/    598C : 51C9 FFFC           		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
    6193/    5990 :                     
    6194/    5990 : 7013                		moveq	#$13,d0
    6195/    5992 : 6100 C778           		bsr.w	PalLoad1	; load ending pallet
    6196/    5996 : 4278 FBC0           		clr.w	($FFFFFBC0).w
    6197/    599A : 11FC 008B D080      		move.b	#$8B,($FFFFD080).w ; load Eggman object
    6198/    59A0 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    6199/    59A6 : 4EB9 0000 D768      		jsr	(BuildSprites).l
    6200/    59AC : 31FC 0708 F614      		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
    6201/    59B2 : 6100 C408           		bsr.w	Pal_FadeTo
    6202/    59B6 :                     
    6203/    59B6 :                     ; ---------------------------------------------------------------------------
    6204/    59B6 :                     ; "TRY AGAIN" and "END"	screen main loop
    6205/    59B6 :                     ; ---------------------------------------------------------------------------
    6206/    59B6 :                     TryAg_MainLoop:
    6207/    59B6 : 6100 B9F0           		bsr.w	PauseGame
    6208/    59BA : 11FC 0004 F62A      		move.b	#4,($FFFFF62A).w
    6209/    59C0 : 6100 CFF6           		bsr.w	DelayProgram
    6210/    59C4 : 4EB9 0000 D442      		jsr	(ObjectsLoad).l
    6211/    59CA : 4EB9 0000 D768      		jsr	(BuildSprites).l
    6212/    59D0 : 0238 0080 F605      		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
    6213/    59D6 : 660E                		bne.s	TryAg_Exit	; if yes, branch
    6214/    59D8 : 4A78 F614           		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
    6215/    59DC : 6708                		beq.s	TryAg_Exit	; if yes, branch
    6216/    59DE : 0C38 001C F600      		cmpi.b	#$1C,($FFFFF600).w
    6217/    59E4 : 67D0                		beq.s	TryAg_MainLoop
    6218/    59E6 :                     
    6219/    59E6 :                     TryAg_Exit:
    6220/    59E6 : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; go to Sega screen
    6221/    59EC : 4E75                		rts	
    6222/    59EE :                     
    6223/    59EE :                     ; ===========================================================================
    6224/    59EE :                     ; ---------------------------------------------------------------------------
    6225/    59EE :                     ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
    6226/    59EE :                     ; ---------------------------------------------------------------------------
    6227/    59EE :                     
    6228/    59EE :                     Obj8B:					; XREF: Obj_Index
    6229/    59EE : 7000                		moveq	#0,d0
    6230/    59F0 : 1028 0024           		move.b	$24(a0),d0
    6231/    59F4 : 323B 000C           		move.w	Obj8B_Index(pc,d0.w),d1
    6232/    59F8 : 4EBB 1008           		jsr	Obj8B_Index(pc,d1.w)
    6233/    59FC : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
    6234/    5A02 :                     ; ===========================================================================
    6235/    5A02 : 0008                Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
    6236/    5A04 : 0058                		dc.w Obj8B_Animate-Obj8B_Index
    6237/    5A06 : 0064                		dc.w Obj8B_Juggle-Obj8B_Index
    6238/    5A08 : 0098                		dc.w loc_5A8E-Obj8B_Index
    6239/    5A0A :                     ; ===========================================================================
    6240/    5A0A :                     
    6241/    5A0A :                     Obj8B_Main:				; XREF: Obj8B_Index
    6242/    5A0A : 5428 0024           		addq.b	#2,$24(a0)
    6243/    5A0E : 317C 0120 0008      		move.w	#$120,8(a0)
    6244/    5A14 : 317C 00F4 000A      		move.w	#$F4,$A(a0)
    6245/    5A1A : 217C 0000 5BC8 0004 		move.l	#Map_obj8B,4(a0)
    6246/    5A22 : 317C 03E1 0002      		move.w	#$3E1,2(a0)
    6247/    5A28 : 117C 0000 0001      		move.b	#0,1(a0)
    6248/    5A2E : 117C 0002 0018      		move.b	#2,$18(a0)
    6249/    5A34 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "END" animation
    6250/    5A3A : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
    6251/    5A40 : 6718                		beq.s	Obj8B_Animate	; if yes, branch
    6252/    5A42 : 11FC 008A D0C0      		move.b	#$8A,($FFFFD0C0).w ; load credits object
    6253/    5A48 : 31FC 0009 FFF4      		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
    6254/    5A4E : 11FC 008C D800      		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
    6255/    5A54 : 117C 0000 001C      		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
    6256/    5A5A :                     
    6257/    5A5A :                     Obj8B_Animate:				; XREF: Obj8B_Index
    6258/    5A5A : 43F9 0000 5AAE      		lea	(Ani_obj8B).l,a1
    6259/    5A60 : 4EF9 0000 A734      		jmp	(AnimateSprite).l
    6260/    5A66 :                     ; ===========================================================================
    6261/    5A66 :                     
    6262/    5A66 :                     Obj8B_Juggle:				; XREF: Obj8B_Index
    6263/    5A66 : 5428 0024           		addq.b	#2,$24(a0)
    6264/    5A6A : 7002                		moveq	#2,d0
    6265/    5A6C : 0828 0000 001C      		btst	#0,$1C(a0)
    6266/    5A72 : 6702                		beq.s	loc_5A6A
    6267/    5A74 : 4440                		neg.w	d0
    6268/    5A76 :                     
    6269/    5A76 :                     loc_5A6A:
    6270/    5A76 : 43F8 D800           		lea	($FFFFD800).w,a1
    6271/    5A7A : 7205                		moveq	#5,d1
    6272/    5A7C :                     
    6273/    5A7C :                     loc_5A70:
    6274/    5A7C : 1340 003E           		move.b	d0,$3E(a1)
    6275/    5A80 : 3400                		move.w	d0,d2
    6276/    5A82 : E742                		asl.w	#3,d2
    6277/    5A84 : D529 0026           		add.b	d2,$26(a1)
    6278/    5A88 : 43E9 0040           		lea	$40(a1),a1
    6279/    5A8C : 51C9 FFEE           		dbf	d1,loc_5A70
    6280/    5A90 : 5228 001A           		addq.b	#1,$1A(a0)
    6281/    5A94 : 317C 0070 0030      		move.w	#112,$30(a0)
    6282/    5A9A :                     
    6283/    5A9A :                     loc_5A8E:				; XREF: Obj8B_Index
    6284/    5A9A : 5368 0030           		subq.w	#1,$30(a0)
    6285/    5A9E : 6A0C                		bpl.s	locret_5AA0
    6286/    5AA0 : 0868 0000 001C      		bchg	#0,$1C(a0)
    6287/    5AA6 : 117C 0002 0024      		move.b	#2,$24(a0)
    6288/    5AAC :                     
    6289/    5AAC :                     locret_5AA0:
    6290/    5AAC : 4E75                		rts	
    6291/    5AAE :                     ; ===========================================================================
    6292/    5AAE :                     Ani_obj8B:
    6293/    5AAE :                     		include	"_anim/obj8B.asm"
(1)    1/    5AAE :                     ; ---------------------------------------------------------------------------
(1)    2/    5AAE :                     ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
(1)    3/    5AAE :                     ; ---------------------------------------------------------------------------
(1)    4/    5AAE : 0006                		dc.w byte_5AA8-Ani_obj8B
(1)    5/    5AB0 : 000A                		dc.w byte_5AAC-Ani_obj8B
(1)    6/    5AB2 : 000E                		dc.w byte_5AB0-Ani_obj8B
(1)    7/    5AB4 : 0500 FC01           byte_5AA8:	dc.b 5,	0, $FC,	1
(1)    8/    5AB8 : 0502 FC03           byte_5AAC:	dc.b 5,	2, $FC,	3
(1)    9/    5ABC : 0704 0506 0504 0506 byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
                    0504 0506 0507 0506 
                    05FF                
(1)   10/    5ACE : (MACRO)             		align 2
(1)   10/    5ACE :  (MACRO-2)                  cnop 0,2
(1)   10/    5ACE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6294/    5ACE :                     
    6295/    5ACE :                     ; ===========================================================================
    6296/    5ACE :                     ; ---------------------------------------------------------------------------
    6297/    5ACE :                     ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
    6298/    5ACE :                     ; ---------------------------------------------------------------------------
    6299/    5ACE :                     
    6300/    5ACE :                     Obj8C:					; XREF: Obj_Index
    6301/    5ACE : 7000                		moveq	#0,d0
    6302/    5AD0 : 1028 0024           		move.b	$24(a0),d0
    6303/    5AD4 : 323B 000C           		move.w	Obj8C_Index(pc,d0.w),d1
    6304/    5AD8 : 4EBB 1008           		jsr	Obj8C_Index(pc,d1.w)
    6305/    5ADC : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
    6306/    5AE2 :                     ; ===========================================================================
    6307/    5AE2 : 0004                Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
    6308/    5AE4 : 0090                		dc.w Obj8C_Move-Obj8C_Index
    6309/    5AE6 :                     ; ===========================================================================
    6310/    5AE6 :                     
    6311/    5AE6 :                     Obj8C_Main:				; XREF: Obj8C_Index
    6312/    5AE6 : 2248                		movea.l	a0,a1
    6313/    5AE8 : 7400                		moveq	#0,d2
    6314/    5AEA : 7600                		moveq	#0,d3
    6315/    5AEC : 7205                		moveq	#5,d1
    6316/    5AEE : 9238 FE57           		sub.b	($FFFFFE57).w,d1
    6317/    5AF2 :                     
    6318/    5AF2 :                     Obj8C_MakeEms:				; XREF: loc_5B42
    6319/    5AF2 : 12BC 008C           		move.b	#$8C,(a1)	; load emerald object
    6320/    5AF6 : 5429 0024           		addq.b	#2,$24(a1)
    6321/    5AFA : 237C 0000 5786 0004 		move.l	#Map_obj88,4(a1)
    6322/    5B02 : 337C 03C5 0002      		move.w	#$3C5,2(a1)
    6323/    5B08 : 137C 0000 0001      		move.b	#0,1(a1)
    6324/    5B0E : 137C 0001 0018      		move.b	#1,$18(a1)
    6325/    5B14 : 337C 0104 0008      		move.w	#$104,8(a1)
    6326/    5B1A : 337C 0120 0038      		move.w	#$120,$38(a1)
    6327/    5B20 : 337C 00EC 000A      		move.w	#$EC,$A(a1)
    6328/    5B26 : 3369 000A 003A      		move.w	$A(a1),$3A(a1)
    6329/    5B2C : 137C 001C 003C      		move.b	#$1C,$3C(a1)
    6330/    5B32 : 47F8 FE58           		lea	($FFFFFE58).w,a3
    6331/    5B36 :                     
    6332/    5B36 :                     Obj8C_ChkEms:
    6333/    5B36 : 7000                		moveq	#0,d0
    6334/    5B38 : 1038 FE57           		move.b	($FFFFFE57).w,d0
    6335/    5B3C : 5340                		subq.w	#1,d0
    6336/    5B3E : 650E                		bcs.s	loc_5B42
    6337/    5B40 :                     
    6338/    5B40 :                     Obj8C_ChkEmLoop:
    6339/    5B40 : B433 0000           		cmp.b	(a3,d0.w),d2
    6340/    5B44 : 6604                		bne.s	loc_5B3E
    6341/    5B46 : 5202                		addq.b	#1,d2
    6342/    5B48 : 60EC                		bra.s	Obj8C_ChkEms
    6343/    5B4A :                     ; ===========================================================================
    6344/    5B4A :                     
    6345/    5B4A :                     loc_5B3E:
    6346/    5B4A : 51C8 FFF4           		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
    6347/    5B4E :                     
    6348/    5B4E :                     loc_5B42:
    6349/    5B4E : 1342 001A           		move.b	d2,$1A(a1)
    6350/    5B52 : 5229 001A           		addq.b	#1,$1A(a1)
    6351/    5B56 : 5202                		addq.b	#1,d2
    6352/    5B58 : 137C 0080 0026      		move.b	#$80,$26(a1)
    6353/    5B5E : 1343 001E           		move.b	d3,$1E(a1)
    6354/    5B62 : 1343 001F           		move.b	d3,$1F(a1)
    6355/    5B66 : 0643 000A           		addi.w	#$A,d3
    6356/    5B6A : 43E9 0040           		lea	$40(a1),a1
    6357/    5B6E : 51C9 FF82           		dbf	d1,Obj8C_MakeEms
    6358/    5B72 :                     
    6359/    5B72 :                     Obj8C_Move:				; XREF: Obj8C_Index
    6360/    5B72 : 4A68 003E           		tst.w	$3E(a0)
    6361/    5B76 : 674E                		beq.s	locret_5BBA
    6362/    5B78 : 4A28 001E           		tst.b	$1E(a0)
    6363/    5B7C : 6706                		beq.s	loc_5B78
    6364/    5B7E : 5328 001E           		subq.b	#1,$1E(a0)
    6365/    5B82 : 6608                		bne.s	loc_5B80
    6366/    5B84 :                     
    6367/    5B84 :                     loc_5B78:
    6368/    5B84 : 3028 003E           		move.w	$3E(a0),d0
    6369/    5B88 : D168 0026           		add.w	d0,$26(a0)
    6370/    5B8C :                     
    6371/    5B8C :                     loc_5B80:
    6372/    5B8C : 1028 0026           		move.b	$26(a0),d0
    6373/    5B90 : 6706                		beq.s	loc_5B8C
    6374/    5B92 : 0C00 0080           		cmpi.b	#$80,d0
    6375/    5B96 : 660A                		bne.s	loc_5B96
    6376/    5B98 :                     
    6377/    5B98 :                     loc_5B8C:
    6378/    5B98 : 4268 003E           		clr.w	$3E(a0)
    6379/    5B9C : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)
    6380/    5BA2 :                     
    6381/    5BA2 :                     loc_5B96:
    6382/    5BA2 : 4EB9 0000 29EA      		jsr	(CalcSine).l
    6383/    5BA8 : 7800                		moveq	#0,d4
    6384/    5BAA : 1828 003C           		move.b	$3C(a0),d4
    6385/    5BAE : C3C4                		muls.w	d4,d1
    6386/    5BB0 : E081                		asr.l	#8,d1
    6387/    5BB2 : C1C4                		muls.w	d4,d0
    6388/    5BB4 : E080                		asr.l	#8,d0
    6389/    5BB6 : D268 0038           		add.w	$38(a0),d1
    6390/    5BBA : D068 003A           		add.w	$3A(a0),d0
    6391/    5BBE : 3141 0008           		move.w	d1,8(a0)
    6392/    5BC2 : 3140 000A           		move.w	d0,$A(a0)
    6393/    5BC6 :                     
    6394/    5BC6 :                     locret_5BBA:
    6395/    5BC6 : 4E75                		rts	
    6396/    5BC8 :                     ; ===========================================================================
    6397/    5BC8 :                     ; ---------------------------------------------------------------------------
    6398/    5BC8 :                     ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
    6399/    5BC8 :                     ; ---------------------------------------------------------------------------
    6400/    5BC8 :                     Map_obj8B:
    6401/    5BC8 :                     		include	"_maps/obj8B.asm"
(1)    1/    5BC8 :                     ; ---------------------------------------------------------------------------
(1)    2/    5BC8 :                     ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
(1)    3/    5BC8 :                     ; ---------------------------------------------------------------------------
(1)    4/    5BC8 : 0010 0039           		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
(1)    5/    5BCC : 0062 008B           		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
(1)    6/    5BD0 : 00B4 00F1           		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
(1)    7/    5BD4 : 0124 0157           		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
(1)    8/    5BD8 : 08                  byte_5BCC:	dc.b 8
(1)    9/    5BD9 : E905 0000 F0        		dc.b $E9, 5, 0,	0, $F0
(1)   10/    5BDE : F90C 0004 E0        		dc.b $F9, $C, 0, 4, $E0
(1)   11/    5BE3 : E904 0008 00        		dc.b $E9, 4, 0,	8, 0
(1)   12/    5BE8 : F10D 000A 00        		dc.b $F1, $D, 0, $A, 0
(1)   13/    5BED : 0106 0023 F0        		dc.b 1,	6, 0, $23, $F0
(1)   14/    5BF2 : 0106 0823 00        		dc.b 1,	6, 8, $23, 0
(1)   15/    5BF7 : 1804 0029 EC        		dc.b $18, 4, 0,	$29, $EC
(1)   16/    5BFC : 1804 0829 04        		dc.b $18, 4, 8,	$29, 4
(1)   17/    5C01 : 08                  byte_5BF5:	dc.b 8
(1)   18/    5C02 : E80D 0012 E0        		dc.b $E8, $D, 0, $12, $E0
(1)   19/    5C07 : F808 001A E8        		dc.b $F8, 8, 0,	$1A, $E8
(1)   20/    5C0C : E805 0800 00        		dc.b $E8, 5, 8,	0, 0
(1)   21/    5C11 : F80C 0804 00        		dc.b $F8, $C, 8, 4, 0
(1)   22/    5C16 : 0006 001D F0        		dc.b 0,	6, 0, $1D, $F0
(1)   23/    5C1B : 0006 081D 00        		dc.b 0,	6, 8, $1D, 0
(1)   24/    5C20 : 1804 0029 EC        		dc.b $18, 4, 0,	$29, $EC
(1)   25/    5C25 : 1804 0829 04        		dc.b $18, 4, 8,	$29, 4
(1)   26/    5C2A : 08                  byte_5C1E:	dc.b 8
(1)   27/    5C2B : E904 0808 F0        		dc.b $E9, 4, 8,	8, $F0
(1)   28/    5C30 : F10D 080A E0        		dc.b $F1, $D, 8, $A, $E0
(1)   29/    5C35 : E905 0800 00        		dc.b $E9, 5, 8,	0, 0
(1)   30/    5C3A : F90C 0804 00        		dc.b $F9, $C, 8, 4, 0
(1)   31/    5C3F : 0106 0023 F0        		dc.b 1,	6, 0, $23, $F0
(1)   32/    5C44 : 0106 0823 00        		dc.b 1,	6, 8, $23, 0
(1)   33/    5C49 : 1804 0029 EC        		dc.b $18, 4, 0,	$29, $EC
(1)   34/    5C4E : 1804 0829 04        		dc.b $18, 4, 8,	$29, 4
(1)   35/    5C53 : 08                  byte_5C47:	dc.b 8
(1)   36/    5C54 : E805 0000 F0        		dc.b $E8, 5, 0,	0, $F0
(1)   37/    5C59 : F80C 0004 E0        		dc.b $F8, $C, 0, 4, $E0
(1)   38/    5C5E : E80D 0812 00        		dc.b $E8, $D, 8, $12, 0
(1)   39/    5C63 : F808 081A 00        		dc.b $F8, 8, 8,	$1A, 0
(1)   40/    5C68 : 0006 001D F0        		dc.b 0,	6, 0, $1D, $F0
(1)   41/    5C6D : 0006 081D 00        		dc.b 0,	6, 8, $1D, 0
(1)   42/    5C72 : 1804 0029 EC        		dc.b $18, 4, 0,	$29, $EC
(1)   43/    5C77 : 1804 0829 04        		dc.b $18, 4, 8,	$29, 4
(1)   44/    5C7C : 0C                  byte_5C70:	dc.b $C
(1)   45/    5C7D : ED0A 002B E8        		dc.b $ED, $A, 0, $2B, $E8
(1)   46/    5C82 : F500 0034 E0        		dc.b $F5, 0, 0,	$34, $E0
(1)   47/    5C87 : 0504 0035 F0        		dc.b 5,	4, 0, $35, $F0
(1)   48/    5C8C : 0D08 0037 E8        		dc.b $D, 8, 0, $37, $E8
(1)   49/    5C91 : ED0A 082B 00        		dc.b $ED, $A, 8, $2B, 0
(1)   50/    5C96 : F500 0834 18        		dc.b $F5, 0, 8,	$34, $18
(1)   51/    5C9B : 0504 0835 00        		dc.b 5,	4, 8, $35, 0
(1)   52/    5CA0 : 0D08 0837 00        		dc.b $D, 8, 8, $37, 0
(1)   53/    5CA5 : 100D 0073 E0        		dc.b $10, $D, 0, $73, $E0
(1)   54/    5CAA : 100D 007B 00        		dc.b $10, $D, 0, $7B, 0
(1)   55/    5CAF : 1C0C 005B E0        		dc.b $1C, $C, 0, $5B, $E0
(1)   56/    5CB4 : 1C0C 085B 00        		dc.b $1C, $C, 8, $5B, 0
(1)   57/    5CB9 : 0A                  byte_5CAD:	dc.b $A
(1)   58/    5CBA : D207 003A F0        		dc.b $D2, 7, 0,	$3A, $F0
(1)   59/    5CBF : DA00 0042 E8        		dc.b $DA, 0, 0,	$42, $E8
(1)   60/    5CC4 : F207 0043 F0        		dc.b $F2, 7, 0,	$43, $F0
(1)   61/    5CC9 : D207 083A 00        		dc.b $D2, 7, 8,	$3A, 0
(1)   62/    5CCE : DA00 0842 10        		dc.b $DA, 0, 8,	$42, $10
(1)   63/    5CD3 : F207 0843 00        		dc.b $F2, 7, 8,	$43, 0
(1)   64/    5CD8 : 100D 0067 E8        		dc.b $10, $D, 0, $67, $E8
(1)   65/    5CDD : 1005 006F 08        		dc.b $10, 5, 0,	$6F, 8
(1)   66/    5CE2 : 1C0C 005F E0        		dc.b $1C, $C, 0, $5F, $E0
(1)   67/    5CE7 : 1C0C 085F 00        		dc.b $1C, $C, 8, $5F, 0
(1)   68/    5CEC : 0A                  byte_5CE0:	dc.b $A
(1)   69/    5CED : C40B 004B E8        		dc.b $C4, $B, 0, $4B, $E8
(1)   70/    5CF2 : E408 0057 E8        		dc.b $E4, 8, 0,	$57, $E8
(1)   71/    5CF7 : EC00 005A F0        		dc.b $EC, 0, 0,	$5A, $F0
(1)   72/    5CFC : C40B 084B 00        		dc.b $C4, $B, 8, $4B, 0
(1)   73/    5D01 : E408 0857 00        		dc.b $E4, 8, 8,	$57, 0
(1)   74/    5D06 : EC00 085A 08        		dc.b $EC, 0, 8,	$5A, 8
(1)   75/    5D0B : 100D 0067 E8        		dc.b $10, $D, 0, $67, $E8
(1)   76/    5D10 : 1005 006F 08        		dc.b $10, 5, 0,	$6F, 8
(1)   77/    5D15 : 1C0C 0063 E0        		dc.b $1C, $C, 0, $63, $E0
(1)   78/    5D1A : 1C0C 0863 00        		dc.b $1C, $C, 8, $63, 0
(1)   79/    5D1F : 0C                  byte_5D13:	dc.b $C
(1)   80/    5D20 : F40A 002B E8        		dc.b $F4, $A, 0, $2B, $E8
(1)   81/    5D25 : FC00 0034 E0        		dc.b $FC, 0, 0,	$34, $E0
(1)   82/    5D2A : 0C04 0035 F0        		dc.b $C, 4, 0, $35, $F0
(1)   83/    5D2F : 1408 0037 E8        		dc.b $14, 8, 0,	$37, $E8
(1)   84/    5D34 : F40A 082B 00        		dc.b $F4, $A, 8, $2B, 0
(1)   85/    5D39 : FC00 0834 18        		dc.b $FC, 0, 8,	$34, $18
(1)   86/    5D3E : 0C04 0835 00        		dc.b $C, 4, 8, $35, 0
(1)   87/    5D43 : 1408 0837 00        		dc.b $14, 8, 8,	$37, 0
(1)   88/    5D48 : 180C 0083 E0        		dc.b $18, $C, 0, $83, $E0
(1)   89/    5D4D : 180C 0087 00        		dc.b $18, $C, 0, $87, 0
(1)   90/    5D52 : 1C0C 005B E0        		dc.b $1C, $C, 0, $5B, $E0
(1)   91/    5D57 : 1C0C 085B 00        		dc.b $1C, $C, 8, $5B, 0
(1)   92/    5D5C : (MACRO)             		align 2
(1)   92/    5D5C :  (MACRO-2)                  cnop 0,2
(1)   92/    5D5C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6402/    5D5C :                     
    6403/    5D5C :                     ; ---------------------------------------------------------------------------
    6404/    5D5C :                     ; Ending sequence demos
    6405/    5D5C :                     ; ---------------------------------------------------------------------------
    6406/    5D5C :                     Demo_EndGHZ1:	binclude	demodata/e_ghz1.bin
    6407/    5D8A : (MACRO)             		align 2
    6407/    5D8A :  (MACRO-2)                  cnop 0,2
    6407/    5D8A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6408/    5D8A :                     Demo_EndMZ:	binclude	demodata/e_mz.bin
    6409/    5DCA : (MACRO)             		align 2
    6409/    5DCA :  (MACRO-2)                  cnop 0,2
    6409/    5DCA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6410/    5DCA :                     Demo_EndSYZ:	binclude	demodata/e_syz.bin
    6411/    5DFA : (MACRO)             		align 2
    6411/    5DFA :  (MACRO-2)                  cnop 0,2
    6411/    5DFA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6412/    5DFA :                     Demo_EndLZ:	binclude	demodata/e_lz.bin
    6413/    5E2A : (MACRO)             		align 2
    6413/    5E2A :  (MACRO-2)                  cnop 0,2
    6413/    5E2A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6414/    5E2A :                     Demo_EndSLZ:	binclude	demodata/e_slz.bin
    6415/    5E4A : (MACRO)             		align 2
    6415/    5E4A :  (MACRO-2)                  cnop 0,2
    6415/    5E4A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6416/    5E4A :                     Demo_EndSBZ1:	binclude	demodata/e_sbz1.bin
    6417/    5E6A : (MACRO)             		align 2
    6417/    5E6A :  (MACRO-2)                  cnop 0,2
    6417/    5E6A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6418/    5E6A :                     Demo_EndSBZ2:	binclude	demodata/e_sbz2.bin
    6419/    5E9A : (MACRO)             		align 2
    6419/    5E9A :  (MACRO-2)                  cnop 0,2
    6419/    5E9A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6420/    5E9A :                     Demo_EndGHZ2:	binclude	demodata/e_ghz2.bin
    6421/    5ECA : (MACRO)             		align 2
    6421/    5ECA :  (MACRO-2)                  cnop 0,2
    6421/    5ECA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6422/    5ECA :                     
    6423/    5ECA :                     ; ---------------------------------------------------------------------------
    6424/    5ECA :                     ; Subroutine to	load level boundaries and start	locations
    6425/    5ECA :                     ; ---------------------------------------------------------------------------
    6426/    5ECA :                     
    6427/    5ECA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6428/    5ECA :                     
    6429/    5ECA :                     
    6430/    5ECA :                     LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
    6431/    5ECA : 7000                		moveq	#0,d0
    6432/    5ECC : 11C0 F740           		move.b	d0,($FFFFF740).w
    6433/    5ED0 : 11C0 F741           		move.b	d0,($FFFFF741).w
    6434/    5ED4 : 11C0 F746           		move.b	d0,($FFFFF746).w
    6435/    5ED8 : 11C0 F748           		move.b	d0,($FFFFF748).w
    6436/    5EDC : 11C0 F742           		move.b	d0,($FFFFF742).w
    6437/    5EE0 : 3038 FE10           		move.w	($FFFFFE10).w,d0
    6438/    5EE4 : ED08                		lsl.b	#6,d0
    6439/    5EE6 : E848                		lsr.w	#4,d0
    6440/    5EE8 : 3200                		move.w	d0,d1
    6441/    5EEA : D040                		add.w	d0,d0
    6442/    5EEC : D041                		add.w	d1,d0
    6443/    5EEE : 41FB 0038           		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
    6444/    5EF2 : 3018                		move.w	(a0)+,d0
    6445/    5EF4 : 31C0 F730           		move.w	d0,($FFFFF730).w
    6446/    5EF8 : 2018                		move.l	(a0)+,d0
    6447/    5EFA : 21C0 F728           		move.l	d0,($FFFFF728).w
    6448/    5EFE : 21C0 F720           		move.l	d0,($FFFFF720).w
    6449/    5F02 : 2018                		move.l	(a0)+,d0
    6450/    5F04 : 21C0 F72C           		move.l	d0,($FFFFF72C).w
    6451/    5F08 : 21C0 F724           		move.l	d0,($FFFFF724).w
    6452/    5F0C : 3038 F728           		move.w	($FFFFF728).w,d0
    6453/    5F10 : 0640 0240           		addi.w	#$240,d0
    6454/    5F14 : 31C0 F732           		move.w	d0,($FFFFF732).w
    6455/    5F18 : 31FC 1010 F74A      		move.w	#$1010,($FFFFF74A).w
    6456/    5F1E : 3018                		move.w	(a0)+,d0
    6457/    5F20 : 31C0 F73E           		move.w	d0,($FFFFF73E).w
    6458/    5F24 : 6000 0172           		bra.w	LevSz_ChkLamp
    6459/    5F28 :                     ; ===========================================================================
    6460/    5F28 :                     ; ---------------------------------------------------------------------------
    6461/    5F28 :                     ; Level size array and ending start location array
    6462/    5F28 :                     ; ---------------------------------------------------------------------------
    6463/    5F28 :                     LevelSizeArray:	binclude	misc/lvl_size.bin
    6464/    6078 : (MACRO)             		align 2
    6464/    6078 :  (MACRO-2)                  cnop 0,2
    6464/    6078 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6465/    6078 :                     
    6466/    6078 :                     EndingStLocArray:
    6467/    6078 :                     		binclude	misc/sloc_end.bin
    6468/    6098 : (MACRO)             		align 2
    6468/    6098 :  (MACRO-2)                  cnop 0,2
    6468/    6098 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6469/    6098 :                     
    6470/    6098 :                     ; ===========================================================================
    6471/    6098 :                     
    6472/    6098 :                     LevSz_ChkLamp:				; XREF: LevelSizeLoad
    6473/    6098 : 4A38 FE30           		tst.b	($FFFFFE30).w	; have any lampposts been hit?
    6474/    609C : 6710                		beq.s	LevSz_StartLoc	; if not, branch
    6475/    609E : 4EB9 0001 72C8      		jsr	(Obj79_LoadInfo).l
    6476/    60A4 : 3238 D008           		move.w	($FFFFD008).w,d1
    6477/    60A8 : 3038 D00C           		move.w	($FFFFD00C).w,d0
    6478/    60AC : 602E                		bra.s	loc_60D0
    6479/    60AE :                     ; ===========================================================================
    6480/    60AE :                     
    6481/    60AE :                     LevSz_StartLoc:				; XREF: LevelSizeLoad
    6482/    60AE : 3038 FE10           		move.w	($FFFFFE10).w,d0
    6483/    60B2 : ED08                		lsl.b	#6,d0
    6484/    60B4 : E848                		lsr.w	#4,d0
    6485/    60B6 : 43FB 0066           		lea	StartLocArray(pc,d0.w),a1 ; load Sonic"s start location
    6486/    60BA : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    6487/    60BE : 6A0C                		bpl.s	LevSz_SonicPos	; if not, branch
    6488/    60C0 : 3038 FFF4           		move.w	($FFFFFFF4).w,d0
    6489/    60C4 : 5340                		subq.w	#1,d0
    6490/    60C6 : E548                		lsl.w	#2,d0
    6491/    60C8 : 43FB 00AE           		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic"s start location
    6492/    60CC :                     
    6493/    60CC :                     LevSz_SonicPos:
    6494/    60CC : 7200                		moveq	#0,d1
    6495/    60CE : 3219                		move.w	(a1)+,d1
    6496/    60D0 : 31C1 D008           		move.w	d1,($FFFFD008).w ; set Sonic"s position on x-axis
    6497/    60D4 : 7000                		moveq	#0,d0
    6498/    60D6 : 3011                		move.w	(a1),d0
    6499/    60D8 : 31C0 D00C           		move.w	d0,($FFFFD00C).w ; set Sonic"s position on y-axis
    6500/    60DC :                     
    6501/    60DC :                     loc_60D0:				; XREF: LevSz_ChkLamp
    6502/    60DC : 0441 00A0           		subi.w	#$A0,d1
    6503/    60E0 : 6402                		bcc.s	loc_60D8
    6504/    60E2 : 7200                		moveq	#0,d1
    6505/    60E4 :                     
    6506/    60E4 :                     loc_60D8:
    6507/    60E4 : 3438 F72A           		move.w	($FFFFF72A).w,d2
    6508/    60E8 : B242                		cmp.w	d2,d1
    6509/    60EA : 6502                		bcs.s	loc_60E2
    6510/    60EC : 3202                		move.w	d2,d1
    6511/    60EE :                     
    6512/    60EE :                     loc_60E2:
    6513/    60EE : 31C1 F700           		move.w	d1,($FFFFF700).w
    6514/    60F2 : 0440 0060           		subi.w	#$60,d0
    6515/    60F6 : 6402                		bcc.s	loc_60EE
    6516/    60F8 : 7000                		moveq	#0,d0
    6517/    60FA :                     
    6518/    60FA :                     loc_60EE:
    6519/    60FA : B078 F72E           		cmp.w	($FFFFF72E).w,d0
    6520/    60FE : 6D04                		blt.s	loc_60F8
    6521/    6100 : 3038 F72E           		move.w	($FFFFF72E).w,d0
    6522/    6104 :                     
    6523/    6104 :                     loc_60F8:
    6524/    6104 : 31C0 F704           		move.w	d0,($FFFFF704).w
    6525/    6108 : 6100 00EE           		bsr.w	BgScrollSpeed
    6526/    610C : 7000                		moveq	#0,d0
    6527/    610E : 1038 FE10           		move.b	($FFFFFE10).w,d0
    6528/    6112 : E508                		lsl.b	#2,d0
    6529/    6114 : 21FB 0078 F7AC      		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
    6530/    611A : 6000 008E           		bra.w	LevSz_Unk
    6531/    611E :                     ; ===========================================================================
    6532/    611E :                     ; ---------------------------------------------------------------------------
    6533/    611E :                     ; Sonic	start location array
    6534/    611E :                     ; ---------------------------------------------------------------------------
    6535/    611E :                     StartLocArray:	binclude	misc/sloc_lev.bin
    6536/    618E : (MACRO)             		align 2
    6536/    618E :  (MACRO-2)                  cnop 0,2
    6536/    618E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6537/    618E :                     
    6538/    618E :                     ; ---------------------------------------------------------------------------
    6539/    618E :                     ; Which	256x256	tiles contain loops or roll-tunnels
    6540/    618E :                     ; ---------------------------------------------------------------------------
    6541/    618E :                     ; Format - 4 bytes per zone, referring to which 256x256 evoke special align 2ts:
    6542/    618E :                     ; loop,	loop, tunnel, tunnel
    6543/    618E :                     ; ---------------------------------------------------------------------------
    6544/    618E :                     LoopTileNums:	binclude	misc/loopnums.bin
    6545/    61AA : (MACRO)             		align 2
    6545/    61AA :  (MACRO-2)                  cnop 0,2
    6545/    61AA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    6546/    61AA :                     
    6547/    61AA :                     ; ===========================================================================
    6548/    61AA :                     
    6549/    61AA :                     LevSz_Unk:				; XREF: LevelSizeLoad
    6550/    61AA : 7000                		moveq	#0,d0
    6551/    61AC : 1038 FE10           		move.b	($FFFFFE10).w,d0
    6552/    61B0 : E748                		lsl.w	#3,d0
    6553/    61B2 : 43FB 000C           		lea	dword_61B4(pc,d0.w),a1
    6554/    61B6 : 45F8 F7F0           		lea	($FFFFF7F0).w,a2
    6555/    61BA : 24D9                		move.l	(a1)+,(a2)+
    6556/    61BC : 24D9                		move.l	(a1)+,(a2)+
    6557/    61BE : 4E75                		rts	
    6558/    61C0 :                     ; End of function LevelSizeLoad
    6559/    61C0 :                     
    6560/    61C0 :                     ; ===========================================================================
    6561/    61C0 : 0070 0100 0100 0100 dword_61B4:	dc.l $700100, $1000100
    6562/    61C8 : 0800 0100 0100 0000 		dc.l $8000100, $1000000
    6563/    61D0 : 0800 0100 0100 0000 		dc.l $8000100, $1000000
    6564/    61D8 : 0800 0100 0100 0000 		dc.l $8000100, $1000000
    6565/    61E0 : 0800 0100 0100 0000 		dc.l $8000100, $1000000
    6566/    61E8 : 0800 0100 0100 0000 		dc.l $8000100, $1000000
    6567/    61F0 : 0070 0100 0100 0100 		dc.l $700100, $1000100
    6568/    61F8 :                     
    6569/    61F8 :                     ; ---------------------------------------------------------------------------
    6570/    61F8 :                     ; Subroutine to	set scroll speed of some backgrounds
    6571/    61F8 :                     ; ---------------------------------------------------------------------------
    6572/    61F8 :                     
    6573/    61F8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6574/    61F8 :                     
    6575/    61F8 :                     
    6576/    61F8 :                     BgScrollSpeed:				; XREF: LevelSizeLoad
    6577/    61F8 : 4A38 FE30           		tst.b	($FFFFFE30).w
    6578/    61FC : 6614                		bne.s	loc_6206
    6579/    61FE : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    6580/    6202 : 31C0 F714           		move.w	d0,($FFFFF714).w
    6581/    6206 : 31C1 F708           		move.w	d1,($FFFFF708).w
    6582/    620A : 31C1 F710           		move.w	d1,($FFFFF710).w
    6583/    620E : 31C1 F718           		move.w	d1,($FFFFF718).w
    6584/    6212 :                     
    6585/    6212 :                     loc_6206:
    6586/    6212 : 7400                		moveq	#0,d2
    6587/    6214 : 1438 FE10           		move.b	($FFFFFE10).w,d2
    6588/    6218 : D442                		add.w	d2,d2
    6589/    621A : 343B 2006           		move.w	BgScroll_Index(pc,d2.w),d2
    6590/    621E : 4EFB 2002           		jmp	BgScroll_Index(pc,d2.w)
    6591/    6222 :                     ; End of function BgScrollSpeed
    6592/    6222 :                     
    6593/    6222 :                     ; ===========================================================================
    6594/    6222 : 000E 0012           BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
    6595/    6226 : 001A 001C           		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
    6596/    622A : 0028 003C           		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
    6597/    622E : 0048                		dc.w BgScroll_End-BgScroll_Index
    6598/    6230 :                     ; ===========================================================================
    6599/    6230 :                     
    6600/    6230 :                     BgScroll_GHZ:				; XREF: BgScroll_Index
    6601/    6230 : 6000 00C6           		bra.w	Deform_GHZ
    6602/    6234 :                     ; ===========================================================================
    6603/    6234 :                     
    6604/    6234 :                     BgScroll_LZ:				; XREF: BgScroll_Index
    6605/    6234 : E280                		asr.l	#1,d0
    6606/    6236 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    6607/    623A : 4E75                		rts	
    6608/    623C :                     ; ===========================================================================
    6609/    623C :                     
    6610/    623C :                     BgScroll_MZ:				; XREF: BgScroll_Index
    6611/    623C : 4E75                		rts	
    6612/    623E :                     ; ===========================================================================
    6613/    623E :                     
    6614/    623E :                     BgScroll_SLZ:				; XREF: BgScroll_Index
    6615/    623E : E280                		asr.l	#1,d0
    6616/    6240 : 0640 00C0           		addi.w	#$C0,d0
    6617/    6244 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    6618/    6248 : 4E75                		rts	
    6619/    624A :                     ; ===========================================================================
    6620/    624A :                     
    6621/    624A :                     BgScroll_SYZ:				; XREF: BgScroll_Index
    6622/    624A : E980                		asl.l	#4,d0
    6623/    624C : 2400                		move.l	d0,d2
    6624/    624E : E380                		asl.l	#1,d0
    6625/    6250 : D082                		add.l	d2,d0
    6626/    6252 : E080                		asr.l	#8,d0
    6627/    6254 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    6628/    6258 : 31C0 F714           		move.w	d0,($FFFFF714).w
    6629/    625C : 4E75                		rts	
    6630/    625E :                     ; ===========================================================================
    6631/    625E :                     
    6632/    625E :                     BgScroll_SBZ:				; XREF: BgScroll_Index
    6633/    625E : E980                		asl.l	#4,d0
    6634/    6260 : E380                		asl.l	#1,d0
    6635/    6262 : E080                		asr.l	#8,d0
    6636/    6264 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    6637/    6268 : 4E75                		rts	
    6638/    626A :                     ; ===========================================================================
    6639/    626A :                     
    6640/    626A :                     BgScroll_End:				; XREF: BgScroll_Index
    6641/    626A : 31FC 001E F70C      		move.w	#$1E,($FFFFF70C).w
    6642/    6270 : 31FC 001E F714      		move.w	#$1E,($FFFFF714).w
    6643/    6276 : 4E75                		rts	
    6644/    6278 :                     ; ===========================================================================
    6645/    6278 : 31FC 00A8 F708      		move.w	#$A8,($FFFFF708).w
    6646/    627E : 31FC 001E F70C      		move.w	#$1E,($FFFFF70C).w
    6647/    6284 : 31FC FFC0 F710      		move.w	#-$40,($FFFFF710).w
    6648/    628A : 31FC 001E F714      		move.w	#$1E,($FFFFF714).w
    6649/    6290 : 4E75                		rts
    6650/    6292 :                     
    6651/    6292 :                     ; ---------------------------------------------------------------------------
    6652/    6292 :                     ; Background layer deformation subroutines
    6653/    6292 :                     ; ---------------------------------------------------------------------------
    6654/    6292 :                     
    6655/    6292 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6656/    6292 :                     
    6657/    6292 :                     
    6658/    6292 :                     DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
    6659/    6292 : 4A38 F744           		tst.b	($FFFFF744).w
    6660/    6296 : 6702                		beq.s	loc_628E
    6661/    6298 : 4E75                		rts	
    6662/    629A :                     ; ===========================================================================
    6663/    629A :                     
    6664/    629A :                     loc_628E:
    6665/    629A : 4278 F754           		clr.w	($FFFFF754).w
    6666/    629E : 4278 F756           		clr.w	($FFFFF756).w
    6667/    62A2 : 4278 F758           		clr.w	($FFFFF758).w
    6668/    62A6 : 4278 F75A           		clr.w	($FFFFF75A).w
    6669/    62AA : 6100 02DE           		bsr.w	ScrollHoriz
    6670/    62AE : 6100 0372           		bsr.w	ScrollVertical
    6671/    62B2 : 6100 0AC4           		bsr.w	DynScrResizeLoad
    6672/    62B6 : 31F8 F700 F61A      		move.w	($FFFFF700).w,($FFFFF61A).w
    6673/    62BC : 31F8 F704 F616      		move.w	($FFFFF704).w,($FFFFF616).w
    6674/    62C2 : 31F8 F708 F61C      		move.w	($FFFFF708).w,($FFFFF61C).w
    6675/    62C8 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6676/    62CE : 31F8 F718 F620      		move.w	($FFFFF718).w,($FFFFF620).w
    6677/    62D4 : 31F8 F71C F61E      		move.w	($FFFFF71C).w,($FFFFF61E).w
    6678/    62DA : 7000                		moveq	#0,d0
    6679/    62DC : 1038 FE10           		move.b	($FFFFFE10).w,d0
    6680/    62E0 : D040                		add.w	d0,d0
    6681/    62E2 : 303B 0006           		move.w	Deform_Index(pc,d0.w),d0
    6682/    62E6 : 4EFB 0002           		jmp	Deform_Index(pc,d0.w)
    6683/    62EA :                     ; End of function DeformBgLayer
    6684/    62EA :                     
    6685/    62EA :                     ; ===========================================================================
    6686/    62EA :                     ; ---------------------------------------------------------------------------
    6687/    62EA :                     ; Offset index for background layer deformation	code
    6688/    62EA :                     ; ---------------------------------------------------------------------------
    6689/    62EA : 000E 00B8           Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
    6690/    62EE : 00F8 0150           		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
    6691/    62F2 : 0228 0266           		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
    6692/    62F6 : 000E                		dc.w Deform_GHZ-Deform_Index
    6693/    62F8 :                     ; ---------------------------------------------------------------------------
    6694/    62F8 :                     ; Green	Hill Zone background layer deformation code
    6695/    62F8 :                     ; ---------------------------------------------------------------------------
    6696/    62F8 :                     
    6697/    62F8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6698/    62F8 :                     
    6699/    62F8 :                     
    6700/    62F8 :                     Deform_GHZ:				; XREF: Deform_Index
    6701/    62F8 : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6702/    62FC : 48C4                		ext.l	d4
    6703/    62FE : EB84                		asl.l	#5,d4
    6704/    6300 : 2204                		move.l	d4,d1
    6705/    6302 : E384                		asl.l	#1,d4
    6706/    6304 : D881                		add.l	d1,d4
    6707/    6306 : 7A00                		moveq	#0,d5
    6708/    6308 : 6100 046A           		bsr.w	ScrollBlock1
    6709/    630C : 6100 0542           		bsr.w	ScrollBlock4
    6710/    6310 : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6711/    6314 : 3038 F704           		move.w	($FFFFF704).w,d0
    6712/    6318 : 0240 07FF           		andi.w	#$7FF,d0
    6713/    631C : EA48                		lsr.w	#5,d0
    6714/    631E : 4440                		neg.w	d0
    6715/    6320 : 0640 0026           		addi.w	#$26,d0
    6716/    6324 : 31C0 F714           		move.w	d0,($FFFFF714).w
    6717/    6328 : 3800                		move.w	d0,d4
    6718/    632A : 6100 04F4           		bsr.w	ScrollBlock3
    6719/    632E : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6720/    6334 : 323C 006F           		move.w	#$6F,d1
    6721/    6338 : 9244                		sub.w	d4,d1
    6722/    633A : 3038 F700           		move.w	($FFFFF700).w,d0
    6723/    633E : 0C38 0004 F600      		cmpi.b	#4,($FFFFF600).w
    6724/    6344 : 6602                		bne.s	loc_633C
    6725/    6346 : 7000                		moveq	#0,d0
    6726/    6348 :                     
    6727/    6348 :                     loc_633C:
    6728/    6348 : 4440                		neg.w	d0
    6729/    634A : 4840                		swap	d0
    6730/    634C : 3038 F708           		move.w	($FFFFF708).w,d0
    6731/    6350 : 4440                		neg.w	d0
    6732/    6352 :                     
    6733/    6352 :                     loc_6346:
    6734/    6352 : 22C0                		move.l	d0,(a1)+
    6735/    6354 : 51C9 FFFC           		dbf	d1,loc_6346
    6736/    6358 : 323C 0027           		move.w	#$27,d1
    6737/    635C : 3038 F710           		move.w	($FFFFF710).w,d0
    6738/    6360 : 4440                		neg.w	d0
    6739/    6362 :                     
    6740/    6362 :                     loc_6356:
    6741/    6362 : 22C0                		move.l	d0,(a1)+
    6742/    6364 : 51C9 FFFC           		dbf	d1,loc_6356
    6743/    6368 : 3038 F710           		move.w	($FFFFF710).w,d0
    6744/    636C : 0640 0000           		addi.w	#0,d0
    6745/    6370 : 3438 F700           		move.w	($FFFFF700).w,d2
    6746/    6374 : 0642 FE00           		addi.w	#-$200,d2
    6747/    6378 : 9440                		sub.w	d0,d2
    6748/    637A : 48C2                		ext.l	d2
    6749/    637C : E182                		asl.l	#8,d2
    6750/    637E : 85FC 0068           		divs.w	#$68,d2
    6751/    6382 : 48C2                		ext.l	d2
    6752/    6384 : E182                		asl.l	#8,d2
    6753/    6386 : 7600                		moveq	#0,d3
    6754/    6388 : 3600                		move.w	d0,d3
    6755/    638A : 323C 0047           		move.w	#$47,d1
    6756/    638E : D244                		add.w	d4,d1
    6757/    6390 :                     
    6758/    6390 :                     loc_6384:
    6759/    6390 : 3003                		move.w	d3,d0
    6760/    6392 : 4440                		neg.w	d0
    6761/    6394 : 22C0                		move.l	d0,(a1)+
    6762/    6396 : 4843                		swap	d3
    6763/    6398 : D682                		add.l	d2,d3
    6764/    639A : 4843                		swap	d3
    6765/    639C : 51C9 FFF2           		dbf	d1,loc_6384
    6766/    63A0 : 4E75                		rts	
    6767/    63A2 :                     ; End of function Deform_GHZ
    6768/    63A2 :                     
    6769/    63A2 :                     ; ---------------------------------------------------------------------------
    6770/    63A2 :                     ; Labyrinth Zone background layer deformation code
    6771/    63A2 :                     ; ---------------------------------------------------------------------------
    6772/    63A2 :                     
    6773/    63A2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6774/    63A2 :                     
    6775/    63A2 :                     
    6776/    63A2 :                     Deform_LZ:				; XREF: Deform_Index
    6777/    63A2 : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6778/    63A6 : 48C4                		ext.l	d4
    6779/    63A8 : EF84                		asl.l	#7,d4
    6780/    63AA : 3A38 F73C           		move.w	($FFFFF73C).w,d5
    6781/    63AE : 48C5                		ext.l	d5
    6782/    63B0 : EF85                		asl.l	#7,d5
    6783/    63B2 : 6100 03C0           		bsr.w	ScrollBlock1
    6784/    63B6 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6785/    63BC : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6786/    63C0 : 323C 00DF           		move.w	#$DF,d1
    6787/    63C4 : 3038 F700           		move.w	($FFFFF700).w,d0
    6788/    63C8 : 4440                		neg.w	d0
    6789/    63CA : 4840                		swap	d0
    6790/    63CC : 3038 F708           		move.w	($FFFFF708).w,d0
    6791/    63D0 : 4440                		neg.w	d0
    6792/    63D2 :                     
    6793/    63D2 :                     loc_63C6:
    6794/    63D2 : 22C0                		move.l	d0,(a1)+
    6795/    63D4 : 51C9 FFFC           		dbf	d1,loc_63C6
    6796/    63D8 : 3038 F646           		move.w	($FFFFF646).w,d0
    6797/    63DC : 9078 F704           		sub.w	($FFFFF704).w,d0
    6798/    63E0 : 4E75                		rts	
    6799/    63E2 :                     ; End of function Deform_LZ
    6800/    63E2 :                     
    6801/    63E2 :                     ; ---------------------------------------------------------------------------
    6802/    63E2 :                     ; Marble Zone background layer deformation code
    6803/    63E2 :                     ; ---------------------------------------------------------------------------
    6804/    63E2 :                     
    6805/    63E2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6806/    63E2 :                     
    6807/    63E2 :                     
    6808/    63E2 :                     Deform_MZ:				; XREF: Deform_Index
    6809/    63E2 : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6810/    63E6 : 48C4                		ext.l	d4
    6811/    63E8 : ED84                		asl.l	#6,d4
    6812/    63EA : 2204                		move.l	d4,d1
    6813/    63EC : E384                		asl.l	#1,d4
    6814/    63EE : D881                		add.l	d1,d4
    6815/    63F0 : 7A00                		moveq	#0,d5
    6816/    63F2 : 6100 0380           		bsr.w	ScrollBlock1
    6817/    63F6 : 303C 0200           		move.w	#$200,d0
    6818/    63FA : 3238 F704           		move.w	($FFFFF704).w,d1
    6819/    63FE : 0441 01C8           		subi.w	#$1C8,d1
    6820/    6402 : 650A                		bcs.s	loc_6402
    6821/    6404 : 3401                		move.w	d1,d2
    6822/    6406 : D241                		add.w	d1,d1
    6823/    6408 : D242                		add.w	d2,d1
    6824/    640A : E441                		asr.w	#2,d1
    6825/    640C : D041                		add.w	d1,d0
    6826/    640E :                     
    6827/    640E :                     loc_6402:
    6828/    640E : 31C0 F714           		move.w	d0,($FFFFF714).w
    6829/    6412 : 6100 040C           		bsr.w	ScrollBlock3
    6830/    6416 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6831/    641C : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6832/    6420 : 323C 00DF           		move.w	#$DF,d1
    6833/    6424 : 3038 F700           		move.w	($FFFFF700).w,d0
    6834/    6428 : 4440                		neg.w	d0
    6835/    642A : 4840                		swap	d0
    6836/    642C : 3038 F708           		move.w	($FFFFF708).w,d0
    6837/    6430 : 4440                		neg.w	d0
    6838/    6432 :                     
    6839/    6432 :                     loc_6426:
    6840/    6432 : 22C0                		move.l	d0,(a1)+
    6841/    6434 : 51C9 FFFC           		dbf	d1,loc_6426
    6842/    6438 : 4E75                		rts	
    6843/    643A :                     ; End of function Deform_MZ
    6844/    643A :                     
    6845/    643A :                     ; ---------------------------------------------------------------------------
    6846/    643A :                     ; Star Light Zone background layer deformation code
    6847/    643A :                     ; ---------------------------------------------------------------------------
    6848/    643A :                     
    6849/    643A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6850/    643A :                     
    6851/    643A :                     
    6852/    643A :                     Deform_SLZ:				; XREF: Deform_Index
    6853/    643A : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6854/    643E : 48C4                		ext.l	d4
    6855/    6440 : EF84                		asl.l	#7,d4
    6856/    6442 : 3A38 F73C           		move.w	($FFFFF73C).w,d5
    6857/    6446 : 48C5                		ext.l	d5
    6858/    6448 : EF85                		asl.l	#7,d5
    6859/    644A : 6100 0392           		bsr.w	ScrollBlock2
    6860/    644E : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6861/    6454 : 6100 005E           		bsr.w	Deform_SLZ_2
    6862/    6458 : 45F8 A800           		lea	($FFFFA800).w,a2
    6863/    645C : 3038 F70C           		move.w	($FFFFF70C).w,d0
    6864/    6460 : 3400                		move.w	d0,d2
    6865/    6462 : 0440 00C0           		subi.w	#$C0,d0
    6866/    6466 : 0240 03F0           		andi.w	#$3F0,d0
    6867/    646A : E648                		lsr.w	#3,d0
    6868/    646C : 45F2 0000           		lea	(a2,d0.w),a2
    6869/    6470 : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6870/    6474 : 323C 000E           		move.w	#$E,d1
    6871/    6478 : 3038 F700           		move.w	($FFFFF700).w,d0
    6872/    647C : 4440                		neg.w	d0
    6873/    647E : 4840                		swap	d0
    6874/    6480 : 0242 000F           		andi.w	#$F,d2
    6875/    6484 : D442                		add.w	d2,d2
    6876/    6486 : 301A                		move.w	(a2)+,d0
    6877/    6488 : 4EFB 2004           		jmp	loc_6482(pc,d2.w)
    6878/    648C :                     ; ===========================================================================
    6879/    648C :                     
    6880/    648C :                     loc_6480:				; XREF: Deform_SLZ
    6881/    648C : 301A                		move.w	(a2)+,d0
    6882/    648E :                     
    6883/    648E :                     loc_6482:
    6884/    648E : 22C0                		move.l	d0,(a1)+
    6885/    6490 : 22C0                		move.l	d0,(a1)+
    6886/    6492 : 22C0                		move.l	d0,(a1)+
    6887/    6494 : 22C0                		move.l	d0,(a1)+
    6888/    6496 : 22C0                		move.l	d0,(a1)+
    6889/    6498 : 22C0                		move.l	d0,(a1)+
    6890/    649A : 22C0                		move.l	d0,(a1)+
    6891/    649C : 22C0                		move.l	d0,(a1)+
    6892/    649E : 22C0                		move.l	d0,(a1)+
    6893/    64A0 : 22C0                		move.l	d0,(a1)+
    6894/    64A2 : 22C0                		move.l	d0,(a1)+
    6895/    64A4 : 22C0                		move.l	d0,(a1)+
    6896/    64A6 : 22C0                		move.l	d0,(a1)+
    6897/    64A8 : 22C0                		move.l	d0,(a1)+
    6898/    64AA : 22C0                		move.l	d0,(a1)+
    6899/    64AC : 22C0                		move.l	d0,(a1)+
    6900/    64AE : 51C9 FFDC           		dbf	d1,loc_6480
    6901/    64B2 : 4E75                		rts	
    6902/    64B4 :                     ; End of function Deform_SLZ
    6903/    64B4 :                     
    6904/    64B4 :                     
    6905/    64B4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6906/    64B4 :                     
    6907/    64B4 :                     
    6908/    64B4 :                     Deform_SLZ_2:				; XREF: Deform_SLZ
    6909/    64B4 : 43F8 A800           		lea	($FFFFA800).w,a1
    6910/    64B8 : 3438 F700           		move.w	($FFFFF700).w,d2
    6911/    64BC : 4442                		neg.w	d2
    6912/    64BE : 3002                		move.w	d2,d0
    6913/    64C0 : E640                		asr.w	#3,d0
    6914/    64C2 : 9042                		sub.w	d2,d0
    6915/    64C4 : 48C0                		ext.l	d0
    6916/    64C6 : E980                		asl.l	#4,d0
    6917/    64C8 : 81FC 001C           		divs.w	#$1C,d0
    6918/    64CC : 48C0                		ext.l	d0
    6919/    64CE : E980                		asl.l	#4,d0
    6920/    64D0 : E180                		asl.l	#8,d0
    6921/    64D2 : 7600                		moveq	#0,d3
    6922/    64D4 : 3602                		move.w	d2,d3
    6923/    64D6 : 323C 001B           		move.w	#$1B,d1
    6924/    64DA :                     
    6925/    64DA :                     loc_64CE:
    6926/    64DA : 32C3                		move.w	d3,(a1)+
    6927/    64DC : 4843                		swap	d3
    6928/    64DE : D680                		add.l	d0,d3
    6929/    64E0 : 4843                		swap	d3
    6930/    64E2 : 51C9 FFF6           		dbf	d1,loc_64CE
    6931/    64E6 : 3002                		move.w	d2,d0
    6932/    64E8 : E640                		asr.w	#3,d0
    6933/    64EA : 323C 0004           		move.w	#4,d1
    6934/    64EE :                     
    6935/    64EE :                     loc_64E2:
    6936/    64EE : 32C0                		move.w	d0,(a1)+
    6937/    64F0 : 51C9 FFFC           		dbf	d1,loc_64E2
    6938/    64F4 : 3002                		move.w	d2,d0
    6939/    64F6 : E440                		asr.w	#2,d0
    6940/    64F8 : 323C 0004           		move.w	#4,d1
    6941/    64FC :                     
    6942/    64FC :                     loc_64F0:
    6943/    64FC : 32C0                		move.w	d0,(a1)+
    6944/    64FE : 51C9 FFFC           		dbf	d1,loc_64F0
    6945/    6502 : 3002                		move.w	d2,d0
    6946/    6504 : E240                		asr.w	#1,d0
    6947/    6506 : 323C 001D           		move.w	#$1D,d1
    6948/    650A :                     
    6949/    650A :                     loc_64FE:
    6950/    650A : 32C0                		move.w	d0,(a1)+
    6951/    650C : 51C9 FFFC           		dbf	d1,loc_64FE
    6952/    6510 : 4E75                		rts	
    6953/    6512 :                     ; End of function Deform_SLZ_2
    6954/    6512 :                     
    6955/    6512 :                     ; ---------------------------------------------------------------------------
    6956/    6512 :                     ; Spring Yard Zone background layer deformation	code
    6957/    6512 :                     ; ---------------------------------------------------------------------------
    6958/    6512 :                     
    6959/    6512 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6960/    6512 :                     
    6961/    6512 :                     
    6962/    6512 :                     Deform_SYZ:				; XREF: Deform_Index
    6963/    6512 : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6964/    6516 : 48C4                		ext.l	d4
    6965/    6518 : ED84                		asl.l	#6,d4
    6966/    651A : 3A38 F73C           		move.w	($FFFFF73C).w,d5
    6967/    651E : 48C5                		ext.l	d5
    6968/    6520 : E985                		asl.l	#4,d5
    6969/    6522 : 2205                		move.l	d5,d1
    6970/    6524 : E385                		asl.l	#1,d5
    6971/    6526 : DA81                		add.l	d1,d5
    6972/    6528 : 6100 024A           		bsr.w	ScrollBlock1
    6973/    652C : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6974/    6532 : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6975/    6536 : 323C 00DF           		move.w	#$DF,d1
    6976/    653A : 3038 F700           		move.w	($FFFFF700).w,d0
    6977/    653E : 4440                		neg.w	d0
    6978/    6540 : 4840                		swap	d0
    6979/    6542 : 3038 F708           		move.w	($FFFFF708).w,d0
    6980/    6546 : 4440                		neg.w	d0
    6981/    6548 :                     
    6982/    6548 :                     loc_653C:
    6983/    6548 : 22C0                		move.l	d0,(a1)+
    6984/    654A : 51C9 FFFC           		dbf	d1,loc_653C
    6985/    654E : 4E75                		rts	
    6986/    6550 :                     ; End of function Deform_SYZ
    6987/    6550 :                     
    6988/    6550 :                     ; ---------------------------------------------------------------------------
    6989/    6550 :                     ; Scrap	Brain Zone background layer deformation	code
    6990/    6550 :                     ; ---------------------------------------------------------------------------
    6991/    6550 :                     
    6992/    6550 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6993/    6550 :                     
    6994/    6550 :                     
    6995/    6550 :                     Deform_SBZ:				; XREF: Deform_Index
    6996/    6550 : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6997/    6554 : 48C4                		ext.l	d4
    6998/    6556 : ED84                		asl.l	#6,d4
    6999/    6558 : 3A38 F73C           		move.w	($FFFFF73C).w,d5
    7000/    655C : 48C5                		ext.l	d5
    7001/    655E : E985                		asl.l	#4,d5
    7002/    6560 : E385                		asl.l	#1,d5
    7003/    6562 : 6100 0210           		bsr.w	ScrollBlock1
    7004/    6566 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    7005/    656C : 43F8 CC00           		lea	($FFFFCC00).w,a1
    7006/    6570 : 323C 00DF           		move.w	#$DF,d1
    7007/    6574 : 3038 F700           		move.w	($FFFFF700).w,d0
    7008/    6578 : 4440                		neg.w	d0
    7009/    657A : 4840                		swap	d0
    7010/    657C : 3038 F708           		move.w	($FFFFF708).w,d0
    7011/    6580 : 4440                		neg.w	d0
    7012/    6582 :                     
    7013/    6582 :                     loc_6576:
    7014/    6582 : 22C0                		move.l	d0,(a1)+
    7015/    6584 : 51C9 FFFC           		dbf	d1,loc_6576
    7016/    6588 : 4E75                		rts	
    7017/    658A :                     ; End of function Deform_SBZ
    7018/    658A :                     
    7019/    658A :                     ; ---------------------------------------------------------------------------
    7020/    658A :                     ; Subroutine to	scroll the level horizontally as Sonic moves
    7021/    658A :                     ; ---------------------------------------------------------------------------
    7022/    658A :                     
    7023/    658A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7024/    658A :                     
    7025/    658A :                     
    7026/    658A :                     ScrollHoriz:				; XREF: DeformBgLayer
    7027/    658A : 3838 F700           		move.w	($FFFFF700).w,d4
    7028/    658E : 612E                		bsr.s	ScrollHoriz2
    7029/    6590 : 3038 F700           		move.w	($FFFFF700).w,d0
    7030/    6594 : 0240 0010           		andi.w	#$10,d0
    7031/    6598 : 1238 F74A           		move.b	($FFFFF74A).w,d1
    7032/    659C : B300                		eor.b	d1,d0
    7033/    659E : 661C                		bne.s	locret_65B0
    7034/    65A0 : 0A38 0010 F74A      		eori.b	#$10,($FFFFF74A).w
    7035/    65A6 : 3038 F700           		move.w	($FFFFF700).w,d0
    7036/    65AA : 9044                		sub.w	d4,d0
    7037/    65AC : 6A08                		bpl.s	loc_65AA
    7038/    65AE : 08F8 0002 F754      		bset	#2,($FFFFF754).w
    7039/    65B4 : 4E75                		rts	
    7040/    65B6 :                     ; ===========================================================================
    7041/    65B6 :                     
    7042/    65B6 :                     loc_65AA:
    7043/    65B6 : 08F8 0003 F754      		bset	#3,($FFFFF754).w
    7044/    65BC :                     
    7045/    65BC :                     locret_65B0:
    7046/    65BC : 4E75                		rts	
    7047/    65BE :                     ; End of function ScrollHoriz
    7048/    65BE :                     
    7049/    65BE :                     
    7050/    65BE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7051/    65BE :                     
    7052/    65BE :                     
    7053/    65BE :                     ScrollHoriz2:				; XREF: ScrollHoriz
    7054/    65BE : 3038 D008           		move.w	($FFFFD008).w,d0
    7055/    65C2 : 9078 F700           		sub.w	($FFFFF700).w,d0
    7056/    65C6 : 0440 0090           		subi.w	#$90,d0
    7057/    65CA : 6536                		bcs.s	loc_65F6
    7058/    65CC : 0440 0010           		subi.w	#$10,d0
    7059/    65D0 : 6406                		bcc.s	loc_65CC
    7060/    65D2 : 4278 F73A           		clr.w	($FFFFF73A).w
    7061/    65D6 : 4E75                		rts	
    7062/    65D8 :                     ; ===========================================================================
    7063/    65D8 :                     
    7064/    65D8 :                     loc_65CC:
    7065/    65D8 : 0C40 0010           		cmpi.w	#$10,d0
    7066/    65DC : 6504                		bcs.s	loc_65D6
    7067/    65DE : 303C 0010           		move.w	#$10,d0
    7068/    65E2 :                     
    7069/    65E2 :                     loc_65D6:
    7070/    65E2 : D078 F700           		add.w	($FFFFF700).w,d0
    7071/    65E6 : B078 F72A           		cmp.w	($FFFFF72A).w,d0
    7072/    65EA : 6D04                		blt.s	loc_65E4
    7073/    65EC : 3038 F72A           		move.w	($FFFFF72A).w,d0
    7074/    65F0 :                     
    7075/    65F0 :                     loc_65E4:
    7076/    65F0 : 3200                		move.w	d0,d1
    7077/    65F2 : 9278 F700           		sub.w	($FFFFF700).w,d1
    7078/    65F6 : E141                		asl.w	#8,d1
    7079/    65F8 : 31C0 F700           		move.w	d0,($FFFFF700).w
    7080/    65FC : 31C1 F73A           		move.w	d1,($FFFFF73A).w
    7081/    6600 : 4E75                		rts	
    7082/    6602 :                     ; ===========================================================================
    7083/    6602 :                     
    7084/    6602 :                     loc_65F6:				; XREF: ScrollHoriz2
    7085/    6602 : D078 F700           		add.w	($FFFFF700).w,d0
    7086/    6606 : B078 F728           		cmp.w	($FFFFF728).w,d0
    7087/    660A : 6EE4                		bgt.s	loc_65E4
    7088/    660C : 3038 F728           		move.w	($FFFFF728).w,d0
    7089/    6610 : 60DE                		bra.s	loc_65E4
    7090/    6612 :                     ; End of function ScrollHoriz2
    7091/    6612 :                     
    7092/    6612 :                     ; ===========================================================================
    7093/    6612 : 4A40                		tst.w	d0
    7094/    6614 : 6A06                		bpl.s	loc_6610
    7095/    6616 : 303C FFFE           		move.w	#-2,d0
    7096/    661A : 60E6                		bra.s	loc_65F6
    7097/    661C :                     ; ===========================================================================
    7098/    661C :                     
    7099/    661C :                     loc_6610:
    7100/    661C : 303C 0002           		move.w	#2,d0
    7101/    6620 : 60B6                		bra.s	loc_65CC
    7102/    6622 :                     
    7103/    6622 :                     ; ---------------------------------------------------------------------------
    7104/    6622 :                     ; Subroutine to	scroll the level vertically as Sonic moves
    7105/    6622 :                     ; ---------------------------------------------------------------------------
    7106/    6622 :                     
    7107/    6622 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7108/    6622 :                     
    7109/    6622 :                     
    7110/    6622 :                     ScrollVertical:				; XREF: DeformBgLayer
    7111/    6622 : 7200                		moveq	#0,d1
    7112/    6624 : 3038 D00C           		move.w	($FFFFD00C).w,d0
    7113/    6628 : 9078 F704           		sub.w	($FFFFF704).w,d0
    7114/    662C : 0838 0002 D022      		btst	#2,($FFFFD022).w
    7115/    6632 : 6702                		beq.s	loc_662A
    7116/    6634 : 5B40                		subq.w	#5,d0
    7117/    6636 :                     
    7118/    6636 :                     loc_662A:
    7119/    6636 : 0838 0001 D022      		btst	#1,($FFFFD022).w
    7120/    663C : 6718                		beq.s	loc_664A
    7121/    663E : 0640 0020           		addi.w	#$20,d0
    7122/    6642 : 9078 F73E           		sub.w	($FFFFF73E).w,d0
    7123/    6646 : 655A                		bcs.s	loc_6696
    7124/    6648 : 0440 0040           		subi.w	#$40,d0
    7125/    664C : 6454                		bcc.s	loc_6696
    7126/    664E : 4A38 F75C           		tst.b	($FFFFF75C).w
    7127/    6652 : 6660                		bne.s	loc_66A8
    7128/    6654 : 600C                		bra.s	loc_6656
    7129/    6656 :                     ; ===========================================================================
    7130/    6656 :                     
    7131/    6656 :                     loc_664A:
    7132/    6656 : 9078 F73E           		sub.w	($FFFFF73E).w,d0
    7133/    665A : 660C                		bne.s	loc_665C
    7134/    665C : 4A38 F75C           		tst.b	($FFFFF75C).w
    7135/    6660 : 6652                		bne.s	loc_66A8
    7136/    6662 :                     
    7137/    6662 :                     loc_6656:
    7138/    6662 : 4278 F73C           		clr.w	($FFFFF73C).w
    7139/    6666 : 4E75                		rts	
    7140/    6668 :                     ; ===========================================================================
    7141/    6668 :                     
    7142/    6668 :                     loc_665C:
    7143/    6668 : 0C78 0060 F73E      		cmpi.w	#$60,($FFFFF73E).w
    7144/    666E : 6620                		bne.s	loc_6684
    7145/    6670 : 3238 D014           		move.w	($FFFFD014).w,d1
    7146/    6674 : 6A02                		bpl.s	loc_666C
    7147/    6676 : 4441                		neg.w	d1
    7148/    6678 :                     
    7149/    6678 :                     loc_666C:
    7150/    6678 : 0C41 0800           		cmpi.w	#$800,d1
    7151/    667C : 6424                		bcc.s	loc_6696
    7152/    667E : 323C 0600           		move.w	#$600,d1
    7153/    6682 : 0C40 0006           		cmpi.w	#6,d0
    7154/    6686 : 6E7A                		bgt.s	loc_66F6
    7155/    6688 : 0C40 FFFA           		cmpi.w	#-6,d0
    7156/    668C : 6D3E                		blt.s	loc_66C0
    7157/    668E : 602A                		bra.s	loc_66AE
    7158/    6690 :                     ; ===========================================================================
    7159/    6690 :                     
    7160/    6690 :                     loc_6684:
    7161/    6690 : 323C 0200           		move.w	#$200,d1
    7162/    6694 : 0C40 0002           		cmpi.w	#2,d0
    7163/    6698 : 6E68                		bgt.s	loc_66F6
    7164/    669A : 0C40 FFFE           		cmpi.w	#-2,d0
    7165/    669E : 6D2C                		blt.s	loc_66C0
    7166/    66A0 : 6018                		bra.s	loc_66AE
    7167/    66A2 :                     ; ===========================================================================
    7168/    66A2 :                     
    7169/    66A2 :                     loc_6696:
    7170/    66A2 : 323C 1000           		move.w	#$1000,d1
    7171/    66A6 : 0C40 0010           		cmpi.w	#$10,d0
    7172/    66AA : 6E56                		bgt.s	loc_66F6
    7173/    66AC : 0C40 FFF0           		cmpi.w	#-$10,d0
    7174/    66B0 : 6D1A                		blt.s	loc_66C0
    7175/    66B2 : 6006                		bra.s	loc_66AE
    7176/    66B4 :                     ; ===========================================================================
    7177/    66B4 :                     
    7178/    66B4 :                     loc_66A8:
    7179/    66B4 : 7000                		moveq	#0,d0
    7180/    66B6 : 11C0 F75C           		move.b	d0,($FFFFF75C).w
    7181/    66BA :                     
    7182/    66BA :                     loc_66AE:
    7183/    66BA : 7200                		moveq	#0,d1
    7184/    66BC : 3200                		move.w	d0,d1
    7185/    66BE : D278 F704           		add.w	($FFFFF704).w,d1
    7186/    66C2 : 4A40                		tst.w	d0
    7187/    66C4 : 6A00 0046           		bpl.w	loc_6700
    7188/    66C8 : 6000 000E           		bra.w	loc_66CC
    7189/    66CC :                     ; ===========================================================================
    7190/    66CC :                     
    7191/    66CC :                     loc_66C0:
    7192/    66CC : 4441                		neg.w	d1
    7193/    66CE : 48C1                		ext.l	d1
    7194/    66D0 : E181                		asl.l	#8,d1
    7195/    66D2 : D2B8 F704           		add.l	($FFFFF704).w,d1
    7196/    66D6 : 4841                		swap	d1
    7197/    66D8 :                     
    7198/    66D8 :                     loc_66CC:
    7199/    66D8 : B278 F72C           		cmp.w	($FFFFF72C).w,d1
    7200/    66DC : 6E52                		bgt.s	loc_6724
    7201/    66DE : 0C41 FF00           		cmpi.w	#-$100,d1
    7202/    66E2 : 6E18                		bgt.s	loc_66F0
    7203/    66E4 : 0241 07FF           		andi.w	#$7FF,d1
    7204/    66E8 : 0278 07FF D00C      		andi.w	#$7FF,($FFFFD00C).w
    7205/    66EE : 0278 07FF F704      		andi.w	#$7FF,($FFFFF704).w
    7206/    66F4 : 0278 03FF F70C      		andi.w	#$3FF,($FFFFF70C).w
    7207/    66FA : 6034                		bra.s	loc_6724
    7208/    66FC :                     ; ===========================================================================
    7209/    66FC :                     
    7210/    66FC :                     loc_66F0:
    7211/    66FC : 3238 F72C           		move.w	($FFFFF72C).w,d1
    7212/    6700 : 602E                		bra.s	loc_6724
    7213/    6702 :                     ; ===========================================================================
    7214/    6702 :                     
    7215/    6702 :                     loc_66F6:
    7216/    6702 : 48C1                		ext.l	d1
    7217/    6704 : E181                		asl.l	#8,d1
    7218/    6706 : D2B8 F704           		add.l	($FFFFF704).w,d1
    7219/    670A : 4841                		swap	d1
    7220/    670C :                     
    7221/    670C :                     loc_6700:
    7222/    670C : B278 F72E           		cmp.w	($FFFFF72E).w,d1
    7223/    6710 : 6D1E                		blt.s	loc_6724
    7224/    6712 : 0441 0800           		subi.w	#$800,d1
    7225/    6716 : 6514                		bcs.s	loc_6720
    7226/    6718 : 0278 07FF D00C      		andi.w	#$7FF,($FFFFD00C).w
    7227/    671E : 0478 0800 F704      		subi.w	#$800,($FFFFF704).w
    7228/    6724 : 0278 03FF F70C      		andi.w	#$3FF,($FFFFF70C).w
    7229/    672A : 6004                		bra.s	loc_6724
    7230/    672C :                     ; ===========================================================================
    7231/    672C :                     
    7232/    672C :                     loc_6720:
    7233/    672C : 3238 F72E           		move.w	($FFFFF72E).w,d1
    7234/    6730 :                     
    7235/    6730 :                     loc_6724:
    7236/    6730 : 3838 F704           		move.w	($FFFFF704).w,d4
    7237/    6734 : 4841                		swap	d1
    7238/    6736 : 2601                		move.l	d1,d3
    7239/    6738 : 96B8 F704           		sub.l	($FFFFF704).w,d3
    7240/    673C : E09B                		ror.l	#8,d3
    7241/    673E : 31C3 F73C           		move.w	d3,($FFFFF73C).w
    7242/    6742 : 21C1 F704           		move.l	d1,($FFFFF704).w
    7243/    6746 : 3038 F704           		move.w	($FFFFF704).w,d0
    7244/    674A : 0240 0010           		andi.w	#$10,d0
    7245/    674E : 1238 F74B           		move.b	($FFFFF74B).w,d1
    7246/    6752 : B300                		eor.b	d1,d0
    7247/    6754 : 661C                		bne.s	locret_6766
    7248/    6756 : 0A38 0010 F74B      		eori.b	#$10,($FFFFF74B).w
    7249/    675C : 3038 F704           		move.w	($FFFFF704).w,d0
    7250/    6760 : 9044                		sub.w	d4,d0
    7251/    6762 : 6A08                		bpl.s	loc_6760
    7252/    6764 : 08F8 0000 F754      		bset	#0,($FFFFF754).w
    7253/    676A : 4E75                		rts	
    7254/    676C :                     ; ===========================================================================
    7255/    676C :                     
    7256/    676C :                     loc_6760:
    7257/    676C : 08F8 0001 F754      		bset	#1,($FFFFF754).w
    7258/    6772 :                     
    7259/    6772 :                     locret_6766:
    7260/    6772 : 4E75                		rts	
    7261/    6774 :                     ; End of function ScrollVertical
    7262/    6774 :                     
    7263/    6774 :                     
    7264/    6774 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7265/    6774 :                     
    7266/    6774 :                     
    7267/    6774 :                     ScrollBlock1:				; XREF: Deform_GHZ; et al
    7268/    6774 : 2438 F708           		move.l	($FFFFF708).w,d2
    7269/    6778 : 2002                		move.l	d2,d0
    7270/    677A : D084                		add.l	d4,d0
    7271/    677C : 21C0 F708           		move.l	d0,($FFFFF708).w
    7272/    6780 : 2200                		move.l	d0,d1
    7273/    6782 : 4841                		swap	d1
    7274/    6784 : 0241 0010           		andi.w	#$10,d1
    7275/    6788 : 1638 F74C           		move.b	($FFFFF74C).w,d3
    7276/    678C : B701                		eor.b	d3,d1
    7277/    678E : 6618                		bne.s	loc_679C
    7278/    6790 : 0A38 0010 F74C      		eori.b	#$10,($FFFFF74C).w
    7279/    6796 : 9082                		sub.l	d2,d0
    7280/    6798 : 6A08                		bpl.s	loc_6796
    7281/    679A : 08F8 0002 F756      		bset	#2,($FFFFF756).w
    7282/    67A0 : 6006                		bra.s	loc_679C
    7283/    67A2 :                     ; ===========================================================================
    7284/    67A2 :                     
    7285/    67A2 :                     loc_6796:
    7286/    67A2 : 08F8 0003 F756      		bset	#3,($FFFFF756).w
    7287/    67A8 :                     
    7288/    67A8 :                     loc_679C:
    7289/    67A8 : 2638 F70C           		move.l	($FFFFF70C).w,d3
    7290/    67AC : 2003                		move.l	d3,d0
    7291/    67AE : D085                		add.l	d5,d0
    7292/    67B0 : 21C0 F70C           		move.l	d0,($FFFFF70C).w
    7293/    67B4 : 2200                		move.l	d0,d1
    7294/    67B6 : 4841                		swap	d1
    7295/    67B8 : 0241 0010           		andi.w	#$10,d1
    7296/    67BC : 1438 F74D           		move.b	($FFFFF74D).w,d2
    7297/    67C0 : B501                		eor.b	d2,d1
    7298/    67C2 : 6618                		bne.s	locret_67D0
    7299/    67C4 : 0A38 0010 F74D      		eori.b	#$10,($FFFFF74D).w
    7300/    67CA : 9083                		sub.l	d3,d0
    7301/    67CC : 6A08                		bpl.s	loc_67CA
    7302/    67CE : 08F8 0000 F756      		bset	#0,($FFFFF756).w
    7303/    67D4 : 4E75                		rts	
    7304/    67D6 :                     ; ===========================================================================
    7305/    67D6 :                     
    7306/    67D6 :                     loc_67CA:
    7307/    67D6 : 08F8 0001 F756      		bset	#1,($FFFFF756).w
    7308/    67DC :                     
    7309/    67DC :                     locret_67D0:
    7310/    67DC : 4E75                		rts	
    7311/    67DE :                     ; End of function ScrollBlock1
    7312/    67DE :                     
    7313/    67DE :                     
    7314/    67DE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7315/    67DE :                     
    7316/    67DE :                     
    7317/    67DE :                     ScrollBlock2:				; XREF: Deform_SLZ
    7318/    67DE : 2438 F708           		move.l	($FFFFF708).w,d2
    7319/    67E2 : 2002                		move.l	d2,d0
    7320/    67E4 : D084                		add.l	d4,d0
    7321/    67E6 : 21C0 F708           		move.l	d0,($FFFFF708).w
    7322/    67EA : 2638 F70C           		move.l	($FFFFF70C).w,d3
    7323/    67EE : 2003                		move.l	d3,d0
    7324/    67F0 : D085                		add.l	d5,d0
    7325/    67F2 : 21C0 F70C           		move.l	d0,($FFFFF70C).w
    7326/    67F6 : 2200                		move.l	d0,d1
    7327/    67F8 : 4841                		swap	d1
    7328/    67FA : 0241 0010           		andi.w	#$10,d1
    7329/    67FE : 1438 F74D           		move.b	($FFFFF74D).w,d2
    7330/    6802 : B501                		eor.b	d2,d1
    7331/    6804 : 6618                		bne.s	locret_6812
    7332/    6806 : 0A38 0010 F74D      		eori.b	#$10,($FFFFF74D).w
    7333/    680C : 9083                		sub.l	d3,d0
    7334/    680E : 6A08                		bpl.s	loc_680C
    7335/    6810 : 08F8 0000 F756      		bset	#0,($FFFFF756).w
    7336/    6816 : 4E75                		rts	
    7337/    6818 :                     ; ===========================================================================
    7338/    6818 :                     
    7339/    6818 :                     loc_680C:
    7340/    6818 : 08F8 0001 F756      		bset	#1,($FFFFF756).w
    7341/    681E :                     
    7342/    681E :                     locret_6812:
    7343/    681E : 4E75                		rts	
    7344/    6820 :                     ; End of function ScrollBlock2
    7345/    6820 :                     
    7346/    6820 :                     
    7347/    6820 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7348/    6820 :                     
    7349/    6820 :                     
    7350/    6820 :                     ScrollBlock3:				; XREF: Deform_GHZ; et al
    7351/    6820 : 3638 F70C           		move.w	($FFFFF70C).w,d3
    7352/    6824 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    7353/    6828 : 3200                		move.w	d0,d1
    7354/    682A : 0241 0010           		andi.w	#$10,d1
    7355/    682E : 1438 F74D           		move.b	($FFFFF74D).w,d2
    7356/    6832 : B501                		eor.b	d2,d1
    7357/    6834 : 6618                		bne.s	locret_6842
    7358/    6836 : 0A38 0010 F74D      		eori.b	#$10,($FFFFF74D).w
    7359/    683C : 9043                		sub.w	d3,d0
    7360/    683E : 6A08                		bpl.s	loc_683C
    7361/    6840 : 08F8 0000 F756      		bset	#0,($FFFFF756).w
    7362/    6846 : 4E75                		rts	
    7363/    6848 :                     ; ===========================================================================
    7364/    6848 :                     
    7365/    6848 :                     loc_683C:
    7366/    6848 : 08F8 0001 F756      		bset	#1,($FFFFF756).w
    7367/    684E :                     
    7368/    684E :                     locret_6842:
    7369/    684E : 4E75                		rts	
    7370/    6850 :                     ; End of function ScrollBlock3
    7371/    6850 :                     
    7372/    6850 :                     
    7373/    6850 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7374/    6850 :                     
    7375/    6850 :                     
    7376/    6850 :                     ScrollBlock4:				; XREF: Deform_GHZ
    7377/    6850 : 3438 F710           		move.w	($FFFFF710).w,d2
    7378/    6854 : 3638 F714           		move.w	($FFFFF714).w,d3
    7379/    6858 : 3038 F73A           		move.w	($FFFFF73A).w,d0
    7380/    685C : 48C0                		ext.l	d0
    7381/    685E : EF80                		asl.l	#7,d0
    7382/    6860 : D1B8 F710           		add.l	d0,($FFFFF710).w
    7383/    6864 : 3038 F710           		move.w	($FFFFF710).w,d0
    7384/    6868 : 0240 0010           		andi.w	#$10,d0
    7385/    686C : 1238 F74E           		move.b	($FFFFF74E).w,d1
    7386/    6870 : B300                		eor.b	d1,d0
    7387/    6872 : 661C                		bne.s	locret_6884
    7388/    6874 : 0A38 0010 F74E      		eori.b	#$10,($FFFFF74E).w
    7389/    687A : 3038 F710           		move.w	($FFFFF710).w,d0
    7390/    687E : 9042                		sub.w	d2,d0
    7391/    6880 : 6A08                		bpl.s	loc_687E
    7392/    6882 : 08F8 0002 F758      		bset	#2,($FFFFF758).w
    7393/    6888 : 6006                		bra.s	locret_6884
    7394/    688A :                     ; ===========================================================================
    7395/    688A :                     
    7396/    688A :                     loc_687E:
    7397/    688A : 08F8 0003 F758      		bset	#3,($FFFFF758).w
    7398/    6890 :                     
    7399/    6890 :                     locret_6884:
    7400/    6890 : 4E75                		rts	
    7401/    6892 :                     ; End of function ScrollBlock4
    7402/    6892 :                     
    7403/    6892 :                     
    7404/    6892 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7405/    6892 :                     
    7406/    6892 :                     
    7407/    6892 :                     sub_6886:				; XREF: loc_C44
    7408/    6892 : 4BF9 00C0 0004      		lea	($C00004).l,a5
    7409/    6898 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    7410/    689E : 45F8 F756           		lea	($FFFFF756).w,a2
    7411/    68A2 : 47F8 F708           		lea	($FFFFF708).w,a3
    7412/    68A6 : 49F8 A440           		lea	($FFFFA440).w,a4
    7413/    68AA : 343C 6000           		move.w	#$6000,d2
    7414/    68AE : 6100 00B0           		bsr.w	sub_6954
    7415/    68B2 : 45F8 F758           		lea	($FFFFF758).w,a2
    7416/    68B6 : 47F8 F710           		lea	($FFFFF710).w,a3
    7417/    68BA : 6000 0144           		bra.w	sub_69F4
    7418/    68BE :                     ; End of function sub_6886
    7419/    68BE :                     
    7420/    68BE :                     ; ---------------------------------------------------------------------------
    7421/    68BE :                     ; Subroutine to	display	correct	tiles as you move
    7422/    68BE :                     ; ---------------------------------------------------------------------------
    7423/    68BE :                     
    7424/    68BE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7425/    68BE :                     
    7426/    68BE :                     
    7427/    68BE :                     LoadTilesAsYouMove:			; XREF: Demo_Time
    7428/    68BE : 4BF9 00C0 0004      		lea	($C00004).l,a5
    7429/    68C4 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    7430/    68CA : 45F8 FF32           		lea	($FFFFFF32).w,a2
    7431/    68CE : 47F8 FF18           		lea	($FFFFFF18).w,a3
    7432/    68D2 : 49F8 A440           		lea	($FFFFA440).w,a4
    7433/    68D6 : 343C 6000           		move.w	#$6000,d2
    7434/    68DA : 6100 0084           		bsr.w	sub_6954
    7435/    68DE : 45F8 FF34           		lea	($FFFFFF34).w,a2
    7436/    68E2 : 47F8 FF20           		lea	($FFFFFF20).w,a3
    7437/    68E6 : 6100 0118           		bsr.w	sub_69F4
    7438/    68EA : 45F8 FF30           		lea	($FFFFFF30).w,a2
    7439/    68EE : 47F8 FF10           		lea	($FFFFFF10).w,a3
    7440/    68F2 : 49F8 A400           		lea	($FFFFA400).w,a4
    7441/    68F6 : 343C 4000           		move.w	#$4000,d2
    7442/    68FA : 4A12                		tst.b	(a2)
    7443/    68FC : 6760                		beq.s	locret_6952
    7444/    68FE : 0892 0000           		bclr	#0,(a2)
    7445/    6902 : 6710                		beq.s	loc_6908
    7446/    6904 : 78F0                		moveq	#-$10,d4
    7447/    6906 : 7AF0                		moveq	#-$10,d5
    7448/    6908 : 6100 0322           		bsr.w	sub_6C20
    7449/    690C : 78F0                		moveq	#-$10,d4
    7450/    690E : 7AF0                		moveq	#-$10,d5
    7451/    6910 : 6100 01D2           		bsr.w	sub_6AD8
    7452/    6914 :                     
    7453/    6914 :                     loc_6908:
    7454/    6914 : 0892 0001           		bclr	#1,(a2)
    7455/    6918 : 6714                		beq.s	loc_6922
    7456/    691A : 383C 00E0           		move.w	#$E0,d4
    7457/    691E : 7AF0                		moveq	#-$10,d5
    7458/    6920 : 6100 030A           		bsr.w	sub_6C20
    7459/    6924 : 383C 00E0           		move.w	#$E0,d4
    7460/    6928 : 7AF0                		moveq	#-$10,d5
    7461/    692A : 6100 01B8           		bsr.w	sub_6AD8
    7462/    692E :                     
    7463/    692E :                     loc_6922:
    7464/    692E : 0892 0002           		bclr	#2,(a2)
    7465/    6932 : 6710                		beq.s	loc_6938
    7466/    6934 : 78F0                		moveq	#-$10,d4
    7467/    6936 : 7AF0                		moveq	#-$10,d5
    7468/    6938 : 6100 02F2           		bsr.w	sub_6C20
    7469/    693C : 78F0                		moveq	#-$10,d4
    7470/    693E : 7AF0                		moveq	#-$10,d5
    7471/    6940 : 6100 01CE           		bsr.w	sub_6B04
    7472/    6944 :                     
    7473/    6944 :                     loc_6938:
    7474/    6944 : 0892 0003           		bclr	#3,(a2)
    7475/    6948 : 6714                		beq.s	locret_6952
    7476/    694A : 78F0                		moveq	#-$10,d4
    7477/    694C : 3A3C 0140           		move.w	#$140,d5
    7478/    6950 : 6100 02DA           		bsr.w	sub_6C20
    7479/    6954 : 78F0                		moveq	#-$10,d4
    7480/    6956 : 3A3C 0140           		move.w	#$140,d5
    7481/    695A : 6100 01B4           		bsr.w	sub_6B04
    7482/    695E :                     
    7483/    695E :                     locret_6952:
    7484/    695E : 4E75                		rts	
    7485/    6960 :                     ; End of function LoadTilesAsYouMove
    7486/    6960 :                     
    7487/    6960 :                     
    7488/    6960 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7489/    6960 :                     
    7490/    6960 :                     
    7491/    6960 :                     sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
    7492/    6960 : 4A12                		tst.b	(a2)
    7493/    6962 : 6700 009A           		beq.w	locret_69F2
    7494/    6966 : 0892 0000           		bclr	#0,(a2)
    7495/    696A : 6712                		beq.s	loc_6972
    7496/    696C : 78F0                		moveq	#-$10,d4
    7497/    696E : 7AF0                		moveq	#-$10,d5
    7498/    6970 : 6100 02BA           		bsr.w	sub_6C20
    7499/    6974 : 78F0                		moveq	#-$10,d4
    7500/    6976 : 7AF0                		moveq	#-$10,d5
    7501/    6978 : 7C1F                		moveq	#$1F,d6
    7502/    697A : 6100 016A           		bsr.w	sub_6ADA
    7503/    697E :                     
    7504/    697E :                     loc_6972:
    7505/    697E : 0892 0001           		bclr	#1,(a2)
    7506/    6982 : 6716                		beq.s	loc_698E
    7507/    6984 : 383C 00E0           		move.w	#$E0,d4
    7508/    6988 : 7AF0                		moveq	#-$10,d5
    7509/    698A : 6100 02A0           		bsr.w	sub_6C20
    7510/    698E : 383C 00E0           		move.w	#$E0,d4
    7511/    6992 : 7AF0                		moveq	#-$10,d5
    7512/    6994 : 7C1F                		moveq	#$1F,d6
    7513/    6996 : 6100 014E           		bsr.w	sub_6ADA
    7514/    699A :                     
    7515/    699A :                     loc_698E:
    7516/    699A : 0892 0002           		bclr	#2,(a2)
    7517/    699E : 672A                		beq.s	loc_69BE
    7518/    69A0 : 78F0                		moveq	#-$10,d4
    7519/    69A2 : 7AF0                		moveq	#-$10,d5
    7520/    69A4 : 6100 0286           		bsr.w	sub_6C20
    7521/    69A8 : 78F0                		moveq	#-$10,d4
    7522/    69AA : 7AF0                		moveq	#-$10,d5
    7523/    69AC : 3C38 F7F0           		move.w	($FFFFF7F0).w,d6
    7524/    69B0 : 322B 0004           		move.w	4(a3),d1
    7525/    69B4 : 0241 FFF0           		andi.w	#-$10,d1
    7526/    69B8 : 9C41                		sub.w	d1,d6
    7527/    69BA : 6D0E                		blt.s	loc_69BE
    7528/    69BC : E84E                		lsr.w	#4,d6
    7529/    69BE : 0C46 000F           		cmpi.w	#$F,d6
    7530/    69C2 : 6502                		bcs.s	loc_69BA
    7531/    69C4 : 7C0F                		moveq	#$F,d6
    7532/    69C6 :                     
    7533/    69C6 :                     loc_69BA:
    7534/    69C6 : 6100 014A           		bsr.w	sub_6B06
    7535/    69CA :                     
    7536/    69CA :                     loc_69BE:
    7537/    69CA : 0892 0003           		bclr	#3,(a2)
    7538/    69CE : 672E                		beq.s	locret_69F2
    7539/    69D0 : 78F0                		moveq	#-$10,d4
    7540/    69D2 : 3A3C 0140           		move.w	#$140,d5
    7541/    69D6 : 6100 0254           		bsr.w	sub_6C20
    7542/    69DA : 78F0                		moveq	#-$10,d4
    7543/    69DC : 3A3C 0140           		move.w	#$140,d5
    7544/    69E0 : 3C38 F7F0           		move.w	($FFFFF7F0).w,d6
    7545/    69E4 : 322B 0004           		move.w	4(a3),d1
    7546/    69E8 : 0241 FFF0           		andi.w	#-$10,d1
    7547/    69EC : 9C41                		sub.w	d1,d6
    7548/    69EE : 6D0E                		blt.s	locret_69F2
    7549/    69F0 : E84E                		lsr.w	#4,d6
    7550/    69F2 : 0C46 000F           		cmpi.w	#$F,d6
    7551/    69F6 : 6502                		bcs.s	loc_69EE
    7552/    69F8 : 7C0F                		moveq	#$F,d6
    7553/    69FA :                     
    7554/    69FA :                     loc_69EE:
    7555/    69FA : 6100 0116           		bsr.w	sub_6B06
    7556/    69FE :                     
    7557/    69FE :                     locret_69F2:
    7558/    69FE : 4E75                		rts	
    7559/    6A00 :                     ; End of function sub_6954
    7560/    6A00 :                     
    7561/    6A00 :                     
    7562/    6A00 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7563/    6A00 :                     
    7564/    6A00 :                     
    7565/    6A00 :                     sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
    7566/    6A00 : 4A12                		tst.b	(a2)
    7567/    6A02 : 6700 0088           		beq.w	locret_6A80
    7568/    6A06 : 0892 0002           		bclr	#2,(a2)
    7569/    6A0A : 673E                		beq.s	loc_6A3E
    7570/    6A0C : 0C53 0010           		cmpi.w	#$10,(a3)
    7571/    6A10 : 6538                		bcs.s	loc_6A3E
    7572/    6A12 : 3838 F7F0           		move.w	($FFFFF7F0).w,d4
    7573/    6A16 : 322B 0004           		move.w	4(a3),d1
    7574/    6A1A : 0241 FFF0           		andi.w	#-$10,d1
    7575/    6A1E : 9841                		sub.w	d1,d4
    7576/    6A20 : 3F04                		move.w	d4,-(sp)
    7577/    6A22 : 7AF0                		moveq	#-$10,d5
    7578/    6A24 : 6100 0206           		bsr.w	sub_6C20
    7579/    6A28 : 381F                		move.w	(sp)+,d4
    7580/    6A2A : 7AF0                		moveq	#-$10,d5
    7581/    6A2C : 3C38 F7F0           		move.w	($FFFFF7F0).w,d6
    7582/    6A30 : 322B 0004           		move.w	4(a3),d1
    7583/    6A34 : 0241 FFF0           		andi.w	#-$10,d1
    7584/    6A38 : 9C41                		sub.w	d1,d6
    7585/    6A3A : 6D0E                		blt.s	loc_6A3E
    7586/    6A3C : E84E                		lsr.w	#4,d6
    7587/    6A3E : 0446 000E           		subi.w	#$E,d6
    7588/    6A42 : 6406                		bcc.s	loc_6A3E
    7589/    6A44 : 4446                		neg.w	d6
    7590/    6A46 : 6100 00CA           		bsr.w	sub_6B06
    7591/    6A4A :                     
    7592/    6A4A :                     loc_6A3E:
    7593/    6A4A : 0892 0003           		bclr	#3,(a2)
    7594/    6A4E : 673C                		beq.s	locret_6A80
    7595/    6A50 : 3838 F7F0           		move.w	($FFFFF7F0).w,d4
    7596/    6A54 : 322B 0004           		move.w	4(a3),d1
    7597/    6A58 : 0241 FFF0           		andi.w	#-$10,d1
    7598/    6A5C : 9841                		sub.w	d1,d4
    7599/    6A5E : 3F04                		move.w	d4,-(sp)
    7600/    6A60 : 3A3C 0140           		move.w	#$140,d5
    7601/    6A64 : 6100 01C6           		bsr.w	sub_6C20
    7602/    6A68 : 381F                		move.w	(sp)+,d4
    7603/    6A6A : 3A3C 0140           		move.w	#$140,d5
    7604/    6A6E : 3C38 F7F0           		move.w	($FFFFF7F0).w,d6
    7605/    6A72 : 322B 0004           		move.w	4(a3),d1
    7606/    6A76 : 0241 FFF0           		andi.w	#-$10,d1
    7607/    6A7A : 9C41                		sub.w	d1,d6
    7608/    6A7C : 6D0E                		blt.s	locret_6A80
    7609/    6A7E : E84E                		lsr.w	#4,d6
    7610/    6A80 : 0446 000E           		subi.w	#$E,d6
    7611/    6A84 : 6406                		bcc.s	locret_6A80
    7612/    6A86 : 4446                		neg.w	d6
    7613/    6A88 : 6100 0088           		bsr.w	sub_6B06
    7614/    6A8C :                     
    7615/    6A8C :                     locret_6A80:
    7616/    6A8C : 4E75                		rts	
    7617/    6A8E :                     ; End of function sub_69F4
    7618/    6A8E :                     
    7619/    6A8E :                     ; ===========================================================================
    7620/    6A8E : 4A12                		tst.b	(a2)
    7621/    6A90 : 6750                		beq.s	locret_6AD6
    7622/    6A92 : 0892 0002           		bclr	#2,(a2)
    7623/    6A96 : 6720                		beq.s	loc_6AAC
    7624/    6A98 : 383C 00D0           		move.w	#$D0,d4
    7625/    6A9C : 322B 0004           		move.w	4(a3),d1
    7626/    6AA0 : 0241 FFF0           		andi.w	#-$10,d1
    7627/    6AA4 : 9841                		sub.w	d1,d4
    7628/    6AA6 : 3F04                		move.w	d4,-(sp)
    7629/    6AA8 : 7AF0                		moveq	#-$10,d5
    7630/    6AAA : 6100 019C           		bsr.w	sub_6C3C
    7631/    6AAE : 381F                		move.w	(sp)+,d4
    7632/    6AB0 : 7AF0                		moveq	#-$10,d5
    7633/    6AB2 : 7C02                		moveq	#2,d6
    7634/    6AB4 : 6100 005C           		bsr.w	sub_6B06
    7635/    6AB8 :                     
    7636/    6AB8 :                     loc_6AAC:
    7637/    6AB8 : 0892 0003           		bclr	#3,(a2)
    7638/    6ABC : 6724                		beq.s	locret_6AD6
    7639/    6ABE : 383C 00D0           		move.w	#$D0,d4
    7640/    6AC2 : 322B 0004           		move.w	4(a3),d1
    7641/    6AC6 : 0241 FFF0           		andi.w	#-$10,d1
    7642/    6ACA : 9841                		sub.w	d1,d4
    7643/    6ACC : 3F04                		move.w	d4,-(sp)
    7644/    6ACE : 3A3C 0140           		move.w	#$140,d5
    7645/    6AD2 : 6100 0174           		bsr.w	sub_6C3C
    7646/    6AD6 : 381F                		move.w	(sp)+,d4
    7647/    6AD8 : 3A3C 0140           		move.w	#$140,d5
    7648/    6ADC : 7C02                		moveq	#2,d6
    7649/    6ADE : 6100 0032           		bsr.w	sub_6B06
    7650/    6AE2 :                     
    7651/    6AE2 :                     locret_6AD6:
    7652/    6AE2 : 4E75                		rts	
    7653/    6AE4 :                     
    7654/    6AE4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7655/    6AE4 :                     
    7656/    6AE4 :                     
    7657/    6AE4 :                     sub_6AD8:				; XREF: LoadTilesAsYouMove
    7658/    6AE4 : 7C15                		moveq	#$15,d6
    7659/    6AE6 :                     ; End of function sub_6AD8
    7660/    6AE6 :                     
    7661/    6AE6 :                     
    7662/    6AE6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7663/    6AE6 :                     
    7664/    6AE6 :                     
    7665/    6AE6 :                     sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
    7666/    6AE6 : 2E3C 0080 0000      		move.l	#$800000,d7
    7667/    6AEC : 2200                		move.l	d0,d1
    7668/    6AEE :                     
    7669/    6AEE :                     loc_6AE2:
    7670/    6AEE : 48E7 0C00           		movem.l	d4-d5,-(sp)
    7671/    6AF2 : 6100 00EE           		bsr.w	sub_6BD6
    7672/    6AF6 : 2001                		move.l	d1,d0
    7673/    6AF8 : 6100 0044           		bsr.w	sub_6B32
    7674/    6AFC : 5801                		addq.b	#4,d1
    7675/    6AFE : 0201 007F           		andi.b	#$7F,d1
    7676/    6B02 : 4CDF 0030           		movem.l	(sp)+,d4-d5
    7677/    6B06 : 0645 0010           		addi.w	#$10,d5
    7678/    6B0A : 51CE FFE2           		dbf	d6,loc_6AE2
    7679/    6B0E : 4E75                		rts	
    7680/    6B10 :                     ; End of function sub_6ADA
    7681/    6B10 :                     
    7682/    6B10 :                     
    7683/    6B10 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7684/    6B10 :                     
    7685/    6B10 :                     
    7686/    6B10 :                     sub_6B04:				; XREF: LoadTilesAsYouMove
    7687/    6B10 : 7C0F                		moveq	#$F,d6
    7688/    6B12 :                     ; End of function sub_6B04
    7689/    6B12 :                     
    7690/    6B12 :                     
    7691/    6B12 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7692/    6B12 :                     
    7693/    6B12 :                     
    7694/    6B12 :                     sub_6B06:				; XREF: sub_6954
    7695/    6B12 : 2E3C 0080 0000      		move.l	#$800000,d7
    7696/    6B18 : 2200                		move.l	d0,d1
    7697/    6B1A :                     
    7698/    6B1A :                     loc_6B0E:
    7699/    6B1A : 48E7 0C00           		movem.l	d4-d5,-(sp)
    7700/    6B1E : 6100 00C2           		bsr.w	sub_6BD6
    7701/    6B22 : 2001                		move.l	d1,d0
    7702/    6B24 : 6100 0018           		bsr.w	sub_6B32
    7703/    6B28 : 0641 0100           		addi.w	#$100,d1
    7704/    6B2C : 0241 0FFF           		andi.w	#$FFF,d1
    7705/    6B30 : 4CDF 0030           		movem.l	(sp)+,d4-d5
    7706/    6B34 : 0644 0010           		addi.w	#$10,d4
    7707/    6B38 : 51CE FFE0           		dbf	d6,loc_6B0E
    7708/    6B3C : 4E75                		rts	
    7709/    6B3E :                     ; End of function sub_6B06
    7710/    6B3E :                     
    7711/    6B3E :                     
    7712/    6B3E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7713/    6B3E :                     
    7714/    6B3E :                     
    7715/    6B3E :                     sub_6B32:				; XREF: sub_6ADA; sub_6B06
    7716/    6B3E : 8042                		or.w	d2,d0
    7717/    6B40 : 4840                		swap	d0
    7718/    6B42 : 0810 0004           		btst	#4,(a0)
    7719/    6B46 : 6632                		bne.s	loc_6B6E
    7720/    6B48 : 0810 0003           		btst	#3,(a0)
    7721/    6B4C : 660C                		bne.s	loc_6B4E
    7722/    6B4E : 2A80                		move.l	d0,(a5)
    7723/    6B50 : 2C99                		move.l	(a1)+,(a6)
    7724/    6B52 : D087                		add.l	d7,d0
    7725/    6B54 : 2A80                		move.l	d0,(a5)
    7726/    6B56 : 2C99                		move.l	(a1)+,(a6)
    7727/    6B58 : 4E75                		rts	
    7728/    6B5A :                     ; ===========================================================================
    7729/    6B5A :                     
    7730/    6B5A :                     loc_6B4E:
    7731/    6B5A : 2A80                		move.l	d0,(a5)
    7732/    6B5C : 2819                		move.l	(a1)+,d4
    7733/    6B5E : 0A84 0800 0800      		eori.l	#$8000800,d4
    7734/    6B64 : 4844                		swap	d4
    7735/    6B66 : 2C84                		move.l	d4,(a6)
    7736/    6B68 : D087                		add.l	d7,d0
    7737/    6B6A : 2A80                		move.l	d0,(a5)
    7738/    6B6C : 2819                		move.l	(a1)+,d4
    7739/    6B6E : 0A84 0800 0800      		eori.l	#$8000800,d4
    7740/    6B74 : 4844                		swap	d4
    7741/    6B76 : 2C84                		move.l	d4,(a6)
    7742/    6B78 : 4E75                		rts	
    7743/    6B7A :                     ; ===========================================================================
    7744/    6B7A :                     
    7745/    6B7A :                     loc_6B6E:
    7746/    6B7A : 0810 0003           		btst	#3,(a0)
    7747/    6B7E : 661C                		bne.s	loc_6B90
    7748/    6B80 : 2A80                		move.l	d0,(a5)
    7749/    6B82 : 2A19                		move.l	(a1)+,d5
    7750/    6B84 : 2819                		move.l	(a1)+,d4
    7751/    6B86 : 0A84 1000 1000      		eori.l	#$10001000,d4
    7752/    6B8C : 2C84                		move.l	d4,(a6)
    7753/    6B8E : D087                		add.l	d7,d0
    7754/    6B90 : 2A80                		move.l	d0,(a5)
    7755/    6B92 : 0A85 1000 1000      		eori.l	#$10001000,d5
    7756/    6B98 : 2C85                		move.l	d5,(a6)
    7757/    6B9A : 4E75                		rts	
    7758/    6B9C :                     ; ===========================================================================
    7759/    6B9C :                     
    7760/    6B9C :                     loc_6B90:
    7761/    6B9C : 2A80                		move.l	d0,(a5)
    7762/    6B9E : 2A19                		move.l	(a1)+,d5
    7763/    6BA0 : 2819                		move.l	(a1)+,d4
    7764/    6BA2 : 0A84 1800 1800      		eori.l	#$18001800,d4
    7765/    6BA8 : 4844                		swap	d4
    7766/    6BAA : 2C84                		move.l	d4,(a6)
    7767/    6BAC : D087                		add.l	d7,d0
    7768/    6BAE : 2A80                		move.l	d0,(a5)
    7769/    6BB0 : 0A85 1800 1800      		eori.l	#$18001800,d5
    7770/    6BB6 : 4845                		swap	d5
    7771/    6BB8 : 2C85                		move.l	d5,(a6)
    7772/    6BBA : 4E75                		rts	
    7773/    6BBC :                     ; End of function sub_6B32
    7774/    6BBC :                     
    7775/    6BBC :                     ; ===========================================================================
    7776/    6BBC : 4E75                		rts	
    7777/    6BBE :                     ; ===========================================================================
    7778/    6BBE : 2A80                		move.l	d0,(a5)
    7779/    6BC0 : 3A3C 2000           		move.w	#$2000,d5
    7780/    6BC4 : 3819                		move.w	(a1)+,d4
    7781/    6BC6 : D845                		add.w	d5,d4
    7782/    6BC8 : 3C84                		move.w	d4,(a6)
    7783/    6BCA : 3819                		move.w	(a1)+,d4
    7784/    6BCC : D845                		add.w	d5,d4
    7785/    6BCE : 3C84                		move.w	d4,(a6)
    7786/    6BD0 : D087                		add.l	d7,d0
    7787/    6BD2 : 2A80                		move.l	d0,(a5)
    7788/    6BD4 : 3819                		move.w	(a1)+,d4
    7789/    6BD6 : D845                		add.w	d5,d4
    7790/    6BD8 : 3C84                		move.w	d4,(a6)
    7791/    6BDA : 3819                		move.w	(a1)+,d4
    7792/    6BDC : D845                		add.w	d5,d4
    7793/    6BDE : 3C84                		move.w	d4,(a6)
    7794/    6BE0 : 4E75                		rts	
    7795/    6BE2 :                     
    7796/    6BE2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7797/    6BE2 :                     
    7798/    6BE2 :                     
    7799/    6BE2 :                     sub_6BD6:				; XREF: sub_6ADA; sub_6B06
    7800/    6BE2 : 43F8 B000           		lea	($FFFFB000).w,a1
    7801/    6BE6 : D86B 0004           		add.w	4(a3),d4
    7802/    6BEA : DA53                		add.w	(a3),d5
    7803/    6BEC : 3604                		move.w	d4,d3
    7804/    6BEE : E24B                		lsr.w	#1,d3
    7805/    6BF0 : 0243 0380           		andi.w	#$380,d3
    7806/    6BF4 : E64D                		lsr.w	#3,d5
    7807/    6BF6 : 3005                		move.w	d5,d0
    7808/    6BF8 : EA48                		lsr.w	#5,d0
    7809/    6BFA : 0240 007F           		andi.w	#$7F,d0
    7810/    6BFE : D043                		add.w	d3,d0
    7811/    6C00 : 76FF                		moveq	#-1,d3
    7812/    6C02 : 1634 0000           		move.b	(a4,d0.w),d3
    7813/    6C06 : 6722                		beq.s	locret_6C1E
    7814/    6C08 : 5303                		subq.b	#1,d3
    7815/    6C0A : 0243 007F           		andi.w	#$7F,d3
    7816/    6C0E : EE5B                		ror.w	#7,d3
    7817/    6C10 : D844                		add.w	d4,d4
    7818/    6C12 : 0244 01E0           		andi.w	#$1E0,d4
    7819/    6C16 : 0245 001E           		andi.w	#$1E,d5
    7820/    6C1A : D644                		add.w	d4,d3
    7821/    6C1C : D645                		add.w	d5,d3
    7822/    6C1E : 2043                		movea.l	d3,a0
    7823/    6C20 : 3610                		move.w	(a0),d3
    7824/    6C22 : 0243 03FF           		andi.w	#$3FF,d3
    7825/    6C26 : E74B                		lsl.w	#3,d3
    7826/    6C28 : D2C3                		adda.w	d3,a1
    7827/    6C2A :                     
    7828/    6C2A :                     locret_6C1E:
    7829/    6C2A : 4E75                		rts	
    7830/    6C2C :                     ; End of function sub_6BD6
    7831/    6C2C :                     
    7832/    6C2C :                     
    7833/    6C2C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7834/    6C2C :                     
    7835/    6C2C :                     
    7836/    6C2C :                     sub_6C20:				; XREF: LoadTilesAsYouMove; et al
    7837/    6C2C : D86B 0004           		add.w	4(a3),d4
    7838/    6C30 : DA53                		add.w	(a3),d5
    7839/    6C32 : 0244 00F0           		andi.w	#$F0,d4
    7840/    6C36 : 0245 01F0           		andi.w	#$1F0,d5
    7841/    6C3A : E94C                		lsl.w	#4,d4
    7842/    6C3C : E44D                		lsr.w	#2,d5
    7843/    6C3E : D845                		add.w	d5,d4
    7844/    6C40 : 7003                		moveq	#3,d0
    7845/    6C42 : 4840                		swap	d0
    7846/    6C44 : 3004                		move.w	d4,d0
    7847/    6C46 : 4E75                		rts	
    7848/    6C48 :                     ; End of function sub_6C20
    7849/    6C48 :                     
    7850/    6C48 :                     
    7851/    6C48 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7852/    6C48 :                     ; not used
    7853/    6C48 :                     
    7854/    6C48 :                     
    7855/    6C48 :                     sub_6C3C:
    7856/    6C48 : D86B 0004           		add.w	4(a3),d4
    7857/    6C4C : DA53                		add.w	(a3),d5
    7858/    6C4E : 0244 00F0           		andi.w	#$F0,d4
    7859/    6C52 : 0245 01F0           		andi.w	#$1F0,d5
    7860/    6C56 : E94C                		lsl.w	#4,d4
    7861/    6C58 : E44D                		lsr.w	#2,d5
    7862/    6C5A : D845                		add.w	d5,d4
    7863/    6C5C : 7002                		moveq	#2,d0
    7864/    6C5E : 4840                		swap	d0
    7865/    6C60 : 3004                		move.w	d4,d0
    7866/    6C62 : 4E75                		rts	
    7867/    6C64 :                     ; End of function sub_6C3C
    7868/    6C64 :                     
    7869/    6C64 :                     ; ---------------------------------------------------------------------------
    7870/    6C64 :                     ; Subroutine to	load tiles as soon as the level	appears
    7871/    6C64 :                     ; ---------------------------------------------------------------------------
    7872/    6C64 :                     
    7873/    6C64 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7874/    6C64 :                     
    7875/    6C64 :                     
    7876/    6C64 :                     LoadTilesFromStart:			; XREF: Level; EndingSequence
    7877/    6C64 : 4BF9 00C0 0004      		lea	($C00004).l,a5
    7878/    6C6A : 4DF9 00C0 0000      		lea	($C00000).l,a6
    7879/    6C70 : 47F8 F700           		lea	($FFFFF700).w,a3
    7880/    6C74 : 49F8 A400           		lea	($FFFFA400).w,a4
    7881/    6C78 : 343C 4000           		move.w	#$4000,d2
    7882/    6C7C : 610C                		bsr.s	LoadTilesFromStart2
    7883/    6C7E : 47F8 F708           		lea	($FFFFF708).w,a3
    7884/    6C82 : 49F8 A440           		lea	($FFFFA440).w,a4
    7885/    6C86 : 343C 6000           		move.w	#$6000,d2
    7886/    6C8A :                     ; End of function LoadTilesFromStart
    7887/    6C8A :                     
    7888/    6C8A :                     
    7889/    6C8A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7890/    6C8A :                     
    7891/    6C8A :                     
    7892/    6C8A :                     LoadTilesFromStart2:			; XREF: LoadTilesFromStart
    7893/    6C8A : 78F0                		moveq	#-$10,d4
    7894/    6C8C : 7C0F                		moveq	#$F,d6
    7895/    6C8E :                     
    7896/    6C8E :                     loc_6C82:
    7897/    6C8E : 48E7 0E00           		movem.l	d4-d6,-(sp)
    7898/    6C92 : 7A00                		moveq	#0,d5
    7899/    6C94 : 3204                		move.w	d4,d1
    7900/    6C96 : 6100 FF94           		bsr.w	sub_6C20
    7901/    6C9A : 3801                		move.w	d1,d4
    7902/    6C9C : 7A00                		moveq	#0,d5
    7903/    6C9E : 7C1F                		moveq	#$1F,d6
    7904/    6CA0 : 6100 FE44           		bsr.w	sub_6ADA
    7905/    6CA4 : 4CDF 0070           		movem.l	(sp)+,d4-d6
    7906/    6CA8 : 0644 0010           		addi.w	#$10,d4
    7907/    6CAC : 51CE FFE0           		dbf	d6,loc_6C82
    7908/    6CB0 : 4E75                		rts	
    7909/    6CB2 :                     ; End of function LoadTilesFromStart2
    7910/    6CB2 :                     
    7911/    6CB2 :                     ; ---------------------------------------------------------------------------
    7912/    6CB2 :                     ; Main Load Block loading subroutine
    7913/    6CB2 :                     ; ---------------------------------------------------------------------------
    7914/    6CB2 :                     
    7915/    6CB2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7916/    6CB2 :                     
    7917/    6CB2 :                     
    7918/    6CB2 :                     MainLoadBlockLoad:			; XREF: Level; EndingSequence
    7919/    6CB2 : 7000                		moveq	#0,d0
    7920/    6CB4 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    7921/    6CB8 : E948                		lsl.w	#4,d0
    7922/    6CBA : 45F9 0001 D838      		lea	(MainLoadBlocks).l,a2
    7923/    6CC0 : 45F2 0000           		lea	(a2,d0.w),a2
    7924/    6CC4 : 2F0A                		move.l	a2,-(sp)
    7925/    6CC6 : 588A                		addq.l	#4,a2
    7926/    6CC8 : 205A                		movea.l	(a2)+,a0
    7927/    6CCA : 43F8 B000           		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
    7928/    6CCE : 303C 0000           		move.w	#0,d0
    7929/    6CD2 : 6100 AA4A           		bsr.w	EniDec
    7930/    6CD6 : 205A                		movea.l	(a2)+,a0
    7931/    6CD8 : 43F9 00FF 0000      		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
    7932/    6CDE : 6100 ABBC           		bsr.w	KosDec
    7933/    6CE2 : 6100 003A           		bsr.w	LevelLayoutLoad
    7934/    6CE6 : 301A                		move.w	(a2)+,d0
    7935/    6CE8 : 3012                		move.w	(a2),d0
    7936/    6CEA : 0240 00FF           		andi.w	#$FF,d0
    7937/    6CEE : 0C78 0103 FE10      		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
    7938/    6CF4 : 6602                		bne.s	MLB_ChkSBZPal	; if not, branch
    7939/    6CF6 : 700C                		moveq	#$C,d0		; use SB3 pallet
    7940/    6CF8 :                     
    7941/    6CF8 :                     MLB_ChkSBZPal:
    7942/    6CF8 : 0C78 0501 FE10      		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
    7943/    6CFE : 6708                		beq.s	MLB_UsePal0E	; if yes, branch
    7944/    6D00 : 0C78 0502 FE10      		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
    7945/    6D06 : 6602                		bne.s	MLB_NormalPal	; if not, branch
    7946/    6D08 :                     
    7947/    6D08 :                     MLB_UsePal0E:
    7948/    6D08 : 700E                		moveq	#$E,d0		; use SBZ2/FZ pallet
    7949/    6D0A :                     
    7950/    6D0A :                     MLB_NormalPal:
    7951/    6D0A : 6100 B400           		bsr.w	PalLoad1	; load pallet (based on	d0)
    7952/    6D0E : 245F                		movea.l	(sp)+,a2
    7953/    6D10 : 584A                		addq.w	#4,a2
    7954/    6D12 : 7000                		moveq	#0,d0
    7955/    6D14 : 1012                		move.b	(a2),d0
    7956/    6D16 : 6704                		beq.s	locret_6D10
    7957/    6D18 : 6100 A866           		bsr.w	LoadPLC		; load pattern load cues
    7958/    6D1C :                     
    7959/    6D1C :                     locret_6D10:
    7960/    6D1C : 4E75                		rts	
    7961/    6D1E :                     ; End of function MainLoadBlockLoad
    7962/    6D1E :                     
    7963/    6D1E :                     ; ---------------------------------------------------------------------------
    7964/    6D1E :                     ; Level	layout loading subroutine
    7965/    6D1E :                     ; ---------------------------------------------------------------------------
    7966/    6D1E :                     
    7967/    6D1E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7968/    6D1E :                     
    7969/    6D1E :                     
    7970/    6D1E :                     LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
    7971/    6D1E : 47F8 A400           		lea	($FFFFA400).w,a3
    7972/    6D22 : 323C 01FF           		move.w	#$1FF,d1
    7973/    6D26 : 7000                		moveq	#0,d0
    7974/    6D28 :                     
    7975/    6D28 :                     LevLoad_ClrRam:
    7976/    6D28 : 26C0                		move.l	d0,(a3)+
    7977/    6D2A : 51C9 FFFC           		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
    7978/    6D2E :                     
    7979/    6D2E : 47F8 A400           		lea	($FFFFA400).w,a3 ; RAM address for level layout
    7980/    6D32 : 7200                		moveq	#0,d1
    7981/    6D34 : 6100 0008           		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
    7982/    6D38 : 47F8 A440           		lea	($FFFFA440).w,a3 ; RAM address for background layout
    7983/    6D3C : 7202                		moveq	#2,d1
    7984/    6D3E :                     ; End of function LevelLayoutLoad
    7985/    6D3E :                     
    7986/    6D3E :                     ; "LevelLayoutLoad2" is	run twice - for	the level and the background
    7987/    6D3E :                     
    7988/    6D3E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7989/    6D3E :                     
    7990/    6D3E :                     
    7991/    6D3E :                     LevelLayoutLoad2:			; XREF: LevelLayoutLoad
    7992/    6D3E : 3038 FE10           		move.w	($FFFFFE10).w,d0
    7993/    6D42 : ED08                		lsl.b	#6,d0
    7994/    6D44 : EA48                		lsr.w	#5,d0
    7995/    6D46 : 3400                		move.w	d0,d2
    7996/    6D48 : D040                		add.w	d0,d0
    7997/    6D4A : D042                		add.w	d2,d0
    7998/    6D4C : D041                		add.w	d1,d0
    7999/    6D4E : 43F9 0006 9A36      		lea	(Level_Index).l,a1
    8000/    6D54 : 3031 0000           		move.w	(a1,d0.w),d0
    8001/    6D58 : 43F1 0000           		lea	(a1,d0.w),a1
    8002/    6D5C : 7200                		moveq	#0,d1
    8003/    6D5E : 3401                		move.w	d1,d2
    8004/    6D60 : 1219                		move.b	(a1)+,d1	; load level width (in tiles)
    8005/    6D62 : 1419                		move.b	(a1)+,d2	; load level height (in	tiles)
    8006/    6D64 :                     
    8007/    6D64 :                     LevLoad_NumRows:
    8008/    6D64 : 3001                		move.w	d1,d0
    8009/    6D66 : 204B                		movea.l	a3,a0
    8010/    6D68 :                     
    8011/    6D68 :                     LevLoad_Row:
    8012/    6D68 : 10D9                		move.b	(a1)+,(a0)+
    8013/    6D6A : 51C8 FFFC           		dbf	d0,LevLoad_Row	; load 1 row
    8014/    6D6E : 47EB 0080           		lea	$80(a3),a3	; do next row
    8015/    6D72 : 51CA FFF0           		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
    8016/    6D76 : 4E75                		rts	
    8017/    6D78 :                     ; End of function LevelLayoutLoad2
    8018/    6D78 :                     
    8019/    6D78 :                     ; ---------------------------------------------------------------------------
    8020/    6D78 :                     ; Dynamic screen resize	loading	subroutine
    8021/    6D78 :                     ; ---------------------------------------------------------------------------
    8022/    6D78 :                     
    8023/    6D78 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8024/    6D78 :                     
    8025/    6D78 :                     
    8026/    6D78 :                     DynScrResizeLoad:			; XREF: DeformBgLayer
    8027/    6D78 : 7000                		moveq	#0,d0
    8028/    6D7A : 1038 FE10           		move.b	($FFFFFE10).w,d0
    8029/    6D7E : D040                		add.w	d0,d0
    8030/    6D80 : 303B 005A           		move.w	Resize_Index(pc,d0.w),d0
    8031/    6D84 : 4EBB 0056           		jsr	Resize_Index(pc,d0.w)
    8032/    6D88 : 7202                		moveq	#2,d1
    8033/    6D8A : 3038 F726           		move.w	($FFFFF726).w,d0
    8034/    6D8E : 9078 F72E           		sub.w	($FFFFF72E).w,d0
    8035/    6D92 : 6722                		beq.s	locret_6DAA
    8036/    6D94 : 6422                		bcc.s	loc_6DAC
    8037/    6D96 : 4441                		neg.w	d1
    8038/    6D98 : 3038 F704           		move.w	($FFFFF704).w,d0
    8039/    6D9C : B078 F726           		cmp.w	($FFFFF726).w,d0
    8040/    6DA0 : 630A                		bls.s	loc_6DA0
    8041/    6DA2 : 31C0 F72E           		move.w	d0,($FFFFF72E).w
    8042/    6DA6 : 0278 FFFE F72E      		andi.w	#-2,($FFFFF72E).w
    8043/    6DAC :                     
    8044/    6DAC :                     loc_6DA0:
    8045/    6DAC : D378 F72E           		add.w	d1,($FFFFF72E).w
    8046/    6DB0 : 11FC 0001 F75C      		move.b	#1,($FFFFF75C).w
    8047/    6DB6 :                     
    8048/    6DB6 :                     locret_6DAA:
    8049/    6DB6 : 4E75                		rts	
    8050/    6DB8 :                     ; ===========================================================================
    8051/    6DB8 :                     
    8052/    6DB8 :                     loc_6DAC:				; XREF: DynScrResizeLoad
    8053/    6DB8 : 3038 F704           		move.w	($FFFFF704).w,d0
    8054/    6DBC : 5040                		addq.w	#8,d0
    8055/    6DBE : B078 F72E           		cmp.w	($FFFFF72E).w,d0
    8056/    6DC2 : 650C                		bcs.s	loc_6DC4
    8057/    6DC4 : 0838 0001 D022      		btst	#1,($FFFFD022).w
    8058/    6DCA : 6704                		beq.s	loc_6DC4
    8059/    6DCC : D241                		add.w	d1,d1
    8060/    6DCE : D241                		add.w	d1,d1
    8061/    6DD0 :                     
    8062/    6DD0 :                     loc_6DC4:
    8063/    6DD0 : D378 F72E           		add.w	d1,($FFFFF72E).w
    8064/    6DD4 : 11FC 0001 F75C      		move.b	#1,($FFFFF75C).w
    8065/    6DDA : 4E75                		rts	
    8066/    6DDC :                     ; End of function DynScrResizeLoad
    8067/    6DDC :                     
    8068/    6DDC :                     ; ===========================================================================
    8069/    6DDC :                     ; ---------------------------------------------------------------------------
    8070/    6DDC :                     ; Offset index for dynamic screen resizing
    8071/    6DDC :                     ; ---------------------------------------------------------------------------
    8072/    6DDC : 000E 0122           Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
    8073/    6DE0 : 01BE 0322           		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
    8074/    6DE4 : 0398 043A           		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
    8075/    6DE8 : 0556                		dc.w Resize_Ending-Resize_Index
    8076/    6DEA :                     ; ===========================================================================
    8077/    6DEA :                     ; ---------------------------------------------------------------------------
    8078/    6DEA :                     ; Green	Hill Zone dynamic screen resizing
    8079/    6DEA :                     ; ---------------------------------------------------------------------------
    8080/    6DEA :                     
    8081/    6DEA :                     Resize_GHZ:				; XREF: Resize_Index
    8082/    6DEA : 7000                		moveq	#0,d0
    8083/    6DEC : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8084/    6DF0 : D040                		add.w	d0,d0
    8085/    6DF2 : 303B 0006           		move.w	Resize_GHZx(pc,d0.w),d0
    8086/    6DF6 : 4EFB 0002           		jmp	Resize_GHZx(pc,d0.w)
    8087/    6DFA :                     ; ===========================================================================
    8088/    6DFA : 0006                Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
    8089/    6DFC : 001C                		dc.w Resize_GHZ2-Resize_GHZx
    8090/    6DFE : 004E                		dc.w Resize_GHZ3-Resize_GHZx
    8091/    6E00 :                     ; ===========================================================================
    8092/    6E00 :                     
    8093/    6E00 :                     Resize_GHZ1:
    8094/    6E00 : 31FC 0300 F726      		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
    8095/    6E06 : 0C78 1780 F700      		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
    8096/    6E0C : 6506                		bcs.s	locret_6E08	; if not, branch
    8097/    6E0E : 31FC 0400 F726      		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
    8098/    6E14 :                     
    8099/    6E14 :                     locret_6E08:
    8100/    6E14 : 4E75                		rts	
    8101/    6E16 :                     ; ===========================================================================
    8102/    6E16 :                     
    8103/    6E16 :                     Resize_GHZ2:
    8104/    6E16 : 31FC 0300 F726      		move.w	#$300,($FFFFF726).w
    8105/    6E1C : 0C78 0ED0 F700      		cmpi.w	#$ED0,($FFFFF700).w
    8106/    6E22 : 6522                		bcs.s	locret_6E3A
    8107/    6E24 : 31FC 0200 F726      		move.w	#$200,($FFFFF726).w
    8108/    6E2A : 0C78 1600 F700      		cmpi.w	#$1600,($FFFFF700).w
    8109/    6E30 : 6514                		bcs.s	locret_6E3A
    8110/    6E32 : 31FC 0400 F726      		move.w	#$400,($FFFFF726).w
    8111/    6E38 : 0C78 1D60 F700      		cmpi.w	#$1D60,($FFFFF700).w
    8112/    6E3E : 6506                		bcs.s	locret_6E3A
    8113/    6E40 : 31FC 0300 F726      		move.w	#$300,($FFFFF726).w
    8114/    6E46 :                     
    8115/    6E46 :                     locret_6E3A:
    8116/    6E46 : 4E75                		rts	
    8117/    6E48 :                     ; ===========================================================================
    8118/    6E48 :                     
    8119/    6E48 :                     Resize_GHZ3:
    8120/    6E48 : 7000                		moveq	#0,d0
    8121/    6E4A : 1038 F742           		move.b	($FFFFF742).w,d0
    8122/    6E4E : 303B 0006           		move.w	off_6E4A(pc,d0.w),d0
    8123/    6E52 : 4EFB 0002           		jmp	off_6E4A(pc,d0.w)
    8124/    6E56 :                     ; ===========================================================================
    8125/    6E56 : 0006                off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
    8126/    6E58 : 005A                		dc.w Resize_GHZ3boss-off_6E4A
    8127/    6E5A : 00A0                		dc.w Resize_GHZ3end-off_6E4A
    8128/    6E5C :                     ; ===========================================================================
    8129/    6E5C :                     
    8130/    6E5C :                     Resize_GHZ3main:
    8131/    6E5C : 31FC 0300 F726      		move.w	#$300,($FFFFF726).w
    8132/    6E62 : 0C78 0380 F700      		cmpi.w	#$380,($FFFFF700).w
    8133/    6E68 : 6538                		bcs.s	locret_6E96
    8134/    6E6A : 31FC 0310 F726      		move.w	#$310,($FFFFF726).w
    8135/    6E70 : 0C78 0960 F700      		cmpi.w	#$960,($FFFFF700).w
    8136/    6E76 : 652A                		bcs.s	locret_6E96
    8137/    6E78 : 0C78 0280 F704      		cmpi.w	#$280,($FFFFF704).w
    8138/    6E7E : 6524                		bcs.s	loc_6E98
    8139/    6E80 : 31FC 0400 F726      		move.w	#$400,($FFFFF726).w
    8140/    6E86 : 0C78 1380 F700      		cmpi.w	#$1380,($FFFFF700).w
    8141/    6E8C : 640C                		bcc.s	loc_6E8E
    8142/    6E8E : 31FC 04C0 F726      		move.w	#$4C0,($FFFFF726).w
    8143/    6E94 : 31FC 04C0 F72E      		move.w	#$4C0,($FFFFF72E).w
    8144/    6E9A :                     
    8145/    6E9A :                     loc_6E8E:
    8146/    6E9A : 0C78 1700 F700      		cmpi.w	#$1700,($FFFFF700).w
    8147/    6EA0 : 6402                		bcc.s	loc_6E98
    8148/    6EA2 :                     
    8149/    6EA2 :                     locret_6E96:
    8150/    6EA2 : 4E75                		rts	
    8151/    6EA4 :                     ; ===========================================================================
    8152/    6EA4 :                     
    8153/    6EA4 :                     loc_6E98:
    8154/    6EA4 : 31FC 0300 F726      		move.w	#$300,($FFFFF726).w
    8155/    6EAA : 5438 F742           		addq.b	#2,($FFFFF742).w
    8156/    6EAE : 4E75                		rts	
    8157/    6EB0 :                     ; ===========================================================================
    8158/    6EB0 :                     
    8159/    6EB0 :                     Resize_GHZ3boss:
    8160/    6EB0 : 0C78 0960 F700      		cmpi.w	#$960,($FFFFF700).w
    8161/    6EB6 : 6404                		bcc.s	loc_6EB0
    8162/    6EB8 : 5538 F742           		subq.b	#2,($FFFFF742).w
    8163/    6EBC :                     
    8164/    6EBC :                     loc_6EB0:
    8165/    6EBC : 0C78 2960 F700      		cmpi.w	#$2960,($FFFFF700).w
    8166/    6EC2 : 6530                		bcs.s	locret_6EE8
    8167/    6EC4 : 6100 6CD0           		bsr.w	SingleObjLoad
    8168/    6EC8 : 6612                		bne.s	loc_6ED0
    8169/    6ECA : (MACRO)             		_move.b	#$3D,0(a1)	; load GHZ boss	object
    8169/    6ECA :  (MACRO-2)                          insn2op move.b, #$3D,0(a1)
    8169/    6ECA : 137C 003D 0001                              !move.b   #$3D,1+0(a1)
    8169/    6ECF :                                             !org    *-1
    8169/    6ECF : 00                                          !dc.b   0
    8170/    6ED0 : 337C 2A60 0008      		move.w	#$2A60,8(a1)
    8171/    6ED6 : 337C 0280 000C      		move.w	#$280,$C(a1)
    8172/    6EDC :                     
    8173/    6EDC :                     loc_6ED0:
    8174/    6EDC : 303C 008C           		move.w	#$8C,d0
    8175/    6EE0 : 6100 A4B4           		bsr.w	PlaySound	; play boss music
    8176/    6EE4 : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8177/    6EEA : 5438 F742           		addq.b	#2,($FFFFF742).w
    8178/    6EEE : 7011                		moveq	#$11,d0
    8179/    6EF0 : 6000 A68E           		bra.w	LoadPLC		; load boss patterns
    8180/    6EF4 :                     ; ===========================================================================
    8181/    6EF4 :                     
    8182/    6EF4 :                     locret_6EE8:
    8183/    6EF4 : 4E75                		rts	
    8184/    6EF6 :                     ; ===========================================================================
    8185/    6EF6 :                     
    8186/    6EF6 :                     Resize_GHZ3end:
    8187/    6EF6 : 31F8 F700 F728      		move.w	($FFFFF700).w,($FFFFF728).w
    8188/    6EFC : 4E75                		rts	
    8189/    6EFE :                     ; ===========================================================================
    8190/    6EFE :                     ; ---------------------------------------------------------------------------
    8191/    6EFE :                     ; Labyrinth Zone dynamic screen	resizing
    8192/    6EFE :                     ; ---------------------------------------------------------------------------
    8193/    6EFE :                     
    8194/    6EFE :                     Resize_LZ:				; XREF: Resize_Index
    8195/    6EFE : 7000                		moveq	#0,d0
    8196/    6F00 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8197/    6F04 : D040                		add.w	d0,d0
    8198/    6F06 : 303B 0006           		move.w	Resize_LZx(pc,d0.w),d0
    8199/    6F0A : 4EFB 0002           		jmp	Resize_LZx(pc,d0.w)
    8200/    6F0E :                     ; ===========================================================================
    8201/    6F0E : 0008                Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
    8202/    6F10 : 0008                		dc.w Resize_LZ12-Resize_LZx
    8203/    6F12 : 000A                		dc.w Resize_LZ3-Resize_LZx
    8204/    6F14 : 0064                		dc.w Resize_SBZ3-Resize_LZx
    8205/    6F16 :                     ; ===========================================================================
    8206/    6F16 :                     
    8207/    6F16 :                     Resize_LZ12:
    8208/    6F16 : 4E75                		rts	
    8209/    6F18 :                     ; ===========================================================================
    8210/    6F18 :                     
    8211/    6F18 :                     Resize_LZ3:
    8212/    6F18 : 4A38 F7EF           		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
    8213/    6F1C : 6716                		beq.s	loc_6F28	; if not, branch
    8214/    6F1E : 43F8 A506           		lea	($FFFFA506).w,a1
    8215/    6F22 : 0C11 0007           		cmpi.b	#7,(a1)
    8216/    6F26 : 670C                		beq.s	loc_6F28
    8217/    6F28 : 12BC 0007           		move.b	#7,(a1)		; modify level layout
    8218/    6F2C : 303C 00B7           		move.w	#$B7,d0
    8219/    6F30 : 6100 A46A           		bsr.w	PlaySound_Special ; play rumbling sound
    8220/    6F34 :                     
    8221/    6F34 :                     loc_6F28:
    8222/    6F34 : 4A38 F742           		tst.b	($FFFFF742).w
    8223/    6F38 : 6636                		bne.s	locret_6F64
    8224/    6F3A : 0C78 1CA0 F700      		cmpi.w	#$1CA0,($FFFFF700).w
    8225/    6F40 : 652C                		bcs.s	locret_6F62
    8226/    6F42 : 0C78 0600 F704      		cmpi.w	#$600,($FFFFF704).w
    8227/    6F48 : 6424                		bcc.s	locret_6F62
    8228/    6F4A : 6100 6C4A           		bsr.w	SingleObjLoad
    8229/    6F4E : 6606                		bne.s	loc_6F4A
    8230/    6F50 : (MACRO)             		_move.b	#$77,0(a1)	; load LZ boss object
    8230/    6F50 :  (MACRO-2)                          insn2op move.b, #$77,0(a1)
    8230/    6F50 : 137C 0077 0001                              !move.b   #$77,1+0(a1)
    8230/    6F55 :                                             !org    *-1
    8230/    6F55 : 00                                          !dc.b   0
    8231/    6F56 :                     
    8232/    6F56 :                     loc_6F4A:
    8233/    6F56 : 303C 008C           		move.w	#$8C,d0
    8234/    6F5A : 6100 A43A           		bsr.w	PlaySound	; play boss music
    8235/    6F5E : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8236/    6F64 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8237/    6F68 : 7011                		moveq	#$11,d0
    8238/    6F6A : 6000 A614           		bra.w	LoadPLC		; load boss patterns
    8239/    6F6E :                     ; ===========================================================================
    8240/    6F6E :                     
    8241/    6F6E :                     locret_6F62:
    8242/    6F6E : 4E75                		rts	
    8243/    6F70 :                     ; ===========================================================================
    8244/    6F70 :                     
    8245/    6F70 :                     locret_6F64:
    8246/    6F70 : 4E75                		rts	
    8247/    6F72 :                     ; ===========================================================================
    8248/    6F72 :                     
    8249/    6F72 :                     Resize_SBZ3:
    8250/    6F72 : 0C78 0D00 F700      		cmpi.w	#$D00,($FFFFF700).w
    8251/    6F78 : 651E                		bcs.s	locret_6F8C
    8252/    6F7A : 0C78 0018 D00C      		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
    8253/    6F80 : 6416                		bcc.s	locret_6F8C	; if not, branch
    8254/    6F82 : 4238 FE30           		clr.b	($FFFFFE30).w
    8255/    6F86 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart level
    8256/    6F8C : 31FC 0502 FE10      		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
    8257/    6F92 : 11FC 0001 F7C8      		move.b	#1,($FFFFF7C8).w ; freeze Sonic
    8258/    6F98 :                     
    8259/    6F98 :                     locret_6F8C:
    8260/    6F98 : 4E75                		rts	
    8261/    6F9A :                     ; ===========================================================================
    8262/    6F9A :                     ; ---------------------------------------------------------------------------
    8263/    6F9A :                     ; Marble Zone dynamic screen resizing
    8264/    6F9A :                     ; ---------------------------------------------------------------------------
    8265/    6F9A :                     
    8266/    6F9A :                     Resize_MZ:				; XREF: Resize_Index
    8267/    6F9A : 7000                		moveq	#0,d0
    8268/    6F9C : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8269/    6FA0 : D040                		add.w	d0,d0
    8270/    6FA2 : 303B 0006           		move.w	Resize_MZx(pc,d0.w),d0
    8271/    6FA6 : 4EFB 0002           		jmp	Resize_MZx(pc,d0.w)
    8272/    6FAA :                     ; ===========================================================================
    8273/    6FAA : 0006                Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
    8274/    6FAC : 00D6                		dc.w Resize_MZ2-Resize_MZx
    8275/    6FAE : 00EC                		dc.w Resize_MZ3-Resize_MZx
    8276/    6FB0 :                     ; ===========================================================================
    8277/    6FB0 :                     
    8278/    6FB0 :                     Resize_MZ1:
    8279/    6FB0 : 7000                		moveq	#0,d0
    8280/    6FB2 : 1038 F742           		move.b	($FFFFF742).w,d0
    8281/    6FB6 : 303B 0006           		move.w	off_6FB2(pc,d0.w),d0
    8282/    6FBA : 4EFB 0002           		jmp	off_6FB2(pc,d0.w)
    8283/    6FBE :                     ; ===========================================================================
    8284/    6FBE : 0008                off_6FB2:	dc.w loc_6FBA-off_6FB2
    8285/    6FC0 : 0038                		dc.w loc_6FEA-off_6FB2
    8286/    6FC2 : 007C                		dc.w loc_702E-off_6FB2
    8287/    6FC4 : 009E                		dc.w loc_7050-off_6FB2
    8288/    6FC6 :                     ; ===========================================================================
    8289/    6FC6 :                     
    8290/    6FC6 :                     loc_6FBA:
    8291/    6FC6 : 31FC 01D0 F726      		move.w	#$1D0,($FFFFF726).w
    8292/    6FCC : 0C78 0700 F700      		cmpi.w	#$700,($FFFFF700).w
    8293/    6FD2 : 6520                		bcs.s	locret_6FE8
    8294/    6FD4 : 31FC 0220 F726      		move.w	#$220,($FFFFF726).w
    8295/    6FDA : 0C78 0D00 F700      		cmpi.w	#$D00,($FFFFF700).w
    8296/    6FE0 : 6512                		bcs.s	locret_6FE8
    8297/    6FE2 : 31FC 0340 F726      		move.w	#$340,($FFFFF726).w
    8298/    6FE8 : 0C78 0340 F704      		cmpi.w	#$340,($FFFFF704).w
    8299/    6FEE : 6504                		bcs.s	locret_6FE8
    8300/    6FF0 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8301/    6FF4 :                     
    8302/    6FF4 :                     locret_6FE8:
    8303/    6FF4 : 4E75                		rts	
    8304/    6FF6 :                     ; ===========================================================================
    8305/    6FF6 :                     
    8306/    6FF6 :                     loc_6FEA:
    8307/    6FF6 : 0C78 0340 F704      		cmpi.w	#$340,($FFFFF704).w
    8308/    6FFC : 6406                		bcc.s	loc_6FF8
    8309/    6FFE : 5538 F742           		subq.b	#2,($FFFFF742).w
    8310/    7002 : 4E75                		rts	
    8311/    7004 :                     ; ===========================================================================
    8312/    7004 :                     
    8313/    7004 :                     loc_6FF8:
    8314/    7004 : 31FC 0000 F72C      		move.w	#0,($FFFFF72C).w
    8315/    700A : 0C78 0E00 F700      		cmpi.w	#$E00,($FFFFF700).w
    8316/    7010 : 6426                		bcc.s	locret_702C
    8317/    7012 : 31FC 0340 F72C      		move.w	#$340,($FFFFF72C).w
    8318/    7018 : 31FC 0340 F726      		move.w	#$340,($FFFFF726).w
    8319/    701E : 0C78 0A90 F700      		cmpi.w	#$A90,($FFFFF700).w
    8320/    7024 : 6412                		bcc.s	locret_702C
    8321/    7026 : 31FC 0500 F726      		move.w	#$500,($FFFFF726).w
    8322/    702C : 0C78 0370 F704      		cmpi.w	#$370,($FFFFF704).w
    8323/    7032 : 6504                		bcs.s	locret_702C
    8324/    7034 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8325/    7038 :                     
    8326/    7038 :                     locret_702C:
    8327/    7038 : 4E75                		rts	
    8328/    703A :                     ; ===========================================================================
    8329/    703A :                     
    8330/    703A :                     loc_702E:
    8331/    703A : 0C78 0370 F704      		cmpi.w	#$370,($FFFFF704).w
    8332/    7040 : 6406                		bcc.s	loc_703C
    8333/    7042 : 5538 F742           		subq.b	#2,($FFFFF742).w
    8334/    7046 : 4E75                		rts	
    8335/    7048 :                     ; ===========================================================================
    8336/    7048 :                     
    8337/    7048 :                     loc_703C:
    8338/    7048 : 0C78 0500 F704      		cmpi.w	#$500,($FFFFF704).w
    8339/    704E : 650A                		bcs.s	locret_704E
    8340/    7050 : 31FC 0500 F72C      		move.w	#$500,($FFFFF72C).w
    8341/    7056 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8342/    705A :                     
    8343/    705A :                     locret_704E:
    8344/    705A : 4E75                		rts	
    8345/    705C :                     ; ===========================================================================
    8346/    705C :                     
    8347/    705C :                     loc_7050:
    8348/    705C : 0C78 0E70 F700      		cmpi.w	#$E70,($FFFFF700).w
    8349/    7062 : 651A                		bcs.s	locret_7072
    8350/    7064 : 31FC 0000 F72C      		move.w	#0,($FFFFF72C).w
    8351/    706A : 31FC 0500 F726      		move.w	#$500,($FFFFF726).w
    8352/    7070 : 0C78 1430 F700      		cmpi.w	#$1430,($FFFFF700).w
    8353/    7076 : 6506                		bcs.s	locret_7072
    8354/    7078 : 31FC 0210 F726      		move.w	#$210,($FFFFF726).w
    8355/    707E :                     
    8356/    707E :                     locret_7072:
    8357/    707E : 4E75                		rts	
    8358/    7080 :                     ; ===========================================================================
    8359/    7080 :                     
    8360/    7080 :                     Resize_MZ2:
    8361/    7080 : 31FC 0520 F726      		move.w	#$520,($FFFFF726).w
    8362/    7086 : 0C78 1700 F700      		cmpi.w	#$1700,($FFFFF700).w
    8363/    708C : 6506                		bcs.s	locret_7088
    8364/    708E : 31FC 0200 F726      		move.w	#$200,($FFFFF726).w
    8365/    7094 :                     
    8366/    7094 :                     locret_7088:
    8367/    7094 : 4E75                		rts	
    8368/    7096 :                     ; ===========================================================================
    8369/    7096 :                     
    8370/    7096 :                     Resize_MZ3:
    8371/    7096 : 7000                		moveq	#0,d0
    8372/    7098 : 1038 F742           		move.b	($FFFFF742).w,d0
    8373/    709C : 303B 0006           		move.w	off_7098(pc,d0.w),d0
    8374/    70A0 : 4EFB 0002           		jmp	off_7098(pc,d0.w)
    8375/    70A4 :                     ; ===========================================================================
    8376/    70A4 : 0004                off_7098:	dc.w Resize_MZ3boss-off_7098
    8377/    70A6 : 0052                		dc.w Resize_MZ3end-off_7098
    8378/    70A8 :                     ; ===========================================================================
    8379/    70A8 :                     
    8380/    70A8 :                     Resize_MZ3boss:
    8381/    70A8 : 31FC 0720 F726      		move.w	#$720,($FFFFF726).w
    8382/    70AE : 0C78 1560 F700      		cmpi.w	#$1560,($FFFFF700).w
    8383/    70B4 : 653E                		bcs.s	locret_70E8
    8384/    70B6 : 31FC 0210 F726      		move.w	#$210,($FFFFF726).w
    8385/    70BC : 0C78 17F0 F700      		cmpi.w	#$17F0,($FFFFF700).w
    8386/    70C2 : 6530                		bcs.s	locret_70E8
    8387/    70C4 : 6100 6AD0           		bsr.w	SingleObjLoad
    8388/    70C8 : 6612                		bne.s	loc_70D0
    8389/    70CA : (MACRO)             		_move.b	#$73,0(a1)	; load MZ boss object
    8389/    70CA :  (MACRO-2)                          insn2op move.b, #$73,0(a1)
    8389/    70CA : 137C 0073 0001                              !move.b   #$73,1+0(a1)
    8389/    70CF :                                             !org    *-1
    8389/    70CF : 00                                          !dc.b   0
    8390/    70D0 : 337C 19F0 0008      		move.w	#$19F0,8(a1)
    8391/    70D6 : 337C 022C 000C      		move.w	#$22C,$C(a1)
    8392/    70DC :                     
    8393/    70DC :                     loc_70D0:
    8394/    70DC : 303C 008C           		move.w	#$8C,d0
    8395/    70E0 : 6100 A2B4           		bsr.w	PlaySound	; play boss music
    8396/    70E4 : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8397/    70EA : 5438 F742           		addq.b	#2,($FFFFF742).w
    8398/    70EE : 7011                		moveq	#$11,d0
    8399/    70F0 : 6000 A48E           		bra.w	LoadPLC		; load boss patterns
    8400/    70F4 :                     ; ===========================================================================
    8401/    70F4 :                     
    8402/    70F4 :                     locret_70E8:
    8403/    70F4 : 4E75                		rts	
    8404/    70F6 :                     ; ===========================================================================
    8405/    70F6 :                     
    8406/    70F6 :                     Resize_MZ3end:
    8407/    70F6 : 31F8 F700 F728      		move.w	($FFFFF700).w,($FFFFF728).w
    8408/    70FC : 4E75                		rts	
    8409/    70FE :                     ; ===========================================================================
    8410/    70FE :                     ; ---------------------------------------------------------------------------
    8411/    70FE :                     ; Star Light Zone dynamic screen resizing
    8412/    70FE :                     ; ---------------------------------------------------------------------------
    8413/    70FE :                     
    8414/    70FE :                     Resize_SLZ:				; XREF: Resize_Index
    8415/    70FE : 7000                		moveq	#0,d0
    8416/    7100 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8417/    7104 : D040                		add.w	d0,d0
    8418/    7106 : 303B 0006           		move.w	Resize_SLZx(pc,d0.w),d0
    8419/    710A : 4EFB 0002           		jmp	Resize_SLZx(pc,d0.w)
    8420/    710E :                     ; ===========================================================================
    8421/    710E : 0006                Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
    8422/    7110 : 0006                		dc.w Resize_SLZ12-Resize_SLZx
    8423/    7112 : 0008                		dc.w Resize_SLZ3-Resize_SLZx
    8424/    7114 :                     ; ===========================================================================
    8425/    7114 :                     
    8426/    7114 :                     Resize_SLZ12:
    8427/    7114 : 4E75                		rts	
    8428/    7116 :                     ; ===========================================================================
    8429/    7116 :                     
    8430/    7116 :                     Resize_SLZ3:
    8431/    7116 : 7000                		moveq	#0,d0
    8432/    7118 : 1038 F742           		move.b	($FFFFF742).w,d0
    8433/    711C : 303B 0006           		move.w	off_7118(pc,d0.w),d0
    8434/    7120 : 4EFB 0002           		jmp	off_7118(pc,d0.w)
    8435/    7124 :                     ; ===========================================================================
    8436/    7124 : 0006                off_7118:	dc.w Resize_SLZ3main-off_7118
    8437/    7126 : 001A                		dc.w Resize_SLZ3boss-off_7118
    8438/    7128 : 0046                		dc.w Resize_SLZ3end-off_7118
    8439/    712A :                     ; ===========================================================================
    8440/    712A :                     
    8441/    712A :                     Resize_SLZ3main:
    8442/    712A : 0C78 1E70 F700      		cmpi.w	#$1E70,($FFFFF700).w
    8443/    7130 : 650A                		bcs.s	locret_7130
    8444/    7132 : 31FC 0210 F726      		move.w	#$210,($FFFFF726).w
    8445/    7138 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8446/    713C :                     
    8447/    713C :                     locret_7130:
    8448/    713C : 4E75                		rts	
    8449/    713E :                     ; ===========================================================================
    8450/    713E :                     
    8451/    713E :                     Resize_SLZ3boss:
    8452/    713E : 0C78 2000 F700      		cmpi.w	#$2000,($FFFFF700).w
    8453/    7144 : 6522                		bcs.s	locret_715C
    8454/    7146 : 6100 6A4E           		bsr.w	SingleObjLoad
    8455/    714A : 6604                		bne.s	loc_7144
    8456/    714C : 12BC 007A           		move.b	#$7A,(a1)	; load SLZ boss	object
    8457/    7150 :                     
    8458/    7150 :                     loc_7144:
    8459/    7150 : 303C 008C           		move.w	#$8C,d0
    8460/    7154 : 6100 A240           		bsr.w	PlaySound	; play boss music
    8461/    7158 : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8462/    715E : 5438 F742           		addq.b	#2,($FFFFF742).w
    8463/    7162 : 7011                		moveq	#$11,d0
    8464/    7164 : 6000 A41A           		bra.w	LoadPLC		; load boss patterns
    8465/    7168 :                     ; ===========================================================================
    8466/    7168 :                     
    8467/    7168 :                     locret_715C:
    8468/    7168 : 4E75                		rts	
    8469/    716A :                     ; ===========================================================================
    8470/    716A :                     
    8471/    716A :                     Resize_SLZ3end:
    8472/    716A : 31F8 F700 F728      		move.w	($FFFFF700).w,($FFFFF728).w
    8473/    7170 : 4E75                		rts
    8474/    7172 : 4E75                		rts
    8475/    7174 :                     ; ===========================================================================
    8476/    7174 :                     ; ---------------------------------------------------------------------------
    8477/    7174 :                     ; Spring Yard Zone dynamic screen resizing
    8478/    7174 :                     ; ---------------------------------------------------------------------------
    8479/    7174 :                     
    8480/    7174 :                     Resize_SYZ:				; XREF: Resize_Index
    8481/    7174 : 7000                		moveq	#0,d0
    8482/    7176 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8483/    717A : D040                		add.w	d0,d0
    8484/    717C : 303B 0006           		move.w	Resize_SYZx(pc,d0.w),d0
    8485/    7180 : 4EFB 0002           		jmp	Resize_SYZx(pc,d0.w)
    8486/    7184 :                     ; ===========================================================================
    8487/    7184 : 0006                Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
    8488/    7186 : 0008                		dc.w Resize_SYZ2-Resize_SYZx
    8489/    7188 : 002C                		dc.w Resize_SYZ3-Resize_SYZx
    8490/    718A :                     ; ===========================================================================
    8491/    718A :                     
    8492/    718A :                     Resize_SYZ1:
    8493/    718A : 4E75                		rts	
    8494/    718C :                     ; ===========================================================================
    8495/    718C :                     
    8496/    718C :                     Resize_SYZ2:
    8497/    718C : 31FC 0520 F726      		move.w	#$520,($FFFFF726).w
    8498/    7192 : 0C78 25A0 F700      		cmpi.w	#$25A0,($FFFFF700).w
    8499/    7198 : 6514                		bcs.s	locret_71A2
    8500/    719A : 31FC 0420 F726      		move.w	#$420,($FFFFF726).w
    8501/    71A0 : 0C78 04D0 D00C      		cmpi.w	#$4D0,($FFFFD00C).w
    8502/    71A6 : 6506                		bcs.s	locret_71A2
    8503/    71A8 : 31FC 0520 F726      		move.w	#$520,($FFFFF726).w
    8504/    71AE :                     
    8505/    71AE :                     locret_71A2:
    8506/    71AE : 4E75                		rts	
    8507/    71B0 :                     ; ===========================================================================
    8508/    71B0 :                     
    8509/    71B0 :                     Resize_SYZ3:
    8510/    71B0 : 7000                		moveq	#0,d0
    8511/    71B2 : 1038 F742           		move.b	($FFFFF742).w,d0
    8512/    71B6 : 303B 0006           		move.w	off_71B2(pc,d0.w),d0
    8513/    71BA : 4EFB 0002           		jmp	off_71B2(pc,d0.w)
    8514/    71BE :                     ; ===========================================================================
    8515/    71BE : 0006                off_71B2:	dc.w Resize_SYZ3main-off_71B2
    8516/    71C0 : 001E                		dc.w Resize_SYZ3boss-off_71B2
    8517/    71C2 : 0050                		dc.w Resize_SYZ3end-off_71B2
    8518/    71C4 :                     ; ===========================================================================
    8519/    71C4 :                     
    8520/    71C4 :                     Resize_SYZ3main:
    8521/    71C4 : 0C78 2AC0 F700      		cmpi.w	#$2AC0,($FFFFF700).w
    8522/    71CA : 650E                		bcs.s	locret_71CE
    8523/    71CC : 6100 69C8           		bsr.w	SingleObjLoad
    8524/    71D0 : 6608                		bne.s	locret_71CE
    8525/    71D2 : 12BC 0076           		move.b	#$76,(a1)	; load blocks that boss	picks up
    8526/    71D6 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8527/    71DA :                     
    8528/    71DA :                     locret_71CE:
    8529/    71DA : 4E75                		rts	
    8530/    71DC :                     ; ===========================================================================
    8531/    71DC :                     
    8532/    71DC :                     Resize_SYZ3boss:
    8533/    71DC : 0C78 2C00 F700      		cmpi.w	#$2C00,($FFFFF700).w
    8534/    71E2 : 6528                		bcs.s	locret_7200
    8535/    71E4 : 31FC 04CC F726      		move.w	#$4CC,($FFFFF726).w
    8536/    71EA : 6100 69AA           		bsr.w	SingleObjLoad
    8537/    71EE : 6608                		bne.s	loc_71EC
    8538/    71F0 : 12BC 0075           		move.b	#$75,(a1)	; load SYZ boss	object
    8539/    71F4 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8540/    71F8 :                     
    8541/    71F8 :                     loc_71EC:
    8542/    71F8 : 303C 008C           		move.w	#$8C,d0
    8543/    71FC : 6100 A198           		bsr.w	PlaySound	; play boss music
    8544/    7200 : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8545/    7206 : 7011                		moveq	#$11,d0
    8546/    7208 : 6000 A376           		bra.w	LoadPLC		; load boss patterns
    8547/    720C :                     ; ===========================================================================
    8548/    720C :                     
    8549/    720C :                     locret_7200:
    8550/    720C : 4E75                		rts	
    8551/    720E :                     ; ===========================================================================
    8552/    720E :                     
    8553/    720E :                     Resize_SYZ3end:
    8554/    720E : 31F8 F700 F728      		move.w	($FFFFF700).w,($FFFFF728).w
    8555/    7214 : 4E75                		rts	
    8556/    7216 :                     ; ===========================================================================
    8557/    7216 :                     ; ---------------------------------------------------------------------------
    8558/    7216 :                     ; Scrap	Brain Zone dynamic screen resizing
    8559/    7216 :                     ; ---------------------------------------------------------------------------
    8560/    7216 :                     
    8561/    7216 :                     Resize_SBZ:				; XREF: Resize_Index
    8562/    7216 : 7000                		moveq	#0,d0
    8563/    7218 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8564/    721C : D040                		add.w	d0,d0
    8565/    721E : 303B 0006           		move.w	Resize_SBZx(pc,d0.w),d0
    8566/    7222 : 4EFB 0002           		jmp	Resize_SBZx(pc,d0.w)
    8567/    7226 :                     ; ===========================================================================
    8568/    7226 : 0006                Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
    8569/    7228 : 002A                		dc.w Resize_SBZ2-Resize_SBZx
    8570/    722A : 00B0                		dc.w Resize_FZ-Resize_SBZx
    8571/    722C :                     ; ===========================================================================
    8572/    722C :                     
    8573/    722C :                     Resize_SBZ1:
    8574/    722C : 31FC 0720 F726      		move.w	#$720,($FFFFF726).w
    8575/    7232 : 0C78 1880 F700      		cmpi.w	#$1880,($FFFFF700).w
    8576/    7238 : 6514                		bcs.s	locret_7242
    8577/    723A : 31FC 0620 F726      		move.w	#$620,($FFFFF726).w
    8578/    7240 : 0C78 2000 F700      		cmpi.w	#$2000,($FFFFF700).w
    8579/    7246 : 6506                		bcs.s	locret_7242
    8580/    7248 : 31FC 02A0 F726      		move.w	#$2A0,($FFFFF726).w
    8581/    724E :                     
    8582/    724E :                     locret_7242:
    8583/    724E : 4E75                		rts	
    8584/    7250 :                     ; ===========================================================================
    8585/    7250 :                     
    8586/    7250 :                     Resize_SBZ2:
    8587/    7250 : 7000                		moveq	#0,d0
    8588/    7252 : 1038 F742           		move.b	($FFFFF742).w,d0
    8589/    7256 : 303B 0006           		move.w	off_7252(pc,d0.w),d0
    8590/    725A : 4EFB 0002           		jmp	off_7252(pc,d0.w)
    8591/    725E :                     ; ===========================================================================
    8592/    725E : 0008                off_7252:	dc.w Resize_SBZ2main-off_7252
    8593/    7260 : 002A                		dc.w Resize_SBZ2boss-off_7252
    8594/    7262 : 0048                		dc.w Resize_SBZ2boss2-off_7252
    8595/    7264 : 0066                		dc.w Resize_SBZ2end-off_7252
    8596/    7266 :                     ; ===========================================================================
    8597/    7266 :                     
    8598/    7266 :                     Resize_SBZ2main:
    8599/    7266 : 31FC 0800 F726      		move.w	#$800,($FFFFF726).w
    8600/    726C : 0C78 1800 F700      		cmpi.w	#$1800,($FFFFF700).w
    8601/    7272 : 6512                		bcs.s	locret_727A
    8602/    7274 : 31FC 0510 F726      		move.w	#$510,($FFFFF726).w
    8603/    727A : 0C78 1E00 F700      		cmpi.w	#$1E00,($FFFFF700).w
    8604/    7280 : 6504                		bcs.s	locret_727A
    8605/    7282 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8606/    7286 :                     
    8607/    7286 :                     locret_727A:
    8608/    7286 : 4E75                		rts	
    8609/    7288 :                     ; ===========================================================================
    8610/    7288 :                     
    8611/    7288 :                     Resize_SBZ2boss:
    8612/    7288 : 0C78 1EB0 F700      		cmpi.w	#$1EB0,($FFFFF700).w
    8613/    728E : 6514                		bcs.s	locret_7298
    8614/    7290 : 6100 6904           		bsr.w	SingleObjLoad
    8615/    7294 : 660E                		bne.s	locret_7298
    8616/    7296 : 12BC 0083           		move.b	#$83,(a1)	; load collapsing block	object
    8617/    729A : 5438 F742           		addq.b	#2,($FFFFF742).w
    8618/    729E : 701E                		moveq	#$1E,d0
    8619/    72A0 : 6000 A2DE           		bra.w	LoadPLC		; load SBZ2 Eggman patterns
    8620/    72A4 :                     ; ===========================================================================
    8621/    72A4 :                     
    8622/    72A4 :                     locret_7298:
    8623/    72A4 : 4E75                		rts	
    8624/    72A6 :                     ; ===========================================================================
    8625/    72A6 :                     
    8626/    72A6 :                     Resize_SBZ2boss2:
    8627/    72A6 : 0C78 1F60 F700      		cmpi.w	#$1F60,($FFFFF700).w
    8628/    72AC : 6514                		bcs.s	loc_72B6
    8629/    72AE : 6100 68E6           		bsr.w	SingleObjLoad
    8630/    72B2 : 6608                		bne.s	loc_72B0
    8631/    72B4 : 12BC 0082           		move.b	#$82,(a1)	; load SBZ2 Eggman object
    8632/    72B8 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8633/    72BC :                     
    8634/    72BC :                     loc_72B0:
    8635/    72BC : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8636/    72C2 :                     
    8637/    72C2 :                     loc_72B6:
    8638/    72C2 : 600A                		bra.s	loc_72C2
    8639/    72C4 :                     ; ===========================================================================
    8640/    72C4 :                     
    8641/    72C4 :                     Resize_SBZ2end:
    8642/    72C4 : 0C78 2050 F700      		cmpi.w	#$2050,($FFFFF700).w
    8643/    72CA : 6502                		bcs.s	loc_72C2
    8644/    72CC : 4E75                		rts	
    8645/    72CE :                     ; ===========================================================================
    8646/    72CE :                     
    8647/    72CE :                     loc_72C2:
    8648/    72CE : 31F8 F700 F728      		move.w	($FFFFF700).w,($FFFFF728).w
    8649/    72D4 : 4E75                		rts	
    8650/    72D6 :                     ; ===========================================================================
    8651/    72D6 :                     
    8652/    72D6 :                     Resize_FZ:
    8653/    72D6 : 7000                		moveq	#0,d0
    8654/    72D8 : 1038 F742           		move.b	($FFFFF742).w,d0
    8655/    72DC : 303B 0006           		move.w	off_72D8(pc,d0.w),d0
    8656/    72E0 : 4EFB 0002           		jmp	off_72D8(pc,d0.w)
    8657/    72E4 :                     ; ===========================================================================
    8658/    72E4 : 000A 001E           off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
    8659/    72E8 : 003C 004A           		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
    8660/    72EC : 004C                		dc.w Resize_FZend2-off_72D8
    8661/    72EE :                     ; ===========================================================================
    8662/    72EE :                     
    8663/    72EE :                     Resize_FZmain:
    8664/    72EE : 0C78 2148 F700      		cmpi.w	#$2148,($FFFFF700).w
    8665/    72F4 : 650A                		bcs.s	loc_72F4
    8666/    72F6 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8667/    72FA : 701F                		moveq	#$1F,d0
    8668/    72FC : 6100 A282           		bsr.w	LoadPLC		; load FZ boss patterns
    8669/    7300 :                     
    8670/    7300 :                     loc_72F4:
    8671/    7300 : 60CC                		bra.s	loc_72C2
    8672/    7302 :                     ; ===========================================================================
    8673/    7302 :                     
    8674/    7302 :                     Resize_FZboss:
    8675/    7302 : 0C78 2300 F700      		cmpi.w	#$2300,($FFFFF700).w
    8676/    7308 : 6514                		bcs.s	loc_7312
    8677/    730A : 6100 688A           		bsr.w	SingleObjLoad
    8678/    730E : 660E                		bne.s	loc_7312
    8679/    7310 : 12BC 0085           		move.b	#$85,(a1)	; load FZ boss object
    8680/    7314 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8681/    7318 : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8682/    731E :                     
    8683/    731E :                     loc_7312:
    8684/    731E : 60AE                		bra.s	loc_72C2
    8685/    7320 :                     ; ===========================================================================
    8686/    7320 :                     
    8687/    7320 :                     Resize_FZend:
    8688/    7320 : 0C78 2450 F700      		cmpi.w	#$2450,($FFFFF700).w
    8689/    7326 : 6504                		bcs.s	loc_7320
    8690/    7328 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8691/    732C :                     
    8692/    732C :                     loc_7320:
    8693/    732C : 60A0                		bra.s	loc_72C2
    8694/    732E :                     ; ===========================================================================
    8695/    732E :                     
    8696/    732E :                     locret_7322:
    8697/    732E : 4E75                		rts	
    8698/    7330 :                     ; ===========================================================================
    8699/    7330 :                     
    8700/    7330 :                     Resize_FZend2:
    8701/    7330 : 609C                		bra.s	loc_72C2
    8702/    7332 :                     ; ===========================================================================
    8703/    7332 :                     ; ---------------------------------------------------------------------------
    8704/    7332 :                     ; Ending sequence dynamic screen resizing (empty)
    8705/    7332 :                     ; ---------------------------------------------------------------------------
    8706/    7332 :                     
    8707/    7332 :                     Resize_Ending:				; XREF: Resize_Index
    8708/    7332 : 4E75                		rts	
    8709/    7334 :                     ; ===========================================================================
    8710/    7334 :                     ; ---------------------------------------------------------------------------
    8711/    7334 :                     ; Object 11 - GHZ bridge
    8712/    7334 :                     ; ---------------------------------------------------------------------------
    8713/    7334 :                     
    8714/    7334 :                     Obj11:					; XREF: Obj_Index
    8715/    7334 : 7000                		moveq	#0,d0
    8716/    7336 : 1028 0024           		move.b	$24(a0),d0
    8717/    733A : 323B 0006           		move.w	Obj11_Index(pc,d0.w),d1
    8718/    733E : 4EFB 1002           		jmp	Obj11_Index(pc,d1.w)
    8719/    7342 :                     ; ===========================================================================
    8720/    7342 : 000C 00CE           Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
    8721/    7346 : 0252 05F2           		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
    8722/    734A : 05F2 05F8           		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
    8723/    734E :                     ; ===========================================================================
    8724/    734E :                     
    8725/    734E :                     Obj11_Main:				; XREF: Obj11_Index
    8726/    734E : 5428 0024           		addq.b	#2,$24(a0)
    8727/    7352 : 217C 0000 7940 0004 		move.l	#Map_obj11,4(a0)
    8728/    735A : 317C 438E 0002      		move.w	#$438E,2(a0)
    8729/    7360 : 117C 0004 0001      		move.b	#4,1(a0)
    8730/    7366 : 117C 0003 0018      		move.b	#3,$18(a0)
    8731/    736C : 117C 0080 0019      		move.b	#$80,$19(a0)
    8732/    7372 : 3428 000C           		move.w	$C(a0),d2
    8733/    7376 : 3628 0008           		move.w	8(a0),d3
    8734/    737A : (MACRO)             		_move.b	0(a0),d4	; copy object number ($11) to d4
    8734/    737A :  (MACRO-2)                          insn2op move.b, 0(a0),d4
    8734/    737A : 1828 0001                                   !move.b   1+0(a0),d4
    8734/    737D :                                             !org    *-1
    8734/    737D : 00                                          !dc.b   0
    8735/    737E : 45E8 0028           		lea	$28(a0),a2	; copy bridge subtype to a2
    8736/    7382 : 7200                		moveq	#0,d1
    8737/    7384 : 1212                		move.b	(a2),d1		; copy a2 to d1
    8738/    7386 : 14FC 0000           		move.b	#0,(a2)+
    8739/    738A : 3001                		move.w	d1,d0
    8740/    738C : E248                		lsr.w	#1,d0
    8741/    738E : E948                		lsl.w	#4,d0
    8742/    7390 : 9640                		sub.w	d0,d3
    8743/    7392 : 5501                		subq.b	#2,d1
    8744/    7394 : 657A                		bcs.s	Obj11_Action
    8745/    7396 :                     
    8746/    7396 :                     Obj11_MakeBdg:
    8747/    7396 : 6100 67FE           		bsr.w	SingleObjLoad
    8748/    739A : 6674                		bne.s	Obj11_Action
    8749/    739C : 5228 0028           		addq.b	#1,$28(a0)
    8750/    73A0 : B668 0008           		cmp.w	8(a0),d3
    8751/    73A4 : 661E                		bne.s	loc_73B8
    8752/    73A6 : 0643 0010           		addi.w	#$10,d3
    8753/    73AA : 3142 000C           		move.w	d2,$C(a0)
    8754/    73AE : 3142 003C           		move.w	d2,$3C(a0)
    8755/    73B2 : 3A08                		move.w	a0,d5
    8756/    73B4 : 0445 D000           		subi.w	#-$3000,d5
    8757/    73B8 : EC4D                		lsr.w	#6,d5
    8758/    73BA : 0245 007F           		andi.w	#$7F,d5
    8759/    73BE : 14C5                		move.b	d5,(a2)+
    8760/    73C0 : 5228 0028           		addq.b	#1,$28(a0)
    8761/    73C4 :                     
    8762/    73C4 :                     loc_73B8:				; XREF: ROM:00007398j
    8763/    73C4 : 3A09                		move.w	a1,d5
    8764/    73C6 : 0445 D000           		subi.w	#-$3000,d5
    8765/    73CA : EC4D                		lsr.w	#6,d5
    8766/    73CC : 0245 007F           		andi.w	#$7F,d5
    8767/    73D0 : 14C5                		move.b	d5,(a2)+
    8768/    73D2 : 137C 000A 0024      		move.b	#$A,$24(a1)
    8769/    73D8 : (MACRO)             		_move.b	d4,0(a1)	; load bridge object (d4 = $11)
    8769/    73D8 :  (MACRO-2)                          insn2op move.b, d4,0(a1)
    8769/    73D8 : 1344 0001                                   !move.b   d4,1+0(a1)
    8769/    73DB :                                             !org    *-1
    8769/    73DB : 00                                          !dc.b   0
    8770/    73DC : 3342 000C           		move.w	d2,$C(a1)
    8771/    73E0 : 3342 003C           		move.w	d2,$3C(a1)
    8772/    73E4 : 3343 0008           		move.w	d3,8(a1)
    8773/    73E8 : 237C 0000 7940 0004 		move.l	#Map_obj11,4(a1)
    8774/    73F0 : 337C 438E 0002      		move.w	#$438E,2(a1)
    8775/    73F6 : 137C 0004 0001      		move.b	#4,1(a1)
    8776/    73FC : 137C 0003 0018      		move.b	#3,$18(a1)
    8777/    7402 : 137C 0008 0019      		move.b	#8,$19(a1)
    8778/    7408 : 0643 0010           		addi.w	#$10,d3
    8779/    740C : 51C9 FF88           		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
    8780/    7410 :                     
    8781/    7410 :                     Obj11_Action:				; XREF: Obj11_Index
    8782/    7410 : 6116                		bsr.s	Obj11_Solid
    8783/    7412 : 4A28 003E           		tst.b	$3E(a0)
    8784/    7416 : 6708                		beq.s	Obj11_Display
    8785/    7418 : 5928 003E           		subq.b	#4,$3E(a0)
    8786/    741C : 6100 020E           		bsr.w	Obj11_Bend
    8787/    7420 :                     
    8788/    7420 :                     Obj11_Display:
    8789/    7420 : 6100 62EC           		bsr.w	DisplaySprite
    8790/    7424 : 6000 04C2           		bra.w	Obj11_ChkDel
    8791/    7428 :                     
    8792/    7428 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8793/    7428 :                     
    8794/    7428 :                     
    8795/    7428 :                     Obj11_Solid:				; XREF: Obj11_Action
    8796/    7428 : 7200                		moveq	#0,d1
    8797/    742A : 1228 0028           		move.b	$28(a0),d1
    8798/    742E : E749                		lsl.w	#3,d1
    8799/    7430 : 3401                		move.w	d1,d2
    8800/    7432 : 5041                		addq.w	#8,d1
    8801/    7434 : D442                		add.w	d2,d2
    8802/    7436 : 43F8 D000           		lea	($FFFFD000).w,a1
    8803/    743A : 4A69 0012           		tst.w	$12(a1)
    8804/    743E : 6B00 00EA           		bmi.w	locret_751E
    8805/    7442 : 3029 0008           		move.w	8(a1),d0
    8806/    7446 : 9068 0008           		sub.w	8(a0),d0
    8807/    744A : D041                		add.w	d1,d0
    8808/    744C : 6B00 00DC           		bmi.w	locret_751E
    8809/    7450 : B042                		cmp.w	d2,d0
    8810/    7452 : 6400 00D6           		bcc.w	locret_751E
    8811/    7456 : 6022                		bra.s	Platform2
    8812/    7458 :                     ; End of function Obj11_Solid
    8813/    7458 :                     
    8814/    7458 :                     ; ---------------------------------------------------------------------------
    8815/    7458 :                     ; Platform subroutine
    8816/    7458 :                     ; ---------------------------------------------------------------------------
    8817/    7458 :                     
    8818/    7458 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8819/    7458 :                     
    8820/    7458 :                     
    8821/    7458 :                     PlatformObject:
    8822/    7458 : 43F8 D000           		lea	($FFFFD000).w,a1
    8823/    745C : 4A69 0012           		tst.w	$12(a1)
    8824/    7460 : 6B00 00C8           		bmi.w	locret_751E
    8825/    7464 : 3029 0008           		move.w	8(a1),d0
    8826/    7468 : 9068 0008           		sub.w	8(a0),d0
    8827/    746C : D041                		add.w	d1,d0
    8828/    746E : 6B00 00BA           		bmi.w	locret_751E
    8829/    7472 : D241                		add.w	d1,d1
    8830/    7474 : B041                		cmp.w	d1,d0
    8831/    7476 : 6400 00B2           		bcc.w	locret_751E
    8832/    747A :                     
    8833/    747A :                     Platform2:
    8834/    747A : 3028 000C           		move.w	$C(a0),d0
    8835/    747E : 5140                		subq.w	#8,d0
    8836/    7480 :                     
    8837/    7480 :                     Platform3:
    8838/    7480 : 3429 000C           		move.w	$C(a1),d2
    8839/    7484 : 1229 0016           		move.b	$16(a1),d1
    8840/    7488 : 4881                		ext.w	d1
    8841/    748A : D242                		add.w	d2,d1
    8842/    748C : 5841                		addq.w	#4,d1
    8843/    748E : 9041                		sub.w	d1,d0
    8844/    7490 : 6200 0098           		bhi.w	locret_751E
    8845/    7494 : 0C40 FFF0           		cmpi.w	#-$10,d0
    8846/    7498 : 6500 0090           		bcs.w	locret_751E
    8847/    749C : 4A38 F7C8           		tst.b	($FFFFF7C8).w
    8848/    74A0 : 6B00 0088           		bmi.w	locret_751E
    8849/    74A4 : 0C29 0006 0024      		cmpi.b	#6,$24(a1)
    8850/    74AA : 6400 007E           		bcc.w	locret_751E
    8851/    74AE : D440                		add.w	d0,d2
    8852/    74B0 : 5642                		addq.w	#3,d2
    8853/    74B2 : 3342 000C           		move.w	d2,$C(a1)
    8854/    74B6 : 5428 0024           		addq.b	#2,$24(a0)
    8855/    74BA :                     
    8856/    74BA :                     loc_74AE:
    8857/    74BA : 0829 0003 0022      		btst	#3,$22(a1)
    8858/    74C0 : 6726                		beq.s	loc_74DC
    8859/    74C2 : 7000                		moveq	#0,d0
    8860/    74C4 : 1029 003D           		move.b	$3D(a1),d0
    8861/    74C8 : ED48                		lsl.w	#6,d0
    8862/    74CA : 0680 00FF D000      		addi.l	#$FFD000,d0
    8863/    74D0 : 2440                		movea.l	d0,a2
    8864/    74D2 : 08AA 0003 0022      		bclr	#3,$22(a2)
    8865/    74D8 : 422A 0025           		clr.b	$25(a2)
    8866/    74DC : 0C2A 0004 0024      		cmpi.b	#4,$24(a2)
    8867/    74E2 : 6604                		bne.s	loc_74DC
    8868/    74E4 : 552A 0024           		subq.b	#2,$24(a2)
    8869/    74E8 :                     
    8870/    74E8 :                     loc_74DC:
    8871/    74E8 : 3008                		move.w	a0,d0
    8872/    74EA : 0440 D000           		subi.w	#-$3000,d0
    8873/    74EE : EC48                		lsr.w	#6,d0
    8874/    74F0 : 0240 007F           		andi.w	#$7F,d0
    8875/    74F4 : 1340 003D           		move.b	d0,$3D(a1)
    8876/    74F8 : 137C 0000 0026      		move.b	#0,$26(a1)
    8877/    74FE : 337C 0000 0012      		move.w	#0,$12(a1)
    8878/    7504 : 3369 0010 0014      		move.w	$10(a1),$14(a1)
    8879/    750A : 0829 0001 0022      		btst	#1,$22(a1)
    8880/    7510 : 670C                		beq.s	loc_7512
    8881/    7512 : 2F08                		move.l	a0,-(sp)
    8882/    7514 : 2049                		movea.l	a1,a0
    8883/    7516 : 4EB9 0001 3A0E      		jsr	(Sonic_ResetOnFloor).l
    8884/    751C : 205F                		movea.l	(sp)+,a0
    8885/    751E :                     
    8886/    751E :                     loc_7512:
    8887/    751E : 08E9 0003 0022      		bset	#3,$22(a1)
    8888/    7524 : 08E8 0003 0022      		bset	#3,$22(a0)
    8889/    752A :                     
    8890/    752A :                     locret_751E:
    8891/    752A : 4E75                		rts	
    8892/    752C :                     ; End of function PlatformObject
    8893/    752C :                     
    8894/    752C :                     ; ---------------------------------------------------------------------------
    8895/    752C :                     ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
    8896/    752C :                     ; ---------------------------------------------------------------------------
    8897/    752C :                     
    8898/    752C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8899/    752C :                     
    8900/    752C :                     
    8901/    752C :                     SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
    8902/    752C : 43F8 D000           		lea	($FFFFD000).w,a1
    8903/    7530 : 4A69 0012           		tst.w	$12(a1)
    8904/    7534 : 6B00 FFF4           		bmi.w	locret_751E
    8905/    7538 : 3029 0008           		move.w	8(a1),d0
    8906/    753C : 9068 0008           		sub.w	8(a0),d0
    8907/    7540 : D041                		add.w	d1,d0
    8908/    7542 : 6BE6                		bmi.s	locret_751E
    8909/    7544 : D241                		add.w	d1,d1
    8910/    7546 : B041                		cmp.w	d1,d0
    8911/    7548 : 64E0                		bcc.s	locret_751E
    8912/    754A : 0828 0000 0001      		btst	#0,1(a0)
    8913/    7550 : 6704                		beq.s	loc_754A
    8914/    7552 : 4640                		not.w	d0
    8915/    7554 : D041                		add.w	d1,d0
    8916/    7556 :                     
    8917/    7556 :                     loc_754A:
    8918/    7556 : E248                		lsr.w	#1,d0
    8919/    7558 : 7600                		moveq	#0,d3
    8920/    755A : 1632 0000           		move.b	(a2,d0.w),d3
    8921/    755E : 3028 000C           		move.w	$C(a0),d0
    8922/    7562 : 9043                		sub.w	d3,d0
    8923/    7564 : 6000 FF1A           		bra.w	Platform3
    8924/    7568 :                     ; End of function SlopeObject
    8925/    7568 :                     
    8926/    7568 :                     
    8927/    7568 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8928/    7568 :                     
    8929/    7568 :                     
    8930/    7568 :                     Obj15_Solid:				; XREF: Obj15_SetSolid
    8931/    7568 : 43F8 D000           		lea	($FFFFD000).w,a1
    8932/    756C : 4A69 0012           		tst.w	$12(a1)
    8933/    7570 : 6B00 FFB8           		bmi.w	locret_751E
    8934/    7574 : 3029 0008           		move.w	8(a1),d0
    8935/    7578 : 9068 0008           		sub.w	8(a0),d0
    8936/    757C : D041                		add.w	d1,d0
    8937/    757E : 6B00 FFAA           		bmi.w	locret_751E
    8938/    7582 : D241                		add.w	d1,d1
    8939/    7584 : B041                		cmp.w	d1,d0
    8940/    7586 : 6400 FFA2           		bcc.w	locret_751E
    8941/    758A : 3028 000C           		move.w	$C(a0),d0
    8942/    758E : 9043                		sub.w	d3,d0
    8943/    7590 : 6000 FEEE           		bra.w	Platform3
    8944/    7594 :                     ; End of function Obj15_Solid
    8945/    7594 :                     
    8946/    7594 :                     ; ===========================================================================
    8947/    7594 :                     
    8948/    7594 :                     Obj11_Action2:				; XREF: Obj11_Index
    8949/    7594 : 6108                		bsr.s	Obj11_WalkOff
    8950/    7596 : 6100 6176           		bsr.w	DisplaySprite
    8951/    759A : 6000 034C           		bra.w	Obj11_ChkDel
    8952/    759E :                     
    8953/    759E :                     ; ---------------------------------------------------------------------------
    8954/    759E :                     ; Subroutine allowing Sonic to walk off a bridge
    8955/    759E :                     ; ---------------------------------------------------------------------------
    8956/    759E :                     
    8957/    759E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8958/    759E :                     
    8959/    759E :                     
    8960/    759E :                     Obj11_WalkOff:				; XREF: Obj11_Action2
    8961/    759E : 7200                		moveq	#0,d1
    8962/    75A0 : 1228 0028           		move.b	$28(a0),d1
    8963/    75A4 : E749                		lsl.w	#3,d1
    8964/    75A6 : 3401                		move.w	d1,d2
    8965/    75A8 : 5041                		addq.w	#8,d1
    8966/    75AA : 6122                		bsr.s	ExitPlatform2
    8967/    75AC : 641C                		bcc.s	locret_75BE
    8968/    75AE : E848                		lsr.w	#4,d0
    8969/    75B0 : 1140 003F           		move.b	d0,$3F(a0)
    8970/    75B4 : 1028 003E           		move.b	$3E(a0),d0
    8971/    75B8 : 0C00 0040           		cmpi.b	#$40,d0
    8972/    75BC : 6704                		beq.s	loc_75B6
    8973/    75BE : 5828 003E           		addq.b	#4,$3E(a0)
    8974/    75C2 :                     
    8975/    75C2 :                     loc_75B6:
    8976/    75C2 : 6100 0068           		bsr.w	Obj11_Bend
    8977/    75C6 : 6100 0038           		bsr.w	Obj11_MoveSonic
    8978/    75CA :                     
    8979/    75CA :                     locret_75BE:
    8980/    75CA : 4E75                		rts	
    8981/    75CC :                     ; End of function Obj11_WalkOff
    8982/    75CC :                     
    8983/    75CC :                     ; ---------------------------------------------------------------------------
    8984/    75CC :                     ; Subroutine allowing Sonic to walk or jump off	a platform
    8985/    75CC :                     ; ---------------------------------------------------------------------------
    8986/    75CC :                     
    8987/    75CC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8988/    75CC :                     
    8989/    75CC :                     
    8990/    75CC :                     ExitPlatform:
    8991/    75CC : 3401                		move.w	d1,d2
    8992/    75CE :                     
    8993/    75CE :                     ExitPlatform2:
    8994/    75CE : D442                		add.w	d2,d2
    8995/    75D0 : 43F8 D000           		lea	($FFFFD000).w,a1
    8996/    75D4 : 0829 0001 0022      		btst	#1,$22(a1)
    8997/    75DA : 6610                		bne.s	loc_75E0
    8998/    75DC : 3029 0008           		move.w	8(a1),d0
    8999/    75E0 : 9068 0008           		sub.w	8(a0),d0
    9000/    75E4 : D041                		add.w	d1,d0
    9001/    75E6 : 6B04                		bmi.s	loc_75E0
    9002/    75E8 : B042                		cmp.w	d2,d0
    9003/    75EA : 6512                		bcs.s	locret_75F2
    9004/    75EC :                     
    9005/    75EC :                     loc_75E0:
    9006/    75EC : 08A9 0003 0022      		bclr	#3,$22(a1)
    9007/    75F2 : 117C 0002 0024      		move.b	#2,$24(a0)
    9008/    75F8 : 08A8 0003 0022      		bclr	#3,$22(a0)
    9009/    75FE :                     
    9010/    75FE :                     locret_75F2:
    9011/    75FE : 4E75                		rts	
    9012/    7600 :                     ; End of function ExitPlatform
    9013/    7600 :                     
    9014/    7600 :                     
    9015/    7600 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9016/    7600 :                     
    9017/    7600 :                     
    9018/    7600 :                     Obj11_MoveSonic:			; XREF: Obj11_WalkOff
    9019/    7600 : 7000                		moveq	#0,d0
    9020/    7602 : 1028 003F           		move.b	$3F(a0),d0
    9021/    7606 : 1030 0029           		move.b	$29(a0,d0.w),d0
    9022/    760A : ED48                		lsl.w	#6,d0
    9023/    760C : 0680 00FF D000      		addi.l	#$FFD000,d0
    9024/    7612 : 2440                		movea.l	d0,a2
    9025/    7614 : 43F8 D000           		lea	($FFFFD000).w,a1
    9026/    7618 : 302A 000C           		move.w	$C(a2),d0
    9027/    761C : 5140                		subq.w	#8,d0
    9028/    761E : 7200                		moveq	#0,d1
    9029/    7620 : 1229 0016           		move.b	$16(a1),d1
    9030/    7624 : 9041                		sub.w	d1,d0
    9031/    7626 : 3340 000C           		move.w	d0,$C(a1)	; change Sonic"s position on y-axis
    9032/    762A : 4E75                		rts	
    9033/    762C :                     ; End of function Obj11_MoveSonic
    9034/    762C :                     
    9035/    762C :                     
    9036/    762C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9037/    762C :                     
    9038/    762C :                     
    9039/    762C :                     Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
    9040/    762C : 1028 003E           		move.b	$3E(a0),d0
    9041/    7630 : 6100 B3B8           		bsr.w	CalcSine
    9042/    7634 : 3800                		move.w	d0,d4
    9043/    7636 : 49F9 0000 77E8      		lea	(Obj11_BendData2).l,a4
    9044/    763C : 7000                		moveq	#0,d0
    9045/    763E : 1028 0028           		move.b	$28(a0),d0
    9046/    7642 : E948                		lsl.w	#4,d0
    9047/    7644 : 7600                		moveq	#0,d3
    9048/    7646 : 1628 003F           		move.b	$3F(a0),d3
    9049/    764A : 3403                		move.w	d3,d2
    9050/    764C : D640                		add.w	d0,d3
    9051/    764E : 7A00                		moveq	#0,d5
    9052/    7650 : 4BF9 0000 76D8      		lea	(Obj11_BendData).l,a5
    9053/    7656 : 1A35 3000           		move.b	(a5,d3.w),d5
    9054/    765A : 0243 000F           		andi.w	#$F,d3
    9055/    765E : E94B                		lsl.w	#4,d3
    9056/    7660 : 47F4 3000           		lea	(a4,d3.w),a3
    9057/    7664 : 45E8 0029           		lea	$29(a0),a2
    9058/    7668 :                     
    9059/    7668 :                     loc_765C:
    9060/    7668 : 7000                		moveq	#0,d0
    9061/    766A : 101A                		move.b	(a2)+,d0
    9062/    766C : ED48                		lsl.w	#6,d0
    9063/    766E : 0680 00FF D000      		addi.l	#$FFD000,d0
    9064/    7674 : 2240                		movea.l	d0,a1
    9065/    7676 : 7000                		moveq	#0,d0
    9066/    7678 : 101B                		move.b	(a3)+,d0
    9067/    767A : 5240                		addq.w	#1,d0
    9068/    767C : C0C5                		mulu.w	d5,d0
    9069/    767E : C0C4                		mulu.w	d4,d0
    9070/    7680 : 4840                		swap	d0
    9071/    7682 : D069 003C           		add.w	$3C(a1),d0
    9072/    7686 : 3340 000C           		move.w	d0,$C(a1)
    9073/    768A : 51CA FFDC           		dbf	d2,loc_765C
    9074/    768E : 7000                		moveq	#0,d0
    9075/    7690 : 1028 0028           		move.b	$28(a0),d0
    9076/    7694 : 7600                		moveq	#0,d3
    9077/    7696 : 1628 003F           		move.b	$3F(a0),d3
    9078/    769A : 5203                		addq.b	#1,d3
    9079/    769C : 9600                		sub.b	d0,d3
    9080/    769E : 4403                		neg.b	d3
    9081/    76A0 : 6B34                		bmi.s	locret_76CA
    9082/    76A2 : 3403                		move.w	d3,d2
    9083/    76A4 : E94B                		lsl.w	#4,d3
    9084/    76A6 : 47F4 3000           		lea	(a4,d3.w),a3
    9085/    76AA : D6C2                		adda.w	d2,a3
    9086/    76AC : 5342                		subq.w	#1,d2
    9087/    76AE : 6526                		bcs.s	locret_76CA
    9088/    76B0 :                     
    9089/    76B0 :                     loc_76A4:
    9090/    76B0 : 7000                		moveq	#0,d0
    9091/    76B2 : 101A                		move.b	(a2)+,d0
    9092/    76B4 : ED48                		lsl.w	#6,d0
    9093/    76B6 : 0680 00FF D000      		addi.l	#$FFD000,d0
    9094/    76BC : 2240                		movea.l	d0,a1
    9095/    76BE : 7000                		moveq	#0,d0
    9096/    76C0 : 1023                		move.b	-(a3),d0
    9097/    76C2 : 5240                		addq.w	#1,d0
    9098/    76C4 : C0C5                		mulu.w	d5,d0
    9099/    76C6 : C0C4                		mulu.w	d4,d0
    9100/    76C8 : 4840                		swap	d0
    9101/    76CA : D069 003C           		add.w	$3C(a1),d0
    9102/    76CE : 3340 000C           		move.w	d0,$C(a1)
    9103/    76D2 : 51CA FFDC           		dbf	d2,loc_76A4
    9104/    76D6 :                     
    9105/    76D6 :                     locret_76CA:
    9106/    76D6 : 4E75                		rts	
    9107/    76D8 :                     ; End of function Obj11_Bend
    9108/    76D8 :                     
    9109/    76D8 :                     ; ===========================================================================
    9110/    76D8 :                     ; ---------------------------------------------------------------------------
    9111/    76D8 :                     ; GHZ bridge-bending data
    9112/    76D8 :                     ; (Defines how the bridge bends	when Sonic walks across	it)
    9113/    76D8 :                     ; ---------------------------------------------------------------------------
    9114/    76D8 :                     Obj11_BendData:	binclude	misc/ghzbend1.bin
    9115/    77E8 : (MACRO)             		align 2
    9115/    77E8 :  (MACRO-2)                  cnop 0,2
    9115/    77E8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    9116/    77E8 :                     Obj11_BendData2:binclude	misc/ghzbend2.bin
    9117/    78E8 : (MACRO)             		align 2
    9117/    78E8 :  (MACRO-2)                  cnop 0,2
    9117/    78E8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    9118/    78E8 :                     
    9119/    78E8 :                     ; ===========================================================================
    9120/    78E8 :                     
    9121/    78E8 :                     Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
    9122/    78E8 : 3028 0008           		move.w	8(a0),d0
    9123/    78EC : 0240 FF80           		andi.w	#$FF80,d0
    9124/    78F0 : 3238 F700           		move.w	($FFFFF700).w,d1
    9125/    78F4 : 0441 0080           		subi.w	#$80,d1
    9126/    78F8 : 0241 FF80           		andi.w	#$FF80,d1
    9127/    78FC : 9041                		sub.w	d1,d0
    9128/    78FE : 0C40 0280           		cmpi.w	#$280,d0
    9129/    7902 : 6200 0004           		bhi.w	Obj11_DelAll
    9130/    7906 : 4E75                		rts	
    9131/    7908 :                     ; ===========================================================================
    9132/    7908 :                     
    9133/    7908 :                     Obj11_DelAll:				; XREF: Obj11_ChkDel
    9134/    7908 : 7400                		moveq	#0,d2
    9135/    790A : 45E8 0028           		lea	$28(a0),a2	; load bridge length
    9136/    790E : 141A                		move.b	(a2)+,d2	; move bridge length to	d2
    9137/    7910 : 5302                		subq.b	#1,d2		; subtract 1
    9138/    7912 : 651A                		bcs.s	Obj11_Delete
    9139/    7914 :                     
    9140/    7914 :                     Obj11_DelLoop:
    9141/    7914 : 7000                		moveq	#0,d0
    9142/    7916 : 101A                		move.b	(a2)+,d0
    9143/    7918 : ED48                		lsl.w	#6,d0
    9144/    791A : 0680 00FF D000      		addi.l	#$FFD000,d0
    9145/    7920 : 2240                		movea.l	d0,a1
    9146/    7922 : B048                		cmp.w	a0,d0
    9147/    7924 : 6704                		beq.s	loc_791E
    9148/    7926 : 6100 5E24           		bsr.w	DeleteObject2
    9149/    792A :                     
    9150/    792A :                     loc_791E:
    9151/    792A : 51CA FFE8           		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
    9152/    792E :                     
    9153/    792E :                     Obj11_Delete:
    9154/    792E : 6100 5E1A           		bsr.w	DeleteObject
    9155/    7932 : 4E75                		rts	
    9156/    7934 :                     ; ===========================================================================
    9157/    7934 :                     
    9158/    7934 :                     Obj11_Delete2:				; XREF: Obj11_Index
    9159/    7934 : 6100 5E14           		bsr.w	DeleteObject
    9160/    7938 : 4E75                		rts	
    9161/    793A :                     ; ===========================================================================
    9162/    793A :                     
    9163/    793A :                     Obj11_Display2:				; XREF: Obj11_Index
    9164/    793A : 6100 5DD2           		bsr.w	DisplaySprite
    9165/    793E : 4E75                		rts	
    9166/    7940 :                     ; ===========================================================================
    9167/    7940 :                     ; ---------------------------------------------------------------------------
    9168/    7940 :                     ; Sprite mappings - GHZ	bridge
    9169/    7940 :                     ; ---------------------------------------------------------------------------
    9170/    7940 :                     Map_obj11:
    9171/    7940 :                     		include	"_maps/obj11.asm"
(1)    1/    7940 :                     ; ---------------------------------------------------------------------------
(1)    2/    7940 :                     ; Sprite mappings - GHZ	bridge
(1)    3/    7940 :                     ; ---------------------------------------------------------------------------
(1)    4/    7940 : 0006 000C           		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
(1)    5/    7944 : 0017                		dc.w byte_794B-Map_obj11
(1)    6/    7946 : 01                  byte_793A:	dc.b 1
(1)    7/    7947 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)    8/    794C : 02                  byte_7940:	dc.b 2
(1)    9/    794D : F804 0004 F0        		dc.b $F8, 4, 0,	4, $F0
(1)   10/    7952 : 000C 0006 F0        		dc.b 0,	$C, 0, 6, $F0
(1)   11/    7957 : 01                  byte_794B:	dc.b 1
(1)   12/    7958 : FC04 0008 F8        		dc.b $FC, 4, 0,	8, $F8
(1)   13/    795D : (MACRO)             		align 2
(1)   13/    795D :  (MACRO-2)                  cnop 0,2
(1)   13/    795D :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   13/    795D : =$5                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   13/    795E :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
    9172/    795E :                     
    9173/    795E :                     ; ===========================================================================
    9174/    795E :                     ; ---------------------------------------------------------------------------
    9175/    795E :                     ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
    9176/    795E :                     ;	    - spiked ball on a chain (SBZ)
    9177/    795E :                     ; ---------------------------------------------------------------------------
    9178/    795E :                     
    9179/    795E :                     Obj15:					; XREF: Obj_Index
    9180/    795E : 7000                		moveq	#0,d0
    9181/    7960 : 1028 0024           		move.b	$24(a0),d0
    9182/    7964 : 323B 0006           		move.w	Obj15_Index(pc,d0.w),d1
    9183/    7968 : 4EFB 1002           		jmp	Obj15_Index(pc,d1.w)
    9184/    796C :                     ; ===========================================================================
    9185/    796C : 000E 017C           Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
    9186/    7970 : 0198 02DE           		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
    9187/    7974 : 02DE 02E4           		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
    9188/    7978 : 018C                		dc.w Obj15_Action-Obj15_Index
    9189/    797A :                     ; ===========================================================================
    9190/    797A :                     
    9191/    797A :                     Obj15_Main:				; XREF: Obj15_Index
    9192/    797A : 5428 0024           		addq.b	#2,$24(a0)
    9193/    797E : 217C 0000 7C54 0004 		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
    9194/    7986 : 317C 4380 0002      		move.w	#$4380,2(a0)
    9195/    798C : 117C 0004 0001      		move.b	#4,1(a0)
    9196/    7992 : 117C 0003 0018      		move.b	#3,$18(a0)
    9197/    7998 : 117C 0018 0019      		move.b	#$18,$19(a0)
    9198/    799E : 117C 0008 0016      		move.b	#8,$16(a0)
    9199/    79A4 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
    9200/    79AA : 3168 0008 003A      		move.w	8(a0),$3A(a0)
    9201/    79B0 : 0C38 0003 FE10      		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
    9202/    79B6 : 6620                		bne.s	Obj15_NotSLZ
    9203/    79B8 : 217C 0000 7C72 0004 		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
    9204/    79C0 : 317C 43DC 0002      		move.w	#$43DC,2(a0)
    9205/    79C6 : 117C 0020 0019      		move.b	#$20,$19(a0)
    9206/    79CC : 117C 0010 0016      		move.b	#$10,$16(a0)
    9207/    79D2 : 117C 0099 0020      		move.b	#$99,$20(a0)
    9208/    79D8 :                     
    9209/    79D8 :                     Obj15_NotSLZ:
    9210/    79D8 : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
    9211/    79DE : 6626                		bne.s	Obj15_SetLength
    9212/    79E0 : 217C 0001 0BB0 0004 		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
    9213/    79E8 : 317C 0391 0002      		move.w	#$391,2(a0)
    9214/    79EE : 117C 0018 0019      		move.b	#$18,$19(a0)
    9215/    79F4 : 117C 0018 0016      		move.b	#$18,$16(a0)
    9216/    79FA : 117C 0086 0020      		move.b	#$86,$20(a0)
    9217/    7A00 : 117C 000C 0024      		move.b	#$C,$24(a0)
    9218/    7A06 :                     
    9219/    7A06 :                     Obj15_SetLength:
    9220/    7A06 : (MACRO)             		_move.b	0(a0),d4
    9220/    7A06 :  (MACRO-2)                          insn2op move.b, 0(a0),d4
    9220/    7A06 : 1828 0001                                   !move.b   1+0(a0),d4
    9220/    7A09 :                                             !org    *-1
    9220/    7A09 : 00                                          !dc.b   0
    9221/    7A0A : 7200                		moveq	#0,d1
    9222/    7A0C : 45E8 0028           		lea	$28(a0),a2	; move chain length to a2
    9223/    7A10 : 1212                		move.b	(a2),d1		; move a2 to d1
    9224/    7A12 : 3F01                		move.w	d1,-(sp)
    9225/    7A14 : 0241 000F           		andi.w	#$F,d1
    9226/    7A18 : 14FC 0000           		move.b	#0,(a2)+
    9227/    7A1C : 3601                		move.w	d1,d3
    9228/    7A1E : E94B                		lsl.w	#4,d3
    9229/    7A20 : 5003                		addq.b	#8,d3
    9230/    7A22 : 1143 003C           		move.b	d3,$3C(a0)
    9231/    7A26 : 5103                		subq.b	#8,d3
    9232/    7A28 : 4A28 001A           		tst.b	$1A(a0)
    9233/    7A2C : 6704                		beq.s	Obj15_MakeChain
    9234/    7A2E : 5003                		addq.b	#8,d3
    9235/    7A30 : 5341                		subq.w	#1,d1
    9236/    7A32 :                     
    9237/    7A32 :                     Obj15_MakeChain:
    9238/    7A32 : 6100 6162           		bsr.w	SingleObjLoad
    9239/    7A36 : 6666                		bne.s	loc_7A92
    9240/    7A38 : 5228 0028           		addq.b	#1,$28(a0)
    9241/    7A3C : 3A09                		move.w	a1,d5
    9242/    7A3E : 0445 D000           		subi.w	#-$3000,d5
    9243/    7A42 : EC4D                		lsr.w	#6,d5
    9244/    7A44 : 0245 007F           		andi.w	#$7F,d5
    9245/    7A48 : 14C5                		move.b	d5,(a2)+
    9246/    7A4A : 137C 000A 0024      		move.b	#$A,$24(a1)
    9247/    7A50 : (MACRO)             		_move.b	d4,0(a1)	; load swinging	object
    9247/    7A50 :  (MACRO-2)                          insn2op move.b, d4,0(a1)
    9247/    7A50 : 1344 0001                                   !move.b   d4,1+0(a1)
    9247/    7A53 :                                             !org    *-1
    9247/    7A53 : 00                                          !dc.b   0
    9248/    7A54 : 2368 0004 0004      		move.l	4(a0),4(a1)
    9249/    7A5A : 3368 0002 0002      		move.w	2(a0),2(a1)
    9250/    7A60 : 08A9 0006 0002      		bclr	#6,2(a1)
    9251/    7A66 : 137C 0004 0001      		move.b	#4,1(a1)
    9252/    7A6C : 137C 0004 0018      		move.b	#4,$18(a1)
    9253/    7A72 : 137C 0008 0019      		move.b	#8,$19(a1)
    9254/    7A78 : 137C 0001 001A      		move.b	#1,$1A(a1)
    9255/    7A7E : 1343 003C           		move.b	d3,$3C(a1)
    9256/    7A82 : 0403 0010           		subi.b	#$10,d3
    9257/    7A86 : 6412                		bcc.s	loc_7A8E
    9258/    7A88 : 137C 0002 001A      		move.b	#2,$1A(a1)
    9259/    7A8E : 137C 0003 0018      		move.b	#3,$18(a1)
    9260/    7A94 : 08E9 0006 0002      		bset	#6,2(a1)
    9261/    7A9A :                     
    9262/    7A9A :                     loc_7A8E:
    9263/    7A9A : 51C9 FF96           		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
    9264/    7A9E :                     
    9265/    7A9E :                     loc_7A92:
    9266/    7A9E : 3A08                		move.w	a0,d5
    9267/    7AA0 : 0445 D000           		subi.w	#-$3000,d5
    9268/    7AA4 : EC4D                		lsr.w	#6,d5
    9269/    7AA6 : 0245 007F           		andi.w	#$7F,d5
    9270/    7AAA : 14C5                		move.b	d5,(a2)+
    9271/    7AAC : 317C 4080 0026      		move.w	#$4080,$26(a0)
    9272/    7AB2 : 317C FE00 003E      		move.w	#-$200,$3E(a0)
    9273/    7AB8 : 321F                		move.w	(sp)+,d1
    9274/    7ABA : 0801 0004           		btst	#4,d1		; is object type $8X ?
    9275/    7ABE : 6720                		beq.s	loc_7AD4	; if not, branch
    9276/    7AC0 : 217C 0000 81B6 0004 		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
    9277/    7AC8 : 317C 43AA 0002      		move.w	#$43AA,2(a0)
    9278/    7ACE : 117C 0001 001A      		move.b	#1,$1A(a0)
    9279/    7AD4 : 117C 0002 0018      		move.b	#2,$18(a0)
    9280/    7ADA : 117C 0081 0020      		move.b	#$81,$20(a0)	; make object hurt when	touched
    9281/    7AE0 :                     
    9282/    7AE0 :                     loc_7AD4:
    9283/    7AE0 : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
    9284/    7AE6 : 6710                		beq.s	Obj15_Action	; if yes, branch
    9285/    7AE8 :                     
    9286/    7AE8 :                     Obj15_SetSolid:				; XREF: Obj15_Index
    9287/    7AE8 : 7200                		moveq	#0,d1
    9288/    7AEA : 1228 0019           		move.b	$19(a0),d1
    9289/    7AEE : 7600                		moveq	#0,d3
    9290/    7AF0 : 1628 0016           		move.b	$16(a0),d3
    9291/    7AF4 : 6100 FA72           		bsr.w	Obj15_Solid
    9292/    7AF8 :                     
    9293/    7AF8 :                     Obj15_Action:				; XREF: Obj15_Index
    9294/    7AF8 : 6100 0076           		bsr.w	Obj15_Move
    9295/    7AFC : 6100 5C10           		bsr.w	DisplaySprite
    9296/    7B00 : 6000 0108           		bra.w	Obj15_ChkDel
    9297/    7B04 :                     ; ===========================================================================
    9298/    7B04 :                     
    9299/    7B04 :                     Obj15_Action2:				; XREF: Obj15_Index
    9300/    7B04 : 7200                		moveq	#0,d1
    9301/    7B06 : 1228 0019           		move.b	$19(a0),d1
    9302/    7B0A : 6100 FAC0           		bsr.w	ExitPlatform
    9303/    7B0E : 3F28 0008           		move.w	8(a0),-(sp)
    9304/    7B12 : 6100 005C           		bsr.w	Obj15_Move
    9305/    7B16 : 341F                		move.w	(sp)+,d2
    9306/    7B18 : 7600                		moveq	#0,d3
    9307/    7B1A : 1628 0016           		move.b	$16(a0),d3
    9308/    7B1E : 5203                		addq.b	#1,d3
    9309/    7B20 : 6100 000C           		bsr.w	MvSonicOnPtfm
    9310/    7B24 : 6100 5BE8           		bsr.w	DisplaySprite
    9311/    7B28 : 6000 00E0           		bra.w	Obj15_ChkDel
    9312/    7B2C :                     
    9313/    7B2C : 4E75                		rts
    9314/    7B2E :                     
    9315/    7B2E :                     ; ---------------------------------------------------------------------------
    9316/    7B2E :                     ; Subroutine to	change Sonic"s position with a platform
    9317/    7B2E :                     ; ---------------------------------------------------------------------------
    9318/    7B2E :                     
    9319/    7B2E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9320/    7B2E :                     
    9321/    7B2E :                     
    9322/    7B2E :                     MvSonicOnPtfm:
    9323/    7B2E : 43F8 D000           		lea	($FFFFD000).w,a1
    9324/    7B32 : 3028 000C           		move.w	$C(a0),d0
    9325/    7B36 : 9043                		sub.w	d3,d0
    9326/    7B38 : 600C                		bra.s	MvSonic2
    9327/    7B3A :                     ; End of function MvSonicOnPtfm
    9328/    7B3A :                     
    9329/    7B3A :                     ; ---------------------------------------------------------------------------
    9330/    7B3A :                     ; Subroutine to	change Sonic"s position with a platform
    9331/    7B3A :                     ; ---------------------------------------------------------------------------
    9332/    7B3A :                     
    9333/    7B3A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9334/    7B3A :                     
    9335/    7B3A :                     
    9336/    7B3A :                     MvSonicOnPtfm2:
    9337/    7B3A : 43F8 D000           		lea	($FFFFD000).w,a1
    9338/    7B3E : 3028 000C           		move.w	$C(a0),d0
    9339/    7B42 : 0440 0009           		subi.w	#9,d0
    9340/    7B46 :                     
    9341/    7B46 :                     MvSonic2:
    9342/    7B46 : 4A38 F7C8           		tst.b	($FFFFF7C8).w
    9343/    7B4A : 6B22                		bmi.s	locret_7B62
    9344/    7B4C : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    9345/    7B52 : 641A                		bcc.s	locret_7B62
    9346/    7B54 : 4A78 FE08           		tst.w	($FFFFFE08).w
    9347/    7B58 : 6614                		bne.s	locret_7B62
    9348/    7B5A : 7200                		moveq	#0,d1
    9349/    7B5C : 1229 0016           		move.b	$16(a1),d1
    9350/    7B60 : 9041                		sub.w	d1,d0
    9351/    7B62 : 3340 000C           		move.w	d0,$C(a1)
    9352/    7B66 : 9468 0008           		sub.w	8(a0),d2
    9353/    7B6A : 9569 0008           		sub.w	d2,8(a1)
    9354/    7B6E :                     
    9355/    7B6E :                     locret_7B62:
    9356/    7B6E : 4E75                		rts	
    9357/    7B70 :                     ; End of function MvSonicOnPtfm2
    9358/    7B70 :                     
    9359/    7B70 :                     
    9360/    7B70 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9361/    7B70 :                     
    9362/    7B70 :                     
    9363/    7B70 :                     Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
    9364/    7B70 : 1038 FE78           		move.b	($FFFFFE78).w,d0
    9365/    7B74 : 323C 0080           		move.w	#$80,d1
    9366/    7B78 : 0828 0000 0022      		btst	#0,$22(a0)
    9367/    7B7E : 6704                		beq.s	loc_7B78
    9368/    7B80 : 4440                		neg.w	d0
    9369/    7B82 : D041                		add.w	d1,d0
    9370/    7B84 :                     
    9371/    7B84 :                     loc_7B78:
    9372/    7B84 : 6040                		bra.s	Obj15_Move2
    9373/    7B86 :                     ; End of function Obj15_Move
    9374/    7B86 :                     
    9375/    7B86 :                     
    9376/    7B86 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9377/    7B86 :                     
    9378/    7B86 :                     
    9379/    7B86 :                     Obj48_Move:				; XREF: Obj48_Display2
    9380/    7B86 : 4A28 003D           		tst.b	$3D(a0)
    9381/    7B8A : 661C                		bne.s	loc_7B9C
    9382/    7B8C : 3028 003E           		move.w	$3E(a0),d0
    9383/    7B90 : 5040                		addq.w	#8,d0
    9384/    7B92 : 3140 003E           		move.w	d0,$3E(a0)
    9385/    7B96 : D168 0026           		add.w	d0,$26(a0)
    9386/    7B9A : 0C40 0200           		cmpi.w	#$200,d0
    9387/    7B9E : 6622                		bne.s	loc_7BB6
    9388/    7BA0 : 117C 0001 003D      		move.b	#1,$3D(a0)
    9389/    7BA6 : 601A                		bra.s	loc_7BB6
    9390/    7BA8 :                     ; ===========================================================================
    9391/    7BA8 :                     
    9392/    7BA8 :                     loc_7B9C:
    9393/    7BA8 : 3028 003E           		move.w	$3E(a0),d0
    9394/    7BAC : 5140                		subq.w	#8,d0
    9395/    7BAE : 3140 003E           		move.w	d0,$3E(a0)
    9396/    7BB2 : D168 0026           		add.w	d0,$26(a0)
    9397/    7BB6 : 0C40 FE00           		cmpi.w	#-$200,d0
    9398/    7BBA : 6606                		bne.s	loc_7BB6
    9399/    7BBC : 117C 0000 003D      		move.b	#0,$3D(a0)
    9400/    7BC2 :                     
    9401/    7BC2 :                     loc_7BB6:
    9402/    7BC2 : 1028 0026           		move.b	$26(a0),d0
    9403/    7BC6 :                     ; End of function Obj48_Move
    9404/    7BC6 :                     
    9405/    7BC6 :                     
    9406/    7BC6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9407/    7BC6 :                     
    9408/    7BC6 :                     
    9409/    7BC6 :                     Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
    9410/    7BC6 : 6100 AE22           		bsr.w	CalcSine
    9411/    7BCA : 3428 0038           		move.w	$38(a0),d2
    9412/    7BCE : 3628 003A           		move.w	$3A(a0),d3
    9413/    7BD2 : 45E8 0028           		lea	$28(a0),a2
    9414/    7BD6 : 7C00                		moveq	#0,d6
    9415/    7BD8 : 1C1A                		move.b	(a2)+,d6
    9416/    7BDA :                     
    9417/    7BDA :                     loc_7BCE:
    9418/    7BDA : 7800                		moveq	#0,d4
    9419/    7BDC : 181A                		move.b	(a2)+,d4
    9420/    7BDE : ED4C                		lsl.w	#6,d4
    9421/    7BE0 : 0684 00FF D000      		addi.l	#$FFD000,d4
    9422/    7BE6 : 2244                		movea.l	d4,a1
    9423/    7BE8 : 7800                		moveq	#0,d4
    9424/    7BEA : 1829 003C           		move.b	$3C(a1),d4
    9425/    7BEE : 2A04                		move.l	d4,d5
    9426/    7BF0 : C9C0                		muls.w	d0,d4
    9427/    7BF2 : E084                		asr.l	#8,d4
    9428/    7BF4 : CBC1                		muls.w	d1,d5
    9429/    7BF6 : E085                		asr.l	#8,d5
    9430/    7BF8 : D842                		add.w	d2,d4
    9431/    7BFA : DA43                		add.w	d3,d5
    9432/    7BFC : 3344 000C           		move.w	d4,$C(a1)
    9433/    7C00 : 3345 0008           		move.w	d5,8(a1)
    9434/    7C04 : 51CE FFD4           		dbf	d6,loc_7BCE
    9435/    7C08 : 4E75                		rts	
    9436/    7C0A :                     ; End of function Obj15_Move2
    9437/    7C0A :                     
    9438/    7C0A :                     ; ===========================================================================
    9439/    7C0A :                     
    9440/    7C0A :                     Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
    9441/    7C0A : 3028 003A           		move.w	$3A(a0),d0
    9442/    7C0E : 0240 FF80           		andi.w	#$FF80,d0
    9443/    7C12 : 3238 F700           		move.w	($FFFFF700).w,d1
    9444/    7C16 : 0441 0080           		subi.w	#$80,d1
    9445/    7C1A : 0241 FF80           		andi.w	#$FF80,d1
    9446/    7C1E : 9041                		sub.w	d1,d0
    9447/    7C20 : 0C40 0280           		cmpi.w	#$280,d0
    9448/    7C24 : 6200 0004           		bhi.w	Obj15_DelAll
    9449/    7C28 : 4E75                		rts	
    9450/    7C2A :                     ; ===========================================================================
    9451/    7C2A :                     
    9452/    7C2A :                     Obj15_DelAll:				; XREF: Obj15_ChkDel
    9453/    7C2A : 7400                		moveq	#0,d2
    9454/    7C2C : 45E8 0028           		lea	$28(a0),a2
    9455/    7C30 : 141A                		move.b	(a2)+,d2
    9456/    7C32 :                     
    9457/    7C32 :                     Obj15_DelLoop:
    9458/    7C32 : 7000                		moveq	#0,d0
    9459/    7C34 : 101A                		move.b	(a2)+,d0
    9460/    7C36 : ED48                		lsl.w	#6,d0
    9461/    7C38 : 0680 00FF D000      		addi.l	#$FFD000,d0
    9462/    7C3E : 2240                		movea.l	d0,a1
    9463/    7C40 : 6100 5B0A           		bsr.w	DeleteObject2
    9464/    7C44 : 51CA FFEC           		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
    9465/    7C48 : 4E75                		rts	
    9466/    7C4A :                     ; ===========================================================================
    9467/    7C4A :                     
    9468/    7C4A :                     Obj15_Delete:				; XREF: Obj15_Index
    9469/    7C4A : 6100 5AFE           		bsr.w	DeleteObject
    9470/    7C4E : 4E75                		rts	
    9471/    7C50 :                     ; ===========================================================================
    9472/    7C50 :                     
    9473/    7C50 :                     Obj15_Display:				; XREF: Obj15_Index
    9474/    7C50 : 6000 5ABC           		bra.w	DisplaySprite
    9475/    7C54 :                     ; ===========================================================================
    9476/    7C54 :                     ; ---------------------------------------------------------------------------
    9477/    7C54 :                     ; Sprite mappings - GHZ	and MZ swinging	platforms
    9478/    7C54 :                     ; ---------------------------------------------------------------------------
    9479/    7C54 :                     Map_obj15:
    9480/    7C54 :                     		include	"_maps/obj15ghz.asm"
(1)    1/    7C54 :                     ; ---------------------------------------------------------------------------
(1)    2/    7C54 :                     ; Sprite mappings - GHZ	and MZ swinging	platforms
(1)    3/    7C54 :                     ; ---------------------------------------------------------------------------
(1)    4/    7C54 : 0006                		dc.w byte_7C4E-Map_obj15
(1)    5/    7C56 : 0011                		dc.w byte_7C59-Map_obj15
(1)    6/    7C58 : 0017                		dc.w byte_7C5F-Map_obj15
(1)    7/    7C5A : 02                  byte_7C4E:	dc.b 2
(1)    8/    7C5B : F809 0004 E8        		dc.b $F8, 9, 0,	4, $E8
(1)    9/    7C60 : F809 0004 00        		dc.b $F8, 9, 0,	4, 0
(1)   10/    7C65 : 01                  byte_7C59:	dc.b 1
(1)   11/    7C66 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   12/    7C6B : 01                  byte_7C5F:	dc.b 1
(1)   13/    7C6C : F805 000A F8        		dc.b $F8, 5, 0,	$A, $F8
(1)   14/    7C71 : (MACRO)             		align 2
(1)   14/    7C71 :  (MACRO-2)                  cnop 0,2
(1)   14/    7C71 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   14/    7C71 : =$6                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   14/    7C72 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
    9481/    7C72 :                     
    9482/    7C72 :                     ; ---------------------------------------------------------------------------
    9483/    7C72 :                     ; Sprite mappings - SLZ	swinging platforms
    9484/    7C72 :                     ; ---------------------------------------------------------------------------
    9485/    7C72 :                     Map_obj15a:
    9486/    7C72 :                     		include	"_maps/obj15slz.asm"
(1)    1/    7C72 :                     ; ---------------------------------------------------------------------------
(1)    2/    7C72 :                     ; Sprite mappings - SLZ	swinging platforms
(1)    3/    7C72 :                     ; ---------------------------------------------------------------------------
(1)    4/    7C72 : 0006                		dc.w byte_7C6C-Map_obj15a
(1)    5/    7C74 : 002F                		dc.w byte_7C95-Map_obj15a
(1)    6/    7C76 : 0035                		dc.w byte_7C9B-Map_obj15a
(1)    7/    7C78 : 08                  byte_7C6C:	dc.b 8
(1)    8/    7C79 : F00F 0004 E0        		dc.b $F0, $F, 0, 4, $E0
(1)    9/    7C7E : F00F 0804 00        		dc.b $F0, $F, 8, 4, 0
(1)   10/    7C83 : F005 0014 D0        		dc.b $F0, 5, 0,	$14, $D0
(1)   11/    7C88 : F005 0814 20        		dc.b $F0, 5, 8,	$14, $20
(1)   12/    7C8D : 1004 0018 E0        		dc.b $10, 4, 0,	$18, $E0
(1)   13/    7C92 : 1004 0818 10        		dc.b $10, 4, 8,	$18, $10
(1)   14/    7C97 : 1001 001A F8        		dc.b $10, 1, 0,	$1A, $F8
(1)   15/    7C9C : 1001 081A 00        		dc.b $10, 1, 8,	$1A, 0
(1)   16/    7CA1 : 01                  byte_7C95:	dc.b 1
(1)   17/    7CA2 : F805 4000 F8        		dc.b $F8, 5, $40, 0, $F8
(1)   18/    7CA7 : 01                  byte_7C9B:	dc.b 1
(1)   19/    7CA8 : F805 001C F8        		dc.b $F8, 5, 0,	$1C, $F8
(1)   20/    7CAD : (MACRO)             		align 2
(1)   20/    7CAD :  (MACRO-2)                  cnop 0,2
(1)   20/    7CAD :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   20/    7CAD : =$7                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   20/    7CAE :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
    9487/    7CAE :                     
    9488/    7CAE :                     ; ===========================================================================
    9489/    7CAE :                     ; ---------------------------------------------------------------------------
    9490/    7CAE :                     ; Object 17 - helix of spikes on a pole	(GHZ)
    9491/    7CAE :                     ; ---------------------------------------------------------------------------
    9492/    7CAE :                     
    9493/    7CAE :                     Obj17:					; XREF: Obj_Index
    9494/    7CAE : 7000                		moveq	#0,d0
    9495/    7CB0 : 1028 0024           		move.b	$24(a0),d0
    9496/    7CB4 : 323B 0006           		move.w	Obj17_Index(pc,d0.w),d1
    9497/    7CB8 : 4EFB 1002           		jmp	Obj17_Index(pc,d1.w)
    9498/    7CBC :                     ; ===========================================================================
    9499/    7CBC : 000A                Obj17_Index:	dc.w Obj17_Main-Obj17_Index
    9500/    7CBE : 00CC                		dc.w Obj17_Action-Obj17_Index
    9501/    7CC0 : 00CC                		dc.w Obj17_Action-Obj17_Index
    9502/    7CC2 : 013A                		dc.w Obj17_Delete-Obj17_Index
    9503/    7CC4 : 0140                		dc.w Obj17_Display-Obj17_Index
    9504/    7CC6 :                     ; ===========================================================================
    9505/    7CC6 :                     
    9506/    7CC6 :                     Obj17_Main:				; XREF: Obj17_Index
    9507/    7CC6 : 5428 0024           		addq.b	#2,$24(a0)
    9508/    7CCA : 217C 0000 7E04 0004 		move.l	#Map_obj17,4(a0)
    9509/    7CD2 : 317C 4398 0002      		move.w	#$4398,2(a0)
    9510/    7CD8 : 117C 0007 0022      		move.b	#7,$22(a0)
    9511/    7CDE : 117C 0004 0001      		move.b	#4,1(a0)
    9512/    7CE4 : 117C 0003 0018      		move.b	#3,$18(a0)
    9513/    7CEA : 117C 0008 0019      		move.b	#8,$19(a0)
    9514/    7CF0 : 3428 000C           		move.w	$C(a0),d2
    9515/    7CF4 : 3628 0008           		move.w	8(a0),d3
    9516/    7CF8 : (MACRO)             		_move.b	0(a0),d4
    9516/    7CF8 :  (MACRO-2)                          insn2op move.b, 0(a0),d4
    9516/    7CF8 : 1828 0001                                   !move.b   1+0(a0),d4
    9516/    7CFB :                                             !org    *-1
    9516/    7CFB : 00                                          !dc.b   0
    9517/    7CFC : 45E8 0028           		lea	$28(a0),a2	; move helix length to a2
    9518/    7D00 : 7200                		moveq	#0,d1
    9519/    7D02 : 1212                		move.b	(a2),d1		; move a2 to d1
    9520/    7D04 : 14FC 0000           		move.b	#0,(a2)+
    9521/    7D08 : 3001                		move.w	d1,d0
    9522/    7D0A : E248                		lsr.w	#1,d0
    9523/    7D0C : E948                		lsl.w	#4,d0
    9524/    7D0E : 9640                		sub.w	d0,d3
    9525/    7D10 : 5501                		subq.b	#2,d1
    9526/    7D12 : 6574                		bcs.s	Obj17_Action
    9527/    7D14 : 7C00                		moveq	#0,d6
    9528/    7D16 :                     
    9529/    7D16 :                     Obj17_MakeHelix:
    9530/    7D16 : 6100 5E7E           		bsr.w	SingleObjLoad
    9531/    7D1A : 666C                		bne.s	Obj17_Action
    9532/    7D1C : 5228 0028           		addq.b	#1,$28(a0)
    9533/    7D20 : 3A09                		move.w	a1,d5
    9534/    7D22 : 0445 D000           		subi.w	#$D000,d5
    9535/    7D26 : EC4D                		lsr.w	#6,d5
    9536/    7D28 : 0245 007F           		andi.w	#$7F,d5
    9537/    7D2C : 14C5                		move.b	d5,(a2)+
    9538/    7D2E : 137C 0008 0024      		move.b	#8,$24(a1)
    9539/    7D34 : (MACRO)             		_move.b	d4,0(a1)
    9539/    7D34 :  (MACRO-2)                          insn2op move.b, d4,0(a1)
    9539/    7D34 : 1344 0001                                   !move.b   d4,1+0(a1)
    9539/    7D37 :                                             !org    *-1
    9539/    7D37 : 00                                          !dc.b   0
    9540/    7D38 : 3342 000C           		move.w	d2,$C(a1)
    9541/    7D3C : 3343 0008           		move.w	d3,8(a1)
    9542/    7D40 : 2368 0004 0004      		move.l	4(a0),4(a1)
    9543/    7D46 : 337C 4398 0002      		move.w	#$4398,2(a1)
    9544/    7D4C : 137C 0004 0001      		move.b	#4,1(a1)
    9545/    7D52 : 137C 0003 0018      		move.b	#3,$18(a1)
    9546/    7D58 : 137C 0008 0019      		move.b	#8,$19(a1)
    9547/    7D5E : 1346 003E           		move.b	d6,$3E(a1)
    9548/    7D62 : 5206                		addq.b	#1,d6
    9549/    7D64 : 0206 0007           		andi.b	#7,d6
    9550/    7D68 : 0643 0010           		addi.w	#$10,d3
    9551/    7D6C : B668 0008           		cmp.w	8(a0),d3
    9552/    7D70 : 6612                		bne.s	loc_7D78
    9553/    7D72 : 1146 003E           		move.b	d6,$3E(a0)
    9554/    7D76 : 5206                		addq.b	#1,d6
    9555/    7D78 : 0206 0007           		andi.b	#7,d6
    9556/    7D7C : 0643 0010           		addi.w	#$10,d3
    9557/    7D80 : 5228 0028           		addq.b	#1,$28(a0)
    9558/    7D84 :                     
    9559/    7D84 :                     loc_7D78:
    9560/    7D84 : 51C9 FF90           		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
    9561/    7D88 :                     
    9562/    7D88 :                     Obj17_Action:				; XREF: Obj17_Index
    9563/    7D88 : 6100 000A           		bsr.w	Obj17_RotateSpikes
    9564/    7D8C : 6100 5980           		bsr.w	DisplaySprite
    9565/    7D90 : 6000 0022           		bra.w	Obj17_ChkDel
    9566/    7D94 :                     
    9567/    7D94 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9568/    7D94 :                     
    9569/    7D94 :                     
    9570/    7D94 :                     Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
    9571/    7D94 : 1038 FEC1           		move.b	($FFFFFEC1).w,d0
    9572/    7D98 : 117C 0000 0020      		move.b	#0,$20(a0)	; make object harmless
    9573/    7D9E : D028 003E           		add.b	$3E(a0),d0
    9574/    7DA2 : 0200 0007           		andi.b	#7,d0
    9575/    7DA6 : 1140 001A           		move.b	d0,$1A(a0)	; change current frame
    9576/    7DAA : 6606                		bne.s	locret_7DA6
    9577/    7DAC : 117C 0084 0020      		move.b	#$84,$20(a0)	; make object harmful
    9578/    7DB2 :                     
    9579/    7DB2 :                     locret_7DA6:
    9580/    7DB2 : 4E75                		rts	
    9581/    7DB4 :                     ; End of function Obj17_RotateSpikes
    9582/    7DB4 :                     
    9583/    7DB4 :                     ; ===========================================================================
    9584/    7DB4 :                     
    9585/    7DB4 :                     Obj17_ChkDel:				; XREF: Obj17_Action
    9586/    7DB4 : 3028 0008           		move.w	8(a0),d0
    9587/    7DB8 : 0240 FF80           		andi.w	#$FF80,d0
    9588/    7DBC : 3238 F700           		move.w	($FFFFF700).w,d1
    9589/    7DC0 : 0441 0080           		subi.w	#$80,d1
    9590/    7DC4 : 0241 FF80           		andi.w	#$FF80,d1
    9591/    7DC8 : 9041                		sub.w	d1,d0
    9592/    7DCA : 0C40 0280           		cmpi.w	#$280,d0
    9593/    7DCE : 6200 0004           		bhi.w	Obj17_DelAll
    9594/    7DD2 : 4E75                		rts	
    9595/    7DD4 :                     ; ===========================================================================
    9596/    7DD4 :                     
    9597/    7DD4 :                     Obj17_DelAll:				; XREF: Obj17_ChkDel
    9598/    7DD4 : 7400                		moveq	#0,d2
    9599/    7DD6 : 45E8 0028           		lea	$28(a0),a2	; move helix length to a2
    9600/    7DDA : 141A                		move.b	(a2)+,d2	; move a2 to d2
    9601/    7DDC : 5502                		subq.b	#2,d2
    9602/    7DDE : 6516                		bcs.s	Obj17_Delete
    9603/    7DE0 :                     
    9604/    7DE0 :                     Obj17_DelLoop:
    9605/    7DE0 : 7000                		moveq	#0,d0
    9606/    7DE2 : 101A                		move.b	(a2)+,d0
    9607/    7DE4 : ED48                		lsl.w	#6,d0
    9608/    7DE6 : 0680 00FF D000      		addi.l	#$FFD000,d0
    9609/    7DEC : 2240                		movea.l	d0,a1
    9610/    7DEE : 6100 595C           		bsr.w	DeleteObject2	; delete object
    9611/    7DF2 : 51CA FFEC           		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
    9612/    7DF6 :                     
    9613/    7DF6 :                     Obj17_Delete:				; XREF: Obj17_Index
    9614/    7DF6 : 6100 5952           		bsr.w	DeleteObject
    9615/    7DFA : 4E75                		rts	
    9616/    7DFC :                     ; ===========================================================================
    9617/    7DFC :                     
    9618/    7DFC :                     Obj17_Display:				; XREF: Obj17_Index
    9619/    7DFC : 6100 FF96           		bsr.w	Obj17_RotateSpikes
    9620/    7E00 : 6000 590C           		bra.w	DisplaySprite
    9621/    7E04 :                     ; ===========================================================================
    9622/    7E04 :                     ; ---------------------------------------------------------------------------
    9623/    7E04 :                     ; Sprite mappings - helix of spikes on a pole (GHZ)
    9624/    7E04 :                     ; ---------------------------------------------------------------------------
    9625/    7E04 :                     Map_obj17:
    9626/    7E04 :                     		include	"_maps/obj17.asm"
(1)    1/    7E04 :                     ; ---------------------------------------------------------------------------
(1)    2/    7E04 :                     ; Sprite mappings - helix of spikes on a pole (GHZ)
(1)    3/    7E04 :                     ; ---------------------------------------------------------------------------
(1)    4/    7E04 : 0010 0016           		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
(1)    5/    7E08 : 001C 0022           		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
(1)    6/    7E0C : 0028 002E           		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
(1)    7/    7E10 : 0036 0034           		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
(1)    8/    7E14 : 01                  byte_7E08:	dc.b 1
(1)    9/    7E15 : F001 0000 FC        		dc.b $F0, 1, 0,	0, $FC
(1)   10/    7E1A : 01                  byte_7E0E:	dc.b 1
(1)   11/    7E1B : F505 0002 F8        		dc.b $F5, 5, 0,	2, $F8
(1)   12/    7E20 : 01                  byte_7E14:	dc.b 1
(1)   13/    7E21 : F805 0006 F8        		dc.b $F8, 5, 0,	6, $F8
(1)   14/    7E26 : 01                  byte_7E1A:	dc.b 1
(1)   15/    7E27 : FB05 000A F8        		dc.b $FB, 5, 0,	$A, $F8
(1)   16/    7E2C : 01                  byte_7E20:	dc.b 1
(1)   17/    7E2D : 0001 000E FC        		dc.b 0,	1, 0, $E, $FC
(1)   18/    7E32 : 01                  byte_7E26:	dc.b 1
(1)   19/    7E33 : 0400 0010 FD        		dc.b 4,	0, 0, $10, $FD
(1)   20/    7E38 : 01                  byte_7E2C:	dc.b 1
(1)   21/    7E39 : F400 0011 FD        byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
(1)   22/    7E3E : (MACRO)             		align 2
(1)   22/    7E3E :  (MACRO-2)                  cnop 0,2
(1)   22/    7E3E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    9627/    7E3E :                     
    9628/    7E3E :                     ; ===========================================================================
    9629/    7E3E :                     ; ---------------------------------------------------------------------------
    9630/    7E3E :                     ; Object 18 - platforms	(GHZ, SYZ, SLZ)
    9631/    7E3E :                     ; ---------------------------------------------------------------------------
    9632/    7E3E :                     
    9633/    7E3E :                     Obj18:					; XREF: Obj_Index
    9634/    7E3E : 7000                		moveq	#0,d0
    9635/    7E40 : 1028 0024           		move.b	$24(a0),d0
    9636/    7E44 : 323B 0006           		move.w	Obj18_Index(pc,d0.w),d1
    9637/    7E48 : 4EFB 1002           		jmp	Obj18_Index(pc,d1.w)
    9638/    7E4C :                     ; ===========================================================================
    9639/    7E4C : 000A                Obj18_Index:	dc.w Obj18_Main-Obj18_Index
    9640/    7E4E : 0096                		dc.w Obj18_Solid-Obj18_Index
    9641/    7E50 : 00BA                		dc.w Obj18_Action2-Obj18_Index
    9642/    7E52 : 02B6                		dc.w Obj18_Delete-Obj18_Index
    9643/    7E54 : 00AA                		dc.w Obj18_Action-Obj18_Index
    9644/    7E56 :                     ; ===========================================================================
    9645/    7E56 :                     
    9646/    7E56 :                     Obj18_Main:				; XREF: Obj18_Index
    9647/    7E56 : 5428 0024           		addq.b	#2,$24(a0)
    9648/    7E5A : 317C 4000 0002      		move.w	#$4000,2(a0)
    9649/    7E60 : 217C 0000 8148 0004 		move.l	#Map_obj18,4(a0)
    9650/    7E68 : 117C 0020 0019      		move.b	#$20,$19(a0)
    9651/    7E6E : 0C38 0004 FE10      		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
    9652/    7E74 : 660E                		bne.s	Obj18_NotSYZ
    9653/    7E76 : 217C 0000 8194 0004 		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
    9654/    7E7E : 117C 0020 0019      		move.b	#$20,$19(a0)
    9655/    7E84 :                     
    9656/    7E84 :                     Obj18_NotSYZ:
    9657/    7E84 : 0C38 0003 FE10      		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
    9658/    7E8A : 661A                		bne.s	Obj18_NotSLZ
    9659/    7E8C : 217C 0000 81A6 0004 		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
    9660/    7E94 : 117C 0020 0019      		move.b	#$20,$19(a0)
    9661/    7E9A : 317C 4000 0002      		move.w	#$4000,2(a0)
    9662/    7EA0 : 117C 0003 0028      		move.b	#3,$28(a0)
    9663/    7EA6 :                     
    9664/    7EA6 :                     Obj18_NotSLZ:
    9665/    7EA6 : 117C 0004 0001      		move.b	#4,1(a0)
    9666/    7EAC : 117C 0004 0018      		move.b	#4,$18(a0)
    9667/    7EB2 : 3168 000C 002C      		move.w	$C(a0),$2C(a0)
    9668/    7EB8 : 3168 000C 0034      		move.w	$C(a0),$34(a0)
    9669/    7EBE : 3168 0008 0032      		move.w	8(a0),$32(a0)
    9670/    7EC4 : 317C 0080 0026      		move.w	#$80,$26(a0)
    9671/    7ECA : 7200                		moveq	#0,d1
    9672/    7ECC : 1028 0028           		move.b	$28(a0),d0
    9673/    7ED0 : 0C00 000A           		cmpi.b	#$A,d0		; is object type $A (large platform)?
    9674/    7ED4 : 6608                		bne.s	Obj18_SetFrame	; if not, branch
    9675/    7ED6 : 5201                		addq.b	#1,d1		; use frame #1
    9676/    7ED8 : 117C 0020 0019      		move.b	#$20,$19(a0)	; set width
    9677/    7EDE :                     
    9678/    7EDE :                     Obj18_SetFrame:
    9679/    7EDE : 1141 001A           		move.b	d1,$1A(a0)	; set frame to d1
    9680/    7EE2 :                     
    9681/    7EE2 :                     Obj18_Solid:				; XREF: Obj18_Index
    9682/    7EE2 : 4A28 0038           		tst.b	$38(a0)
    9683/    7EE6 : 6704                		beq.s	loc_7EE0
    9684/    7EE8 : 5928 0038           		subq.b	#4,$38(a0)
    9685/    7EEC :                     
    9686/    7EEC :                     loc_7EE0:
    9687/    7EEC : 7200                		moveq	#0,d1
    9688/    7EEE : 1228 0019           		move.b	$19(a0),d1
    9689/    7EF2 : 6100 F564           		bsr.w	PlatformObject
    9690/    7EF6 :                     
    9691/    7EF6 :                     Obj18_Action:				; XREF: Obj18_Index
    9692/    7EF6 : 6100 005A           		bsr.w	Obj18_Move
    9693/    7EFA : 6100 003C           		bsr.w	Obj18_Nudge
    9694/    7EFE : 6100 580E           		bsr.w	DisplaySprite
    9695/    7F02 : 6000 01E0           		bra.w	Obj18_ChkDel
    9696/    7F06 :                     ; ===========================================================================
    9697/    7F06 :                     
    9698/    7F06 :                     Obj18_Action2:				; XREF: Obj18_Index
    9699/    7F06 : 0C28 0040 0038      		cmpi.b	#$40,$38(a0)
    9700/    7F0C : 6704                		beq.s	loc_7F06
    9701/    7F0E : 5828 0038           		addq.b	#4,$38(a0)
    9702/    7F12 :                     
    9703/    7F12 :                     loc_7F06:
    9704/    7F12 : 7200                		moveq	#0,d1
    9705/    7F14 : 1228 0019           		move.b	$19(a0),d1
    9706/    7F18 : 6100 F6B2           		bsr.w	ExitPlatform
    9707/    7F1C : 3F28 0008           		move.w	8(a0),-(sp)
    9708/    7F20 : 6100 0030           		bsr.w	Obj18_Move
    9709/    7F24 : 6100 0012           		bsr.w	Obj18_Nudge
    9710/    7F28 : 341F                		move.w	(sp)+,d2
    9711/    7F2A : 6100 FC0E           		bsr.w	MvSonicOnPtfm2
    9712/    7F2E : 6100 57DE           		bsr.w	DisplaySprite
    9713/    7F32 : 6000 01B0           		bra.w	Obj18_ChkDel
    9714/    7F36 :                     
    9715/    7F36 : 4E75                		rts
    9716/    7F38 :                     
    9717/    7F38 :                     ; ---------------------------------------------------------------------------
    9718/    7F38 :                     ; Subroutine to	move platform slightly when you	stand on it
    9719/    7F38 :                     ; ---------------------------------------------------------------------------
    9720/    7F38 :                     
    9721/    7F38 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9722/    7F38 :                     
    9723/    7F38 :                     
    9724/    7F38 :                     Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
    9725/    7F38 : 1028 0038           		move.b	$38(a0),d0
    9726/    7F3C : 6100 AAAC           		bsr.w	CalcSine
    9727/    7F40 : 323C 0400           		move.w	#$400,d1
    9728/    7F44 : C1C1                		muls.w	d1,d0
    9729/    7F46 : 4840                		swap	d0
    9730/    7F48 : D068 002C           		add.w	$2C(a0),d0
    9731/    7F4C : 3140 000C           		move.w	d0,$C(a0)
    9732/    7F50 : 4E75                		rts	
    9733/    7F52 :                     ; End of function Obj18_Nudge
    9734/    7F52 :                     
    9735/    7F52 :                     ; ---------------------------------------------------------------------------
    9736/    7F52 :                     ; Subroutine to	move platforms
    9737/    7F52 :                     ; ---------------------------------------------------------------------------
    9738/    7F52 :                     
    9739/    7F52 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9740/    7F52 :                     
    9741/    7F52 :                     
    9742/    7F52 :                     Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
    9743/    7F52 : 7000                		moveq	#0,d0
    9744/    7F54 : 1028 0028           		move.b	$28(a0),d0
    9745/    7F58 : 0240 000F           		andi.w	#$F,d0
    9746/    7F5C : D040                		add.w	d0,d0
    9747/    7F5E : 323B 0006           		move.w	Obj18_TypeIndex(pc,d0.w),d1
    9748/    7F62 : 4EFB 1002           		jmp	Obj18_TypeIndex(pc,d1.w)
    9749/    7F66 :                     ; End of function Obj18_Move
    9750/    7F66 :                     
    9751/    7F66 :                     ; ===========================================================================
    9752/    7F66 : 001A 002C           Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
    9753/    7F6A : 0072 008A           		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
    9754/    7F6E : 00B2 001C           		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
    9755/    7F72 : 0062 011C           		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
    9756/    7F76 : 0148 001A           		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
    9757/    7F7A : 0160 0054           		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
    9758/    7F7E : 0044                		dc.w Obj18_Type0C-Obj18_TypeIndex
    9759/    7F80 :                     ; ===========================================================================
    9760/    7F80 :                     
    9761/    7F80 :                     Obj18_Type00:
    9762/    7F80 : 4E75                		rts			; platform 00 doesn"t move
    9763/    7F82 :                     ; ===========================================================================
    9764/    7F82 :                     
    9765/    7F82 :                     Obj18_Type05:
    9766/    7F82 : 3028 0032           		move.w	$32(a0),d0
    9767/    7F86 : 1228 0026           		move.b	$26(a0),d1	; load platform-motion variable
    9768/    7F8A : 4401                		neg.b	d1		; reverse platform-motion
    9769/    7F8C : 0601 0040           		addi.b	#$40,d1
    9770/    7F90 : 600C                		bra.s	Obj18_01_Move
    9771/    7F92 :                     ; ===========================================================================
    9772/    7F92 :                     
    9773/    7F92 :                     Obj18_Type01:
    9774/    7F92 : 3028 0032           		move.w	$32(a0),d0
    9775/    7F96 : 1228 0026           		move.b	$26(a0),d1	; load platform-motion variable
    9776/    7F9A : 0401 0040           		subi.b	#$40,d1
    9777/    7F9E :                     
    9778/    7F9E :                     Obj18_01_Move:
    9779/    7F9E : 4881                		ext.w	d1
    9780/    7FA0 : D041                		add.w	d1,d0
    9781/    7FA2 : 3140 0008           		move.w	d0,8(a0)	; change position on x-axis
    9782/    7FA6 : 6000 0134           		bra.w	Obj18_ChgMotion
    9783/    7FAA :                     ; ===========================================================================
    9784/    7FAA :                     
    9785/    7FAA :                     Obj18_Type0C:
    9786/    7FAA : 3028 0034           		move.w	$34(a0),d0
    9787/    7FAE : 1238 FE6C           		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
    9788/    7FB2 : 4401                		neg.b	d1		; reverse platform-motion
    9789/    7FB4 : 0601 0030           		addi.b	#$30,d1
    9790/    7FB8 : 602A                		bra.s	Obj18_02_Move
    9791/    7FBA :                     ; ===========================================================================
    9792/    7FBA :                     
    9793/    7FBA :                     Obj18_Type0B:
    9794/    7FBA : 3028 0034           		move.w	$34(a0),d0
    9795/    7FBE : 1238 FE6C           		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
    9796/    7FC2 : 0401 0030           		subi.b	#$30,d1
    9797/    7FC6 : 601C                		bra.s	Obj18_02_Move
    9798/    7FC8 :                     ; ===========================================================================
    9799/    7FC8 :                     
    9800/    7FC8 :                     Obj18_Type06:
    9801/    7FC8 : 3028 0034           		move.w	$34(a0),d0
    9802/    7FCC : 1228 0026           		move.b	$26(a0),d1	; load platform-motion variable
    9803/    7FD0 : 4401                		neg.b	d1		; reverse platform-motion
    9804/    7FD2 : 0601 0040           		addi.b	#$40,d1
    9805/    7FD6 : 600C                		bra.s	Obj18_02_Move
    9806/    7FD8 :                     ; ===========================================================================
    9807/    7FD8 :                     
    9808/    7FD8 :                     Obj18_Type02:
    9809/    7FD8 : 3028 0034           		move.w	$34(a0),d0
    9810/    7FDC : 1228 0026           		move.b	$26(a0),d1	; load platform-motion variable
    9811/    7FE0 : 0401 0040           		subi.b	#$40,d1
    9812/    7FE4 :                     
    9813/    7FE4 :                     Obj18_02_Move:
    9814/    7FE4 : 4881                		ext.w	d1
    9815/    7FE6 : D041                		add.w	d1,d0
    9816/    7FE8 : 3140 002C           		move.w	d0,$2C(a0)	; change position on y-axis
    9817/    7FEC : 6000 00EE           		bra.w	Obj18_ChgMotion
    9818/    7FF0 :                     ; ===========================================================================
    9819/    7FF0 :                     
    9820/    7FF0 :                     Obj18_Type03:
    9821/    7FF0 : 4A68 003A           		tst.w	$3A(a0)		; is time delay	set?
    9822/    7FF4 : 6610                		bne.s	Obj18_03_Wait	; if yes, branch
    9823/    7FF6 : 0828 0003 0022      		btst	#3,$22(a0)	; is Sonic standing on the platform?
    9824/    7FFC : 6706                		beq.s	Obj18_03_NoMove	; if not, branch
    9825/    7FFE : 317C 001E 003A      		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
    9826/    8004 :                     
    9827/    8004 :                     Obj18_03_NoMove:
    9828/    8004 : 4E75                		rts	
    9829/    8006 :                     ; ===========================================================================
    9830/    8006 :                     
    9831/    8006 :                     Obj18_03_Wait:
    9832/    8006 : 5368 003A           		subq.w	#1,$3A(a0)	; subtract 1 from time
    9833/    800A : 66F8                		bne.s	Obj18_03_NoMove	; if time is > 0, branch
    9834/    800C : 317C 0020 003A      		move.w	#32,$3A(a0)
    9835/    8012 : 5228 0028           		addq.b	#1,$28(a0)	; change to type 04 (falling)
    9836/    8016 : 4E75                		rts	
    9837/    8018 :                     ; ===========================================================================
    9838/    8018 :                     
    9839/    8018 :                     Obj18_Type04:
    9840/    8018 : 4A68 003A           		tst.w	$3A(a0)
    9841/    801C : 6736                		beq.s	loc_8048
    9842/    801E : 5368 003A           		subq.w	#1,$3A(a0)
    9843/    8022 : 6630                		bne.s	loc_8048
    9844/    8024 : 0828 0003 0022      		btst	#3,$22(a0)
    9845/    802A : 6722                		beq.s	loc_8042
    9846/    802C : 08E9 0001 0022      		bset	#1,$22(a1)
    9847/    8032 : 08A9 0003 0022      		bclr	#3,$22(a1)
    9848/    8038 : 137C 0002 0024      		move.b	#2,$24(a1)
    9849/    803E : 08A8 0003 0022      		bclr	#3,$22(a0)
    9850/    8044 : 4228 0025           		clr.b	$25(a0)
    9851/    8048 : 3368 0012 0012      		move.w	$12(a0),$12(a1)
    9852/    804E :                     
    9853/    804E :                     loc_8042:
    9854/    804E : 117C 0008 0024      		move.b	#8,$24(a0)
    9855/    8054 :                     
    9856/    8054 :                     loc_8048:
    9857/    8054 : 2628 002C           		move.l	$2C(a0),d3
    9858/    8058 : 3028 0012           		move.w	$12(a0),d0
    9859/    805C : 48C0                		ext.l	d0
    9860/    805E : E180                		asl.l	#8,d0
    9861/    8060 : D680                		add.l	d0,d3
    9862/    8062 : 2143 002C           		move.l	d3,$2C(a0)
    9863/    8066 : 0668 0038 0012      		addi.w	#$38,$12(a0)
    9864/    806C : 3038 F72E           		move.w	($FFFFF72E).w,d0
    9865/    8070 : 0640 00E0           		addi.w	#$E0,d0
    9866/    8074 : B068 002C           		cmp.w	$2C(a0),d0
    9867/    8078 : 6406                		bcc.s	locret_8074
    9868/    807A : 117C 0006 0024      		move.b	#6,$24(a0)
    9869/    8080 :                     
    9870/    8080 :                     locret_8074:
    9871/    8080 : 4E75                		rts	
    9872/    8082 :                     ; ===========================================================================
    9873/    8082 :                     
    9874/    8082 :                     Obj18_Type07:
    9875/    8082 : 4A68 003A           		tst.w	$3A(a0)		; is time delay	set?
    9876/    8086 : 661A                		bne.s	Obj18_07_Wait	; if yes, branch
    9877/    8088 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2 ; load	switch statuses
    9878/    808C : 7000                		moveq	#0,d0
    9879/    808E : 1028 0028           		move.b	$28(a0),d0	; move object type ($x7) to d0
    9880/    8092 : E848                		lsr.w	#4,d0		; divide d0 by 8, round	down
    9881/    8094 : 4A32 0000           		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
    9882/    8098 : 6706                		beq.s	Obj18_07_NoMove	; if not, branch
    9883/    809A : 317C 003C 003A      		move.w	#60,$3A(a0)	; set time delay to 1 second
    9884/    80A0 :                     
    9885/    80A0 :                     Obj18_07_NoMove:
    9886/    80A0 : 4E75                		rts	
    9887/    80A2 :                     ; ===========================================================================
    9888/    80A2 :                     
    9889/    80A2 :                     Obj18_07_Wait:
    9890/    80A2 : 5368 003A           		subq.w	#1,$3A(a0)	; subtract 1 from time delay
    9891/    80A6 : 66F8                		bne.s	Obj18_07_NoMove	; if time is > 0, branch
    9892/    80A8 : 5228 0028           		addq.b	#1,$28(a0)	; change to type 08
    9893/    80AC : 4E75                		rts	
    9894/    80AE :                     ; ===========================================================================
    9895/    80AE :                     
    9896/    80AE :                     Obj18_Type08:
    9897/    80AE : 5568 002C           		subq.w	#2,$2C(a0)	; move platform	up
    9898/    80B2 : 3028 0034           		move.w	$34(a0),d0
    9899/    80B6 : 0440 0200           		subi.w	#$200,d0
    9900/    80BA : B068 002C           		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
    9901/    80BE : 6604                		bne.s	Obj18_08_NoStop	; if not, branch
    9902/    80C0 : 4228 0028           		clr.b	$28(a0)		; change to type 00 (stop moving)
    9903/    80C4 :                     
    9904/    80C4 :                     Obj18_08_NoStop:
    9905/    80C4 : 4E75                		rts	
    9906/    80C6 :                     ; ===========================================================================
    9907/    80C6 :                     
    9908/    80C6 :                     Obj18_Type0A:
    9909/    80C6 : 3028 0034           		move.w	$34(a0),d0
    9910/    80CA : 1228 0026           		move.b	$26(a0),d1	; load platform-motion variable
    9911/    80CE : 0401 0040           		subi.b	#$40,d1
    9912/    80D2 : 4881                		ext.w	d1
    9913/    80D4 : E241                		asr.w	#1,d1
    9914/    80D6 : D041                		add.w	d1,d0
    9915/    80D8 : 3140 002C           		move.w	d0,$2C(a0)	; change position on y-axis
    9916/    80DC :                     
    9917/    80DC :                     Obj18_ChgMotion:
    9918/    80DC : 1178 FE78 0026      		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
    9919/    80E2 : 4E75                		rts	
    9920/    80E4 :                     ; ===========================================================================
    9921/    80E4 :                     
    9922/    80E4 :                     Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
    9923/    80E4 : 3028 0032           		move.w	$32(a0),d0
    9924/    80E8 : 0240 FF80           		andi.w	#$FF80,d0
    9925/    80EC : 3238 F700           		move.w	($FFFFF700).w,d1
    9926/    80F0 : 0441 0080           		subi.w	#$80,d1
    9927/    80F4 : 0241 FF80           		andi.w	#$FF80,d1
    9928/    80F8 : 9041                		sub.w	d1,d0
    9929/    80FA : 0C40 0280           		cmpi.w	#$280,d0
    9930/    80FE : 6202                		bhi.s	Obj18_Delete
    9931/    8100 : 4E75                		rts	
    9932/    8102 :                     ; ===========================================================================
    9933/    8102 :                     
    9934/    8102 :                     Obj18_Delete:				; XREF: Obj18_Index
    9935/    8102 : 6000 5646           		bra.w	DeleteObject
    9936/    8106 :                     ; ===========================================================================
    9937/    8106 :                     ; ---------------------------------------------------------------------------
    9938/    8106 :                     ; Sprite mappings - unused
    9939/    8106 :                     ; ---------------------------------------------------------------------------
    9940/    8106 :                     Map_obj18x:
    9941/    8106 :                     		include	"_maps/obj18x.asm"
(1)    1/    8106 :                     ; ---------------------------------------------------------------------------
(1)    2/    8106 :                     ; Sprite mappings - unused
(1)    3/    8106 :                     ; ---------------------------------------------------------------------------
(1)    4/    8106 : 0004                		dc.w byte_80FE-Map_obj18x
(1)    5/    8108 : 000F                		dc.w byte_8109-Map_obj18x
(1)    6/    810A : 02                  byte_80FE:	dc.b 2
(1)    7/    810B : F40B 003C E8        		dc.b $F4, $B, 0, $3C, $E8
(1)    8/    8110 : F40B 0048 00        		dc.b $F4, $B, 0, $48, 0
(1)    9/    8115 : 0A                  byte_8109:	dc.b $A
(1)   10/    8116 : F40F 00CA E0        		dc.b $F4, $F, 0, $CA, $E0
(1)   11/    811B : 040F 00DA E0        		dc.b 4,	$F, 0, $DA, $E0
(1)   12/    8120 : 240F 00DA E0        		dc.b $24, $F, 0, $DA, $E0
(1)   13/    8125 : 440F 00DA E0        		dc.b $44, $F, 0, $DA, $E0
(1)   14/    812A : 640F 00DA E0        		dc.b $64, $F, 0, $DA, $E0
(1)   15/    812F : F40F 08CA 00        		dc.b $F4, $F, 8, $CA, 0
(1)   16/    8134 : 040F 08DA 00        		dc.b 4,	$F, 8, $DA, 0
(1)   17/    8139 : 240F 08DA 00        		dc.b $24, $F, 8, $DA, 0
(1)   18/    813E : 440F 08DA 00        		dc.b $44, $F, 8, $DA, 0
(1)   19/    8143 : 640F 08DA 00        		dc.b $64, $F, 8, $DA, 0
(1)   20/    8148 : (MACRO)             		align 2
(1)   20/    8148 :  (MACRO-2)                  cnop 0,2
(1)   20/    8148 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    9942/    8148 :                     
    9943/    8148 :                     ; ---------------------------------------------------------------------------
    9944/    8148 :                     ; Sprite mappings - GHZ	platforms
    9945/    8148 :                     ; ---------------------------------------------------------------------------
    9946/    8148 :                     Map_obj18:
    9947/    8148 :                     		include	"_maps/obj18ghz.asm"
(1)    1/    8148 :                     ; ---------------------------------------------------------------------------
(1)    2/    8148 :                     ; Sprite mappings - GHZ	platforms
(1)    3/    8148 :                     ; ---------------------------------------------------------------------------
(1)    4/    8148 : 0004                		dc.w byte_8140-Map_obj18
(1)    5/    814A : 0019                		dc.w byte_8155-Map_obj18
(1)    6/    814C : 04                  byte_8140:	dc.b 4
(1)    7/    814D : F40B 003B E0        		dc.b $F4, $B, 0, $3B, $E0 ; small platform
(1)    8/    8152 : F407 003F F8        		dc.b $F4, 7, 0,	$3F, $F8
(1)    9/    8157 : F407 003F 08        		dc.b $F4, 7, 0,	$3F, 8
(1)   10/    815C : F403 0047 18        		dc.b $F4, 3, 0,	$47, $18
(1)   11/    8161 : 0A                  byte_8155:	dc.b $A
(1)   12/    8162 : F40F 00C5 E0        		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
(1)   13/    8167 : 040F 00D5 E0        		dc.b 4,	$F, 0, $D5, $E0
(1)   14/    816C : 240F 00D5 E0        		dc.b $24, $F, 0, $D5, $E0
(1)   15/    8171 : 440F 00D5 E0        		dc.b $44, $F, 0, $D5, $E0
(1)   16/    8176 : 640F 00D5 E0        		dc.b $64, $F, 0, $D5, $E0
(1)   17/    817B : F40F 08C5 00        		dc.b $F4, $F, 8, $C5, 0
(1)   18/    8180 : 040F 08D5 00        		dc.b 4,	$F, 8, $D5, 0
(1)   19/    8185 : 240F 08D5 00        		dc.b $24, $F, 8, $D5, 0
(1)   20/    818A : 440F 08D5 00        		dc.b $44, $F, 8, $D5, 0
(1)   21/    818F : 640F 08D5 00        		dc.b $64, $F, 8, $D5, 0
(1)   22/    8194 : (MACRO)             		align 2
(1)   22/    8194 :  (MACRO-2)                  cnop 0,2
(1)   22/    8194 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    9948/    8194 :                     
    9949/    8194 :                     ; ---------------------------------------------------------------------------
    9950/    8194 :                     ; Sprite mappings - SYZ	platforms
    9951/    8194 :                     ; ---------------------------------------------------------------------------
    9952/    8194 :                     Map_obj18a:
    9953/    8194 :                     		include	"_maps/obj18syz.asm"
(1)    1/    8194 :                     ; ---------------------------------------------------------------------------
(1)    2/    8194 :                     ; Sprite mappings - SYZ	platforms
(1)    3/    8194 :                     ; ---------------------------------------------------------------------------
(1)    4/    8194 : 0002                		dc.w byte_818A-Map_obj18a
(1)    5/    8196 : 03                  byte_818A:	dc.b 3
(1)    6/    8197 : F60B 0049 E0        		dc.b $F6, $B, 0, $49, $E0
(1)    7/    819C : F607 0051 F8        		dc.b $F6, 7, 0,	$51, $F8
(1)    8/    81A1 : F60B 0055 08        		dc.b $F6, $B, 0, $55, 8
(1)    9/    81A6 : (MACRO)             		align 2
(1)    9/    81A6 :  (MACRO-2)                  cnop 0,2
(1)    9/    81A6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    9954/    81A6 :                     
    9955/    81A6 :                     ; ---------------------------------------------------------------------------
    9956/    81A6 :                     ; Sprite mappings - SLZ	platforms
    9957/    81A6 :                     ; ---------------------------------------------------------------------------
    9958/    81A6 :                     Map_obj18b:
    9959/    81A6 :                     		include	"_maps/obj18slz.asm"
(1)    1/    81A6 :                     ; ---------------------------------------------------------------------------
(1)    2/    81A6 :                     ; Sprite mappings - SLZ	platforms
(1)    3/    81A6 :                     ; ---------------------------------------------------------------------------
(1)    4/    81A6 : 0002                		dc.w byte_819C-Map_obj18b
(1)    5/    81A8 : 02                  byte_819C:	dc.b 2
(1)    6/    81A9 : F80F 0021 E0        		dc.b $F8, $F, 0, $21, $E0
(1)    7/    81AE : F80F 0021 00        		dc.b $F8, $F, 0, $21, 0
(1)    8/    81B3 : (MACRO)             		align 2
(1)    8/    81B3 :  (MACRO-2)                  cnop 0,2
(1)    8/    81B3 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)    8/    81B3 : =$8                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)    8/    81B4 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
    9960/    81B4 :                     
    9961/    81B4 :                     ; ===========================================================================
    9962/    81B4 :                     ; ---------------------------------------------------------------------------
    9963/    81B4 :                     ; Object 19 - blank
    9964/    81B4 :                     ; ---------------------------------------------------------------------------
    9965/    81B4 :                     
    9966/    81B4 :                     Obj19:					; XREF: Obj_Index
    9967/    81B4 : 4E75                		rts	
    9968/    81B6 :                     ; ===========================================================================
    9969/    81B6 :                     ; ---------------------------------------------------------------------------
    9970/    81B6 :                     ; Sprite mappings - swinging ball on a chain from GHZ boss
    9971/    81B6 :                     ; ---------------------------------------------------------------------------
    9972/    81B6 :                     Map_obj48:
    9973/    81B6 :                     		include	"_maps/obj48.asm"
(1)    1/    81B6 :                     ; ---------------------------------------------------------------------------
(1)    2/    81B6 :                     ; Sprite mappings - swinging ball on a chain from GHZ boss
(1)    3/    81B6 :                     ; ---------------------------------------------------------------------------
(1)    4/    81B6 : 0008 0027           		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
(1)    5/    81BA : 003C 0051           		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
(1)    6/    81BE : 06                  byte_81B2:	dc.b 6
(1)    7/    81BF : F004 0024 F0        		dc.b $F0, 4, 0,	$24, $F0
(1)    8/    81C4 : F804 1024 F0        		dc.b $F8, 4, $10, $24, $F0
(1)    9/    81C9 : E80A 0000 E8        		dc.b $E8, $A, 0, 0, $E8
(1)   10/    81CE : E80A 0800 00        		dc.b $E8, $A, 8, 0, 0
(1)   11/    81D3 : 000A 1000 E8        		dc.b 0,	$A, $10, 0, $E8
(1)   12/    81D8 : 000A 1800 00        		dc.b 0,	$A, $18, 0, 0
(1)   13/    81DD : 04                  byte_81D1:	dc.b 4
(1)   14/    81DE : E80A 0009 E8        		dc.b $E8, $A, 0, 9, $E8
(1)   15/    81E3 : E80A 0809 00        		dc.b $E8, $A, 8, 9, 0
(1)   16/    81E8 : 000A 1009 E8        		dc.b 0,	$A, $10, 9, $E8
(1)   17/    81ED : 000A 1809 00        		dc.b 0,	$A, $18, 9, 0
(1)   18/    81F2 : 04                  byte_81E6:	dc.b 4
(1)   19/    81F3 : E80A 0012 E8        		dc.b $E8, $A, 0, $12, $E8
(1)   20/    81F8 : E80A 001B 00        		dc.b $E8, $A, 0, $1B, 0
(1)   21/    81FD : 000A 181B E8        		dc.b 0,	$A, $18, $1B, $E8
(1)   22/    8202 : 000A 1812 00        		dc.b 0,	$A, $18, $12, 0
(1)   23/    8207 : 04                  byte_81FB:	dc.b 4
(1)   24/    8208 : E80A 081B E8        		dc.b $E8, $A, 8, $1B, $E8
(1)   25/    820D : E80A 0812 00        		dc.b $E8, $A, 8, $12, 0
(1)   26/    8212 : 000A 1012 E8        		dc.b 0,	$A, $10, $12, $E8
(1)   27/    8217 : 000A 101B 00        		dc.b 0,	$A, $10, $1B, 0
(1)   28/    821C : (MACRO)             		align 2
(1)   28/    821C :  (MACRO-2)                  cnop 0,2
(1)   28/    821C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
    9974/    821C :                     
    9975/    821C :                     ; ===========================================================================
    9976/    821C :                     ; ---------------------------------------------------------------------------
    9977/    821C :                     ; Object 1A - GHZ collapsing ledge
    9978/    821C :                     ; ---------------------------------------------------------------------------
    9979/    821C :                     
    9980/    821C :                     Obj1A:					; XREF: Obj_Index
    9981/    821C : 7000                		moveq	#0,d0
    9982/    821E : 1028 0024           		move.b	$24(a0),d0
    9983/    8222 : 323B 0006           		move.w	Obj1A_Index(pc,d0.w),d1
    9984/    8226 : 4EFB 1002           		jmp	Obj1A_Index(pc,d1.w)
    9985/    822A :                     ; ===========================================================================
    9986/    822A : 000C 0048           Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
    9987/    822E : 006C 009C           		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
    9988/    8232 : 00FC 007E           		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
    9989/    8236 :                     ; ===========================================================================
    9990/    8236 :                     
    9991/    8236 :                     Obj1A_Main:				; XREF: Obj1A_Index
    9992/    8236 : 5428 0024           		addq.b	#2,$24(a0)
    9993/    823A : 217C 0000 85AC 0004 		move.l	#Map_obj1A,4(a0)
    9994/    8242 : 317C 4000 0002      		move.w	#$4000,2(a0)
    9995/    8248 : 0028 0004 0001      		ori.b	#4,1(a0)
    9996/    824E : 117C 0004 0018      		move.b	#4,$18(a0)
    9997/    8254 : 117C 0007 0038      		move.b	#7,$38(a0)	; set time delay for collapse
    9998/    825A : 117C 0064 0019      		move.b	#$64,$19(a0)
    9999/    8260 : 1168 0028 001A      		move.b	$28(a0),$1A(a0)
   10000/    8266 : 117C 0038 0016      		move.b	#$38,$16(a0)
   10001/    826C : 08E8 0004 0001      		bset	#4,1(a0)
   10002/    8272 :                     
   10003/    8272 :                     Obj1A_ChkTouch:				; XREF: Obj1A_Index
   10004/    8272 : 4A28 003A           		tst.b	$3A(a0)		; has Sonic touched the	platform?
   10005/    8276 : 670C                		beq.s	Obj1A_Slope	; if not, branch
   10006/    8278 : 4A28 0038           		tst.b	$38(a0)		; has time reached zero?
   10007/    827C : 6700 0202           		beq.w	Obj1A_Collapse	; if yes, branch
   10008/    8280 : 5328 0038           		subq.b	#1,$38(a0)	; subtract 1 from time
   10009/    8284 :                     
   10010/    8284 :                     Obj1A_Slope:
   10011/    8284 : 323C 0030           		move.w	#$30,d1
   10012/    8288 : 45F9 0000 857C      		lea	(Obj1A_SlopeData).l,a2
   10013/    828E : 6100 F29C           		bsr.w	SlopeObject
   10014/    8292 : 6000 7528           		bra.w	MarkObjGone
   10015/    8296 :                     ; ===========================================================================
   10016/    8296 :                     
   10017/    8296 :                     Obj1A_Touch:				; XREF: Obj1A_Index
   10018/    8296 : 4A28 0038           		tst.b	$38(a0)
   10019/    829A : 6700 01EA           		beq.w	loc_847A
   10020/    829E : 117C 0001 003A      		move.b	#1,$3A(a0)	; set object as	"touched"
   10021/    82A4 : 5328 0038           		subq.b	#1,$38(a0)
   10022/    82A8 :                     
   10023/    82A8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10024/    82A8 :                     
   10025/    82A8 :                     
   10026/    82A8 :                     Obj1A_WalkOff:				; XREF: Obj1A_Index
   10027/    82A8 : 323C 0030           		move.w	#$30,d1
   10028/    82AC : 6100 F31E           		bsr.w	ExitPlatform
   10029/    82B0 : 323C 0030           		move.w	#$30,d1
   10030/    82B4 : 45F9 0000 857C      		lea	(Obj1A_SlopeData).l,a2
   10031/    82BA : 3428 0008           		move.w	8(a0),d2
   10032/    82BE : 6100 0276           		bsr.w	SlopeObject2
   10033/    82C2 : 6000 74F8           		bra.w	MarkObjGone
   10034/    82C6 :                     ; End of function Obj1A_WalkOff
   10035/    82C6 :                     
   10036/    82C6 :                     ; ===========================================================================
   10037/    82C6 :                     
   10038/    82C6 :                     Obj1A_Display:				; XREF: Obj1A_Index
   10039/    82C6 : 4A28 0038           		tst.b	$38(a0)		; has time delay reached zero?
   10040/    82CA : 674A                		beq.s	Obj1A_TimeZero	; if yes, branch
   10041/    82CC : 4A28 003A           		tst.b	$3A(a0)		; has Sonic touched the	object?
   10042/    82D0 : 6600 000A           		bne.w	loc_82D0	; if yes, branch
   10043/    82D4 : 5328 0038           		subq.b	#1,$38(a0)	; subtract 1 from time
   10044/    82D8 : 6000 5434           		bra.w	DisplaySprite
   10045/    82DC :                     ; ===========================================================================
   10046/    82DC :                     
   10047/    82DC :                     loc_82D0:				; XREF: Obj1A_Display
   10048/    82DC : 5328 0038           		subq.b	#1,$38(a0)
   10049/    82E0 : 6100 FFC6           		bsr.w	Obj1A_WalkOff
   10050/    82E4 : 43F8 D000           		lea	($FFFFD000).w,a1
   10051/    82E8 : 0829 0003 0022      		btst	#3,$22(a1)
   10052/    82EE : 6718                		beq.s	loc_82FC
   10053/    82F0 : 4A28 0038           		tst.b	$38(a0)
   10054/    82F4 : 661E                		bne.s	locret_8308
   10055/    82F6 : 08A9 0003 0022      		bclr	#3,$22(a1)
   10056/    82FC : 08A9 0005 0022      		bclr	#5,$22(a1)
   10057/    8302 : 137C 0001 001D      		move.b	#1,$1D(a1)
   10058/    8308 :                     
   10059/    8308 :                     loc_82FC:
   10060/    8308 : 117C 0000 003A      		move.b	#0,$3A(a0)
   10061/    830E : 117C 0006 0024      		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
   10062/    8314 :                     
   10063/    8314 :                     locret_8308:
   10064/    8314 : 4E75                		rts	
   10065/    8316 :                     ; ===========================================================================
   10066/    8316 :                     
   10067/    8316 :                     Obj1A_TimeZero:				; XREF: Obj1A_Display
   10068/    8316 : 6100 53A4           		bsr.w	ObjectFall
   10069/    831A : 6100 53F2           		bsr.w	DisplaySprite
   10070/    831E : 4A28 0001           		tst.b	1(a0)
   10071/    8322 : 6A02                		bpl.s	Obj1A_Delete
   10072/    8324 : 4E75                		rts	
   10073/    8326 :                     ; ===========================================================================
   10074/    8326 :                     
   10075/    8326 :                     Obj1A_Delete:				; XREF: Obj1A_Index
   10076/    8326 : 6100 5422           		bsr.w	DeleteObject
   10077/    832A : 4E75                		rts	
   10078/    832C :                     ; ===========================================================================
   10079/    832C :                     ; ---------------------------------------------------------------------------
   10080/    832C :                     ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
   10081/    832C :                     ; ---------------------------------------------------------------------------
   10082/    832C :                     
   10083/    832C :                     Obj53:					; XREF: Obj_Index
   10084/    832C : 7000                		moveq	#0,d0
   10085/    832E : 1028 0024           		move.b	$24(a0),d0
   10086/    8332 : 323B 0006           		move.w	Obj53_Index(pc,d0.w),d1
   10087/    8336 : 4EFB 1002           		jmp	Obj53_Index(pc,d1.w)
   10088/    833A :                     ; ===========================================================================
   10089/    833A : 000C 0056           Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
   10090/    833E : 0098 00BE           		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
   10091/    8342 : 011E 00AA           		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
   10092/    8346 :                     ; ===========================================================================
   10093/    8346 :                     
   10094/    8346 :                     Obj53_Main:				; XREF: Obj53_Index
   10095/    8346 : 5428 0024           		addq.b	#2,$24(a0)
   10096/    834A : 217C 0000 8752 0004 		move.l	#Map_obj53,4(a0)
   10097/    8352 : 317C 42B8 0002      		move.w	#$42B8,2(a0)
   10098/    8358 : 0C38 0003 FE10      		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
   10099/    835E : 660A                		bne.s	Obj53_NotSLZ
   10100/    8360 : 317C 44E0 0002      		move.w	#$44E0,2(a0)	; SLZ specific code
   10101/    8366 : 5428 001A           		addq.b	#2,$1A(a0)
   10102/    836A :                     
   10103/    836A :                     Obj53_NotSLZ:
   10104/    836A : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
   10105/    8370 : 6606                		bne.s	Obj53_NotSBZ
   10106/    8372 : 317C 43F5 0002      		move.w	#$43F5,2(a0)	; SBZ specific code
   10107/    8378 :                     
   10108/    8378 :                     Obj53_NotSBZ:
   10109/    8378 : 0028 0004 0001      		ori.b	#4,1(a0)
   10110/    837E : 117C 0004 0018      		move.b	#4,$18(a0)
   10111/    8384 : 117C 0007 0038      		move.b	#7,$38(a0)
   10112/    838A : 117C 0044 0019      		move.b	#$44,$19(a0)
   10113/    8390 :                     
   10114/    8390 :                     Obj53_ChkTouch:				; XREF: Obj53_Index
   10115/    8390 : 4A28 003A           		tst.b	$3A(a0)		; has Sonic touched the	object?
   10116/    8394 : 670C                		beq.s	Obj53_Solid	; if not, branch
   10117/    8396 : 4A28 0038           		tst.b	$38(a0)		; has time delay reached zero?
   10118/    839A : 6700 00C2           		beq.w	Obj53_Collapse	; if yes, branch
   10119/    839E : 5328 0038           		subq.b	#1,$38(a0)	; subtract 1 from time
   10120/    83A2 :                     
   10121/    83A2 :                     Obj53_Solid:
   10122/    83A2 : 323C 0020           		move.w	#$20,d1
   10123/    83A6 : 6100 F0B0           		bsr.w	PlatformObject
   10124/    83AA : 4A28 0028           		tst.b	$28(a0)
   10125/    83AE : 6A1E                		bpl.s	Obj53_MarkAsGone
   10126/    83B0 : 0829 0003 0022      		btst	#3,$22(a1)
   10127/    83B6 : 6716                		beq.s	Obj53_MarkAsGone
   10128/    83B8 : 08A8 0000 0001      		bclr	#0,1(a0)
   10129/    83BE : 3029 0008           		move.w	8(a1),d0
   10130/    83C2 : 9068 0008           		sub.w	8(a0),d0
   10131/    83C6 : 6406                		bcc.s	Obj53_MarkAsGone
   10132/    83C8 : 08E8 0000 0001      		bset	#0,1(a0)
   10133/    83CE :                     
   10134/    83CE :                     Obj53_MarkAsGone:
   10135/    83CE : 6000 73EC           		bra.w	MarkObjGone
   10136/    83D2 :                     ; ===========================================================================
   10137/    83D2 :                     
   10138/    83D2 :                     Obj53_Touch:				; XREF: Obj53_Index
   10139/    83D2 : 4A28 0038           		tst.b	$38(a0)
   10140/    83D6 : 6700 008C           		beq.w	loc_8458
   10141/    83DA : 117C 0001 003A      		move.b	#1,$3A(a0)	; set object as	"touched"
   10142/    83E0 : 5328 0038           		subq.b	#1,$38(a0)
   10143/    83E4 :                     
   10144/    83E4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10145/    83E4 :                     
   10146/    83E4 :                     
   10147/    83E4 :                     Obj53_WalkOff:				; XREF: Obj53_Index
   10148/    83E4 : 323C 0020           		move.w	#$20,d1
   10149/    83E8 : 6100 F1E2           		bsr.w	ExitPlatform
   10150/    83EC : 3428 0008           		move.w	8(a0),d2
   10151/    83F0 : 6100 F748           		bsr.w	MvSonicOnPtfm2
   10152/    83F4 : 6000 73C6           		bra.w	MarkObjGone
   10153/    83F8 :                     ; End of function Obj53_WalkOff
   10154/    83F8 :                     
   10155/    83F8 :                     ; ===========================================================================
   10156/    83F8 :                     
   10157/    83F8 :                     Obj53_Display:				; XREF: Obj53_Index
   10158/    83F8 : 4A28 0038           		tst.b	$38(a0)		; has time delay reached zero?
   10159/    83FC : 674A                		beq.s	Obj53_TimeZero	; if yes, branch
   10160/    83FE : 4A28 003A           		tst.b	$3A(a0)		; has Sonic touched the	object?
   10161/    8402 : 6600 000A           		bne.w	loc_8402	; if yes, branch
   10162/    8406 : 5328 0038           		subq.b	#1,$38(a0)	; subtract 1 from time
   10163/    840A : 6000 5302           		bra.w	DisplaySprite
   10164/    840E :                     ; ===========================================================================
   10165/    840E :                     
   10166/    840E :                     loc_8402:
   10167/    840E : 5328 0038           		subq.b	#1,$38(a0)
   10168/    8412 : 6100 FFD0           		bsr.w	Obj53_WalkOff
   10169/    8416 : 43F8 D000           		lea	($FFFFD000).w,a1
   10170/    841A : 0829 0003 0022      		btst	#3,$22(a1)
   10171/    8420 : 6718                		beq.s	loc_842E
   10172/    8422 : 4A28 0038           		tst.b	$38(a0)
   10173/    8426 : 661E                		bne.s	locret_843A
   10174/    8428 : 08A9 0003 0022      		bclr	#3,$22(a1)
   10175/    842E : 08A9 0005 0022      		bclr	#5,$22(a1)
   10176/    8434 : 137C 0001 001D      		move.b	#1,$1D(a1)
   10177/    843A :                     
   10178/    843A :                     loc_842E:
   10179/    843A : 117C 0000 003A      		move.b	#0,$3A(a0)
   10180/    8440 : 117C 0006 0024      		move.b	#6,$24(a0)	; run "Obj53_Display" routine
   10181/    8446 :                     
   10182/    8446 :                     locret_843A:
   10183/    8446 : 4E75                		rts	
   10184/    8448 :                     ; ===========================================================================
   10185/    8448 :                     
   10186/    8448 :                     Obj53_TimeZero:				; XREF: Obj53_Display
   10187/    8448 : 6100 5272           		bsr.w	ObjectFall
   10188/    844C : 6100 52C0           		bsr.w	DisplaySprite
   10189/    8450 : 4A28 0001           		tst.b	1(a0)
   10190/    8454 : 6A02                		bpl.s	Obj53_Delete
   10191/    8456 : 4E75                		rts	
   10192/    8458 :                     ; ===========================================================================
   10193/    8458 :                     
   10194/    8458 :                     Obj53_Delete:				; XREF: Obj53_Index
   10195/    8458 : 6100 52F0           		bsr.w	DeleteObject
   10196/    845C : 4E75                		rts	
   10197/    845E :                     ; ===========================================================================
   10198/    845E :                     
   10199/    845E :                     Obj53_Collapse:				; XREF: Obj53_ChkTouch
   10200/    845E : 117C 0000 003A      		move.b	#0,$3A(a0)
   10201/    8464 :                     
   10202/    8464 :                     loc_8458:				; XREF: Obj53_Touch
   10203/    8464 : 49F9 0000 8526      		lea	(Obj53_Data2).l,a4
   10204/    846A : 0828 0000 0028      		btst	#0,$28(a0)
   10205/    8470 : 6706                		beq.s	loc_846C
   10206/    8472 : 49F9 0000 852E      		lea	(Obj53_Data3).l,a4
   10207/    8478 :                     
   10208/    8478 :                     loc_846C:
   10209/    8478 : 7207                		moveq	#7,d1
   10210/    847A : 5228 001A           		addq.b	#1,$1A(a0)
   10211/    847E : 6012                		bra.s	loc_8486
   10212/    8480 :                     ; ===========================================================================
   10213/    8480 :                     
   10214/    8480 :                     Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
   10215/    8480 : 117C 0000 003A      		move.b	#0,$3A(a0)
   10216/    8486 :                     
   10217/    8486 :                     loc_847A:				; XREF: Obj1A_Touch
   10218/    8486 : 49F9 0000 850C      		lea	(Obj53_Data1).l,a4
   10219/    848C : 7218                		moveq	#$18,d1
   10220/    848E : 5428 001A           		addq.b	#2,$1A(a0)
   10221/    8492 :                     
   10222/    8492 :                     loc_8486:				; XREF: Obj53_Collapse
   10223/    8492 : 7000                		moveq	#0,d0
   10224/    8494 : 1028 001A           		move.b	$1A(a0),d0
   10225/    8498 : D040                		add.w	d0,d0
   10226/    849A : 2668 0004           		movea.l	4(a0),a3
   10227/    849E : D6F3 0000           		adda.w	(a3,d0.w),a3
   10228/    84A2 : 524B                		addq.w	#1,a3
   10229/    84A4 : 08E8 0005 0001      		bset	#5,1(a0)
   10230/    84AA : (MACRO)             		_move.b	0(a0),d4
   10230/    84AA :  (MACRO-2)                          insn2op move.b, 0(a0),d4
   10230/    84AA : 1828 0001                                   !move.b   1+0(a0),d4
   10230/    84AD :                                             !org    *-1
   10230/    84AD : 00                                          !dc.b   0
   10231/    84AE : 1A28 0001           		move.b	1(a0),d5
   10232/    84B2 : 2248                		movea.l	a0,a1
   10233/    84B4 : 6008                		bra.s	loc_84B2
   10234/    84B6 :                     ; ===========================================================================
   10235/    84B6 :                     
   10236/    84B6 :                     loc_84AA:
   10237/    84B6 : 6100 56DE           		bsr.w	SingleObjLoad
   10238/    84BA : 6642                		bne.s	loc_84F2
   10239/    84BC : 5A4B                		addq.w	#5,a3
   10240/    84BE :                     
   10241/    84BE :                     loc_84B2:
   10242/    84BE : 137C 0006 0024      		move.b	#6,$24(a1)
   10243/    84C4 : (MACRO)             		_move.b	d4,0(a1)
   10243/    84C4 :  (MACRO-2)                          insn2op move.b, d4,0(a1)
   10243/    84C4 : 1344 0001                                   !move.b   d4,1+0(a1)
   10243/    84C7 :                                             !org    *-1
   10243/    84C7 : 00                                          !dc.b   0
   10244/    84C8 : 234B 0004           		move.l	a3,4(a1)
   10245/    84CC : 1345 0001           		move.b	d5,1(a1)
   10246/    84D0 : 3368 0008 0008      		move.w	8(a0),8(a1)
   10247/    84D6 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   10248/    84DC : 3368 0002 0002      		move.w	2(a0),2(a1)
   10249/    84E2 : 1368 0018 0018      		move.b	$18(a0),$18(a1)
   10250/    84E8 : 1368 0019 0019      		move.b	$19(a0),$19(a1)
   10251/    84EE : 135C 0038           		move.b	(a4)+,$38(a1)
   10252/    84F2 : B3C8                		cmpa.l	a0,a1
   10253/    84F4 : 6404                		bcc.s	loc_84EE
   10254/    84F6 : 6100 5234           		bsr.w	DisplaySprite2
   10255/    84FA :                     
   10256/    84FA :                     loc_84EE:
   10257/    84FA : 51C9 FFBA           		dbf	d1,loc_84AA
   10258/    84FE :                     
   10259/    84FE :                     loc_84F2:
   10260/    84FE : 6100 520E           		bsr.w	DisplaySprite
   10261/    8502 : 303C 00B9           		move.w	#$B9,d0
   10262/    8506 : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play collapsing	sound
   10263/    850C :                     ; ===========================================================================
   10264/    850C :                     ; ---------------------------------------------------------------------------
   10265/    850C :                     ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
   10266/    850C :                     ; ---------------------------------------------------------------------------
   10267/    850C : 1C18 1410 1A16 120E Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
                    0A06 1814 100C 0804 
   10268/    851C : 1612 0E0A 0602 1410 		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
                    0C00                
   10269/    8526 : 1E16 0E06 1A12 0A02 Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
   10270/    852E : 161E 1A12 060E 0A02 Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
   10271/    8536 :                     
   10272/    8536 :                     ; ---------------------------------------------------------------------------
   10273/    8536 :                     ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
   10274/    8536 :                     ; ---------------------------------------------------------------------------
   10275/    8536 :                     
   10276/    8536 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10277/    8536 :                     
   10278/    8536 :                     
   10279/    8536 :                     SlopeObject2:				; XREF: Obj1A_WalkOff; et al
   10280/    8536 : 43F8 D000           		lea	($FFFFD000).w,a1
   10281/    853A : 0829 0003 0022      		btst	#3,$22(a1)
   10282/    8540 : 6738                		beq.s	locret_856E
   10283/    8542 : 3029 0008           		move.w	8(a1),d0
   10284/    8546 : 9068 0008           		sub.w	8(a0),d0
   10285/    854A : D041                		add.w	d1,d0
   10286/    854C : E248                		lsr.w	#1,d0
   10287/    854E : 0828 0000 0001      		btst	#0,1(a0)
   10288/    8554 : 6704                		beq.s	loc_854E
   10289/    8556 : 4640                		not.w	d0
   10290/    8558 : D041                		add.w	d1,d0
   10291/    855A :                     
   10292/    855A :                     loc_854E:
   10293/    855A : 7200                		moveq	#0,d1
   10294/    855C : 1232 0000           		move.b	(a2,d0.w),d1
   10295/    8560 : 3028 000C           		move.w	$C(a0),d0
   10296/    8564 : 9041                		sub.w	d1,d0
   10297/    8566 : 7200                		moveq	#0,d1
   10298/    8568 : 1229 0016           		move.b	$16(a1),d1
   10299/    856C : 9041                		sub.w	d1,d0
   10300/    856E : 3340 000C           		move.w	d0,$C(a1)
   10301/    8572 : 9468 0008           		sub.w	8(a0),d2
   10302/    8576 : 9569 0008           		sub.w	d2,8(a1)
   10303/    857A :                     
   10304/    857A :                     locret_856E:
   10305/    857A : 4E75                		rts	
   10306/    857C :                     ; End of function SlopeObject2
   10307/    857C :                     
   10308/    857C :                     ; ===========================================================================
   10309/    857C :                     ; ---------------------------------------------------------------------------
   10310/    857C :                     ; Collision data for GHZ collapsing ledge
   10311/    857C :                     ; ---------------------------------------------------------------------------
   10312/    857C :                     Obj1A_SlopeData:
   10313/    857C :                     		binclude	misc/ghzledge.bin
   10314/    85AC : (MACRO)             		align 2
   10314/    85AC :  (MACRO-2)                  cnop 0,2
   10314/    85AC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   10315/    85AC :                     
   10316/    85AC :                     ; ---------------------------------------------------------------------------
   10317/    85AC :                     ; Sprite mappings - GHZ	collapsing ledge
   10318/    85AC :                     ; ---------------------------------------------------------------------------
   10319/    85AC :                     Map_obj1A:
   10320/    85AC :                     		include	"_maps/obj1A.asm"
(1)    1/    85AC :                     ; ---------------------------------------------------------------------------
(1)    2/    85AC :                     ; Sprite mappings - GHZ	collapsing ledge
(1)    3/    85AC :                     ; ---------------------------------------------------------------------------
(1)    4/    85AC : 0008 0059           		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
(1)    5/    85B0 : 00AA 0128           		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
(1)    6/    85B4 : 10                  byte_85A8:	dc.b $10
(1)    7/    85B5 : C80E 0057 10        		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
(1)    8/    85BA : D00D 0063 F0        		dc.b $D0, $D, 0, $63, $F0
(1)    9/    85BF : E00D 006B 10        		dc.b $E0, $D, 0, $6B, $10
(1)   10/    85C4 : E00D 0073 F0        		dc.b $E0, $D, 0, $73, $F0
(1)   11/    85C9 : D806 007B E0        		dc.b $D8, 6, 0,	$7B, $E0
(1)   12/    85CE : D806 0081 D0        		dc.b $D8, 6, 0,	$81, $D0
(1)   13/    85D3 : F00D 0087 10        		dc.b $F0, $D, 0, $87, $10
(1)   14/    85D8 : F00D 008F F0        		dc.b $F0, $D, 0, $8F, $F0
(1)   15/    85DD : F005 0097 E0        		dc.b $F0, 5, 0,	$97, $E0
(1)   16/    85E2 : F005 009B D0        		dc.b $F0, 5, 0,	$9B, $D0
(1)   17/    85E7 : 000D 009F 10        		dc.b 0,	$D, 0, $9F, $10
(1)   18/    85EC : 0005 00A7 00        		dc.b 0,	5, 0, $A7, 0
(1)   19/    85F1 : 000D 00AB E0        		dc.b 0,	$D, 0, $AB, $E0
(1)   20/    85F6 : 0005 00B3 D0        		dc.b 0,	5, 0, $B3, $D0
(1)   21/    85FB : 100D 00AB 10        		dc.b $10, $D, 0, $AB, $10
(1)   22/    8600 : 1005 00B7 00        		dc.b $10, 5, 0,	$B7, 0
(1)   23/    8605 : 10                  byte_85F9:	dc.b $10
(1)   24/    8606 : C80E 0057 10        		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
(1)   25/    860B : D00D 0063 F0        		dc.b $D0, $D, 0, $63, $F0
(1)   26/    8610 : E00D 006B 10        		dc.b $E0, $D, 0, $6B, $10
(1)   27/    8615 : E00D 0073 F0        		dc.b $E0, $D, 0, $73, $F0
(1)   28/    861A : D806 007B E0        		dc.b $D8, 6, 0,	$7B, $E0
(1)   29/    861F : D806 00BB D0        		dc.b $D8, 6, 0,	$BB, $D0
(1)   30/    8624 : F00D 0087 10        		dc.b $F0, $D, 0, $87, $10
(1)   31/    8629 : F00D 008F F0        		dc.b $F0, $D, 0, $8F, $F0
(1)   32/    862E : F005 0097 E0        		dc.b $F0, 5, 0,	$97, $E0
(1)   33/    8633 : F005 00C1 D0        		dc.b $F0, 5, 0,	$C1, $D0
(1)   34/    8638 : 000D 009F 10        		dc.b 0,	$D, 0, $9F, $10
(1)   35/    863D : 0005 00A7 00        		dc.b 0,	5, 0, $A7, 0
(1)   36/    8642 : 000D 00AB E0        		dc.b 0,	$D, 0, $AB, $E0
(1)   37/    8647 : 0005 00B7 D0        		dc.b 0,	5, 0, $B7, $D0
(1)   38/    864C : 100D 00AB 10        		dc.b $10, $D, 0, $AB, $10
(1)   39/    8651 : 1005 00B7 00        		dc.b $10, 5, 0,	$B7, 0
(1)   40/    8656 : 19                  byte_864A:	dc.b $19
(1)   41/    8657 : C806 005D 20        		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
(1)   42/    865C : C806 0057 10        		dc.b $C8, 6, 0,	$57, $10
(1)   43/    8661 : D005 0067 00        		dc.b $D0, 5, 0,	$67, 0
(1)   44/    8666 : D005 0063 F0        		dc.b $D0, 5, 0,	$63, $F0
(1)   45/    866B : E005 006F 20        		dc.b $E0, 5, 0,	$6F, $20
(1)   46/    8670 : E005 006B 10        		dc.b $E0, 5, 0,	$6B, $10
(1)   47/    8675 : E005 0077 00        		dc.b $E0, 5, 0,	$77, 0
(1)   48/    867A : E005 0073 F0        		dc.b $E0, 5, 0,	$73, $F0
(1)   49/    867F : D806 007B E0        		dc.b $D8, 6, 0,	$7B, $E0
(1)   50/    8684 : D806 0081 D0        		dc.b $D8, 6, 0,	$81, $D0
(1)   51/    8689 : F005 008B 20        		dc.b $F0, 5, 0,	$8B, $20
(1)   52/    868E : F005 0087 10        		dc.b $F0, 5, 0,	$87, $10
(1)   53/    8693 : F005 0093 00        		dc.b $F0, 5, 0,	$93, 0
(1)   54/    8698 : F005 008F F0        		dc.b $F0, 5, 0,	$8F, $F0
(1)   55/    869D : F005 0097 E0        		dc.b $F0, 5, 0,	$97, $E0
(1)   56/    86A2 : F005 009B D0        		dc.b $F0, 5, 0,	$9B, $D0
(1)   57/    86A7 : 0005 008B 20        		dc.b 0,	5, 0, $8B, $20
(1)   58/    86AC : 0005 008B 10        		dc.b 0,	5, 0, $8B, $10
(1)   59/    86B1 : 0005 00A7 00        		dc.b 0,	5, 0, $A7, 0
(1)   60/    86B6 : 0005 00AB F0        		dc.b 0,	5, 0, $AB, $F0
(1)   61/    86BB : 0005 00AB E0        		dc.b 0,	5, 0, $AB, $E0
(1)   62/    86C0 : 0005 00B3 D0        		dc.b 0,	5, 0, $B3, $D0
(1)   63/    86C5 : 1005 00AB 20        		dc.b $10, 5, 0,	$AB, $20
(1)   64/    86CA : 1005 00AB 10        		dc.b $10, 5, 0,	$AB, $10
(1)   65/    86CF : 1005 00B7 00        		dc.b $10, 5, 0,	$B7, 0
(1)   66/    86D4 : 19                  byte_86C8:	dc.b $19
(1)   67/    86D5 : C806 005D 20        		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
(1)   68/    86DA : C806 0057 10        		dc.b $C8, 6, 0,	$57, $10
(1)   69/    86DF : D005 0067 00        		dc.b $D0, 5, 0,	$67, 0
(1)   70/    86E4 : D005 0063 F0        		dc.b $D0, 5, 0,	$63, $F0
(1)   71/    86E9 : E005 006F 20        		dc.b $E0, 5, 0,	$6F, $20
(1)   72/    86EE : E005 006B 10        		dc.b $E0, 5, 0,	$6B, $10
(1)   73/    86F3 : E005 0077 00        		dc.b $E0, 5, 0,	$77, 0
(1)   74/    86F8 : E005 0073 F0        		dc.b $E0, 5, 0,	$73, $F0
(1)   75/    86FD : D806 007B E0        		dc.b $D8, 6, 0,	$7B, $E0
(1)   76/    8702 : D806 00BB D0        		dc.b $D8, 6, 0,	$BB, $D0
(1)   77/    8707 : F005 008B 20        		dc.b $F0, 5, 0,	$8B, $20
(1)   78/    870C : F005 0087 10        		dc.b $F0, 5, 0,	$87, $10
(1)   79/    8711 : F005 0093 00        		dc.b $F0, 5, 0,	$93, 0
(1)   80/    8716 : F005 008F F0        		dc.b $F0, 5, 0,	$8F, $F0
(1)   81/    871B : F005 0097 E0        		dc.b $F0, 5, 0,	$97, $E0
(1)   82/    8720 : F005 00C1 D0        		dc.b $F0, 5, 0,	$C1, $D0
(1)   83/    8725 : 0005 008B 20        		dc.b 0,	5, 0, $8B, $20
(1)   84/    872A : 0005 008B 10        		dc.b 0,	5, 0, $8B, $10
(1)   85/    872F : 0005 00A7 00        		dc.b 0,	5, 0, $A7, 0
(1)   86/    8734 : 0005 00AB F0        		dc.b 0,	5, 0, $AB, $F0
(1)   87/    8739 : 0005 00AB E0        		dc.b 0,	5, 0, $AB, $E0
(1)   88/    873E : 0005 00B7 D0        		dc.b 0,	5, 0, $B7, $D0
(1)   89/    8743 : 1005 00AB 20        		dc.b $10, 5, 0,	$AB, $20
(1)   90/    8748 : 1005 00AB 10        		dc.b $10, 5, 0,	$AB, $10
(1)   91/    874D : 1005 00B7 00        		dc.b $10, 5, 0,	$B7, 0
(1)   92/    8752 : (MACRO)             		align 2
(1)   92/    8752 :  (MACRO-2)                  cnop 0,2
(1)   92/    8752 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   10321/    8752 :                     
   10322/    8752 :                     ; ---------------------------------------------------------------------------
   10323/    8752 :                     ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
   10324/    8752 :                     ; ---------------------------------------------------------------------------
   10325/    8752 :                     Map_obj53:
   10326/    8752 :                     		include	"_maps/obj53.asm"
(1)    1/    8752 :                     ; ---------------------------------------------------------------------------
(1)    2/    8752 :                     ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
(1)    3/    8752 :                     ; ---------------------------------------------------------------------------
(1)    4/    8752 : 0008 001D           		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
(1)    5/    8756 : 0046 005B           		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
(1)    6/    875A : 04                  byte_874E:	dc.b 4
(1)    7/    875B : F80D 0000 E0        		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
(1)    8/    8760 : 080D 0000 E0        		dc.b 8,	$D, 0, 0, $E0
(1)    9/    8765 : F80D 0000 00        		dc.b $F8, $D, 0, 0, 0
(1)   10/    876A : 080D 0000 00        		dc.b 8,	$D, 0, 0, 0
(1)   11/    876F : 08                  byte_8763:	dc.b 8
(1)   12/    8770 : F805 0000 E0        		dc.b $F8, 5, 0,	0, $E0
(1)   13/    8775 : F805 0000 F0        		dc.b $F8, 5, 0,	0, $F0
(1)   14/    877A : F805 0000 00        		dc.b $F8, 5, 0,	0, 0
(1)   15/    877F : F805 0000 10        		dc.b $F8, 5, 0,	0, $10
(1)   16/    8784 : 0805 0000 E0        		dc.b 8,	5, 0, 0, $E0
(1)   17/    8789 : 0805 0000 F0        		dc.b 8,	5, 0, 0, $F0
(1)   18/    878E : 0805 0000 00        		dc.b 8,	5, 0, 0, 0
(1)   19/    8793 : 0805 0000 10        		dc.b 8,	5, 0, 0, $10
(1)   20/    8798 : 04                  byte_878C:	dc.b 4
(1)   21/    8799 : F80D 0000 E0        		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
(1)   22/    879E : 080D 0008 E0        		dc.b 8,	$D, 0, 8, $E0
(1)   23/    87A3 : F80D 0000 00        		dc.b $F8, $D, 0, 0, 0
(1)   24/    87A8 : 080D 0008 00        		dc.b 8,	$D, 0, 8, 0
(1)   25/    87AD : 08                  byte_87A1:	dc.b 8
(1)   26/    87AE : F805 0000 E0        		dc.b $F8, 5, 0,	0, $E0
(1)   27/    87B3 : F805 0004 F0        		dc.b $F8, 5, 0,	4, $F0
(1)   28/    87B8 : F805 0000 00        		dc.b $F8, 5, 0,	0, 0
(1)   29/    87BD : F805 0004 10        		dc.b $F8, 5, 0,	4, $10
(1)   30/    87C2 : 0805 0008 E0        		dc.b 8,	5, 0, 8, $E0
(1)   31/    87C7 : 0805 000C F0        		dc.b 8,	5, 0, $C, $F0
(1)   32/    87CC : 0805 0008 00        		dc.b 8,	5, 0, 8, 0
(1)   33/    87D1 : 0805 000C 10        		dc.b 8,	5, 0, $C, $10
(1)   34/    87D6 : (MACRO)             		align 2
(1)   34/    87D6 :  (MACRO-2)                  cnop 0,2
(1)   34/    87D6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   10327/    87D6 :                     
   10328/    87D6 :                     ; ===========================================================================
   10329/    87D6 :                     ; ---------------------------------------------------------------------------
   10330/    87D6 :                     ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
   10331/    87D6 :                     ; ---------------------------------------------------------------------------
   10332/    87D6 :                     
   10333/    87D6 :                     Obj1C:					; XREF: Obj_Index
   10334/    87D6 : 7000                		moveq	#0,d0
   10335/    87D8 : 1028 0024           		move.b	$24(a0),d0
   10336/    87DC : 323B 0006           		move.w	Obj1C_Index(pc,d0.w),d1
   10337/    87E0 : 4EFB 1002           		jmp	Obj1C_Index(pc,d1.w)
   10338/    87E4 :                     ; ===========================================================================
   10339/    87E4 : 0004                Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
   10340/    87E6 : 0034                		dc.w Obj1C_ChkDel-Obj1C_Index
   10341/    87E8 :                     ; ===========================================================================
   10342/    87E8 :                     
   10343/    87E8 :                     Obj1C_Main:				; XREF: Obj1C_Index
   10344/    87E8 : 5428 0024           		addq.b	#2,$24(a0)
   10345/    87EC : 7000                		moveq	#0,d0
   10346/    87EE : 1028 0028           		move.b	$28(a0),d0	; copy object type to d0
   10347/    87F2 : C0FC 000A           		mulu.w	#$A,d0		; multiply by $A
   10348/    87F6 : 43FB 0042           		lea	Obj1C_Var(pc,d0.w),a1
   10349/    87FA : 2159 0004           		move.l	(a1)+,4(a0)
   10350/    87FE : 3159 0002           		move.w	(a1)+,2(a0)
   10351/    8802 : 0028 0004 0001      		ori.b	#4,1(a0)
   10352/    8808 : 1159 001A           		move.b	(a1)+,$1A(a0)
   10353/    880C : 1159 0019           		move.b	(a1)+,$19(a0)
   10354/    8810 : 1159 0018           		move.b	(a1)+,$18(a0)
   10355/    8814 : 1159 0020           		move.b	(a1)+,$20(a0)
   10356/    8818 :                     
   10357/    8818 :                     Obj1C_ChkDel:				; XREF: Obj1C_Index
   10358/    8818 : 3028 0008           		move.w	8(a0),d0
   10359/    881C : 0240 FF80           		andi.w	#$FF80,d0
   10360/    8820 : 3238 F700           		move.w	($FFFFF700).w,d1
   10361/    8824 : 0441 0080           		subi.w	#$80,d1
   10362/    8828 : 0241 FF80           		andi.w	#$FF80,d1
   10363/    882C : 9041                		sub.w	d1,d0
   10364/    882E : 0C40 0280           		cmpi.w	#$280,d0
   10365/    8832 : 6200 4F16           		bhi.w	DeleteObject
   10366/    8836 : 6000 4ED6           		bra.w	DisplaySprite
   10367/    883A :                     ; ===========================================================================
   10368/    883A :                     ; ---------------------------------------------------------------------------
   10369/    883A :                     ; Variables for	object $1C are stored in an array
   10370/    883A :                     ; ---------------------------------------------------------------------------
   10371/    883A : 0000 8862           Obj1C_Var:	dc.l Map_obj1C		; mappings address
   10372/    883E : 44D8                		dc.w $44D8		; VRAM setting
   10373/    8840 : 0008 0200           		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
   10374/    8844 : 0000 8862           		dc.l Map_obj1C
   10375/    8848 : 44D8                		dc.w $44D8
   10376/    884A : 0008 0200           		dc.b 0,	8, 2, 0
   10377/    884E : 0000 8862           		dc.l Map_obj1C
   10378/    8852 : 44D8                		dc.w $44D8
   10379/    8854 : 0008 0200           		dc.b 0,	8, 2, 0
   10380/    8858 : 0000 7940           		dc.l Map_obj11
   10381/    885C : 438E                		dc.w $438E
   10382/    885E : 0110 0100           		dc.b 1,	$10, 1,	0
   10383/    8862 :                     ; ---------------------------------------------------------------------------
   10384/    8862 :                     ; Sprite mappings - SLZ	lava thrower
   10385/    8862 :                     ; ---------------------------------------------------------------------------
   10386/    8862 :                     Map_obj1C:
   10387/    8862 :                     		include	"_maps/obj1C.asm"
(1)    1/    8862 :                     ; ---------------------------------------------------------------------------
(1)    2/    8862 :                     ; Sprite mappings - SLZ	lava thrower
(1)    3/    8862 :                     ; ---------------------------------------------------------------------------
(1)    4/    8862 : 0002                		dc.w byte_8858-Map_obj1C
(1)    5/    8864 : 01                  byte_8858:	dc.b 1
(1)    6/    8865 : F007 0000 F8        		dc.b $F0, 7, 0,	0, $F8
(1)    7/    886A : (MACRO)             		align 2
(1)    7/    886A :  (MACRO-2)                  cnop 0,2
(1)    7/    886A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   10388/    886A :                     
   10389/    886A :                     ; ===========================================================================
   10390/    886A :                     ; ---------------------------------------------------------------------------
   10391/    886A :                     ; Object 1D - switch that activates when Sonic touches it
   10392/    886A :                     ; (this	is not used anywhere in	the game)
   10393/    886A :                     ; ---------------------------------------------------------------------------
   10394/    886A :                     
   10395/    886A :                     Obj1D:					; XREF: Obj_Index
   10396/    886A : 7000                		moveq	#0,d0
   10397/    886C : 1028 0024           		move.b	$24(a0),d0
   10398/    8870 : 323B 0006           		move.w	Obj1D_Index(pc,d0.w),d1
   10399/    8874 : 4EFB 1002           		jmp	Obj1D_Index(pc,d1.w)
   10400/    8878 :                     ; ===========================================================================
   10401/    8878 : 0006                Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
   10402/    887A : 0030                		dc.w Obj1D_Action-Obj1D_Index
   10403/    887C : 006E                		dc.w Obj1D_Delete-Obj1D_Index
   10404/    887E :                     ; ===========================================================================
   10405/    887E :                     
   10406/    887E :                     Obj1D_Main:				; XREF: Obj1D_Index
   10407/    887E : 5428 0024           		addq.b	#2,$24(a0)
   10408/    8882 : 217C 0000 8928 0004 		move.l	#Map_obj1D,4(a0)
   10409/    888A : 317C 4000 0002      		move.w	#$4000,2(a0)
   10410/    8890 : 117C 0004 0001      		move.b	#4,1(a0)
   10411/    8896 : 3168 000C 0030      		move.w	$C(a0),$30(a0)	; save position	on y-axis
   10412/    889C : 117C 0010 0019      		move.b	#$10,$19(a0)
   10413/    88A2 : 117C 0005 0018      		move.b	#5,$18(a0)
   10414/    88A8 :                     
   10415/    88A8 :                     Obj1D_Action:				; XREF: Obj1D_Index
   10416/    88A8 : 3168 0030 000C      		move.w	$30(a0),$C(a0)	; restore position on y-axis
   10417/    88AE : 323C 0010           		move.w	#$10,d1
   10418/    88B2 : 6100 0038           		bsr.w	Obj1D_ChkTouch
   10419/    88B6 : 670A                		beq.s	Obj1D_ChkDel
   10420/    88B8 : 5468 000C           		addq.w	#2,$C(a0)	; move object 2	pixels
   10421/    88BC : 7001                		moveq	#1,d0
   10422/    88BE : 31C0 F7E0           		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
   10423/    88C2 :                     
   10424/    88C2 :                     Obj1D_ChkDel:
   10425/    88C2 : 6100 4E4A           		bsr.w	DisplaySprite
   10426/    88C6 : 3028 0008           		move.w	8(a0),d0
   10427/    88CA : 0240 FF80           		andi.w	#$FF80,d0
   10428/    88CE : 3238 F700           		move.w	($FFFFF700).w,d1
   10429/    88D2 : 0441 0080           		subi.w	#$80,d1
   10430/    88D6 : 0241 FF80           		andi.w	#$FF80,d1
   10431/    88DA : 9041                		sub.w	d1,d0
   10432/    88DC : 0C40 0280           		cmpi.w	#$280,d0
   10433/    88E0 : 6200 0004           		bhi.w	Obj1D_Delete
   10434/    88E4 : 4E75                		rts	
   10435/    88E6 :                     ; ===========================================================================
   10436/    88E6 :                     
   10437/    88E6 :                     Obj1D_Delete:				; XREF: Obj1D_Index
   10438/    88E6 : 6100 4E62           		bsr.w	DeleteObject
   10439/    88EA : 4E75                		rts	
   10440/    88EC :                     ; ---------------------------------------------------------------------------
   10441/    88EC :                     ; Subroutine to	check if Sonic touches the object
   10442/    88EC :                     ; ---------------------------------------------------------------------------
   10443/    88EC :                     
   10444/    88EC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10445/    88EC :                     
   10446/    88EC :                     
   10447/    88EC :                     Obj1D_ChkTouch:				; XREF: Obj1D_Action
   10448/    88EC : 43F8 D000           		lea	($FFFFD000).w,a1
   10449/    88F0 : 3029 0008           		move.w	8(a1),d0
   10450/    88F4 : 9068 0008           		sub.w	8(a0),d0
   10451/    88F8 : D041                		add.w	d1,d0
   10452/    88FA : 6B28                		bmi.s	loc_8918
   10453/    88FC : D241                		add.w	d1,d1
   10454/    88FE : B041                		cmp.w	d1,d0
   10455/    8900 : 6422                		bcc.s	loc_8918
   10456/    8902 : 3429 000C           		move.w	$C(a1),d2
   10457/    8906 : 1229 0016           		move.b	$16(a1),d1
   10458/    890A : 4881                		ext.w	d1
   10459/    890C : D242                		add.w	d2,d1
   10460/    890E : 3028 000C           		move.w	$C(a0),d0
   10461/    8912 : 0440 0010           		subi.w	#$10,d0
   10462/    8916 : 9041                		sub.w	d1,d0
   10463/    8918 : 620A                		bhi.s	loc_8918
   10464/    891A : 0C40 FFF0           		cmpi.w	#-$10,d0
   10465/    891E : 6504                		bcs.s	loc_8918
   10466/    8920 : 70FF                		moveq	#-1,d0
   10467/    8922 : 4E75                		rts	
   10468/    8924 :                     ; ===========================================================================
   10469/    8924 :                     
   10470/    8924 :                     loc_8918:
   10471/    8924 : 7000                		moveq	#0,d0
   10472/    8926 : 4E75                		rts	
   10473/    8928 :                     ; End of function Obj1D_ChkTouch
   10474/    8928 :                     
   10475/    8928 :                     ; ===========================================================================
   10476/    8928 :                     ; ---------------------------------------------------------------------------
   10477/    8928 :                     ; Sprite mappings - object 1D
   10478/    8928 :                     ; ---------------------------------------------------------------------------
   10479/    8928 :                     Map_obj1D:
   10480/    8928 :                     		include	"_maps/obj1D.asm"
(1)    1/    8928 :                     ; ---------------------------------------------------------------------------
(1)    2/    8928 :                     ; Sprite mappings - object 1D
(1)    3/    8928 :                     ; ---------------------------------------------------------------------------
(1)    4/    8928 : 0002                		dc.w byte_891E-Map_obj1D
(1)    5/    892A : 04                  byte_891E:	dc.b 4
(1)    6/    892B : E807 0054 F0        		dc.b $E8, 7, 0,	$54, $F0
(1)    7/    8930 : 0805 005C F0        		dc.b 8,	5, 0, $5C, $F0
(1)    8/    8935 : E807 0054 00        		dc.b $E8, 7, 0,	$54, 0
(1)    9/    893A : 0805 005C 00        		dc.b 8,	5, 0, $5C, 0
(1)   10/    893F : (MACRO)             		align 2
(1)   10/    893F :  (MACRO-2)                  cnop 0,2
(1)   10/    893F :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   10/    893F : =$9                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   10/    8940 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   10481/    8940 :                     
   10482/    8940 :                     ; ===========================================================================
   10483/    8940 :                     ; ---------------------------------------------------------------------------
   10484/    8940 :                     ; Object 2A - doors (SBZ)
   10485/    8940 :                     ; ---------------------------------------------------------------------------
   10486/    8940 :                     
   10487/    8940 :                     Obj2A:					; XREF: Obj_Index
   10488/    8940 : 7000                		moveq	#0,d0
   10489/    8942 : 1028 0024           		move.b	$24(a0),d0
   10490/    8946 : 323B 0006           		move.w	Obj2A_Index(pc,d0.w),d1
   10491/    894A : 4EFB 1002           		jmp	Obj2A_Index(pc,d1.w)
   10492/    894E :                     ; ===========================================================================
   10493/    894E : 0004                Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
   10494/    8950 : 0028                		dc.w Obj2A_OpenShut-Obj2A_Index
   10495/    8952 :                     ; ===========================================================================
   10496/    8952 :                     
   10497/    8952 :                     Obj2A_Main:				; XREF: Obj2A_Index
   10498/    8952 : 5428 0024           		addq.b	#2,$24(a0)
   10499/    8956 : 217C 0000 89F8 0004 		move.l	#Map_obj2A,4(a0)
   10500/    895E : 317C 42E8 0002      		move.w	#$42E8,2(a0)
   10501/    8964 : 0028 0004 0001      		ori.b	#4,1(a0)
   10502/    896A : 117C 0008 0019      		move.b	#8,$19(a0)
   10503/    8970 : 117C 0004 0018      		move.b	#4,$18(a0)
   10504/    8976 :                     
   10505/    8976 :                     Obj2A_OpenShut:				; XREF: Obj2A_Index
   10506/    8976 : 323C 0040           		move.w	#$40,d1
   10507/    897A : 4228 001C           		clr.b	$1C(a0)		; use "closing"	animation
   10508/    897E : 3038 D008           		move.w	($FFFFD008).w,d0
   10509/    8982 : D041                		add.w	d1,d0
   10510/    8984 : B068 0008           		cmp.w	8(a0),d0
   10511/    8988 : 652A                		bcs.s	Obj2A_Animate
   10512/    898A : 9041                		sub.w	d1,d0
   10513/    898C : 9041                		sub.w	d1,d0
   10514/    898E : B068 0008           		cmp.w	8(a0),d0
   10515/    8992 : 6420                		bcc.s	Obj2A_Animate
   10516/    8994 : D041                		add.w	d1,d0
   10517/    8996 : B068 0008           		cmp.w	8(a0),d0
   10518/    899A : 640A                		bcc.s	loc_899A
   10519/    899C : 0828 0000 0022      		btst	#0,$22(a0)
   10520/    89A2 : 6610                		bne.s	Obj2A_Animate
   10521/    89A4 : 6008                		bra.s	Obj2A_Open
   10522/    89A6 :                     ; ===========================================================================
   10523/    89A6 :                     
   10524/    89A6 :                     loc_899A:				; XREF: Obj2A_OpenShut
   10525/    89A6 : 0828 0000 0022      		btst	#0,$22(a0)
   10526/    89AC : 6706                		beq.s	Obj2A_Animate
   10527/    89AE :                     
   10528/    89AE :                     Obj2A_Open:				; XREF: Obj2A_OpenShut
   10529/    89AE : 117C 0001 001C      		move.b	#1,$1C(a0)	; use "opening"	animation
   10530/    89B4 :                     
   10531/    89B4 :                     Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
   10532/    89B4 : 43F9 0000 89DC      		lea	(Ani_obj2A).l,a1
   10533/    89BA : 6100 1D78           		bsr.w	AnimateSprite
   10534/    89BE : 4A28 001A           		tst.b	$1A(a0)		; is the door open?
   10535/    89C2 : 6614                		bne.s	Obj2A_MarkAsUsed ; if yes, branch
   10536/    89C4 : 323C 0011           		move.w	#$11,d1
   10537/    89C8 : 343C 0020           		move.w	#$20,d2
   10538/    89CC : 3602                		move.w	d2,d3
   10539/    89CE : 5243                		addq.w	#1,d3
   10540/    89D0 : 3828 0008           		move.w	8(a0),d4
   10541/    89D4 : 6100 7110           		bsr.w	SolidObject
   10542/    89D8 :                     
   10543/    89D8 :                     Obj2A_MarkAsUsed:
   10544/    89D8 : 6000 6DE2           		bra.w	MarkObjGone
   10545/    89DC :                     ; ===========================================================================
   10546/    89DC :                     Ani_obj2A:
   10547/    89DC :                     		include	"_anim/obj2A.asm"
(1)    1/    89DC :                     ; ---------------------------------------------------------------------------
(1)    2/    89DC :                     ; Animation script - doors (SBZ)
(1)    3/    89DC :                     ; ---------------------------------------------------------------------------
(1)    4/    89DC : 0004                		dc.w Ani_obj2A_Shut-Ani_obj2A
(1)    5/    89DE : 0010                		dc.w Ani_obj2A_Open-Ani_obj2A
(1)    6/    89E0 : 0008 0706 0504 0302 Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
                    0100 FE01           
(1)    7/    89EC : 0000 0102 0304 0506 Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
                    0708 FE01           
(1)    8/    89F8 : (MACRO)             		align 2
(1)    8/    89F8 :  (MACRO-2)                  cnop 0,2
(1)    8/    89F8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   10548/    89F8 :                     
   10549/    89F8 :                     ; ---------------------------------------------------------------------------
   10550/    89F8 :                     ; Sprite mappings - doors (SBZ)
   10551/    89F8 :                     ; ---------------------------------------------------------------------------
   10552/    89F8 :                     Map_obj2A:
   10553/    89F8 :                     		include	"_maps/obj2A.asm"
(1)    1/    89F8 :                     ; ---------------------------------------------------------------------------
(1)    2/    89F8 :                     ; Sprite mappings - doors (SBZ)
(1)    3/    89F8 :                     ; ---------------------------------------------------------------------------
(1)    4/    89F8 : 0012 001D           		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
(1)    5/    89FC : 0028 0033           		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
(1)    6/    8A00 : 003E 0049           		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
(1)    7/    8A04 : 0054 005F           		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
(1)    8/    8A08 : 006A                		dc.w byte_8A56-Map_obj2A
(1)    9/    8A0A : 02                  byte_89FE:	dc.b 2
(1)   10/    8A0B : E007 0800 F8        		dc.b $E0, 7, 8,	0, $F8	; door closed
(1)   11/    8A10 : 0007 0800 F8        		dc.b 0,	7, 8, 0, $F8
(1)   12/    8A15 : 02                  byte_8A09:	dc.b 2
(1)   13/    8A16 : DC07 0800 F8        		dc.b $DC, 7, 8,	0, $F8
(1)   14/    8A1B : 0407 0800 F8        		dc.b 4,	7, 8, 0, $F8
(1)   15/    8A20 : 02                  byte_8A14:	dc.b 2
(1)   16/    8A21 : D807 0800 F8        		dc.b $D8, 7, 8,	0, $F8
(1)   17/    8A26 : 0807 0800 F8        		dc.b 8,	7, 8, 0, $F8
(1)   18/    8A2B : 02                  byte_8A1F:	dc.b 2
(1)   19/    8A2C : D407 0800 F8        		dc.b $D4, 7, 8,	0, $F8
(1)   20/    8A31 : 0C07 0800 F8        		dc.b $C, 7, 8, 0, $F8
(1)   21/    8A36 : 02                  byte_8A2A:	dc.b 2
(1)   22/    8A37 : D007 0800 F8        		dc.b $D0, 7, 8,	0, $F8
(1)   23/    8A3C : 1007 0800 F8        		dc.b $10, 7, 8,	0, $F8
(1)   24/    8A41 : 02                  byte_8A35:	dc.b 2
(1)   25/    8A42 : CC07 0800 F8        		dc.b $CC, 7, 8,	0, $F8
(1)   26/    8A47 : 1407 0800 F8        		dc.b $14, 7, 8,	0, $F8
(1)   27/    8A4C : 02                  byte_8A40:	dc.b 2
(1)   28/    8A4D : C807 0800 F8        		dc.b $C8, 7, 8,	0, $F8
(1)   29/    8A52 : 1807 0800 F8        		dc.b $18, 7, 8,	0, $F8
(1)   30/    8A57 : 02                  byte_8A4B:	dc.b 2
(1)   31/    8A58 : C407 0800 F8        		dc.b $C4, 7, 8,	0, $F8
(1)   32/    8A5D : 1C07 0800 F8        		dc.b $1C, 7, 8,	0, $F8
(1)   33/    8A62 : 02                  byte_8A56:	dc.b 2
(1)   34/    8A63 : C007 0800 F8        		dc.b $C0, 7, 8,	0, $F8	; door fully open
(1)   35/    8A68 : 2007 0800 F8        		dc.b $20, 7, 8,	0, $F8
(1)   36/    8A6D : (MACRO)             		align 2
(1)   36/    8A6D :  (MACRO-2)                  cnop 0,2
(1)   36/    8A6D :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   36/    8A6D : =$A                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   36/    8A6E :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   10554/    8A6E :                     
   10555/    8A6E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10556/    8A6E :                     
   10557/    8A6E :                     
   10558/    8A6E :                     Obj44_SolidWall:			; XREF: Obj44_Solid
   10559/    8A6E : 6100 0076           		bsr.w	Obj44_SolidWall2
   10560/    8A72 : 6740                		beq.s	loc_8AA8
   10561/    8A74 : 6B00 005A           		bmi.w	loc_8AC4
   10562/    8A78 : 4A40                		tst.w	d0
   10563/    8A7A : 6700 0022           		beq.w	loc_8A92
   10564/    8A7E : 6B08                		bmi.s	loc_8A7C
   10565/    8A80 : 4A69 0010           		tst.w	$10(a1)
   10566/    8A84 : 6B18                		bmi.s	loc_8A92
   10567/    8A86 : 6006                		bra.s	loc_8A82
   10568/    8A88 :                     ; ===========================================================================
   10569/    8A88 :                     
   10570/    8A88 :                     loc_8A7C:
   10571/    8A88 : 4A69 0010           		tst.w	$10(a1)
   10572/    8A8C : 6A10                		bpl.s	loc_8A92
   10573/    8A8E :                     
   10574/    8A8E :                     loc_8A82:
   10575/    8A8E : 9169 0008           		sub.w	d0,8(a1)
   10576/    8A92 : 337C 0000 0014      		move.w	#0,$14(a1)
   10577/    8A98 : 337C 0000 0010      		move.w	#0,$10(a1)
   10578/    8A9E :                     
   10579/    8A9E :                     loc_8A92:
   10580/    8A9E : 0829 0001 0022      		btst	#1,$22(a1)
   10581/    8AA4 : 661C                		bne.s	loc_8AB6
   10582/    8AA6 : 08E9 0005 0022      		bset	#5,$22(a1)
   10583/    8AAC : 08E8 0005 0022      		bset	#5,$22(a0)
   10584/    8AB2 : 4E75                		rts	
   10585/    8AB4 :                     ; ===========================================================================
   10586/    8AB4 :                     
   10587/    8AB4 :                     loc_8AA8:
   10588/    8AB4 : 0828 0005 0022      		btst	#5,$22(a0)
   10589/    8ABA : 6712                		beq.s	locret_8AC2
   10590/    8ABC : 337C 0001 001C      		move.w	#1,$1C(a1)
   10591/    8AC2 :                     
   10592/    8AC2 :                     loc_8AB6:
   10593/    8AC2 : 08A8 0005 0022      		bclr	#5,$22(a0)
   10594/    8AC8 : 08A9 0005 0022      		bclr	#5,$22(a1)
   10595/    8ACE :                     
   10596/    8ACE :                     locret_8AC2:
   10597/    8ACE : 4E75                		rts	
   10598/    8AD0 :                     ; ===========================================================================
   10599/    8AD0 :                     
   10600/    8AD0 :                     loc_8AC4:
   10601/    8AD0 : 4A69 0012           		tst.w	$12(a1)
   10602/    8AD4 : 6A0E                		bpl.s	locret_8AD8
   10603/    8AD6 : 4A43                		tst.w	d3
   10604/    8AD8 : 6A0A                		bpl.s	locret_8AD8
   10605/    8ADA : 9769 000C           		sub.w	d3,$C(a1)
   10606/    8ADE : 337C 0000 0012      		move.w	#0,$12(a1)
   10607/    8AE4 :                     
   10608/    8AE4 :                     locret_8AD8:
   10609/    8AE4 : 4E75                		rts	
   10610/    8AE6 :                     ; End of function Obj44_SolidWall
   10611/    8AE6 :                     
   10612/    8AE6 :                     
   10613/    8AE6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10614/    8AE6 :                     
   10615/    8AE6 :                     
   10616/    8AE6 :                     Obj44_SolidWall2:			; XREF: Obj44_SolidWall
   10617/    8AE6 : 43F8 D000           		lea	($FFFFD000).w,a1
   10618/    8AEA : 3029 0008           		move.w	8(a1),d0
   10619/    8AEE : 9068 0008           		sub.w	8(a0),d0
   10620/    8AF2 : D041                		add.w	d1,d0
   10621/    8AF4 : 6B5E                		bmi.s	loc_8B48
   10622/    8AF6 : 3601                		move.w	d1,d3
   10623/    8AF8 : D643                		add.w	d3,d3
   10624/    8AFA : B043                		cmp.w	d3,d0
   10625/    8AFC : 6256                		bhi.s	loc_8B48
   10626/    8AFE : 1629 0016           		move.b	$16(a1),d3
   10627/    8B02 : 4883                		ext.w	d3
   10628/    8B04 : D443                		add.w	d3,d2
   10629/    8B06 : 3629 000C           		move.w	$C(a1),d3
   10630/    8B0A : 9668 000C           		sub.w	$C(a0),d3
   10631/    8B0E : D642                		add.w	d2,d3
   10632/    8B10 : 6B42                		bmi.s	loc_8B48
   10633/    8B12 : 3802                		move.w	d2,d4
   10634/    8B14 : D844                		add.w	d4,d4
   10635/    8B16 : B644                		cmp.w	d4,d3
   10636/    8B18 : 643A                		bcc.s	loc_8B48
   10637/    8B1A : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   10638/    8B1E : 6B34                		bmi.s	loc_8B48
   10639/    8B20 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
   10640/    8B26 : 642C                		bcc.s	loc_8B48
   10641/    8B28 : 4A78 FE08           		tst.w	($FFFFFE08).w
   10642/    8B2C : 6626                		bne.s	loc_8B48
   10643/    8B2E : 3A00                		move.w	d0,d5
   10644/    8B30 : B240                		cmp.w	d0,d1
   10645/    8B32 : 6408                		bcc.s	loc_8B30
   10646/    8B34 : D241                		add.w	d1,d1
   10647/    8B36 : 9041                		sub.w	d1,d0
   10648/    8B38 : 3A00                		move.w	d0,d5
   10649/    8B3A : 4445                		neg.w	d5
   10650/    8B3C :                     
   10651/    8B3C :                     loc_8B30:
   10652/    8B3C : 3203                		move.w	d3,d1
   10653/    8B3E : B443                		cmp.w	d3,d2
   10654/    8B40 : 6406                		bcc.s	loc_8B3C
   10655/    8B42 : 9644                		sub.w	d4,d3
   10656/    8B44 : 3203                		move.w	d3,d1
   10657/    8B46 : 4441                		neg.w	d1
   10658/    8B48 :                     
   10659/    8B48 :                     loc_8B3C:
   10660/    8B48 : BA41                		cmp.w	d1,d5
   10661/    8B4A : 6204                		bhi.s	loc_8B44
   10662/    8B4C : 7801                		moveq	#1,d4
   10663/    8B4E : 4E75                		rts	
   10664/    8B50 :                     ; ===========================================================================
   10665/    8B50 :                     
   10666/    8B50 :                     loc_8B44:
   10667/    8B50 : 78FF                		moveq	#-1,d4
   10668/    8B52 : 4E75                		rts	
   10669/    8B54 :                     ; ===========================================================================
   10670/    8B54 :                     
   10671/    8B54 :                     loc_8B48:
   10672/    8B54 : 7800                		moveq	#0,d4
   10673/    8B56 : 4E75                		rts	
   10674/    8B58 :                     ; End of function Obj44_SolidWall2
   10675/    8B58 :                     
   10676/    8B58 :                     ; ===========================================================================
   10677/    8B58 :                     ; ---------------------------------------------------------------------------
   10678/    8B58 :                     ; Object 1E - Ball Hog enemy (SBZ)
   10679/    8B58 :                     ; ---------------------------------------------------------------------------
   10680/    8B58 :                     
   10681/    8B58 :                     Obj1E:					; XREF: Obj_Index
   10682/    8B58 : 7000                		moveq	#0,d0
   10683/    8B5A : 1028 0024           		move.b	$24(a0),d0
   10684/    8B5E : 323B 0006           		move.w	Obj1E_Index(pc,d0.w),d1
   10685/    8B62 : 4EFB 1002           		jmp	Obj1E_Index(pc,d1.w)
   10686/    8B66 :                     ; ===========================================================================
   10687/    8B66 : 0004                Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
   10688/    8B68 : 0054                		dc.w Obj1E_Action-Obj1E_Index
   10689/    8B6A :                     ; ===========================================================================
   10690/    8B6A :                     
   10691/    8B6A :                     Obj1E_Main:				; XREF: Obj1E_Index
   10692/    8B6A : 117C 0013 0016      		move.b	#$13,$16(a0)
   10693/    8B70 : 117C 0008 0017      		move.b	#8,$17(a0)
   10694/    8B76 : 217C 0000 8E6E 0004 		move.l	#Map_obj1E,4(a0)
   10695/    8B7E : 317C 2302 0002      		move.w	#$2302,2(a0)
   10696/    8B84 : 117C 0004 0001      		move.b	#4,1(a0)
   10697/    8B8A : 117C 0004 0018      		move.b	#4,$18(a0)
   10698/    8B90 : 117C 0005 0020      		move.b	#5,$20(a0)
   10699/    8B96 : 117C 000C 0019      		move.b	#$C,$19(a0)
   10700/    8B9C : 6100 4B1E           		bsr.w	ObjectFall
   10701/    8BA0 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   10702/    8BA6 : 4A41                		tst.w	d1
   10703/    8BA8 : 6A0E                		bpl.s	locret_8BAC
   10704/    8BAA : D368 000C           		add.w	d1,$C(a0)
   10705/    8BAE : 317C 0000 0012      		move.w	#0,$12(a0)
   10706/    8BB4 : 5428 0024           		addq.b	#2,$24(a0)
   10707/    8BB8 :                     
   10708/    8BB8 :                     locret_8BAC:
   10709/    8BB8 : 4E75                		rts	
   10710/    8BBA :                     ; ===========================================================================
   10711/    8BBA :                     
   10712/    8BBA :                     Obj1E_Action:				; XREF: Obj1E_Index
   10713/    8BBA : 43F9 0000 8E54      		lea	(Ani_obj1E).l,a1
   10714/    8BC0 : 6100 1B72           		bsr.w	AnimateSprite
   10715/    8BC4 : 0C28 0001 001A      		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
   10716/    8BCA : 6608                		bne.s	Obj1E_SetBall	; if not, branch
   10717/    8BCC : 4A28 0032           		tst.b	$32(a0)		; is it	set to launch cannonball?
   10718/    8BD0 : 670A                		beq.s	Obj1E_MakeBall	; if yes, branch
   10719/    8BD2 : 6004                		bra.s	Obj1E_MarkAsGone
   10720/    8BD4 :                     ; ===========================================================================
   10721/    8BD4 :                     
   10722/    8BD4 :                     Obj1E_SetBall:				; XREF: Obj1E_Action
   10723/    8BD4 : 4228 0032           		clr.b	$32(a0)		; set to launch	cannonball
   10724/    8BD8 :                     
   10725/    8BD8 :                     Obj1E_MarkAsGone:			; XREF: Obj1E_Action
   10726/    8BD8 : 6000 6BE2           		bra.w	MarkObjGone
   10727/    8BDC :                     ; ===========================================================================
   10728/    8BDC :                     
   10729/    8BDC :                     Obj1E_MakeBall:				; XREF: Obj1E_Action
   10730/    8BDC : 117C 0001 0032      		move.b	#1,$32(a0)
   10731/    8BE2 : 6100 4FB2           		bsr.w	SingleObjLoad
   10732/    8BE6 : 663E                		bne.s	loc_8C1A
   10733/    8BE8 : (MACRO)             		_move.b	#$20,0(a1)	; load cannonball object ($20)
   10733/    8BE8 :  (MACRO-2)                          insn2op move.b, #$20,0(a1)
   10733/    8BE8 : 137C 0020 0001                              !move.b   #$20,1+0(a1)
   10733/    8BED :                                             !org    *-1
   10733/    8BED : 00                                          !dc.b   0
   10734/    8BEE : 3368 0008 0008      		move.w	8(a0),8(a1)
   10735/    8BF4 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   10736/    8BFA : 337C FF00 0010      		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
   10737/    8C00 : 337C 0000 0012      		move.w	#0,$12(a1)
   10738/    8C06 : 70FC                		moveq	#-4,d0
   10739/    8C08 : 0828 0000 0022      		btst	#0,$22(a0)	; is Ball Hog facing right?
   10740/    8C0E : 6706                		beq.s	loc_8C0A	; if not, branch
   10741/    8C10 : 4440                		neg.w	d0
   10742/    8C12 : 4469 0010           		neg.w	$10(a1)		; cannonball bounces to	the right
   10743/    8C16 :                     
   10744/    8C16 :                     loc_8C0A:
   10745/    8C16 : D169 0008           		add.w	d0,8(a1)
   10746/    8C1A : 0669 000C 000C      		addi.w	#$C,$C(a1)
   10747/    8C20 : 1368 0028 0028      		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
   10748/    8C26 :                     
   10749/    8C26 :                     loc_8C1A:
   10750/    8C26 : 60B0                		bra.s	Obj1E_MarkAsGone
   10751/    8C28 :                     ; ===========================================================================
   10752/    8C28 :                     ; ---------------------------------------------------------------------------
   10753/    8C28 :                     ; Object 20 - cannonball that Ball Hog throws (SBZ)
   10754/    8C28 :                     ; ---------------------------------------------------------------------------
   10755/    8C28 :                     
   10756/    8C28 :                     Obj20:					; XREF: Obj_Index
   10757/    8C28 : 7000                		moveq	#0,d0
   10758/    8C2A : 1028 0024           		move.b	$24(a0),d0
   10759/    8C2E : 323B 0006           		move.w	Obj20_Index(pc,d0.w),d1
   10760/    8C32 : 4EFB 1002           		jmp	Obj20_Index(pc,d1.w)
   10761/    8C36 :                     ; ===========================================================================
   10762/    8C36 : 0004                Obj20_Index:	dc.w Obj20_Main-Obj20_Index
   10763/    8C38 : 0048                		dc.w Obj20_Bounce-Obj20_Index
   10764/    8C3A :                     ; ===========================================================================
   10765/    8C3A :                     
   10766/    8C3A :                     Obj20_Main:				; XREF: Obj20_Index
   10767/    8C3A : 5428 0024           		addq.b	#2,$24(a0)
   10768/    8C3E : 117C 0007 0016      		move.b	#7,$16(a0)
   10769/    8C44 : 217C 0000 8E6E 0004 		move.l	#Map_obj1E,4(a0)
   10770/    8C4C : 317C 2302 0002      		move.w	#$2302,2(a0)
   10771/    8C52 : 117C 0004 0001      		move.b	#4,1(a0)
   10772/    8C58 : 117C 0003 0018      		move.b	#3,$18(a0)
   10773/    8C5E : 117C 0087 0020      		move.b	#$87,$20(a0)
   10774/    8C64 : 117C 0008 0019      		move.b	#8,$19(a0)
   10775/    8C6A : 7000                		moveq	#0,d0
   10776/    8C6C : 1028 0028           		move.b	$28(a0),d0	; move object type to d0
   10777/    8C70 : C0FC 003C           		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
   10778/    8C74 : 3140 0030           		move.w	d0,$30(a0)	; set explosion	time
   10779/    8C78 : 117C 0004 001A      		move.b	#4,$1A(a0)
   10780/    8C7E :                     
   10781/    8C7E :                     Obj20_Bounce:				; XREF: Obj20_Index
   10782/    8C7E : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   10783/    8C84 : 4A68 0012           		tst.w	$12(a0)
   10784/    8C88 : 6B30                		bmi.s	Obj20_ChkExplode
   10785/    8C8A : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   10786/    8C90 : 4A41                		tst.w	d1
   10787/    8C92 : 6A26                		bpl.s	Obj20_ChkExplode
   10788/    8C94 : D368 000C           		add.w	d1,$C(a0)
   10789/    8C98 : 317C FD00 0012      		move.w	#-$300,$12(a0)
   10790/    8C9E : 4A03                		tst.b	d3
   10791/    8CA0 : 6718                		beq.s	Obj20_ChkExplode
   10792/    8CA2 : 6B0C                		bmi.s	loc_8CA4
   10793/    8CA4 : 4A68 0010           		tst.w	$10(a0)
   10794/    8CA8 : 6A10                		bpl.s	Obj20_ChkExplode
   10795/    8CAA : 4468 0010           		neg.w	$10(a0)
   10796/    8CAE : 600A                		bra.s	Obj20_ChkExplode
   10797/    8CB0 :                     ; ===========================================================================
   10798/    8CB0 :                     
   10799/    8CB0 :                     loc_8CA4:				; XREF: Obj20_Bounce
   10800/    8CB0 : 4A68 0010           		tst.w	$10(a0)
   10801/    8CB4 : 6B04                		bmi.s	Obj20_ChkExplode
   10802/    8CB6 : 4468 0010           		neg.w	$10(a0)
   10803/    8CBA :                     
   10804/    8CBA :                     Obj20_ChkExplode:			; XREF: Obj20_Bounce
   10805/    8CBA : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from explosion time
   10806/    8CBE : 6A16                		bpl.s	Obj20_Animate	; if time is > 0, branch
   10807/    8CC0 : (MACRO)             		_move.b	#$24,0(a0)
   10807/    8CC0 :  (MACRO-2)                          insn2op move.b, #$24,0(a0)
   10807/    8CC0 : 117C 0024 0001                              !move.b   #$24,1+0(a0)
   10807/    8CC5 :                                             !org    *-1
   10807/    8CC5 : 00                                          !dc.b   0
   10808/    8CC6 : (MACRO)             		_move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
   10808/    8CC6 :  (MACRO-2)                          insn2op move.b, #$3F,0(a0)
   10808/    8CC6 : 117C 003F 0001                              !move.b   #$3F,1+0(a0)
   10808/    8CCB :                                             !org    *-1
   10808/    8CCB : 00                                          !dc.b   0
   10809/    8CCC : 117C 0000 0024      		move.b	#0,$24(a0)	; reset	routine	counter
   10810/    8CD2 : 6000 012E           		bra.w	Obj3F		; jump to explosion code
   10811/    8CD6 :                     ; ===========================================================================
   10812/    8CD6 :                     
   10813/    8CD6 :                     Obj20_Animate:				; XREF: Obj20_ChkExplode
   10814/    8CD6 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   10815/    8CDA : 6A0C                		bpl.s	Obj20_Display
   10816/    8CDC : 117C 0005 001E      		move.b	#5,$1E(a0)	; set frame duration to	5 frames
   10817/    8CE2 : 0868 0000 001A      		bchg	#0,$1A(a0)	; change frame
   10818/    8CE8 :                     
   10819/    8CE8 :                     Obj20_Display:
   10820/    8CE8 : 6100 4A24           		bsr.w	DisplaySprite
   10821/    8CEC : 3038 F72E           		move.w	($FFFFF72E).w,d0
   10822/    8CF0 : 0640 00E0           		addi.w	#$E0,d0
   10823/    8CF4 : B068 000C           		cmp.w	$C(a0),d0	; has object fallen off	the level?
   10824/    8CF8 : 6500 4A50           		bcs.w	DeleteObject	; if yes, branch
   10825/    8CFC : 4E75                		rts	
   10826/    8CFE :                     ; ===========================================================================
   10827/    8CFE :                     ; ---------------------------------------------------------------------------
   10828/    8CFE :                     ; Object 24 - explosion	from a destroyed monitor
   10829/    8CFE :                     ; ---------------------------------------------------------------------------
   10830/    8CFE :                     
   10831/    8CFE :                     Obj24:					; XREF: Obj_Index
   10832/    8CFE : 7000                		moveq	#0,d0
   10833/    8D00 : 1028 0024           		move.b	$24(a0),d0
   10834/    8D04 : 323B 0006           		move.w	Obj24_Index(pc,d0.w),d1
   10835/    8D08 : 4EFB 1002           		jmp	Obj24_Index(pc,d1.w)
   10836/    8D0C :                     ; ===========================================================================
   10837/    8D0C : 0004                Obj24_Index:	dc.w Obj24_Main-Obj24_Index
   10838/    8D0E : 0044                		dc.w Obj24_Animate-Obj24_Index
   10839/    8D10 :                     ; ===========================================================================
   10840/    8D10 :                     
   10841/    8D10 :                     Obj24_Main:				; XREF: Obj24_Index
   10842/    8D10 : 5428 0024           		addq.b	#2,$24(a0)
   10843/    8D14 : 217C 0000 8EB2 0004 		move.l	#Map_obj24,4(a0)
   10844/    8D1C : 317C 041C 0002      		move.w	#$41C,2(a0)
   10845/    8D22 : 117C 0004 0001      		move.b	#4,1(a0)
   10846/    8D28 : 117C 0001 0018      		move.b	#1,$18(a0)
   10847/    8D2E : 117C 0000 0020      		move.b	#0,$20(a0)
   10848/    8D34 : 117C 000C 0019      		move.b	#$C,$19(a0)
   10849/    8D3A : 117C 0009 001E      		move.b	#9,$1E(a0)
   10850/    8D40 : 117C 0000 001A      		move.b	#0,$1A(a0)
   10851/    8D46 : 303C 00A5           		move.w	#$A5,d0
   10852/    8D4A : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play explosion sound
   10853/    8D50 :                     
   10854/    8D50 :                     Obj24_Animate:				; XREF: Obj24_Index
   10855/    8D50 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   10856/    8D54 : 6A14                		bpl.s	Obj24_Display
   10857/    8D56 : 117C 0009 001E      		move.b	#9,$1E(a0)	; set frame duration to	9 frames
   10858/    8D5C : 5228 001A           		addq.b	#1,$1A(a0)	; next frame
   10859/    8D60 : 0C28 0004 001A      		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
   10860/    8D66 : 6700 49E2           		beq.w	DeleteObject	; if yes, branch
   10861/    8D6A :                     
   10862/    8D6A :                     Obj24_Display:
   10863/    8D6A : 6000 49A2           		bra.w	DisplaySprite
   10864/    8D6E :                     ; ===========================================================================
   10865/    8D6E :                     ; ---------------------------------------------------------------------------
   10866/    8D6E :                     ; Object 27 - explosion	from a destroyed enemy
   10867/    8D6E :                     ; ---------------------------------------------------------------------------
   10868/    8D6E :                     
   10869/    8D6E :                     Obj27:					; XREF: Obj_Index
   10870/    8D6E : 7000                		moveq	#0,d0
   10871/    8D70 : 1028 0024           		move.b	$24(a0),d0
   10872/    8D74 : 323B 0006           		move.w	Obj27_Index(pc,d0.w),d1
   10873/    8D78 : 4EFB 1002           		jmp	Obj27_Index(pc,d1.w)
   10874/    8D7C :                     ; ===========================================================================
   10875/    8D7C : 0006                Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
   10876/    8D7E : 0028                		dc.w Obj27_Main-Obj27_Index
   10877/    8D80 : 0068                		dc.w Obj27_Animate-Obj27_Index
   10878/    8D82 :                     ; ===========================================================================
   10879/    8D82 :                     
   10880/    8D82 :                     Obj27_LoadAnimal:			; XREF: Obj27_Index
   10881/    8D82 : 5428 0024           		addq.b	#2,$24(a0)
   10882/    8D86 : 6100 4E0E           		bsr.w	SingleObjLoad
   10883/    8D8A : 6618                		bne.s	Obj27_Main
   10884/    8D8C : (MACRO)             		_move.b	#$28,0(a1)	; load animal object
   10884/    8D8C :  (MACRO-2)                          insn2op move.b, #$28,0(a1)
   10884/    8D8C : 137C 0028 0001                              !move.b   #$28,1+0(a1)
   10884/    8D91 :                                             !org    *-1
   10884/    8D91 : 00                                          !dc.b   0
   10885/    8D92 : 3368 0008 0008      		move.w	8(a0),8(a1)
   10886/    8D98 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   10887/    8D9E : 3368 003E 003E      		move.w	$3E(a0),$3E(a1)
   10888/    8DA4 :                     
   10889/    8DA4 :                     Obj27_Main:				; XREF: Obj27_Index
   10890/    8DA4 : 5428 0024           		addq.b	#2,$24(a0)
   10891/    8DA8 : 217C 0000 8ED2 0004 		move.l	#Map_obj27,4(a0)
   10892/    8DB0 : 317C 05A0 0002      		move.w	#$5A0,2(a0)
   10893/    8DB6 : 117C 0004 0001      		move.b	#4,1(a0)
   10894/    8DBC : 117C 0001 0018      		move.b	#1,$18(a0)
   10895/    8DC2 : 117C 0000 0020      		move.b	#0,$20(a0)
   10896/    8DC8 : 117C 000C 0019      		move.b	#$C,$19(a0)
   10897/    8DCE : 117C 0007 001E      		move.b	#7,$1E(a0)	; set frame duration to	7 frames
   10898/    8DD4 : 117C 0000 001A      		move.b	#0,$1A(a0)
   10899/    8DDA : 303C 00C1           		move.w	#$C1,d0
   10900/    8DDE : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play breaking enemy sound
   10901/    8DE4 :                     
   10902/    8DE4 :                     Obj27_Animate:				; XREF: Obj27_Index
   10903/    8DE4 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   10904/    8DE8 : 6A14                		bpl.s	Obj27_Display
   10905/    8DEA : 117C 0007 001E      		move.b	#7,$1E(a0)	; set frame duration to	7 frames
   10906/    8DF0 : 5228 001A           		addq.b	#1,$1A(a0)	; next frame
   10907/    8DF4 : 0C28 0005 001A      		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
   10908/    8DFA : 6700 494E           		beq.w	DeleteObject	; if yes, branch
   10909/    8DFE :                     
   10910/    8DFE :                     Obj27_Display:
   10911/    8DFE : 6000 490E           		bra.w	DisplaySprite
   10912/    8E02 :                     ; ===========================================================================
   10913/    8E02 :                     ; ---------------------------------------------------------------------------
   10914/    8E02 :                     ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
   10915/    8E02 :                     ; ---------------------------------------------------------------------------
   10916/    8E02 :                     
   10917/    8E02 :                     Obj3F:					; XREF: Obj_Index
   10918/    8E02 : 7000                		moveq	#0,d0
   10919/    8E04 : 1028 0024           		move.b	$24(a0),d0
   10920/    8E08 : 323B 0006           		move.w	Obj3F_Index(pc,d0.w),d1
   10921/    8E0C : 4EFB 1002           		jmp	Obj3F_Index(pc,d1.w)
   10922/    8E10 :                     ; ===========================================================================
   10923/    8E10 : 0004                Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
   10924/    8E12 : FFD4                		dc.w Obj27_Animate-Obj3F_Index
   10925/    8E14 :                     ; ===========================================================================
   10926/    8E14 :                     
   10927/    8E14 :                     Obj3F_Main:				; XREF: Obj3F_Index
   10928/    8E14 : 5428 0024           		addq.b	#2,$24(a0)
   10929/    8E18 : 217C 0000 8F18 0004 		move.l	#Map_obj3F,4(a0)
   10930/    8E20 : 317C 05A0 0002      		move.w	#$5A0,2(a0)
   10931/    8E26 : 117C 0004 0001      		move.b	#4,1(a0)
   10932/    8E2C : 117C 0001 0018      		move.b	#1,$18(a0)
   10933/    8E32 : 117C 0000 0020      		move.b	#0,$20(a0)
   10934/    8E38 : 117C 000C 0019      		move.b	#$C,$19(a0)
   10935/    8E3E : 117C 0007 001E      		move.b	#7,$1E(a0)
   10936/    8E44 : 117C 0000 001A      		move.b	#0,$1A(a0)
   10937/    8E4A : 303C 00C4           		move.w	#$C4,d0
   10938/    8E4E : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play exploding bomb sound
   10939/    8E54 :                     ; ===========================================================================
   10940/    8E54 :                     Ani_obj1E:
   10941/    8E54 :                     		include	"_anim/obj1E.asm"
(1)    1/    8E54 :                     ; ---------------------------------------------------------------------------
(1)    2/    8E54 :                     ; Animation script - doors (SBZ)
(1)    3/    8E54 :                     ; ---------------------------------------------------------------------------
(1)    4/    8E54 : 0002                		dc.w byte_8E4A-Ani_obj1E
(1)    5/    8E56 : 0900 0002 0203 0200 byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0
                    0002 0203 0200      
(1)    6/    8E64 : 0002 0203 0200 0001 		dc.b 0, 2, 2, 3, 2, 0, 0, 1, $FF
                    FF                  
(1)    7/    8E6D : (MACRO)             		align 2
(1)    7/    8E6D :  (MACRO-2)                  cnop 0,2
(1)    7/    8E6D :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)    7/    8E6D : =$B                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)    7/    8E6E :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   10942/    8E6E :                     
   10943/    8E6E :                     ; ---------------------------------------------------------------------------
   10944/    8E6E :                     ; Sprite mappings - Ball Hog enemy (SBZ)
   10945/    8E6E :                     ; ---------------------------------------------------------------------------
   10946/    8E6E :                     Map_obj1E:
   10947/    8E6E :                     		include	"_maps/obj1E.asm"
(1)    1/    8E6E :                     ; ---------------------------------------------------------------------------
(1)    2/    8E6E :                     ; Sprite mappings - Ball Hog enemy (SBZ)
(1)    3/    8E6E :                     ; ---------------------------------------------------------------------------
(1)    4/    8E6E : 000C 0017           		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
(1)    5/    8E72 : 0022 002D           		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
(1)    6/    8E76 : 0038 003E           		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
(1)    7/    8E7A : 02                  byte_8E6E:	dc.b 2
(1)    8/    8E7B : EF09 0000 F4        		dc.b $EF, 9, 0,	0, $F4
(1)    9/    8E80 : FF0A 0006 F4        		dc.b $FF, $A, 0, 6, $F4
(1)   10/    8E85 : 02                  byte_8E79:	dc.b 2
(1)   11/    8E86 : EF09 0000 F4        		dc.b $EF, 9, 0,	0, $F4
(1)   12/    8E8B : FF0A 000F F4        		dc.b $FF, $A, 0, $F, $F4
(1)   13/    8E90 : 02                  byte_8E84:	dc.b 2
(1)   14/    8E91 : F409 0000 F4        		dc.b $F4, 9, 0,	0, $F4
(1)   15/    8E96 : 0409 0018 F4        		dc.b 4,	9, 0, $18, $F4
(1)   16/    8E9B : 02                  byte_8E8F:	dc.b 2
(1)   17/    8E9C : E409 0000 F4        		dc.b $E4, 9, 0,	0, $F4
(1)   18/    8EA1 : F40A 001E F4        		dc.b $F4, $A, 0, $1E, $F4
(1)   19/    8EA6 : 01                  byte_8E9A:	dc.b 1
(1)   20/    8EA7 : F805 0027 F8        		dc.b $F8, 5, 0,	$27, $F8
(1)   21/    8EAC : 01                  byte_8EA0:	dc.b 1
(1)   22/    8EAD : F805 002B F8        		dc.b $F8, 5, 0,	$2B, $F8
(1)   23/    8EB2 : (MACRO)             		align 2
(1)   23/    8EB2 :  (MACRO-2)                  cnop 0,2
(1)   23/    8EB2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   10948/    8EB2 :                     
   10949/    8EB2 :                     ; ---------------------------------------------------------------------------
   10950/    8EB2 :                     ; Sprite mappings - explosion
   10951/    8EB2 :                     ; ---------------------------------------------------------------------------
   10952/    8EB2 :                     Map_obj24:
   10953/    8EB2 :                     		include	"_maps/obj24.asm"
(1)    1/    8EB2 :                     ; ---------------------------------------------------------------------------
(1)    2/    8EB2 :                     ; Sprite mappings - explosion
(1)    3/    8EB2 :                     ; ---------------------------------------------------------------------------
(1)    4/    8EB2 : 0008 000E           		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
(1)    5/    8EB6 : 0014 001A           		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
(1)    6/    8EBA : 01                  byte_8EAE:	dc.b 1
(1)    7/    8EBB : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/    8EC0 : 01                  byte_8EB4:	dc.b 1
(1)    9/    8EC1 : F40A 0009 F4        		dc.b $F4, $A, 0, 9, $F4
(1)   10/    8EC6 : 01                  byte_8EBA:	dc.b 1
(1)   11/    8EC7 : F40A 0012 F4        		dc.b $F4, $A, 0, $12, $F4
(1)   12/    8ECC : 01                  byte_8EC0:	dc.b 1
(1)   13/    8ECD : F40A 001B F4        		dc.b $F4, $A, 0, $1B, $F4
(1)   14/    8ED2 : (MACRO)             		align 2
(1)   14/    8ED2 :  (MACRO-2)                  cnop 0,2
(1)   14/    8ED2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   10954/    8ED2 :                     
   10955/    8ED2 :                     ; ---------------------------------------------------------------------------
   10956/    8ED2 :                     ; Sprite mappings - explosion
   10957/    8ED2 :                     ; ---------------------------------------------------------------------------
   10958/    8ED2 : 000A 0010           Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
   10959/    8ED6 : 0016 001C           		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
   10960/    8EDA : 0031                		dc.w byte_8EF7-Map_obj27
   10961/    8EDC : 01                  byte_8ED0:	dc.b 1
   10962/    8EDD : F809 0000 F4        		dc.b $F8, 9, 0,	0, $F4
   10963/    8EE2 : 01                  byte_8ED6:	dc.b 1
   10964/    8EE3 : F00F 0006 F0        		dc.b $F0, $F, 0, 6, $F0
   10965/    8EE8 : 01                  byte_8EDC:	dc.b 1
   10966/    8EE9 : F00F 0016 F0        		dc.b $F0, $F, 0, $16, $F0
   10967/    8EEE : 04                  byte_8EE2:	dc.b 4
   10968/    8EEF : EC0A 0026 EC        		dc.b $EC, $A, 0, $26, $EC
   10969/    8EF4 : EC05 002F 04        		dc.b $EC, 5, 0,	$2F, 4
   10970/    8EF9 : 0405 182F EC        		dc.b 4,	5, $18,	$2F, $EC
   10971/    8EFE : FC0A 1826 FC        		dc.b $FC, $A, $18, $26,	$FC
   10972/    8F03 : 04                  byte_8EF7:	dc.b 4
   10973/    8F04 : EC0A 0033 EC        		dc.b $EC, $A, 0, $33, $EC
   10974/    8F09 : EC05 003C 04        		dc.b $EC, 5, 0,	$3C, 4
   10975/    8F0E : 0405 183C EC        		dc.b 4,	5, $18,	$3C, $EC
   10976/    8F13 : FC0A 1833 FC        		dc.b $FC, $A, $18, $33,	$FC
   10977/    8F18 : (MACRO)             		align 2
   10977/    8F18 :  (MACRO-2)                  cnop 0,2
   10977/    8F18 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   10978/    8F18 :                     ; ---------------------------------------------------------------------------
   10979/    8F18 :                     ; Sprite mappings - explosion from when	a boss is destroyed
   10980/    8F18 :                     ; ---------------------------------------------------------------------------
   10981/    8F18 : FFC4                Map_obj3F:	dc.w byte_8ED0-Map_obj3F
   10982/    8F1A : 000A                		dc.w byte_8F16-Map_obj3F
   10983/    8F1C : 0010                		dc.w byte_8F1C-Map_obj3F
   10984/    8F1E : FFD6                		dc.w byte_8EE2-Map_obj3F
   10985/    8F20 : FFEB                		dc.w byte_8EF7-Map_obj3F
   10986/    8F22 : 01                  byte_8F16:	dc.b 1
   10987/    8F23 : F00F 0040 F0        		dc.b $F0, $F, 0, $40, $F0
   10988/    8F28 : 01                  byte_8F1C:	dc.b 1
   10989/    8F29 : F00F 0050 F0        		dc.b $F0, $F, 0, $50, $F0
   10990/    8F2E : (MACRO)             		align 2
   10990/    8F2E :  (MACRO-2)                  cnop 0,2
   10990/    8F2E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   10991/    8F2E :                     ; ===========================================================================
   10992/    8F2E :                     ; ---------------------------------------------------------------------------
   10993/    8F2E :                     ; Object 28 - animals
   10994/    8F2E :                     ; ---------------------------------------------------------------------------
   10995/    8F2E :                     
   10996/    8F2E :                     Obj28:					; XREF: Obj_Index
   10997/    8F2E : 7000                		moveq	#0,d0
   10998/    8F30 : 1028 0024           		move.b	$24(a0),d0
   10999/    8F34 : 323B 0006           		move.w	Obj28_Index(pc,d0.w),d1
   11000/    8F38 : 4EFB 1002           		jmp	Obj28_Index(pc,d1.w)
   11001/    8F3C :                     ; ===========================================================================
   11002/    8F3C : 00DC 01FA           Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
   11003/    8F40 : 0254 0290           		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
   11004/    8F44 : 0254 0254           		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
   11005/    8F48 : 0254 0290           		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
   11006/    8F4C : 0254 0310           		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
   11007/    8F50 : 0330 0330           		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
   11008/    8F54 : 0350 038A           		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
   11009/    8F58 : 03E4 0402           		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
   11010/    8F5C : 03E4 0402           		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
   11011/    8F60 : 03E4 0440           		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
   11012/    8F64 : 03A6                		dc.w loc_92D6-Obj28_Index
   11013/    8F66 :                     
   11014/    8F66 : 0005 0203 0603 0405 Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
                    0401 0001           
   11015/    8F72 :                     
   11016/    8F72 : FE00 FC00           Obj28_Variables:dc.w $FE00, $FC00
   11017/    8F76 : 0000 9472           		dc.l Map_obj28
   11018/    8F7A : FE00 FD00           		dc.w $FE00, $FD00	; horizontal speed, vertical speed
   11019/    8F7E : 0000 948A           		dc.l Map_obj28a		; mappings address
   11020/    8F82 : FE80 FD00           		dc.w $FE80, $FD00
   11021/    8F86 : 0000 9472           		dc.l Map_obj28
   11022/    8F8A : FEC0 FE80           		dc.w $FEC0, $FE80
   11023/    8F8E : 0000 948A           		dc.l Map_obj28a
   11024/    8F92 : FE40 FD00           		dc.w $FE40, $FD00
   11025/    8F96 : 0000 94A2           		dc.l Map_obj28b
   11026/    8F9A : FD00 FC00           		dc.w $FD00, $FC00
   11027/    8F9E : 0000 948A           		dc.l Map_obj28a
   11028/    8FA2 : FD80 FC80           		dc.w $FD80, $FC80
   11029/    8FA6 : 0000 94A2           		dc.l Map_obj28b
   11030/    8FAA :                     
   11031/    8FAA : FBC0 FC00 FBC0 FC00 Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
                    FBC0 FC00 FD00 FC00 
   11032/    8FBA : FD00 FC00 FE80 FD00 		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
                    FE80 FD00 FEC0 FE80 
   11033/    8FCA : FE40 FD00 FE00 FD00 		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
                    FD80 FC80           
   11034/    8FD6 :                     
   11035/    8FD6 : 0000 948A 0000 948A Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
                    0000 948A 0000 9472 
                    0000 9472           
   11036/    8FEA : 0000 9472 0000 9472 		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
                    0000 948A 0000 94A2 
                    0000 948A           
   11037/    8FFE : 0000 94A2           		dc.l Map_obj28b
   11038/    9002 :                     
   11039/    9002 : 05A5 05A5 05A5 0553 Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
                    0553 0573 0573 0585 
                    0593                
   11040/    9014 : 0565 05B3           		dc.w $565, $5B3
   11041/    9018 :                     ; ===========================================================================
   11042/    9018 :                     
   11043/    9018 :                     Obj28_Ending:				; XREF: Obj28_Index
   11044/    9018 : 4A28 0028           		tst.b	$28(a0)		; did animal come from a destroyed enemy?
   11045/    901C : 6700 0064           		beq.w	Obj28_FromEnemy	; if yes, branch
   11046/    9020 : 7000                		moveq	#0,d0
   11047/    9022 : 1028 0028           		move.b	$28(a0),d0	; move object type to d0
   11048/    9026 : D040                		add.w	d0,d0		; multiply d0 by 2
   11049/    9028 : 1140 0024           		move.b	d0,$24(a0)	; move d0 to routine counter
   11050/    902C : 0440 0014           		subi.w	#$14,d0
   11051/    9030 : 317B 00D0 0002      		move.w	Obj28_EndVram(pc,d0.w),2(a0)
   11052/    9036 : D040                		add.w	d0,d0
   11053/    9038 : 217B 009C 0004      		move.l	Obj28_EndMap(pc,d0.w),4(a0)
   11054/    903E : 43FA FF6A           		lea	Obj28_EndSpeed(pc),a1
   11055/    9042 : 3171 0000 0032      		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
   11056/    9048 : 3171 0000 0010      		move.w	(a1,d0.w),$10(a0)
   11057/    904E : 3171 0002 0034      		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
   11058/    9054 : 3171 0002 0012      		move.w	2(a1,d0.w),$12(a0)
   11059/    905A : 117C 000C 0016      		move.b	#$C,$16(a0)
   11060/    9060 : 117C 0004 0001      		move.b	#4,1(a0)
   11061/    9066 : 08E8 0000 0001      		bset	#0,1(a0)
   11062/    906C : 117C 0006 0018      		move.b	#6,$18(a0)
   11063/    9072 : 117C 0008 0019      		move.b	#8,$19(a0)
   11064/    9078 : 117C 0007 001E      		move.b	#7,$1E(a0)
   11065/    907E : 6000 468E           		bra.w	DisplaySprite
   11066/    9082 :                     ; ===========================================================================
   11067/    9082 :                     
   11068/    9082 :                     Obj28_FromEnemy:			; XREF: Obj28_Ending
   11069/    9082 : 5428 0024           		addq.b	#2,$24(a0)
   11070/    9086 : 6100 993C           		bsr.w	RandomNumber
   11071/    908A : 0240 0001           		andi.w	#1,d0
   11072/    908E : 7200                		moveq	#0,d1
   11073/    9090 : 1238 FE10           		move.b	($FFFFFE10).w,d1
   11074/    9094 : D241                		add.w	d1,d1
   11075/    9096 : D240                		add.w	d0,d1
   11076/    9098 : 43FA FECC           		lea	Obj28_VarIndex(pc),a1
   11077/    909C : 1031 1000           		move.b	(a1,d1.w),d0
   11078/    90A0 : 1140 0030           		move.b	d0,$30(a0)
   11079/    90A4 : E748                		lsl.w	#3,d0
   11080/    90A6 : 43FA FECA           		lea	Obj28_Variables(pc),a1
   11081/    90AA : D2C0                		adda.w	d0,a1
   11082/    90AC : 3159 0032           		move.w	(a1)+,$32(a0)	; load horizontal speed
   11083/    90B0 : 3159 0034           		move.w	(a1)+,$34(a0)	; load vertical	speed
   11084/    90B4 : 2159 0004           		move.l	(a1)+,4(a0)	; load mappings
   11085/    90B8 : 317C 0580 0002      		move.w	#$580,2(a0)	; VRAM setting for 1st animal
   11086/    90BE : 0828 0000 0030      		btst	#0,$30(a0)	; is 1st animal	used?
   11087/    90C4 : 6706                		beq.s	loc_90C0	; if yes, branch
   11088/    90C6 : 317C 0592 0002      		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
   11089/    90CC :                     
   11090/    90CC :                     loc_90C0:
   11091/    90CC : 117C 000C 0016      		move.b	#$C,$16(a0)
   11092/    90D2 : 117C 0004 0001      		move.b	#4,1(a0)
   11093/    90D8 : 08E8 0000 0001      		bset	#0,1(a0)
   11094/    90DE : 117C 0006 0018      		move.b	#6,$18(a0)
   11095/    90E4 : 117C 0008 0019      		move.b	#8,$19(a0)
   11096/    90EA : 117C 0007 001E      		move.b	#7,$1E(a0)
   11097/    90F0 : 117C 0002 001A      		move.b	#2,$1A(a0)
   11098/    90F6 : 317C FC00 0012      		move.w	#-$400,$12(a0)
   11099/    90FC : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   11100/    9100 : 6626                		bne.s	loc_911C
   11101/    9102 : 6100 4A92           		bsr.w	SingleObjLoad
   11102/    9106 : 661C                		bne.s	Obj28_Display
   11103/    9108 : (MACRO)             		_move.b	#$29,0(a1)	; load points object
   11103/    9108 :  (MACRO-2)                          insn2op move.b, #$29,0(a1)
   11103/    9108 : 137C 0029 0001                              !move.b   #$29,1+0(a1)
   11103/    910D :                                             !org    *-1
   11103/    910D : 00                                          !dc.b   0
   11104/    910E : 3368 0008 0008      		move.w	8(a0),8(a1)
   11105/    9114 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   11106/    911A : 3028 003E           		move.w	$3E(a0),d0
   11107/    911E : E248                		lsr.w	#1,d0
   11108/    9120 : 1340 001A           		move.b	d0,$1A(a1)
   11109/    9124 :                     
   11110/    9124 :                     Obj28_Display:
   11111/    9124 : 6000 45E8           		bra.w	DisplaySprite
   11112/    9128 :                     ; ===========================================================================
   11113/    9128 :                     
   11114/    9128 :                     loc_911C:
   11115/    9128 : 117C 0012 0024      		move.b	#$12,$24(a0)
   11116/    912E : 4268 0010           		clr.w	$10(a0)
   11117/    9132 : 6000 45DA           		bra.w	DisplaySprite
   11118/    9136 :                     ; ===========================================================================
   11119/    9136 :                     
   11120/    9136 :                     loc_912A:				; XREF: Obj28_Index
   11121/    9136 : 4A28 0001           		tst.b	1(a0)
   11122/    913A : 6A00 460E           		bpl.w	DeleteObject
   11123/    913E : 6100 457C           		bsr.w	ObjectFall
   11124/    9142 : 4A68 0012           		tst.w	$12(a0)
   11125/    9146 : 6B44                		bmi.s	loc_9180
   11126/    9148 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   11127/    914E : 4A41                		tst.w	d1
   11128/    9150 : 6A3A                		bpl.s	loc_9180
   11129/    9152 : D368 000C           		add.w	d1,$C(a0)
   11130/    9156 : 3168 0032 0010      		move.w	$32(a0),$10(a0)
   11131/    915C : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11132/    9162 : 117C 0001 001A      		move.b	#1,$1A(a0)
   11133/    9168 : 1028 0030           		move.b	$30(a0),d0
   11134/    916C : D000                		add.b	d0,d0
   11135/    916E : 5800                		addq.b	#4,d0
   11136/    9170 : 1140 0024           		move.b	d0,$24(a0)
   11137/    9174 : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   11138/    9178 : 6712                		beq.s	loc_9180
   11139/    917A : 0838 0004 FE0F      		btst	#4,($FFFFFE0F).w
   11140/    9180 : 670A                		beq.s	loc_9180
   11141/    9182 : 4468 0010           		neg.w	$10(a0)
   11142/    9186 : 0868 0000 0001      		bchg	#0,1(a0)
   11143/    918C :                     
   11144/    918C :                     loc_9180:
   11145/    918C : 6000 4580           		bra.w	DisplaySprite
   11146/    9190 :                     ; ===========================================================================
   11147/    9190 :                     
   11148/    9190 :                     loc_9184:				; XREF: Obj28_Index
   11149/    9190 : 6100 452A           		bsr.w	ObjectFall
   11150/    9194 : 117C 0001 001A      		move.b	#1,$1A(a0)
   11151/    919A : 4A68 0012           		tst.w	$12(a0)
   11152/    919E : 6B1A                		bmi.s	loc_91AE
   11153/    91A0 : 117C 0000 001A      		move.b	#0,$1A(a0)
   11154/    91A6 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   11155/    91AC : 4A41                		tst.w	d1
   11156/    91AE : 6A0A                		bpl.s	loc_91AE
   11157/    91B0 : D368 000C           		add.w	d1,$C(a0)
   11158/    91B4 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11159/    91BA :                     
   11160/    91BA :                     loc_91AE:
   11161/    91BA : 4A28 0028           		tst.b	$28(a0)
   11162/    91BE : 6670                		bne.s	loc_9224
   11163/    91C0 : 4A28 0001           		tst.b	1(a0)
   11164/    91C4 : 6A00 4584           		bpl.w	DeleteObject
   11165/    91C8 : 6000 4544           		bra.w	DisplaySprite
   11166/    91CC :                     ; ===========================================================================
   11167/    91CC :                     
   11168/    91CC :                     loc_91C0:				; XREF: Obj28_Index
   11169/    91CC : 6100 451A           		bsr.w	SpeedToPos
   11170/    91D0 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   11171/    91D6 : 4A68 0012           		tst.w	$12(a0)
   11172/    91DA : 6B2C                		bmi.s	loc_91FC
   11173/    91DC : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   11174/    91E2 : 4A41                		tst.w	d1
   11175/    91E4 : 6A22                		bpl.s	loc_91FC
   11176/    91E6 : D368 000C           		add.w	d1,$C(a0)
   11177/    91EA : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11178/    91F0 : 4A28 0028           		tst.b	$28(a0)
   11179/    91F4 : 6712                		beq.s	loc_91FC
   11180/    91F6 : 0C28 000A 0028      		cmpi.b	#$A,$28(a0)
   11181/    91FC : 670A                		beq.s	loc_91FC
   11182/    91FE : 4468 0010           		neg.w	$10(a0)
   11183/    9202 : 0868 0000 0001      		bchg	#0,1(a0)
   11184/    9208 :                     
   11185/    9208 :                     loc_91FC:
   11186/    9208 : 5328 001E           		subq.b	#1,$1E(a0)
   11187/    920C : 6A10                		bpl.s	loc_9212
   11188/    920E : 117C 0001 001E      		move.b	#1,$1E(a0)
   11189/    9214 : 5228 001A           		addq.b	#1,$1A(a0)
   11190/    9218 : 0228 0001 001A      		andi.b	#1,$1A(a0)
   11191/    921E :                     
   11192/    921E :                     loc_9212:
   11193/    921E : 4A28 0028           		tst.b	$28(a0)
   11194/    9222 : 660C                		bne.s	loc_9224
   11195/    9224 : 4A28 0001           		tst.b	1(a0)
   11196/    9228 : 6A00 4520           		bpl.w	DeleteObject
   11197/    922C : 6000 44E0           		bra.w	DisplaySprite
   11198/    9230 :                     ; ===========================================================================
   11199/    9230 :                     
   11200/    9230 :                     loc_9224:				; XREF: Obj28_Index
   11201/    9230 : 3028 0008           		move.w	8(a0),d0
   11202/    9234 : 9078 D008           		sub.w	($FFFFD008).w,d0
   11203/    9238 : 650E                		bcs.s	loc_923C
   11204/    923A : 0440 0180           		subi.w	#$180,d0
   11205/    923E : 6A08                		bpl.s	loc_923C
   11206/    9240 : 4A28 0001           		tst.b	1(a0)
   11207/    9244 : 6A00 4504           		bpl.w	DeleteObject
   11208/    9248 :                     
   11209/    9248 :                     loc_923C:
   11210/    9248 : 6000 44C4           		bra.w	DisplaySprite
   11211/    924C :                     ; ===========================================================================
   11212/    924C :                     
   11213/    924C :                     loc_9240:				; XREF: Obj28_Index
   11214/    924C : 4A28 0001           		tst.b	1(a0)
   11215/    9250 : 6A00 44F8           		bpl.w	DeleteObject
   11216/    9254 : 5368 0036           		subq.w	#1,$36(a0)
   11217/    9258 : 6600 000E           		bne.w	loc_925C
   11218/    925C : 117C 0002 0024      		move.b	#2,$24(a0)
   11219/    9262 : 117C 0003 0018      		move.b	#3,$18(a0)
   11220/    9268 :                     
   11221/    9268 :                     loc_925C:
   11222/    9268 : 6000 44A4           		bra.w	DisplaySprite
   11223/    926C :                     ; ===========================================================================
   11224/    926C :                     
   11225/    926C :                     loc_9260:				; XREF: Obj28_Index
   11226/    926C : 6100 01A2           		bsr.w	sub_9404
   11227/    9270 : 6416                		bcc.s	loc_927C
   11228/    9272 : 3168 0032 0010      		move.w	$32(a0),$10(a0)
   11229/    9278 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11230/    927E : 117C 000E 0024      		move.b	#$E,$24(a0)
   11231/    9284 : 6000 FF46           		bra.w	loc_91C0
   11232/    9288 :                     ; ===========================================================================
   11233/    9288 :                     
   11234/    9288 :                     loc_927C:
   11235/    9288 : 6000 FFA6           		bra.w	loc_9224
   11236/    928C :                     ; ===========================================================================
   11237/    928C :                     
   11238/    928C :                     loc_9280:				; XREF: Obj28_Index
   11239/    928C : 6100 0182           		bsr.w	sub_9404
   11240/    9290 : 6A30                		bpl.s	loc_92B6
   11241/    9292 : 4268 0010           		clr.w	$10(a0)
   11242/    9296 : 4268 0032           		clr.w	$32(a0)
   11243/    929A : 6100 444C           		bsr.w	SpeedToPos
   11244/    929E : 0668 0018 0012      		addi.w	#$18,$12(a0)
   11245/    92A4 : 6100 012A           		bsr.w	loc_93C4
   11246/    92A8 : 6100 014E           		bsr.w	loc_93EC
   11247/    92AC : 5328 001E           		subq.b	#1,$1E(a0)
   11248/    92B0 : 6A10                		bpl.s	loc_92B6
   11249/    92B2 : 117C 0001 001E      		move.b	#1,$1E(a0)
   11250/    92B8 : 5228 001A           		addq.b	#1,$1A(a0)
   11251/    92BC : 0228 0001 001A      		andi.b	#1,$1A(a0)
   11252/    92C2 :                     
   11253/    92C2 :                     loc_92B6:
   11254/    92C2 : 6000 FF6C           		bra.w	loc_9224
   11255/    92C6 :                     ; ===========================================================================
   11256/    92C6 :                     
   11257/    92C6 :                     loc_92BA:				; XREF: Obj28_Index
   11258/    92C6 : 6100 0148           		bsr.w	sub_9404
   11259/    92CA : 6A50                		bpl.s	loc_9310
   11260/    92CC : 3168 0032 0010      		move.w	$32(a0),$10(a0)
   11261/    92D2 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11262/    92D8 : 117C 0004 0024      		move.b	#4,$24(a0)
   11263/    92DE : 6000 FEB0           		bra.w	loc_9184
   11264/    92E2 :                     ; ===========================================================================
   11265/    92E2 :                     
   11266/    92E2 :                     loc_92D6:				; XREF: Obj28_Index
   11267/    92E2 : 6100 43D8           		bsr.w	ObjectFall
   11268/    92E6 : 117C 0001 001A      		move.b	#1,$1A(a0)
   11269/    92EC : 4A68 0012           		tst.w	$12(a0)
   11270/    92F0 : 6B2A                		bmi.s	loc_9310
   11271/    92F2 : 117C 0000 001A      		move.b	#0,$1A(a0)
   11272/    92F8 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   11273/    92FE : 4A41                		tst.w	d1
   11274/    9300 : 6A1A                		bpl.s	loc_9310
   11275/    9302 : 4628 0029           		not.b	$29(a0)
   11276/    9306 : 660A                		bne.s	loc_9306
   11277/    9308 : 4468 0010           		neg.w	$10(a0)
   11278/    930C : 0868 0000 0001      		bchg	#0,1(a0)
   11279/    9312 :                     
   11280/    9312 :                     loc_9306:
   11281/    9312 : D368 000C           		add.w	d1,$C(a0)
   11282/    9316 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11283/    931C :                     
   11284/    931C :                     loc_9310:
   11285/    931C : 6000 FF12           		bra.w	loc_9224
   11286/    9320 :                     ; ===========================================================================
   11287/    9320 :                     
   11288/    9320 :                     loc_9314:				; XREF: Obj28_Index
   11289/    9320 : 6100 00EE           		bsr.w	sub_9404
   11290/    9324 : 6A14                		bpl.s	loc_932E
   11291/    9326 : 4268 0010           		clr.w	$10(a0)
   11292/    932A : 4268 0032           		clr.w	$32(a0)
   11293/    932E : 6100 438C           		bsr.w	ObjectFall
   11294/    9332 : 6100 009C           		bsr.w	loc_93C4
   11295/    9336 : 6100 00C0           		bsr.w	loc_93EC
   11296/    933A :                     
   11297/    933A :                     loc_932E:
   11298/    933A : 6000 FEF4           		bra.w	loc_9224
   11299/    933E :                     ; ===========================================================================
   11300/    933E :                     
   11301/    933E :                     loc_9332:				; XREF: Obj28_Index
   11302/    933E : 6100 00D0           		bsr.w	sub_9404
   11303/    9342 : 6A34                		bpl.s	loc_936C
   11304/    9344 : 6100 4376           		bsr.w	ObjectFall
   11305/    9348 : 117C 0001 001A      		move.b	#1,$1A(a0)
   11306/    934E : 4A68 0012           		tst.w	$12(a0)
   11307/    9352 : 6B24                		bmi.s	loc_936C
   11308/    9354 : 117C 0000 001A      		move.b	#0,$1A(a0)
   11309/    935A : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   11310/    9360 : 4A41                		tst.w	d1
   11311/    9362 : 6A14                		bpl.s	loc_936C
   11312/    9364 : 4468 0010           		neg.w	$10(a0)
   11313/    9368 : 0868 0000 0001      		bchg	#0,1(a0)
   11314/    936E : D368 000C           		add.w	d1,$C(a0)
   11315/    9372 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11316/    9378 :                     
   11317/    9378 :                     loc_936C:
   11318/    9378 : 6000 FEB6           		bra.w	loc_9224
   11319/    937C :                     ; ===========================================================================
   11320/    937C :                     
   11321/    937C :                     loc_9370:				; XREF: Obj28_Index
   11322/    937C : 6100 0092           		bsr.w	sub_9404
   11323/    9380 : 6A4A                		bpl.s	loc_93C0
   11324/    9382 : 6100 4364           		bsr.w	SpeedToPos
   11325/    9386 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   11326/    938C : 4A68 0012           		tst.w	$12(a0)
   11327/    9390 : 6B24                		bmi.s	loc_93AA
   11328/    9392 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   11329/    9398 : 4A41                		tst.w	d1
   11330/    939A : 6A1A                		bpl.s	loc_93AA
   11331/    939C : 4628 0029           		not.b	$29(a0)
   11332/    93A0 : 660A                		bne.s	loc_93A0
   11333/    93A2 : 4468 0010           		neg.w	$10(a0)
   11334/    93A6 : 0868 0000 0001      		bchg	#0,1(a0)
   11335/    93AC :                     
   11336/    93AC :                     loc_93A0:
   11337/    93AC : D368 000C           		add.w	d1,$C(a0)
   11338/    93B0 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11339/    93B6 :                     
   11340/    93B6 :                     loc_93AA:
   11341/    93B6 : 5328 001E           		subq.b	#1,$1E(a0)
   11342/    93BA : 6A10                		bpl.s	loc_93C0
   11343/    93BC : 117C 0001 001E      		move.b	#1,$1E(a0)
   11344/    93C2 : 5228 001A           		addq.b	#1,$1A(a0)
   11345/    93C6 : 0228 0001 001A      		andi.b	#1,$1A(a0)
   11346/    93CC :                     
   11347/    93CC :                     loc_93C0:
   11348/    93CC : 6000 FE62           		bra.w	loc_9224
   11349/    93D0 :                     ; ===========================================================================
   11350/    93D0 :                     
   11351/    93D0 :                     loc_93C4:
   11352/    93D0 : 117C 0001 001A      		move.b	#1,$1A(a0)
   11353/    93D6 : 4A68 0012           		tst.w	$12(a0)
   11354/    93DA : 6B1A                		bmi.s	locret_93EA
   11355/    93DC : 117C 0000 001A      		move.b	#0,$1A(a0)
   11356/    93E2 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   11357/    93E8 : 4A41                		tst.w	d1
   11358/    93EA : 6A0A                		bpl.s	locret_93EA
   11359/    93EC : D368 000C           		add.w	d1,$C(a0)
   11360/    93F0 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11361/    93F6 :                     
   11362/    93F6 :                     locret_93EA:
   11363/    93F6 : 4E75                		rts	
   11364/    93F8 :                     ; ===========================================================================
   11365/    93F8 :                     
   11366/    93F8 :                     loc_93EC:
   11367/    93F8 : 08E8 0000 0001      		bset	#0,1(a0)
   11368/    93FE : 3028 0008           		move.w	8(a0),d0
   11369/    9402 : 9078 D008           		sub.w	($FFFFD008).w,d0
   11370/    9406 : 6406                		bcc.s	locret_9402
   11371/    9408 : 08A8 0000 0001      		bclr	#0,1(a0)
   11372/    940E :                     
   11373/    940E :                     locret_9402:
   11374/    940E : 4E75                		rts	
   11375/    9410 :                     
   11376/    9410 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   11377/    9410 :                     
   11378/    9410 :                     
   11379/    9410 :                     sub_9404:
   11380/    9410 : 3038 D008           		move.w	($FFFFD008).w,d0
   11381/    9414 : 9068 0008           		sub.w	8(a0),d0
   11382/    9418 : 0440 00B8           		subi.w	#$B8,d0
   11383/    941C : 4E75                		rts	
   11384/    941E :                     ; End of function sub_9404
   11385/    941E :                     
   11386/    941E :                     ; ===========================================================================
   11387/    941E :                     ; ---------------------------------------------------------------------------
   11388/    941E :                     ; Object 29 - points that appear when you destroy something
   11389/    941E :                     ; ---------------------------------------------------------------------------
   11390/    941E :                     
   11391/    941E :                     Obj29:					; XREF: Obj_Index
   11392/    941E : 7000                		moveq	#0,d0
   11393/    9420 : 1028 0024           		move.b	$24(a0),d0
   11394/    9424 : 323B 000A           		move.w	Obj29_Index(pc,d0.w),d1
   11395/    9428 : 4EBB 1006           		jsr	Obj29_Index(pc,d1.w)
   11396/    942C : 6000 42E0           		bra.w	DisplaySprite
   11397/    9430 :                     ; ===========================================================================
   11398/    9430 : 0004                Obj29_Index:	dc.w Obj29_Main-Obj29_Index
   11399/    9432 : 002E                		dc.w Obj29_Slower-Obj29_Index
   11400/    9434 :                     ; ===========================================================================
   11401/    9434 :                     
   11402/    9434 :                     Obj29_Main:				; XREF: Obj29_Index
   11403/    9434 : 5428 0024           		addq.b	#2,$24(a0)
   11404/    9438 : 217C 0000 94BA 0004 		move.l	#Map_obj29,4(a0)
   11405/    9440 : 317C 2797 0002      		move.w	#$2797,2(a0)
   11406/    9446 : 117C 0004 0001      		move.b	#4,1(a0)
   11407/    944C : 117C 0001 0018      		move.b	#1,$18(a0)
   11408/    9452 : 117C 0008 0019      		move.b	#8,$19(a0)
   11409/    9458 : 317C FD00 0012      		move.w	#-$300,$12(a0)	; move object upwards
   11410/    945E :                     
   11411/    945E :                     Obj29_Slower:				; XREF: Obj29_Index
   11412/    945E : 4A68 0012           		tst.w	$12(a0)		; is object moving?
   11413/    9462 : 6A00 42E6           		bpl.w	DeleteObject	; if not, branch
   11414/    9466 : 6100 4280           		bsr.w	SpeedToPos
   11415/    946A : 0668 0018 0012      		addi.w	#$18,$12(a0)	; reduce object	speed
   11416/    9470 : 4E75                		rts	
   11417/    9472 :                     ; ===========================================================================
   11418/    9472 :                     ; ---------------------------------------------------------------------------
   11419/    9472 :                     ; Sprite mappings - animals
   11420/    9472 :                     ; ---------------------------------------------------------------------------
   11421/    9472 :                     Map_obj28:
   11422/    9472 :                     		include	"_maps/obj28.asm"
(1)    1/    9472 :                     ; ---------------------------------------------------------------------------
(1)    2/    9472 :                     ; Sprite mappings - animals
(1)    3/    9472 :                     ; ---------------------------------------------------------------------------
(1)    4/    9472 : 000C                		dc.w byte_9472-Map_obj28
(1)    5/    9474 : 0012                		dc.w byte_9478-Map_obj28
(1)    6/    9476 : 0006                		dc.w byte_946C-Map_obj28
(1)    7/    9478 : 01                  byte_946C:	dc.b 1
(1)    8/    9479 : F406 0000 F8        		dc.b $F4, 6, 0,	0, $F8
(1)    9/    947E : 01                  byte_9472:	dc.b 1
(1)   10/    947F : F406 0006 F8        		dc.b $F4, 6, 0,	6, $F8
(1)   11/    9484 : 01                  byte_9478:	dc.b 1
(1)   12/    9485 : F406 000C F8        		dc.b $F4, 6, 0,	$C, $F8
(1)   13/    948A : (MACRO)             		align 2
(1)   13/    948A :  (MACRO-2)                  cnop 0,2
(1)   13/    948A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   11423/    948A :                     
   11424/    948A :                     Map_obj28a:
   11425/    948A :                     		include	"_maps/obj28a.asm"
(1)    1/    948A :                     ; ---------------------------------------------------------------------------
(1)    2/    948A :                     ; Sprite mappings - animals
(1)    3/    948A :                     ; ---------------------------------------------------------------------------
(1)    4/    948A : 000C                		dc.w byte_948A-Map_obj28a
(1)    5/    948C : 0012                		dc.w byte_9490-Map_obj28a
(1)    6/    948E : 0006                		dc.w byte_9484-Map_obj28a
(1)    7/    9490 : 01                  byte_9484:	dc.b 1
(1)    8/    9491 : F406 0000 F8        		dc.b $F4, 6, 0,	0, $F8
(1)    9/    9496 : 01                  byte_948A:	dc.b 1
(1)   10/    9497 : FC05 0006 F8        		dc.b $FC, 5, 0,	6, $F8
(1)   11/    949C : 01                  byte_9490:	dc.b 1
(1)   12/    949D : FC05 000A F8        		dc.b $FC, 5, 0,	$A, $F8
(1)   13/    94A2 : (MACRO)             		align 2
(1)   13/    94A2 :  (MACRO-2)                  cnop 0,2
(1)   13/    94A2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   11426/    94A2 :                     
   11427/    94A2 :                     Map_obj28b:
   11428/    94A2 :                     		include	"_maps/obj28b.asm"
(1)    1/    94A2 :                     ; ---------------------------------------------------------------------------
(1)    2/    94A2 :                     ; Sprite mappings - animals
(1)    3/    94A2 :                     ; ---------------------------------------------------------------------------
(1)    4/    94A2 : 000C                		dc.w byte_94A2-Map_obj28b
(1)    5/    94A4 : 0012                		dc.w byte_94A8-Map_obj28b
(1)    6/    94A6 : 0006                		dc.w byte_949C-Map_obj28b
(1)    7/    94A8 : 01                  byte_949C:	dc.b 1
(1)    8/    94A9 : F406 0000 F8        		dc.b $F4, 6, 0,	0, $F8
(1)    9/    94AE : 01                  byte_94A2:	dc.b 1
(1)   10/    94AF : FC09 0006 F4        		dc.b $FC, 9, 0,	6, $F4
(1)   11/    94B4 : 01                  byte_94A8:	dc.b 1
(1)   12/    94B5 : FC09 000C F4        		dc.b $FC, 9, 0,	$C, $F4
(1)   13/    94BA : (MACRO)             		align 2
(1)   13/    94BA :  (MACRO-2)                  cnop 0,2
(1)   13/    94BA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   11429/    94BA :                     
   11430/    94BA :                     ; ---------------------------------------------------------------------------
   11431/    94BA :                     ; Sprite mappings - points that	appear when you	destroy	something
   11432/    94BA :                     ; ---------------------------------------------------------------------------
   11433/    94BA :                     Map_obj29:
   11434/    94BA :                     		include	"_maps/obj29.asm"
(1)    1/    94BA :                     ; ---------------------------------------------------------------------------
(1)    2/    94BA :                     ; Sprite mappings - points that	appear when you	destroy	something
(1)    3/    94BA :                     ; ---------------------------------------------------------------------------
(1)    4/    94BA : 000E 0014           		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
(1)    5/    94BE : 001A 0020           		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
(1)    6/    94C2 : 0026 002C           		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
(1)    7/    94C6 : 0037                		dc.w byte_94E5-Map_obj29
(1)    8/    94C8 : 01                  byte_94BC:	dc.b 1
(1)    9/    94C9 : FC04 0000 F8        		dc.b $FC, 4, 0,	0, $F8	; 100 points
(1)   10/    94CE : 01                  byte_94C2:	dc.b 1
(1)   11/    94CF : FC04 0002 F8        		dc.b $FC, 4, 0,	2, $F8	; 200 points
(1)   12/    94D4 : 01                  byte_94C8:	dc.b 1
(1)   13/    94D5 : FC04 0004 F8        		dc.b $FC, 4, 0,	4, $F8	; 500 points
(1)   14/    94DA : 01                  byte_94CE:	dc.b 1
(1)   15/    94DB : FC08 0006 F8        		dc.b $FC, 8, 0,	6, $F8	; 1000 points
(1)   16/    94E0 : 01                  byte_94D4:	dc.b 1
(1)   17/    94E1 : FC00 0006 FC        		dc.b $FC, 0, 0,	6, $FC	; 10 points
(1)   18/    94E6 : 02                  byte_94DA:	dc.b 2
(1)   19/    94E7 : FC08 0006 F4        		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
(1)   20/    94EC : FC04 0007 01        		dc.b $FC, 4, 0,	7, 1
(1)   21/    94F1 : 02                  byte_94E5:	dc.b 2
(1)   22/    94F2 : FC08 0006 F4        		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
(1)   23/    94F7 : FC04 0007 06        		dc.b $FC, 4, 0,	7, 6
(1)   24/    94FC : (MACRO)             		align 2
(1)   24/    94FC :  (MACRO-2)                  cnop 0,2
(1)   24/    94FC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   11435/    94FC :                     
   11436/    94FC :                     ; ===========================================================================
   11437/    94FC :                     ; ---------------------------------------------------------------------------
   11438/    94FC :                     ; Object 1F - Crabmeat enemy (GHZ, SYZ)
   11439/    94FC :                     ; ---------------------------------------------------------------------------
   11440/    94FC :                     
   11441/    94FC :                     Obj1F:					; XREF: Obj_Index
   11442/    94FC : 7000                		moveq	#0,d0
   11443/    94FE : 1028 0024           		move.b	$24(a0),d0
   11444/    9502 : 323B 0006           		move.w	Obj1F_Index(pc,d0.w),d1
   11445/    9506 : 4EFB 1002           		jmp	Obj1F_Index(pc,d1.w)
   11446/    950A :                     ; ===========================================================================
   11447/    950A : 000A                Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
   11448/    950C : 005E                		dc.w Obj1F_Action-Obj1F_Index
   11449/    950E : 01BA                		dc.w Obj1F_Delete-Obj1F_Index
   11450/    9510 : 01C0                		dc.w Obj1F_BallMain-Obj1F_Index
   11451/    9512 : 01F6                		dc.w Obj1F_BallMove-Obj1F_Index
   11452/    9514 :                     ; ===========================================================================
   11453/    9514 :                     
   11454/    9514 :                     Obj1F_Main:				; XREF: Obj1F_Index
   11455/    9514 : 117C 0010 0016      		move.b	#$10,$16(a0)
   11456/    951A : 117C 0008 0017      		move.b	#8,$17(a0)
   11457/    9520 : 217C 0000 975C 0004 		move.l	#Map_obj1F,4(a0)
   11458/    9528 : 317C 0400 0002      		move.w	#$400,2(a0)
   11459/    952E : 117C 0004 0001      		move.b	#4,1(a0)
   11460/    9534 : 117C 0003 0018      		move.b	#3,$18(a0)
   11461/    953A : 117C 0006 0020      		move.b	#6,$20(a0)
   11462/    9540 : 117C 0015 0019      		move.b	#$15,$19(a0)
   11463/    9546 : 6100 4174           		bsr.w	ObjectFall
   11464/    954A : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   11465/    9550 : 4A41                		tst.w	d1
   11466/    9552 : 6A12                		bpl.s	locret_955A
   11467/    9554 : D368 000C           		add.w	d1,$C(a0)
   11468/    9558 : 1143 0026           		move.b	d3,$26(a0)
   11469/    955C : 317C 0000 0012      		move.w	#0,$12(a0)
   11470/    9562 : 5428 0024           		addq.b	#2,$24(a0)
   11471/    9566 :                     
   11472/    9566 :                     locret_955A:
   11473/    9566 : 4E75                		rts	
   11474/    9568 :                     ; ===========================================================================
   11475/    9568 :                     
   11476/    9568 :                     Obj1F_Action:				; XREF: Obj1F_Index
   11477/    9568 : 7000                		moveq	#0,d0
   11478/    956A : 1028 0025           		move.b	$25(a0),d0
   11479/    956E : 323B 0014           		move.w	Obj1F_Index2(pc,d0.w),d1
   11480/    9572 : 4EBB 1010           		jsr	Obj1F_Index2(pc,d1.w)
   11481/    9576 : 43F9 0000 9726      		lea	(Ani_obj1F).l,a1
   11482/    957C : 6100 11B6           		bsr.w	AnimateSprite
   11483/    9580 : 6000 623A           		bra.w	MarkObjGone
   11484/    9584 :                     ; ===========================================================================
   11485/    9584 : 0004                Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
   11486/    9586 : 00A2                		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
   11487/    9588 :                     ; ===========================================================================
   11488/    9588 :                     
   11489/    9588 :                     Obj1F_WaitFire:				; XREF: Obj1F_Index2
   11490/    9588 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time delay
   11491/    958C : 6A34                		bpl.s	locret_95B6
   11492/    958E : 4A28 0001           		tst.b	1(a0)
   11493/    9592 : 6A08                		bpl.s	Obj1F_Move
   11494/    9594 : 0868 0001 0032      		bchg	#1,$32(a0)
   11495/    959A : 6628                		bne.s	Obj1F_MakeFire
   11496/    959C :                     
   11497/    959C :                     Obj1F_Move:
   11498/    959C : 5428 0025           		addq.b	#2,$25(a0)
   11499/    95A0 : 317C 007F 0030      		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
   11500/    95A6 : 317C 0080 0010      		move.w	#$80,$10(a0)	; move Crabmeat	to the right
   11501/    95AC : 6100 00E6           		bsr.w	Obj1F_SetAni
   11502/    95B0 : 5600                		addq.b	#3,d0
   11503/    95B2 : 1140 001C           		move.b	d0,$1C(a0)
   11504/    95B6 : 0868 0000 0022      		bchg	#0,$22(a0)
   11505/    95BC : 6604                		bne.s	locret_95B6
   11506/    95BE : 4468 0010           		neg.w	$10(a0)		; change direction
   11507/    95C2 :                     
   11508/    95C2 :                     locret_95B6:
   11509/    95C2 : 4E75                		rts	
   11510/    95C4 :                     ; ===========================================================================
   11511/    95C4 :                     
   11512/    95C4 :                     Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
   11513/    95C4 : 317C 003B 0030      		move.w	#$3B,$30(a0)
   11514/    95CA : 117C 0006 001C      		move.b	#6,$1C(a0)	; use firing animation
   11515/    95D0 : 6100 45C4           		bsr.w	SingleObjLoad
   11516/    95D4 : 6624                		bne.s	Obj1F_MakeFire2
   11517/    95D6 : (MACRO)             		_move.b	#$1F,0(a1)	; load left fireball
   11517/    95D6 :  (MACRO-2)                          insn2op move.b, #$1F,0(a1)
   11517/    95D6 : 137C 001F 0001                              !move.b   #$1F,1+0(a1)
   11517/    95DB :                                             !org    *-1
   11517/    95DB : 00                                          !dc.b   0
   11518/    95DC : 137C 0006 0024      		move.b	#6,$24(a1)
   11519/    95E2 : 3368 0008 0008      		move.w	8(a0),8(a1)
   11520/    95E8 : 0469 0010 0008      		subi.w	#$10,8(a1)
   11521/    95EE : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   11522/    95F4 : 337C FF00 0010      		move.w	#-$100,$10(a1)
   11523/    95FA :                     
   11524/    95FA :                     Obj1F_MakeFire2:
   11525/    95FA : 6100 459A           		bsr.w	SingleObjLoad
   11526/    95FE : 6624                		bne.s	locret_9618
   11527/    9600 : (MACRO)             		_move.b	#$1F,0(a1)	; load right fireball
   11527/    9600 :  (MACRO-2)                          insn2op move.b, #$1F,0(a1)
   11527/    9600 : 137C 001F 0001                              !move.b   #$1F,1+0(a1)
   11527/    9605 :                                             !org    *-1
   11527/    9605 : 00                                          !dc.b   0
   11528/    9606 : 137C 0006 0024      		move.b	#6,$24(a1)
   11529/    960C : 3368 0008 0008      		move.w	8(a0),8(a1)
   11530/    9612 : 0669 0010 0008      		addi.w	#$10,8(a1)
   11531/    9618 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   11532/    961E : 337C 0100 0010      		move.w	#$100,$10(a1)
   11533/    9624 :                     
   11534/    9624 :                     locret_9618:
   11535/    9624 : 4E75                		rts	
   11536/    9626 :                     ; ===========================================================================
   11537/    9626 :                     
   11538/    9626 :                     Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
   11539/    9626 : 5368 0030           		subq.w	#1,$30(a0)
   11540/    962A : 6B4E                		bmi.s	loc_966E
   11541/    962C : 6100 40BA           		bsr.w	SpeedToPos
   11542/    9630 : 0868 0000 0032      		bchg	#0,$32(a0)
   11543/    9636 : 6628                		bne.s	loc_9654
   11544/    9638 : 3628 0008           		move.w	8(a0),d3
   11545/    963C : 0643 0010           		addi.w	#$10,d3
   11546/    9640 : 0828 0000 0022      		btst	#0,$22(a0)
   11547/    9646 : 6704                		beq.s	loc_9640
   11548/    9648 : 0443 0020           		subi.w	#$20,d3
   11549/    964C :                     
   11550/    964C :                     loc_9640:
   11551/    964C : 4EB9 0001 5098      		jsr	(ObjHitFloor2).l
   11552/    9652 : 0C41 FFF8           		cmpi.w	#-8,d1
   11553/    9656 : 6D22                		blt.s	loc_966E
   11554/    9658 : 0C41 000C           		cmpi.w	#$C,d1
   11555/    965C : 6C1C                		bge.s	loc_966E
   11556/    965E : 4E75                		rts	
   11557/    9660 :                     ; ===========================================================================
   11558/    9660 :                     
   11559/    9660 :                     loc_9654:				; XREF: Obj1F_WalkOnFloor
   11560/    9660 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   11561/    9666 : D368 000C           		add.w	d1,$C(a0)
   11562/    966A : 1143 0026           		move.b	d3,$26(a0)
   11563/    966E : 6100 0024           		bsr.w	Obj1F_SetAni
   11564/    9672 : 5600                		addq.b	#3,d0
   11565/    9674 : 1140 001C           		move.b	d0,$1C(a0)
   11566/    9678 : 4E75                		rts	
   11567/    967A :                     ; ===========================================================================
   11568/    967A :                     
   11569/    967A :                     loc_966E:				; XREF: Obj1F_WalkOnFloor
   11570/    967A : 5528 0025           		subq.b	#2,$25(a0)
   11571/    967E : 317C 003B 0030      		move.w	#59,$30(a0)
   11572/    9684 : 317C 0000 0010      		move.w	#0,$10(a0)
   11573/    968A : 6100 0008           		bsr.w	Obj1F_SetAni
   11574/    968E : 1140 001C           		move.b	d0,$1C(a0)
   11575/    9692 : 4E75                		rts	
   11576/    9694 :                     ; ---------------------------------------------------------------------------
   11577/    9694 :                     ; Subroutine to	set the	correct	animation for a	Crabmeat
   11578/    9694 :                     ; ---------------------------------------------------------------------------
   11579/    9694 :                     
   11580/    9694 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   11581/    9694 :                     
   11582/    9694 :                     
   11583/    9694 :                     Obj1F_SetAni:				; XREF: loc_966E
   11584/    9694 : 7000                		moveq	#0,d0
   11585/    9696 : 1628 0026           		move.b	$26(a0),d3
   11586/    969A : 6B14                		bmi.s	loc_96A4
   11587/    969C : 0C03 0006           		cmpi.b	#6,d3
   11588/    96A0 : 650C                		bcs.s	locret_96A2
   11589/    96A2 : 7001                		moveq	#1,d0
   11590/    96A4 : 0828 0000 0022      		btst	#0,$22(a0)
   11591/    96AA : 6602                		bne.s	locret_96A2
   11592/    96AC : 7002                		moveq	#2,d0
   11593/    96AE :                     
   11594/    96AE :                     locret_96A2:
   11595/    96AE : 4E75                		rts	
   11596/    96B0 :                     ; ===========================================================================
   11597/    96B0 :                     
   11598/    96B0 :                     loc_96A4:				; XREF: Obj1F_SetAni
   11599/    96B0 : 0C03 00FA           		cmpi.b	#-6,d3
   11600/    96B4 : 620C                		bhi.s	locret_96B6
   11601/    96B6 : 7002                		moveq	#2,d0
   11602/    96B8 : 0828 0000 0022      		btst	#0,$22(a0)
   11603/    96BE : 6602                		bne.s	locret_96B6
   11604/    96C0 : 7001                		moveq	#1,d0
   11605/    96C2 :                     
   11606/    96C2 :                     locret_96B6:
   11607/    96C2 : 4E75                		rts	
   11608/    96C4 :                     ; End of function Obj1F_SetAni
   11609/    96C4 :                     
   11610/    96C4 :                     ; ===========================================================================
   11611/    96C4 :                     
   11612/    96C4 :                     Obj1F_Delete:				; XREF: Obj1F_Index
   11613/    96C4 : 6100 4084           		bsr.w	DeleteObject
   11614/    96C8 : 4E75                		rts	
   11615/    96CA :                     ; ===========================================================================
   11616/    96CA :                     ; ---------------------------------------------------------------------------
   11617/    96CA :                     ; Sub-object - missile that the	Crabmeat throws
   11618/    96CA :                     ; ---------------------------------------------------------------------------
   11619/    96CA :                     
   11620/    96CA :                     Obj1F_BallMain:				; XREF: Obj1F_Index
   11621/    96CA : 5428 0024           		addq.b	#2,$24(a0)
   11622/    96CE : 217C 0000 975C 0004 		move.l	#Map_obj1F,4(a0)
   11623/    96D6 : 317C 0400 0002      		move.w	#$400,2(a0)
   11624/    96DC : 117C 0004 0001      		move.b	#4,1(a0)
   11625/    96E2 : 117C 0003 0018      		move.b	#3,$18(a0)
   11626/    96E8 : 117C 0087 0020      		move.b	#$87,$20(a0)
   11627/    96EE : 117C 0008 0019      		move.b	#8,$19(a0)
   11628/    96F4 : 317C FC00 0012      		move.w	#-$400,$12(a0)
   11629/    96FA : 117C 0007 001C      		move.b	#7,$1C(a0)
   11630/    9700 :                     
   11631/    9700 :                     Obj1F_BallMove:				; XREF: Obj1F_Index
   11632/    9700 : 43F9 0000 9726      		lea	(Ani_obj1F).l,a1
   11633/    9706 : 6100 102C           		bsr.w	AnimateSprite
   11634/    970A : 6100 3FB0           		bsr.w	ObjectFall
   11635/    970E : 6100 3FFE           		bsr.w	DisplaySprite
   11636/    9712 : 3038 F72E           		move.w	($FFFFF72E).w,d0
   11637/    9716 : 0640 00E0           		addi.w	#$E0,d0
   11638/    971A : B068 000C           		cmp.w	$C(a0),d0	; has object moved below the level boundary?
   11639/    971E : 6502                		bcs.s	Obj1F_Delete2	; if yes, branch
   11640/    9720 : 4E75                		rts	
   11641/    9722 :                     ; ===========================================================================
   11642/    9722 :                     
   11643/    9722 :                     Obj1F_Delete2:
   11644/    9722 : 6000 4026           		bra.w	DeleteObject
   11645/    9726 :                     ; ===========================================================================
   11646/    9726 :                     Ani_obj1F:
   11647/    9726 :                     		include	"_anim/obj1F.asm"
(1)    1/    9726 :                     ; ---------------------------------------------------------------------------
(1)    2/    9726 :                     ; Animation script - Crabmeat enemy
(1)    3/    9726 :                     ; ---------------------------------------------------------------------------
(1)    4/    9726 : 0010 0014 0018      		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
(1)    5/    972C : 001C 0022 0028      		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
(1)    6/    9732 : 002E 0032           		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
(1)    7/    9736 : 0F00 FF00           byte_972A:	dc.b $F, 0, $FF, 0
(1)    8/    973A : 0F02 FF00           byte_972E:	dc.b $F, 2, $FF, 0
(1)    9/    973E : 0F22 FF00           byte_9732:	dc.b $F, $22, $FF, 0
(1)   10/    9742 : 0F01 2100 FF00      byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
(1)   11/    9748 : 0F21 0302 FF00      byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
(1)   12/    974E : 0F01 2322 FF00      byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
(1)   13/    9754 : 0F04 FF00           byte_9748:	dc.b $F, 4, $FF, 0
(1)   14/    9758 : 0105 06FF           byte_974C:	dc.b 1,	5, 6, $FF
(1)   15/    975C : (MACRO)             		align 2
(1)   15/    975C :  (MACRO-2)                  cnop 0,2
(1)   15/    975C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   11648/    975C :                     
   11649/    975C :                     ; ---------------------------------------------------------------------------
   11650/    975C :                     ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
   11651/    975C :                     ; ---------------------------------------------------------------------------
   11652/    975C :                     Map_obj1F:
   11653/    975C :                     		include	"_maps/obj1F.asm"
(1)    1/    975C :                     ; ---------------------------------------------------------------------------
(1)    2/    975C :                     ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
(1)    3/    975C :                     ; ---------------------------------------------------------------------------
(1)    4/    975C : 000E 0023           		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
(1)    5/    9760 : 0038 004D           		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
(1)    6/    9764 : 0062 0081           		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
(1)    7/    9768 : 0087                		dc.w byte_97D7-Map_obj1F
(1)    8/    976A : 04                  byte_975E:	dc.b 4
(1)    9/    976B : F009 0000 E8        		dc.b $F0, 9, 0,	0, $E8
(1)   10/    9770 : F009 0800 00        		dc.b $F0, 9, 8,	0, 0
(1)   11/    9775 : 0005 0006 F0        		dc.b 0,	5, 0, 6, $F0
(1)   12/    977A : 0005 0806 00        		dc.b 0,	5, 8, 6, 0
(1)   13/    977F : 04                  byte_9773:	dc.b 4
(1)   14/    9780 : F009 000A E8        		dc.b $F0, 9, 0,	$A, $E8
(1)   15/    9785 : F009 0010 00        		dc.b $F0, 9, 0,	$10, 0
(1)   16/    978A : 0005 0016 F0        		dc.b 0,	5, 0, $16, $F0
(1)   17/    978F : 0009 001A 00        		dc.b 0,	9, 0, $1A, 0
(1)   18/    9794 : 04                  byte_9788:	dc.b 4
(1)   19/    9795 : EC09 0000 E8        		dc.b $EC, 9, 0,	0, $E8
(1)   20/    979A : EC09 0800 00        		dc.b $EC, 9, 8,	0, 0
(1)   21/    979F : FC05 0806 00        		dc.b $FC, 5, 8,	6, 0
(1)   22/    97A4 : FC06 0020 F0        		dc.b $FC, 6, 0,	$20, $F0
(1)   23/    97A9 : 04                  byte_979D:	dc.b 4
(1)   24/    97AA : EC09 000A E8        		dc.b $EC, 9, 0,	$A, $E8
(1)   25/    97AF : EC09 0010 00        		dc.b $EC, 9, 0,	$10, 0
(1)   26/    97B4 : FC09 0026 00        		dc.b $FC, 9, 0,	$26, 0
(1)   27/    97B9 : FC06 002C F0        		dc.b $FC, 6, 0,	$2C, $F0
(1)   28/    97BE : 06                  byte_97B2:	dc.b 6
(1)   29/    97BF : F004 0032 F0        		dc.b $F0, 4, 0,	$32, $F0
(1)   30/    97C4 : F004 0832 00        		dc.b $F0, 4, 8,	$32, 0
(1)   31/    97C9 : F809 0034 E8        		dc.b $F8, 9, 0,	$34, $E8
(1)   32/    97CE : F809 0834 00        		dc.b $F8, 9, 8,	$34, 0
(1)   33/    97D3 : 0804 003A F0        		dc.b 8,	4, 0, $3A, $F0
(1)   34/    97D8 : 0804 083A 00        		dc.b 8,	4, 8, $3A, 0
(1)   35/    97DD : 01                  byte_97D1:	dc.b 1
(1)   36/    97DE : F805 003C F8        		dc.b $F8, 5, 0,	$3C, $F8
(1)   37/    97E3 : 01                  byte_97D7:	dc.b 1
(1)   38/    97E4 : F805 0040 F8        		dc.b $F8, 5, 0,	$40, $F8
(1)   39/    97E9 : (MACRO)             		align 2
(1)   39/    97E9 :  (MACRO-2)                  cnop 0,2
(1)   39/    97E9 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   39/    97E9 : =$C                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   39/    97EA :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   11654/    97EA :                     
   11655/    97EA :                     ; ===========================================================================
   11656/    97EA :                     ; ---------------------------------------------------------------------------
   11657/    97EA :                     ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
   11658/    97EA :                     ; ---------------------------------------------------------------------------
   11659/    97EA :                     
   11660/    97EA :                     Obj22:					; XREF: Obj_Index
   11661/    97EA : 7000                		moveq	#0,d0
   11662/    97EC : 1028 0024           		move.b	$24(a0),d0
   11663/    97F0 : 323B 0006           		move.w	Obj22_Index(pc,d0.w),d1
   11664/    97F4 : 4EFB 1002           		jmp	Obj22_Index(pc,d1.w)
   11665/    97F8 :                     ; ===========================================================================
   11666/    97F8 : 0006                Obj22_Index:	dc.w Obj22_Main-Obj22_Index
   11667/    97FA : 0030                		dc.w Obj22_Action-Obj22_Index
   11668/    97FC : 0140                		dc.w Obj22_Delete-Obj22_Index
   11669/    97FE :                     ; ===========================================================================
   11670/    97FE :                     
   11671/    97FE :                     Obj22_Main:				; XREF: Obj22_Index
   11672/    97FE : 5428 0024           		addq.b	#2,$24(a0)
   11673/    9802 : 217C 0000 9A42 0004 		move.l	#Map_obj22,4(a0)
   11674/    980A : 317C 0444 0002      		move.w	#$444,2(a0)
   11675/    9810 : 117C 0004 0001      		move.b	#4,1(a0)
   11676/    9816 : 117C 0003 0018      		move.b	#3,$18(a0)
   11677/    981C : 117C 0008 0020      		move.b	#8,$20(a0)
   11678/    9822 : 117C 0018 0019      		move.b	#$18,$19(a0)
   11679/    9828 :                     
   11680/    9828 :                     Obj22_Action:				; XREF: Obj22_Index
   11681/    9828 : 7000                		moveq	#0,d0
   11682/    982A : 1028 0025           		move.b	$25(a0),d0
   11683/    982E : 323B 0014           		move.w	Obj22_Index2(pc,d0.w),d1
   11684/    9832 : 4EBB 1010           		jsr	Obj22_Index2(pc,d1.w)
   11685/    9836 : 43F9 0000 9A24      		lea	(Ani_obj22).l,a1
   11686/    983C : 6100 0EF6           		bsr.w	AnimateSprite
   11687/    9840 : 6000 5F7A           		bra.w	MarkObjGone
   11688/    9844 :                     ; ===========================================================================
   11689/    9844 : 0004                Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
   11690/    9846 : 009A                		dc.w Obj22_ChkNrSonic-Obj22_Index2
   11691/    9848 :                     ; ===========================================================================
   11692/    9848 :                     
   11693/    9848 :                     Obj22_Move:				; XREF: Obj22_Index2
   11694/    9848 : 5368 0032           		subq.w	#1,$32(a0)	; subtract 1 from time delay
   11695/    984C : 6A2A                		bpl.s	locret_986C	; if time remains, branch
   11696/    984E : 0828 0001 0034      		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
   11697/    9854 : 6624                		bne.s	Obj22_Fire	; if yes, branch
   11698/    9856 : 5428 0025           		addq.b	#2,$25(a0)
   11699/    985A : 317C 007F 0032      		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
   11700/    9860 : 317C 0400 0010      		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
   11701/    9866 : 117C 0001 001C      		move.b	#1,$1C(a0)	; use "flying" animation
   11702/    986C : 0828 0000 0022      		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
   11703/    9872 : 6604                		bne.s	locret_986C	; if not, branch
   11704/    9874 : 4468 0010           		neg.w	$10(a0)		; move Buzz Bomber to the left
   11705/    9878 :                     
   11706/    9878 :                     locret_986C:
   11707/    9878 : 4E75                		rts	
   11708/    987A :                     ; ===========================================================================
   11709/    987A :                     
   11710/    987A :                     Obj22_Fire:				; XREF: Obj22_Move
   11711/    987A : 6100 431A           		bsr.w	SingleObjLoad
   11712/    987E : 665C                		bne.s	locret_98D0
   11713/    9880 : (MACRO)             		_move.b	#$23,0(a1)	; load missile object
   11713/    9880 :  (MACRO-2)                          insn2op move.b, #$23,0(a1)
   11713/    9880 : 137C 0023 0001                              !move.b   #$23,1+0(a1)
   11713/    9885 :                                             !org    *-1
   11713/    9885 : 00                                          !dc.b   0
   11714/    9886 : 3368 0008 0008      		move.w	8(a0),8(a1)
   11715/    988C : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   11716/    9892 : 0669 001C 000C      		addi.w	#$1C,$C(a1)
   11717/    9898 : 337C 0200 0012      		move.w	#$200,$12(a1)	; move missile downwards
   11718/    989E : 337C 0200 0010      		move.w	#$200,$10(a1)	; move missile to the right
   11719/    98A4 : 303C 0018           		move.w	#$18,d0
   11720/    98A8 : 0828 0000 0022      		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
   11721/    98AE : 6606                		bne.s	loc_98AA	; if not, branch
   11722/    98B0 : 4440                		neg.w	d0
   11723/    98B2 : 4469 0010           		neg.w	$10(a1)		; move missile to the left
   11724/    98B6 :                     
   11725/    98B6 :                     loc_98AA:
   11726/    98B6 : D169 0008           		add.w	d0,8(a1)
   11727/    98BA : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   11728/    98C0 : 337C 000E 0032      		move.w	#$E,$32(a1)
   11729/    98C6 : 2348 003C           		move.l	a0,$3C(a1)
   11730/    98CA : 117C 0001 0034      		move.b	#1,$34(a0)	; set to "already fired" to pralign 2t refiring
   11731/    98D0 : 317C 003B 0032      		move.w	#$3B,$32(a0)
   11732/    98D6 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "firing" animation
   11733/    98DC :                     
   11734/    98DC :                     locret_98D0:
   11735/    98DC : 4E75                		rts	
   11736/    98DE :                     ; ===========================================================================
   11737/    98DE :                     
   11738/    98DE :                     Obj22_ChkNrSonic:			; XREF: Obj22_Index2
   11739/    98DE : 5368 0032           		subq.w	#1,$32(a0)	; subtract 1 from time delay
   11740/    98E2 : 6B30                		bmi.s	Obj22_ChgDir
   11741/    98E4 : 6100 3E02           		bsr.w	SpeedToPos
   11742/    98E8 : 4A28 0034           		tst.b	$34(a0)
   11743/    98EC : 6648                		bne.s	locret_992A
   11744/    98EE : 3038 D008           		move.w	($FFFFD008).w,d0
   11745/    98F2 : 9068 0008           		sub.w	8(a0),d0
   11746/    98F6 : 6A02                		bpl.s	Obj22_SetNrSonic
   11747/    98F8 : 4440                		neg.w	d0
   11748/    98FA :                     
   11749/    98FA :                     Obj22_SetNrSonic:
   11750/    98FA : 0C40 0060           		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
   11751/    98FE : 6436                		bcc.s	locret_992A	; if not, branch
   11752/    9900 : 4A28 0001           		tst.b	1(a0)
   11753/    9904 : 6A30                		bpl.s	locret_992A
   11754/    9906 : 117C 0002 0034      		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
   11755/    990C : 317C 001D 0032      		move.w	#29,$32(a0)	; set time delay to half a second
   11756/    9912 : 6012                		bra.s	Obj22_Stop
   11757/    9914 :                     ; ===========================================================================
   11758/    9914 :                     
   11759/    9914 :                     Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
   11760/    9914 : 117C 0000 0034      		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
   11761/    991A : 0868 0000 0022      		bchg	#0,$22(a0)	; change direction
   11762/    9920 : 317C 003B 0032      		move.w	#59,$32(a0)
   11763/    9926 :                     
   11764/    9926 :                     Obj22_Stop:				; XREF: Obj22_SetNrSonic
   11765/    9926 : 5528 0025           		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
   11766/    992A : 317C 0000 0010      		move.w	#0,$10(a0)	; stop Buzz Bomber moving
   11767/    9930 : 117C 0000 001C      		move.b	#0,$1C(a0)	; use "hovering" animation
   11768/    9936 :                     
   11769/    9936 :                     locret_992A:
   11770/    9936 : 4E75                		rts	
   11771/    9938 :                     ; ===========================================================================
   11772/    9938 :                     
   11773/    9938 :                     Obj22_Delete:				; XREF: Obj22_Index
   11774/    9938 : 6100 3E10           		bsr.w	DeleteObject
   11775/    993C : 4E75                		rts	
   11776/    993E :                     ; ===========================================================================
   11777/    993E :                     ; ---------------------------------------------------------------------------
   11778/    993E :                     ; Object 23 - missile that Buzz	Bomber throws
   11779/    993E :                     ; ---------------------------------------------------------------------------
   11780/    993E :                     
   11781/    993E :                     Obj23:					; XREF: Obj_Index
   11782/    993E : 7000                		moveq	#0,d0
   11783/    9940 : 1028 0024           		move.b	$24(a0),d0
   11784/    9944 : 323B 0006           		move.w	Obj23_Index(pc,d0.w),d1
   11785/    9948 : 4EFB 1002           		jmp	Obj23_Index(pc,d1.w)
   11786/    994C :                     ; ===========================================================================
   11787/    994C : 000A                Obj23_Index:	dc.w Obj23_Main-Obj23_Index
   11788/    994E : 0054                		dc.w Obj23_Animate-Obj23_Index
   11789/    9950 : 0072                		dc.w Obj23_FromBuzz-Obj23_Index
   11790/    9952 : 00B8                		dc.w Obj23_Delete-Obj23_Index
   11791/    9954 : 00BE                		dc.w Obj23_FromNewt-Obj23_Index
   11792/    9956 :                     ; ===========================================================================
   11793/    9956 :                     
   11794/    9956 :                     Obj23_Main:				; XREF: Obj23_Index
   11795/    9956 : 5368 0032           		subq.w	#1,$32(a0)
   11796/    995A : 6A54                		bpl.s	Obj23_ChkCancel
   11797/    995C : 5428 0024           		addq.b	#2,$24(a0)
   11798/    9960 : 217C 0000 9B12 0004 		move.l	#Map_obj23,4(a0)
   11799/    9968 : 317C 2444 0002      		move.w	#$2444,2(a0)
   11800/    996E : 117C 0004 0001      		move.b	#4,1(a0)
   11801/    9974 : 117C 0003 0018      		move.b	#3,$18(a0)
   11802/    997A : 117C 0008 0019      		move.b	#8,$19(a0)
   11803/    9980 : 0228 0003 0022      		andi.b	#3,$22(a0)
   11804/    9986 : 4A28 0028           		tst.b	$28(a0)		; was object created by	a Newtron?
   11805/    998A : 6714                		beq.s	Obj23_Animate	; if not, branch
   11806/    998C : 117C 0008 0024      		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
   11807/    9992 : 117C 0087 0020      		move.b	#$87,$20(a0)
   11808/    9998 : 117C 0001 001C      		move.b	#1,$1C(a0)
   11809/    999E : 6074                		bra.s	Obj23_Animate2
   11810/    99A0 :                     ; ===========================================================================
   11811/    99A0 :                     
   11812/    99A0 :                     Obj23_Animate:				; XREF: Obj23_Index
   11813/    99A0 : 610E                		bsr.s	Obj23_ChkCancel
   11814/    99A2 : 43F9 0000 9A36      		lea	(Ani_obj23).l,a1
   11815/    99A8 : 6100 0D8A           		bsr.w	AnimateSprite
   11816/    99AC : 6000 3D60           		bra.w	DisplaySprite
   11817/    99B0 :                     ; ---------------------------------------------------------------------------
   11818/    99B0 :                     ; Subroutine to	check if the Buzz Bomber which fired the missile has been
   11819/    99B0 :                     ; destroyed, and if it has, then cancel	the missile
   11820/    99B0 :                     ; ---------------------------------------------------------------------------
   11821/    99B0 :                     
   11822/    99B0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   11823/    99B0 :                     
   11824/    99B0 :                     
   11825/    99B0 :                     Obj23_ChkCancel:			; XREF: Obj23_Main
   11826/    99B0 : 2268 003C           		movea.l	$3C(a0),a1
   11827/    99B4 : (MACRO)             		_cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
   11827/    99B4 :  (MACRO-2)                          insn2op cmpi.b, #$27,0(a1)
   11827/    99B4 : 0C29 0027 0001                              !cmpi.b   #$27,1+0(a1)
   11827/    99B9 :                                             !org    *-1
   11827/    99B9 : 00                                          !dc.b   0
   11828/    99BA : 6748                		beq.s	Obj23_Delete	; if yes, branch
   11829/    99BC : 4E75                		rts	
   11830/    99BE :                     ; End of function Obj23_ChkCancel
   11831/    99BE :                     
   11832/    99BE :                     ; ===========================================================================
   11833/    99BE :                     
   11834/    99BE :                     Obj23_FromBuzz:				; XREF: Obj23_Index
   11835/    99BE : 0828 0007 0022      		btst	#7,$22(a0)
   11836/    99C4 : 662E                		bne.s	Obj23_Explode
   11837/    99C6 : 117C 0087 0020      		move.b	#$87,$20(a0)
   11838/    99CC : 117C 0001 001C      		move.b	#1,$1C(a0)
   11839/    99D2 : 6100 3D14           		bsr.w	SpeedToPos
   11840/    99D6 : 43F9 0000 9A36      		lea	(Ani_obj23).l,a1
   11841/    99DC : 6100 0D56           		bsr.w	AnimateSprite
   11842/    99E0 : 6100 3D2C           		bsr.w	DisplaySprite
   11843/    99E4 : 3038 F72E           		move.w	($FFFFF72E).w,d0
   11844/    99E8 : 0640 00E0           		addi.w	#$E0,d0
   11845/    99EC : B068 000C           		cmp.w	$C(a0),d0	; has object moved below the level boundary?
   11846/    99F0 : 6512                		bcs.s	Obj23_Delete	; if yes, branch
   11847/    99F2 : 4E75                		rts	
   11848/    99F4 :                     ; ===========================================================================
   11849/    99F4 :                     
   11850/    99F4 :                     Obj23_Explode:				; XREF: Obj23_FromBuzz
   11851/    99F4 : (MACRO)             		_move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
   11851/    99F4 :  (MACRO-2)                          insn2op move.b, #$24,0(a0)
   11851/    99F4 : 117C 0024 0001                              !move.b   #$24,1+0(a0)
   11851/    99F9 :                                             !org    *-1
   11851/    99F9 : 00                                          !dc.b   0
   11852/    99FA : 117C 0000 0024      		move.b	#0,$24(a0)
   11853/    9A00 : 6000 F2FC           		bra.w	Obj24
   11854/    9A04 :                     ; ===========================================================================
   11855/    9A04 :                     
   11856/    9A04 :                     Obj23_Delete:				; XREF: Obj23_Index
   11857/    9A04 : 6100 3D44           		bsr.w	DeleteObject
   11858/    9A08 : 4E75                		rts	
   11859/    9A0A :                     ; ===========================================================================
   11860/    9A0A :                     
   11861/    9A0A :                     Obj23_FromNewt:				; XREF: Obj23_Index
   11862/    9A0A : 4A28 0001           		tst.b	1(a0)
   11863/    9A0E : 6AF4                		bpl.s	Obj23_Delete
   11864/    9A10 : 6100 3CD6           		bsr.w	SpeedToPos
   11865/    9A14 :                     
   11866/    9A14 :                     Obj23_Animate2:				; XREF: Obj23_Main
   11867/    9A14 : 43F9 0000 9A36      		lea	(Ani_obj23).l,a1
   11868/    9A1A : 6100 0D18           		bsr.w	AnimateSprite
   11869/    9A1E : 6100 3CEE           		bsr.w	DisplaySprite
   11870/    9A22 : 4E75                		rts	
   11871/    9A24 :                     ; ===========================================================================
   11872/    9A24 :                     Ani_obj22:
   11873/    9A24 :                     		include	"_anim/obj22.asm"
(1)    1/    9A24 :                     ; ---------------------------------------------------------------------------
(1)    2/    9A24 :                     ; Animation script - Buzz Bomber enemy
(1)    3/    9A24 :                     ; ---------------------------------------------------------------------------
(1)    4/    9A24 : 0006                		dc.w byte_9A1E-Ani_obj22
(1)    5/    9A26 : 000A                		dc.w byte_9A22-Ani_obj22
(1)    6/    9A28 : 000E                		dc.w byte_9A26-Ani_obj22
(1)    7/    9A2A : 0100 01FF           byte_9A1E:	dc.b 1,	0, 1, $FF
(1)    8/    9A2E : 0102 03FF           byte_9A22:	dc.b 1,	2, 3, $FF
(1)    9/    9A32 : 0104 05FF           byte_9A26:	dc.b 1,	4, 5, $FF
(1)   10/    9A36 : (MACRO)             		align 2
(1)   10/    9A36 :  (MACRO-2)                  cnop 0,2
(1)   10/    9A36 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   11874/    9A36 :                     
   11875/    9A36 :                     Ani_obj23:
   11876/    9A36 :                     		include	"_anim/obj23.asm"
(1)    1/    9A36 :                     ; ---------------------------------------------------------------------------
(1)    2/    9A36 :                     ; Animation script - missile that Buzz Bomber throws
(1)    3/    9A36 :                     ; ---------------------------------------------------------------------------
(1)    4/    9A36 : 0004                		dc.w byte_9A2E-Ani_obj23
(1)    5/    9A38 : 0008                		dc.w byte_9A32-Ani_obj23
(1)    6/    9A3A : 0700 01FC           byte_9A2E:	dc.b 7,	0, 1, $FC
(1)    7/    9A3E : 0102 03FF           byte_9A32:	dc.b 1,	2, 3, $FF
(1)    8/    9A42 : (MACRO)             		align 2
(1)    8/    9A42 :  (MACRO-2)                  cnop 0,2
(1)    8/    9A42 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   11877/    9A42 :                     
   11878/    9A42 :                     ; ---------------------------------------------------------------------------
   11879/    9A42 :                     ; Sprite mappings - Buzz Bomber	enemy
   11880/    9A42 :                     ; ---------------------------------------------------------------------------
   11881/    9A42 :                     Map_obj22:
   11882/    9A42 :                     		include	"_maps/obj22.asm"
(1)    1/    9A42 :                     ; ---------------------------------------------------------------------------
(1)    2/    9A42 :                     ; Sprite mappings - Buzz Bomber	enemy
(1)    3/    9A42 :                     ; ---------------------------------------------------------------------------
(1)    4/    9A42 : 000C 002B           		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
(1)    5/    9A46 : 004A 006E           		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
(1)    6/    9A4A : 0092 00B1           		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
(1)    7/    9A4E : 06                  byte_9A42:	dc.b 6
(1)    8/    9A4F : F409 0000 E8        		dc.b $F4, 9, 0,	0, $E8
(1)    9/    9A54 : F409 000F 00        		dc.b $F4, 9, 0,	$F, 0
(1)   10/    9A59 : 0408 0015 E8        		dc.b 4,	8, 0, $15, $E8
(1)   11/    9A5E : 0404 0018 00        		dc.b 4,	4, 0, $18, 0
(1)   12/    9A63 : F108 001A EC        		dc.b $F1, 8, 0,	$1A, $EC
(1)   13/    9A68 : F104 001D 04        		dc.b $F1, 4, 0,	$1D, 4
(1)   14/    9A6D : 06                  byte_9A61:	dc.b 6
(1)   15/    9A6E : F409 0000 E8        		dc.b $F4, 9, 0,	0, $E8
(1)   16/    9A73 : F409 000F 00        		dc.b $F4, 9, 0,	$F, 0
(1)   17/    9A78 : 0408 0015 E8        		dc.b 4,	8, 0, $15, $E8
(1)   18/    9A7D : 0404 0018 00        		dc.b 4,	4, 0, $18, 0
(1)   19/    9A82 : F408 001F EC        		dc.b $F4, 8, 0,	$1F, $EC
(1)   20/    9A87 : F404 0022 04        		dc.b $F4, 4, 0,	$22, 4
(1)   21/    9A8C : 07                  byte_9A80:	dc.b 7
(1)   22/    9A8D : 0400 0030 0C        		dc.b 4,	0, 0, $30, $C
(1)   23/    9A92 : F409 0000 E8        		dc.b $F4, 9, 0,	0, $E8
(1)   24/    9A97 : F409 000F 00        		dc.b $F4, 9, 0,	$F, 0
(1)   25/    9A9C : 0408 0015 E8        		dc.b 4,	8, 0, $15, $E8
(1)   26/    9AA1 : 0404 0018 00        		dc.b 4,	4, 0, $18, 0
(1)   27/    9AA6 : F108 001A EC        		dc.b $F1, 8, 0,	$1A, $EC
(1)   28/    9AAB : F104 001D 04        		dc.b $F1, 4, 0,	$1D, 4
(1)   29/    9AB0 : 07                  byte_9AA4:	dc.b 7
(1)   30/    9AB1 : 0404 0031 0C        		dc.b 4,	4, 0, $31, $C
(1)   31/    9AB6 : F409 0000 E8        		dc.b $F4, 9, 0,	0, $E8
(1)   32/    9ABB : F409 000F 00        		dc.b $F4, 9, 0,	$F, 0
(1)   33/    9AC0 : 0408 0015 E8        		dc.b 4,	8, 0, $15, $E8
(1)   34/    9AC5 : 0404 0018 00        		dc.b 4,	4, 0, $18, 0
(1)   35/    9ACA : F408 001F EC        		dc.b $F4, 8, 0,	$1F, $EC
(1)   36/    9ACF : F404 0022 04        		dc.b $F4, 4, 0,	$22, 4
(1)   37/    9AD4 : 06                  byte_9AC8:	dc.b 6
(1)   38/    9AD5 : F40D 0000 EC        		dc.b $F4, $D, 0, 0, $EC
(1)   39/    9ADA : 040C 0008 EC        		dc.b 4,	$C, 0, 8, $EC
(1)   40/    9ADF : 0400 000C 0C        		dc.b 4,	0, 0, $C, $C
(1)   41/    9AE4 : 0C04 000D F4        		dc.b $C, 4, 0, $D, $F4
(1)   42/    9AE9 : F108 001A EC        		dc.b $F1, 8, 0,	$1A, $EC
(1)   43/    9AEE : F104 001D 04        		dc.b $F1, 4, 0,	$1D, 4
(1)   44/    9AF3 : 04                  byte_9AE7:	dc.b 4
(1)   45/    9AF4 : F40D 0000 EC        		dc.b $F4, $D, 0, 0, $EC
(1)   46/    9AF9 : 040C 0008 EC        		dc.b 4,	$C, 0, 8, $EC
(1)   47/    9AFE : 0400 000C 0C        		dc.b 4,	0, 0, $C, $C
(1)   48/    9B03 : 0C04 000D F4        		dc.b $C, 4, 0, $D, $F4
(1)   49/    9B08 : F408 001F EC        		dc.b $F4, 8, 0,	$1F, $EC
(1)   50/    9B0D : F404 0022 04        		dc.b $F4, 4, 0,	$22, 4
(1)   51/    9B12 : (MACRO)             		align 2
(1)   51/    9B12 :  (MACRO-2)                  cnop 0,2
(1)   51/    9B12 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   11883/    9B12 :                     
   11884/    9B12 :                     ; ---------------------------------------------------------------------------
   11885/    9B12 :                     ; Sprite mappings - missile that Buzz Bomber throws
   11886/    9B12 :                     ; ---------------------------------------------------------------------------
   11887/    9B12 :                     Map_obj23:
   11888/    9B12 :                     		include	"_maps/obj23.asm"
(1)    1/    9B12 :                     ; ---------------------------------------------------------------------------
(1)    2/    9B12 :                     ; Sprite mappings - missile that Buzz Bomber throws
(1)    3/    9B12 :                     ; ---------------------------------------------------------------------------
(1)    4/    9B12 : 0008 000E           		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
(1)    5/    9B16 : 0014 001A           		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
(1)    6/    9B1A : 01                  byte_9B0E:	dc.b 1
(1)    7/    9B1B : F805 0024 F8        		dc.b $F8, 5, 0,	$24, $F8
(1)    8/    9B20 : 01                  byte_9B14:	dc.b 1
(1)    9/    9B21 : F805 0028 F8        		dc.b $F8, 5, 0,	$28, $F8
(1)   10/    9B26 : 01                  byte_9B1A:	dc.b 1
(1)   11/    9B27 : F805 002C F8        		dc.b $F8, 5, 0,	$2C, $F8
(1)   12/    9B2C : 01                  byte_9B20:	dc.b 1
(1)   13/    9B2D : F805 0033 F8        		dc.b $F8, 5, 0,	$33, $F8
(1)   14/    9B32 : (MACRO)             		align 2
(1)   14/    9B32 :  (MACRO-2)                  cnop 0,2
(1)   14/    9B32 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   11889/    9B32 :                     
   11890/    9B32 :                     ; ===========================================================================
   11891/    9B32 :                     ; ---------------------------------------------------------------------------
   11892/    9B32 :                     ; Object 25 - rings
   11893/    9B32 :                     ; ---------------------------------------------------------------------------
   11894/    9B32 :                     
   11895/    9B32 :                     Obj25:					; XREF: Obj_Index
   11896/    9B32 : 7000                		moveq	#0,d0
   11897/    9B34 : 1028 0024           		move.b	$24(a0),d0
   11898/    9B38 : 323B 0006           		move.w	Obj25_Index(pc,d0.w),d1
   11899/    9B3C : 4EFB 1002           		jmp	Obj25_Index(pc,d1.w)
   11900/    9B40 :                     ; ===========================================================================
   11901/    9B40 : 002A                Obj25_Index:	dc.w Obj25_Main-Obj25_Index
   11902/    9B42 : 00E2                		dc.w Obj25_Animate-Obj25_Index
   11903/    9B44 : 010A                		dc.w Obj25_Collect-Obj25_Index
   11904/    9B46 : 0130                		dc.w Obj25_Sparkle-Obj25_Index
   11905/    9B48 : 013E                		dc.w Obj25_Delete-Obj25_Index
   11906/    9B4A :                     ; ---------------------------------------------------------------------------
   11907/    9B4A :                     ; Distances between rings (format: horizontal, vertical)
   11908/    9B4A :                     ; ---------------------------------------------------------------------------
   11909/    9B4A : 1000                Obj25_PosData:	dc.b $10, 0		; horizontal tight
   11910/    9B4C : 1800                		dc.b $18, 0		; horizontal normal
   11911/    9B4E : 2000                		dc.b $20, 0		; horizontal wide
   11912/    9B50 : 0010                		dc.b 0,	$10		; vertical tight
   11913/    9B52 : 0018                		dc.b 0,	$18		; vertical normal
   11914/    9B54 : 0020                		dc.b 0,	$20		; vertical wide
   11915/    9B56 : 1010                		dc.b $10, $10		; diagonal
   11916/    9B58 : 1818                		dc.b $18, $18
   11917/    9B5A : 2020                		dc.b $20, $20
   11918/    9B5C : F010                		dc.b $F0, $10
   11919/    9B5E : E818                		dc.b $E8, $18
   11920/    9B60 : E020                		dc.b $E0, $20
   11921/    9B62 : 1008                		dc.b $10, 8
   11922/    9B64 : 1810                		dc.b $18, $10
   11923/    9B66 : F008                		dc.b $F0, 8
   11924/    9B68 : E810                		dc.b $E8, $10
   11925/    9B6A :                     ; ===========================================================================
   11926/    9B6A :                     
   11927/    9B6A :                     Obj25_Main:				; XREF: Obj25_Index
   11928/    9B6A : 45F8 FC00           		lea	($FFFFFC00).w,a2
   11929/    9B6E : 7000                		moveq	#0,d0
   11930/    9B70 : 1028 0023           		move.b	$23(a0),d0
   11931/    9B74 : 45F2 0002           		lea	2(a2,d0.w),a2
   11932/    9B78 : 1812                		move.b	(a2),d4
   11933/    9B7A : 1228 0028           		move.b	$28(a0),d1
   11934/    9B7E : 1001                		move.b	d1,d0
   11935/    9B80 : 0241 0007           		andi.w	#7,d1
   11936/    9B84 : 0C41 0007           		cmpi.w	#7,d1
   11937/    9B88 : 6602                		bne.s	loc_9B80
   11938/    9B8A : 7206                		moveq	#6,d1
   11939/    9B8C :                     
   11940/    9B8C :                     loc_9B80:
   11941/    9B8C : 4841                		swap	d1
   11942/    9B8E : 323C 0000           		move.w	#0,d1
   11943/    9B92 : E808                		lsr.b	#4,d0
   11944/    9B94 : D040                		add.w	d0,d0
   11945/    9B96 : 1A3B 00B2           		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
   11946/    9B9A : 4885                		ext.w	d5
   11947/    9B9C : 1C3B 00AD           		move.b	Obj25_PosData+1(pc,d0.w),d6
   11948/    9BA0 : 4886                		ext.w	d6
   11949/    9BA2 : 2248                		movea.l	a0,a1
   11950/    9BA4 : 3428 0008           		move.w	8(a0),d2
   11951/    9BA8 : 3628 000C           		move.w	$C(a0),d3
   11952/    9BAC : E20C                		lsr.b	#1,d4
   11953/    9BAE : 655E                		bcs.s	loc_9C02
   11954/    9BB0 : 0892 0007           		bclr	#7,(a2)
   11955/    9BB4 : 6010                		bra.s	loc_9BBA
   11956/    9BB6 :                     ; ===========================================================================
   11957/    9BB6 :                     
   11958/    9BB6 :                     Obj25_MakeRings:
   11959/    9BB6 : 4841                		swap	d1
   11960/    9BB8 : E20C                		lsr.b	#1,d4
   11961/    9BBA : 6552                		bcs.s	loc_9C02
   11962/    9BBC : 0892 0007           		bclr	#7,(a2)
   11963/    9BC0 : 6100 3FD4           		bsr.w	SingleObjLoad
   11964/    9BC4 : 6654                		bne.s	loc_9C0E
   11965/    9BC6 :                     
   11966/    9BC6 :                     loc_9BBA:				; XREF: Obj25_Main
   11967/    9BC6 : (MACRO)             		_move.b	#$25,0(a1)	; load ring object
   11967/    9BC6 :  (MACRO-2)                          insn2op move.b, #$25,0(a1)
   11967/    9BC6 : 137C 0025 0001                              !move.b   #$25,1+0(a1)
   11967/    9BCB :                                             !org    *-1
   11967/    9BCB : 00                                          !dc.b   0
   11968/    9BCC : 5429 0024           		addq.b	#2,$24(a1)
   11969/    9BD0 : 3342 0008           		move.w	d2,8(a1)	; set x-axis position based on d2
   11970/    9BD4 : 3368 0008 0032      		move.w	8(a0),$32(a1)
   11971/    9BDA : 3343 000C           		move.w	d3,$C(a1)	; set y-axis position based on d3
   11972/    9BDE : 237C 0000 9F9E 0004 		move.l	#Map_obj25,4(a1)
   11973/    9BE6 : 337C 27B2 0002      		move.w	#$27B2,2(a1)
   11974/    9BEC : 137C 0004 0001      		move.b	#4,1(a1)
   11975/    9BF2 : 137C 0002 0018      		move.b	#2,$18(a1)
   11976/    9BF8 : 137C 0047 0020      		move.b	#$47,$20(a1)
   11977/    9BFE : 137C 0008 0019      		move.b	#8,$19(a1)
   11978/    9C04 : 1368 0023 0023      		move.b	$23(a0),$23(a1)
   11979/    9C0A : 1341 0034           		move.b	d1,$34(a1)
   11980/    9C0E :                     
   11981/    9C0E :                     loc_9C02:
   11982/    9C0E : 5241                		addq.w	#1,d1
   11983/    9C10 : D445                		add.w	d5,d2		; add ring spacing value to d2
   11984/    9C12 : D646                		add.w	d6,d3		; add ring spacing value to d3
   11985/    9C14 : 4841                		swap	d1
   11986/    9C16 : 51C9 FF9E           		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
   11987/    9C1A :                     
   11988/    9C1A :                     loc_9C0E:
   11989/    9C1A : 0812 0000           		btst	#0,(a2)
   11990/    9C1E : 6600 3B2A           		bne.w	DeleteObject
   11991/    9C22 :                     
   11992/    9C22 :                     Obj25_Animate:				; XREF: Obj25_Index
   11993/    9C22 : 1178 FEC3 001A      		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
   11994/    9C28 : 6100 3AE4           		bsr.w	DisplaySprite
   11995/    9C2C : 3028 0032           		move.w	$32(a0),d0
   11996/    9C30 : 0240 FF80           		andi.w	#$FF80,d0
   11997/    9C34 : 3238 F700           		move.w	($FFFFF700).w,d1
   11998/    9C38 : 0441 0080           		subi.w	#$80,d1
   11999/    9C3C : 0241 FF80           		andi.w	#$FF80,d1
   12000/    9C40 : 9041                		sub.w	d1,d0
   12001/    9C42 : 0C40 0280           		cmpi.w	#$280,d0
   12002/    9C46 : 6236                		bhi.s	Obj25_Delete
   12003/    9C48 : 4E75                		rts	
   12004/    9C4A :                     ; ===========================================================================
   12005/    9C4A :                     
   12006/    9C4A :                     Obj25_Collect:				; XREF: Obj25_Index
   12007/    9C4A : 5428 0024           		addq.b	#2,$24(a0)
   12008/    9C4E : 117C 0000 0020      		move.b	#0,$20(a0)
   12009/    9C54 : 117C 0001 0018      		move.b	#1,$18(a0)
   12010/    9C5A : 6100 0026           		bsr.w	CollectRing
   12011/    9C5E : 45F8 FC00           		lea	($FFFFFC00).w,a2
   12012/    9C62 : 7000                		moveq	#0,d0
   12013/    9C64 : 1028 0023           		move.b	$23(a0),d0
   12014/    9C68 : 1228 0034           		move.b	$34(a0),d1
   12015/    9C6C : 03F2 0002           		bset	d1,2(a2,d0.w)
   12016/    9C70 :                     
   12017/    9C70 :                     Obj25_Sparkle:				; XREF: Obj25_Index
   12018/    9C70 : 43F9 0000 9F96      		lea	(Ani_obj25).l,a1
   12019/    9C76 : 6100 0ABC           		bsr.w	AnimateSprite
   12020/    9C7A : 6000 3A92           		bra.w	DisplaySprite
   12021/    9C7E :                     ; ===========================================================================
   12022/    9C7E :                     
   12023/    9C7E :                     Obj25_Delete:				; XREF: Obj25_Index
   12024/    9C7E : 6000 3ACA           		bra.w	DeleteObject
   12025/    9C82 :                     
   12026/    9C82 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   12027/    9C82 :                     
   12028/    9C82 :                     
   12029/    9C82 :                     CollectRing:				; XREF: Obj25_Collect
   12030/    9C82 : 5278 FE20           		addq.w	#1,($FFFFFE20).w ; add 1 to rings
   12031/    9C86 : 0038 0001 FE1D      		ori.b	#1,($FFFFFE1D).w ; update the rings counter
   12032/    9C8C : 303C 00B5           		move.w	#$B5,d0		; play ring sound
   12033/    9C90 : 0C78 0064 FE20      		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
   12034/    9C96 : 6524                		bcs.s	Obj25_PlaySnd	; if yes, branch
   12035/    9C98 : 08F8 0001 FE1B      		bset	#1,($FFFFFE1B).w ; update lives	counter
   12036/    9C9E : 6710                		beq.s	loc_9CA4
   12037/    9CA0 : 0C78 00C8 FE20      		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
   12038/    9CA6 : 6514                		bcs.s	Obj25_PlaySnd	; if yes, branch
   12039/    9CA8 : 08F8 0002 FE1B      		bset	#2,($FFFFFE1B).w ; update lives	counter
   12040/    9CAE : 660C                		bne.s	Obj25_PlaySnd
   12041/    9CB0 :                     
   12042/    9CB0 :                     loc_9CA4:
   12043/    9CB0 : 5238 FE12           		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
   12044/    9CB4 : 5238 FE1C           		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
   12045/    9CB8 : 303C 0088           		move.w	#$88,d0		; play extra life music
   12046/    9CBC :                     
   12047/    9CBC :                     Obj25_PlaySnd:
   12048/    9CBC : 4EF9 0000 139C      		jmp	(PlaySound_Special).l
   12049/    9CC2 :                     ; End of function CollectRing
   12050/    9CC2 :                     
   12051/    9CC2 :                     ; ===========================================================================
   12052/    9CC2 :                     ; ---------------------------------------------------------------------------
   12053/    9CC2 :                     ; Object 37 - rings flying out of Sonic	when he"s hit
   12054/    9CC2 :                     ; ---------------------------------------------------------------------------
   12055/    9CC2 :                     
   12056/    9CC2 :                     Obj37:					; XREF: Obj_Index
   12057/    9CC2 : 7000                		moveq	#0,d0
   12058/    9CC4 : 1028 0024           		move.b	$24(a0),d0
   12059/    9CC8 : 323B 0006           		move.w	Obj37_Index(pc,d0.w),d1
   12060/    9CCC : 4EFB 1002           		jmp	Obj37_Index(pc,d1.w)
   12061/    9CD0 :                     ; ===========================================================================
   12062/    9CD0 : 000A                Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
   12063/    9CD2 : 00CA                		dc.w Obj37_Bounce-Obj37_Index
   12064/    9CD4 : 011C                		dc.w Obj37_Collect-Obj37_Index
   12065/    9CD6 : 0130                		dc.w Obj37_Sparkle-Obj37_Index
   12066/    9CD8 : 013E                		dc.w Obj37_Delete-Obj37_Index
   12067/    9CDA :                     ; ===========================================================================
   12068/    9CDA :                     
   12069/    9CDA :                     Obj37_CountRings:			; XREF: Obj37_Index
   12070/    9CDA : 2248                		movea.l	a0,a1
   12071/    9CDC : 7A00                		moveq	#0,d5
   12072/    9CDE : 3A38 FE20           		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
   12073/    9CE2 : 7020                		moveq	#32,d0
   12074/    9CE4 : BA40                		cmp.w	d0,d5		; do you have 32 or more?
   12075/    9CE6 : 6502                		bcs.s	loc_9CDE	; if not, branch
   12076/    9CE8 : 3A00                		move.w	d0,d5		; if yes, set d5 to 32
   12077/    9CEA :                     
   12078/    9CEA :                     loc_9CDE:
   12079/    9CEA : 5345                		subq.w	#1,d5
   12080/    9CEC : 383C 0288           		move.w	#$288,d4
   12081/    9CF0 : 6008                		bra.s	Obj37_MakeRings
   12082/    9CF2 :                     ; ===========================================================================
   12083/    9CF2 :                     
   12084/    9CF2 :                     Obj37_Loop:
   12085/    9CF2 : 6100 3EA2           		bsr.w	SingleObjLoad
   12086/    9CF6 : 6600 0086           		bne.w	Obj37_ResetCounter
   12087/    9CFA :                     
   12088/    9CFA :                     Obj37_MakeRings:			; XREF: Obj37_CountRings
   12089/    9CFA : (MACRO)             		_move.b	#$37,0(a1)	; load bouncing	ring object
   12089/    9CFA :  (MACRO-2)                          insn2op move.b, #$37,0(a1)
   12089/    9CFA : 137C 0037 0001                              !move.b   #$37,1+0(a1)
   12089/    9CFF :                                             !org    *-1
   12089/    9CFF : 00                                          !dc.b   0
   12090/    9D00 : 5429 0024           		addq.b	#2,$24(a1)
   12091/    9D04 : 137C 0008 0016      		move.b	#8,$16(a1)
   12092/    9D0A : 137C 0008 0017      		move.b	#8,$17(a1)
   12093/    9D10 : 3368 0008 0008      		move.w	8(a0),8(a1)
   12094/    9D16 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   12095/    9D1C : 237C 0000 9F9E 0004 		move.l	#Map_obj25,4(a1)
   12096/    9D24 : 337C 27B2 0002      		move.w	#$27B2,2(a1)
   12097/    9D2A : 137C 0004 0001      		move.b	#4,1(a1)
   12098/    9D30 : 137C 0003 0018      		move.b	#3,$18(a1)
   12099/    9D36 : 137C 0047 0020      		move.b	#$47,$20(a1)
   12100/    9D3C : 137C 0008 0019      		move.b	#8,$19(a1)
   12101/    9D42 : 11FC 00FF FEC6      		move.b	#-1,($FFFFFEC6).w
   12102/    9D48 : 4A44                		tst.w	d4
   12103/    9D4A : 6B22                		bmi.s	loc_9D62
   12104/    9D4C : 3004                		move.w	d4,d0
   12105/    9D4E : 6100 8C9A           		bsr.w	CalcSine
   12106/    9D52 : 3404                		move.w	d4,d2
   12107/    9D54 : E04A                		lsr.w	#8,d2
   12108/    9D56 : E560                		asl.w	d2,d0
   12109/    9D58 : E561                		asl.w	d2,d1
   12110/    9D5A : 3400                		move.w	d0,d2
   12111/    9D5C : 3601                		move.w	d1,d3
   12112/    9D5E : 0604 0010           		addi.b	#$10,d4
   12113/    9D62 : 640A                		bcc.s	loc_9D62
   12114/    9D64 : 0444 0080           		subi.w	#$80,d4
   12115/    9D68 : 6404                		bcc.s	loc_9D62
   12116/    9D6A : 383C 0288           		move.w	#$288,d4
   12117/    9D6E :                     
   12118/    9D6E :                     loc_9D62:
   12119/    9D6E : 3342 0010           		move.w	d2,$10(a1)
   12120/    9D72 : 3343 0012           		move.w	d3,$12(a1)
   12121/    9D76 : 4442                		neg.w	d2
   12122/    9D78 : 4444                		neg.w	d4
   12123/    9D7A : 51CD FF76           		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
   12124/    9D7E :                     
   12125/    9D7E :                     Obj37_ResetCounter:			; XREF: Obj37_Loop
   12126/    9D7E : 31FC 0000 FE20      		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
   12127/    9D84 : 11FC 0080 FE1D      		move.b	#$80,($FFFFFE1D).w ; update ring counter
   12128/    9D8A : 11FC 0000 FE1B      		move.b	#0,($FFFFFE1B).w
   12129/    9D90 : 303C 00C6           		move.w	#$C6,d0
   12130/    9D94 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play ring loss sound
   12131/    9D9A :                     
   12132/    9D9A :                     Obj37_Bounce:				; XREF: Obj37_Index
   12133/    9D9A : 1178 FEC7 001A      		move.b	($FFFFFEC7).w,$1A(a0)
   12134/    9DA0 : 6100 3946           		bsr.w	SpeedToPos
   12135/    9DA4 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   12136/    9DAA : 6B28                		bmi.s	Obj37_ChkDel
   12137/    9DAC : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   12138/    9DB0 : D007                		add.b	d7,d0
   12139/    9DB2 : 0200 0003           		andi.b	#3,d0
   12140/    9DB6 : 661C                		bne.s	Obj37_ChkDel
   12141/    9DB8 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   12142/    9DBE : 4A41                		tst.w	d1
   12143/    9DC0 : 6A12                		bpl.s	Obj37_ChkDel
   12144/    9DC2 : D368 000C           		add.w	d1,$C(a0)
   12145/    9DC6 : 3028 0012           		move.w	$12(a0),d0
   12146/    9DCA : E440                		asr.w	#2,d0
   12147/    9DCC : 9168 0012           		sub.w	d0,$12(a0)
   12148/    9DD0 : 4468 0012           		neg.w	$12(a0)
   12149/    9DD4 :                     
   12150/    9DD4 :                     Obj37_ChkDel:				; XREF: Obj37_Bounce
   12151/    9DD4 : 4A38 FEC6           		tst.b	($FFFFFEC6).w
   12152/    9DD8 : 6734                		beq.s	Obj37_Delete
   12153/    9DDA : 3038 F72E           		move.w	($FFFFF72E).w,d0
   12154/    9DDE : 0640 00E0           		addi.w	#$E0,d0
   12155/    9DE2 : B068 000C           		cmp.w	$C(a0),d0	; has object moved below level boundary?
   12156/    9DE6 : 6526                		bcs.s	Obj37_Delete	; if yes, branch
   12157/    9DE8 : 6000 3924           		bra.w	DisplaySprite
   12158/    9DEC :                     ; ===========================================================================
   12159/    9DEC :                     
   12160/    9DEC :                     Obj37_Collect:				; XREF: Obj37_Index
   12161/    9DEC : 5428 0024           		addq.b	#2,$24(a0)
   12162/    9DF0 : 117C 0000 0020      		move.b	#0,$20(a0)
   12163/    9DF6 : 117C 0001 0018      		move.b	#1,$18(a0)
   12164/    9DFC : 6100 FE84           		bsr.w	CollectRing
   12165/    9E00 :                     
   12166/    9E00 :                     Obj37_Sparkle:				; XREF: Obj37_Index
   12167/    9E00 : 43F9 0000 9F96      		lea	(Ani_obj25).l,a1
   12168/    9E06 : 6100 092C           		bsr.w	AnimateSprite
   12169/    9E0A : 6000 3902           		bra.w	DisplaySprite
   12170/    9E0E :                     ; ===========================================================================
   12171/    9E0E :                     
   12172/    9E0E :                     Obj37_Delete:				; XREF: Obj37_Index
   12173/    9E0E : 6000 393A           		bra.w	DeleteObject
   12174/    9E12 :                     ; ===========================================================================
   12175/    9E12 :                     ; ---------------------------------------------------------------------------
   12176/    9E12 :                     ; Object 4B - giant ring for entry to special stage
   12177/    9E12 :                     ; ---------------------------------------------------------------------------
   12178/    9E12 :                     
   12179/    9E12 :                     Obj4B:					; XREF: Obj_Index
   12180/    9E12 : 7000                		moveq	#0,d0
   12181/    9E14 : 1028 0024           		move.b	$24(a0),d0
   12182/    9E18 : 323B 0006           		move.w	Obj4B_Index(pc,d0.w),d1
   12183/    9E1C : 4EFB 1002           		jmp	Obj4B_Index(pc,d1.w)
   12184/    9E20 :                     ; ===========================================================================
   12185/    9E20 : 0008                Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
   12186/    9E22 : 0052                		dc.w Obj4B_Animate-Obj4B_Index
   12187/    9E24 : 007A                		dc.w Obj4B_Collect-Obj4B_Index
   12188/    9E26 : 00BE                		dc.w Obj4B_Delete-Obj4B_Index
   12189/    9E28 :                     ; ===========================================================================
   12190/    9E28 :                     
   12191/    9E28 :                     Obj4B_Main:				; XREF: Obj4B_Index
   12192/    9E28 : 217C 0000 9FDE 0004 		move.l	#Map_obj4B,4(a0)
   12193/    9E30 : 317C 2400 0002      		move.w	#$2400,2(a0)
   12194/    9E36 : 0028 0004 0001      		ori.b	#4,1(a0)
   12195/    9E3C : 117C 0040 0019      		move.b	#$40,$19(a0)
   12196/    9E42 : 4A28 0001           		tst.b	1(a0)
   12197/    9E46 : 6A2A                		bpl.s	Obj4B_Animate
   12198/    9E48 : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
   12199/    9E4E : 6700 008E           		beq.w	Obj4B_Delete	; if yes, branch
   12200/    9E52 : 0C78 0032 FE20      		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
   12201/    9E58 : 6402                		bcc.s	Obj4B_Okay	; if yes, branch
   12202/    9E5A : 4E75                		rts	
   12203/    9E5C :                     ; ===========================================================================
   12204/    9E5C :                     
   12205/    9E5C :                     Obj4B_Okay:				; XREF: Obj4B_Main
   12206/    9E5C : 5428 0024           		addq.b	#2,$24(a0)
   12207/    9E60 : 117C 0002 0018      		move.b	#2,$18(a0)
   12208/    9E66 : 117C 0052 0020      		move.b	#$52,$20(a0)
   12209/    9E6C : 31FC 0C40 F7BE      		move.w	#$C40,($FFFFF7BE).w
   12210/    9E72 :                     
   12211/    9E72 :                     Obj4B_Animate:				; XREF: Obj4B_Index
   12212/    9E72 : 1178 FEC3 001A      		move.b	($FFFFFEC3).w,$1A(a0)
   12213/    9E78 : 3028 0008           		move.w	8(a0),d0
   12214/    9E7C : 0240 FF80           		andi.w	#$FF80,d0
   12215/    9E80 : 3238 F700           		move.w	($FFFFF700).w,d1
   12216/    9E84 : 0441 0080           		subi.w	#$80,d1
   12217/    9E88 : 0241 FF80           		andi.w	#$FF80,d1
   12218/    9E8C : 9041                		sub.w	d1,d0
   12219/    9E8E : 0C40 0280           		cmpi.w	#$280,d0
   12220/    9E92 : 6200 38B6           		bhi.w	DeleteObject
   12221/    9E96 : 6000 3876           		bra.w	DisplaySprite
   12222/    9E9A :                     ; ===========================================================================
   12223/    9E9A :                     
   12224/    9E9A :                     Obj4B_Collect:				; XREF: Obj4B_Index
   12225/    9E9A : 5528 0024           		subq.b	#2,$24(a0)
   12226/    9E9E : 117C 0000 0020      		move.b	#0,$20(a0)
   12227/    9EA4 : 6100 3CF0           		bsr.w	SingleObjLoad
   12228/    9EA8 : 6600 0028           		bne.w	Obj4B_PlaySnd
   12229/    9EAC : (MACRO)             		_move.b	#$7C,0(a1)	; load giant ring flash	object
   12229/    9EAC :  (MACRO-2)                          insn2op move.b, #$7C,0(a1)
   12229/    9EAC : 137C 007C 0001                              !move.b   #$7C,1+0(a1)
   12229/    9EB1 :                                             !org    *-1
   12229/    9EB1 : 00                                          !dc.b   0
   12230/    9EB2 : 3368 0008 0008      		move.w	8(a0),8(a1)
   12231/    9EB8 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   12232/    9EBE : 2348 003C           		move.l	a0,$3C(a1)
   12233/    9EC2 : 3038 D008           		move.w	($FFFFD008).w,d0
   12234/    9EC6 : B068 0008           		cmp.w	8(a0),d0	; has Sonic come from the left?
   12235/    9ECA : 6506                		bcs.s	Obj4B_PlaySnd	; if yes, branch
   12236/    9ECC : 08E9 0000 0001      		bset	#0,1(a1)	; reverse flash	object
   12237/    9ED2 :                     
   12238/    9ED2 :                     Obj4B_PlaySnd:
   12239/    9ED2 : 303C 00C3           		move.w	#$C3,d0
   12240/    9ED6 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play giant ring	sound
   12241/    9EDC : 6094                		bra.s	Obj4B_Animate
   12242/    9EDE :                     ; ===========================================================================
   12243/    9EDE :                     
   12244/    9EDE :                     Obj4B_Delete:				; XREF: Obj4B_Index
   12245/    9EDE : 6000 386A           		bra.w	DeleteObject
   12246/    9EE2 :                     ; ===========================================================================
   12247/    9EE2 :                     ; ---------------------------------------------------------------------------
   12248/    9EE2 :                     ; Object 7C - flash effect when	you collect the	giant ring
   12249/    9EE2 :                     ; ---------------------------------------------------------------------------
   12250/    9EE2 :                     
   12251/    9EE2 :                     Obj7C:					; XREF: Obj_Index
   12252/    9EE2 : 7000                		moveq	#0,d0
   12253/    9EE4 : 1028 0024           		move.b	$24(a0),d0
   12254/    9EE8 : 323B 0006           		move.w	Obj7C_Index(pc,d0.w),d1
   12255/    9EEC : 4EFB 1002           		jmp	Obj7C_Index(pc,d1.w)
   12256/    9EF0 :                     ; ===========================================================================
   12257/    9EF0 : 0006                Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
   12258/    9EF2 : 0030                		dc.w Obj7C_ChkDel-Obj7C_Index
   12259/    9EF4 : 00A2                		dc.w Obj7C_Delete-Obj7C_Index
   12260/    9EF6 :                     ; ===========================================================================
   12261/    9EF6 :                     
   12262/    9EF6 :                     Obj7C_Main:				; XREF: Obj7C_Index
   12263/    9EF6 : 5428 0024           		addq.b	#2,$24(a0)
   12264/    9EFA : 217C 0000 A080 0004 		move.l	#Map_obj7C,4(a0)
   12265/    9F02 : 317C 2462 0002      		move.w	#$2462,2(a0)
   12266/    9F08 : 0028 0004 0001      		ori.b	#4,1(a0)
   12267/    9F0E : 117C 0000 0018      		move.b	#0,$18(a0)
   12268/    9F14 : 117C 0020 0019      		move.b	#$20,$19(a0)
   12269/    9F1A : 117C 00FF 001A      		move.b	#$FF,$1A(a0)
   12270/    9F20 :                     
   12271/    9F20 :                     Obj7C_ChkDel:				; XREF: Obj7C_Index
   12272/    9F20 : 6122                		bsr.s	Obj7C_Collect
   12273/    9F22 : 3028 0008           		move.w	8(a0),d0
   12274/    9F26 : 0240 FF80           		andi.w	#$FF80,d0
   12275/    9F2A : 3238 F700           		move.w	($FFFFF700).w,d1
   12276/    9F2E : 0441 0080           		subi.w	#$80,d1
   12277/    9F32 : 0241 FF80           		andi.w	#$FF80,d1
   12278/    9F36 : 9041                		sub.w	d1,d0
   12279/    9F38 : 0C40 0280           		cmpi.w	#$280,d0
   12280/    9F3C : 6200 380C           		bhi.w	DeleteObject
   12281/    9F40 : 6000 37CC           		bra.w	DisplaySprite
   12282/    9F44 :                     
   12283/    9F44 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   12284/    9F44 :                     
   12285/    9F44 :                     
   12286/    9F44 :                     Obj7C_Collect:				; XREF: Obj7C_ChkDel
   12287/    9F44 : 5328 001E           		subq.b	#1,$1E(a0)
   12288/    9F48 : 6A38                		bpl.s	locret_9F76
   12289/    9F4A : 117C 0001 001E      		move.b	#1,$1E(a0)
   12290/    9F50 : 5228 001A           		addq.b	#1,$1A(a0)
   12291/    9F54 : 0C28 0008 001A      		cmpi.b	#8,$1A(a0)	; has animation	finished?
   12292/    9F5A : 6428                		bcc.s	Obj7C_End	; if yes, branch
   12293/    9F5C : 0C28 0003 001A      		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
   12294/    9F62 : 661E                		bne.s	locret_9F76	; if not, branch
   12295/    9F64 : 2268 003C           		movea.l	$3C(a0),a1
   12296/    9F68 : 137C 0006 0024      		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
   12297/    9F6E : 11FC 001C D01C      		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
   12298/    9F74 : 11FC 0001 F7CD      		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
   12299/    9F7A : 4238 FE2D           		clr.b	($FFFFFE2D).w	; remove invincibility
   12300/    9F7E : 4238 FE2C           		clr.b	($FFFFFE2C).w	; remove shield
   12301/    9F82 :                     
   12302/    9F82 :                     locret_9F76:
   12303/    9F82 : 4E75                		rts	
   12304/    9F84 :                     ; ===========================================================================
   12305/    9F84 :                     
   12306/    9F84 :                     Obj7C_End:				; XREF: Obj7C_Collect
   12307/    9F84 : 5428 0024           		addq.b	#2,$24(a0)
   12308/    9F88 : 31FC 0000 D000      		move.w	#0,($FFFFD000).w ; remove Sonic	object
   12309/    9F8E : 588F                		addq.l	#4,sp
   12310/    9F90 : 4E75                		rts	
   12311/    9F92 :                     ; End of function Obj7C_Collect
   12312/    9F92 :                     
   12313/    9F92 :                     ; ===========================================================================
   12314/    9F92 :                     
   12315/    9F92 :                     Obj7C_Delete:				; XREF: Obj7C_Index
   12316/    9F92 : 6000 37B6           		bra.w	DeleteObject
   12317/    9F96 :                     ; ===========================================================================
   12318/    9F96 :                     Ani_obj25:
   12319/    9F96 :                     		include	"_anim/obj25.asm"
(1)    1/    9F96 :                     ; ---------------------------------------------------------------------------
(1)    2/    9F96 :                     ; Animation script - ring
(1)    3/    9F96 :                     ; ---------------------------------------------------------------------------
(1)    4/    9F96 : 0002                		dc.w byte_9F8C-Ani_obj25
(1)    5/    9F98 : 0504 0506 07FC      byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
(1)    6/    9F9E : (MACRO)             		align 2
(1)    6/    9F9E :  (MACRO-2)                  cnop 0,2
(1)    6/    9F9E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   12320/    9F9E :                     
   12321/    9F9E :                     ; ---------------------------------------------------------------------------
   12322/    9F9E :                     ; Sprite mappings - rings
   12323/    9F9E :                     ; ---------------------------------------------------------------------------
   12324/    9F9E :                     Map_obj25:
   12325/    9F9E :                     		include	"_maps/obj25.asm"
(1)    1/    9F9E :                     ; ---------------------------------------------------------------------------
(1)    2/    9F9E :                     ; Sprite mappings - rings
(1)    3/    9F9E :                     ; ---------------------------------------------------------------------------
(1)    4/    9F9E : 0010 0016           		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
(1)    5/    9FA2 : 001C 0022           		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
(1)    6/    9FA6 : 0028 002E           		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
(1)    7/    9FAA : 0034 003A           		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
(1)    8/    9FAE : 01                  byte_9FA2:	dc.b 1
(1)    9/    9FAF : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   10/    9FB4 : 01                  byte_9FA8:	dc.b 1
(1)   11/    9FB5 : F805 0004 F8        		dc.b $F8, 5, 0,	4, $F8
(1)   12/    9FBA : 01                  byte_9FAE:	dc.b 1
(1)   13/    9FBB : F801 0008 FC        		dc.b $F8, 1, 0,	8, $FC
(1)   14/    9FC0 : 01                  byte_9FB4:	dc.b 1
(1)   15/    9FC1 : F805 0804 F8        		dc.b $F8, 5, 8,	4, $F8
(1)   16/    9FC6 : 01                  byte_9FBA:	dc.b 1
(1)   17/    9FC7 : F805 000A F8        		dc.b $F8, 5, 0,	$A, $F8
(1)   18/    9FCC : 01                  byte_9FC0:	dc.b 1
(1)   19/    9FCD : F805 180A F8        		dc.b $F8, 5, $18, $A, $F8
(1)   20/    9FD2 : 01                  byte_9FC6:	dc.b 1
(1)   21/    9FD3 : F805 080A F8        		dc.b $F8, 5, 8,	$A, $F8
(1)   22/    9FD8 : 01                  byte_9FCC:	dc.b 1
(1)   23/    9FD9 : F805 100A F8        		dc.b $F8, 5, $10, $A, $F8
(1)   24/    9FDE : (MACRO)             		align 2
(1)   24/    9FDE :  (MACRO-2)                  cnop 0,2
(1)   24/    9FDE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   12326/    9FDE :                     
   12327/    9FDE :                     ; ---------------------------------------------------------------------------
   12328/    9FDE :                     ; Sprite mappings - giant ring
   12329/    9FDE :                     ; ---------------------------------------------------------------------------
   12330/    9FDE :                     Map_obj4B:
   12331/    9FDE :                     		include	"_maps/obj4B.asm"
(1)    1/    9FDE :                     ; ---------------------------------------------------------------------------
(1)    2/    9FDE :                     ; Sprite mappings - giant ring
(1)    3/    9FDE :                     ; ---------------------------------------------------------------------------
(1)    4/    9FDE : 0008 003B           		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
(1)    5/    9FE2 : 0064 0079           		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
(1)    6/    9FE6 : 0A                  byte_9FDA:	dc.b $A
(1)    7/    9FE7 : E008 0000 E8        		dc.b $E0, 8, 0,	0, $E8
(1)    8/    9FEC : E008 0003 00        		dc.b $E0, 8, 0,	3, 0
(1)    9/    9FF1 : E80C 0006 E0        		dc.b $E8, $C, 0, 6, $E0
(1)   10/    9FF6 : E80C 000A 00        		dc.b $E8, $C, 0, $A, 0
(1)   11/    9FFB : F007 000E E0        		dc.b $F0, 7, 0,	$E, $E0
(1)   12/    A000 : F007 0016 10        		dc.b $F0, 7, 0,	$16, $10
(1)   13/    A005 : 100C 001E E0        		dc.b $10, $C, 0, $1E, $E0
(1)   14/    A00A : 100C 0022 00        		dc.b $10, $C, 0, $22, 0
(1)   15/    A00F : 1808 0026 E8        		dc.b $18, 8, 0,	$26, $E8
(1)   16/    A014 : 1808 0029 00        		dc.b $18, 8, 0,	$29, 0
(1)   17/    A019 : 08                  byte_A00D:	dc.b 8
(1)   18/    A01A : E00C 002C F0        		dc.b $E0, $C, 0, $2C, $F0
(1)   19/    A01F : E808 0030 E8        		dc.b $E8, 8, 0,	$30, $E8
(1)   20/    A024 : E809 0033 00        		dc.b $E8, 9, 0,	$33, 0
(1)   21/    A029 : F007 0039 E8        		dc.b $F0, 7, 0,	$39, $E8
(1)   22/    A02E : F805 0041 08        		dc.b $F8, 5, 0,	$41, 8
(1)   23/    A033 : 0809 0045 00        		dc.b 8,	9, 0, $45, 0
(1)   24/    A038 : 1008 004B E8        		dc.b $10, 8, 0,	$4B, $E8
(1)   25/    A03D : 180C 004E F0        		dc.b $18, $C, 0, $4E, $F0
(1)   26/    A042 : 04                  byte_A036:	dc.b 4
(1)   27/    A043 : E007 0052 F4        		dc.b $E0, 7, 0,	$52, $F4
(1)   28/    A048 : E003 0852 04        		dc.b $E0, 3, 8,	$52, 4
(1)   29/    A04D : 0007 005A F4        		dc.b 0,	7, 0, $5A, $F4
(1)   30/    A052 : 0003 085A 04        		dc.b 0,	3, 8, $5A, 4
(1)   31/    A057 : 08                  byte_A04B:	dc.b 8
(1)   32/    A058 : E00C 082C F0        		dc.b $E0, $C, 8, $2C, $F0
(1)   33/    A05D : E808 0830 00        		dc.b $E8, 8, 8,	$30, 0
(1)   34/    A062 : E809 0833 E8        		dc.b $E8, 9, 8,	$33, $E8
(1)   35/    A067 : F007 0839 08        		dc.b $F0, 7, 8,	$39, 8
(1)   36/    A06C : F805 0841 E8        		dc.b $F8, 5, 8,	$41, $E8
(1)   37/    A071 : 0809 0845 E8        		dc.b 8,	9, 8, $45, $E8
(1)   38/    A076 : 1008 084B 00        		dc.b $10, 8, 8,	$4B, 0
(1)   39/    A07B : 180C 084E F0        		dc.b $18, $C, 8, $4E, $F0
(1)   40/    A080 : (MACRO)             		align 2
(1)   40/    A080 :  (MACRO-2)                  cnop 0,2
(1)   40/    A080 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   12332/    A080 :                     
   12333/    A080 :                     ; ---------------------------------------------------------------------------
   12334/    A080 :                     ; Sprite mappings - flash effect when you collect the giant ring
   12335/    A080 :                     ; ---------------------------------------------------------------------------
   12336/    A080 :                     Map_obj7C:
   12337/    A080 :                     		include	"_maps/obj7C.asm"
(1)    1/    A080 :                     ; ---------------------------------------------------------------------------
(1)    2/    A080 :                     ; Sprite mappings - flash effect when you collect the giant ring
(1)    3/    A080 :                     ; ---------------------------------------------------------------------------
(1)    4/    A080 : 0010 001B           		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
(1)    5/    A084 : 0030 0045           		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
(1)    6/    A088 : 005A 006F           		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
(1)    7/    A08C : 0084 008F           		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
(1)    8/    A090 : 02                  byte_A084:	dc.b 2
(1)    9/    A091 : E00F 0000 00        		dc.b $E0, $F, 0, 0, 0
(1)   10/    A096 : 000F 1000 00        		dc.b 0,	$F, $10, 0, 0
(1)   11/    A09B : 04                  byte_A08F:	dc.b 4
(1)   12/    A09C : E00F 0010 F0        		dc.b $E0, $F, 0, $10, $F0
(1)   13/    A0A1 : E007 0020 10        		dc.b $E0, 7, 0,	$20, $10
(1)   14/    A0A6 : 000F 1010 F0        		dc.b 0,	$F, $10, $10, $F0
(1)   15/    A0AB : 0007 1020 10        		dc.b 0,	7, $10,	$20, $10
(1)   16/    A0B0 : 04                  byte_A0A4:	dc.b 4
(1)   17/    A0B1 : E00F 0028 E8        		dc.b $E0, $F, 0, $28, $E8
(1)   18/    A0B6 : E00B 0038 08        		dc.b $E0, $B, 0, $38, 8
(1)   19/    A0BB : 000F 1028 E8        		dc.b 0,	$F, $10, $28, $E8
(1)   20/    A0C0 : 000B 1038 08        		dc.b 0,	$B, $10, $38, 8
(1)   21/    A0C5 : 04                  byte_A0B9:	dc.b 4
(1)   22/    A0C6 : E00F 0834 E0        		dc.b $E0, $F, 8, $34, $E0
(1)   23/    A0CB : E00F 0034 00        		dc.b $E0, $F, 0, $34, 0
(1)   24/    A0D0 : 000F 1834 E0        		dc.b 0,	$F, $18, $34, $E0
(1)   25/    A0D5 : 000F 1034 00        		dc.b 0,	$F, $10, $34, 0
(1)   26/    A0DA : 04                  byte_A0CE:	dc.b 4
(1)   27/    A0DB : E00B 0838 E0        		dc.b $E0, $B, 8, $38, $E0
(1)   28/    A0E0 : E00F 0828 F8        		dc.b $E0, $F, 8, $28, $F8
(1)   29/    A0E5 : 000B 1838 E0        		dc.b 0,	$B, $18, $38, $E0
(1)   30/    A0EA : 000F 1828 F8        		dc.b 0,	$F, $18, $28, $F8
(1)   31/    A0EF : 04                  byte_A0E3:	dc.b 4
(1)   32/    A0F0 : E007 0820 E0        		dc.b $E0, 7, 8,	$20, $E0
(1)   33/    A0F5 : E00F 0810 F0        		dc.b $E0, $F, 8, $10, $F0
(1)   34/    A0FA : 0007 1820 E0        		dc.b 0,	7, $18,	$20, $E0
(1)   35/    A0FF : 000F 1810 F0        		dc.b 0,	$F, $18, $10, $F0
(1)   36/    A104 : 02                  byte_A0F8:	dc.b 2
(1)   37/    A105 : E00F 0800 E0        		dc.b $E0, $F, 8, 0, $E0
(1)   38/    A10A : 000F 1800 E0        		dc.b 0,	$F, $18, 0, $E0
(1)   39/    A10F : 04                  byte_A103:	dc.b 4
(1)   40/    A110 : E00F 0044 E0        		dc.b $E0, $F, 0, $44, $E0
(1)   41/    A115 : E00F 0844 00        		dc.b $E0, $F, 8, $44, 0
(1)   42/    A11A : 000F 1044 E0        		dc.b 0,	$F, $10, $44, $E0
(1)   43/    A11F : 000F 1844 00        		dc.b 0,	$F, $18, $44, 0
(1)   44/    A124 : (MACRO)             		align 2
(1)   44/    A124 :  (MACRO-2)                  cnop 0,2
(1)   44/    A124 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   12338/    A124 :                     
   12339/    A124 :                     ; ===========================================================================
   12340/    A124 :                     ; ---------------------------------------------------------------------------
   12341/    A124 :                     ; Object 26 - monitors
   12342/    A124 :                     ; ---------------------------------------------------------------------------
   12343/    A124 :                     
   12344/    A124 :                     Obj26:					; XREF: Obj_Index
   12345/    A124 : 7000                		moveq	#0,d0
   12346/    A126 : 1028 0024           		move.b	$24(a0),d0
   12347/    A12A : 323B 0006           		move.w	Obj26_Index(pc,d0.w),d1
   12348/    A12E : 4EFB 1002           		jmp	Obj26_Index(pc,d1.w)
   12349/    A132 :                     ; ===========================================================================
   12350/    A132 : 000A                Obj26_Index:	dc.w Obj26_Main-Obj26_Index
   12351/    A134 : 006C                		dc.w Obj26_Solid-Obj26_Index
   12352/    A136 : 017E                		dc.w Obj26_BreakOpen-Obj26_Index
   12353/    A138 : 0150                		dc.w Obj26_Animate-Obj26_Index
   12354/    A13A : 015A                		dc.w Obj26_Display-Obj26_Index
   12355/    A13C :                     ; ===========================================================================
   12356/    A13C :                     
   12357/    A13C :                     Obj26_Main:				; XREF: Obj26_Index
   12358/    A13C : 5428 0024           		addq.b	#2,$24(a0)
   12359/    A140 : 117C 000E 0016      		move.b	#$E,$16(a0)
   12360/    A146 : 117C 000E 0017      		move.b	#$E,$17(a0)
   12361/    A14C : 217C 0000 A5A6 0004 		move.l	#Map_obj26,4(a0)
   12362/    A154 : 317C 0680 0002      		move.w	#$680,2(a0)
   12363/    A15A : 117C 0004 0001      		move.b	#4,1(a0)
   12364/    A160 : 117C 0003 0018      		move.b	#3,$18(a0)
   12365/    A166 : 117C 000F 0019      		move.b	#$F,$19(a0)
   12366/    A16C : 45F8 FC00           		lea	($FFFFFC00).w,a2
   12367/    A170 : 7000                		moveq	#0,d0
   12368/    A172 : 1028 0023           		move.b	$23(a0),d0
   12369/    A176 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   12370/    A17C : 0832 0000 0002      		btst	#0,2(a2,d0.w)	; has monitor been broken?
   12371/    A182 : 670E                		beq.s	Obj26_NotBroken	; if not, branch
   12372/    A184 : 117C 0008 0024      		move.b	#8,$24(a0)	; run "Obj26_Display" routine
   12373/    A18A : 117C 000B 001A      		move.b	#$B,$1A(a0)	; use broken monitor frame
   12374/    A190 : 4E75                		rts	
   12375/    A192 :                     ; ===========================================================================
   12376/    A192 :                     
   12377/    A192 :                     Obj26_NotBroken:			; XREF: Obj26_Main
   12378/    A192 : 117C 0046 0020      		move.b	#$46,$20(a0)
   12379/    A198 : 1168 0028 001C      		move.b	$28(a0),$1C(a0)
   12380/    A19E :                     
   12381/    A19E :                     Obj26_Solid:				; XREF: Obj26_Index
   12382/    A19E : 1028 0025           		move.b	$25(a0),d0	; is monitor set to fall?
   12383/    A1A2 : 6754                		beq.s	loc_A1EC	; if not, branch
   12384/    A1A4 : 5500                		subq.b	#2,d0
   12385/    A1A6 : 6630                		bne.s	Obj26_Fall
   12386/    A1A8 : 7200                		moveq	#0,d1
   12387/    A1AA : 1228 0019           		move.b	$19(a0),d1
   12388/    A1AE : 0641 000B           		addi.w	#$B,d1
   12389/    A1B2 : 6100 D418           		bsr.w	ExitPlatform
   12390/    A1B6 : 0829 0003 0022      		btst	#3,$22(a1)
   12391/    A1BC : 6600 000A           		bne.w	loc_A1BC
   12392/    A1C0 : 4228 0025           		clr.b	$25(a0)
   12393/    A1C4 : 6000 00BC           		bra.w	Obj26_Animate
   12394/    A1C8 :                     ; ===========================================================================
   12395/    A1C8 :                     
   12396/    A1C8 :                     loc_A1BC:				; XREF: Obj26_Solid
   12397/    A1C8 : 363C 0010           		move.w	#$10,d3
   12398/    A1CC : 3428 0008           		move.w	8(a0),d2
   12399/    A1D0 : 6100 D95C           		bsr.w	MvSonicOnPtfm
   12400/    A1D4 : 6000 00AC           		bra.w	Obj26_Animate
   12401/    A1D8 :                     ; ===========================================================================
   12402/    A1D8 :                     
   12403/    A1D8 :                     Obj26_Fall:				; XREF: Obj26_Solid
   12404/    A1D8 : 6100 34E2           		bsr.w	ObjectFall
   12405/    A1DC : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   12406/    A1E2 : 4A41                		tst.w	d1
   12407/    A1E4 : 6A00 009C           		bpl.w	Obj26_Animate
   12408/    A1E8 : D368 000C           		add.w	d1,$C(a0)
   12409/    A1EC : 4268 0012           		clr.w	$12(a0)
   12410/    A1F0 : 4228 0025           		clr.b	$25(a0)
   12411/    A1F4 : 6000 008C           		bra.w	Obj26_Animate
   12412/    A1F8 :                     ; ===========================================================================
   12413/    A1F8 :                     
   12414/    A1F8 :                     loc_A1EC:				; XREF: Obj26_Solid
   12415/    A1F8 : 323C 001A           		move.w	#$1A,d1
   12416/    A1FC : 343C 000F           		move.w	#$F,d2
   12417/    A200 : 6100 02A8           		bsr.w	Obj26_SolidSides
   12418/    A204 : 6700 0062           		beq.w	loc_A25C
   12419/    A208 : 4A69 0012           		tst.w	$12(a1)
   12420/    A20C : 6B08                		bmi.s	loc_A20A
   12421/    A20E : 0C29 0002 001C      		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
   12422/    A214 : 6752                		beq.s	loc_A25C	; if yes, branch
   12423/    A216 :                     
   12424/    A216 :                     loc_A20A:
   12425/    A216 : 4A41                		tst.w	d1
   12426/    A218 : 6A12                		bpl.s	loc_A220
   12427/    A21A : 9769 000C           		sub.w	d3,$C(a1)
   12428/    A21E : 6100 D29A           		bsr.w	loc_74AE
   12429/    A222 : 117C 0002 0025      		move.b	#2,$25(a0)
   12430/    A228 : 6000 0058           		bra.w	Obj26_Animate
   12431/    A22C :                     ; ===========================================================================
   12432/    A22C :                     
   12433/    A22C :                     loc_A220:
   12434/    A22C : 4A40                		tst.w	d0
   12435/    A22E : 6700 0022           		beq.w	loc_A246
   12436/    A232 : 6B08                		bmi.s	loc_A230
   12437/    A234 : 4A69 0010           		tst.w	$10(a1)
   12438/    A238 : 6B18                		bmi.s	loc_A246
   12439/    A23A : 6006                		bra.s	loc_A236
   12440/    A23C :                     ; ===========================================================================
   12441/    A23C :                     
   12442/    A23C :                     loc_A230:
   12443/    A23C : 4A69 0010           		tst.w	$10(a1)
   12444/    A240 : 6A10                		bpl.s	loc_A246
   12445/    A242 :                     
   12446/    A242 :                     loc_A236:
   12447/    A242 : 9169 0008           		sub.w	d0,8(a1)
   12448/    A246 : 337C 0000 0014      		move.w	#0,$14(a1)
   12449/    A24C : 337C 0000 0010      		move.w	#0,$10(a1)
   12450/    A252 :                     
   12451/    A252 :                     loc_A246:
   12452/    A252 : 0829 0001 0022      		btst	#1,$22(a1)
   12453/    A258 : 661C                		bne.s	loc_A26A
   12454/    A25A : 08E9 0005 0022      		bset	#5,$22(a1)
   12455/    A260 : 08E8 0005 0022      		bset	#5,$22(a0)
   12456/    A266 : 601A                		bra.s	Obj26_Animate
   12457/    A268 :                     ; ===========================================================================
   12458/    A268 :                     
   12459/    A268 :                     loc_A25C:
   12460/    A268 : 0828 0005 0022      		btst	#5,$22(a0)
   12461/    A26E : 6712                		beq.s	Obj26_Animate
   12462/    A270 : 337C 0001 001C      		move.w	#1,$1C(a1)
   12463/    A276 :                     
   12464/    A276 :                     loc_A26A:
   12465/    A276 : 08A8 0005 0022      		bclr	#5,$22(a0)
   12466/    A27C : 08A9 0005 0022      		bclr	#5,$22(a1)
   12467/    A282 :                     
   12468/    A282 :                     Obj26_Animate:				; XREF: Obj26_Index
   12469/    A282 : 43F9 0000 A524      		lea	(Ani_obj26).l,a1
   12470/    A288 : 6100 04AA           		bsr.w	AnimateSprite
   12471/    A28C :                     
   12472/    A28C :                     Obj26_Display:				; XREF: Obj26_Index
   12473/    A28C : 6100 3480           		bsr.w	DisplaySprite
   12474/    A290 : 3028 0008           		move.w	8(a0),d0
   12475/    A294 : 0240 FF80           		andi.w	#$FF80,d0
   12476/    A298 : 3238 F700           		move.w	($FFFFF700).w,d1
   12477/    A29C : 0441 0080           		subi.w	#$80,d1
   12478/    A2A0 : 0241 FF80           		andi.w	#$FF80,d1
   12479/    A2A4 : 9041                		sub.w	d1,d0
   12480/    A2A6 : 0C40 0280           		cmpi.w	#$280,d0
   12481/    A2AA : 6200 349E           		bhi.w	DeleteObject
   12482/    A2AE : 4E75                		rts	
   12483/    A2B0 :                     ; ===========================================================================
   12484/    A2B0 :                     
   12485/    A2B0 :                     Obj26_BreakOpen:			; XREF: Obj26_Index
   12486/    A2B0 : 5428 0024           		addq.b	#2,$24(a0)
   12487/    A2B4 : 117C 0000 0020      		move.b	#0,$20(a0)
   12488/    A2BA : 6100 38DA           		bsr.w	SingleObjLoad
   12489/    A2BE : 6618                		bne.s	Obj26_Explode
   12490/    A2C0 : (MACRO)             		_move.b	#$2E,0(a1)	; load monitor contents	object
   12490/    A2C0 :  (MACRO-2)                          insn2op move.b, #$2E,0(a1)
   12490/    A2C0 : 137C 002E 0001                              !move.b   #$2E,1+0(a1)
   12490/    A2C5 :                                             !org    *-1
   12490/    A2C5 : 00                                          !dc.b   0
   12491/    A2C6 : 3368 0008 0008      		move.w	8(a0),8(a1)
   12492/    A2CC : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   12493/    A2D2 : 1368 001C 001C      		move.b	$1C(a0),$1C(a1)
   12494/    A2D8 :                     
   12495/    A2D8 :                     Obj26_Explode:
   12496/    A2D8 : 6100 38BC           		bsr.w	SingleObjLoad
   12497/    A2DC : 6616                		bne.s	Obj26_SetBroken
   12498/    A2DE : (MACRO)             		_move.b	#$27,0(a1)	; load explosion object
   12498/    A2DE :  (MACRO-2)                          insn2op move.b, #$27,0(a1)
   12498/    A2DE : 137C 0027 0001                              !move.b   #$27,1+0(a1)
   12498/    A2E3 :                                             !org    *-1
   12498/    A2E3 : 00                                          !dc.b   0
   12499/    A2E4 : 5429 0024           		addq.b	#2,$24(a1)
   12500/    A2E8 : 3368 0008 0008      		move.w	8(a0),8(a1)
   12501/    A2EE : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   12502/    A2F4 :                     
   12503/    A2F4 :                     Obj26_SetBroken:
   12504/    A2F4 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   12505/    A2F8 : 7000                		moveq	#0,d0
   12506/    A2FA : 1028 0023           		move.b	$23(a0),d0
   12507/    A2FE : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   12508/    A304 : 117C 0009 001C      		move.b	#9,$1C(a0)	; set monitor type to broken
   12509/    A30A : 6000 3402           		bra.w	DisplaySprite
   12510/    A30E :                     ; ===========================================================================
   12511/    A30E :                     ; ---------------------------------------------------------------------------
   12512/    A30E :                     ; Object 2E - contents of monitors
   12513/    A30E :                     ; ---------------------------------------------------------------------------
   12514/    A30E :                     
   12515/    A30E :                     Obj2E:					; XREF: Obj_Index
   12516/    A30E : 7000                		moveq	#0,d0
   12517/    A310 : 1028 0024           		move.b	$24(a0),d0
   12518/    A314 : 323B 000A           		move.w	Obj2E_Index(pc,d0.w),d1
   12519/    A318 : 4EBB 1006           		jsr	Obj2E_Index(pc,d1.w)
   12520/    A31C : 6000 33F0           		bra.w	DisplaySprite
   12521/    A320 :                     ; ===========================================================================
   12522/    A320 : 0006                Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
   12523/    A322 : 0046                		dc.w Obj2E_Move-Obj2E_Index
   12524/    A324 : 0180                		dc.w Obj2E_Delete-Obj2E_Index
   12525/    A326 :                     ; ===========================================================================
   12526/    A326 :                     
   12527/    A326 :                     Obj2E_Main:				; XREF: Obj2E_Index
   12528/    A326 : 5428 0024           		addq.b	#2,$24(a0)
   12529/    A32A : 317C 0680 0002      		move.w	#$680,2(a0)
   12530/    A330 : 117C 0024 0001      		move.b	#$24,1(a0)
   12531/    A336 : 117C 0003 0018      		move.b	#3,$18(a0)
   12532/    A33C : 117C 0008 0019      		move.b	#8,$19(a0)
   12533/    A342 : 317C FD00 0012      		move.w	#-$300,$12(a0)
   12534/    A348 : 7000                		moveq	#0,d0
   12535/    A34A : 1028 001C           		move.b	$1C(a0),d0
   12536/    A34E : 5400                		addq.b	#2,d0
   12537/    A350 : 1140 001A           		move.b	d0,$1A(a0)
   12538/    A354 : 227C 0000 A5A6      		movea.l	#Map_obj26,a1
   12539/    A35A : D000                		add.b	d0,d0
   12540/    A35C : D2F1 0000           		adda.w	(a1,d0.w),a1
   12541/    A360 : 5249                		addq.w	#1,a1
   12542/    A362 : 2149 0004           		move.l	a1,4(a0)
   12543/    A366 :                     
   12544/    A366 :                     Obj2E_Move:				; XREF: Obj2E_Index
   12545/    A366 : 4A68 0012           		tst.w	$12(a0)		; is object moving?
   12546/    A36A : 6A00 000E           		bpl.w	Obj2E_ChkEggman	; if not, branch
   12547/    A36E : 6100 3378           		bsr.w	SpeedToPos
   12548/    A372 : 0668 0018 0012      		addi.w	#$18,$12(a0)	; reduce object	speed
   12549/    A378 : 4E75                		rts	
   12550/    A37A :                     ; ===========================================================================
   12551/    A37A :                     
   12552/    A37A :                     Obj2E_ChkEggman:    ; XREF: Obj2E_Move
   12553/    A37A : 5428 0024                   addq.b    #2,$24(a0)
   12554/    A37E : 317C 001D 001E              move.w    #29,$1E(a0)
   12555/    A384 : 1028 001C                   move.b    $1C(a0),d0
   12556/    A388 : 0C00 0001                   cmpi.b    #1,d0; does monitor contain Eggman?
   12557/    A38C : 6612                        bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
   12558/    A38E : 2248                        move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
   12559/    A390 : 2F08                        move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
   12560/    A392 : 41F8 D000                   lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
   12561/    A396 : 4EB9 0001 B27A              jsr    Touch_ChkHurt ; run the Touch_ChkHurt routine
   12562/    A39C : 205F                        move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
   12563/    A39E : 4E75                        rts ; The Eggman monitor now does something!
   12564/    A3A0 :                     ; ===========================================================================
   12565/    A3A0 :                     
   12566/    A3A0 :                     Obj2E_ChkSonic:
   12567/    A3A0 : 0C00 0002           		cmpi.b	#2,d0		; does monitor contain Sonic?
   12568/    A3A4 : 6612                		bne.s	Obj2E_ChkShoes
   12569/    A3A6 :                     
   12570/    A3A6 :                     ExtraLife:
   12571/    A3A6 : 5238 FE12           		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
   12572/    A3AA : 5238 FE1C           		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
   12573/    A3AE : 303C 0088           		move.w	#$88,d0
   12574/    A3B2 : 4EF9 0000 1396      		jmp	(PlaySound).l	; play extra life music
   12575/    A3B8 :                     ; ===========================================================================
   12576/    A3B8 :                     
   12577/    A3B8 :                     Obj2E_ChkShoes:
   12578/    A3B8 : 0C00 0003           		cmpi.b	#3,d0		; does monitor contain speed shoes?
   12579/    A3BC : 6628                		bne.s	Obj2E_ChkShield
   12580/    A3BE : 11FC 0001 FE2E      		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
   12581/    A3C4 : 31FC 04B0 D034      		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
   12582/    A3CA : 31FC 0C00 F760      		move.w	#$C00,($FFFFF760).w ; change Sonic"s top speed
   12583/    A3D0 : 31FC 0018 F762      		move.w	#$18,($FFFFF762).w
   12584/    A3D6 : 31FC 0080 F764      		move.w	#$80,($FFFFF764).w
   12585/    A3DC : 303C 00E2           		move.w	#$E2,d0
   12586/    A3E0 : 4EF9 0000 1396      		jmp	(PlaySound).l	; Speed	up the music
   12587/    A3E6 :                     ; ===========================================================================
   12588/    A3E6 :                     
   12589/    A3E6 :                     Obj2E_ChkShield:
   12590/    A3E6 : 0C00 0004           		cmpi.b	#4,d0		; does monitor contain a shield?
   12591/    A3EA : 6616                		bne.s	Obj2E_ChkInvinc
   12592/    A3EC : 11FC 0001 FE2C      		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
   12593/    A3F2 : 11FC 0038 D180      		move.b	#$38,($FFFFD180).w ; load shield object	($38)
   12594/    A3F8 : 303C 00AF           		move.w	#$AF,d0
   12595/    A3FC : 4EF9 0000 1396      		jmp	(PlaySound).l	; play shield sound
   12596/    A402 :                     ; ===========================================================================
   12597/    A402 :                     
   12598/    A402 :                     Obj2E_ChkInvinc:
   12599/    A402 : 0C00 0005           		cmpi.b	#5,d0		; does monitor contain invincibility?
   12600/    A406 : 664E                		bne.s	Obj2E_ChkRings
   12601/    A408 : 11FC 0001 FE2D      		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
   12602/    A40E : 31FC 04B0 D032      		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
   12603/    A414 : 11FC 0038 D200      		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
   12604/    A41A : 11FC 0001 D21C      		move.b	#1,($FFFFD21C).w
   12605/    A420 : 11FC 0038 D240      		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
   12606/    A426 : 11FC 0002 D25C      		move.b	#2,($FFFFD25C).w
   12607/    A42C : 11FC 0038 D280      		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
   12608/    A432 : 11FC 0003 D29C      		move.b	#3,($FFFFD29C).w
   12609/    A438 : 11FC 0038 D2C0      		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
   12610/    A43E : 11FC 0004 D2DC      		move.b	#4,($FFFFD2DC).w
   12611/    A444 : 4A38 F7AA           		tst.b	($FFFFF7AA).w	; is boss mode on?
   12612/    A448 : 660A                		bne.s	Obj2E_NoMusic	; if yes, branch
   12613/    A44A : 303C 0087           		move.w	#$87,d0
   12614/    A44E : 4EF9 0000 1396      		jmp	(PlaySound).l	; play invincibility music
   12615/    A454 :                     ; ===========================================================================
   12616/    A454 :                     
   12617/    A454 :                     Obj2E_NoMusic:
   12618/    A454 : 4E75                		rts	
   12619/    A456 :                     ; ===========================================================================
   12620/    A456 :                     
   12621/    A456 :                     Obj2E_ChkRings:
   12622/    A456 : 0C00 0006           		cmpi.b	#6,d0		; does monitor contain 10 rings?
   12623/    A45A : 663A                		bne.s	Obj2E_ChkS
   12624/    A45C : 0678 000A FE20      		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
   12625/    A462 : 0038 0001 FE1D      		ori.b	#1,($FFFFFE1D).w ; update the ring counter
   12626/    A468 : 0C78 0064 FE20      		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
   12627/    A46E : 651C                		bcs.s	Obj2E_RingSound
   12628/    A470 : 08F8 0001 FE1B      		bset	#1,($FFFFFE1B).w
   12629/    A476 : 6700 FF2E           		beq.w	ExtraLife
   12630/    A47A : 0C78 00C8 FE20      		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
   12631/    A480 : 650A                		bcs.s	Obj2E_RingSound
   12632/    A482 : 08F8 0002 FE1B      		bset	#2,($FFFFFE1B).w
   12633/    A488 : 6700 FF1C           		beq.w	ExtraLife
   12634/    A48C :                     
   12635/    A48C :                     Obj2E_RingSound:
   12636/    A48C : 303C 00B5           		move.w	#$B5,d0
   12637/    A490 : 4EF9 0000 1396      		jmp	(PlaySound).l	; play ring sound
   12638/    A496 :                     ; ===========================================================================
   12639/    A496 :                     
   12640/    A496 :                     Obj2E_ChkS:
   12641/    A496 : 0C00 0007           		cmpi.b	#7,d0		; does monitor contain "S"
   12642/    A49A : 6602                		bne.s	Obj2E_ChkEnd
   12643/    A49C : 4E71                		nop	
   12644/    A49E :                     
   12645/    A49E :                     Obj2E_ChkEnd:
   12646/    A49E : 4E75                		rts			; "S" and goggles monitors do nothing
   12647/    A4A0 :                     ; ===========================================================================
   12648/    A4A0 :                     
   12649/    A4A0 :                     Obj2E_Delete:				; XREF: Obj2E_Index
   12650/    A4A0 : 5368 001E           		subq.w	#1,$1E(a0)
   12651/    A4A4 : 6B00 32A4           		bmi.w	DeleteObject
   12652/    A4A8 : 4E75                		rts	
   12653/    A4AA :                     ; ---------------------------------------------------------------------------
   12654/    A4AA :                     ; Subroutine to	make the sides of a monitor solid
   12655/    A4AA :                     ; ---------------------------------------------------------------------------
   12656/    A4AA :                     
   12657/    A4AA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   12658/    A4AA :                     
   12659/    A4AA :                     
   12660/    A4AA :                     Obj26_SolidSides:			; XREF: loc_A1EC
   12661/    A4AA : 43F8 D000           		lea	($FFFFD000).w,a1
   12662/    A4AE : 3029 0008           		move.w	8(a1),d0
   12663/    A4B2 : 9068 0008           		sub.w	8(a0),d0
   12664/    A4B6 : D041                		add.w	d1,d0
   12665/    A4B8 : 6B48                		bmi.s	loc_A4E6
   12666/    A4BA : 3601                		move.w	d1,d3
   12667/    A4BC : D643                		add.w	d3,d3
   12668/    A4BE : B043                		cmp.w	d3,d0
   12669/    A4C0 : 6240                		bhi.s	loc_A4E6
   12670/    A4C2 : 1629 0016           		move.b	$16(a1),d3
   12671/    A4C6 : 4883                		ext.w	d3
   12672/    A4C8 : D443                		add.w	d3,d2
   12673/    A4CA : 3629 000C           		move.w	$C(a1),d3
   12674/    A4CE : 9668 000C           		sub.w	$C(a0),d3
   12675/    A4D2 : D642                		add.w	d2,d3
   12676/    A4D4 : 6B2C                		bmi.s	loc_A4E6
   12677/    A4D6 : D442                		add.w	d2,d2
   12678/    A4D8 : B642                		cmp.w	d2,d3
   12679/    A4DA : 6426                		bcc.s	loc_A4E6
   12680/    A4DC : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   12681/    A4E0 : 6B20                		bmi.s	loc_A4E6
   12682/    A4E2 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
   12683/    A4E8 : 6418                		bcc.s	loc_A4E6
   12684/    A4EA : 4A78 FE08           		tst.w	($FFFFFE08).w
   12685/    A4EE : 6612                		bne.s	loc_A4E6
   12686/    A4F0 : B240                		cmp.w	d0,d1
   12687/    A4F2 : 6404                		bcc.s	loc_A4DC
   12688/    A4F4 : D241                		add.w	d1,d1
   12689/    A4F6 : 9041                		sub.w	d1,d0
   12690/    A4F8 :                     
   12691/    A4F8 :                     loc_A4DC:
   12692/    A4F8 : 0C43 0010           		cmpi.w	#$10,d3
   12693/    A4FC : 6508                		bcs.s	loc_A4EA
   12694/    A4FE :                     
   12695/    A4FE :                     loc_A4E2:
   12696/    A4FE : 7201                		moveq	#1,d1
   12697/    A500 : 4E75                		rts	
   12698/    A502 :                     ; ===========================================================================
   12699/    A502 :                     
   12700/    A502 :                     loc_A4E6:
   12701/    A502 : 7200                		moveq	#0,d1
   12702/    A504 : 4E75                		rts	
   12703/    A506 :                     ; ===========================================================================
   12704/    A506 :                     
   12705/    A506 :                     loc_A4EA:
   12706/    A506 : 7200                		moveq	#0,d1
   12707/    A508 : 1228 0019           		move.b	$19(a0),d1
   12708/    A50C : 5841                		addq.w	#4,d1
   12709/    A50E : 3401                		move.w	d1,d2
   12710/    A510 : D442                		add.w	d2,d2
   12711/    A512 : D269 0008           		add.w	8(a1),d1
   12712/    A516 : 9268 0008           		sub.w	8(a0),d1
   12713/    A51A : 6BE2                		bmi.s	loc_A4E2
   12714/    A51C : B242                		cmp.w	d2,d1
   12715/    A51E : 64DE                		bcc.s	loc_A4E2
   12716/    A520 : 72FF                		moveq	#-1,d1
   12717/    A522 : 4E75                		rts	
   12718/    A524 :                     ; End of function Obj26_SolidSides
   12719/    A524 :                     
   12720/    A524 :                     ; ===========================================================================
   12721/    A524 :                     Ani_obj26:
   12722/    A524 :                     		include	"_anim/obj26.asm"
(1)    1/    A524 :                     ; ---------------------------------------------------------------------------
(1)    2/    A524 :                     ; Animation script - monitors
(1)    3/    A524 :                     ; ---------------------------------------------------------------------------
(1)    4/    A524 : 0014 001A 0026      		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
(1)    5/    A52A : 0032 003E 004A      		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
(1)    6/    A530 : 0056 0062 006E      		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
(1)    7/    A536 : 007A                		dc.w byte_A582-Ani_obj26
(1)    8/    A538 : 0100 0102 FF00      byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
(1)    9/    A53E : 0100 0303 0103 0302 byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
                    0303 FF00           
(1)   10/    A54A : 0100 0404 0104 0402 byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
                    0404 FF00           
(1)   11/    A556 : 0100 0505 0105 0502 byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
                    0505 FF00           
(1)   12/    A562 : 0100 0606 0106 0602 byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
                    0606 FF00           
(1)   13/    A56E : 0100 0707 0107 0702 byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
                    0707 FF00           
(1)   14/    A57A : 0100 0808 0108 0802 byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
                    0808 FF00           
(1)   15/    A586 : 0100 0909 0109 0902 byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
                    0909 FF00           
(1)   16/    A592 : 0100 0A0A 010A 0A02 byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
                    0A0A FF00           
(1)   17/    A59E : 0200 0102 0BFE 0100 byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
(1)   18/    A5A6 : (MACRO)             		align 2
(1)   18/    A5A6 :  (MACRO-2)                  cnop 0,2
(1)   18/    A5A6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   12723/    A5A6 :                     
   12724/    A5A6 :                     ; ---------------------------------------------------------------------------
   12725/    A5A6 :                     ; Sprite mappings - monitors
   12726/    A5A6 :                     ; ---------------------------------------------------------------------------
   12727/    A5A6 :                     Map_obj26:
   12728/    A5A6 :                     		include	"_maps/obj26.asm"
(1)    1/    A5A6 :                     ; ---------------------------------------------------------------------------
(1)    2/    A5A6 :                     ; Sprite mappings - monitors
(1)    3/    A5A6 :                     ; ---------------------------------------------------------------------------
(1)    4/    A5A6 : 0018 001E           		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
(1)    5/    A5AA : 0029 0034           		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
(1)    6/    A5AE : 003F 004A           		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
(1)    7/    A5B2 : 0055 0060           		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
(1)    8/    A5B6 : 006B 0076           		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
(1)    9/    A5BA : 0081 008C           		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
(1)   10/    A5BE : 01                  byte_A5A2:	dc.b 1			; static monitor
(1)   11/    A5BF : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   12/    A5C4 : 02                  byte_A5A8:	dc.b 2			; static monitor
(1)   13/    A5C5 : F505 0010 F8        		dc.b $F5, 5, 0,	$10, $F8
(1)   14/    A5CA : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   15/    A5CF : 02                  byte_A5B3:	dc.b 2			; static monitor
(1)   16/    A5D0 : F505 0014 F8        		dc.b $F5, 5, 0,	$14, $F8
(1)   17/    A5D5 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   18/    A5DA : 02                  byte_A5BE:	dc.b 2			; Eggman monitor
(1)   19/    A5DB : F505 0018 F8        		dc.b $F5, 5, 0,	$18, $F8
(1)   20/    A5E0 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   21/    A5E5 : 02                  byte_A5C9:	dc.b 2			; Sonic	monitor
(1)   22/    A5E6 : F505 001C F8        		dc.b $F5, 5, 0,	$1C, $F8
(1)   23/    A5EB : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   24/    A5F0 : 02                  byte_A5D4:	dc.b 2			; speed	shoes monitor
(1)   25/    A5F1 : F505 0024 F8        		dc.b $F5, 5, 0,	$24, $F8
(1)   26/    A5F6 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   27/    A5FB : 02                  byte_A5DF:	dc.b 2			; shield monitor
(1)   28/    A5FC : F505 0028 F8        		dc.b $F5, 5, 0,	$28, $F8
(1)   29/    A601 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   30/    A606 : 02                  byte_A5EA:	dc.b 2			; invincibility	monitor
(1)   31/    A607 : F505 002C F8        		dc.b $F5, 5, 0,	$2C, $F8
(1)   32/    A60C : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   33/    A611 : 02                  byte_A5F5:	dc.b 2			; 10 rings monitor
(1)   34/    A612 : F505 0030 F8        		dc.b $F5, 5, 0,	$30, $F8
(1)   35/    A617 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   36/    A61C : 02                  byte_A600:	dc.b 2			; 'S' monitor
(1)   37/    A61D : F505 0034 F8        byte_A601:	dc.b $F5, 5, 0,	$34, $F8
(1)   38/    A622 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   39/    A627 : 02                  byte_A60B:	dc.b 2			; goggles monitor
(1)   40/    A628 : F505 0020 F8        		dc.b $F5, 5, 0,	$20, $F8
(1)   41/    A62D : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   42/    A632 : 01                  byte_A616:	dc.b 1			; broken monitor
(1)   43/    A633 : FF0D 0038 F0        		dc.b $FF, $D, 0, $38, $F0
(1)   44/    A638 : (MACRO)             		align 2
(1)   44/    A638 :  (MACRO-2)                  cnop 0,2
(1)   44/    A638 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   12729/    A638 :                     
   12730/    A638 :                     ; ===========================================================================
   12731/    A638 :                     ; ---------------------------------------------------------------------------
   12732/    A638 :                     ; Object 0E - Sonic on the title screen
   12733/    A638 :                     ; ---------------------------------------------------------------------------
   12734/    A638 :                     
   12735/    A638 :                     Obj0E:					; XREF: Obj_Index
   12736/    A638 : 7000                		moveq	#0,d0
   12737/    A63A : 1028 0024           		move.b	$24(a0),d0
   12738/    A63E : 323B 0006           		move.w	Obj0E_Index(pc,d0.w),d1
   12739/    A642 : 4EFB 1002           		jmp	Obj0E_Index(pc,d1.w)
   12740/    A646 :                     ; ===========================================================================
   12741/    A646 : 0008                Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
   12742/    A648 : 003C                		dc.w Obj0E_Delay-Obj0E_Index
   12743/    A64A : 004C                		dc.w Obj0E_Move-Obj0E_Index
   12744/    A64C : 0062                		dc.w Obj0E_Animate-Obj0E_Index
   12745/    A64E :                     ; ===========================================================================
   12746/    A64E :                     
   12747/    A64E :                     Obj0E_Main:				; XREF: Obj0E_Index
   12748/    A64E : 5428 0024           		addq.b	#2,$24(a0)
   12749/    A652 : 317C 00F0 0008      		move.w	#$F0,8(a0)
   12750/    A658 : 317C 00DE 000A      		move.w	#$DE,$A(a0)
   12751/    A65E : 217C 0000 A8A4 0004 		move.l	#Map_obj0E,4(a0)
   12752/    A666 : 317C 2300 0002      		move.w	#$2300,2(a0)
   12753/    A66C : 117C 0001 0018      		move.b	#1,$18(a0)
   12754/    A672 : 117C 001D 001F      		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
   12755/    A678 : 43F9 0000 A720      		lea	(Ani_obj0E).l,a1
   12756/    A67E : 6100 00B4           		bsr.w	AnimateSprite
   12757/    A682 :                     
   12758/    A682 :                     Obj0E_Delay:				; XREF: Obj0E_Index
   12759/    A682 : 5328 001F           		subq.b	#1,$1F(a0)	; subtract 1 from time delay
   12760/    A686 : 6A08                		bpl.s	Obj0E_Wait	; if time remains, branch
   12761/    A688 : 5428 0024           		addq.b	#2,$24(a0)	; go to	next routine
   12762/    A68C : 6000 3080           		bra.w	DisplaySprite
   12763/    A690 :                     ; ===========================================================================
   12764/    A690 :                     
   12765/    A690 :                     Obj0E_Wait:				; XREF: Obj0E_Delay
   12766/    A690 : 4E75                		rts	
   12767/    A692 :                     ; ===========================================================================
   12768/    A692 :                     
   12769/    A692 :                     Obj0E_Move:				; XREF: Obj0E_Index
   12770/    A692 : 5168 000A           		subq.w	#8,$A(a0)
   12771/    A696 : 0C68 0096 000A      		cmpi.w	#$96,$A(a0)
   12772/    A69C : 6604                		bne.s	Obj0E_Display
   12773/    A69E : 5428 0024           		addq.b	#2,$24(a0)
   12774/    A6A2 :                     
   12775/    A6A2 :                     Obj0E_Display:
   12776/    A6A2 : 6000 306A           		bra.w	DisplaySprite
   12777/    A6A6 :                     ; ===========================================================================
   12778/    A6A6 : 4E75                		rts	
   12779/    A6A8 :                     ; ===========================================================================
   12780/    A6A8 :                     
   12781/    A6A8 :                     Obj0E_Animate:				; XREF: Obj0E_Index
   12782/    A6A8 : 43F9 0000 A720      		lea	(Ani_obj0E).l,a1
   12783/    A6AE : 6100 0084           		bsr.w	AnimateSprite
   12784/    A6B2 : 6000 305A           		bra.w	DisplaySprite
   12785/    A6B6 :                     ; ===========================================================================
   12786/    A6B6 : 4E75                		rts	
   12787/    A6B8 :                     ; ===========================================================================
   12788/    A6B8 :                     ; ---------------------------------------------------------------------------
   12789/    A6B8 :                     ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
   12790/    A6B8 :                     ; ---------------------------------------------------------------------------
   12791/    A6B8 :                     
   12792/    A6B8 :                     Obj0F:					; XREF: Obj_Index
   12793/    A6B8 : 7000                		moveq	#0,d0
   12794/    A6BA : 1028 0024           		move.b	$24(a0),d0
   12795/    A6BE : 323B 000A           		move.w	Obj0F_Index(pc,d0.w),d1
   12796/    A6C2 : 4EBB 1006           		jsr	Obj0F_Index(pc,d1.w)
   12797/    A6C6 : 6000 3046           		bra.w	DisplaySprite
   12798/    A6CA :                     ; ===========================================================================
   12799/    A6CA : 0006                Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
   12800/    A6CC : 004C                		dc.w Obj0F_PrsStart-Obj0F_Index
   12801/    A6CE : 004A                		dc.w locret_A6F8-Obj0F_Index
   12802/    A6D0 :                     ; ===========================================================================
   12803/    A6D0 :                     
   12804/    A6D0 :                     Obj0F_Main:				; XREF: Obj0F_Index
   12805/    A6D0 : 5428 0024           		addq.b	#2,$24(a0)
   12806/    A6D4 : 317C 00D0 0008      		move.w	#$D0,8(a0)
   12807/    A6DA : 317C 0130 000A      		move.w	#$130,$A(a0)
   12808/    A6E0 : 217C 0000 A7E0 0004 		move.l	#Map_obj0F,4(a0)
   12809/    A6E8 : 317C 0200 0002      		move.w	#$200,2(a0)
   12810/    A6EE : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
   12811/    A6F4 : 6520                		bcs.s	Obj0F_PrsStart	; if yes, branch
   12812/    A6F6 : 5428 0024           		addq.b	#2,$24(a0)
   12813/    A6FA : 0C28 0003 001A      		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
   12814/    A700 : 6612                		bne.s	locret_A6F8	; if not, branch
   12815/    A702 : 317C 2510 0002      		move.w	#$2510,2(a0)	; "TM" specific	code
   12816/    A708 : 317C 0170 0008      		move.w	#$170,8(a0)
   12817/    A70E : 317C 00F8 000A      		move.w	#$F8,$A(a0)
   12818/    A714 :                     
   12819/    A714 :                     locret_A6F8:				; XREF: Obj0F_Index
   12820/    A714 : 4E75                		rts	
   12821/    A716 :                     ; ===========================================================================
   12822/    A716 :                     
   12823/    A716 :                     Obj0F_PrsStart:				; XREF: Obj0F_Index
   12824/    A716 : 43F9 0000 A72E      		lea	(Ani_obj0F).l,a1
   12825/    A71C : 6000 0016           		bra.w	AnimateSprite
   12826/    A720 :                     ; ===========================================================================
   12827/    A720 :                     Ani_obj0E:
   12828/    A720 :                     		include	"_anim/obj0E.asm"
(1)    1/    A720 :                     ; ---------------------------------------------------------------------------
(1)    2/    A720 :                     ; Animation script - Sonic on the title screen
(1)    3/    A720 :                     ; ---------------------------------------------------------------------------
(1)    4/    A720 : 0002                		dc.w byte_A706-Ani_obj0E
(1)    5/    A722 : 0700 0102 0304 0506 byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
                    07FE 0200           
(1)    6/    A72E : (MACRO)             		align 2
(1)    6/    A72E :  (MACRO-2)                  cnop 0,2
(1)    6/    A72E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   12829/    A72E :                     
   12830/    A72E :                     Ani_obj0F:
   12831/    A72E :                     		include	"_anim/obj0F.asm"
(1)    1/    A72E :                     ; ---------------------------------------------------------------------------
(1)    2/    A72E :                     ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
(1)    3/    A72E :                     ; ---------------------------------------------------------------------------
(1)    4/    A72E : 0002                		dc.w byte_A714-Ani_obj0F
(1)    5/    A730 : 1F00 01FF           byte_A714:	dc.b $1F, 0, 1,	$FF
(1)    6/    A734 : (MACRO)             		align 2
(1)    6/    A734 :  (MACRO-2)                  cnop 0,2
(1)    6/    A734 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   12832/    A734 :                     
   12833/    A734 :                     ; ---------------------------------------------------------------------------
   12834/    A734 :                     ; Subroutine to	animate	a sprite using an animation script
   12835/    A734 :                     ; ---------------------------------------------------------------------------
   12836/    A734 :                     
   12837/    A734 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   12838/    A734 :                     
   12839/    A734 :                     
   12840/    A734 :                     AnimateSprite:
   12841/    A734 : 7000                		moveq	#0,d0
   12842/    A736 : 1028 001C           		move.b	$1C(a0),d0	; move animation number	to d0
   12843/    A73A : B028 001D           		cmp.b	$1D(a0),d0	; is animation set to restart?
   12844/    A73E : 6710                		beq.s	Anim_Run	; if not, branch
   12845/    A740 : 1140 001D           		move.b	d0,$1D(a0)	; set to "no restart"
   12846/    A744 : 117C 0000 001B      		move.b	#0,$1B(a0)	; reset	animation
   12847/    A74A : 117C 0000 001E      		move.b	#0,$1E(a0)	; reset	frame duration
   12848/    A750 :                     
   12849/    A750 :                     Anim_Run:
   12850/    A750 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   12851/    A754 : 6A3A                		bpl.s	Anim_Wait	; if time remains, branch
   12852/    A756 : D040                		add.w	d0,d0
   12853/    A758 : D2F1 0000           		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
   12854/    A75C : 1151 001E           		move.b	(a1),$1E(a0)	; load frame duration
   12855/    A760 : 7200                		moveq	#0,d1
   12856/    A762 : 1228 001B           		move.b	$1B(a0),d1	; load current frame number
   12857/    A766 : 1031 1001           		move.b	1(a1,d1.w),d0	; read sprite number from script
   12858/    A76A : 6B26                		bmi.s	Anim_End_FF	; if animation is complete, branch
   12859/    A76C :                     
   12860/    A76C :                     Anim_Next:
   12861/    A76C : 1200                		move.b	d0,d1
   12862/    A76E : 0200 001F           		andi.b	#$1F,d0
   12863/    A772 : 1140 001A           		move.b	d0,$1A(a0)	; load sprite number
   12864/    A776 : 1028 0022           		move.b	$22(a0),d0
   12865/    A77A : E719                		rol.b	#3,d1
   12866/    A77C : B101                		eor.b	d0,d1
   12867/    A77E : 0201 0003           		andi.b	#3,d1
   12868/    A782 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   12869/    A788 : 8328 0001           		or.b	d1,1(a0)
   12870/    A78C : 5228 001B           		addq.b	#1,$1B(a0)	; next frame number
   12871/    A790 :                     
   12872/    A790 :                     Anim_Wait:
   12873/    A790 : 4E75                		rts	
   12874/    A792 :                     ; ===========================================================================
   12875/    A792 :                     
   12876/    A792 :                     Anim_End_FF:
   12877/    A792 : 5200                		addq.b	#1,d0		; is the end flag = $FF	?
   12878/    A794 : 660C                		bne.s	Anim_End_FE	; if not, branch
   12879/    A796 : 117C 0000 001B      		move.b	#0,$1B(a0)	; restart the animation
   12880/    A79C : 1029 0001           		move.b	1(a1),d0	; read sprite number
   12881/    A7A0 : 60CA                		bra.s	Anim_Next
   12882/    A7A2 :                     ; ===========================================================================
   12883/    A7A2 :                     
   12884/    A7A2 :                     Anim_End_FE:
   12885/    A7A2 : 5200                		addq.b	#1,d0		; is the end flag = $FE	?
   12886/    A7A4 : 6610                		bne.s	Anim_End_FD	; if not, branch
   12887/    A7A6 : 1031 1002           		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
   12888/    A7AA : 9128 001B           		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
   12889/    A7AE : 9200                		sub.b	d0,d1
   12890/    A7B0 : 1031 1001           		move.b	1(a1,d1.w),d0	; read sprite number
   12891/    A7B4 : 60B6                		bra.s	Anim_Next
   12892/    A7B6 :                     ; ===========================================================================
   12893/    A7B6 :                     
   12894/    A7B6 :                     Anim_End_FD:
   12895/    A7B6 : 5200                		addq.b	#1,d0		; is the end flag = $FD	?
   12896/    A7B8 : 6606                		bne.s	Anim_End_FC	; if not, branch
   12897/    A7BA : 1171 1002 001C      		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
   12898/    A7C0 :                     
   12899/    A7C0 :                     Anim_End_FC:
   12900/    A7C0 : 5200                		addq.b	#1,d0		; is the end flag = $FC	?
   12901/    A7C2 : 6604                		bne.s	Anim_End_FB	; if not, branch
   12902/    A7C4 : 5428 0024           		addq.b	#2,$24(a0)	; jump to next routine
   12903/    A7C8 :                     
   12904/    A7C8 :                     Anim_End_FB:
   12905/    A7C8 : 5200                		addq.b	#1,d0		; is the end flag = $FB	?
   12906/    A7CA : 660A                		bne.s	Anim_End_FA	; if not, branch
   12907/    A7CC : 117C 0000 001B      		move.b	#0,$1B(a0)	; reset	animation
   12908/    A7D2 : 4228 0025           		clr.b	$25(a0)		; reset	2nd routine counter
   12909/    A7D6 :                     
   12910/    A7D6 :                     Anim_End_FA:
   12911/    A7D6 : 5200                		addq.b	#1,d0		; is the end flag = $FA	?
   12912/    A7D8 : 6604                		bne.s	Anim_End	; if not, branch
   12913/    A7DA : 5428 0025           		addq.b	#2,$25(a0)	; jump to next routine
   12914/    A7DE :                     
   12915/    A7DE :                     Anim_End:
   12916/    A7DE : 4E75                		rts	
   12917/    A7E0 :                     ; End of function AnimateSprite
   12918/    A7E0 :                     
   12919/    A7E0 :                     ; ===========================================================================
   12920/    A7E0 :                     ; ---------------------------------------------------------------------------
   12921/    A7E0 :                     ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
   12922/    A7E0 :                     ; ---------------------------------------------------------------------------
   12923/    A7E0 :                     Map_obj0F:
   12924/    A7E0 :                     		include	"_maps/obj0F.asm"
(1)    1/    A7E0 :                     ; ---------------------------------------------------------------------------
(1)    2/    A7E0 :                     ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
(1)    3/    A7E0 :                     ; ---------------------------------------------------------------------------
(1)    4/    A7E0 : 0009                		dc.w byte_A7CD-Map_obj0F
(1)    5/    A7E2 : 0008                		dc.w byte_A7CC-Map_obj0F
(1)    6/    A7E4 : 0027                		dc.w byte_A7EB-Map_obj0F
(1)    7/    A7E6 : 00BE                		dc.w byte_A882-Map_obj0F
(1)    8/    A7E8 : 06                  byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
(1)    9/    A7E9 : 000C 00F0 00        byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
(1)   10/    A7EE : 0000 00F3 20        		dc.b 0,	0, 0, $F3, $20
(1)   11/    A7F3 : 0000 00F3 30        		dc.b 0,	0, 0, $F3, $30
(1)   12/    A7F8 : 000C 00F4 38        		dc.b 0,	$C, 0, $F4, $38
(1)   13/    A7FD : 0008 00F8 60        		dc.b 0,	8, 0, $F8, $60
(1)   14/    A802 : 0008 00FB 78        		dc.b 0,	8, 0, $FB, $78
(1)   15/    A807 : 1E                  byte_A7EB:	dc.b $1E		; sprite list filler
(1)   16/    A808 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   17/    A80D : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   18/    A812 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   19/    A817 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   20/    A81C : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   21/    A821 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   22/    A826 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   23/    A82B : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   24/    A830 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   25/    A835 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   26/    A83A : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   27/    A83F : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   28/    A844 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   29/    A849 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   30/    A84E : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   31/    A853 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   32/    A858 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   33/    A85D : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   34/    A862 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   35/    A867 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   36/    A86C : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   37/    A871 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   38/    A876 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   39/    A87B : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   40/    A880 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   41/    A885 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   42/    A88A : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   43/    A88F : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   44/    A894 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   45/    A899 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   46/    A89E : 01                  byte_A882:	dc.b 1			; "TM"
(1)   47/    A89F : FC04 0000 F8        		dc.b $FC, 4, 0,	0, $F8
(1)   48/    A8A4 : (MACRO)             		align 2
(1)   48/    A8A4 :  (MACRO-2)                  cnop 0,2
(1)   48/    A8A4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   12925/    A8A4 :                     
   12926/    A8A4 :                     ; ---------------------------------------------------------------------------
   12927/    A8A4 :                     ; Sprite mappings - Sonic on the title screen
   12928/    A8A4 :                     ; ---------------------------------------------------------------------------
   12929/    A8A4 :                     Map_obj0E:
   12930/    A8A4 :                     		include	"_maps/obj0E.asm"
(1)    1/    A8A4 :                     Map_ab48:
(1)    2/    A8A4 : 0010                Map_ab48_0: 	dc.w Map_ab48_10-Map_ab48
(1)    3/    A8A6 : 007A                Map_ab48_2: 	dc.w Map_ab48_7A-Map_ab48
(1)    4/    A8A8 : 00E4                Map_ab48_4: 	dc.w Map_ab48_E4-Map_ab48
(1)    5/    A8AA : 014E                Map_ab48_6: 	dc.w Map_ab48_14E-Map_ab48
(1)    6/    A8AC : 01B8                Map_ab48_8: 	dc.w Map_ab48_1B8-Map_ab48
(1)    7/    A8AE : 0222                Map_ab48_A: 	dc.w Map_ab48_222-Map_ab48
(1)    8/    A8B0 : 028C                Map_ab48_C: 	dc.w Map_ab48_28C-Map_ab48
(1)    9/    A8B2 : 02F6                Map_ab48_E: 	dc.w Map_ab48_2F6-Map_ab48
(1)   10/    A8B4 : 15                  Map_ab48_10: 	dc.b $15
(1)   11/    A8B5 : 280E 01E4 38        	dc.b $28, $E, $1, $E4, $38
(1)   12/    A8BA : 1805 01F0 48        	dc.b $18, $5, $1, $F0, $48
(1)   13/    A8BF : 4008 01F4 38        	dc.b $40, $8, $1, $F4, $38
(1)   14/    A8C4 : 4804 01F7 38        	dc.b $48, $4, $1, $F7, $38
(1)   15/    A8C9 : 180F 01D0 08        	dc.b $18, $F, $1, $D0, $8
(1)   16/    A8CE : 1803 01E0 28        	dc.b $18, $3, $1, $E0, $28
(1)   17/    A8D3 : 100F 014A 10        	dc.b $10, $F, $1, $4A, $10
(1)   18/    A8D8 : 0804 015A 20        	dc.b $8, $4, $1, $5A, $20
(1)   19/    A8DD : 000B 015C 30        	dc.b $0, $B, $1, $5C, $30
(1)   20/    A8E2 : 0800 0168 48        	dc.b $8, $0, $1, $68, $48
(1)   21/    A8E7 : 1800 0169 48        	dc.b $18, $0, $1, $69, $48
(1)   22/    A8EC : 1805 016A 00        	dc.b $18, $5, $1, $6A, $0
(1)   23/    A8F1 : 2802 016E 08        	dc.b $28, $2, $1, $6E, $8
(1)   24/    A8F6 : 300F 0171 10        	dc.b $30, $F, $1, $71, $10
(1)   25/    A8FB : 200D 0181 30        	dc.b $20, $D, $1, $81, $30
(1)   26/    A900 : 2001 0189 50        	dc.b $20, $1, $1, $89, $50
(1)   27/    A905 : 3008 018B 30        	dc.b $30, $8, $1, $8B, $30
(1)   28/    A90A : 380E 018E 30        	dc.b $38, $E, $1, $8E, $30
(1)   29/    A90F : 500D 019A 08        	dc.b $50, $D, $1, $9A, $8
(1)   30/    A914 : 500C 01A2 28        	dc.b $50, $C, $1, $A2, $28
(1)   31/    A919 : 5808 01A6 28        	dc.b $58, $8, $1, $A6, $28
(1)   32/    A91E : 15                  Map_ab48_7A: 	dc.b $15
(1)   33/    A91F : 280E 01E4 38        	dc.b $28, $E, $1, $E4, $38
(1)   34/    A924 : 1805 01F0 48        	dc.b $18, $5, $1, $F0, $48
(1)   35/    A929 : 4008 01F4 38        	dc.b $40, $8, $1, $F4, $38
(1)   36/    A92E : 4804 01F7 38        	dc.b $48, $4, $1, $F7, $38
(1)   37/    A933 : 180F 01D0 08        	dc.b $18, $F, $1, $D0, $8
(1)   38/    A938 : 1803 01E0 28        	dc.b $18, $3, $1, $E0, $28
(1)   39/    A93D : 100F 014A 10        	dc.b $10, $F, $1, $4A, $10
(1)   40/    A942 : 0804 015A 20        	dc.b $8, $4, $1, $5A, $20
(1)   41/    A947 : 000B 015C 30        	dc.b $0, $B, $1, $5C, $30
(1)   42/    A94C : 0800 0168 48        	dc.b $8, $0, $1, $68, $48
(1)   43/    A951 : 1800 0169 48        	dc.b $18, $0, $1, $69, $48
(1)   44/    A956 : 1805 016A 00        	dc.b $18, $5, $1, $6A, $0
(1)   45/    A95B : 2802 016E 08        	dc.b $28, $2, $1, $6E, $8
(1)   46/    A960 : 300F 0171 10        	dc.b $30, $F, $1, $71, $10
(1)   47/    A965 : 200D 0181 30        	dc.b $20, $D, $1, $81, $30
(1)   48/    A96A : 2001 0189 50        	dc.b $20, $1, $1, $89, $50
(1)   49/    A96F : 3008 018B 30        	dc.b $30, $8, $1, $8B, $30
(1)   50/    A974 : 380E 018E 30        	dc.b $38, $E, $1, $8E, $30
(1)   51/    A979 : 500D 019A 08        	dc.b $50, $D, $1, $9A, $8
(1)   52/    A97E : 500C 01A2 28        	dc.b $50, $C, $1, $A2, $28
(1)   53/    A983 : 5808 01A6 28        	dc.b $58, $8, $1, $A6, $28
(1)   54/    A988 : 15                  Map_ab48_E4: 	dc.b $15
(1)   55/    A989 : 280E 01E4 38        	dc.b $28, $E, $1, $E4, $38
(1)   56/    A98E : 1805 01F0 48        	dc.b $18, $5, $1, $F0, $48
(1)   57/    A993 : 4008 01F4 38        	dc.b $40, $8, $1, $F4, $38
(1)   58/    A998 : 4804 01F7 38        	dc.b $48, $4, $1, $F7, $38
(1)   59/    A99D : 180F 01D0 08        	dc.b $18, $F, $1, $D0, $8
(1)   60/    A9A2 : 1803 01E0 28        	dc.b $18, $3, $1, $E0, $28
(1)   61/    A9A7 : 100F 014A 10        	dc.b $10, $F, $1, $4A, $10
(1)   62/    A9AC : 0804 015A 20        	dc.b $8, $4, $1, $5A, $20
(1)   63/    A9B1 : 000B 015C 30        	dc.b $0, $B, $1, $5C, $30
(1)   64/    A9B6 : 0800 0168 48        	dc.b $8, $0, $1, $68, $48
(1)   65/    A9BB : 1800 0169 48        	dc.b $18, $0, $1, $69, $48
(1)   66/    A9C0 : 1805 016A 00        	dc.b $18, $5, $1, $6A, $0
(1)   67/    A9C5 : 2802 016E 08        	dc.b $28, $2, $1, $6E, $8
(1)   68/    A9CA : 300F 0171 10        	dc.b $30, $F, $1, $71, $10
(1)   69/    A9CF : 200D 0181 30        	dc.b $20, $D, $1, $81, $30
(1)   70/    A9D4 : 2001 0189 50        	dc.b $20, $1, $1, $89, $50
(1)   71/    A9D9 : 3008 018B 30        	dc.b $30, $8, $1, $8B, $30
(1)   72/    A9DE : 380E 018E 30        	dc.b $38, $E, $1, $8E, $30
(1)   73/    A9E3 : 500D 019A 08        	dc.b $50, $D, $1, $9A, $8
(1)   74/    A9E8 : 500C 01A2 28        	dc.b $50, $C, $1, $A2, $28
(1)   75/    A9ED : 5808 01A6 28        	dc.b $58, $8, $1, $A6, $28
(1)   76/    A9F2 : 15                  Map_ab48_14E: 	dc.b $15
(1)   77/    A9F3 : 280E 01E4 38        	dc.b $28, $E, $1, $E4, $38
(1)   78/    A9F8 : 1805 01F0 48        	dc.b $18, $5, $1, $F0, $48
(1)   79/    A9FD : 4008 01F4 38        	dc.b $40, $8, $1, $F4, $38
(1)   80/    AA02 : 4804 01F7 38        	dc.b $48, $4, $1, $F7, $38
(1)   81/    AA07 : 180F 01D0 08        	dc.b $18, $F, $1, $D0, $8
(1)   82/    AA0C : 1803 01E0 28        	dc.b $18, $3, $1, $E0, $28
(1)   83/    AA11 : 100F 014A 10        	dc.b $10, $F, $1, $4A, $10
(1)   84/    AA16 : 0804 015A 20        	dc.b $8, $4, $1, $5A, $20
(1)   85/    AA1B : 000B 015C 30        	dc.b $0, $B, $1, $5C, $30
(1)   86/    AA20 : 0800 0168 48        	dc.b $8, $0, $1, $68, $48
(1)   87/    AA25 : 1800 0169 48        	dc.b $18, $0, $1, $69, $48
(1)   88/    AA2A : 1805 016A 00        	dc.b $18, $5, $1, $6A, $0
(1)   89/    AA2F : 2802 016E 08        	dc.b $28, $2, $1, $6E, $8
(1)   90/    AA34 : 300F 0171 10        	dc.b $30, $F, $1, $71, $10
(1)   91/    AA39 : 200D 0181 30        	dc.b $20, $D, $1, $81, $30
(1)   92/    AA3E : 2001 0189 50        	dc.b $20, $1, $1, $89, $50
(1)   93/    AA43 : 3008 018B 30        	dc.b $30, $8, $1, $8B, $30
(1)   94/    AA48 : 380E 018E 30        	dc.b $38, $E, $1, $8E, $30
(1)   95/    AA4D : 500D 019A 08        	dc.b $50, $D, $1, $9A, $8
(1)   96/    AA52 : 500C 01A2 28        	dc.b $50, $C, $1, $A2, $28
(1)   97/    AA57 : 5808 01A6 28        	dc.b $58, $8, $1, $A6, $28
(1)   98/    AA5C : 15                  Map_ab48_1B8: 	dc.b $15
(1)   99/    AA5D : 280E 01E4 38        	dc.b $28, $E, $1, $E4, $38
(1)  100/    AA62 : 1805 01F0 48        	dc.b $18, $5, $1, $F0, $48
(1)  101/    AA67 : 4008 01F4 38        	dc.b $40, $8, $1, $F4, $38
(1)  102/    AA6C : 4804 01F7 38        	dc.b $48, $4, $1, $F7, $38
(1)  103/    AA71 : 180F 01D0 08        	dc.b $18, $F, $1, $D0, $8
(1)  104/    AA76 : 1803 01E0 28        	dc.b $18, $3, $1, $E0, $28
(1)  105/    AA7B : 100F 014A 10        	dc.b $10, $F, $1, $4A, $10
(1)  106/    AA80 : 0804 015A 20        	dc.b $8, $4, $1, $5A, $20
(1)  107/    AA85 : 000B 015C 30        	dc.b $0, $B, $1, $5C, $30
(1)  108/    AA8A : 0800 0168 48        	dc.b $8, $0, $1, $68, $48
(1)  109/    AA8F : 1800 0169 48        	dc.b $18, $0, $1, $69, $48
(1)  110/    AA94 : 1805 016A 00        	dc.b $18, $5, $1, $6A, $0
(1)  111/    AA99 : 2802 016E 08        	dc.b $28, $2, $1, $6E, $8
(1)  112/    AA9E : 300F 0171 10        	dc.b $30, $F, $1, $71, $10
(1)  113/    AAA3 : 200D 0181 30        	dc.b $20, $D, $1, $81, $30
(1)  114/    AAA8 : 2001 0189 50        	dc.b $20, $1, $1, $89, $50
(1)  115/    AAAD : 3008 018B 30        	dc.b $30, $8, $1, $8B, $30
(1)  116/    AAB2 : 380E 018E 30        	dc.b $38, $E, $1, $8E, $30
(1)  117/    AAB7 : 500D 019A 08        	dc.b $50, $D, $1, $9A, $8
(1)  118/    AABC : 500C 01A2 28        	dc.b $50, $C, $1, $A2, $28
(1)  119/    AAC1 : 5808 01A6 28        	dc.b $58, $8, $1, $A6, $28
(1)  120/    AAC6 : 15                  Map_ab48_222: 	dc.b $15
(1)  121/    AAC7 : 280E 01E4 38        	dc.b $28, $E, $1, $E4, $38
(1)  122/    AACC : 1805 01F0 48        	dc.b $18, $5, $1, $F0, $48
(1)  123/    AAD1 : 4008 01F4 38        	dc.b $40, $8, $1, $F4, $38
(1)  124/    AAD6 : 4804 01F7 38        	dc.b $48, $4, $1, $F7, $38
(1)  125/    AADB : 180F 01D0 08        	dc.b $18, $F, $1, $D0, $8
(1)  126/    AAE0 : 1803 01E0 28        	dc.b $18, $3, $1, $E0, $28
(1)  127/    AAE5 : 100F 014A 10        	dc.b $10, $F, $1, $4A, $10
(1)  128/    AAEA : 0804 015A 20        	dc.b $8, $4, $1, $5A, $20
(1)  129/    AAEF : 000B 015C 30        	dc.b $0, $B, $1, $5C, $30
(1)  130/    AAF4 : 0800 0168 48        	dc.b $8, $0, $1, $68, $48
(1)  131/    AAF9 : 1800 0169 48        	dc.b $18, $0, $1, $69, $48
(1)  132/    AAFE : 1805 016A 00        	dc.b $18, $5, $1, $6A, $0
(1)  133/    AB03 : 2802 016E 08        	dc.b $28, $2, $1, $6E, $8
(1)  134/    AB08 : 300F 0171 10        	dc.b $30, $F, $1, $71, $10
(1)  135/    AB0D : 200D 0181 30        	dc.b $20, $D, $1, $81, $30
(1)  136/    AB12 : 2001 0189 50        	dc.b $20, $1, $1, $89, $50
(1)  137/    AB17 : 3008 018B 30        	dc.b $30, $8, $1, $8B, $30
(1)  138/    AB1C : 380E 018E 30        	dc.b $38, $E, $1, $8E, $30
(1)  139/    AB21 : 500D 019A 08        	dc.b $50, $D, $1, $9A, $8
(1)  140/    AB26 : 500C 01A2 28        	dc.b $50, $C, $1, $A2, $28
(1)  141/    AB2B : 5808 01A6 28        	dc.b $58, $8, $1, $A6, $28
(1)  142/    AB30 : 15                  Map_ab48_28C: 	dc.b $15
(1)  143/    AB31 : 280E 01E4 38        	dc.b $28, $E, $1, $E4, $38
(1)  144/    AB36 : 1805 01F0 48        	dc.b $18, $5, $1, $F0, $48
(1)  145/    AB3B : 4008 01F4 38        	dc.b $40, $8, $1, $F4, $38
(1)  146/    AB40 : 4804 01F7 38        	dc.b $48, $4, $1, $F7, $38
(1)  147/    AB45 : 180F 01D0 08        	dc.b $18, $F, $1, $D0, $8
(1)  148/    AB4A : 1803 01E0 28        	dc.b $18, $3, $1, $E0, $28
(1)  149/    AB4F : 100F 014A 10        	dc.b $10, $F, $1, $4A, $10
(1)  150/    AB54 : 0804 015A 20        	dc.b $8, $4, $1, $5A, $20
(1)  151/    AB59 : 000B 015C 30        	dc.b $0, $B, $1, $5C, $30
(1)  152/    AB5E : 0800 0168 48        	dc.b $8, $0, $1, $68, $48
(1)  153/    AB63 : 1800 0169 48        	dc.b $18, $0, $1, $69, $48
(1)  154/    AB68 : 1805 016A 00        	dc.b $18, $5, $1, $6A, $0
(1)  155/    AB6D : 2802 016E 08        	dc.b $28, $2, $1, $6E, $8
(1)  156/    AB72 : 300F 0171 10        	dc.b $30, $F, $1, $71, $10
(1)  157/    AB77 : 200D 0181 30        	dc.b $20, $D, $1, $81, $30
(1)  158/    AB7C : 2001 0189 50        	dc.b $20, $1, $1, $89, $50
(1)  159/    AB81 : 3008 018B 30        	dc.b $30, $8, $1, $8B, $30
(1)  160/    AB86 : 380E 018E 30        	dc.b $38, $E, $1, $8E, $30
(1)  161/    AB8B : 500D 019A 08        	dc.b $50, $D, $1, $9A, $8
(1)  162/    AB90 : 500C 01A2 28        	dc.b $50, $C, $1, $A2, $28
(1)  163/    AB95 : 5808 01A6 28        	dc.b $58, $8, $1, $A6, $28
(1)  164/    AB9A : 16                  Map_ab48_2F6: 	dc.b $16
(1)  165/    AB9B : 1804 01F9 38        	dc.b $18, $4, $1, $F9, $38
(1)  166/    ABA0 : 2000 01FB 38        	dc.b $20, $0, $1, $FB, $38
(1)  167/    ABA5 : 2808 01FC 30        	dc.b $28, $8, $1, $FC, $30
(1)  168/    ABAA : 3001 01FF 30        	dc.b $30, $1, $1, $FF, $30
(1)  169/    ABAF : 300B 0201 38        	dc.b $30, $B, $2, $1, $38
(1)  170/    ABB4 : 180F 01D0 08        	dc.b $18, $F, $1, $D0, $8
(1)  171/    ABB9 : 1803 01E0 28        	dc.b $18, $3, $1, $E0, $28
(1)  172/    ABBE : 100F 014A 10        	dc.b $10, $F, $1, $4A, $10
(1)  173/    ABC3 : 0804 015A 20        	dc.b $8, $4, $1, $5A, $20
(1)  174/    ABC8 : 000B 015C 30        	dc.b $0, $B, $1, $5C, $30
(1)  175/    ABCD : 0800 0168 48        	dc.b $8, $0, $1, $68, $48
(1)  176/    ABD2 : 1800 0169 48        	dc.b $18, $0, $1, $69, $48
(1)  177/    ABD7 : 1805 016A 00        	dc.b $18, $5, $1, $6A, $0
(1)  178/    ABDC : 2802 016E 08        	dc.b $28, $2, $1, $6E, $8
(1)  179/    ABE1 : 300F 0171 10        	dc.b $30, $F, $1, $71, $10
(1)  180/    ABE6 : 200D 0181 30        	dc.b $20, $D, $1, $81, $30
(1)  181/    ABEB : 2001 0189 50        	dc.b $20, $1, $1, $89, $50
(1)  182/    ABF0 : 3008 018B 30        	dc.b $30, $8, $1, $8B, $30
(1)  183/    ABF5 : 380E 018E 30        	dc.b $38, $E, $1, $8E, $30
(1)  184/    ABFA : 500D 019A 08        	dc.b $50, $D, $1, $9A, $8
(1)  185/    ABFF : 500C 01A2 28        	dc.b $50, $C, $1, $A2, $28
(1)  186/    AC04 : 5808 01A6 28        	dc.b $58, $8, $1, $A6, $28
(1)  187/    AC09 : (MACRO)             	even
(1)  187/    AC09 : =$D                 paddingSoFar            set paddingSoFar+1
(1)  187/    AC09 : 00                                          dc.b 0 ;ds.b 1 
   12931/    AC0A :                     
   12932/    AC0A :                     ; ===========================================================================
   12933/    AC0A :                     ; ---------------------------------------------------------------------------
   12934/    AC0A :                     ; Object 2B - Chopper enemy (GHZ)
   12935/    AC0A :                     ; ---------------------------------------------------------------------------
   12936/    AC0A :                     
   12937/    AC0A :                     Obj2B:					; XREF: Obj_Index
   12938/    AC0A : 7000                		moveq	#0,d0
   12939/    AC0C : 1028 0024           		move.b	$24(a0),d0
   12940/    AC10 : 323B 000A           		move.w	Obj2B_Index(pc,d0.w),d1
   12941/    AC14 : 4EBB 1006           		jsr	Obj2B_Index(pc,d1.w)
   12942/    AC18 : 6000 4BA2           		bra.w	MarkObjGone
   12943/    AC1C :                     ; ===========================================================================
   12944/    AC1C : 0004                Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
   12945/    AC1E : 003A                		dc.w Obj2B_ChgSpeed-Obj2B_Index
   12946/    AC20 :                     ; ===========================================================================
   12947/    AC20 :                     
   12948/    AC20 :                     Obj2B_Main:				; XREF: Obj2B_Index
   12949/    AC20 : 5428 0024           		addq.b	#2,$24(a0)
   12950/    AC24 : 217C 0000 ACB4 0004 		move.l	#Map_obj2B,4(a0)
   12951/    AC2C : 317C 047B 0002      		move.w	#$47B,2(a0)
   12952/    AC32 : 117C 0004 0001      		move.b	#4,1(a0)
   12953/    AC38 : 117C 0004 0018      		move.b	#4,$18(a0)
   12954/    AC3E : 117C 0009 0020      		move.b	#9,$20(a0)
   12955/    AC44 : 117C 0010 0019      		move.b	#$10,$19(a0)
   12956/    AC4A : 317C F900 0012      		move.w	#-$700,$12(a0)	; set vertical speed
   12957/    AC50 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   12958/    AC56 :                     
   12959/    AC56 :                     Obj2B_ChgSpeed:				; XREF: Obj2B_Index
   12960/    AC56 : 43F9 0000 ACA2      		lea	(Ani_obj2B).l,a1
   12961/    AC5C : 6100 FAD6           		bsr.w	AnimateSprite
   12962/    AC60 : 6100 2A86           		bsr.w	SpeedToPos
   12963/    AC64 : 0668 0018 0012      		addi.w	#$18,$12(a0)	; reduce speed
   12964/    AC6A : 3028 0030           		move.w	$30(a0),d0
   12965/    AC6E : B068 000C           		cmp.w	$C(a0),d0
   12966/    AC72 : 640A                		bcc.s	Obj2B_ChgAni
   12967/    AC74 : 3140 000C           		move.w	d0,$C(a0)
   12968/    AC78 : 317C F900 0012      		move.w	#-$700,$12(a0)	; set vertical speed
   12969/    AC7E :                     
   12970/    AC7E :                     Obj2B_ChgAni:
   12971/    AC7E : 117C 0001 001C      		move.b	#1,$1C(a0)	; use fast animation
   12972/    AC84 : 0440 00C0           		subi.w	#$C0,d0
   12973/    AC88 : B068 000C           		cmp.w	$C(a0),d0
   12974/    AC8C : 6412                		bcc.s	locret_ABB6
   12975/    AC8E : 117C 0000 001C      		move.b	#0,$1C(a0)	; use slow animation
   12976/    AC94 : 4A68 0012           		tst.w	$12(a0)		; is Chopper at	its highest point?
   12977/    AC98 : 6B06                		bmi.s	locret_ABB6	; if not, branch
   12978/    AC9A : 117C 0002 001C      		move.b	#2,$1C(a0)	; use stationary animation
   12979/    ACA0 :                     
   12980/    ACA0 :                     locret_ABB6:
   12981/    ACA0 : 4E75                		rts	
   12982/    ACA2 :                     ; ===========================================================================
   12983/    ACA2 :                     Ani_obj2B:
   12984/    ACA2 :                     		include	"_anim/obj2B.asm"
(1)    1/    ACA2 :                     ; ---------------------------------------------------------------------------
(1)    2/    ACA2 :                     ; Animation script - Chopper enemy
(1)    3/    ACA2 :                     ; ---------------------------------------------------------------------------
(1)    4/    ACA2 : 0006                		dc.w byte_ABBE-Ani_obj2B
(1)    5/    ACA4 : 000A                		dc.w byte_ABC2-Ani_obj2B
(1)    6/    ACA6 : 000E                		dc.w byte_ABC6-Ani_obj2B
(1)    7/    ACA8 : 0700 01FF           byte_ABBE:	dc.b 7,	0, 1, $FF
(1)    8/    ACAC : 0300 01FF           byte_ABC2:	dc.b 3,	0, 1, $FF
(1)    9/    ACB0 : 0700 FF             byte_ABC6:	dc.b 7,	0, $FF
(1)   10/    ACB3 : (MACRO)             		align 2
(1)   10/    ACB3 :  (MACRO-2)                  cnop 0,2
(1)   10/    ACB3 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   10/    ACB3 : =$E                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   10/    ACB4 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   12985/    ACB4 :                     
   12986/    ACB4 :                     ; ---------------------------------------------------------------------------
   12987/    ACB4 :                     ; Sprite mappings - Chopper enemy (GHZ)
   12988/    ACB4 :                     ; ---------------------------------------------------------------------------
   12989/    ACB4 :                     Map_obj2B:
   12990/    ACB4 :                     		include	"_maps/obj2B.asm"
(1)    1/    ACB4 :                     ; ---------------------------------------------------------------------------
(1)    2/    ACB4 :                     ; Sprite mappings - Chopper enemy (GHZ)
(1)    3/    ACB4 :                     ; ---------------------------------------------------------------------------
(1)    4/    ACB4 : 0004                		dc.w byte_ABCE-Map_obj2B
(1)    5/    ACB6 : 000A                		dc.w byte_ABD4-Map_obj2B
(1)    6/    ACB8 : 01                  byte_ABCE:	dc.b 1
(1)    7/    ACB9 : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)    8/    ACBE : 01                  byte_ABD4:	dc.b 1
(1)    9/    ACBF : F00F 0010 F0        		dc.b $F0, $F, 0, $10, $F0
(1)   10/    ACC4 : (MACRO)             		align 2
(1)   10/    ACC4 :  (MACRO-2)                  cnop 0,2
(1)   10/    ACC4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   12991/    ACC4 :                     
   12992/    ACC4 :                     ; ===========================================================================
   12993/    ACC4 :                     ; ---------------------------------------------------------------------------
   12994/    ACC4 :                     ; Object 2C - Jaws enemy (LZ)
   12995/    ACC4 :                     ; ---------------------------------------------------------------------------
   12996/    ACC4 :                     
   12997/    ACC4 :                     Obj2C:					; XREF: Obj_Index
   12998/    ACC4 : 7000                		moveq	#0,d0
   12999/    ACC6 : 1028 0024           		move.b	$24(a0),d0
   13000/    ACCA : 323B 0006           		move.w	Obj2C_Index(pc,d0.w),d1
   13001/    ACCE : 4EFB 1002           		jmp	Obj2C_Index(pc,d1.w)
   13002/    ACD2 :                     ; ===========================================================================
   13003/    ACD2 : 0004                Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
   13004/    ACD4 : 0052                		dc.w Obj2C_Turn-Obj2C_Index
   13005/    ACD6 :                     ; ===========================================================================
   13006/    ACD6 :                     
   13007/    ACD6 :                     Obj2C_Main:				; XREF: Obj2C_Index
   13008/    ACD6 : 5428 0024           		addq.b	#2,$24(a0)
   13009/    ACDA : 217C 0000 AD5A 0004 		move.l	#Map_obj2C,4(a0)
   13010/    ACE2 : 317C 2486 0002      		move.w	#$2486,2(a0)
   13011/    ACE8 : 0028 0004 0001      		ori.b	#4,1(a0)
   13012/    ACEE : 117C 000A 0020      		move.b	#$A,$20(a0)
   13013/    ACF4 : 117C 0004 0018      		move.b	#4,$18(a0)
   13014/    ACFA : 117C 0010 0019      		move.b	#$10,$19(a0)
   13015/    AD00 : 7000                		moveq	#0,d0
   13016/    AD02 : 1028 0028           		move.b	$28(a0),d0	; load object subtype number
   13017/    AD06 : ED48                		lsl.w	#6,d0		; multiply d0 by 64
   13018/    AD08 : 5340                		subq.w	#1,d0
   13019/    AD0A : 3140 0030           		move.w	d0,$30(a0)	; set turn delay time
   13020/    AD0E : 3140 0032           		move.w	d0,$32(a0)
   13021/    AD12 : 317C FFC0 0010      		move.w	#-$40,$10(a0)	; move Jaws to the left
   13022/    AD18 : 0828 0000 0022      		btst	#0,$22(a0)	; is Jaws facing left?
   13023/    AD1E : 6704                		beq.s	Obj2C_Turn	; if yes, branch
   13024/    AD20 : 4468 0010           		neg.w	$10(a0)		; move Jaws to the right
   13025/    AD24 :                     
   13026/    AD24 :                     Obj2C_Turn:				; XREF: Obj2C_Index
   13027/    AD24 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
   13028/    AD28 : 6A16                		bpl.s	Obj2C_Animate	; if time remains, branch
   13029/    AD2A : 3168 0032 0030      		move.w	$32(a0),$30(a0)	; reset	turn delay time
   13030/    AD30 : 4468 0010           		neg.w	$10(a0)		; change speed direction
   13031/    AD34 : 0868 0000 0022      		bchg	#0,$22(a0)	; change Jaws facing direction
   13032/    AD3A : 117C 0001 001D      		move.b	#1,$1D(a0)	; reset	animation
   13033/    AD40 :                     
   13034/    AD40 :                     Obj2C_Animate:
   13035/    AD40 : 43F9 0000 AD52      		lea	(Ani_obj2C).l,a1
   13036/    AD46 : 6100 F9EC           		bsr.w	AnimateSprite
   13037/    AD4A : 6100 299C           		bsr.w	SpeedToPos
   13038/    AD4E : 6000 4A6C           		bra.w	MarkObjGone
   13039/    AD52 :                     ; ===========================================================================
   13040/    AD52 :                     Ani_obj2C:
   13041/    AD52 :                     		include	"_anim/obj2C.asm"
(1)    1/    AD52 :                     ; ---------------------------------------------------------------------------
(1)    2/    AD52 :                     ; Animation script - Jaws enemy
(1)    3/    AD52 :                     ; ---------------------------------------------------------------------------
(1)    4/    AD52 : 0002                		dc.w byte_AC6A-Ani_obj2C
(1)    5/    AD54 : 0700 0102 03FF      byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
(1)    6/    AD5A : (MACRO)             		align 2
(1)    6/    AD5A :  (MACRO-2)                  cnop 0,2
(1)    6/    AD5A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   13042/    AD5A :                     
   13043/    AD5A :                     ; ---------------------------------------------------------------------------
   13044/    AD5A :                     ; Sprite mappings - Jaws enemy (LZ)
   13045/    AD5A :                     ; ---------------------------------------------------------------------------
   13046/    AD5A :                     Map_obj2C:
   13047/    AD5A :                     		include	"_maps/obj2C.asm"
(1)    1/    AD5A :                     ; ---------------------------------------------------------------------------
(1)    2/    AD5A :                     ; Sprite mappings - Jaws enemy (LZ)
(1)    3/    AD5A :                     ; ---------------------------------------------------------------------------
(1)    4/    AD5A : 0008                		dc.w byte_AC78-Map_obj2C
(1)    5/    AD5C : 0013                		dc.w byte_AC83-Map_obj2C
(1)    6/    AD5E : 001E                		dc.w byte_AC8E-Map_obj2C
(1)    7/    AD60 : 0029                		dc.w byte_AC99-Map_obj2C
(1)    8/    AD62 : 02                  byte_AC78:	dc.b 2
(1)    9/    AD63 : F40E 0000 F0        		dc.b $F4, $E, 0, 0, $F0
(1)   10/    AD68 : F505 0018 10        		dc.b $F5, 5, 0,	$18, $10
(1)   11/    AD6D : 02                  byte_AC83:	dc.b 2
(1)   12/    AD6E : F40E 000C F0        		dc.b $F4, $E, 0, $C, $F0
(1)   13/    AD73 : F505 001C 10        		dc.b $F5, 5, 0,	$1C, $10
(1)   14/    AD78 : 02                  byte_AC8E:	dc.b 2
(1)   15/    AD79 : F40E 0000 F0        		dc.b $F4, $E, 0, 0, $F0
(1)   16/    AD7E : F505 1018 10        		dc.b $F5, 5, $10, $18, $10
(1)   17/    AD83 : 02                  byte_AC99:	dc.b 2
(1)   18/    AD84 : F40E 000C F0        		dc.b $F4, $E, 0, $C, $F0
(1)   19/    AD89 : F505 101C 10        		dc.b $F5, 5, $10, $1C, $10
(1)   20/    AD8E : (MACRO)             		align 2
(1)   20/    AD8E :  (MACRO-2)                  cnop 0,2
(1)   20/    AD8E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   13048/    AD8E :                     
   13049/    AD8E :                     ; ===========================================================================
   13050/    AD8E :                     ; ---------------------------------------------------------------------------
   13051/    AD8E :                     ; Object 2D - Burrobot enemy (LZ)
   13052/    AD8E :                     ; ---------------------------------------------------------------------------
   13053/    AD8E :                     
   13054/    AD8E :                     Obj2D:					; XREF: Obj_Index
   13055/    AD8E : 7000                		moveq	#0,d0
   13056/    AD90 : 1028 0024           		move.b	$24(a0),d0
   13057/    AD94 : 323B 0006           		move.w	Obj2D_Index(pc,d0.w),d1
   13058/    AD98 : 4EFB 1002           		jmp	Obj2D_Index(pc,d1.w)
   13059/    AD9C :                     ; ===========================================================================
   13060/    AD9C : 0004                Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
   13061/    AD9E : 0044                		dc.w Obj2D_Action-Obj2D_Index
   13062/    ADA0 :                     ; ===========================================================================
   13063/    ADA0 :                     
   13064/    ADA0 :                     Obj2D_Main:				; XREF: Obj2D_Index
   13065/    ADA0 : 5428 0024           		addq.b	#2,$24(a0)
   13066/    ADA4 : 117C 0013 0016      		move.b	#$13,$16(a0)
   13067/    ADAA : 117C 0008 0017      		move.b	#8,$17(a0)
   13068/    ADB0 : 217C 0000 AF46 0004 		move.l	#Map_obj2D,4(a0)
   13069/    ADB8 : 317C 04A6 0002      		move.w	#$4A6,2(a0)
   13070/    ADBE : 0028 0004 0001      		ori.b	#4,1(a0)
   13071/    ADC4 : 117C 0004 0018      		move.b	#4,$18(a0)
   13072/    ADCA : 117C 0005 0020      		move.b	#5,$20(a0)
   13073/    ADD0 : 117C 000C 0019      		move.b	#$C,$19(a0)
   13074/    ADD6 : 5C28 0025           		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
   13075/    ADDA : 117C 0002 001C      		move.b	#2,$1C(a0)
   13076/    ADE0 :                     
   13077/    ADE0 :                     Obj2D_Action:				; XREF: Obj2D_Index
   13078/    ADE0 : 7000                		moveq	#0,d0
   13079/    ADE2 : 1028 0025           		move.b	$25(a0),d0
   13080/    ADE6 : 323B 0014           		move.w	Obj2D_Index2(pc,d0.w),d1
   13081/    ADEA : 4EBB 1010           		jsr	Obj2D_Index2(pc,d1.w)
   13082/    ADEE : 43F9 0000 AF2E      		lea	(Ani_obj2D).l,a1
   13083/    ADF4 : 6100 F93E           		bsr.w	AnimateSprite
   13084/    ADF8 : 6000 49C2           		bra.w	MarkObjGone
   13085/    ADFC :                     ; ===========================================================================
   13086/    ADFC : 0008                Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
   13087/    ADFE : 0032                		dc.w Obj2D_Move-Obj2D_Index2
   13088/    AE00 : 00A4                		dc.w Obj2D_Jump-Obj2D_Index2
   13089/    AE02 : 00E0                		dc.w Obj2D_ChkSonic-Obj2D_Index2
   13090/    AE04 :                     ; ===========================================================================
   13091/    AE04 :                     
   13092/    AE04 :                     Obj2D_ChgDir:				; XREF: Obj2D_Index2
   13093/    AE04 : 5368 0030           		subq.w	#1,$30(a0)
   13094/    AE08 : 6A22                		bpl.s	locret_AD42
   13095/    AE0A : 5428 0025           		addq.b	#2,$25(a0)
   13096/    AE0E : 317C 00FF 0030      		move.w	#$FF,$30(a0)
   13097/    AE14 : 317C 0080 0010      		move.w	#$80,$10(a0)
   13098/    AE1A : 117C 0001 001C      		move.b	#1,$1C(a0)
   13099/    AE20 : 0868 0000 0022      		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
   13100/    AE26 : 6704                		beq.s	locret_AD42
   13101/    AE28 : 4468 0010           		neg.w	$10(a0)		; change direction the Burrobot	is moving
   13102/    AE2C :                     
   13103/    AE2C :                     locret_AD42:
   13104/    AE2C : 4E75                		rts	
   13105/    AE2E :                     ; ===========================================================================
   13106/    AE2E :                     
   13107/    AE2E :                     Obj2D_Move:				; XREF: Obj2D_Index2
   13108/    AE2E : 5368 0030           		subq.w	#1,$30(a0)
   13109/    AE32 : 6B3A                		bmi.s	loc_AD84
   13110/    AE34 : 6100 28B2           		bsr.w	SpeedToPos
   13111/    AE38 : 0868 0000 0032      		bchg	#0,$32(a0)
   13112/    AE3E : 6622                		bne.s	loc_AD78
   13113/    AE40 : 3628 0008           		move.w	8(a0),d3
   13114/    AE44 : 0643 000C           		addi.w	#$C,d3
   13115/    AE48 : 0828 0000 0022      		btst	#0,$22(a0)
   13116/    AE4E : 6604                		bne.s	loc_AD6A
   13117/    AE50 : 0443 0018           		subi.w	#$18,d3
   13118/    AE54 :                     
   13119/    AE54 :                     loc_AD6A:
   13120/    AE54 : 4EB9 0001 5098      		jsr	(ObjHitFloor2).l
   13121/    AE5A : 0C41 000C           		cmpi.w	#$C,d1
   13122/    AE5E : 6C0E                		bge.s	loc_AD84
   13123/    AE60 : 4E75                		rts	
   13124/    AE62 :                     ; ===========================================================================
   13125/    AE62 :                     
   13126/    AE62 :                     loc_AD78:				; XREF: Obj2D_Move
   13127/    AE62 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   13128/    AE68 : D368 000C           		add.w	d1,$C(a0)
   13129/    AE6C : 4E75                		rts	
   13130/    AE6E :                     ; ===========================================================================
   13131/    AE6E :                     
   13132/    AE6E :                     loc_AD84:				; XREF: Obj2D_Move
   13133/    AE6E : 0838 0002 FE0F      		btst	#2,($FFFFFE0F).w
   13134/    AE74 : 6718                		beq.s	loc_ADA4
   13135/    AE76 : 5528 0025           		subq.b	#2,$25(a0)
   13136/    AE7A : 317C 003B 0030      		move.w	#$3B,$30(a0)
   13137/    AE80 : 317C 0000 0010      		move.w	#0,$10(a0)
   13138/    AE86 : 117C 0000 001C      		move.b	#0,$1C(a0)
   13139/    AE8C : 4E75                		rts	
   13140/    AE8E :                     ; ===========================================================================
   13141/    AE8E :                     
   13142/    AE8E :                     loc_ADA4:
   13143/    AE8E : 5428 0025           		addq.b	#2,$25(a0)
   13144/    AE92 : 317C FC00 0012      		move.w	#-$400,$12(a0)
   13145/    AE98 : 117C 0002 001C      		move.b	#2,$1C(a0)
   13146/    AE9E : 4E75                		rts	
   13147/    AEA0 :                     ; ===========================================================================
   13148/    AEA0 :                     
   13149/    AEA0 :                     Obj2D_Jump:				; XREF: Obj2D_Index2
   13150/    AEA0 : 6100 2846           		bsr.w	SpeedToPos
   13151/    AEA4 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   13152/    AEAA : 6B2E                		bmi.s	locret_ADF0
   13153/    AEAC : 117C 0003 001C      		move.b	#3,$1C(a0)
   13154/    AEB2 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   13155/    AEB8 : 4A41                		tst.w	d1
   13156/    AEBA : 6A1E                		bpl.s	locret_ADF0
   13157/    AEBC : D368 000C           		add.w	d1,$C(a0)
   13158/    AEC0 : 317C 0000 0012      		move.w	#0,$12(a0)
   13159/    AEC6 : 117C 0001 001C      		move.b	#1,$1C(a0)
   13160/    AECC : 317C 00FF 0030      		move.w	#$FF,$30(a0)
   13161/    AED2 : 5528 0025           		subq.b	#2,$25(a0)
   13162/    AED6 : 6100 0034           		bsr.w	Obj2D_ChkSonic2
   13163/    AEDA :                     
   13164/    AEDA :                     locret_ADF0:
   13165/    AEDA : 4E75                		rts	
   13166/    AEDC :                     ; ===========================================================================
   13167/    AEDC :                     
   13168/    AEDC :                     Obj2D_ChkSonic:				; XREF: Obj2D_Index2
   13169/    AEDC : 343C 0060           		move.w	#$60,d2
   13170/    AEE0 : 6100 002A           		bsr.w	Obj2D_ChkSonic2
   13171/    AEE4 : 6424                		bcc.s	locret_AE20
   13172/    AEE6 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   13173/    AEEA : 9068 000C           		sub.w	$C(a0),d0
   13174/    AEEE : 641A                		bcc.s	locret_AE20
   13175/    AEF0 : 0C40 FF80           		cmpi.w	#-$80,d0
   13176/    AEF4 : 6514                		bcs.s	locret_AE20
   13177/    AEF6 : 4A78 FE08           		tst.w	($FFFFFE08).w
   13178/    AEFA : 660E                		bne.s	locret_AE20
   13179/    AEFC : 5528 0025           		subq.b	#2,$25(a0)
   13180/    AF00 : 3141 0010           		move.w	d1,$10(a0)
   13181/    AF04 : 317C FC00 0012      		move.w	#-$400,$12(a0)
   13182/    AF0A :                     
   13183/    AF0A :                     locret_AE20:
   13184/    AF0A : 4E75                		rts	
   13185/    AF0C :                     
   13186/    AF0C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   13187/    AF0C :                     
   13188/    AF0C :                     
   13189/    AF0C :                     Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
   13190/    AF0C : 323C 0080           		move.w	#$80,d1
   13191/    AF10 : 08E8 0000 0022      		bset	#0,$22(a0)
   13192/    AF16 : 3038 D008           		move.w	($FFFFD008).w,d0
   13193/    AF1A : 9068 0008           		sub.w	8(a0),d0
   13194/    AF1E : 640A                		bcc.s	loc_AE40
   13195/    AF20 : 4440                		neg.w	d0
   13196/    AF22 : 4441                		neg.w	d1
   13197/    AF24 : 08A8 0000 0022      		bclr	#0,$22(a0)
   13198/    AF2A :                     
   13199/    AF2A :                     loc_AE40:
   13200/    AF2A : B042                		cmp.w	d2,d0
   13201/    AF2C : 4E75                		rts	
   13202/    AF2E :                     ; End of function Obj2D_ChkSonic2
   13203/    AF2E :                     
   13204/    AF2E :                     ; ===========================================================================
   13205/    AF2E :                     Ani_obj2D:
   13206/    AF2E :                     		include	"_anim/obj2D.asm"
(1)    1/    AF2E :                     ; ---------------------------------------------------------------------------
(1)    2/    AF2E :                     ; Animation script - Burrobot enemy
(1)    3/    AF2E :                     ; ---------------------------------------------------------------------------
(1)    4/    AF2E : 0008                		dc.w byte_AE4C-Ani_obj2D
(1)    5/    AF30 : 000C                		dc.w byte_AE50-Ani_obj2D
(1)    6/    AF32 : 0010                		dc.w byte_AE54-Ani_obj2D
(1)    7/    AF34 : 0014                		dc.w byte_AE58-Ani_obj2D
(1)    8/    AF36 : 0300 06FF           byte_AE4C:	dc.b 3,	0, 6, $FF
(1)    9/    AF3A : 0300 01FF           byte_AE50:	dc.b 3,	0, 1, $FF
(1)   10/    AF3E : 0302 03FF           byte_AE54:	dc.b 3,	2, 3, $FF
(1)   11/    AF42 : 0304 FF             byte_AE58:	dc.b 3,	4, $FF
(1)   12/    AF45 : (MACRO)             		align 2
(1)   12/    AF45 :  (MACRO-2)                  cnop 0,2
(1)   12/    AF45 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   12/    AF45 : =$F                 paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   12/    AF46 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   13207/    AF46 :                     
   13208/    AF46 :                     ; ---------------------------------------------------------------------------
   13209/    AF46 :                     ; Sprite mappings - Burrobot enemy (LZ)
   13210/    AF46 :                     ; ---------------------------------------------------------------------------
   13211/    AF46 :                     Map_obj2D:
   13212/    AF46 :                     		include	"_maps/obj2D.asm"
(1)    1/    AF46 :                     ; ---------------------------------------------------------------------------
(1)    2/    AF46 :                     ; Sprite mappings - Burrobot enemy (LZ)
(1)    3/    AF46 :                     ; ---------------------------------------------------------------------------
(1)    4/    AF46 : 000E                		dc.w byte_AE6A-Map_obj2D
(1)    5/    AF48 : 0019                		dc.w byte_AE75-Map_obj2D
(1)    6/    AF4A : 0024                		dc.w byte_AE80-Map_obj2D
(1)    7/    AF4C : 002F                		dc.w byte_AE8B-Map_obj2D
(1)    8/    AF4E : 003A                		dc.w byte_AE96-Map_obj2D
(1)    9/    AF50 : 0045                		dc.w byte_AEA1-Map_obj2D
(1)   10/    AF52 : 0050                		dc.w byte_AEAC-Map_obj2D
(1)   11/    AF54 : 02                  byte_AE6A:	dc.b 2
(1)   12/    AF55 : EC0A 0000 F0        		dc.b $EC, $A, 0, 0, $F0
(1)   13/    AF5A : 0409 0009 F4        		dc.b 4,	9, 0, 9, $F4
(1)   14/    AF5F : 02                  byte_AE75:	dc.b 2
(1)   15/    AF60 : EC0A 000F F0        		dc.b $EC, $A, 0, $F, $F0
(1)   16/    AF65 : 0409 0018 F4        		dc.b 4,	9, 0, $18, $F4
(1)   17/    AF6A : 02                  byte_AE80:	dc.b 2
(1)   18/    AF6B : E80A 001E F4        		dc.b $E8, $A, 0, $1E, $F4
(1)   19/    AF70 : 000A 0027 F4        		dc.b 0,	$A, 0, $27, $F4
(1)   20/    AF75 : 02                  byte_AE8B:	dc.b 2
(1)   21/    AF76 : E80A 0030 F4        		dc.b $E8, $A, 0, $30, $F4
(1)   22/    AF7B : 000A 0039 F4        		dc.b 0,	$A, 0, $39, $F4
(1)   23/    AF80 : 02                  byte_AE96:	dc.b 2
(1)   24/    AF81 : E80A 000F F0        		dc.b $E8, $A, 0, $F, $F0
(1)   25/    AF86 : 000A 0042 F4        		dc.b 0,	$A, 0, $42, $F4
(1)   26/    AF8B : 02                  byte_AEA1:	dc.b 2
(1)   27/    AF8C : F406 004B E8        		dc.b $F4, 6, 0,	$4B, $E8
(1)   28/    AF91 : F40A 0051 F8        		dc.b $F4, $A, 0, $51, $F8
(1)   29/    AF96 : 02                  byte_AEAC:	dc.b 2
(1)   30/    AF97 : EC0A 000F F0        		dc.b $EC, $A, 0, $F, $F0
(1)   31/    AF9C : 0409 0009 F4        		dc.b 4,	9, 0, 9, $F4
(1)   32/    AFA1 : (MACRO)             		align 2
(1)   32/    AFA1 :  (MACRO-2)                  cnop 0,2
(1)   32/    AFA1 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   32/    AFA1 : =$10                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   32/    AFA2 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   13213/    AFA2 :                     
   13214/    AFA2 :                     ; ===========================================================================
   13215/    AFA2 :                     ; ---------------------------------------------------------------------------
   13216/    AFA2 :                     ; Object 2F - large moving platforms (MZ)
   13217/    AFA2 :                     ; ---------------------------------------------------------------------------
   13218/    AFA2 :                     
   13219/    AFA2 :                     Obj2F:					; XREF: Obj_Index
   13220/    AFA2 : 7000                		moveq	#0,d0
   13221/    AFA4 : 1028 0024           		move.b	$24(a0),d0
   13222/    AFA8 : 323B 0006           		move.w	Obj2F_Index(pc,d0.w),d1
   13223/    AFAC : 4EFB 1002           		jmp	Obj2F_Index(pc,d1.w)
   13224/    AFB0 :                     ; ===========================================================================
   13225/    AFB0 : 0010                Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
   13226/    AFB2 : 006E                		dc.w Obj2F_Action-Obj2F_Index
   13227/    AFB4 :                     
   13228/    AFB4 : 024E                Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
   13229/    AFB6 : 0040                		dc.b 0,	$40			; frame	number,	platform width
   13230/    AFB8 : 02C6                		dc.w Obj2F_Data3-Obj2F_Data
   13231/    AFBA : 0140                		dc.b 1,	$40
   13232/    AFBC : 029A                		dc.w Obj2F_Data2-Obj2F_Data
   13233/    AFBE : 0220                		dc.b 2,	$20
   13234/    AFC0 :                     ; ===========================================================================
   13235/    AFC0 :                     
   13236/    AFC0 :                     Obj2F_Main:				; XREF: Obj2F_Index
   13237/    AFC0 : 5428 0024           		addq.b	#2,$24(a0)
   13238/    AFC4 : 217C 0000 B3BE 0004 		move.l	#Map_obj2F,4(a0)
   13239/    AFCC : 317C C000 0002      		move.w	#$C000,2(a0)
   13240/    AFD2 : 117C 0004 0001      		move.b	#4,1(a0)
   13241/    AFD8 : 117C 0005 0018      		move.b	#5,$18(a0)
   13242/    AFDE : 3168 000C 002C      		move.w	$C(a0),$2C(a0)
   13243/    AFE4 : 3168 0008 002A      		move.w	8(a0),$2A(a0)
   13244/    AFEA : 7000                		moveq	#0,d0
   13245/    AFEC : 1028 0028           		move.b	$28(a0),d0
   13246/    AFF0 : E448                		lsr.w	#2,d0
   13247/    AFF2 : 0240 001C           		andi.w	#$1C,d0
   13248/    AFF6 : 43FB 00BC           		lea	Obj2F_Data(pc,d0.w),a1
   13249/    AFFA : 3019                		move.w	(a1)+,d0
   13250/    AFFC : 45FB 00B6           		lea	Obj2F_Data(pc,d0.w),a2
   13251/    B000 : 214A 0030           		move.l	a2,$30(a0)
   13252/    B004 : 1159 001A           		move.b	(a1)+,$1A(a0)
   13253/    B008 : 1151 0019           		move.b	(a1),$19(a0)
   13254/    B00C : 0228 000F 0028      		andi.b	#$F,$28(a0)
   13255/    B012 : 117C 0040 0016      		move.b	#$40,$16(a0)
   13256/    B018 : 08E8 0004 0001      		bset	#4,1(a0)
   13257/    B01E :                     
   13258/    B01E :                     Obj2F_Action:				; XREF: Obj2F_Index
   13259/    B01E : 6100 0068           		bsr.w	Obj2F_Types
   13260/    B022 : 4A28 0025           		tst.b	$25(a0)
   13261/    B026 : 6736                		beq.s	Obj2F_Solid
   13262/    B028 : 7200                		moveq	#0,d1
   13263/    B02A : 1228 0019           		move.b	$19(a0),d1
   13264/    B02E : 0641 000B           		addi.w	#$B,d1
   13265/    B032 : 6100 C598           		bsr.w	ExitPlatform
   13266/    B036 : 0829 0003 0022      		btst	#3,$22(a1)
   13267/    B03C : 6600 0008           		bne.w	Obj2F_Slope
   13268/    B040 : 4228 0025           		clr.b	$25(a0)
   13269/    B044 : 603A                		bra.s	Obj2F_Display
   13270/    B046 :                     ; ===========================================================================
   13271/    B046 :                     
   13272/    B046 :                     Obj2F_Slope:				; XREF: Obj2F_Action
   13273/    B046 : 7200                		moveq	#0,d1
   13274/    B048 : 1228 0019           		move.b	$19(a0),d1
   13275/    B04C : 0641 000B           		addi.w	#$B,d1
   13276/    B050 : 2468 0030           		movea.l	$30(a0),a2
   13277/    B054 : 3428 0008           		move.w	8(a0),d2
   13278/    B058 : 6100 D4DC           		bsr.w	SlopeObject2
   13279/    B05C : 6022                		bra.s	Obj2F_Display
   13280/    B05E :                     ; ===========================================================================
   13281/    B05E :                     
   13282/    B05E :                     Obj2F_Solid:				; XREF: Obj2F_Action
   13283/    B05E : 7200                		moveq	#0,d1
   13284/    B060 : 1228 0019           		move.b	$19(a0),d1
   13285/    B064 : 0641 000B           		addi.w	#$B,d1
   13286/    B068 : 343C 0020           		move.w	#$20,d2
   13287/    B06C : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)
   13288/    B072 : 6604                		bne.s	loc_AF8E
   13289/    B074 : 343C 0030           		move.w	#$30,d2
   13290/    B078 :                     
   13291/    B078 :                     loc_AF8E:
   13292/    B078 : 2468 0030           		movea.l	$30(a0),a2
   13293/    B07C : 6100 4AF4           		bsr.w	SolidObject2F
   13294/    B080 :                     
   13295/    B080 :                     Obj2F_Display:				; XREF: Obj2F_Action
   13296/    B080 : 6100 268C           		bsr.w	DisplaySprite
   13297/    B084 : 6000 011E           		bra.w	Obj2F_ChkDel
   13298/    B088 :                     
   13299/    B088 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   13300/    B088 :                     
   13301/    B088 :                     
   13302/    B088 :                     Obj2F_Types:				; XREF: Obj2F_Action
   13303/    B088 : 7000                		moveq	#0,d0
   13304/    B08A : 1028 0028           		move.b	$28(a0),d0
   13305/    B08E : 0240 0007           		andi.w	#7,d0
   13306/    B092 : D040                		add.w	d0,d0
   13307/    B094 : 323B 0006           		move.w	Obj2F_TypeIndex(pc,d0.w),d1
   13308/    B098 : 4EFB 1002           		jmp	Obj2F_TypeIndex(pc,d1.w)
   13309/    B09C :                     ; End of function Obj2F_Types
   13310/    B09C :                     
   13311/    B09C :                     ; ===========================================================================
   13312/    B09C : 000C                Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
   13313/    B09E : 000E                		dc.w Obj2F_Type01-Obj2F_TypeIndex
   13314/    B0A0 : 0018                		dc.w Obj2F_Type02-Obj2F_TypeIndex
   13315/    B0A2 : 0022                		dc.w Obj2F_Type03-Obj2F_TypeIndex
   13316/    B0A4 : 002C                		dc.w Obj2F_Type04-Obj2F_TypeIndex
   13317/    B0A6 : 004C                		dc.w Obj2F_Type05-Obj2F_TypeIndex
   13318/    B0A8 :                     ; ===========================================================================
   13319/    B0A8 :                     
   13320/    B0A8 :                     Obj2F_Type00:				; XREF: Obj2F_TypeIndex
   13321/    B0A8 : 4E75                		rts			; type 00 platform doesn"t move
   13322/    B0AA :                     ; ===========================================================================
   13323/    B0AA :                     
   13324/    B0AA :                     Obj2F_Type01:				; XREF: Obj2F_TypeIndex
   13325/    B0AA : 1038 FE60           		move.b	($FFFFFE60).w,d0
   13326/    B0AE : 323C 0020           		move.w	#$20,d1
   13327/    B0B2 : 601C                		bra.s	Obj2F_Move
   13328/    B0B4 :                     ; ===========================================================================
   13329/    B0B4 :                     
   13330/    B0B4 :                     Obj2F_Type02:				; XREF: Obj2F_TypeIndex
   13331/    B0B4 : 1038 FE64           		move.b	($FFFFFE64).w,d0
   13332/    B0B8 : 323C 0030           		move.w	#$30,d1
   13333/    B0BC : 6012                		bra.s	Obj2F_Move
   13334/    B0BE :                     ; ===========================================================================
   13335/    B0BE :                     
   13336/    B0BE :                     Obj2F_Type03:				; XREF: Obj2F_TypeIndex
   13337/    B0BE : 1038 FE68           		move.b	($FFFFFE68).w,d0
   13338/    B0C2 : 323C 0040           		move.w	#$40,d1
   13339/    B0C6 : 6008                		bra.s	Obj2F_Move
   13340/    B0C8 :                     ; ===========================================================================
   13341/    B0C8 :                     
   13342/    B0C8 :                     Obj2F_Type04:				; XREF: Obj2F_TypeIndex
   13343/    B0C8 : 1038 FE6C           		move.b	($FFFFFE6C).w,d0
   13344/    B0CC : 323C 0060           		move.w	#$60,d1
   13345/    B0D0 :                     
   13346/    B0D0 :                     Obj2F_Move:
   13347/    B0D0 : 0828 0003 0028      		btst	#3,$28(a0)
   13348/    B0D6 : 6704                		beq.s	loc_AFF2
   13349/    B0D8 : 4440                		neg.w	d0
   13350/    B0DA : D041                		add.w	d1,d0
   13351/    B0DC :                     
   13352/    B0DC :                     loc_AFF2:
   13353/    B0DC : 3228 002C           		move.w	$2C(a0),d1
   13354/    B0E0 : 9240                		sub.w	d0,d1
   13355/    B0E2 : 3141 000C           		move.w	d1,$C(a0)	; update position on y-axis
   13356/    B0E6 : 4E75                		rts	
   13357/    B0E8 :                     ; ===========================================================================
   13358/    B0E8 :                     
   13359/    B0E8 :                     Obj2F_Type05:				; XREF: Obj2F_TypeIndex
   13360/    B0E8 : 1028 0034           		move.b	$34(a0),d0
   13361/    B0EC : 4A28 0025           		tst.b	$25(a0)
   13362/    B0F0 : 6608                		bne.s	loc_B010
   13363/    B0F2 : 5500                		subq.b	#2,d0
   13364/    B0F4 : 6410                		bcc.s	loc_B01C
   13365/    B0F6 : 7000                		moveq	#0,d0
   13366/    B0F8 : 600C                		bra.s	loc_B01C
   13367/    B0FA :                     ; ===========================================================================
   13368/    B0FA :                     
   13369/    B0FA :                     loc_B010:
   13370/    B0FA : 5800                		addq.b	#4,d0
   13371/    B0FC : 0C00 0040           		cmpi.b	#$40,d0
   13372/    B100 : 6504                		bcs.s	loc_B01C
   13373/    B102 : 103C 0040           		move.b	#$40,d0
   13374/    B106 :                     
   13375/    B106 :                     loc_B01C:
   13376/    B106 : 1140 0034           		move.b	d0,$34(a0)
   13377/    B10A : 4EB9 0000 29EA      		jsr	(CalcSine).l
   13378/    B110 : E848                		lsr.w	#4,d0
   13379/    B112 : 3200                		move.w	d0,d1
   13380/    B114 : D068 002C           		add.w	$2C(a0),d0
   13381/    B118 : 3140 000C           		move.w	d0,$C(a0)
   13382/    B11C : 0C28 0020 0034      		cmpi.b	#$20,$34(a0)
   13383/    B122 : 6640                		bne.s	loc_B07A
   13384/    B124 : 4A28 0035           		tst.b	$35(a0)
   13385/    B128 : 663A                		bne.s	loc_B07A
   13386/    B12A : 117C 0001 0035      		move.b	#1,$35(a0)
   13387/    B130 : 6100 2A7A           		bsr.w	SingleObjLoad2
   13388/    B134 : 662E                		bne.s	loc_B07A
   13389/    B136 : (MACRO)             		_move.b	#$35,0(a1)	; load sitting flame object
   13389/    B136 :  (MACRO-2)                          insn2op move.b, #$35,0(a1)
   13389/    B136 : 137C 0035 0001                              !move.b   #$35,1+0(a1)
   13389/    B13B :                                             !org    *-1
   13389/    B13B : 00                                          !dc.b   0
   13390/    B13C : 3368 0008 0008      		move.w	8(a0),8(a1)
   13391/    B142 : 3368 002C 002C      		move.w	$2C(a0),$2C(a1)
   13392/    B148 : 5069 002C           		addq.w	#8,$2C(a1)
   13393/    B14C : 5769 002C           		subq.w	#3,$2C(a1)
   13394/    B150 : 0469 0040 0008      		subi.w	#$40,8(a1)
   13395/    B156 : 2368 0030 0030      		move.l	$30(a0),$30(a1)
   13396/    B15C : 2348 0038           		move.l	a0,$38(a1)
   13397/    B160 : 2448                		movea.l	a0,a2
   13398/    B162 : 6122                		bsr.s	sub_B09C
   13399/    B164 :                     
   13400/    B164 :                     loc_B07A:
   13401/    B164 : 7400                		moveq	#0,d2
   13402/    B166 : 45E8 0036           		lea	$36(a0),a2
   13403/    B16A : 141A                		move.b	(a2)+,d2
   13404/    B16C : 5302                		subq.b	#1,d2
   13405/    B16E : 6514                		bcs.s	locret_B09A
   13406/    B170 :                     
   13407/    B170 :                     loc_B086:
   13408/    B170 : 7000                		moveq	#0,d0
   13409/    B172 : 101A                		move.b	(a2)+,d0
   13410/    B174 : ED48                		lsl.w	#6,d0
   13411/    B176 : 0640 D000           		addi.w	#-$3000,d0
   13412/    B17A : 3240                		movea.w	d0,a1
   13413/    B17C : 3341 003C           		move.w	d1,$3C(a1)
   13414/    B180 : 51CA FFEE           		dbf	d2,loc_B086
   13415/    B184 :                     
   13416/    B184 :                     locret_B09A:
   13417/    B184 : 4E75                		rts	
   13418/    B186 :                     
   13419/    B186 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   13420/    B186 :                     
   13421/    B186 :                     
   13422/    B186 :                     sub_B09C:
   13423/    B186 : 45EA 0036           		lea	$36(a2),a2
   13424/    B18A : 7000                		moveq	#0,d0
   13425/    B18C : 1012                		move.b	(a2),d0
   13426/    B18E : 5212                		addq.b	#1,(a2)
   13427/    B190 : 45F2 0001           		lea	1(a2,d0.w),a2
   13428/    B194 : 3009                		move.w	a1,d0
   13429/    B196 : 0440 D000           		subi.w	#-$3000,d0
   13430/    B19A : EC48                		lsr.w	#6,d0
   13431/    B19C : 0240 007F           		andi.w	#$7F,d0
   13432/    B1A0 : 1480                		move.b	d0,(a2)
   13433/    B1A2 : 4E75                		rts	
   13434/    B1A4 :                     ; End of function sub_B09C
   13435/    B1A4 :                     
   13436/    B1A4 :                     ; ===========================================================================
   13437/    B1A4 :                     
   13438/    B1A4 :                     Obj2F_ChkDel:				; XREF: Obj2F_Display
   13439/    B1A4 : 4A28 0035           		tst.b	$35(a0)
   13440/    B1A8 : 6706                		beq.s	loc_B0C6
   13441/    B1AA : 4A28 0001           		tst.b	1(a0)
   13442/    B1AE : 6A20                		bpl.s	Obj2F_DelFlames
   13443/    B1B0 :                     
   13444/    B1B0 :                     loc_B0C6:
   13445/    B1B0 : 3028 002A           		move.w	$2A(a0),d0
   13446/    B1B4 : 0240 FF80           		andi.w	#$FF80,d0
   13447/    B1B8 : 3238 F700           		move.w	($FFFFF700).w,d1
   13448/    B1BC : 0441 0080           		subi.w	#$80,d1
   13449/    B1C0 : 0241 FF80           		andi.w	#$FF80,d1
   13450/    B1C4 : 9041                		sub.w	d1,d0
   13451/    B1C6 : 0C40 0280           		cmpi.w	#$280,d0
   13452/    B1CA : 6200 257E           		bhi.w	DeleteObject
   13453/    B1CE : 4E75                		rts	
   13454/    B1D0 :                     ; ===========================================================================
   13455/    B1D0 :                     
   13456/    B1D0 :                     Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
   13457/    B1D0 : 7400                		moveq	#0,d2
   13458/    B1D2 :                     
   13459/    B1D2 :                     loc_B0E8:
   13460/    B1D2 : 45E8 0036           		lea	$36(a0),a2
   13461/    B1D6 : 1412                		move.b	(a2),d2
   13462/    B1D8 : 421A                		clr.b	(a2)+
   13463/    B1DA : 5302                		subq.b	#1,d2
   13464/    B1DC : 6522                		bcs.s	locret_B116
   13465/    B1DE :                     
   13466/    B1DE :                     loc_B0F4:
   13467/    B1DE : 7000                		moveq	#0,d0
   13468/    B1E0 : 1012                		move.b	(a2),d0
   13469/    B1E2 : 421A                		clr.b	(a2)+
   13470/    B1E4 : ED48                		lsl.w	#6,d0
   13471/    B1E6 : 0640 D000           		addi.w	#-$3000,d0
   13472/    B1EA : 3240                		movea.w	d0,a1
   13473/    B1EC : 6100 255E           		bsr.w	DeleteObject2
   13474/    B1F0 : 51CA FFEC           		dbf	d2,loc_B0F4
   13475/    B1F4 : 117C 0000 0035      		move.b	#0,$35(a0)
   13476/    B1FA : 117C 0000 0034      		move.b	#0,$34(a0)
   13477/    B200 :                     
   13478/    B200 :                     locret_B116:
   13479/    B200 : 4E75                		rts	
   13480/    B202 :                     ; ===========================================================================
   13481/    B202 :                     ; ---------------------------------------------------------------------------
   13482/    B202 :                     ; Collision data for large moving platforms (MZ)
   13483/    B202 :                     ; ---------------------------------------------------------------------------
   13484/    B202 :                     Obj2F_Data1:	binclude	misc/mz_pfm1.bin
   13485/    B24E : (MACRO)             		align 2
   13485/    B24E :  (MACRO-2)                  cnop 0,2
   13485/    B24E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   13486/    B24E :                     Obj2F_Data2:	binclude	misc/mz_pfm2.bin
   13487/    B27A : (MACRO)             		align 2
   13487/    B27A :  (MACRO-2)                  cnop 0,2
   13487/    B27A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   13488/    B27A :                     Obj2F_Data3:	binclude	misc/mz_pfm3.bin
   13489/    B2C6 : (MACRO)             		align 2
   13489/    B2C6 :  (MACRO-2)                  cnop 0,2
   13489/    B2C6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   13490/    B2C6 :                     ; ===========================================================================
   13491/    B2C6 :                     ; ---------------------------------------------------------------------------
   13492/    B2C6 :                     ; Object 35 - fireball that sits on the	floor (MZ)
   13493/    B2C6 :                     ; (appears when	you walk on sinking platforms)
   13494/    B2C6 :                     ; ---------------------------------------------------------------------------
   13495/    B2C6 :                     
   13496/    B2C6 :                     Obj35:					; XREF: Obj_Index
   13497/    B2C6 : 7000                		moveq	#0,d0
   13498/    B2C8 : 1028 0024           		move.b	$24(a0),d0
   13499/    B2CC : 323B 0006           		move.w	Obj35_Index(pc,d0.w),d1
   13500/    B2D0 : 4EFB 1002           		jmp	Obj35_Index(pc,d1.w)
   13501/    B2D4 :                     ; ===========================================================================
   13502/    B2D4 : 0006                Obj35_Index:	dc.w Obj35_Main-Obj35_Index
   13503/    B2D6 : 004E                		dc.w loc_B238-Obj35_Index
   13504/    B2D8 : 00C8                		dc.w Obj35_Move-Obj35_Index
   13505/    B2DA :                     ; ===========================================================================
   13506/    B2DA :                     
   13507/    B2DA :                     Obj35_Main:				; XREF: Obj35_Index
   13508/    B2DA : 5428 0024           		addq.b	#2,$24(a0)
   13509/    B2DE : 217C 0000 B458 0004 		move.l	#Map_obj14,4(a0)
   13510/    B2E6 : 317C 0345 0002      		move.w	#$345,2(a0)
   13511/    B2EC : 3168 0008 002A      		move.w	8(a0),$2A(a0)
   13512/    B2F2 : 117C 0004 0001      		move.b	#4,1(a0)
   13513/    B2F8 : 117C 0001 0018      		move.b	#1,$18(a0)
   13514/    B2FE : 117C 008B 0020      		move.b	#$8B,$20(a0)
   13515/    B304 : 117C 0008 0019      		move.b	#8,$19(a0)
   13516/    B30A : 303C 00C8           		move.w	#$C8,d0
   13517/    B30E : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play flame sound
   13518/    B314 : 4A28 0028           		tst.b	$28(a0)
   13519/    B318 : 6708                		beq.s	loc_B238
   13520/    B31A : 5428 0024           		addq.b	#2,$24(a0)
   13521/    B31E : 6000 007C           		bra.w	Obj35_Move
   13522/    B322 :                     ; ===========================================================================
   13523/    B322 :                     
   13524/    B322 :                     loc_B238:				; XREF: Obj35_Index
   13525/    B322 : 2268 0030           		movea.l	$30(a0),a1
   13526/    B326 : 3228 0008           		move.w	8(a0),d1
   13527/    B32A : 9268 002A           		sub.w	$2A(a0),d1
   13528/    B32E : 0641 000C           		addi.w	#$C,d1
   13529/    B332 : 3001                		move.w	d1,d0
   13530/    B334 : E248                		lsr.w	#1,d0
   13531/    B336 : 1031 0000           		move.b	(a1,d0.w),d0
   13532/    B33A : 4440                		neg.w	d0
   13533/    B33C : D068 002C           		add.w	$2C(a0),d0
   13534/    B340 : 3400                		move.w	d0,d2
   13535/    B342 : D068 003C           		add.w	$3C(a0),d0
   13536/    B346 : 3140 000C           		move.w	d0,$C(a0)
   13537/    B34A : 0C41 0084           		cmpi.w	#$84,d1
   13538/    B34E : 644A                		bcc.s	loc_B2B0
   13539/    B350 : 06A8 0001 0000 0008 		addi.l	#$10000,8(a0)
   13540/    B358 : 0C41 0080           		cmpi.w	#$80,d1
   13541/    B35C : 643C                		bcc.s	loc_B2B0
   13542/    B35E : 2028 0008           		move.l	8(a0),d0
   13543/    B362 : 0680 0008 0000      		addi.l	#$80000,d0
   13544/    B368 : 0280 000F FFFF      		andi.l	#$FFFFF,d0
   13545/    B36E : 662A                		bne.s	loc_B2B0
   13546/    B370 : 6100 283A           		bsr.w	SingleObjLoad2
   13547/    B374 : 6624                		bne.s	loc_B2B0
   13548/    B376 : (MACRO)             		_move.b	#$35,0(a1)
   13548/    B376 :  (MACRO-2)                          insn2op move.b, #$35,0(a1)
   13548/    B376 : 137C 0035 0001                              !move.b   #$35,1+0(a1)
   13548/    B37B :                                             !org    *-1
   13548/    B37B : 00                                          !dc.b   0
   13549/    B37C : 3368 0008 0008      		move.w	8(a0),8(a1)
   13550/    B382 : 3342 002C           		move.w	d2,$2C(a1)
   13551/    B386 : 3368 003C 003C      		move.w	$3C(a0),$3C(a1)
   13552/    B38C : 137C 0001 0028      		move.b	#1,$28(a1)
   13553/    B392 : 2468 0038           		movea.l	$38(a0),a2
   13554/    B396 : 6100 FDEE           		bsr.w	sub_B09C
   13555/    B39A :                     
   13556/    B39A :                     loc_B2B0:
   13557/    B39A : 600C                		bra.s	Obj35_Animate
   13558/    B39C :                     ; ===========================================================================
   13559/    B39C :                     
   13560/    B39C :                     Obj35_Move:				; XREF: Obj35_Index
   13561/    B39C : 3028 002C           		move.w	$2C(a0),d0
   13562/    B3A0 : D068 003C           		add.w	$3C(a0),d0
   13563/    B3A4 : 3140 000C           		move.w	d0,$C(a0)
   13564/    B3A8 :                     
   13565/    B3A8 :                     Obj35_Animate:				; XREF: loc_B238
   13566/    B3A8 : 43F9 0000 B3B6      		lea	(Ani_obj35).l,a1
   13567/    B3AE : 6100 F384           		bsr.w	AnimateSprite
   13568/    B3B2 : 6000 235A           		bra.w	DisplaySprite
   13569/    B3B6 :                     ; ===========================================================================
   13570/    B3B6 :                     Ani_obj35:
   13571/    B3B6 :                     		include	"_anim/obj35.asm"
(1)    1/    B3B6 :                     ; ---------------------------------------------------------------------------
(1)    2/    B3B6 :                     ; Animation script - fireball that sits on the	floor (MZ)
(1)    3/    B3B6 :                     ; ---------------------------------------------------------------------------
(1)    4/    B3B6 : 0002                		dc.w byte_B2CE-Ani_obj35
(1)    5/    B3B8 : 0500 2001 21FF      byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
(1)    6/    B3BE : (MACRO)             		align 2
(1)    6/    B3BE :  (MACRO-2)                  cnop 0,2
(1)    6/    B3BE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   13572/    B3BE :                     
   13573/    B3BE :                     ; ---------------------------------------------------------------------------
   13574/    B3BE :                     ; Sprite mappings - large moving platforms (MZ)
   13575/    B3BE :                     ; ---------------------------------------------------------------------------
   13576/    B3BE :                     Map_obj2F:
   13577/    B3BE :                     		include	"_maps/obj2F.asm"
(1)    1/    B3BE :                     ; ---------------------------------------------------------------------------
(1)    2/    B3BE :                     ; Sprite mappings - large moving platforms (MZ)
(1)    3/    B3BE :                     ; ---------------------------------------------------------------------------
(1)    4/    B3BE : 0006                		dc.w byte_B2DA-Map_obj2F
(1)    5/    B3C0 : 0048                		dc.w byte_B31C-Map_obj2F
(1)    6/    B3C2 : 007B                		dc.w byte_B34F-Map_obj2F
(1)    7/    B3C4 : 0D                  byte_B2DA:	dc.b $D
(1)    8/    B3C5 : D806 0057 C0        		dc.b $D8, 6, 0,	$57, $C0
(1)    9/    B3CA : F005 0053 C0        		dc.b $F0, 5, 0,	$53, $C0
(1)   10/    B3CF : 000F 0001 C0        		dc.b 0,	$F, 0, 1, $C0
(1)   11/    B3D4 : D00F 0027 D0        		dc.b $D0, $F, 0, $27, $D0
(1)   12/    B3D9 : F00D 0037 D0        		dc.b $F0, $D, 0, $37, $D0
(1)   13/    B3DE : F00F 0001 E0        		dc.b $F0, $F, 0, 1, $E0
(1)   14/    B3E3 : D00F 0011 F0        		dc.b $D0, $F, 0, $11, $F0
(1)   15/    B3E8 : D00F 003F 10        		dc.b $D0, $F, 0, $3F, $10
(1)   16/    B3ED : F00D 004F 10        		dc.b $F0, $D, 0, $4F, $10
(1)   17/    B3F2 : F00F 0001 00        		dc.b $F0, $F, 0, 1, 0
(1)   18/    B3F7 : 000F 0001 20        		dc.b 0,	$F, 0, 1, $20
(1)   19/    B3FC : D806 0057 30        		dc.b $D8, 6, 0,	$57, $30
(1)   20/    B401 : F005 0053 30        		dc.b $F0, 5, 0,	$53, $30
(1)   21/    B406 : 0A                  byte_B31C:	dc.b $A
(1)   22/    B407 : D00F 0027 C0        		dc.b $D0, $F, 0, $27, $C0
(1)   23/    B40C : F00D 0037 C0        		dc.b $F0, $D, 0, $37, $C0
(1)   24/    B411 : 000F 0001 C0        		dc.b 0,	$F, 0, 1, $C0
(1)   25/    B416 : C00F 0027 E0        		dc.b $C0, $F, 0, $27, $E0
(1)   26/    B41B : E00D 0037 E0        		dc.b $E0, $D, 0, $37, $E0
(1)   27/    B420 : F00F 0001 E0        		dc.b $F0, $F, 0, 1, $E0
(1)   28/    B425 : C00F 0011 00        		dc.b $C0, $F, 0, $11, 0
(1)   29/    B42A : E00F 0001 00        		dc.b $E0, $F, 0, 1, 0
(1)   30/    B42F : C00F 003F 20        		dc.b $C0, $F, 0, $3F, $20
(1)   31/    B434 : E00D 004F 20        		dc.b $E0, $D, 0, $4F, $20
(1)   32/    B439 : 06                  byte_B34F:	dc.b 6
(1)   33/    B43A : D00F 0011 E0        		dc.b $D0, $F, 0, $11, $E0
(1)   34/    B43F : F00F 0001 E0        		dc.b $F0, $F, 0, 1, $E0
(1)   35/    B444 : 100F 0001 E0        		dc.b $10, $F, 0, 1, $E0
(1)   36/    B449 : D00F 0011 00        		dc.b $D0, $F, 0, $11, 0
(1)   37/    B44E : F00F 0001 00        		dc.b $F0, $F, 0, 1, 0
(1)   38/    B453 : 100F 0001 00        		dc.b $10, $F, 0, 1, 0
(1)   39/    B458 : (MACRO)             		align 2
(1)   39/    B458 :  (MACRO-2)                  cnop 0,2
(1)   39/    B458 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   13578/    B458 :                     
   13579/    B458 :                     ; ---------------------------------------------------------------------------
   13580/    B458 :                     ; Sprite mappings - lava balls (MZ, SLZ)
   13581/    B458 :                     ; ---------------------------------------------------------------------------
   13582/    B458 :                     Map_obj14:
   13583/    B458 :                     		include	"_maps/obj14.asm"
(1)    1/    B458 :                     ; ---------------------------------------------------------------------------
(1)    2/    B458 :                     ; Sprite mappings - lava balls (MZ, SLZ)
(1)    3/    B458 :                     ; ---------------------------------------------------------------------------
(1)    4/    B458 : 000C                		dc.w byte_B37A-Map_obj14
(1)    5/    B45A : 0012                		dc.w byte_B380-Map_obj14
(1)    6/    B45C : 0018                		dc.w byte_B386-Map_obj14
(1)    7/    B45E : 001E                		dc.w byte_B38C-Map_obj14
(1)    8/    B460 : 0024                		dc.w byte_B392-Map_obj14
(1)    9/    B462 : 002A                		dc.w byte_B398-Map_obj14
(1)   10/    B464 : 01                  byte_B37A:	dc.b 1
(1)   11/    B465 : E807 0000 F8        		dc.b $E8, 7, 0,	0, $F8
(1)   12/    B46A : 01                  byte_B380:	dc.b 1
(1)   13/    B46B : E807 0008 F8        		dc.b $E8, 7, 0,	8, $F8
(1)   14/    B470 : 01                  byte_B386:	dc.b 1
(1)   15/    B471 : F006 0010 F8        		dc.b $F0, 6, 0,	$10, $F8
(1)   16/    B476 : 01                  byte_B38C:	dc.b 1
(1)   17/    B477 : F80D 0016 E8        		dc.b $F8, $D, 0, $16, $E8
(1)   18/    B47C : 01                  byte_B392:	dc.b 1
(1)   19/    B47D : F80D 001E E8        		dc.b $F8, $D, 0, $1E, $E8
(1)   20/    B482 : 01                  byte_B398:	dc.b 1
(1)   21/    B483 : F809 0026 F0        		dc.b $F8, 9, 0,	$26, $F0
(1)   22/    B488 : (MACRO)             		align 2
(1)   22/    B488 :  (MACRO-2)                  cnop 0,2
(1)   22/    B488 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   13584/    B488 :                     
   13585/    B488 :                     ; ===========================================================================
   13586/    B488 :                     ; ---------------------------------------------------------------------------
   13587/    B488 :                     ; Object 30 - large green glassy blocks	(MZ)
   13588/    B488 :                     ; ---------------------------------------------------------------------------
   13589/    B488 :                     
   13590/    B488 :                     Obj30:					; XREF: Obj_Index
   13591/    B488 : 7000                		moveq	#0,d0
   13592/    B48A : 1028 0024           		move.b	$24(a0),d0
   13593/    B48E : 323B 002C           		move.w	Obj30_Index(pc,d0.w),d1
   13594/    B492 : 4EBB 1028           		jsr	Obj30_Index(pc,d1.w)
   13595/    B496 : 3028 0008           		move.w	8(a0),d0
   13596/    B49A : 0240 FF80           		andi.w	#$FF80,d0
   13597/    B49E : 3238 F700           		move.w	($FFFFF700).w,d1
   13598/    B4A2 : 0441 0080           		subi.w	#$80,d1
   13599/    B4A6 : 0241 FF80           		andi.w	#$FF80,d1
   13600/    B4AA : 9041                		sub.w	d1,d0
   13601/    B4AC : 0C40 0280           		cmpi.w	#$280,d0
   13602/    B4B0 : 6200 0006           		bhi.w	Obj30_Delete
   13603/    B4B4 : 6000 2258           		bra.w	DisplaySprite
   13604/    B4B8 :                     ; ===========================================================================
   13605/    B4B8 :                     
   13606/    B4B8 :                     Obj30_Delete:
   13607/    B4B8 : 6000 2290           		bra.w	DeleteObject
   13608/    B4BC :                     ; ===========================================================================
   13609/    B4BC : 0016                Obj30_Index:	dc.w Obj30_Main-Obj30_Index
   13610/    B4BE : 00BA                		dc.w Obj30_Block012-Obj30_Index
   13611/    B4C0 : 00D2                		dc.w Obj30_Reflect012-Obj30_Index
   13612/    B4C2 : 00E0                		dc.w Obj30_Block34-Obj30_Index
   13613/    B4C4 : 00F8                		dc.w Obj30_Reflect34-Obj30_Index
   13614/    B4C6 :                     
   13615/    B4C6 : 0200 00             Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
   13616/    B4C9 : 0400 01             		dc.b 4,	0, 1
   13617/    B4CC : 0600 02             Obj30_Vars2:	dc.b 6,	0, 2
   13618/    B4CF : 0800 01             		dc.b 8,	0, 1
   13619/    B4D2 :                     ; ===========================================================================
   13620/    B4D2 :                     
   13621/    B4D2 :                     Obj30_Main:				; XREF: Obj30_Index
   13622/    B4D2 : 45F9 0000 B4C6      		lea	(Obj30_Vars1).l,a2
   13623/    B4D8 : 7201                		moveq	#1,d1
   13624/    B4DA : 117C 0048 0016      		move.b	#$48,$16(a0)
   13625/    B4E0 : 0C28 0003 0028      		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
   13626/    B4E6 : 650E                		bcs.s	loc_B40C	; if yes, branch
   13627/    B4E8 : 45F9 0000 B4CC      		lea	(Obj30_Vars2).l,a2
   13628/    B4EE : 7201                		moveq	#1,d1
   13629/    B4F0 : 117C 0038 0016      		move.b	#$38,$16(a0)
   13630/    B4F6 :                     
   13631/    B4F6 :                     loc_B40C:
   13632/    B4F6 : 2248                		movea.l	a0,a1
   13633/    B4F8 : 6006                		bra.s	Obj30_Load	; load main object
   13634/    B4FA :                     ; ===========================================================================
   13635/    B4FA :                     
   13636/    B4FA :                     Obj30_Loop:
   13637/    B4FA : 6100 26B0           		bsr.w	SingleObjLoad2
   13638/    B4FE : 666A                		bne.s	loc_B480
   13639/    B500 :                     
   13640/    B500 :                     Obj30_Load:				; XREF: Obj30_Main
   13641/    B500 : 135A 0024           		move.b	(a2)+,$24(a1)
   13642/    B504 : (MACRO)             		_move.b	#$30,0(a1)
   13642/    B504 :  (MACRO-2)                          insn2op move.b, #$30,0(a1)
   13642/    B504 : 137C 0030 0001                              !move.b   #$30,1+0(a1)
   13642/    B509 :                                             !org    *-1
   13642/    B509 : 00                                          !dc.b   0
   13643/    B50A : 3368 0008 0008      		move.w	8(a0),8(a1)
   13644/    B510 : 101A                		move.b	(a2)+,d0
   13645/    B512 : 4880                		ext.w	d0
   13646/    B514 : D068 000C           		add.w	$C(a0),d0
   13647/    B518 : 3340 000C           		move.w	d0,$C(a1)
   13648/    B51C : 237C 0000 B6E4 0004 		move.l	#Map_obj30,4(a1)
   13649/    B524 : 337C C38E 0002      		move.w	#$C38E,2(a1)
   13650/    B52A : 137C 0004 0001      		move.b	#4,1(a1)
   13651/    B530 : 3369 000C 0030      		move.w	$C(a1),$30(a1)
   13652/    B536 : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   13653/    B53C : 137C 0020 0019      		move.b	#$20,$19(a1)
   13654/    B542 : 137C 0004 0018      		move.b	#4,$18(a1)
   13655/    B548 : 135A 001A           		move.b	(a2)+,$1A(a1)
   13656/    B54C : 2348 003C           		move.l	a0,$3C(a1)
   13657/    B550 : 51C9 FFA8           		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
   13658/    B554 :                     
   13659/    B554 : 137C 0010 0019      		move.b	#$10,$19(a1)
   13660/    B55A : 137C 0003 0018      		move.b	#3,$18(a1)
   13661/    B560 : 5029 0028           		addq.b	#8,$28(a1)
   13662/    B564 : 0229 000F 0028      		andi.b	#$F,$28(a1)
   13663/    B56A :                     
   13664/    B56A :                     loc_B480:
   13665/    B56A : 317C 0090 0032      		move.w	#$90,$32(a0)
   13666/    B570 : 08E8 0004 0001      		bset	#4,1(a0)
   13667/    B576 :                     
   13668/    B576 :                     Obj30_Block012:				; XREF: Obj30_Index
   13669/    B576 : 6100 0050           		bsr.w	Obj30_Types
   13670/    B57A : 323C 002B           		move.w	#$2B,d1
   13671/    B57E : 343C 0048           		move.w	#$48,d2
   13672/    B582 : 363C 0049           		move.w	#$49,d3
   13673/    B586 : 3828 0008           		move.w	8(a0),d4
   13674/    B58A : 6000 455A           		bra.w	SolidObject
   13675/    B58E :                     ; ===========================================================================
   13676/    B58E :                     
   13677/    B58E :                     Obj30_Reflect012:			; XREF: Obj30_Index
   13678/    B58E : 2268 003C           		movea.l	$3C(a0),a1
   13679/    B592 : 3169 0032 0032      		move.w	$32(a1),$32(a0)
   13680/    B598 : 6000 002E           		bra.w	Obj30_Types
   13681/    B59C :                     ; ===========================================================================
   13682/    B59C :                     
   13683/    B59C :                     Obj30_Block34:				; XREF: Obj30_Index
   13684/    B59C : 6100 002A           		bsr.w	Obj30_Types
   13685/    B5A0 : 323C 002B           		move.w	#$2B,d1
   13686/    B5A4 : 343C 0038           		move.w	#$38,d2
   13687/    B5A8 : 363C 0039           		move.w	#$39,d3
   13688/    B5AC : 3828 0008           		move.w	8(a0),d4
   13689/    B5B0 : 6000 4534           		bra.w	SolidObject
   13690/    B5B4 :                     ; ===========================================================================
   13691/    B5B4 :                     
   13692/    B5B4 :                     Obj30_Reflect34:			; XREF: Obj30_Index
   13693/    B5B4 : 2268 003C           		movea.l	$3C(a0),a1
   13694/    B5B8 : 3169 0032 0032      		move.w	$32(a1),$32(a0)
   13695/    B5BE : 3169 000C 0030      		move.w	$C(a1),$30(a0)
   13696/    B5C4 : 6000 0002           		bra.w	*+4
   13697/    B5C8 :                     
   13698/    B5C8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   13699/    B5C8 :                     
   13700/    B5C8 :                     
   13701/    B5C8 :                     Obj30_Types:				; XREF: Obj30_Block012; et al
   13702/    B5C8 : 7000                		moveq	#0,d0
   13703/    B5CA : 1028 0028           		move.b	$28(a0),d0
   13704/    B5CE : 0240 0007           		andi.w	#7,d0
   13705/    B5D2 : D040                		add.w	d0,d0
   13706/    B5D4 : 323B 0006           		move.w	Obj30_TypeIndex(pc,d0.w),d1
   13707/    B5D8 : 4EFB 1002           		jmp	Obj30_TypeIndex(pc,d1.w)
   13708/    B5DC :                     ; End of function Obj30_Types
   13709/    B5DC :                     
   13710/    B5DC :                     ; ===========================================================================
   13711/    B5DC : 000A                Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
   13712/    B5DE : 000C                		dc.w Obj30_Type01-Obj30_TypeIndex
   13713/    B5E0 : 0016                		dc.w Obj30_Type02-Obj30_TypeIndex
   13714/    B5E2 : 0038                		dc.w Obj30_Type03-Obj30_TypeIndex
   13715/    B5E4 : 00BE                		dc.w Obj30_Type04-Obj30_TypeIndex
   13716/    B5E6 :                     ; ===========================================================================
   13717/    B5E6 :                     
   13718/    B5E6 :                     Obj30_Type00:				; XREF: Obj30_TypeIndex
   13719/    B5E6 : 4E75                		rts	
   13720/    B5E8 :                     ; ===========================================================================
   13721/    B5E8 :                     
   13722/    B5E8 :                     Obj30_Type01:				; XREF: Obj30_TypeIndex
   13723/    B5E8 : 1038 FE70           		move.b	($FFFFFE70).w,d0
   13724/    B5EC : 323C 0040           		move.w	#$40,d1
   13725/    B5F0 : 600C                		bra.s	loc_B514
   13726/    B5F2 :                     ; ===========================================================================
   13727/    B5F2 :                     
   13728/    B5F2 :                     Obj30_Type02:				; XREF: Obj30_TypeIndex
   13729/    B5F2 : 1038 FE70           		move.b	($FFFFFE70).w,d0
   13730/    B5F6 : 323C 0040           		move.w	#$40,d1
   13731/    B5FA : 4440                		neg.w	d0
   13732/    B5FC : D041                		add.w	d1,d0
   13733/    B5FE :                     
   13734/    B5FE :                     loc_B514:				; XREF: Obj30_Type01
   13735/    B5FE : 0828 0003 0028      		btst	#3,$28(a0)
   13736/    B604 : 670A                		beq.s	loc_B526
   13737/    B606 : 4440                		neg.w	d0
   13738/    B608 : D041                		add.w	d1,d0
   13739/    B60A : E208                		lsr.b	#1,d0
   13740/    B60C : 0640 0020           		addi.w	#$20,d0
   13741/    B610 :                     
   13742/    B610 :                     loc_B526:
   13743/    B610 : 6000 00C6           		bra.w	loc_B5EE
   13744/    B614 :                     ; ===========================================================================
   13745/    B614 :                     
   13746/    B614 :                     Obj30_Type03:				; XREF: Obj30_TypeIndex
   13747/    B614 : 0828 0003 0028      		btst	#3,$28(a0)
   13748/    B61A : 670C                		beq.s	loc_B53E
   13749/    B61C : 1038 FE70           		move.b	($FFFFFE70).w,d0
   13750/    B620 : 0440 0010           		subi.w	#$10,d0
   13751/    B624 : 6000 00B2           		bra.w	loc_B5EE
   13752/    B628 :                     ; ===========================================================================
   13753/    B628 :                     
   13754/    B628 :                     loc_B53E:
   13755/    B628 : 0828 0003 0022      		btst	#3,$22(a0)
   13756/    B62E : 6608                		bne.s	loc_B54E
   13757/    B630 : 08A8 0000 0034      		bclr	#0,$34(a0)
   13758/    B636 : 6034                		bra.s	loc_B582
   13759/    B638 :                     ; ===========================================================================
   13760/    B638 :                     
   13761/    B638 :                     loc_B54E:
   13762/    B638 : 4A28 0034           		tst.b	$34(a0)
   13763/    B63C : 662E                		bne.s	loc_B582
   13764/    B63E : 117C 0001 0034      		move.b	#1,$34(a0)
   13765/    B644 : 08E8 0000 0035      		bset	#0,$35(a0)
   13766/    B64A : 6720                		beq.s	loc_B582
   13767/    B64C : 08E8 0007 0034      		bset	#7,$34(a0)
   13768/    B652 : 317C 0010 0036      		move.w	#$10,$36(a0)
   13769/    B658 : 117C 000A 0038      		move.b	#$A,$38(a0)
   13770/    B65E : 0C68 0040 0032      		cmpi.w	#$40,$32(a0)
   13771/    B664 : 6606                		bne.s	loc_B582
   13772/    B666 : 317C 0040 0036      		move.w	#$40,$36(a0)
   13773/    B66C :                     
   13774/    B66C :                     loc_B582:
   13775/    B66C : 4A28 0034           		tst.b	$34(a0)
   13776/    B670 : 6A22                		bpl.s	loc_B5AA
   13777/    B672 : 4A28 0038           		tst.b	$38(a0)
   13778/    B676 : 6706                		beq.s	loc_B594
   13779/    B678 : 5328 0038           		subq.b	#1,$38(a0)
   13780/    B67C : 6616                		bne.s	loc_B5AA
   13781/    B67E :                     
   13782/    B67E :                     loc_B594:
   13783/    B67E : 4A68 0032           		tst.w	$32(a0)
   13784/    B682 : 670A                		beq.s	loc_B5A4
   13785/    B684 : 5368 0032           		subq.w	#1,$32(a0)
   13786/    B688 : 5368 0036           		subq.w	#1,$36(a0)
   13787/    B68C : 6606                		bne.s	loc_B5AA
   13788/    B68E :                     
   13789/    B68E :                     loc_B5A4:
   13790/    B68E : 08A8 0007 0034      		bclr	#7,$34(a0)
   13791/    B694 :                     
   13792/    B694 :                     loc_B5AA:
   13793/    B694 : 3028 0032           		move.w	$32(a0),d0
   13794/    B698 : 603E                		bra.s	loc_B5EE
   13795/    B69A :                     ; ===========================================================================
   13796/    B69A :                     
   13797/    B69A :                     Obj30_Type04:				; XREF: Obj30_TypeIndex
   13798/    B69A : 0828 0003 0028      		btst	#3,$28(a0)
   13799/    B6A0 : 670A                		beq.s	Obj30_ChkSwitch
   13800/    B6A2 : 1038 FE70           		move.b	($FFFFFE70).w,d0
   13801/    B6A6 : 0440 0010           		subi.w	#$10,d0
   13802/    B6AA : 602C                		bra.s	loc_B5EE
   13803/    B6AC :                     ; ===========================================================================
   13804/    B6AC :                     
   13805/    B6AC :                     Obj30_ChkSwitch:			; XREF: Obj30_Type04
   13806/    B6AC : 4A28 0034           		tst.b	$34(a0)
   13807/    B6B0 : 6618                		bne.s	loc_B5E0
   13808/    B6B2 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   13809/    B6B6 : 7000                		moveq	#0,d0
   13810/    B6B8 : 1028 0028           		move.b	$28(a0),d0	; load object type number
   13811/    B6BC : E848                		lsr.w	#4,d0		; read only the	first nybble
   13812/    B6BE : 4A32 0000           		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
   13813/    B6C2 : 6710                		beq.s	loc_B5EA	; if not, branch
   13814/    B6C4 : 117C 0001 0034      		move.b	#1,$34(a0)
   13815/    B6CA :                     
   13816/    B6CA :                     loc_B5E0:
   13817/    B6CA : 4A68 0032           		tst.w	$32(a0)
   13818/    B6CE : 6704                		beq.s	loc_B5EA
   13819/    B6D0 : 5568 0032           		subq.w	#2,$32(a0)
   13820/    B6D4 :                     
   13821/    B6D4 :                     loc_B5EA:
   13822/    B6D4 : 3028 0032           		move.w	$32(a0),d0
   13823/    B6D8 :                     
   13824/    B6D8 :                     loc_B5EE:
   13825/    B6D8 : 3228 0030           		move.w	$30(a0),d1
   13826/    B6DC : 9240                		sub.w	d0,d1
   13827/    B6DE : 3141 000C           		move.w	d1,$C(a0)
   13828/    B6E2 : 4E75                		rts	
   13829/    B6E4 :                     ; ===========================================================================
   13830/    B6E4 :                     ; ---------------------------------------------------------------------------
   13831/    B6E4 :                     ; Sprite mappings - large green	glassy blocks (MZ)
   13832/    B6E4 :                     ; ---------------------------------------------------------------------------
   13833/    B6E4 :                     Map_obj30:
   13834/    B6E4 :                     		include	"_maps/obj30.asm"
(1)    1/    B6E4 :                     ; ---------------------------------------------------------------------------
(1)    2/    B6E4 :                     ; Sprite mappings - large green	glassy blocks (MZ)
(1)    3/    B6E4 :                     ; ---------------------------------------------------------------------------
(1)    4/    B6E4 : 0006                		dc.w byte_B600-Map_obj30
(1)    5/    B6E6 : 0043                		dc.w byte_B63D-Map_obj30
(1)    6/    B6E8 : 004E                		dc.w byte_B648-Map_obj30
(1)    7/    B6EA : 0C                  byte_B600:	dc.b $C
(1)    8/    B6EB : B80C 0000 E0        		dc.b $B8, $C, 0, 0, $E0
(1)    9/    B6F0 : B80C 0800 00        		dc.b $B8, $C, 8, 0, 0
(1)   10/    B6F5 : C00F 0004 E0        		dc.b $C0, $F, 0, 4, $E0
(1)   11/    B6FA : C00F 0804 00        		dc.b $C0, $F, 8, 4, 0
(1)   12/    B6FF : E00F 0004 E0        		dc.b $E0, $F, 0, 4, $E0
(1)   13/    B704 : E00F 0804 00        		dc.b $E0, $F, 8, 4, 0
(1)   14/    B709 : 000F 0004 E0        		dc.b 0,	$F, 0, 4, $E0
(1)   15/    B70E : 000F 0804 00        		dc.b 0,	$F, 8, 4, 0
(1)   16/    B713 : 200F 0004 E0        		dc.b $20, $F, 0, 4, $E0
(1)   17/    B718 : 200F 0804 00        		dc.b $20, $F, 8, 4, 0
(1)   18/    B71D : 400C 1000 E0        		dc.b $40, $C, $10, 0, $E0
(1)   19/    B722 : 400C 1800 00        		dc.b $40, $C, $18, 0, 0
(1)   20/    B727 : 02                  byte_B63D:	dc.b 2
(1)   21/    B728 : 0806 0014 F0        		dc.b 8,	6, 0, $14, $F0
(1)   22/    B72D : 0006 0014 00        		dc.b 0,	6, 0, $14, 0
(1)   23/    B732 : 0A                  byte_B648:	dc.b $A
(1)   24/    B733 : C80C 0000 E0        		dc.b $C8, $C, 0, 0, $E0
(1)   25/    B738 : C80C 0800 00        		dc.b $C8, $C, 8, 0, 0
(1)   26/    B73D : D00F 0004 E0        		dc.b $D0, $F, 0, 4, $E0
(1)   27/    B742 : D00F 0804 00        		dc.b $D0, $F, 8, 4, 0
(1)   28/    B747 : F00F 0004 E0        		dc.b $F0, $F, 0, 4, $E0
(1)   29/    B74C : F00F 0804 00        		dc.b $F0, $F, 8, 4, 0
(1)   30/    B751 : 100F 0004 E0        		dc.b $10, $F, 0, 4, $E0
(1)   31/    B756 : 100F 0804 00        		dc.b $10, $F, 8, 4, 0
(1)   32/    B75B : 300C 1000 E0        		dc.b $30, $C, $10, 0, $E0
(1)   33/    B760 : 300C 1800 00        		dc.b $30, $C, $18, 0, 0
(1)   34/    B765 : (MACRO)             		align 2
(1)   34/    B765 :  (MACRO-2)                  cnop 0,2
(1)   34/    B765 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   34/    B765 : =$11                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   34/    B766 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   13835/    B766 :                     
   13836/    B766 :                     ; ===========================================================================
   13837/    B766 :                     ; ---------------------------------------------------------------------------
   13838/    B766 :                     ; Object 31 - stomping metal blocks on chains (MZ)
   13839/    B766 :                     ; ---------------------------------------------------------------------------
   13840/    B766 :                     
   13841/    B766 :                     Obj31:					; XREF: Obj_Index
   13842/    B766 : 7000                		moveq	#0,d0
   13843/    B768 : 1028 0024           		move.b	$24(a0),d0
   13844/    B76C : 323B 0006           		move.w	Obj31_Index(pc,d0.w),d1
   13845/    B770 : 4EFB 1002           		jmp	Obj31_Index(pc,d1.w)
   13846/    B774 :                     ; ===========================================================================
   13847/    B774 : 0028                Obj31_Index:	dc.w Obj31_Main-Obj31_Index
   13848/    B776 : 010E                		dc.w loc_B798-Obj31_Index
   13849/    B778 : 0174                		dc.w loc_B7FE-Obj31_Index
   13850/    B77A : 0186                		dc.w Obj31_Display2-Obj31_Index
   13851/    B77C : 0158                		dc.w loc_B7E2-Obj31_Index
   13852/    B77E :                     
   13853/    B77E : 0000                Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
   13854/    B780 : 0100                		dc.b 1,	0
   13855/    B782 :                     
   13856/    B782 : 0200 00             Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
   13857/    B785 : 041C 01             		dc.b 4,	$1C, 1		; routine number, y-position, frame number
   13858/    B788 : 08CC 03             		dc.b 8,	$CC, 3
   13859/    B78B : 06F0 02             		dc.b 6,	$F0, 2
   13860/    B78E :                     
   13861/    B78E : 7000 A000           word_B6A4:	dc.w $7000, $A000
   13862/    B792 : 5000 7800           		dc.w $5000, $7800
   13863/    B796 : 3800 5800           		dc.w $3800, $5800
   13864/    B79A : B800                		dc.w $B800
   13865/    B79C :                     ; ===========================================================================
   13866/    B79C :                     
   13867/    B79C :                     Obj31_Main:				; XREF: Obj31_Index
   13868/    B79C : 7000                		moveq	#0,d0
   13869/    B79E : 1028 0028           		move.b	$28(a0),d0
   13870/    B7A2 : 6A14                		bpl.s	loc_B6CE
   13871/    B7A4 : 0240 007F           		andi.w	#$7F,d0
   13872/    B7A8 : D040                		add.w	d0,d0
   13873/    B7AA : 45FB 00D2           		lea	Obj31_SwchNums(pc,d0.w),a2
   13874/    B7AE : 115A 003A           		move.b	(a2)+,$3A(a0)
   13875/    B7B2 : 101A                		move.b	(a2)+,d0
   13876/    B7B4 : 1140 0028           		move.b	d0,$28(a0)
   13877/    B7B8 :                     
   13878/    B7B8 :                     loc_B6CE:
   13879/    B7B8 : 0200 000F           		andi.b	#$F,d0
   13880/    B7BC : D040                		add.w	d0,d0
   13881/    B7BE : 343B 00CE           		move.w	word_B6A4(pc,d0.w),d2
   13882/    B7C2 : 4A40                		tst.w	d0
   13883/    B7C4 : 6604                		bne.s	loc_B6E0
   13884/    B7C6 : 3142 0032           		move.w	d2,$32(a0)
   13885/    B7CA :                     
   13886/    B7CA :                     loc_B6E0:
   13887/    B7CA : 45F9 0000 B782      		lea	(Obj31_Var).l,a2
   13888/    B7D0 : 2248                		movea.l	a0,a1
   13889/    B7D2 : 7203                		moveq	#3,d1
   13890/    B7D4 : 6008                		bra.s	Obj31_MakeStomper
   13891/    B7D6 :                     ; ===========================================================================
   13892/    B7D6 :                     
   13893/    B7D6 :                     Obj31_Loop:
   13894/    B7D6 : 6100 23D4           		bsr.w	SingleObjLoad2
   13895/    B7DA : 6600 0086           		bne.w	Obj31_SetSize
   13896/    B7DE :                     
   13897/    B7DE :                     Obj31_MakeStomper:			; XREF: Obj31_Main
   13898/    B7DE : 135A 0024           		move.b	(a2)+,$24(a1)
   13899/    B7E2 : (MACRO)             		_move.b	#$31,0(a1)
   13899/    B7E2 :  (MACRO-2)                          insn2op move.b, #$31,0(a1)
   13899/    B7E2 : 137C 0031 0001                              !move.b   #$31,1+0(a1)
   13899/    B7E7 :                                             !org    *-1
   13899/    B7E7 : 00                                          !dc.b   0
   13900/    B7E8 : 3368 0008 0008      		move.w	8(a0),8(a1)
   13901/    B7EE : 101A                		move.b	(a2)+,d0
   13902/    B7F0 : 4880                		ext.w	d0
   13903/    B7F2 : D068 000C           		add.w	$C(a0),d0
   13904/    B7F6 : 3340 000C           		move.w	d0,$C(a1)
   13905/    B7FA : 237C 0000 BC38 0004 		move.l	#Map_obj31,4(a1)
   13906/    B802 : 337C 0300 0002      		move.w	#$300,2(a1)
   13907/    B808 : 137C 0004 0001      		move.b	#4,1(a1)
   13908/    B80E : 3369 000C 0030      		move.w	$C(a1),$30(a1)
   13909/    B814 : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   13910/    B81A : 137C 0010 0019      		move.b	#$10,$19(a1)
   13911/    B820 : 3342 0034           		move.w	d2,$34(a1)
   13912/    B824 : 137C 0004 0018      		move.b	#4,$18(a1)
   13913/    B82A : 135A 001A           		move.b	(a2)+,$1A(a1)
   13914/    B82E : 0C29 0001 001A      		cmpi.b	#1,$1A(a1)
   13915/    B834 : 661E                		bne.s	loc_B76A
   13916/    B836 : 5341                		subq.w	#1,d1
   13917/    B838 : 1028 0028           		move.b	$28(a0),d0
   13918/    B83C : 0240 00F0           		andi.w	#$F0,d0
   13919/    B840 : 0C40 0020           		cmpi.w	#$20,d0
   13920/    B844 : 6798                		beq.s	Obj31_MakeStomper
   13921/    B846 : 137C 0038 0019      		move.b	#$38,$19(a1)
   13922/    B84C : 137C 0090 0020      		move.b	#$90,$20(a1)
   13923/    B852 : 5241                		addq.w	#1,d1
   13924/    B854 :                     
   13925/    B854 :                     loc_B76A:
   13926/    B854 : 2348 003C           		move.l	a0,$3C(a1)
   13927/    B858 : 51C9 FF7C           		dbf	d1,Obj31_Loop
   13928/    B85C :                     
   13929/    B85C : 137C 0003 0018      		move.b	#3,$18(a1)
   13930/    B862 :                     
   13931/    B862 :                     Obj31_SetSize:
   13932/    B862 : 7000                		moveq	#0,d0
   13933/    B864 : 1028 0028           		move.b	$28(a0),d0
   13934/    B868 : E648                		lsr.w	#3,d0
   13935/    B86A : 0200 000E           		andi.b	#$E,d0
   13936/    B86E : 45FB 000C           		lea	Obj31_Var2(pc,d0.w),a2
   13937/    B872 : 115A 0019           		move.b	(a2)+,$19(a0)
   13938/    B876 : 115A 001A           		move.b	(a2)+,$1A(a0)
   13939/    B87A : 6006                		bra.s	loc_B798
   13940/    B87C :                     ; ===========================================================================
   13941/    B87C : 3800                Obj31_Var2:	dc.b $38, 0		; width, frame number
   13942/    B87E : 3009                		dc.b $30, 9
   13943/    B880 : 100A                		dc.b $10, $A
   13944/    B882 :                     ; ===========================================================================
   13945/    B882 :                     
   13946/    B882 :                     loc_B798:				; XREF: Obj31_Index
   13947/    B882 : 6100 009A           		bsr.w	Obj31_Types
   13948/    B886 : 31E8 000C F7A4      		move.w	$C(a0),($FFFFF7A4).w
   13949/    B88C : 7200                		moveq	#0,d1
   13950/    B88E : 1228 0019           		move.b	$19(a0),d1
   13951/    B892 : 0641 000B           		addi.w	#$B,d1
   13952/    B896 : 343C 000C           		move.w	#$C,d2
   13953/    B89A : 363C 000D           		move.w	#$D,d3
   13954/    B89E : 3828 0008           		move.w	8(a0),d4
   13955/    B8A2 : 6100 4242           		bsr.w	SolidObject
   13956/    B8A6 : 0828 0003 0022      		btst	#3,$22(a0)
   13957/    B8AC : 6716                		beq.s	Obj31_Display
   13958/    B8AE : 0C28 0010 0032      		cmpi.b	#$10,$32(a0)
   13959/    B8B4 : 640E                		bcc.s	Obj31_Display
   13960/    B8B6 : 2448                		movea.l	a0,a2
   13961/    B8B8 : 41F8 D000           		lea	($FFFFD000).w,a0
   13962/    B8BC : 4EB9 0001 B332      		jsr	(KillSonic).l
   13963/    B8C2 : 204A                		movea.l	a2,a0
   13964/    B8C4 :                     
   13965/    B8C4 :                     Obj31_Display:
   13966/    B8C4 : 6100 1E48           		bsr.w	DisplaySprite
   13967/    B8C8 : 6000 0034           		bra.w	Obj31_ChkDel
   13968/    B8CC :                     ; ===========================================================================
   13969/    B8CC :                     
   13970/    B8CC :                     loc_B7E2:				; XREF: Obj31_Index
   13971/    B8CC : 117C 0080 0016      		move.b	#$80,$16(a0)
   13972/    B8D2 : 08E8 0004 0001      		bset	#4,1(a0)
   13973/    B8D8 : 2268 003C           		movea.l	$3C(a0),a1
   13974/    B8DC : 1029 0032           		move.b	$32(a1),d0
   13975/    B8E0 : EA08                		lsr.b	#5,d0
   13976/    B8E2 : 5600                		addq.b	#3,d0
   13977/    B8E4 : 1140 001A           		move.b	d0,$1A(a0)
   13978/    B8E8 :                     
   13979/    B8E8 :                     loc_B7FE:				; XREF: Obj31_Index
   13980/    B8E8 : 2268 003C           		movea.l	$3C(a0),a1
   13981/    B8EC : 7000                		moveq	#0,d0
   13982/    B8EE : 1029 0032           		move.b	$32(a1),d0
   13983/    B8F2 : D068 0030           		add.w	$30(a0),d0
   13984/    B8F6 : 3140 000C           		move.w	d0,$C(a0)
   13985/    B8FA :                     
   13986/    B8FA :                     Obj31_Display2:				; XREF: Obj31_Index
   13987/    B8FA : 6100 1E12           		bsr.w	DisplaySprite
   13988/    B8FE :                     
   13989/    B8FE :                     Obj31_ChkDel:				; XREF: Obj31_Display
   13990/    B8FE : 3028 0008           		move.w	8(a0),d0
   13991/    B902 : 0240 FF80           		andi.w	#$FF80,d0
   13992/    B906 : 3238 F700           		move.w	($FFFFF700).w,d1
   13993/    B90A : 0441 0080           		subi.w	#$80,d1
   13994/    B90E : 0241 FF80           		andi.w	#$FF80,d1
   13995/    B912 : 9041                		sub.w	d1,d0
   13996/    B914 : 0C40 0280           		cmpi.w	#$280,d0
   13997/    B918 : 6200 1E30           		bhi.w	DeleteObject
   13998/    B91C : 4E75                		rts	
   13999/    B91E :                     ; ===========================================================================
   14000/    B91E :                     
   14001/    B91E :                     Obj31_Types:				; XREF: loc_B798
   14002/    B91E : 1028 0028           		move.b	$28(a0),d0
   14003/    B922 : 0240 000F           		andi.w	#$F,d0
   14004/    B926 : D040                		add.w	d0,d0
   14005/    B928 : 323B 0006           		move.w	Obj31_TypeIndex(pc,d0.w),d1
   14006/    B92C : 4EFB 1002           		jmp	Obj31_TypeIndex(pc,d1.w)
   14007/    B930 :                     ; ===========================================================================
   14008/    B930 : 000E                Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
   14009/    B932 : 00AA                		dc.w Obj31_Type01-Obj31_TypeIndex
   14010/    B934 : 00AA                		dc.w Obj31_Type01-Obj31_TypeIndex
   14011/    B936 : 013A                		dc.w Obj31_Type03-Obj31_TypeIndex
   14012/    B938 : 00AA                		dc.w Obj31_Type01-Obj31_TypeIndex
   14013/    B93A : 013A                		dc.w Obj31_Type03-Obj31_TypeIndex
   14014/    B93C : 00AA                		dc.w Obj31_Type01-Obj31_TypeIndex
   14015/    B93E :                     ; ===========================================================================
   14016/    B93E :                     
   14017/    B93E :                     Obj31_Type00:				; XREF: Obj31_TypeIndex
   14018/    B93E : 45F8 F7E0           		lea	($FFFFF7E0).w,a2 ; load	switch statuses
   14019/    B942 : 7000                		moveq	#0,d0
   14020/    B944 : 1028 003A           		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
   14021/    B948 : 4A32 0000           		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
   14022/    B94C : 6744                		beq.s	loc_B8A8	; if not, branch
   14023/    B94E : 4A78 F7A4           		tst.w	($FFFFF7A4).w
   14024/    B952 : 6A08                		bpl.s	loc_B872
   14025/    B954 : 0C28 0010 0032      		cmpi.b	#$10,$32(a0)
   14026/    B95A : 672E                		beq.s	loc_B8A0
   14027/    B95C :                     
   14028/    B95C :                     loc_B872:
   14029/    B95C : 4A68 0032           		tst.w	$32(a0)
   14030/    B960 : 6728                		beq.s	loc_B8A0
   14031/    B962 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   14032/    B966 : 0200 000F           		andi.b	#$F,d0
   14033/    B96A : 6610                		bne.s	loc_B892
   14034/    B96C : 4A28 0001           		tst.b	1(a0)
   14035/    B970 : 6A0A                		bpl.s	loc_B892
   14036/    B972 : 303C 00C7           		move.w	#$C7,d0
   14037/    B976 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play rising chain sound
   14038/    B97C :                     
   14039/    B97C :                     loc_B892:
   14040/    B97C : 0468 0080 0032      		subi.w	#$80,$32(a0)
   14041/    B982 : 6446                		bcc.s	Obj31_Restart
   14042/    B984 : 317C 0000 0032      		move.w	#0,$32(a0)
   14043/    B98A :                     
   14044/    B98A :                     loc_B8A0:
   14045/    B98A : 317C 0000 0012      		move.w	#0,$12(a0)
   14046/    B990 : 6038                		bra.s	Obj31_Restart
   14047/    B992 :                     ; ===========================================================================
   14048/    B992 :                     
   14049/    B992 :                     loc_B8A8:				; XREF: Obj31_Type00
   14050/    B992 : 3228 0034           		move.w	$34(a0),d1
   14051/    B996 : B268 0032           		cmp.w	$32(a0),d1
   14052/    B99A : 672E                		beq.s	Obj31_Restart
   14053/    B99C : 3028 0012           		move.w	$12(a0),d0
   14054/    B9A0 : 0668 0070 0012      		addi.w	#$70,$12(a0)	; make object fall
   14055/    B9A6 : D168 0032           		add.w	d0,$32(a0)
   14056/    B9AA : B268 0032           		cmp.w	$32(a0),d1
   14057/    B9AE : 621A                		bhi.s	Obj31_Restart
   14058/    B9B0 : 3141 0032           		move.w	d1,$32(a0)
   14059/    B9B4 : 317C 0000 0012      		move.w	#0,$12(a0)	; stop object falling
   14060/    B9BA : 4A28 0001           		tst.b	1(a0)
   14061/    B9BE : 6A0A                		bpl.s	Obj31_Restart
   14062/    B9C0 : 303C 00BD           		move.w	#$BD,d0
   14063/    B9C4 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play stomping sound
   14064/    B9CA :                     
   14065/    B9CA :                     Obj31_Restart:
   14066/    B9CA : 7000                		moveq	#0,d0
   14067/    B9CC : 1028 0032           		move.b	$32(a0),d0
   14068/    B9D0 : D068 0030           		add.w	$30(a0),d0
   14069/    B9D4 : 3140 000C           		move.w	d0,$C(a0)
   14070/    B9D8 : 4E75                		rts	
   14071/    B9DA :                     ; ===========================================================================
   14072/    B9DA :                     
   14073/    B9DA :                     Obj31_Type01:				; XREF: Obj31_TypeIndex
   14074/    B9DA : 4A68 0036           		tst.w	$36(a0)
   14075/    B9DE : 6742                		beq.s	loc_B938
   14076/    B9E0 : 4A68 0038           		tst.w	$38(a0)
   14077/    B9E4 : 6706                		beq.s	loc_B902
   14078/    B9E6 : 5368 0038           		subq.w	#1,$38(a0)
   14079/    B9EA : 607A                		bra.s	loc_B97C
   14080/    B9EC :                     ; ===========================================================================
   14081/    B9EC :                     
   14082/    B9EC :                     loc_B902:
   14083/    B9EC : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   14084/    B9F0 : 0200 000F           		andi.b	#$F,d0
   14085/    B9F4 : 6610                		bne.s	loc_B91C
   14086/    B9F6 : 4A28 0001           		tst.b	1(a0)
   14087/    B9FA : 6A0A                		bpl.s	loc_B91C
   14088/    B9FC : 303C 00C7           		move.w	#$C7,d0
   14089/    BA00 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play rising chain sound
   14090/    BA06 :                     
   14091/    BA06 :                     loc_B91C:
   14092/    BA06 : 0468 0080 0032      		subi.w	#$80,$32(a0)
   14093/    BA0C : 6458                		bcc.s	loc_B97C
   14094/    BA0E : 317C 0000 0032      		move.w	#0,$32(a0)
   14095/    BA14 : 317C 0000 0012      		move.w	#0,$12(a0)
   14096/    BA1A : 317C 0000 0036      		move.w	#0,$36(a0)
   14097/    BA20 : 6044                		bra.s	loc_B97C
   14098/    BA22 :                     ; ===========================================================================
   14099/    BA22 :                     
   14100/    BA22 :                     loc_B938:				; XREF: Obj31_Type01
   14101/    BA22 : 3228 0034           		move.w	$34(a0),d1
   14102/    BA26 : B268 0032           		cmp.w	$32(a0),d1
   14103/    BA2A : 673A                		beq.s	loc_B97C
   14104/    BA2C : 3028 0012           		move.w	$12(a0),d0
   14105/    BA30 : 0668 0070 0012      		addi.w	#$70,$12(a0)	; make object fall
   14106/    BA36 : D168 0032           		add.w	d0,$32(a0)
   14107/    BA3A : B268 0032           		cmp.w	$32(a0),d1
   14108/    BA3E : 6226                		bhi.s	loc_B97C
   14109/    BA40 : 3141 0032           		move.w	d1,$32(a0)
   14110/    BA44 : 317C 0000 0012      		move.w	#0,$12(a0)	; stop object falling
   14111/    BA4A : 317C 0001 0036      		move.w	#1,$36(a0)
   14112/    BA50 : 317C 003C 0038      		move.w	#$3C,$38(a0)
   14113/    BA56 : 4A28 0001           		tst.b	1(a0)
   14114/    BA5A : 6A0A                		bpl.s	loc_B97C
   14115/    BA5C : 303C 00BD           		move.w	#$BD,d0
   14116/    BA60 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play stomping sound
   14117/    BA66 :                     
   14118/    BA66 :                     loc_B97C:
   14119/    BA66 : 6000 FF62           		bra.w	Obj31_Restart
   14120/    BA6A :                     ; ===========================================================================
   14121/    BA6A :                     
   14122/    BA6A :                     Obj31_Type03:				; XREF: Obj31_TypeIndex
   14123/    BA6A : 3038 D008           		move.w	($FFFFD008).w,d0
   14124/    BA6E : 9068 0008           		sub.w	8(a0),d0
   14125/    BA72 : 6402                		bcc.s	loc_B98C
   14126/    BA74 : 4440                		neg.w	d0
   14127/    BA76 :                     
   14128/    BA76 :                     loc_B98C:
   14129/    BA76 : 0C40 0090           		cmpi.w	#$90,d0
   14130/    BA7A : 6404                		bcc.s	loc_B996
   14131/    BA7C : 5228 0028           		addq.b	#1,$28(a0)
   14132/    BA80 :                     
   14133/    BA80 :                     loc_B996:
   14134/    BA80 : 6000 FF48           		bra.w	Obj31_Restart
   14135/    BA84 :                     ; ===========================================================================
   14136/    BA84 :                     ; ---------------------------------------------------------------------------
   14137/    BA84 :                     ; Object 45 - spiked metal block from beta version (MZ)
   14138/    BA84 :                     ; ---------------------------------------------------------------------------
   14139/    BA84 :                     
   14140/    BA84 :                     Obj45:					; XREF: Obj_Index
   14141/    BA84 : 7000                		moveq	#0,d0
   14142/    BA86 : 1028 0024           		move.b	$24(a0),d0
   14143/    BA8A : 323B 0006           		move.w	Obj45_Index(pc,d0.w),d1
   14144/    BA8E : 4EFB 1002           		jmp	Obj45_Index(pc,d1.w)
   14145/    BA92 :                     ; ===========================================================================
   14146/    BA92 : 001C                Obj45_Index:	dc.w Obj45_Main-Obj45_Index
   14147/    BA94 : 00B0                		dc.w Obj45_Solid-Obj45_Index
   14148/    BA96 : 00E6                		dc.w loc_BA8E-Obj45_Index
   14149/    BA98 : 00FA                		dc.w Obj45_Display-Obj45_Index
   14150/    BA9A : 00D2                		dc.w loc_BA7A-Obj45_Index
   14151/    BA9C :                     
   14152/    BA9C : 0204 00             Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
   14153/    BA9F : 04E4 01             		dc.b	4, $E4,	  1
   14154/    BAA2 : 0834 03             		dc.b	8, $34,	  3
   14155/    BAA5 : 0628 02             		dc.b	6, $28,	  2
   14156/    BAA8 :                     
   14157/    BAA8 : 3800                word_B9BE:	dc.w $3800
   14158/    BAAA : A000                		dc.w -$6000
   14159/    BAAC : 5000                		dc.w $5000
   14160/    BAAE :                     ; ===========================================================================
   14161/    BAAE :                     
   14162/    BAAE :                     Obj45_Main:				; XREF: Obj45_Index
   14163/    BAAE : 7000                		moveq	#0,d0
   14164/    BAB0 : 1028 0028           		move.b	$28(a0),d0
   14165/    BAB4 : D040                		add.w	d0,d0
   14166/    BAB6 : 343B 00F0           		move.w	word_B9BE(pc,d0.w),d2
   14167/    BABA : 45F9 0000 BA9C      		lea	(Obj45_Var).l,a2
   14168/    BAC0 : 2248                		movea.l	a0,a1
   14169/    BAC2 : 7203                		moveq	#3,d1
   14170/    BAC4 : 6006                		bra.s	Obj45_Load
   14171/    BAC6 :                     ; ===========================================================================
   14172/    BAC6 :                     
   14173/    BAC6 :                     Obj45_Loop:
   14174/    BAC6 : 6100 20E4           		bsr.w	SingleObjLoad2
   14175/    BACA : 6670                		bne.s	loc_BA52
   14176/    BACC :                     
   14177/    BACC :                     Obj45_Load:				; XREF: Obj45_Main
   14178/    BACC : 135A 0024           		move.b	(a2)+,$24(a1)
   14179/    BAD0 : (MACRO)             		_move.b	#$45,0(a1)
   14179/    BAD0 :  (MACRO-2)                          insn2op move.b, #$45,0(a1)
   14179/    BAD0 : 137C 0045 0001                              !move.b   #$45,1+0(a1)
   14179/    BAD5 :                                             !org    *-1
   14179/    BAD5 : 00                                          !dc.b   0
   14180/    BAD6 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   14181/    BADC : 101A                		move.b	(a2)+,d0
   14182/    BADE : 4880                		ext.w	d0
   14183/    BAE0 : D068 0008           		add.w	8(a0),d0
   14184/    BAE4 : 3340 0008           		move.w	d0,8(a1)
   14185/    BAE8 : 237C 0000 BD44 0004 		move.l	#Map_obj45,4(a1)
   14186/    BAF0 : 337C 0300 0002      		move.w	#$300,2(a1)
   14187/    BAF6 : 137C 0004 0001      		move.b	#4,1(a1)
   14188/    BAFC : 3369 0008 0030      		move.w	8(a1),$30(a1)
   14189/    BB02 : 3368 0008 003A      		move.w	8(a0),$3A(a1)
   14190/    BB08 : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   14191/    BB0E : 137C 0020 0019      		move.b	#$20,$19(a1)
   14192/    BB14 : 3342 0034           		move.w	d2,$34(a1)
   14193/    BB18 : 137C 0004 0018      		move.b	#4,$18(a1)
   14194/    BB1E : 0C12 0001           		cmpi.b	#1,(a2)
   14195/    BB22 : 6606                		bne.s	loc_BA40
   14196/    BB24 : 137C 0091 0020      		move.b	#$91,$20(a1)
   14197/    BB2A :                     
   14198/    BB2A :                     loc_BA40:
   14199/    BB2A : 135A 001A           		move.b	(a2)+,$1A(a1)
   14200/    BB2E : 2348 003C           		move.l	a0,$3C(a1)
   14201/    BB32 : 51C9 FF92           		dbf	d1,Obj45_Loop	; repeat 3 times
   14202/    BB36 :                     
   14203/    BB36 : 137C 0003 0018      		move.b	#3,$18(a1)
   14204/    BB3C :                     
   14205/    BB3C :                     loc_BA52:
   14206/    BB3C : 117C 0010 0019      		move.b	#$10,$19(a0)
   14207/    BB42 :                     
   14208/    BB42 :                     Obj45_Solid:				; XREF: Obj45_Index
   14209/    BB42 : 3F28 0008           		move.w	8(a0),-(sp)
   14210/    BB46 : 6100 0068           		bsr.w	Obj45_Move
   14211/    BB4A : 323C 0017           		move.w	#$17,d1
   14212/    BB4E : 343C 0020           		move.w	#$20,d2
   14213/    BB52 : 363C 0020           		move.w	#$20,d3
   14214/    BB56 : 381F                		move.w	(sp)+,d4
   14215/    BB58 : 6100 3F8C           		bsr.w	SolidObject
   14216/    BB5C : 6100 1BB0           		bsr.w	DisplaySprite
   14217/    BB60 : 6000 002E           		bra.w	Obj45_ChkDel
   14218/    BB64 :                     ; ===========================================================================
   14219/    BB64 :                     
   14220/    BB64 :                     loc_BA7A:				; XREF: Obj45_Index
   14221/    BB64 : 2268 003C           		movea.l	$3C(a0),a1
   14222/    BB68 : 1029 0032           		move.b	$32(a1),d0
   14223/    BB6C : 0600 0010           		addi.b	#$10,d0
   14224/    BB70 : EA08                		lsr.b	#5,d0
   14225/    BB72 : 5600                		addq.b	#3,d0
   14226/    BB74 : 1140 001A           		move.b	d0,$1A(a0)
   14227/    BB78 :                     
   14228/    BB78 :                     loc_BA8E:				; XREF: Obj45_Index
   14229/    BB78 : 2268 003C           		movea.l	$3C(a0),a1
   14230/    BB7C : 7000                		moveq	#0,d0
   14231/    BB7E : 1029 0032           		move.b	$32(a1),d0
   14232/    BB82 : 4440                		neg.w	d0
   14233/    BB84 : D068 0030           		add.w	$30(a0),d0
   14234/    BB88 : 3140 0008           		move.w	d0,8(a0)
   14235/    BB8C :                     
   14236/    BB8C :                     Obj45_Display:				; XREF: Obj45_Index
   14237/    BB8C : 6100 1B80           		bsr.w	DisplaySprite
   14238/    BB90 :                     
   14239/    BB90 :                     Obj45_ChkDel:				; XREF: Obj45_Solid
   14240/    BB90 : 3028 003A           		move.w	$3A(a0),d0
   14241/    BB94 : 0240 FF80           		andi.w	#$FF80,d0
   14242/    BB98 : 3238 F700           		move.w	($FFFFF700).w,d1
   14243/    BB9C : 0441 0080           		subi.w	#$80,d1
   14244/    BBA0 : 0241 FF80           		andi.w	#$FF80,d1
   14245/    BBA4 : 9041                		sub.w	d1,d0
   14246/    BBA6 : 0C40 0280           		cmpi.w	#$280,d0
   14247/    BBAA : 6200 1B9E           		bhi.w	DeleteObject
   14248/    BBAE : 4E75                		rts	
   14249/    BBB0 :                     
   14250/    BBB0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   14251/    BBB0 :                     
   14252/    BBB0 :                     
   14253/    BBB0 :                     Obj45_Move:				; XREF: Obj45_Solid
   14254/    BBB0 : 7000                		moveq	#0,d0
   14255/    BBB2 : 1028 0028           		move.b	$28(a0),d0
   14256/    BBB6 : D040                		add.w	d0,d0
   14257/    BBB8 : 323B 0006           		move.w	off_BAD6(pc,d0.w),d1
   14258/    BBBC : 4EFB 1002           		jmp	off_BAD6(pc,d1.w)
   14259/    BBC0 :                     ; End of function Obj45_Move
   14260/    BBC0 :                     
   14261/    BBC0 :                     ; ===========================================================================
   14262/    BBC0 : 0004                off_BAD6:	dc.w loc_BADA-off_BAD6
   14263/    BBC2 : 0004                		dc.w loc_BADA-off_BAD6
   14264/    BBC4 :                     ; ===========================================================================
   14265/    BBC4 :                     
   14266/    BBC4 :                     loc_BADA:				; XREF: off_BAD6
   14267/    BBC4 : 4A68 0036           		tst.w	$36(a0)
   14268/    BBC8 : 6728                		beq.s	loc_BB08
   14269/    BBCA : 4A68 0038           		tst.w	$38(a0)
   14270/    BBCE : 6706                		beq.s	loc_BAEC
   14271/    BBD0 : 5368 0038           		subq.w	#1,$38(a0)
   14272/    BBD4 : 6050                		bra.s	loc_BB3C
   14273/    BBD6 :                     ; ===========================================================================
   14274/    BBD6 :                     
   14275/    BBD6 :                     loc_BAEC:
   14276/    BBD6 : 0468 0080 0032      		subi.w	#$80,$32(a0)
   14277/    BBDC : 6448                		bcc.s	loc_BB3C
   14278/    BBDE : 317C 0000 0032      		move.w	#0,$32(a0)
   14279/    BBE4 : 317C 0000 0010      		move.w	#0,$10(a0)
   14280/    BBEA : 317C 0000 0036      		move.w	#0,$36(a0)
   14281/    BBF0 : 6034                		bra.s	loc_BB3C
   14282/    BBF2 :                     ; ===========================================================================
   14283/    BBF2 :                     
   14284/    BBF2 :                     loc_BB08:				; XREF: loc_BADA
   14285/    BBF2 : 3228 0034           		move.w	$34(a0),d1
   14286/    BBF6 : B268 0032           		cmp.w	$32(a0),d1
   14287/    BBFA : 672A                		beq.s	loc_BB3C
   14288/    BBFC : 3028 0010           		move.w	$10(a0),d0
   14289/    BC00 : 0668 0070 0010      		addi.w	#$70,$10(a0)
   14290/    BC06 : D168 0032           		add.w	d0,$32(a0)
   14291/    BC0A : B268 0032           		cmp.w	$32(a0),d1
   14292/    BC0E : 6216                		bhi.s	loc_BB3C
   14293/    BC10 : 3141 0032           		move.w	d1,$32(a0)
   14294/    BC14 : 317C 0000 0010      		move.w	#0,$10(a0)
   14295/    BC1A : 317C 0001 0036      		move.w	#1,$36(a0)
   14296/    BC20 : 317C 003C 0038      		move.w	#$3C,$38(a0)
   14297/    BC26 :                     
   14298/    BC26 :                     loc_BB3C:
   14299/    BC26 : 7000                		moveq	#0,d0
   14300/    BC28 : 1028 0032           		move.b	$32(a0),d0
   14301/    BC2C : 4440                		neg.w	d0
   14302/    BC2E : D068 0030           		add.w	$30(a0),d0
   14303/    BC32 : 3140 0008           		move.w	d0,8(a0)
   14304/    BC36 : 4E75                		rts	
   14305/    BC38 :                     ; ===========================================================================
   14306/    BC38 :                     ; ---------------------------------------------------------------------------
   14307/    BC38 :                     ; Sprite mappings - metal stomping blocks on chains (MZ)
   14308/    BC38 :                     ; ---------------------------------------------------------------------------
   14309/    BC38 :                     Map_obj31:
   14310/    BC38 :                     		include	"_maps/obj31.asm"
(1)    1/    BC38 :                     ; ---------------------------------------------------------------------------
(1)    2/    BC38 :                     ; Sprite mappings - metal stomping blocks on chains (MZ)
(1)    3/    BC38 :                     ; ---------------------------------------------------------------------------
(1)    4/    BC38 : 0016                		dc.w byte_BB64-Map_obj31
(1)    5/    BC3A : 0030                		dc.w byte_BB7E-Map_obj31
(1)    6/    BC3C : 004A                		dc.w byte_BB98-Map_obj31
(1)    7/    BC3E : 0050                		dc.w byte_BB9E-Map_obj31
(1)    8/    BC40 : 005B                		dc.w byte_BBA9-Map_obj31
(1)    9/    BC42 : 0070                		dc.w byte_BBBE-Map_obj31
(1)   10/    BC44 : 008F                		dc.w byte_BBDD-Map_obj31
(1)   11/    BC46 : 00B8                		dc.w byte_BC06-Map_obj31
(1)   12/    BC48 : 00B8                		dc.w byte_BC06-Map_obj31
(1)   13/    BC4A : 00EB                		dc.w byte_BC39-Map_obj31
(1)   14/    BC4C : 0105                		dc.w byte_BC53-Map_obj31
(1)   15/    BC4E : 05                  byte_BB64:	dc.b 5
(1)   16/    BC4F : F406 0000 C8        		dc.b $F4, 6, 0,	0, $C8
(1)   17/    BC54 : F40A 0006 D8        		dc.b $F4, $A, 0, 6, $D8
(1)   18/    BC59 : EC0F 000F F0        		dc.b $EC, $F, 0, $F, $F0
(1)   19/    BC5E : F40A 0806 10        		dc.b $F4, $A, 8, 6, $10
(1)   20/    BC63 : F406 0800 28        		dc.b $F4, 6, 8,	0, $28
(1)   21/    BC68 : 05                  byte_BB7E:	dc.b 5
(1)   22/    BC69 : F003 121F D4        		dc.b $F0, 3, $12, $1F, $D4
(1)   23/    BC6E : F003 121F E8        		dc.b $F0, 3, $12, $1F, $E8
(1)   24/    BC73 : F003 121F FC        		dc.b $F0, 3, $12, $1F, $FC
(1)   25/    BC78 : F003 121F 10        		dc.b $F0, 3, $12, $1F, $10
(1)   26/    BC7D : F003 121F 24        		dc.b $F0, 3, $12, $1F, $24
(1)   27/    BC82 : 01                  byte_BB98:	dc.b 1
(1)   28/    BC83 : DC0F 100F F0        		dc.b $DC, $F, $10, $F, $F0
(1)   29/    BC88 : 02                  byte_BB9E:	dc.b 2
(1)   30/    BC89 : 0001 003F FC        		dc.b 0,	1, 0, $3F, $FC
(1)   31/    BC8E : 1001 003F FC        		dc.b $10, 1, 0,	$3F, $FC
(1)   32/    BC93 : 04                  byte_BBA9:	dc.b 4
(1)   33/    BC94 : E001 003F FC        		dc.b $E0, 1, 0,	$3F, $FC
(1)   34/    BC99 : F001 003F FC        		dc.b $F0, 1, 0,	$3F, $FC
(1)   35/    BC9E : 0001 003F FC        		dc.b 0,	1, 0, $3F, $FC
(1)   36/    BCA3 : 1001 003F FC        		dc.b $10, 1, 0,	$3F, $FC
(1)   37/    BCA8 : 06                  byte_BBBE:	dc.b 6
(1)   38/    BCA9 : C001 003F FC        		dc.b $C0, 1, 0,	$3F, $FC
(1)   39/    BCAE : D001 003F FC        		dc.b $D0, 1, 0,	$3F, $FC
(1)   40/    BCB3 : E001 003F FC        		dc.b $E0, 1, 0,	$3F, $FC
(1)   41/    BCB8 : F001 003F FC        		dc.b $F0, 1, 0,	$3F, $FC
(1)   42/    BCBD : 0001 003F FC        		dc.b 0,	1, 0, $3F, $FC
(1)   43/    BCC2 : 1001 003F FC        		dc.b $10, 1, 0,	$3F, $FC
(1)   44/    BCC7 : 08                  byte_BBDD:	dc.b 8
(1)   45/    BCC8 : A001 003F FC        		dc.b $A0, 1, 0,	$3F, $FC
(1)   46/    BCCD : B001 003F FC        		dc.b $B0, 1, 0,	$3F, $FC
(1)   47/    BCD2 : C001 003F FC        		dc.b $C0, 1, 0,	$3F, $FC
(1)   48/    BCD7 : D001 003F FC        		dc.b $D0, 1, 0,	$3F, $FC
(1)   49/    BCDC : E001 003F FC        		dc.b $E0, 1, 0,	$3F, $FC
(1)   50/    BCE1 : F001 003F FC        		dc.b $F0, 1, 0,	$3F, $FC
(1)   51/    BCE6 : 0001 003F FC        		dc.b 0,	1, 0, $3F, $FC
(1)   52/    BCEB : 1001 003F FC        		dc.b $10, 1, 0,	$3F, $FC
(1)   53/    BCF0 : 0A                  byte_BC06:	dc.b $A
(1)   54/    BCF1 : 8001 003F FC        		dc.b $80, 1, 0,	$3F, $FC
(1)   55/    BCF6 : 9001 003F FC        		dc.b $90, 1, 0,	$3F, $FC
(1)   56/    BCFB : A001 003F FC        		dc.b $A0, 1, 0,	$3F, $FC
(1)   57/    BD00 : B001 003F FC        		dc.b $B0, 1, 0,	$3F, $FC
(1)   58/    BD05 : C001 003F FC        		dc.b $C0, 1, 0,	$3F, $FC
(1)   59/    BD0A : D001 003F FC        		dc.b $D0, 1, 0,	$3F, $FC
(1)   60/    BD0F : E001 003F FC        		dc.b $E0, 1, 0,	$3F, $FC
(1)   61/    BD14 : F001 003F FC        		dc.b $F0, 1, 0,	$3F, $FC
(1)   62/    BD19 : 0001 003F FC        		dc.b 0,	1, 0, $3F, $FC
(1)   63/    BD1E : 1001 003F FC        		dc.b $10, 1, 0,	$3F, $FC
(1)   64/    BD23 : 05                  byte_BC39:	dc.b 5
(1)   65/    BD24 : F406 0000 D0        		dc.b $F4, 6, 0,	0, $D0
(1)   66/    BD29 : F40A 0006 E0        		dc.b $F4, $A, 0, 6, $E0
(1)   67/    BD2E : F40A 0806 08        		dc.b $F4, $A, 8, 6, 8
(1)   68/    BD33 : F406 0800 20        		dc.b $F4, 6, 8,	0, $20
(1)   69/    BD38 : EC0F 000F F0        		dc.b $EC, $F, 0, $F, $F0
(1)   70/    BD3D : 01                  byte_BC53:	dc.b 1
(1)   71/    BD3E : EC0F 002F F0        		dc.b $EC, $F, 0, $2F, $F0
(1)   72/    BD43 : (MACRO)             		align 2
(1)   72/    BD43 :  (MACRO-2)                  cnop 0,2
(1)   72/    BD43 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   72/    BD43 : =$12                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   72/    BD44 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   14311/    BD44 :                     
   14312/    BD44 :                     ; ---------------------------------------------------------------------------
   14313/    BD44 :                     ; Sprite mappings - spiked metal block from beta version (MZ)
   14314/    BD44 :                     ; ---------------------------------------------------------------------------
   14315/    BD44 :                     Map_obj45:
   14316/    BD44 :                     		include	"_maps/obj45.asm"
(1)    1/    BD44 :                     ; ---------------------------------------------------------------------------
(1)    2/    BD44 :                     ; Sprite mappings - spiked metal block from beta version (MZ)
(1)    3/    BD44 :                     ; ---------------------------------------------------------------------------
(1)    4/    BD44 : 0012                		dc.w byte_BC6C-Map_obj45
(1)    5/    BD46 : 0022                		dc.w byte_BC7C-Map_obj45
(1)    6/    BD48 : 0032                		dc.w byte_BC8C-Map_obj45
(1)    7/    BD4A : 0038                		dc.w byte_BC92-Map_obj45
(1)    8/    BD4C : 0043                		dc.w byte_BC9D-Map_obj45
(1)    9/    BD4E : 0058                		dc.w byte_BCB2-Map_obj45
(1)   10/    BD50 : 0077                		dc.w byte_BCD1-Map_obj45
(1)   11/    BD52 : 00A0                		dc.w byte_BCFA-Map_obj45
(1)   12/    BD54 : 00A0                		dc.w byte_BCFA-Map_obj45
(1)   13/    BD56 : 03                  byte_BC6C:	dc.b 3
(1)   14/    BD57 : E00B 001F F4        		dc.b $E0, $B, 0, $1F, $F4
(1)   15/    BD5C : 000B 101F F4        		dc.b 0,	$B, $10, $1F, $F4
(1)   16/    BD61 : F003 002B 0C        		dc.b $F0, 3, 0,	$2B, $C
(1)   17/    BD66 : 03                  byte_BC7C:	dc.b 3
(1)   18/    BD67 : E80C 121B F0        		dc.b $E8, $C, $12, $1B,	$F0
(1)   19/    BD6C : FC0C 121B F0        		dc.b $FC, $C, $12, $1B,	$F0
(1)   20/    BD71 : 100C 121B F0        		dc.b $10, $C, $12, $1B,	$F0
(1)   21/    BD76 : 01                  byte_BC8C:	dc.b 1
(1)   22/    BD77 : F003 082B FC        		dc.b $F0, 3, 8,	$2B, $FC
(1)   23/    BD7C : 02                  byte_BC92:	dc.b 2
(1)   24/    BD7D : F805 0041 E0        		dc.b $F8, 5, 0,	$41, $E0
(1)   25/    BD82 : F805 0041 F0        		dc.b $F8, 5, 0,	$41, $F0
(1)   26/    BD87 : 04                  byte_BC9D:	dc.b 4
(1)   27/    BD88 : F805 0041 E0        		dc.b $F8, 5, 0,	$41, $E0
(1)   28/    BD8D : F805 0041 F0        		dc.b $F8, 5, 0,	$41, $F0
(1)   29/    BD92 : F805 0041 00        		dc.b $F8, 5, 0,	$41, 0
(1)   30/    BD97 : F805 0041 10        		dc.b $F8, 5, 0,	$41, $10
(1)   31/    BD9C : 06                  byte_BCB2:	dc.b 6
(1)   32/    BD9D : F805 0041 E0        		dc.b $F8, 5, 0,	$41, $E0
(1)   33/    BDA2 : F805 0041 F0        		dc.b $F8, 5, 0,	$41, $F0
(1)   34/    BDA7 : F805 0041 00        		dc.b $F8, 5, 0,	$41, 0
(1)   35/    BDAC : F805 0041 10        		dc.b $F8, 5, 0,	$41, $10
(1)   36/    BDB1 : F805 0041 20        		dc.b $F8, 5, 0,	$41, $20
(1)   37/    BDB6 : F805 0041 30        		dc.b $F8, 5, 0,	$41, $30
(1)   38/    BDBB : 08                  byte_BCD1:	dc.b 8
(1)   39/    BDBC : F805 0041 E0        		dc.b $F8, 5, 0,	$41, $E0
(1)   40/    BDC1 : F805 0041 F0        		dc.b $F8, 5, 0,	$41, $F0
(1)   41/    BDC6 : F805 0041 00        		dc.b $F8, 5, 0,	$41, 0
(1)   42/    BDCB : F805 0041 10        		dc.b $F8, 5, 0,	$41, $10
(1)   43/    BDD0 : F805 0041 20        		dc.b $F8, 5, 0,	$41, $20
(1)   44/    BDD5 : F805 0041 30        		dc.b $F8, 5, 0,	$41, $30
(1)   45/    BDDA : F805 0041 40        		dc.b $F8, 5, 0,	$41, $40
(1)   46/    BDDF : F805 0041 50        		dc.b $F8, 5, 0,	$41, $50
(1)   47/    BDE4 : 08                  byte_BCFA:	dc.b 8
(1)   48/    BDE5 : F805 0041 E0        		dc.b $F8, 5, 0,	$41, $E0
(1)   49/    BDEA : F805 0041 F0        		dc.b $F8, 5, 0,	$41, $F0
(1)   50/    BDEF : F805 0041 00        		dc.b $F8, 5, 0,	$41, 0
(1)   51/    BDF4 : F805 0041 10        		dc.b $F8, 5, 0,	$41, $10
(1)   52/    BDF9 : F805 0041 20        		dc.b $F8, 5, 0,	$41, $20
(1)   53/    BDFE : F805 0041 30        		dc.b $F8, 5, 0,	$41, $30
(1)   54/    BE03 : F805 0041 40        		dc.b $F8, 5, 0,	$41, $40
(1)   55/    BE08 : F805 0041 50        		dc.b $F8, 5, 0,	$41, $50
(1)   56/    BE0D : F805 0041 60        		dc.b $F8, 5, 0,	$41, $60
(1)   57/    BE12 : F805 0041 70        		dc.b $F8, 5, 0,	$41, $70
(1)   58/    BE17 : (MACRO)             		align 2
(1)   58/    BE17 :  (MACRO-2)                  cnop 0,2
(1)   58/    BE17 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   58/    BE17 : =$13                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   58/    BE18 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   14317/    BE18 :                     
   14318/    BE18 :                     ; ===========================================================================
   14319/    BE18 :                     ; ---------------------------------------------------------------------------
   14320/    BE18 :                     ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
   14321/    BE18 :                     ; ---------------------------------------------------------------------------
   14322/    BE18 :                     
   14323/    BE18 :                     Obj32:					; XREF: Obj_Index
   14324/    BE18 : 7000                		moveq	#0,d0
   14325/    BE1A : 1028 0024           		move.b	$24(a0),d0
   14326/    BE1E : 323B 0006           		move.w	Obj32_Index(pc,d0.w),d1
   14327/    BE22 : 4EFB 1002           		jmp	Obj32_Index(pc,d1.w)
   14328/    BE26 :                     ; ===========================================================================
   14329/    BE26 : 0004                Obj32_Index:	dc.w Obj32_Main-Obj32_Index
   14330/    BE28 : 003A                		dc.w Obj32_Pressed-Obj32_Index
   14331/    BE2A :                     ; ===========================================================================
   14332/    BE2A :                     
   14333/    BE2A :                     Obj32_Main:				; XREF: Obj32_Index
   14334/    BE2A : 5428 0024           		addq.b	#2,$24(a0)
   14335/    BE2E : 217C 0000 BF8E 0004 		move.l	#Map_obj32,4(a0)
   14336/    BE36 : 317C 4513 0002      		move.w	#$4513,2(a0)	; MZ specific code
   14337/    BE3C : 0C38 0002 FE10      		cmpi.b	#2,($FFFFFE10).w
   14338/    BE42 : 6706                		beq.s	loc_BD60
   14339/    BE44 : 317C 0513 0002      		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
   14340/    BE4A :                     
   14341/    BE4A :                     loc_BD60:
   14342/    BE4A : 117C 0004 0001      		move.b	#4,1(a0)
   14343/    BE50 : 117C 0010 0019      		move.b	#$10,$19(a0)
   14344/    BE56 : 117C 0004 0018      		move.b	#4,$18(a0)
   14345/    BE5C : 5668 000C           		addq.w	#3,$C(a0)
   14346/    BE60 :                     
   14347/    BE60 :                     Obj32_Pressed:				; XREF: Obj32_Index
   14348/    BE60 : 4A28 0001           		tst.b	1(a0)
   14349/    BE64 : 6A7C                		bpl.s	Obj32_Display
   14350/    BE66 : 323C 001B           		move.w	#$1B,d1
   14351/    BE6A : 343C 0005           		move.w	#5,d2
   14352/    BE6E : 363C 0005           		move.w	#5,d3
   14353/    BE72 : 3828 0008           		move.w	8(a0),d4
   14354/    BE76 : 6100 3C6E           		bsr.w	SolidObject
   14355/    BE7A : 08A8 0000 001A      		bclr	#0,$1A(a0)	; use "unpressed" frame
   14356/    BE80 : 1028 0028           		move.b	$28(a0),d0
   14357/    BE84 : 0240 000F           		andi.w	#$F,d0
   14358/    BE88 : 47F8 F7E0           		lea	($FFFFF7E0).w,a3
   14359/    BE8C : 47F3 0000           		lea	(a3,d0.w),a3
   14360/    BE90 : 7600                		moveq	#0,d3
   14361/    BE92 : 0828 0006 0028      		btst	#6,$28(a0)
   14362/    BE98 : 6702                		beq.s	loc_BDB2
   14363/    BE9A : 7607                		moveq	#7,d3
   14364/    BE9C :                     
   14365/    BE9C :                     loc_BDB2:
   14366/    BE9C : 4A28 0028           		tst.b	$28(a0)
   14367/    BEA0 : 6A06                		bpl.s	loc_BDBE
   14368/    BEA2 : 6100 0068           		bsr.w	Obj32_MZBlock
   14369/    BEA6 : 660A                		bne.s	loc_BDC8
   14370/    BEA8 :                     
   14371/    BEA8 :                     loc_BDBE:
   14372/    BEA8 : 4A28 0025           		tst.b	$25(a0)
   14373/    BEAC : 6604                		bne.s	loc_BDC8
   14374/    BEAE : 0793                		bclr	d3,(a3)
   14375/    BEB0 : 6016                		bra.s	loc_BDDE
   14376/    BEB2 :                     ; ===========================================================================
   14377/    BEB2 :                     
   14378/    BEB2 :                     loc_BDC8:
   14379/    BEB2 : 4A13                		tst.b	(a3)
   14380/    BEB4 : 660A                		bne.s	loc_BDD6
   14381/    BEB6 : 303C 00CD           		move.w	#$CD,d0
   14382/    BEBA : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play switch sound
   14383/    BEC0 :                     
   14384/    BEC0 :                     loc_BDD6:
   14385/    BEC0 : 07D3                		bset	d3,(a3)
   14386/    BEC2 : 08E8 0000 001A      		bset	#0,$1A(a0)	; use "pressed"	frame
   14387/    BEC8 :                     
   14388/    BEC8 :                     loc_BDDE:
   14389/    BEC8 : 0828 0005 0028      		btst	#5,$28(a0)
   14390/    BECE : 6712                		beq.s	Obj32_Display
   14391/    BED0 : 5328 001E           		subq.b	#1,$1E(a0)
   14392/    BED4 : 6A0C                		bpl.s	Obj32_Display
   14393/    BED6 : 117C 0007 001E      		move.b	#7,$1E(a0)
   14394/    BEDC : 0868 0001 001A      		bchg	#1,$1A(a0)
   14395/    BEE2 :                     
   14396/    BEE2 :                     Obj32_Display:
   14397/    BEE2 : 6100 182A           		bsr.w	DisplaySprite
   14398/    BEE6 : 3028 0008           		move.w	8(a0),d0
   14399/    BEEA : 0240 FF80           		andi.w	#$FF80,d0
   14400/    BEEE : 3238 F700           		move.w	($FFFFF700).w,d1
   14401/    BEF2 : 0441 0080           		subi.w	#$80,d1
   14402/    BEF6 : 0241 FF80           		andi.w	#$FF80,d1
   14403/    BEFA : 9041                		sub.w	d1,d0
   14404/    BEFC : 0C40 0280           		cmpi.w	#$280,d0
   14405/    BF00 : 6200 0004           		bhi.w	Obj32_Delete
   14406/    BF04 : 4E75                		rts	
   14407/    BF06 :                     ; ===========================================================================
   14408/    BF06 :                     
   14409/    BF06 :                     Obj32_Delete:
   14410/    BF06 : 6100 1842           		bsr.w	DeleteObject
   14411/    BF0A : 4E75                		rts	
   14412/    BF0C :                     
   14413/    BF0C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   14414/    BF0C :                     
   14415/    BF0C :                     
   14416/    BF0C :                     Obj32_MZBlock:				; XREF: Obj32_Pressed
   14417/    BF0C : 3F03                		move.w	d3,-(sp)
   14418/    BF0E : 3428 0008           		move.w	8(a0),d2
   14419/    BF12 : 3628 000C           		move.w	$C(a0),d3
   14420/    BF16 : 0442 0010           		subi.w	#$10,d2
   14421/    BF1A : 5143                		subq.w	#8,d3
   14422/    BF1C : 383C 0020           		move.w	#$20,d4
   14423/    BF20 : 3A3C 0010           		move.w	#$10,d5
   14424/    BF24 : 43F8 D800           		lea	($FFFFD800).w,a1 ; begin checking object RAM
   14425/    BF28 : 3C3C 005F           		move.w	#$5F,d6
   14426/    BF2C :                     
   14427/    BF2C :                     Obj32_MZLoop:
   14428/    BF2C : 4A29 0001           		tst.b	1(a1)
   14429/    BF30 : 6A06                		bpl.s	loc_BE4E
   14430/    BF32 : 0C11 0033           		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
   14431/    BF36 : 6710                		beq.s	loc_BE5E	; if yes, branch
   14432/    BF38 :                     
   14433/    BF38 :                     loc_BE4E:
   14434/    BF38 : 43E9 0040           		lea	$40(a1),a1	; check	next object
   14435/    BF3C : 51CE FFEE           		dbf	d6,Obj32_MZLoop	; repeat $5F times
   14436/    BF40 :                     
   14437/    BF40 : 361F                		move.w	(sp)+,d3
   14438/    BF42 : 7000                		moveq	#0,d0
   14439/    BF44 :                     
   14440/    BF44 :                     locret_BE5A:
   14441/    BF44 : 4E75                		rts	
   14442/    BF46 :                     ; ===========================================================================
   14443/    BF46 : 1010                Obj32_MZData:	dc.b $10, $10
   14444/    BF48 :                     ; ===========================================================================
   14445/    BF48 :                     
   14446/    BF48 :                     loc_BE5E:				; XREF: Obj32_MZBlock
   14447/    BF48 : 7001                		moveq	#1,d0
   14448/    BF4A : 0240 003F           		andi.w	#$3F,d0
   14449/    BF4E : D040                		add.w	d0,d0
   14450/    BF50 : 45FB 00F2           		lea	Obj32_MZData-2(pc,d0.w),a2
   14451/    BF54 : 121A                		move.b	(a2)+,d1
   14452/    BF56 : 4881                		ext.w	d1
   14453/    BF58 : 3029 0008           		move.w	8(a1),d0
   14454/    BF5C : 9041                		sub.w	d1,d0
   14455/    BF5E : 9042                		sub.w	d2,d0
   14456/    BF60 : 6408                		bcc.s	loc_BE80
   14457/    BF62 : D241                		add.w	d1,d1
   14458/    BF64 : D041                		add.w	d1,d0
   14459/    BF66 : 6506                		bcs.s	loc_BE84
   14460/    BF68 : 60CE                		bra.s	loc_BE4E
   14461/    BF6A :                     ; ===========================================================================
   14462/    BF6A :                     
   14463/    BF6A :                     loc_BE80:
   14464/    BF6A : B044                		cmp.w	d4,d0
   14465/    BF6C : 62CA                		bhi.s	loc_BE4E
   14466/    BF6E :                     
   14467/    BF6E :                     loc_BE84:
   14468/    BF6E : 121A                		move.b	(a2)+,d1
   14469/    BF70 : 4881                		ext.w	d1
   14470/    BF72 : 3029 000C           		move.w	$C(a1),d0
   14471/    BF76 : 9041                		sub.w	d1,d0
   14472/    BF78 : 9043                		sub.w	d3,d0
   14473/    BF7A : 6408                		bcc.s	loc_BE9A
   14474/    BF7C : D241                		add.w	d1,d1
   14475/    BF7E : D041                		add.w	d1,d0
   14476/    BF80 : 6506                		bcs.s	loc_BE9E
   14477/    BF82 : 60B4                		bra.s	loc_BE4E
   14478/    BF84 :                     ; ===========================================================================
   14479/    BF84 :                     
   14480/    BF84 :                     loc_BE9A:
   14481/    BF84 : B045                		cmp.w	d5,d0
   14482/    BF86 : 62B0                		bhi.s	loc_BE4E
   14483/    BF88 :                     
   14484/    BF88 :                     loc_BE9E:
   14485/    BF88 : 361F                		move.w	(sp)+,d3
   14486/    BF8A : 7001                		moveq	#1,d0
   14487/    BF8C : 4E75                		rts	
   14488/    BF8E :                     ; End of function Obj32_MZBlock
   14489/    BF8E :                     
   14490/    BF8E :                     ; ===========================================================================
   14491/    BF8E :                     ; ---------------------------------------------------------------------------
   14492/    BF8E :                     ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
   14493/    BF8E :                     ; ---------------------------------------------------------------------------
   14494/    BF8E :                     Map_obj32:
   14495/    BF8E :                     		include	"_maps/obj32.asm"
(1)    1/    BF8E :                     ; ---------------------------------------------------------------------------
(1)    2/    BF8E :                     ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
(1)    3/    BF8E :                     ; ---------------------------------------------------------------------------
(1)    4/    BF8E : 0008                		dc.w byte_BEAC-Map_obj32
(1)    5/    BF90 : 0013                		dc.w byte_BEB7-Map_obj32
(1)    6/    BF92 : 001E                		dc.w byte_BEC2-Map_obj32
(1)    7/    BF94 : 0013                		dc.w byte_BEB7-Map_obj32
(1)    8/    BF96 : 02                  byte_BEAC:	dc.b 2
(1)    9/    BF97 : F505 0000 F0        		dc.b $F5, 5, 0,	0, $F0
(1)   10/    BF9C : F505 0800 00        		dc.b $F5, 5, 8,	0, 0
(1)   11/    BFA1 : 02                  byte_BEB7:	dc.b 2
(1)   12/    BFA2 : F505 0004 F0        		dc.b $F5, 5, 0,	4, $F0
(1)   13/    BFA7 : F505 0804 00        		dc.b $F5, 5, 8,	4, 0
(1)   14/    BFAC : 02                  byte_BEC2:	dc.b 2
(1)   15/    BFAD : F505 FFFC F0        		dc.b $F5, 5, $FF, $FC, $F0
(1)   16/    BFB2 : F505 07FC 00        		dc.b $F5, 5, 7,	$FC, 0
(1)   17/    BFB7 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   18/    BFBC : (MACRO)             		align 2
(1)   18/    BFBC :  (MACRO-2)                  cnop 0,2
(1)   18/    BFBC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   14496/    BFBC :                     
   14497/    BFBC :                     ; ===========================================================================
   14498/    BFBC :                     ; ---------------------------------------------------------------------------
   14499/    BFBC :                     ; Object 33 - pushable blocks (MZ, LZ)
   14500/    BFBC :                     ; ---------------------------------------------------------------------------
   14501/    BFBC :                     
   14502/    BFBC :                     Obj33:					; XREF: Obj_Index
   14503/    BFBC : 7000                		moveq	#0,d0
   14504/    BFBE : 1028 0024           		move.b	$24(a0),d0
   14505/    BFC2 : 323B 0006           		move.w	Obj33_Index(pc,d0.w),d1
   14506/    BFC6 : 4EFB 1002           		jmp	Obj33_Index(pc,d1.w)
   14507/    BFCA :                     ; ===========================================================================
   14508/    BFCA : 000A                Obj33_Index:	dc.w Obj33_Main-Obj33_Index
   14509/    BFCC : 008E                		dc.w loc_BF6E-Obj33_Index
   14510/    BFCE : 014C                		dc.w loc_C02C-Obj33_Index
   14511/    BFD0 :                     
   14512/    BFD0 : 1000                Obj33_Var:	dc.b $10, 0	; object width,	frame number
   14513/    BFD2 : 4001                		dc.b $40, 1
   14514/    BFD4 :                     ; ===========================================================================
   14515/    BFD4 :                     
   14516/    BFD4 :                     Obj33_Main:				; XREF: Obj33_Index
   14517/    BFD4 : 5428 0024           		addq.b	#2,$24(a0)
   14518/    BFD8 : 117C 000F 0016      		move.b	#$F,$16(a0)
   14519/    BFDE : 117C 000F 0017      		move.b	#$F,$17(a0)
   14520/    BFE4 : 217C 0000 C3D0 0004 		move.l	#Map_obj33,4(a0)
   14521/    BFEC : 317C 42B8 0002      		move.w	#$42B8,2(a0)	; MZ specific code
   14522/    BFF2 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
   14523/    BFF8 : 6606                		bne.s	loc_BF16
   14524/    BFFA : 317C 43DE 0002      		move.w	#$43DE,2(a0)	; LZ specific code
   14525/    C000 :                     
   14526/    C000 :                     loc_BF16:
   14527/    C000 : 117C 0004 0001      		move.b	#4,1(a0)
   14528/    C006 : 117C 0003 0018      		move.b	#3,$18(a0)
   14529/    C00C : 3168 0008 0034      		move.w	8(a0),$34(a0)
   14530/    C012 : 3168 000C 0036      		move.w	$C(a0),$36(a0)
   14531/    C018 : 7000                		moveq	#0,d0
   14532/    C01A : 1028 0028           		move.b	$28(a0),d0
   14533/    C01E : D040                		add.w	d0,d0
   14534/    C020 : 0240 000E           		andi.w	#$E,d0
   14535/    C024 : 45FB 00AA           		lea	Obj33_Var(pc,d0.w),a2
   14536/    C028 : 115A 0019           		move.b	(a2)+,$19(a0)
   14537/    C02C : 115A 001A           		move.b	(a2)+,$1A(a0)
   14538/    C030 : 4A28 0028           		tst.b	$28(a0)
   14539/    C034 : 6706                		beq.s	Obj33_ChkGone
   14540/    C036 : 317C C2B8 0002      		move.w	#$C2B8,2(a0)
   14541/    C03C :                     
   14542/    C03C :                     Obj33_ChkGone:
   14543/    C03C : 45F8 FC00           		lea	($FFFFFC00).w,a2
   14544/    C040 : 7000                		moveq	#0,d0
   14545/    C042 : 1028 0023           		move.b	$23(a0),d0
   14546/    C046 : 6710                		beq.s	loc_BF6E
   14547/    C048 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   14548/    C04E : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   14549/    C054 : 6600 16F4           		bne.w	DeleteObject
   14550/    C058 :                     
   14551/    C058 :                     loc_BF6E:				; XREF: Obj33_Index
   14552/    C058 : 4A28 0032           		tst.b	$32(a0)
   14553/    C05C : 6600 00D2           		bne.w	loc_C046
   14554/    C060 : 7200                		moveq	#0,d1
   14555/    C062 : 1228 0019           		move.b	$19(a0),d1
   14556/    C066 : 0641 000B           		addi.w	#$B,d1
   14557/    C06A : 343C 0010           		move.w	#$10,d2
   14558/    C06E : 363C 0011           		move.w	#$11,d3
   14559/    C072 : 3828 0008           		move.w	8(a0),d4
   14560/    C076 : 6100 01F8           		bsr.w	loc_C186
   14561/    C07A : 0C78 0200 FE10      		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
   14562/    C080 : 662E                		bne.s	loc_BFC6	; if not, branch
   14563/    C082 : 08A8 0007 0028      		bclr	#7,$28(a0)
   14564/    C088 : 3028 0008           		move.w	8(a0),d0
   14565/    C08C : 0C40 0A20           		cmpi.w	#$A20,d0
   14566/    C090 : 651E                		bcs.s	loc_BFC6
   14567/    C092 : 0C40 0AA1           		cmpi.w	#$AA1,d0
   14568/    C096 : 6418                		bcc.s	loc_BFC6
   14569/    C098 : 3038 F7A4           		move.w	($FFFFF7A4).w,d0
   14570/    C09C : 0440 001C           		subi.w	#$1C,d0
   14571/    C0A0 : 3140 000C           		move.w	d0,$C(a0)
   14572/    C0A4 : 08F8 0007 F7A4      		bset	#7,($FFFFF7A4).w
   14573/    C0AA : 08E8 0007 0028      		bset	#7,$28(a0)
   14574/    C0B0 :                     
   14575/    C0B0 :                     loc_BFC6:
   14576/    C0B0 : 3028 0008           		move.w	8(a0),d0
   14577/    C0B4 : 0240 FF80           		andi.w	#$FF80,d0
   14578/    C0B8 : 3238 F700           		move.w	($FFFFF700).w,d1
   14579/    C0BC : 0441 0080           		subi.w	#$80,d1
   14580/    C0C0 : 0241 FF80           		andi.w	#$FF80,d1
   14581/    C0C4 : 9041                		sub.w	d1,d0
   14582/    C0C6 : 0C40 0280           		cmpi.w	#$280,d0
   14583/    C0CA : 6204                		bhi.s	loc_BFE6
   14584/    C0CC : 6000 1640           		bra.w	DisplaySprite
   14585/    C0D0 :                     ; ===========================================================================
   14586/    C0D0 :                     
   14587/    C0D0 :                     loc_BFE6:
   14588/    C0D0 : 3028 0034           		move.w	$34(a0),d0
   14589/    C0D4 : 0240 FF80           		andi.w	#$FF80,d0
   14590/    C0D8 : 3238 F700           		move.w	($FFFFF700).w,d1
   14591/    C0DC : 0441 0080           		subi.w	#$80,d1
   14592/    C0E0 : 0241 FF80           		andi.w	#$FF80,d1
   14593/    C0E4 : 9041                		sub.w	d1,d0
   14594/    C0E6 : 0C40 0280           		cmpi.w	#$280,d0
   14595/    C0EA : 6214                		bhi.s	loc_C016
   14596/    C0EC : 3168 0034 0008      		move.w	$34(a0),8(a0)
   14597/    C0F2 : 3168 0036 000C      		move.w	$36(a0),$C(a0)
   14598/    C0F8 : 117C 0004 0024      		move.b	#4,$24(a0)
   14599/    C0FE : 6016                		bra.s	loc_C02C
   14600/    C100 :                     ; ===========================================================================
   14601/    C100 :                     
   14602/    C100 :                     loc_C016:
   14603/    C100 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   14604/    C104 : 7000                		moveq	#0,d0
   14605/    C106 : 1028 0023           		move.b	$23(a0),d0
   14606/    C10A : 6706                		beq.s	loc_C028
   14607/    C10C : 08B2 0000 0002      		bclr	#0,2(a2,d0.w)
   14608/    C112 :                     
   14609/    C112 :                     loc_C028:
   14610/    C112 : 6000 1636           		bra.w	DeleteObject
   14611/    C116 :                     ; ===========================================================================
   14612/    C116 :                     
   14613/    C116 :                     loc_C02C:				; XREF: Obj33_Index
   14614/    C116 : 6100 1898           		bsr.w	ChkObjOnScreen2
   14615/    C11A : 6712                		beq.s	locret_C044
   14616/    C11C : 117C 0002 0024      		move.b	#2,$24(a0)
   14617/    C122 : 4228 0032           		clr.b	$32(a0)
   14618/    C126 : 4268 0010           		clr.w	$10(a0)
   14619/    C12A : 4268 0012           		clr.w	$12(a0)
   14620/    C12E :                     
   14621/    C12E :                     locret_C044:
   14622/    C12E : 4E75                		rts	
   14623/    C130 :                     ; ===========================================================================
   14624/    C130 :                     
   14625/    C130 :                     loc_C046:				; XREF: loc_BF6E
   14626/    C130 : 3F28 0008           		move.w	8(a0),-(sp)
   14627/    C134 : 0C28 0004 0025      		cmpi.b	#4,$25(a0)
   14628/    C13A : 6404                		bcc.s	loc_C056
   14629/    C13C : 6100 15AA           		bsr.w	SpeedToPos
   14630/    C140 :                     
   14631/    C140 :                     loc_C056:
   14632/    C140 : 0828 0001 0022      		btst	#1,$22(a0)
   14633/    C146 : 6742                		beq.s	loc_C0A0
   14634/    C148 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   14635/    C14E : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   14636/    C154 : 4A41                		tst.w	d1
   14637/    C156 : 6A00 0030           		bpl.w	loc_C09E
   14638/    C15A : D368 000C           		add.w	d1,$C(a0)
   14639/    C15E : 4268 0012           		clr.w	$12(a0)
   14640/    C162 : 08A8 0001 0022      		bclr	#1,$22(a0)
   14641/    C168 : 3011                		move.w	(a1),d0
   14642/    C16A : 0240 03FF           		andi.w	#$3FF,d0
   14643/    C16E : 0C40 016A           		cmpi.w	#$16A,d0
   14644/    C172 : 6514                		bcs.s	loc_C09E
   14645/    C174 : 3028 0030           		move.w	$30(a0),d0
   14646/    C178 : E640                		asr.w	#3,d0
   14647/    C17A : 3140 0010           		move.w	d0,$10(a0)
   14648/    C17E : 117C 0001 0032      		move.b	#1,$32(a0)
   14649/    C184 : 4268 000E           		clr.w	$E(a0)
   14650/    C188 :                     
   14651/    C188 :                     loc_C09E:
   14652/    C188 : 6046                		bra.s	loc_C0E6
   14653/    C18A :                     ; ===========================================================================
   14654/    C18A :                     
   14655/    C18A :                     loc_C0A0:
   14656/    C18A : 4A68 0010           		tst.w	$10(a0)
   14657/    C18E : 6700 0030           		beq.w	loc_C0D6
   14658/    C192 : 6B12                		bmi.s	loc_C0BC
   14659/    C194 : 7600                		moveq	#0,d3
   14660/    C196 : 1628 0019           		move.b	$19(a0),d3
   14661/    C19A : 4EB9 0001 5156      		jsr	(ObjHitWallRight).l
   14662/    C1A0 : 4A41                		tst.w	d1		; has block touched a wall?
   14663/    C1A2 : 6B16                		bmi.s	Obj33_StopPush	; if yes, branch
   14664/    C1A4 : 602A                		bra.s	loc_C0E6
   14665/    C1A6 :                     ; ===========================================================================
   14666/    C1A6 :                     
   14667/    C1A6 :                     loc_C0BC:
   14668/    C1A6 : 7600                		moveq	#0,d3
   14669/    C1A8 : 1628 0019           		move.b	$19(a0),d3
   14670/    C1AC : 4643                		not.w	d3
   14671/    C1AE : 4EB9 0001 52E8      		jsr	(ObjHitWallLeft).l
   14672/    C1B4 : 4A41                		tst.w	d1		; has block touched a wall?
   14673/    C1B6 : 6B02                		bmi.s	Obj33_StopPush	; if yes, branch
   14674/    C1B8 : 6016                		bra.s	loc_C0E6
   14675/    C1BA :                     ; ===========================================================================
   14676/    C1BA :                     
   14677/    C1BA :                     Obj33_StopPush:
   14678/    C1BA : 4268 0010           		clr.w	$10(a0)		; stop block moving
   14679/    C1BE : 6010                		bra.s	loc_C0E6
   14680/    C1C0 :                     ; ===========================================================================
   14681/    C1C0 :                     
   14682/    C1C0 :                     loc_C0D6:
   14683/    C1C0 : 06A8 0000 2001 000C 		addi.l	#$2001,$C(a0)
   14684/    C1C8 : 0C28 00A0 000F      		cmpi.b	#-$60,$F(a0)
   14685/    C1CE : 641E                		bcc.s	loc_C104
   14686/    C1D0 :                     
   14687/    C1D0 :                     loc_C0E6:
   14688/    C1D0 : 7200                		moveq	#0,d1
   14689/    C1D2 : 1228 0019           		move.b	$19(a0),d1
   14690/    C1D6 : 0641 000B           		addi.w	#$B,d1
   14691/    C1DA : 343C 0010           		move.w	#$10,d2
   14692/    C1DE : 363C 0011           		move.w	#$11,d3
   14693/    C1E2 : 381F                		move.w	(sp)+,d4
   14694/    C1E4 : 6100 008A           		bsr.w	loc_C186
   14695/    C1E8 : 611A                		bsr.s	Obj33_ChkLava
   14696/    C1EA : 6000 FEC4           		bra.w	loc_BFC6
   14697/    C1EE :                     ; ===========================================================================
   14698/    C1EE :                     
   14699/    C1EE :                     loc_C104:
   14700/    C1EE : 381F                		move.w	(sp)+,d4
   14701/    C1F0 : 43F8 D000           		lea	($FFFFD000).w,a1
   14702/    C1F4 : 08A9 0003 0022      		bclr	#3,$22(a1)
   14703/    C1FA : 08A8 0003 0022      		bclr	#3,$22(a0)
   14704/    C200 : 6000 FECE           		bra.w	loc_BFE6
   14705/    C204 :                     ; ===========================================================================
   14706/    C204 :                     
   14707/    C204 :                     Obj33_ChkLava:
   14708/    C204 : 0C78 0201 FE10      		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
   14709/    C20A : 661E                		bne.s	Obj33_ChkLava2	; if not, branch
   14710/    C20C : 343C FFE0           		move.w	#-$20,d2
   14711/    C210 : 0C68 0DD0 0008      		cmpi.w	#$DD0,8(a0)
   14712/    C216 : 6730                		beq.s	Obj33_LoadLava
   14713/    C218 : 0C68 0CC0 0008      		cmpi.w	#$CC0,8(a0)
   14714/    C21E : 6728                		beq.s	Obj33_LoadLava
   14715/    C220 : 0C68 0BA0 0008      		cmpi.w	#$BA0,8(a0)
   14716/    C226 : 6720                		beq.s	Obj33_LoadLava
   14717/    C228 : 4E75                		rts	
   14718/    C22A :                     ; ===========================================================================
   14719/    C22A :                     
   14720/    C22A :                     Obj33_ChkLava2:
   14721/    C22A : 0C78 0202 FE10      		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
   14722/    C230 : 6614                		bne.s	Obj33_NoLava	; if not, branch
   14723/    C232 : 343C 0020           		move.w	#$20,d2
   14724/    C236 : 0C68 0560 0008      		cmpi.w	#$560,8(a0)
   14725/    C23C : 670A                		beq.s	Obj33_LoadLava
   14726/    C23E : 0C68 05C0 0008      		cmpi.w	#$5C0,8(a0)
   14727/    C244 : 6702                		beq.s	Obj33_LoadLava
   14728/    C246 :                     
   14729/    C246 :                     Obj33_NoLava:
   14730/    C246 : 4E75                		rts	
   14731/    C248 :                     ; ===========================================================================
   14732/    C248 :                     
   14733/    C248 :                     Obj33_LoadLava:
   14734/    C248 : 6100 194C           		bsr.w	SingleObjLoad
   14735/    C24C : 6620                		bne.s	locret_C184
   14736/    C24E : (MACRO)             		_move.b	#$4C,0(a1)	; load lava geyser object
   14736/    C24E :  (MACRO-2)                          insn2op move.b, #$4C,0(a1)
   14736/    C24E : 137C 004C 0001                              !move.b   #$4C,1+0(a1)
   14736/    C253 :                                             !org    *-1
   14736/    C253 : 00                                          !dc.b   0
   14737/    C254 : 3368 0008 0008      		move.w	8(a0),8(a1)
   14738/    C25A : D569 0008           		add.w	d2,8(a1)
   14739/    C25E : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   14740/    C264 : 0669 0010 000C      		addi.w	#$10,$C(a1)
   14741/    C26A : 2348 003C           		move.l	a0,$3C(a1)
   14742/    C26E :                     
   14743/    C26E :                     locret_C184:
   14744/    C26E : 4E75                		rts	
   14745/    C270 :                     ; ===========================================================================
   14746/    C270 :                     
   14747/    C270 :                     loc_C186:				; XREF: loc_BF6E
   14748/    C270 : 1028 0025           		move.b	$25(a0),d0
   14749/    C274 : 6700 008C           		beq.w	loc_C218
   14750/    C278 : 5500                		subq.b	#2,d0
   14751/    C27A : 6618                		bne.s	loc_C1AA
   14752/    C27C : 6100 B34E           		bsr.w	ExitPlatform
   14753/    C280 : 0829 0003 0022      		btst	#3,$22(a1)
   14754/    C286 : 6606                		bne.s	loc_C1A4
   14755/    C288 : 4228 0025           		clr.b	$25(a0)
   14756/    C28C : 4E75                		rts	
   14757/    C28E :                     ; ===========================================================================
   14758/    C28E :                     
   14759/    C28E :                     loc_C1A4:
   14760/    C28E : 3404                		move.w	d4,d2
   14761/    C290 : 6000 B89C           		bra.w	MvSonicOnPtfm
   14762/    C294 :                     ; ===========================================================================
   14763/    C294 :                     
   14764/    C294 :                     loc_C1AA:
   14765/    C294 : 5500                		subq.b	#2,d0
   14766/    C296 : 6644                		bne.s	loc_C1F2
   14767/    C298 : 6100 144E           		bsr.w	SpeedToPos
   14768/    C29C : 0668 0018 0012      		addi.w	#$18,$12(a0)
   14769/    C2A2 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   14770/    C2A8 : 4A41                		tst.w	d1
   14771/    C2AA : 6A00 002E           		bpl.w	locret_C1F0
   14772/    C2AE : D368 000C           		add.w	d1,$C(a0)
   14773/    C2B2 : 4268 0012           		clr.w	$12(a0)
   14774/    C2B6 : 4228 0025           		clr.b	$25(a0)
   14775/    C2BA : 3011                		move.w	(a1),d0
   14776/    C2BC : 0240 03FF           		andi.w	#$3FF,d0
   14777/    C2C0 : 0C40 016A           		cmpi.w	#$16A,d0
   14778/    C2C4 : 6514                		bcs.s	locret_C1F0
   14779/    C2C6 : 3028 0030           		move.w	$30(a0),d0
   14780/    C2CA : E640                		asr.w	#3,d0
   14781/    C2CC : 3140 0010           		move.w	d0,$10(a0)
   14782/    C2D0 : 117C 0001 0032      		move.b	#1,$32(a0)
   14783/    C2D6 : 4268 000E           		clr.w	$E(a0)
   14784/    C2DA :                     
   14785/    C2DA :                     locret_C1F0:
   14786/    C2DA : 4E75                		rts	
   14787/    C2DC :                     ; ===========================================================================
   14788/    C2DC :                     
   14789/    C2DC :                     loc_C1F2:
   14790/    C2DC : 6100 140A           		bsr.w	SpeedToPos
   14791/    C2E0 : 3028 0008           		move.w	8(a0),d0
   14792/    C2E4 : 0240 000C           		andi.w	#$C,d0
   14793/    C2E8 : 6600 00E4           		bne.w	locret_C2E4
   14794/    C2EC : 0268 FFF0 0008      		andi.w	#-$10,8(a0)
   14795/    C2F2 : 3168 0010 0030      		move.w	$10(a0),$30(a0)
   14796/    C2F8 : 4268 0010           		clr.w	$10(a0)
   14797/    C2FC : 5528 0025           		subq.b	#2,$25(a0)
   14798/    C300 : 4E75                		rts	
   14799/    C302 :                     ; ===========================================================================
   14800/    C302 :                     
   14801/    C302 :                     loc_C218:
   14802/    C302 : 6100 38D4           		bsr.w	loc_FAC8
   14803/    C306 : 4A44                		tst.w	d4
   14804/    C308 : 6700 00C4           		beq.w	locret_C2E4
   14805/    C30C : 6B00 00C0           		bmi.w	locret_C2E4
   14806/    C310 : 4A28 0032           		tst.b	$32(a0)
   14807/    C314 : 6704                		beq.s	loc_C230
   14808/    C316 : 6000 00B6           		bra.w	locret_C2E4
   14809/    C31A :                     ; ===========================================================================
   14810/    C31A :                     
   14811/    C31A :                     loc_C230:
   14812/    C31A : 4A40                		tst.w	d0
   14813/    C31C : 6700 00B0           		beq.w	locret_C2E4
   14814/    C320 : 6B30                		bmi.s	loc_C268
   14815/    C322 : 0829 0000 0022      		btst	#0,$22(a1)
   14816/    C328 : 6600 00A4           		bne.w	locret_C2E4
   14817/    C32C : 3F00                		move.w	d0,-(sp)
   14818/    C32E : 7600                		moveq	#0,d3
   14819/    C330 : 1628 0019           		move.b	$19(a0),d3
   14820/    C334 : 4EB9 0001 5156      		jsr	(ObjHitWallRight).l
   14821/    C33A : 301F                		move.w	(sp)+,d0
   14822/    C33C : 4A41                		tst.w	d1
   14823/    C33E : 6B00 008E           		bmi.w	locret_C2E4
   14824/    C342 : 06A8 0001 0000 0008 		addi.l	#$10000,8(a0)
   14825/    C34A : 7001                		moveq	#1,d0
   14826/    C34C : 323C 0040           		move.w	#$40,d1
   14827/    C350 : 602C                		bra.s	loc_C294
   14828/    C352 :                     ; ===========================================================================
   14829/    C352 :                     
   14830/    C352 :                     loc_C268:
   14831/    C352 : 0829 0000 0022      		btst	#0,$22(a1)
   14832/    C358 : 6774                		beq.s	locret_C2E4
   14833/    C35A : 3F00                		move.w	d0,-(sp)
   14834/    C35C : 7600                		moveq	#0,d3
   14835/    C35E : 1628 0019           		move.b	$19(a0),d3
   14836/    C362 : 4643                		not.w	d3
   14837/    C364 : 4EB9 0001 52E8      		jsr	(ObjHitWallLeft).l
   14838/    C36A : 301F                		move.w	(sp)+,d0
   14839/    C36C : 4A41                		tst.w	d1
   14840/    C36E : 6B5E                		bmi.s	locret_C2E4
   14841/    C370 : 04A8 0001 0000 0008 		subi.l	#$10000,8(a0)
   14842/    C378 : 70FF                		moveq	#-1,d0
   14843/    C37A : 323C FFC0           		move.w	#-$40,d1
   14844/    C37E :                     
   14845/    C37E :                     loc_C294:
   14846/    C37E : 43F8 D000           		lea	($FFFFD000).w,a1
   14847/    C382 : D169 0008           		add.w	d0,8(a1)
   14848/    C386 : 3341 0014           		move.w	d1,$14(a1)
   14849/    C38A : 337C 0000 0010      		move.w	#0,$10(a1)
   14850/    C390 : 3F00                		move.w	d0,-(sp)
   14851/    C392 : 303C 00A7           		move.w	#$A7,d0
   14852/    C396 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play pushing sound
   14853/    C39C : 301F                		move.w	(sp)+,d0
   14854/    C39E : 4A28 0028           		tst.b	$28(a0)
   14855/    C3A2 : 6B2A                		bmi.s	locret_C2E4
   14856/    C3A4 : 3F00                		move.w	d0,-(sp)
   14857/    C3A6 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   14858/    C3AC : 301F                		move.w	(sp)+,d0
   14859/    C3AE : 0C41 0004           		cmpi.w	#4,d1
   14860/    C3B2 : 6F16                		ble.s	loc_C2E0
   14861/    C3B4 : 317C 0400 0010      		move.w	#$400,$10(a0)
   14862/    C3BA : 4A40                		tst.w	d0
   14863/    C3BC : 6A04                		bpl.s	loc_C2D8
   14864/    C3BE : 4468 0010           		neg.w	$10(a0)
   14865/    C3C2 :                     
   14866/    C3C2 :                     loc_C2D8:
   14867/    C3C2 : 117C 0006 0025      		move.b	#6,$25(a0)
   14868/    C3C8 : 6004                		bra.s	locret_C2E4
   14869/    C3CA :                     ; ===========================================================================
   14870/    C3CA :                     
   14871/    C3CA :                     loc_C2E0:
   14872/    C3CA : D368 000C           		add.w	d1,$C(a0)
   14873/    C3CE :                     
   14874/    C3CE :                     locret_C2E4:
   14875/    C3CE : 4E75                		rts	
   14876/    C3D0 :                     ; ===========================================================================
   14877/    C3D0 :                     ; ---------------------------------------------------------------------------
   14878/    C3D0 :                     ; Sprite mappings - pushable blocks (MZ, LZ)
   14879/    C3D0 :                     ; ---------------------------------------------------------------------------
   14880/    C3D0 :                     Map_obj33:
   14881/    C3D0 :                     		include	"_maps/obj33.asm"
(1)    1/    C3D0 :                     ; ---------------------------------------------------------------------------
(1)    2/    C3D0 :                     ; Sprite mappings - pushable blocks (MZ, LZ)
(1)    3/    C3D0 :                     ; ---------------------------------------------------------------------------
(1)    4/    C3D0 : 0004                		dc.w byte_C2EA-Map_obj33
(1)    5/    C3D2 : 000A                		dc.w byte_C2F0-Map_obj33
(1)    6/    C3D4 : 01                  byte_C2EA:	dc.b 1
(1)    7/    C3D5 : F00F 0008 F0        		dc.b $F0, $F, 0, 8, $F0	; single block
(1)    8/    C3DA : 04                  byte_C2F0:	dc.b 4
(1)    9/    C3DB : F00F 0008 C0        		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
(1)   10/    C3E0 : F00F 0008 E0        		dc.b $F0, $F, 0, 8, $E0
(1)   11/    C3E5 : F00F 0008 00        		dc.b $F0, $F, 0, 8, 0
(1)   12/    C3EA : F00F 0008 20        		dc.b $F0, $F, 0, 8, $20
(1)   13/    C3EF : (MACRO)             		align 2
(1)   13/    C3EF :  (MACRO-2)                  cnop 0,2
(1)   13/    C3EF :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   13/    C3EF : =$14                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   13/    C3F0 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   14882/    C3F0 :                     
   14883/    C3F0 :                     ; ===========================================================================
   14884/    C3F0 :                     ; ---------------------------------------------------------------------------
   14885/    C3F0 :                     ; Object 34 - zone title cards
   14886/    C3F0 :                     ; ---------------------------------------------------------------------------
   14887/    C3F0 :                     
   14888/    C3F0 :                     Obj34:					; XREF: Obj_Index
   14889/    C3F0 : 7000                		moveq	#0,d0
   14890/    C3F2 : 1028 0024           		move.b	$24(a0),d0
   14891/    C3F6 : 323B 0006           		move.w	Obj34_Index(pc,d0.w),d1
   14892/    C3FA : 4EFB 1002           		jmp	Obj34_Index(pc,d1.w)
   14893/    C3FE :                     ; ===========================================================================
   14894/    C3FE : 0008                Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
   14895/    C400 : 00A0                		dc.w Obj34_ChkPos-Obj34_Index
   14896/    C402 : 00C6                		dc.w Obj34_Wait-Obj34_Index
   14897/    C404 : 00C6                		dc.w Obj34_Wait-Obj34_Index
   14898/    C406 :                     ; ===========================================================================
   14899/    C406 :                     
   14900/    C406 :                     Obj34_CheckSBZ3:			; XREF: Obj34_Index
   14901/    C406 : 2248                		movea.l	a0,a1
   14902/    C408 : 7000                		moveq	#0,d0
   14903/    C40A : 1038 FE10           		move.b	($FFFFFE10).w,d0
   14904/    C40E : 0C78 0103 FE10      		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
   14905/    C414 : 6602                		bne.s	Obj34_CheckFZ
   14906/    C416 : 7005                		moveq	#5,d0		; load title card number 5 (SBZ)
   14907/    C418 :                     
   14908/    C418 :                     Obj34_CheckFZ:
   14909/    C418 : 3400                		move.w	d0,d2
   14910/    C41A : 0C78 0502 FE10      		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
   14911/    C420 : 6604                		bne.s	Obj34_LoadConfig
   14912/    C422 : 7006                		moveq	#6,d0		; load title card number 6 (FZ)
   14913/    C424 : 740B                		moveq	#$B,d2		; use "FINAL" mappings
   14914/    C426 :                     
   14915/    C426 :                     Obj34_LoadConfig:
   14916/    C426 : 47F9 0000 C532      		lea	(Obj34_ConData).l,a3
   14917/    C42C : E948                		lsl.w	#4,d0
   14918/    C42E : D6C0                		adda.w	d0,a3
   14919/    C430 : 45F9 0000 C522      		lea	(Obj34_ItemData).l,a2
   14920/    C436 : 7203                		moveq	#3,d1
   14921/    C438 :                     
   14922/    C438 :                     Obj34_Loop:
   14923/    C438 : (MACRO)             		_move.b	#$34,0(a1)
   14923/    C438 :  (MACRO-2)                          insn2op move.b, #$34,0(a1)
   14923/    C438 : 137C 0034 0001                              !move.b   #$34,1+0(a1)
   14923/    C43D :                                             !org    *-1
   14923/    C43D : 00                                          !dc.b   0
   14924/    C43E : 3353 0008           		move.w	(a3),8(a1)	; load start x-position
   14925/    C442 : 335B 0032           		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
   14926/    C446 : 335B 0030           		move.w	(a3)+,$30(a1)	; load main x-position
   14927/    C44A : 335A 000A           		move.w	(a2)+,$A(a1)
   14928/    C44E : 135A 0024           		move.b	(a2)+,$24(a1)
   14929/    C452 : 101A                		move.b	(a2)+,d0
   14930/    C454 : 6602                		bne.s	Obj34_ActNumber
   14931/    C456 : 1002                		move.b	d2,d0
   14932/    C458 :                     
   14933/    C458 :                     Obj34_ActNumber:
   14934/    C458 : 0C00 0007           		cmpi.b	#7,d0
   14935/    C45C : 660E                		bne.s	Obj34_MakeSprite
   14936/    C45E : D038 FE11           		add.b	($FFFFFE11).w,d0
   14937/    C462 : 0C38 0003 FE11      		cmpi.b	#3,($FFFFFE11).w
   14938/    C468 : 6602                		bne.s	Obj34_MakeSprite
   14939/    C46A : 5300                		subq.b	#1,d0
   14940/    C46C :                     
   14941/    C46C :                     Obj34_MakeSprite:
   14942/    C46C : 1340 001A           		move.b	d0,$1A(a1)	; display frame	number d0
   14943/    C470 : 237C 0000 CAD0 0004 		move.l	#Map_obj34,4(a1)
   14944/    C478 : 337C 8580 0002      		move.w	#$8580,2(a1)
   14945/    C47E : 137C 0078 0019      		move.b	#$78,$19(a1)
   14946/    C484 : 137C 0000 0001      		move.b	#0,1(a1)
   14947/    C48A : 137C 0000 0018      		move.b	#0,$18(a1)
   14948/    C490 : 337C 003C 001E      		move.w	#60,$1E(a1)	; set time delay to 1 second
   14949/    C496 : 43E9 0040           		lea	$40(a1),a1	; next object
   14950/    C49A : 51C9 FF9C           		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
   14951/    C49E :                     
   14952/    C49E :                     Obj34_ChkPos:				; XREF: Obj34_Index
   14953/    C49E : 7210                		moveq	#$10,d1		; set horizontal speed
   14954/    C4A0 : 3028 0030           		move.w	$30(a0),d0
   14955/    C4A4 : B068 0008           		cmp.w	8(a0),d0	; has item reached the target position?
   14956/    C4A8 : 6708                		beq.s	loc_C3C8	; if yes, branch
   14957/    C4AA : 6C02                		bge.s	Obj34_Move
   14958/    C4AC : 4441                		neg.w	d1
   14959/    C4AE :                     
   14960/    C4AE :                     Obj34_Move:
   14961/    C4AE : D368 0008           		add.w	d1,8(a0)	; change item"s position
   14962/    C4B2 :                     
   14963/    C4B2 :                     loc_C3C8:
   14964/    C4B2 : 3028 0008           		move.w	8(a0),d0
   14965/    C4B6 : 6B0A                		bmi.s	locret_C3D8
   14966/    C4B8 : 0C40 0200           		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
   14967/    C4BC : 6404                		bcc.s	locret_C3D8	; if yes, branch
   14968/    C4BE : 6000 124E           		bra.w	DisplaySprite
   14969/    C4C2 :                     ; ===========================================================================
   14970/    C4C2 :                     
   14971/    C4C2 :                     locret_C3D8:
   14972/    C4C2 : 4E75                		rts	
   14973/    C4C4 :                     ; ===========================================================================
   14974/    C4C4 :                     
   14975/    C4C4 :                     Obj34_Wait:				; XREF: Obj34_Index
   14976/    C4C4 : 4A68 001E           		tst.w	$1E(a0)		; is time remaining zero?
   14977/    C4C8 : 6708                		beq.s	Obj34_ChkPos2	; if yes, branch
   14978/    C4CA : 5368 001E           		subq.w	#1,$1E(a0)	; subtract 1 from time
   14979/    C4CE : 6000 123E           		bra.w	DisplaySprite
   14980/    C4D2 :                     ; ===========================================================================
   14981/    C4D2 :                     
   14982/    C4D2 :                     Obj34_ChkPos2:				; XREF: Obj34_Wait
   14983/    C4D2 : 4A28 0001           		tst.b	1(a0)
   14984/    C4D6 : 6A26                		bpl.s	Obj34_ChangeArt
   14985/    C4D8 : 7220                		moveq	#$20,d1
   14986/    C4DA : 3028 0032           		move.w	$32(a0),d0
   14987/    C4DE : B068 0008           		cmp.w	8(a0),d0	; has item reached the finish position?
   14988/    C4E2 : 671A                		beq.s	Obj34_ChangeArt	; if yes, branch
   14989/    C4E4 : 6C02                		bge.s	Obj34_Move2
   14990/    C4E6 : 4441                		neg.w	d1
   14991/    C4E8 :                     
   14992/    C4E8 :                     Obj34_Move2:
   14993/    C4E8 : D368 0008           		add.w	d1,8(a0)	; change item"s position
   14994/    C4EC : 3028 0008           		move.w	8(a0),d0
   14995/    C4F0 : 6B0A                		bmi.s	locret_C412
   14996/    C4F2 : 0C40 0200           		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
   14997/    C4F6 : 6404                		bcc.s	locret_C412	; if yes, branch
   14998/    C4F8 : 6000 1214           		bra.w	DisplaySprite
   14999/    C4FC :                     ; ===========================================================================
   15000/    C4FC :                     
   15001/    C4FC :                     locret_C412:
   15002/    C4FC : 4E75                		rts	
   15003/    C4FE :                     ; ===========================================================================
   15004/    C4FE :                     
   15005/    C4FE :                     Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
   15006/    C4FE : 0C28 0004 0024      		cmpi.b	#4,$24(a0)
   15007/    C504 : 6618                		bne.s	Obj34_Delete
   15008/    C506 : 7002                		moveq	#2,d0
   15009/    C508 : 4EB9 0000 1580      		jsr	(LoadPLC).l	; load explosion patterns
   15010/    C50E : 7000                		moveq	#0,d0
   15011/    C510 : 1038 FE10           		move.b	($FFFFFE10).w,d0
   15012/    C514 : 0640 0015           		addi.w	#$15,d0
   15013/    C518 : 4EB9 0000 1580      		jsr	(LoadPLC).l	; load animal patterns
   15014/    C51E :                     
   15015/    C51E :                     Obj34_Delete:
   15016/    C51E : 6000 122A           		bra.w	DeleteObject
   15017/    C522 :                     ; ===========================================================================
   15018/    C522 : 00D0                Obj34_ItemData:	dc.w $D0	; y-axis position
   15019/    C524 : 0200                		dc.b 2,	0	; routine number, frame	number (changes)
   15020/    C526 : 00E4                		dc.w $E4
   15021/    C528 : 0206                		dc.b 2,	6
   15022/    C52A : 00EA                		dc.w $EA
   15023/    C52C : 0207                		dc.b 2,	7
   15024/    C52E : 00E0                		dc.w $E0
   15025/    C530 : 020A                		dc.b 2,	$A
   15026/    C532 :                     ; ---------------------------------------------------------------------------
   15027/    C532 :                     ; Title	card configuration data
   15028/    C532 :                     ; Format:
   15029/    C532 :                     ; 4 bytes per item (YYYY XXXX)
   15030/    C532 :                     ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
   15031/    C532 :                     ; ---------------------------------------------------------------------------
   15032/    C532 : 0000 0120 FEFC 013C Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
                    0414 0154 0214 0154 
   15033/    C542 : 0000 0120 FEF4 0134 		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
                    040C 014C 020C 014C 
   15034/    C552 : 0000 0120 FEE0 0120 		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
                    03F8 0138 01F8 0138 
   15035/    C562 : 0000 0120 FEFC 013C 		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
                    0414 0154 0214 0154 
   15036/    C572 : 0000 0120 FF04 0144 		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
                    041C 015C 021C 015C 
   15037/    C582 : 0000 0120 FF04 0144 		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
                    041C 015C 021C 015C 
   15038/    C592 : 0000 0120 FEE4 0124 		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
                    03EC 03EC 01EC 012C 
   15039/    C5A2 :                     ; ===========================================================================
   15040/    C5A2 :                     ; ---------------------------------------------------------------------------
   15041/    C5A2 :                     ; Object 39 - "GAME OVER" and "TIME OVER"
   15042/    C5A2 :                     ; ---------------------------------------------------------------------------
   15043/    C5A2 :                     
   15044/    C5A2 :                     Obj39:					; XREF: Obj_Index
   15045/    C5A2 : 7000                		moveq	#0,d0
   15046/    C5A4 : 1028 0024           		move.b	$24(a0),d0
   15047/    C5A8 : 323B 0006           		move.w	Obj39_Index(pc,d0.w),d1
   15048/    C5AC : 4EFB 1002           		jmp	Obj39_Index(pc,d1.w)
   15049/    C5B0 :                     ; ===========================================================================
   15050/    C5B0 : 0006                Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
   15051/    C5B2 : 0046                		dc.w loc_C50C-Obj39_Index
   15052/    C5B4 : 0068                		dc.w Obj39_Wait-Obj39_Index
   15053/    C5B6 :                     ; ===========================================================================
   15054/    C5B6 :                     
   15055/    C5B6 :                     Obj39_ChkPLC:				; XREF: Obj39_Index
   15056/    C5B6 : 4AB8 F680           		tst.l	($FFFFF680).w	; are the pattern load cues empty?
   15057/    C5BA : 6702                		beq.s	Obj39_Main	; if yes, branch
   15058/    C5BC : 4E75                		rts	
   15059/    C5BE :                     ; ===========================================================================
   15060/    C5BE :                     
   15061/    C5BE :                     Obj39_Main:
   15062/    C5BE : 5428 0024           		addq.b	#2,$24(a0)
   15063/    C5C2 : 317C 0050 0008      		move.w	#$50,8(a0)	; set x-position
   15064/    C5C8 : 0828 0000 001A      		btst	#0,$1A(a0)	; is the object	"OVER"?
   15065/    C5CE : 6706                		beq.s	loc_C4EC	; if not, branch
   15066/    C5D0 : 317C 01F0 0008      		move.w	#$1F0,8(a0)	; set x-position for "OVER"
   15067/    C5D6 :                     
   15068/    C5D6 :                     loc_C4EC:
   15069/    C5D6 : 317C 00F0 000A      		move.w	#$F0,$A(a0)
   15070/    C5DC : 217C 0000 CCA8 0004 		move.l	#Map_obj39,4(a0)
   15071/    C5E4 : 317C 855E 0002      		move.w	#$855E,2(a0)
   15072/    C5EA : 117C 0000 0001      		move.b	#0,1(a0)
   15073/    C5F0 : 117C 0000 0018      		move.b	#0,$18(a0)
   15074/    C5F6 :                     
   15075/    C5F6 :                     loc_C50C:				; XREF: Obj39_Index
   15076/    C5F6 : 7210                		moveq	#$10,d1		; set horizontal speed
   15077/    C5F8 : 0C68 0120 0008      		cmpi.w	#$120,8(a0)	; has item reached its target position?
   15078/    C5FE : 670C                		beq.s	Obj39_SetWait	; if yes, branch
   15079/    C600 : 6502                		bcs.s	Obj39_Move
   15080/    C602 : 4441                		neg.w	d1
   15081/    C604 :                     
   15082/    C604 :                     Obj39_Move:
   15083/    C604 : D368 0008           		add.w	d1,8(a0)	; change item"s position
   15084/    C608 : 6000 1104           		bra.w	DisplaySprite
   15085/    C60C :                     ; ===========================================================================
   15086/    C60C :                     
   15087/    C60C :                     Obj39_SetWait:				; XREF: Obj39_Main
   15088/    C60C : 317C 02D0 001E      		move.w	#720,$1E(a0)	; set time delay to 12 seconds
   15089/    C612 : 5428 0024           		addq.b	#2,$24(a0)
   15090/    C616 : 4E75                		rts	
   15091/    C618 :                     ; ===========================================================================
   15092/    C618 :                     
   15093/    C618 :                     Obj39_Wait:				; XREF: Obj39_Index
   15094/    C618 : 1038 F605           		move.b	($FFFFF605).w,d0
   15095/    C61C : 0200 0070           		andi.b	#$70,d0		; is button A, B or C pressed?
   15096/    C620 : 6616                		bne.s	Obj39_ChgMode	; if yes, branch
   15097/    C622 : 0828 0000 001A      		btst	#0,$1A(a0)
   15098/    C628 : 662E                		bne.s	Obj39_Display
   15099/    C62A : 4A68 001E           		tst.w	$1E(a0)		; has time delay reached zero?
   15100/    C62E : 6708                		beq.s	Obj39_ChgMode	; if yes, branch
   15101/    C630 : 5368 001E           		subq.w	#1,$1E(a0)	; subtract 1 from time delay
   15102/    C634 : 6000 10D8           		bra.w	DisplaySprite
   15103/    C638 :                     ; ===========================================================================
   15104/    C638 :                     
   15105/    C638 :                     Obj39_ChgMode:				; XREF: Obj39_Wait
   15106/    C638 : 4A38 FE1A           		tst.b	($FFFFFE1A).w	; is time over flag set?
   15107/    C63C : 6614                		bne.s	Obj39_ResetLvl	; if yes, branch
   15108/    C63E : 11FC 0014 F600      		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
   15109/    C644 : 4A38 FE18           		tst.b	($FFFFFE18).w	; do you have any continues?
   15110/    C648 : 660E                		bne.s	Obj39_Display	; if yes, branch
   15111/    C64A : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
   15112/    C650 : 6006                		bra.s	Obj39_Display
   15113/    C652 :                     ; ===========================================================================
   15114/    C652 :                     
   15115/    C652 :                     Obj39_ResetLvl:				; XREF: Obj39_ChgMode
   15116/    C652 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart level
   15117/    C658 :                     
   15118/    C658 :                     Obj39_Display:				; XREF: Obj39_ChgMode
   15119/    C658 : 6000 10B4           		bra.w	DisplaySprite
   15120/    C65C :                     ; ===========================================================================
   15121/    C65C :                     ; ---------------------------------------------------------------------------
   15122/    C65C :                     ; Object 3A - "SONIC GOT THROUGH" title	card
   15123/    C65C :                     ; ---------------------------------------------------------------------------
   15124/    C65C :                     
   15125/    C65C :                     Obj3A:					; XREF: Obj_Index
   15126/    C65C : 7000                		moveq	#0,d0
   15127/    C65E : 1028 0024           		move.b	$24(a0),d0
   15128/    C662 : 323B 0006           		move.w	Obj3A_Index(pc,d0.w),d1
   15129/    C666 : 4EFB 1002           		jmp	Obj3A_Index(pc,d1.w)
   15130/    C66A :                     ; ===========================================================================
   15131/    C66A : 0012                Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
   15132/    C66C : 006A                		dc.w Obj3A_ChkPos-Obj3A_Index
   15133/    C66E : 00B4                		dc.w Obj3A_Wait-Obj3A_Index
   15134/    C670 : 00C2                		dc.w Obj3A_TimeBonus-Obj3A_Index
   15135/    C672 : 00B4                		dc.w Obj3A_Wait-Obj3A_Index
   15136/    C674 : 012E                		dc.w Obj3A_NextLevel-Obj3A_Index
   15137/    C676 : 00B4                		dc.w Obj3A_Wait-Obj3A_Index
   15138/    C678 : 01A4                		dc.w Obj3A_ChkPos2-Obj3A_Index
   15139/    C67A : 01E6                		dc.w loc_C766-Obj3A_Index
   15140/    C67C :                     ; ===========================================================================
   15141/    C67C :                     
   15142/    C67C :                     Obj3A_ChkPLC:				; XREF: Obj3A_Index
   15143/    C67C : 4AB8 F680           		tst.l	($FFFFF680).w	; are the pattern load cues empty?
   15144/    C680 : 6702                		beq.s	Obj3A_Main	; if yes, branch
   15145/    C682 : 4E75                		rts	
   15146/    C684 :                     ; ===========================================================================
   15147/    C684 :                     
   15148/    C684 :                     Obj3A_Main:
   15149/    C684 : 2248                		movea.l	a0,a1
   15150/    C686 : 45F9 0000 C860      		lea	(Obj3A_Config).l,a2
   15151/    C68C : 7206                		moveq	#6,d1
   15152/    C68E :                     
   15153/    C68E :                     Obj3A_Loop:
   15154/    C68E : (MACRO)             		_move.b	#$3A,0(a1)
   15154/    C68E :  (MACRO-2)                          insn2op move.b, #$3A,0(a1)
   15154/    C68E : 137C 003A 0001                              !move.b   #$3A,1+0(a1)
   15154/    C693 :                                             !org    *-1
   15154/    C693 : 00                                          !dc.b   0
   15155/    C694 : 3352 0008           		move.w	(a2),8(a1)	; load start x-position
   15156/    C698 : 335A 0032           		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
   15157/    C69C : 335A 0030           		move.w	(a2)+,$30(a1)	; load main x-position
   15158/    C6A0 : 335A 000A           		move.w	(a2)+,$A(a1)	; load y-position
   15159/    C6A4 : 135A 0024           		move.b	(a2)+,$24(a1)
   15160/    C6A8 : 101A                		move.b	(a2)+,d0
   15161/    C6AA : 0C00 0006           		cmpi.b	#6,d0
   15162/    C6AE : 6604                		bne.s	loc_C5CA
   15163/    C6B0 : D038 FE11           		add.b	($FFFFFE11).w,d0 ; add act number to frame number
   15164/    C6B4 :                     
   15165/    C6B4 :                     loc_C5CA:
   15166/    C6B4 : 1340 001A           		move.b	d0,$1A(a1)
   15167/    C6B8 : 237C 0000 CCDC 0004 		move.l	#Map_obj3A,4(a1)
   15168/    C6C0 : 337C 8580 0002      		move.w	#$8580,2(a1)
   15169/    C6C6 : 137C 0000 0001      		move.b	#0,1(a1)
   15170/    C6CC : 43E9 0040           		lea	$40(a1),a1
   15171/    C6D0 : 51C9 FFBC           		dbf	d1,Obj3A_Loop	; repeat 6 times
   15172/    C6D4 :                     
   15173/    C6D4 :                     Obj3A_ChkPos:				; XREF: Obj3A_Index
   15174/    C6D4 : 7210                		moveq	#$10,d1		; set horizontal speed
   15175/    C6D6 : 3028 0030           		move.w	$30(a0),d0
   15176/    C6DA : B068 0008           		cmp.w	8(a0),d0	; has item reached its target position?
   15177/    C6DE : 6724                		beq.s	loc_C61A	; if yes, branch
   15178/    C6E0 : 6C02                		bge.s	Obj3A_Move
   15179/    C6E2 : 4441                		neg.w	d1
   15180/    C6E4 :                     
   15181/    C6E4 :                     Obj3A_Move:
   15182/    C6E4 : D368 0008           		add.w	d1,8(a0)	; change item"s position
   15183/    C6E8 :                     
   15184/    C6E8 :                     loc_C5FE:				; XREF: loc_C61A
   15185/    C6E8 : 3028 0008           		move.w	8(a0),d0
   15186/    C6EC : 6B0A                		bmi.s	locret_C60E
   15187/    C6EE : 0C40 0200           		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
   15188/    C6F2 : 6404                		bcc.s	locret_C60E	; if yes, branch
   15189/    C6F4 : 6000 1018           		bra.w	DisplaySprite
   15190/    C6F8 :                     ; ===========================================================================
   15191/    C6F8 :                     
   15192/    C6F8 :                     locret_C60E:
   15193/    C6F8 : 4E75                		rts	
   15194/    C6FA :                     ; ===========================================================================
   15195/    C6FA :                     
   15196/    C6FA :                     loc_C610:				; XREF: loc_C61A
   15197/    C6FA : 117C 000E 0024      		move.b	#$E,$24(a0)
   15198/    C700 : 6000 010C           		bra.w	Obj3A_ChkPos2
   15199/    C704 :                     ; ===========================================================================
   15200/    C704 :                     
   15201/    C704 :                     loc_C61A:				; XREF: Obj3A_ChkPos
   15202/    C704 : 0C38 000E D724      		cmpi.b	#$E,($FFFFD724).w
   15203/    C70A : 67EE                		beq.s	loc_C610
   15204/    C70C : 0C28 0004 001A      		cmpi.b	#4,$1A(a0)
   15205/    C712 : 66D4                		bne.s	loc_C5FE
   15206/    C714 : 5428 0024           		addq.b	#2,$24(a0)
   15207/    C718 : 317C 00B4 001E      		move.w	#180,$1E(a0)	; set time delay to 3 seconds
   15208/    C71E :                     
   15209/    C71E :                     Obj3A_Wait:				; XREF: Obj3A_Index
   15210/    C71E : 5368 001E           		subq.w	#1,$1E(a0)	; subtract 1 from time delay
   15211/    C722 : 6604                		bne.s	Obj3A_Display
   15212/    C724 : 5428 0024           		addq.b	#2,$24(a0)
   15213/    C728 :                     
   15214/    C728 :                     Obj3A_Display:
   15215/    C728 : 6000 0FE4           		bra.w	DisplaySprite
   15216/    C72C :                     ; ===========================================================================
   15217/    C72C :                     
   15218/    C72C :                     Obj3A_TimeBonus:			; XREF: Obj3A_Index
   15219/    C72C : 6100 0FE0           		bsr.w	DisplaySprite
   15220/    C730 : 11FC 0001 F7D6      		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
   15221/    C736 : 7000                		moveq	#0,d0
   15222/    C738 : 4A78 F7D2           		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
   15223/    C73C : 670A                		beq.s	Obj3A_RingBonus	; if yes, branch
   15224/    C73E : 0640 000A           		addi.w	#10,d0		; add 10 to score
   15225/    C742 : 0478 000A F7D2      		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
   15226/    C748 :                     
   15227/    C748 :                     Obj3A_RingBonus:
   15228/    C748 : 4A78 F7D4           		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
   15229/    C74C : 670A                		beq.s	Obj3A_ChkBonus	; if yes, branch
   15230/    C74E : 0640 000A           		addi.w	#10,d0		; add 10 to score
   15231/    C752 : 0478 000A F7D4      		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
   15232/    C758 :                     
   15233/    C758 :                     Obj3A_ChkBonus:
   15234/    C758 : 4A40                		tst.w	d0		; is there any bonus?
   15235/    C75A : 6622                		bne.s	Obj3A_AddBonus	; if yes, branch
   15236/    C75C : 303C 00C5           		move.w	#$C5,d0
   15237/    C760 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
   15238/    C766 : 5428 0024           		addq.b	#2,$24(a0)
   15239/    C76A : 0C78 0501 FE10      		cmpi.w	#$501,($FFFFFE10).w
   15240/    C770 : 6604                		bne.s	Obj3A_SetDelay
   15241/    C772 : 5828 0024           		addq.b	#4,$24(a0)
   15242/    C776 :                     
   15243/    C776 :                     Obj3A_SetDelay:
   15244/    C776 : 317C 00B4 001E      		move.w	#180,$1E(a0)	; set time delay to 3 seconds
   15245/    C77C :                     
   15246/    C77C :                     locret_C692:
   15247/    C77C : 4E75                		rts	
   15248/    C77E :                     ; ===========================================================================
   15249/    C77E :                     
   15250/    C77E :                     Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
   15251/    C77E : 4EB9 0001 C922      		jsr	(AddPoints).l
   15252/    C784 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   15253/    C788 : 0200 0003           		andi.b	#3,d0
   15254/    C78C : 66EE                		bne.s	locret_C692
   15255/    C78E : 303C 00CD           		move.w	#$CD,d0
   15256/    C792 : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play "blip" sound
   15257/    C798 :                     ; ===========================================================================
   15258/    C798 :                     
   15259/    C798 :                     Obj3A_NextLevel:			; XREF: Obj3A_Index
   15260/    C798 : 1038 FE10           		move.b	($FFFFFE10).w,d0
   15261/    C79C : 0240 0007           		andi.w	#7,d0
   15262/    C7A0 : E748                		lsl.w	#3,d0
   15263/    C7A2 : 1238 FE11           		move.b	($FFFFFE11).w,d1
   15264/    C7A6 : 0241 0003           		andi.w	#3,d1
   15265/    C7AA : D241                		add.w	d1,d1
   15266/    C7AC : D041                		add.w	d1,d0
   15267/    C7AE : 303B 002E           		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
   15268/    C7B2 : 31C0 FE10           		move.w	d0,($FFFFFE10).w ; set level number
   15269/    C7B6 : 4A40                		tst.w	d0
   15270/    C7B8 : 6608                		bne.s	Obj3A_ChkSS
   15271/    C7BA : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; set game mode to level (00)
   15272/    C7C0 : 6018                		bra.s	Obj3A_Display2
   15273/    C7C2 :                     ; ===========================================================================
   15274/    C7C2 :                     
   15275/    C7C2 :                     Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
   15276/    C7C2 : 4238 FE30           		clr.b	($FFFFFE30).w	; clear	lamppost counter
   15277/    C7C6 : 4A38 F7CD           		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
   15278/    C7CA : 6708                		beq.s	loc_C6EA	; if not, branch
   15279/    C7CC : 11FC 0010 F600      		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
   15280/    C7D2 : 6006                		bra.s	Obj3A_Display2
   15281/    C7D4 :                     ; ===========================================================================
   15282/    C7D4 :                     
   15283/    C7D4 :                     loc_C6EA:				; XREF: Obj3A_ChkSS
   15284/    C7D4 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart level
   15285/    C7DA :                     
   15286/    C7DA :                     Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
   15287/    C7DA : 6000 0F32           		bra.w	DisplaySprite
   15288/    C7DE :                     ; ===========================================================================
   15289/    C7DE :                     ; ---------------------------------------------------------------------------
   15290/    C7DE :                     ; Level	order array
   15291/    C7DE :                     ; ---------------------------------------------------------------------------
   15292/    C7DE :                     LevelOrder:	binclude	misc/lvl_ord.bin
   15293/    C80E : (MACRO)             		align 2
   15293/    C80E :  (MACRO-2)                  cnop 0,2
   15293/    C80E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   15294/    C80E :                     ; ===========================================================================
   15295/    C80E :                     
   15296/    C80E :                     Obj3A_ChkPos2:				; XREF: Obj3A_Index
   15297/    C80E : 7220                		moveq	#$20,d1		; set horizontal speed
   15298/    C810 : 3028 0032           		move.w	$32(a0),d0
   15299/    C814 : B068 0008           		cmp.w	8(a0),d0	; has item reached its finish position?
   15300/    C818 : 671A                		beq.s	Obj3A_SBZ2	; if yes, branch
   15301/    C81A : 6C02                		bge.s	Obj3A_Move2
   15302/    C81C : 4441                		neg.w	d1
   15303/    C81E :                     
   15304/    C81E :                     Obj3A_Move2:
   15305/    C81E : D368 0008           		add.w	d1,8(a0)	; change item"s position
   15306/    C822 : 3028 0008           		move.w	8(a0),d0
   15307/    C826 : 6B0A                		bmi.s	locret_C748
   15308/    C828 : 0C40 0200           		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
   15309/    C82C : 6404                		bcc.s	locret_C748	; if yes, branch
   15310/    C82E : 6000 0EDE           		bra.w	DisplaySprite
   15311/    C832 :                     ; ===========================================================================
   15312/    C832 :                     
   15313/    C832 :                     locret_C748:
   15314/    C832 : 4E75                		rts	
   15315/    C834 :                     ; ===========================================================================
   15316/    C834 :                     
   15317/    C834 :                     Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
   15318/    C834 : 0C28 0004 001A      		cmpi.b	#4,$1A(a0)
   15319/    C83A : 6600 0F0E           		bne.w	DeleteObject
   15320/    C83E : 5428 0024           		addq.b	#2,$24(a0)
   15321/    C842 : 4238 F7CC           		clr.b	($FFFFF7CC).w	; unlock controls
   15322/    C846 : 303C 008D           		move.w	#$8D,d0
   15323/    C84A : 4EF9 0000 1396      		jmp	(PlaySound).l	; play FZ music
   15324/    C850 :                     ; ===========================================================================
   15325/    C850 :                     
   15326/    C850 :                     loc_C766:				; XREF: Obj3A_Index
   15327/    C850 : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   15328/    C854 : 0C78 2100 F72A      		cmpi.w	#$2100,($FFFFF72A).w
   15329/    C85A : 6700 0EEE           		beq.w	DeleteObject
   15330/    C85E : 4E75                		rts	
   15331/    C860 :                     ; ===========================================================================
   15332/    C860 : 0004 0124 00BC      Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
   15333/    C866 : 0200                		dc.b 2,	0		; routine number, frame	number (changes)
   15334/    C868 : FEE0 0120 00D0      		dc.w $FEE0, $120, $D0
   15335/    C86E : 0201                		dc.b 2,	1
   15336/    C870 : 040C 014C 00D6      		dc.w $40C, $14C, $D6
   15337/    C876 : 0206                		dc.b 2,	6
   15338/    C878 : 0520 0120 00EC      		dc.w $520, $120, $EC
   15339/    C87E : 0202                		dc.b 2,	2
   15340/    C880 : 0540 0120 00FC      		dc.w $540, $120, $FC
   15341/    C886 : 0203                		dc.b 2,	3
   15342/    C888 : 0560 0120 010C      		dc.w $560, $120, $10C
   15343/    C88E : 0204                		dc.b 2,	4
   15344/    C890 : 020C 014C 00CC      		dc.w $20C, $14C, $CC
   15345/    C896 : 0205                		dc.b 2,	5
   15346/    C898 :                     ; ===========================================================================
   15347/    C898 :                     ; ---------------------------------------------------------------------------
   15348/    C898 :                     ; Object 7E - special stage results screen
   15349/    C898 :                     ; ---------------------------------------------------------------------------
   15350/    C898 :                     
   15351/    C898 :                     Obj7E:					; XREF: Obj_Index
   15352/    C898 : 7000                		moveq	#0,d0
   15353/    C89A : 1028 0024           		move.b	$24(a0),d0
   15354/    C89E : 323B 0006           		move.w	Obj7E_Index(pc,d0.w),d1
   15355/    C8A2 : 4EFB 1002           		jmp	Obj7E_Index(pc,d1.w)
   15356/    C8A6 :                     ; ===========================================================================
   15357/    C8A6 : 0016                Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
   15358/    C8A8 : 008A                		dc.w Obj7E_ChkPos-Obj7E_Index
   15359/    C8AA : 00C8                		dc.w Obj7E_Wait-Obj7E_Index
   15360/    C8AC : 00D6                		dc.w Obj7E_RingBonus-Obj7E_Index
   15361/    C8AE : 00C8                		dc.w Obj7E_Wait-Obj7E_Index
   15362/    C8B0 : 0130                		dc.w Obj7E_Exit-Obj7E_Index
   15363/    C8B2 : 00C8                		dc.w Obj7E_Wait-Obj7E_Index
   15364/    C8B4 : 013A                		dc.w Obj7E_Continue-Obj7E_Index
   15365/    C8B6 : 00C8                		dc.w Obj7E_Wait-Obj7E_Index
   15366/    C8B8 : 0130                		dc.w Obj7E_Exit-Obj7E_Index
   15367/    C8BA : 015E                		dc.w loc_C91A-Obj7E_Index
   15368/    C8BC :                     ; ===========================================================================
   15369/    C8BC :                     
   15370/    C8BC :                     Obj7E_ChkPLC:				; XREF: Obj7E_Index
   15371/    C8BC : 4AB8 F680           		tst.l	($FFFFF680).w	; are the pattern load cues empty?
   15372/    C8C0 : 6702                		beq.s	Obj7E_Main	; if yes, branch
   15373/    C8C2 : 4E75                		rts	
   15374/    C8C4 :                     ; ===========================================================================
   15375/    C8C4 :                     
   15376/    C8C4 :                     Obj7E_Main:
   15377/    C8C4 : 2248                		movea.l	a0,a1
   15378/    C8C6 : 45F9 0000 CA18      		lea	(Obj7E_Config).l,a2
   15379/    C8CC : 7203                		moveq	#3,d1
   15380/    C8CE : 0C78 0032 FE20      		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
   15381/    C8D4 : 6502                		bcs.s	Obj7E_Loop	; if no, branch
   15382/    C8D6 : 5241                		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
   15383/    C8D8 :                     
   15384/    C8D8 :                     Obj7E_Loop:
   15385/    C8D8 : (MACRO)             		_move.b	#$7E,0(a1)
   15385/    C8D8 :  (MACRO-2)                          insn2op move.b, #$7E,0(a1)
   15385/    C8D8 : 137C 007E 0001                              !move.b   #$7E,1+0(a1)
   15385/    C8DD :                                             !org    *-1
   15385/    C8DD : 00                                          !dc.b   0
   15386/    C8DE : 335A 0008           		move.w	(a2)+,8(a1)	; load start x-position
   15387/    C8E2 : 335A 0030           		move.w	(a2)+,$30(a1)	; load main x-position
   15388/    C8E6 : 335A 000A           		move.w	(a2)+,$A(a1)	; load y-position
   15389/    C8EA : 135A 0024           		move.b	(a2)+,$24(a1)
   15390/    C8EE : 135A 001A           		move.b	(a2)+,$1A(a1)
   15391/    C8F2 : 237C 0000 CD9E 0004 		move.l	#Map_obj7E,4(a1)
   15392/    C8FA : 337C 8580 0002      		move.w	#$8580,2(a1)
   15393/    C900 : 137C 0000 0001      		move.b	#0,1(a1)
   15394/    C906 : 43E9 0040           		lea	$40(a1),a1
   15395/    C90A : 51C9 FFCC           		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
   15396/    C90E :                     
   15397/    C90E : 7007                		moveq	#7,d0
   15398/    C910 : 1238 FE57           		move.b	($FFFFFE57).w,d1
   15399/    C914 : 6716                		beq.s	loc_C842
   15400/    C916 : 7000                		moveq	#0,d0
   15401/    C918 : 0C01 0006           		cmpi.b	#6,d1		; do you have all chaos	emeralds?
   15402/    C91C : 660E                		bne.s	loc_C842	; if not, branch
   15403/    C91E : 7008                		moveq	#8,d0		; load "Sonic got them all" text
   15404/    C920 : 317C 0018 0008      		move.w	#$18,8(a0)
   15405/    C926 : 317C 0118 0030      		move.w	#$118,$30(a0)	; change position of text
   15406/    C92C :                     
   15407/    C92C :                     loc_C842:
   15408/    C92C : 1140 001A           		move.b	d0,$1A(a0)
   15409/    C930 :                     
   15410/    C930 :                     Obj7E_ChkPos:				; XREF: Obj7E_Index
   15411/    C930 : 7210                		moveq	#$10,d1		; set horizontal speed
   15412/    C932 : 3028 0030           		move.w	$30(a0),d0
   15413/    C936 : B068 0008           		cmp.w	8(a0),d0	; has item reached its target position?
   15414/    C93A : 671A                		beq.s	loc_C86C	; if yes, branch
   15415/    C93C : 6C02                		bge.s	Obj7E_Move
   15416/    C93E : 4441                		neg.w	d1
   15417/    C940 :                     
   15418/    C940 :                     Obj7E_Move:
   15419/    C940 : D368 0008           		add.w	d1,8(a0)	; change item"s position
   15420/    C944 :                     
   15421/    C944 :                     loc_C85A:				; XREF: loc_C86C
   15422/    C944 : 3028 0008           		move.w	8(a0),d0
   15423/    C948 : 6B0A                		bmi.s	locret_C86A
   15424/    C94A : 0C40 0200           		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
   15425/    C94E : 6404                		bcc.s	locret_C86A	; if yes, branch
   15426/    C950 : 6000 0DBC           		bra.w	DisplaySprite
   15427/    C954 :                     ; ===========================================================================
   15428/    C954 :                     
   15429/    C954 :                     locret_C86A:
   15430/    C954 : 4E75                		rts	
   15431/    C956 :                     ; ===========================================================================
   15432/    C956 :                     
   15433/    C956 :                     loc_C86C:				; XREF: Obj7E_ChkPos
   15434/    C956 : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)
   15435/    C95C : 66E6                		bne.s	loc_C85A
   15436/    C95E : 5428 0024           		addq.b	#2,$24(a0)
   15437/    C962 : 317C 00B4 001E      		move.w	#180,$1E(a0)	; set time delay to 3 seconds
   15438/    C968 : 11FC 007F D800      		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
   15439/    C96E :                     
   15440/    C96E :                     Obj7E_Wait:				; XREF: Obj7E_Index
   15441/    C96E : 5368 001E           		subq.w	#1,$1E(a0)	; subtract 1 from time delay
   15442/    C972 : 6604                		bne.s	Obj7E_Display
   15443/    C974 : 5428 0024           		addq.b	#2,$24(a0)
   15444/    C978 :                     
   15445/    C978 :                     Obj7E_Display:
   15446/    C978 : 6000 0D94           		bra.w	DisplaySprite
   15447/    C97C :                     ; ===========================================================================
   15448/    C97C :                     
   15449/    C97C :                     Obj7E_RingBonus:			; XREF: Obj7E_Index
   15450/    C97C : 6100 0D90           		bsr.w	DisplaySprite
   15451/    C980 : 11FC 0001 F7D6      		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
   15452/    C986 : 4A78 F7D4           		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
   15453/    C98A : 6722                		beq.s	loc_C8C4	; if yes, branch
   15454/    C98C : 0478 000A F7D4      		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
   15455/    C992 : 700A                		moveq	#10,d0		; add 10 to score
   15456/    C994 : 4EB9 0001 C922      		jsr	(AddPoints).l
   15457/    C99A : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   15458/    C99E : 0200 0003           		andi.b	#3,d0
   15459/    C9A2 : 6630                		bne.s	locret_C8EA
   15460/    C9A4 : 303C 00CD           		move.w	#$CD,d0
   15461/    C9A8 : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play "blip" sound
   15462/    C9AE :                     ; ===========================================================================
   15463/    C9AE :                     
   15464/    C9AE :                     loc_C8C4:				; XREF: Obj7E_RingBonus
   15465/    C9AE : 303C 00C5           		move.w	#$C5,d0
   15466/    C9B2 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
   15467/    C9B8 : 5428 0024           		addq.b	#2,$24(a0)
   15468/    C9BC : 317C 00B4 001E      		move.w	#180,$1E(a0)	; set time delay to 3 seconds
   15469/    C9C2 : 0C78 0032 FE20      		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
   15470/    C9C8 : 650A                		bcs.s	locret_C8EA	; if not, branch
   15471/    C9CA : 317C 003C 001E      		move.w	#60,$1E(a0)	; set time delay to 1 second
   15472/    C9D0 : 5828 0024           		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
   15473/    C9D4 :                     
   15474/    C9D4 :                     locret_C8EA:
   15475/    C9D4 : 4E75                		rts	
   15476/    C9D6 :                     ; ===========================================================================
   15477/    C9D6 :                     
   15478/    C9D6 :                     Obj7E_Exit:				; XREF: Obj7E_Index
   15479/    C9D6 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart level
   15480/    C9DC : 6000 0D30           		bra.w	DisplaySprite
   15481/    C9E0 :                     ; ===========================================================================
   15482/    C9E0 :                     
   15483/    C9E0 :                     Obj7E_Continue:				; XREF: Obj7E_Index
   15484/    C9E0 : 11FC 0004 D6DA      		move.b	#4,($FFFFD6DA).w
   15485/    C9E6 : 11FC 0014 D6E4      		move.b	#$14,($FFFFD6E4).w
   15486/    C9EC : 303C 00BF           		move.w	#$BF,d0
   15487/    C9F0 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play continues music
   15488/    C9F6 : 5428 0024           		addq.b	#2,$24(a0)
   15489/    C9FA : 317C 0168 001E      		move.w	#360,$1E(a0)	; set time delay to 6 seconds
   15490/    CA00 : 6000 0D0C           		bra.w	DisplaySprite
   15491/    CA04 :                     ; ===========================================================================
   15492/    CA04 :                     
   15493/    CA04 :                     loc_C91A:				; XREF: Obj7E_Index
   15494/    CA04 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   15495/    CA08 : 0200 000F           		andi.b	#$F,d0
   15496/    CA0C : 6606                		bne.s	Obj7E_Display2
   15497/    CA0E : 0868 0000 001A      		bchg	#0,$1A(a0)
   15498/    CA14 :                     
   15499/    CA14 :                     Obj7E_Display2:
   15500/    CA14 : 6000 0CF8           		bra.w	DisplaySprite
   15501/    CA18 :                     ; ===========================================================================
   15502/    CA18 : 0020 0120 00C4      Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
   15503/    CA1E : 0200                		dc.b 2,	0		; rountine number, frame number
   15504/    CA20 : 0320 0120 0118      		dc.w $320, $120, $118
   15505/    CA26 : 0201                		dc.b 2,	1
   15506/    CA28 : 0360 0120 0128      		dc.w $360, $120, $128
   15507/    CA2E : 0202                		dc.b 2,	2
   15508/    CA30 : 01EC 011C 00C4      		dc.w $1EC, $11C, $C4
   15509/    CA36 : 0203                		dc.b 2,	3
   15510/    CA38 : 03A0 0120 0138      		dc.w $3A0, $120, $138
   15511/    CA3E : 0206                		dc.b 2,	6
   15512/    CA40 :                     ; ===========================================================================
   15513/    CA40 :                     ; ---------------------------------------------------------------------------
   15514/    CA40 :                     ; Object 7F - chaos emeralds from the special stage results screen
   15515/    CA40 :                     ; ---------------------------------------------------------------------------
   15516/    CA40 :                     
   15517/    CA40 :                     Obj7F:					; XREF: Obj_Index
   15518/    CA40 : 7000                		moveq	#0,d0
   15519/    CA42 : 1028 0024           		move.b	$24(a0),d0
   15520/    CA46 : 323B 0006           		move.w	Obj7F_Index(pc,d0.w),d1
   15521/    CA4A : 4EFB 1002           		jmp	Obj7F_Index(pc,d1.w)
   15522/    CA4E :                     ; ===========================================================================
   15523/    CA4E : 0010                Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
   15524/    CA50 : 0068                		dc.w Obj7F_Flash-Obj7F_Index
   15525/    CA52 :                     
   15526/    CA52 :                     ; ---------------------------------------------------------------------------
   15527/    CA52 :                     ; X-axis positions for chaos emeralds
   15528/    CA52 :                     ; ---------------------------------------------------------------------------
   15529/    CA52 : 0110 0128 00F8 0140 Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
                    00E0 0158           
   15530/    CA5E :                     ; ===========================================================================
   15531/    CA5E :                     
   15532/    CA5E :                     Obj7F_Main:				; XREF: Obj7F_Index
   15533/    CA5E : 2248                		movea.l	a0,a1
   15534/    CA60 : 45F9 0000 CA52      		lea	(Obj7F_PosData).l,a2
   15535/    CA66 : 7400                		moveq	#0,d2
   15536/    CA68 : 7200                		moveq	#0,d1
   15537/    CA6A : 1238 FE57           		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
   15538/    CA6E : 5301                		subq.b	#1,d1		; subtract 1 from d1
   15539/    CA70 : 6500 0CD8           		bcs.w	DeleteObject	; if you have 0	emeralds, branch
   15540/    CA74 :                     
   15541/    CA74 :                     Obj7F_Loop:
   15542/    CA74 : (MACRO)             		_move.b	#$7F,0(a1)
   15542/    CA74 :  (MACRO-2)                          insn2op move.b, #$7F,0(a1)
   15542/    CA74 : 137C 007F 0001                              !move.b   #$7F,1+0(a1)
   15542/    CA79 :                                             !org    *-1
   15542/    CA79 : 00                                          !dc.b   0
   15543/    CA7A : 335A 0008           		move.w	(a2)+,8(a1)	; set x-position
   15544/    CA7E : 337C 00F0 000A      		move.w	#$F0,$A(a1)	; set y-position
   15545/    CA84 : 47F8 FE58           		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
   15546/    CA88 : 1633 2000           		move.b	(a3,d2.w),d3
   15547/    CA8C : 1343 001A           		move.b	d3,$1A(a1)
   15548/    CA90 : 1343 001C           		move.b	d3,$1C(a1)
   15549/    CA94 : 5202                		addq.b	#1,d2
   15550/    CA96 : 5429 0024           		addq.b	#2,$24(a1)
   15551/    CA9A : 237C 0000 CEF8 0004 		move.l	#Map_obj7F,4(a1)
   15552/    CAA2 : 337C 8541 0002      		move.w	#$8541,2(a1)
   15553/    CAA8 : 137C 0000 0001      		move.b	#0,1(a1)
   15554/    CAAE : 43E9 0040           		lea	$40(a1),a1	; next object
   15555/    CAB2 : 51C9 FFC0           		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
   15556/    CAB6 :                     
   15557/    CAB6 :                     Obj7F_Flash:				; XREF: Obj7F_Index
   15558/    CAB6 : 1028 001A           		move.b	$1A(a0),d0
   15559/    CABA : 117C 0006 001A      		move.b	#6,$1A(a0)	; load 6th frame (blank)
   15560/    CAC0 : 0C00 0006           		cmpi.b	#6,d0
   15561/    CAC4 : 6606                		bne.s	Obj7F_Display
   15562/    CAC6 : 1168 001C 001A      		move.b	$1C(a0),$1A(a0)	; load visible frame
   15563/    CACC :                     
   15564/    CACC :                     Obj7F_Display:
   15565/    CACC : 6000 0C40           		bra.w	DisplaySprite
   15566/    CAD0 :                     ; ===========================================================================
   15567/    CAD0 :                     ; ---------------------------------------------------------------------------
   15568/    CAD0 :                     ; Sprite mappings - zone title cards
   15569/    CAD0 :                     ; ---------------------------------------------------------------------------
   15570/    CAD0 : 0018                Map_obj34:	dc.w byte_C9FE-Map_obj34
   15571/    CAD2 : 005F                		dc.w byte_CA2C-Map_obj34
   15572/    CAD4 : 008D                		dc.w byte_CA5A-Map_obj34
   15573/    CAD6 : 00AD                		dc.w byte_CA7A-Map_obj34
   15574/    CAD8 : 00DB                		dc.w byte_CAA8-Map_obj34
   15575/    CADA : 010F                		dc.w byte_CADC-Map_obj34
   15576/    CADC : 0143                		dc.w byte_CB10-Map_obj34
   15577/    CADE : 0159                		dc.w byte_CB26-Map_obj34
   15578/    CAE0 : 0164                		dc.w byte_CB31-Map_obj34
   15579/    CAE2 : 016F                		dc.w byte_CB3C-Map_obj34
   15580/    CAE4 : 017A                		dc.w byte_CB47-Map_obj34
   15581/    CAE6 : 01BD                		dc.w byte_CB8A-Map_obj34
   15582/    CAE8 : 0E                  byte_C9FE:	dc.b $E	;  GREEN HILL | TROPICAL HILLS
   15583/    CAE9 : F805 0042 80        		dc.b $F8, 5, 0, $42, $80	; T
   15584/    CAEE : F805 003A 90        		dc.b $F8, 5, 0, $3A, $90	; R
   15585/    CAF3 : F805 0032 A0        		dc.b $F8, 5, 0, $32, $A0	; O
   15586/    CAF8 : F805 0036 B0        		dc.b $F8, 5, 0, $36, $B0	; P
   15587/    CAFD : F801 0020 C0        		dc.b $F8, 1, 0, $20, $C0	; I
   15588/    CB02 : F805 0008 C8        		dc.b $F8, 5, 0, 8, $C8		; C
   15589/    CB07 : F805 0000 D8        		dc.b $F8, 5, 0, 0, $D8		; A
   15590/    CB0C : F805 0026 E8        		dc.b $F8, 5, 0, $26, $E8	; L
   15591/    CB11 : F800 0056 F8        		dc.b $F8, 0, 0, $56, $F8	; Space
   15592/    CB16 : F805 001C 08        		dc.b $F8, 5, 0, $1C, $8	; H
   15593/    CB1B : F801 0020 18        		dc.b $F8, 1, 0, $20, $18	; I
   15594/    CB20 : F805 0026 20        		dc.b $F8, 5, 0, $26, $20	; L
   15595/    CB25 : F805 0026 30        		dc.b $F8, 5, 0, $26, $30	; L
   15596/    CB2A : F805 003E 40        		dc.b $F8, 5, 0, $3E, $40	; S
   15597/    CB2F : 09                  byte_CA2C:	dc.b 9			; LABYRINTH
   15598/    CB30 : F805 0026 BC        		dc.b $F8, 5, 0,	$26, $BC
   15599/    CB35 : F805 0000 CC        		dc.b $F8, 5, 0,	0, $CC
   15600/    CB3A : F805 0004 DC        		dc.b $F8, 5, 0,	4, $DC
   15601/    CB3F : F805 004A EC        		dc.b $F8, 5, 0,	$4A, $EC
   15602/    CB44 : F805 003A FC        		dc.b $F8, 5, 0,	$3A, $FC
   15603/    CB49 : F801 0020 0C        		dc.b $F8, 1, 0,	$20, $C
   15604/    CB4E : F805 002E 14        		dc.b $F8, 5, 0,	$2E, $14
   15605/    CB53 : F805 0042 24        		dc.b $F8, 5, 0,	$42, $24
   15606/    CB58 : F805 001C 34        		dc.b $F8, 5, 0,	$1C, $34
   15607/    CB5D : 06                  byte_CA5A:	dc.b 6			; MARBLE
   15608/    CB5E : F805 002A CF        		dc.b $F8, 5, 0,	$2A, $CF
   15609/    CB63 : F805 0000 E0        		dc.b $F8, 5, 0,	0, $E0
   15610/    CB68 : F805 003A F0        		dc.b $F8, 5, 0,	$3A, $F0
   15611/    CB6D : F805 0004 00        		dc.b $F8, 5, 0,	4, 0
   15612/    CB72 : F805 0026 10        		dc.b $F8, 5, 0,	$26, $10
   15613/    CB77 : F805 0010 20        		dc.b $F8, 5, 0,	$10, $20
   15614/    CB7C : 00                  		dc.b 0
   15615/    CB7D : 09                  byte_CA7A:	dc.b 9			; STAR	LIGHT
   15616/    CB7E : F805 003E B4        		dc.b $F8, 5, 0,	$3E, $B4
   15617/    CB83 : F805 0042 C4        		dc.b $F8, 5, 0,	$42, $C4
   15618/    CB88 : F805 0000 D4        		dc.b $F8, 5, 0,	0, $D4
   15619/    CB8D : F805 003A E4        		dc.b $F8, 5, 0,	$3A, $E4
   15620/    CB92 : F805 0026 04        		dc.b $F8, 5, 0,	$26, 4
   15621/    CB97 : F801 0020 14        		dc.b $F8, 1, 0,	$20, $14
   15622/    CB9C : F805 0018 1C        		dc.b $F8, 5, 0,	$18, $1C
   15623/    CBA1 : F805 001C 2C        		dc.b $F8, 5, 0,	$1C, $2C
   15624/    CBA6 : F805 0042 3C        		dc.b $F8, 5, 0,	$42, $3C
   15625/    CBAB : 0A                  byte_CAA8:	dc.b $A			; SPRING YARD
   15626/    CBAC : F805 003E AC        		dc.b $F8, 5, 0,	$3E, $AC
   15627/    CBB1 : F805 0036 BC        		dc.b $F8, 5, 0,	$36, $BC
   15628/    CBB6 : F805 003A CC        		dc.b $F8, 5, 0,	$3A, $CC
   15629/    CBBB : F801 0020 DC        		dc.b $F8, 1, 0,	$20, $DC
   15630/    CBC0 : F805 002E E4        		dc.b $F8, 5, 0,	$2E, $E4
   15631/    CBC5 : F805 0018 F4        		dc.b $F8, 5, 0,	$18, $F4
   15632/    CBCA : F805 004A 14        		dc.b $F8, 5, 0,	$4A, $14
   15633/    CBCF : F805 0000 24        		dc.b $F8, 5, 0,	0, $24
   15634/    CBD4 : F805 003A 34        		dc.b $F8, 5, 0,	$3A, $34
   15635/    CBD9 : F805 000C 44        		dc.b $F8, 5, 0,	$C, $44
   15636/    CBDE : 00                  		dc.b 0
   15637/    CBDF : 0A                  byte_CADC:	dc.b $A			; SCRAP BRAIN
   15638/    CBE0 : F805 003E AC        		dc.b $F8, 5, 0,	$3E, $AC
   15639/    CBE5 : F805 0008 BC        		dc.b $F8, 5, 0,	8, $BC
   15640/    CBEA : F805 003A CC        		dc.b $F8, 5, 0,	$3A, $CC
   15641/    CBEF : F805 0000 DC        		dc.b $F8, 5, 0,	0, $DC
   15642/    CBF4 : F805 0036 EC        		dc.b $F8, 5, 0,	$36, $EC
   15643/    CBF9 : F805 0004 0C        		dc.b $F8, 5, 0,	4, $C
   15644/    CBFE : F805 003A 1C        		dc.b $F8, 5, 0,	$3A, $1C
   15645/    CC03 : F805 0000 2C        		dc.b $F8, 5, 0,	0, $2C
   15646/    CC08 : F801 0020 3C        		dc.b $F8, 1, 0,	$20, $3C
   15647/    CC0D : F805 002E 44        		dc.b $F8, 5, 0,	$2E, $44
   15648/    CC12 : 00                  		dc.b 0
   15649/    CC13 : 04                  byte_CB10:	dc.b 4			; ZONE
   15650/    CC14 : F805 004E E0        		dc.b $F8, 5, 0,	$4E, $E0
   15651/    CC19 : F805 0032 F0        		dc.b $F8, 5, 0,	$32, $F0
   15652/    CC1E : F805 002E 00        		dc.b $F8, 5, 0,	$2E, 0
   15653/    CC23 : F805 0010 10        		dc.b $F8, 5, 0,	$10, $10
   15654/    CC28 : 00                  		dc.b 0
   15655/    CC29 : 02                  byte_CB26:	dc.b 2			; ACT 1
   15656/    CC2A : 040C 0053 EC        		dc.b 4,	$C, 0, $53, $EC
   15657/    CC2F : F402 0057 0C        		dc.b $F4, 2, 0,	$57, $C
   15658/    CC34 : 02                  byte_CB31:	dc.b 2			; ACT 2
   15659/    CC35 : 040C 0053 EC        		dc.b 4,	$C, 0, $53, $EC
   15660/    CC3A : F406 005A 08        		dc.b $F4, 6, 0,	$5A, 8
   15661/    CC3F : 02                  byte_CB3C:	dc.b 2			; ACT 3
   15662/    CC40 : 040C 0053 EC        		dc.b 4,	$C, 0, $53, $EC
   15663/    CC45 : F406 0060 08        		dc.b $F4, 6, 0,	$60, 8
   15664/    CC4A : 0D                  byte_CB47:	dc.b $D			; Oval
   15665/    CC4B : E40C 0070 F4        		dc.b $E4, $C, 0, $70, $F4
   15666/    CC50 : E402 0074 14        		dc.b $E4, 2, 0,	$74, $14
   15667/    CC55 : EC04 0077 EC        		dc.b $EC, 4, 0,	$77, $EC
   15668/    CC5A : F405 0079 E4        		dc.b $F4, 5, 0,	$79, $E4
   15669/    CC5F : 140C 1870 EC        		dc.b $14, $C, $18, $70,	$EC
   15670/    CC64 : 0402 1874 E4        		dc.b 4,	2, $18,	$74, $E4
   15671/    CC69 : 0C04 1877 04        		dc.b $C, 4, $18, $77, 4
   15672/    CC6E : FC05 1879 0C        		dc.b $FC, 5, $18, $79, $C
   15673/    CC73 : EC08 007D FC        		dc.b $EC, 8, 0,	$7D, $FC
   15674/    CC78 : F40C 007C F4        		dc.b $F4, $C, 0, $7C, $F4
   15675/    CC7D : FC08 007C F4        		dc.b $FC, 8, 0,	$7C, $F4
   15676/    CC82 : 040C 007C EC        		dc.b 4,	$C, 0, $7C, $EC
   15677/    CC87 : 0C08 007C EC        		dc.b $C, 8, 0, $7C, $EC
   15678/    CC8C : 00                  		dc.b 0
   15679/    CC8D : 05                  byte_CB8A:	dc.b 5			; FINAL
   15680/    CC8E : F805 0014 DC        		dc.b $F8, 5, 0,	$14, $DC
   15681/    CC93 : F801 0020 EC        		dc.b $F8, 1, 0,	$20, $EC
   15682/    CC98 : F805 002E F4        		dc.b $F8, 5, 0,	$2E, $F4
   15683/    CC9D : F805 0000 04        		dc.b $F8, 5, 0,	0, 4
   15684/    CCA2 : F805 0026 14        		dc.b $F8, 5, 0,	$26, $14
   15685/    CCA7 : (MACRO)             		align 2
   15685/    CCA7 :  (MACRO-2)                  cnop 0,2
   15685/    CCA7 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   15685/    CCA7 : =$15                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
   15685/    CCA8 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   15686/    CCA8 :                     ; ---------------------------------------------------------------------------
   15687/    CCA8 :                     ; Sprite mappings - "GAME OVER"	and "TIME OVER"
   15688/    CCA8 :                     ; ---------------------------------------------------------------------------
   15689/    CCA8 :                     Map_obj39:
   15690/    CCA8 :                     		include	"_maps/obj39.asm"
(1)    1/    CCA8 :                     ; ---------------------------------------------------------------------------
(1)    2/    CCA8 :                     ; Sprite mappings - "GAME OVER"	and "TIME OVER"
(1)    3/    CCA8 :                     ; ---------------------------------------------------------------------------
(1)    4/    CCA8 : 0008                		dc.w byte_CBAC-Map_obj39
(1)    5/    CCAA : 0013                		dc.w byte_CBB7-Map_obj39
(1)    6/    CCAC : 001E                		dc.w byte_CBC2-Map_obj39
(1)    7/    CCAE : 0029                		dc.w byte_CBCD-Map_obj39
(1)    8/    CCB0 : 02                  byte_CBAC:	dc.b 2
(1)    9/    CCB1 : F80D 0000 B8        		dc.b $F8, $D, 0, 0, $B8
(1)   10/    CCB6 : F80D 0008 D8        		dc.b $F8, $D, 0, 8, $D8
(1)   11/    CCBB : 02                  byte_CBB7:	dc.b 2
(1)   12/    CCBC : F80D 0014 08        		dc.b $F8, $D, 0, $14, 8
(1)   13/    CCC1 : F80D 000C 28        		dc.b $F8, $D, 0, $C, $28
(1)   14/    CCC6 : 02                  byte_CBC2:	dc.b 2
(1)   15/    CCC7 : F809 001C C4        		dc.b $F8, 9, 0,	$1C, $C4
(1)   16/    CCCC : F80D 0008 DC        		dc.b $F8, $D, 0, 8, $DC
(1)   17/    CCD1 : 02                  byte_CBCD:	dc.b 2
(1)   18/    CCD2 : F80D 0014 0C        		dc.b $F8, $D, 0, $14, $C
(1)   19/    CCD7 : F80D 000C 2C        		dc.b $F8, $D, 0, $C, $2C
(1)   20/    CCDC : (MACRO)             		align 2
(1)   20/    CCDC :  (MACRO-2)                  cnop 0,2
(1)   20/    CCDC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   15691/    CCDC :                     
   15692/    CCDC :                     ; ---------------------------------------------------------------------------
   15693/    CCDC :                     ; Sprite mappings - "SONIC HAS PASSED" title card
   15694/    CCDC :                     ; ---------------------------------------------------------------------------
   15695/    CCDC : 0012                Map_obj3A:	dc.w byte_CBEA-Map_obj3A
   15696/    CCDE : 003B                		dc.w byte_CC13-Map_obj3A
   15697/    CCE0 : 005A                		dc.w byte_CC32-Map_obj3A
   15698/    CCE2 : 0079                		dc.w byte_CC51-Map_obj3A
   15699/    CCE4 : 009D                		dc.w byte_CC75-Map_obj3A
   15700/    CCE6 : FF6E                		dc.w byte_CB47-Map_obj3A
   15701/    CCE8 : FF4D                		dc.w byte_CB26-Map_obj3A
   15702/    CCEA : FF58                		dc.w byte_CB31-Map_obj3A
   15703/    CCEC : FF63                		dc.w byte_CB3C-Map_obj3A
   15704/    CCEE : 08                  byte_CBEA:	dc.b 8			; SONIC HAS
   15705/    CCEF : F805 003E B8        		dc.b $F8, 5, 0,	$3E, $B8
   15706/    CCF4 : F805 0032 C8        		dc.b $F8, 5, 0,	$32, $C8
   15707/    CCF9 : F805 002E D8        		dc.b $F8, 5, 0,	$2E, $D8
   15708/    CCFE : F801 0020 E8        		dc.b $F8, 1, 0,	$20, $E8
   15709/    CD03 : F805 0008 F0        		dc.b $F8, 5, 0,	8, $F0
   15710/    CD08 : F805 001C 10        		dc.b $F8, 5, 0,	$1C, $10
   15711/    CD0D : F805 0000 20        		dc.b $F8, 5, 0,	0, $20
   15712/    CD12 : F805 003E 30        		dc.b $F8, 5, 0,	$3E, $30
   15713/    CD17 : 06                  byte_CC13:	dc.b 6			; PASSED
   15714/    CD18 : F805 0036 D0        		dc.b $F8, 5, 0,	$36, $D0
   15715/    CD1D : F805 0000 E0        		dc.b $F8, 5, 0,	0, $E0
   15716/    CD22 : F805 003E F0        		dc.b $F8, 5, 0,	$3E, $F0
   15717/    CD27 : F805 003E 00        		dc.b $F8, 5, 0,	$3E, 0
   15718/    CD2C : F805 0010 10        		dc.b $F8, 5, 0,	$10, $10
   15719/    CD31 : F805 000C 20        		dc.b $F8, 5, 0,	$C, $20
   15720/    CD36 : 06                  byte_CC32:	dc.b 6			; SCORE
   15721/    CD37 : F80D 014A B0        		dc.b $F8, $D, 1, $4A, $B0
   15722/    CD3C : F801 0162 D0        		dc.b $F8, 1, 1,	$62, $D0
   15723/    CD41 : F809 0164 18        		dc.b $F8, 9, 1,	$64, $18
   15724/    CD46 : F80D 016A 30        		dc.b $F8, $D, 1, $6A, $30
   15725/    CD4B : F704 006E CD        		dc.b $F7, 4, 0,	$6E, $CD
   15726/    CD50 : FF04 186E CD        		dc.b $FF, 4, $18, $6E, $CD
   15727/    CD55 : 07                  byte_CC51:	dc.b 7			; TIME BONUS
   15728/    CD56 : F80D 015A B0        		dc.b $F8, $D, 1, $5A, $B0
   15729/    CD5B : F80D 0066 D9        		dc.b $F8, $D, 0, $66, $D9
   15730/    CD60 : F801 014A F9        		dc.b $F8, 1, 1,	$4A, $F9
   15731/    CD65 : F704 006E F6        		dc.b $F7, 4, 0,	$6E, $F6
   15732/    CD6A : FF04 186E F6        		dc.b $FF, 4, $18, $6E, $F6
   15733/    CD6F : F80D FFF0 28        		dc.b $F8, $D, $FF, $F0,	$28
   15734/    CD74 : F801 0170 48        		dc.b $F8, 1, 1,	$70, $48
   15735/    CD79 : 07                  byte_CC75:	dc.b 7			; RING BONUS
   15736/    CD7A : F80D 0152 B0        		dc.b $F8, $D, 1, $52, $B0
   15737/    CD7F : F80D 0066 D9        		dc.b $F8, $D, 0, $66, $D9
   15738/    CD84 : F801 014A F9        		dc.b $F8, 1, 1,	$4A, $F9
   15739/    CD89 : F704 006E F6        		dc.b $F7, 4, 0,	$6E, $F6
   15740/    CD8E : FF04 186E F6        		dc.b $FF, 4, $18, $6E, $F6
   15741/    CD93 : F80D FFF8 28        		dc.b $F8, $D, $FF, $F8,	$28
   15742/    CD98 : F801 0170 48        		dc.b $F8, 1, 1,	$70, $48
   15743/    CD9D : (MACRO)             		align 2
   15743/    CD9D :  (MACRO-2)                  cnop 0,2
   15743/    CD9D :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   15743/    CD9D : =$16                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
   15743/    CD9E :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   15744/    CD9E :                     ; ---------------------------------------------------------------------------
   15745/    CD9E :                     ; Sprite mappings - special stage results screen
   15746/    CD9E :                     ; ---------------------------------------------------------------------------
   15747/    CD9E : 0012                Map_obj7E:	dc.w byte_CCAC-Map_obj7E
   15748/    CDA0 : 0054                		dc.w byte_CCEE-Map_obj7E
   15749/    CDA2 : 0073                		dc.w byte_CD0D-Map_obj7E
   15750/    CDA4 : FEAC                		dc.w byte_CB47-Map_obj7E
   15751/    CDA6 : 0097                		dc.w byte_CD31-Map_obj7E
   15752/    CDA8 : 00AC                		dc.w byte_CD46-Map_obj7E
   15753/    CDAA : 00C1                		dc.w byte_CD5B-Map_obj7E
   15754/    CDAC : 00D1                		dc.w byte_CD6B-Map_obj7E
   15755/    CDAE : 010E                		dc.w byte_CDA8-Map_obj7E
   15756/    CDB0 : 0D                  byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
   15757/    CDB1 : F805 0008 90        		dc.b $F8, 5, 0,	8, $90
   15758/    CDB6 : F805 001C A0        		dc.b $F8, 5, 0,	$1C, $A0
   15759/    CDBB : F805 0000 B0        		dc.b $F8, 5, 0,	0, $B0
   15760/    CDC0 : F805 0032 C0        		dc.b $F8, 5, 0,	$32, $C0
   15761/    CDC5 : F805 003E D0        		dc.b $F8, 5, 0,	$3E, $D0
   15762/    CDCA : F805 0010 F0        		dc.b $F8, 5, 0,	$10, $F0
   15763/    CDCF : F805 002A 00        		dc.b $F8, 5, 0,	$2A, 0
   15764/    CDD4 : F805 0010 10        		dc.b $F8, 5, 0,	$10, $10
   15765/    CDD9 : F805 003A 20        		dc.b $F8, 5, 0,	$3A, $20
   15766/    CDDE : F805 0000 30        		dc.b $F8, 5, 0,	0, $30
   15767/    CDE3 : F805 0026 40        		dc.b $F8, 5, 0,	$26, $40
   15768/    CDE8 : F805 000C 50        		dc.b $F8, 5, 0,	$C, $50
   15769/    CDED : F805 003E 60        		dc.b $F8, 5, 0,	$3E, $60
   15770/    CDF2 : 06                  byte_CCEE:	dc.b 6			; "SCORE"
   15771/    CDF3 : F80D 014A B0        		dc.b $F8, $D, 1, $4A, $B0
   15772/    CDF8 : F801 0162 D0        		dc.b $F8, 1, 1,	$62, $D0
   15773/    CDFD : F809 0164 18        		dc.b $F8, 9, 1,	$64, $18
   15774/    CE02 : F80D 016A 30        		dc.b $F8, $D, 1, $6A, $30
   15775/    CE07 : F704 006E CD        		dc.b $F7, 4, 0,	$6E, $CD
   15776/    CE0C : FF04 186E CD        		dc.b $FF, 4, $18, $6E, $CD
   15777/    CE11 : 07                  byte_CD0D:	dc.b 7
   15778/    CE12 : F80D 0152 B0        		dc.b $F8, $D, 1, $52, $B0
   15779/    CE17 : F80D 0066 D9        		dc.b $F8, $D, 0, $66, $D9
   15780/    CE1C : F801 014A F9        		dc.b $F8, 1, 1,	$4A, $F9
   15781/    CE21 : F704 006E F6        		dc.b $F7, 4, 0,	$6E, $F6
   15782/    CE26 : FF04 186E F6        		dc.b $FF, 4, $18, $6E, $F6
   15783/    CE2B : F80D FFF8 28        		dc.b $F8, $D, $FF, $F8,	$28
   15784/    CE30 : F801 0170 48        		dc.b $F8, 1, 1,	$70, $48
   15785/    CE35 : 04                  byte_CD31:	dc.b 4
   15786/    CE36 : F80D FFD1 B0        		dc.b $F8, $D, $FF, $D1,	$B0
   15787/    CE3B : F80D FFD9 D0        		dc.b $F8, $D, $FF, $D9,	$D0
   15788/    CE40 : F801 FFE1 F0        		dc.b $F8, 1, $FF, $E1, $F0
   15789/    CE45 : F806 1FE3 40        		dc.b $F8, 6, $1F, $E3, $40
   15790/    CE4A : 04                  byte_CD46:	dc.b 4
   15791/    CE4B : F80D FFD1 B0        		dc.b $F8, $D, $FF, $D1,	$B0
   15792/    CE50 : F80D FFD9 D0        		dc.b $F8, $D, $FF, $D9,	$D0
   15793/    CE55 : F801 FFE1 F0        		dc.b $F8, 1, $FF, $E1, $F0
   15794/    CE5A : F806 1FE9 40        		dc.b $F8, 6, $1F, $E9, $40
   15795/    CE5F : 03                  byte_CD5B:	dc.b 3
   15796/    CE60 : F80D FFD1 B0        		dc.b $F8, $D, $FF, $D1,	$B0
   15797/    CE65 : F80D FFD9 D0        		dc.b $F8, $D, $FF, $D9,	$D0
   15798/    CE6A : F801 FFE1 F0        		dc.b $F8, 1, $FF, $E1, $F0
   15799/    CE6F : 0C                  byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
   15800/    CE70 : F805 003E 9C        		dc.b $F8, 5, 0,	$3E, $9C
   15801/    CE75 : F805 0036 AC        		dc.b $F8, 5, 0,	$36, $AC
   15802/    CE7A : F805 0010 BC        		dc.b $F8, 5, 0,	$10, $BC
   15803/    CE7F : F805 0008 CC        		dc.b $F8, 5, 0,	8, $CC
   15804/    CE84 : F801 0020 DC        		dc.b $F8, 1, 0,	$20, $DC
   15805/    CE89 : F805 0000 E4        		dc.b $F8, 5, 0,	0, $E4
   15806/    CE8E : F805 0026 F4        		dc.b $F8, 5, 0,	$26, $F4
   15807/    CE93 : F805 003E 14        		dc.b $F8, 5, 0,	$3E, $14
   15808/    CE98 : F805 0042 24        		dc.b $F8, 5, 0,	$42, $24
   15809/    CE9D : F805 0000 34        		dc.b $F8, 5, 0,	0, $34
   15810/    CEA2 : F805 0018 44        		dc.b $F8, 5, 0,	$18, $44
   15811/    CEA7 : F805 0010 54        		dc.b $F8, 5, 0,	$10, $54
   15812/    CEAC : 0F                  byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
   15813/    CEAD : F805 003E 88        		dc.b $F8, 5, 0,	$3E, $88
   15814/    CEB2 : F805 0032 98        		dc.b $F8, 5, 0,	$32, $98
   15815/    CEB7 : F805 002E A8        		dc.b $F8, 5, 0,	$2E, $A8
   15816/    CEBC : F801 0020 B8        		dc.b $F8, 1, 0,	$20, $B8
   15817/    CEC1 : F805 0008 C0        		dc.b $F8, 5, 0,	8, $C0
   15818/    CEC6 : F805 0018 D8        		dc.b $F8, 5, 0,	$18, $D8
   15819/    CECB : F805 0032 E8        		dc.b $F8, 5, 0,	$32, $E8
   15820/    CED0 : F805 0042 F8        		dc.b $F8, 5, 0,	$42, $F8
   15821/    CED5 : F805 0042 10        		dc.b $F8, 5, 0,	$42, $10
   15822/    CEDA : F805 001C 20        		dc.b $F8, 5, 0,	$1C, $20
   15823/    CEDF : F805 0010 30        		dc.b $F8, 5, 0,	$10, $30
   15824/    CEE4 : F805 002A 40        		dc.b $F8, 5, 0,	$2A, $40
   15825/    CEE9 : F805 0000 58        		dc.b $F8, 5, 0,	0, $58
   15826/    CEEE : F805 0026 68        		dc.b $F8, 5, 0,	$26, $68
   15827/    CEF3 : F805 0026 78        		dc.b $F8, 5, 0,	$26, $78
   15828/    CEF8 : (MACRO)             		align 2
   15828/    CEF8 :  (MACRO-2)                  cnop 0,2
   15828/    CEF8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   15829/    CEF8 :                     ; ---------------------------------------------------------------------------
   15830/    CEF8 :                     ; Sprite mappings - chaos emeralds from	the special stage results screen
   15831/    CEF8 :                     ; ---------------------------------------------------------------------------
   15832/    CEF8 :                     Map_obj7F:
   15833/    CEF8 :                     		include	"_maps/obj7F.asm"
(1)    1/    CEF8 :                     ; ---------------------------------------------------------------------------
(1)    2/    CEF8 :                     ; Sprite mappings - chaos emeralds from	the special stage results screen
(1)    3/    CEF8 :                     ; ---------------------------------------------------------------------------
(1)    4/    CEF8 : 000E                		dc.w byte_CE02-Map_obj7F
(1)    5/    CEFA : 0014                		dc.w byte_CE08-Map_obj7F
(1)    6/    CEFC : 001A                		dc.w byte_CE0E-Map_obj7F
(1)    7/    CEFE : 0020                		dc.w byte_CE14-Map_obj7F
(1)    8/    CF00 : 0026                		dc.w byte_CE1A-Map_obj7F
(1)    9/    CF02 : 002C                		dc.w byte_CE20-Map_obj7F
(1)   10/    CF04 : 0032                		dc.w byte_CE26-Map_obj7F
(1)   11/    CF06 : 01                  byte_CE02:	dc.b 1
(1)   12/    CF07 : F805 2004 F8        		dc.b $F8, 5, $20, 4, $F8
(1)   13/    CF0C : 01                  byte_CE08:	dc.b 1
(1)   14/    CF0D : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   15/    CF12 : 01                  byte_CE0E:	dc.b 1
(1)   16/    CF13 : F805 4004 F8        		dc.b $F8, 5, $40, 4, $F8
(1)   17/    CF18 : 01                  byte_CE14:	dc.b 1
(1)   18/    CF19 : F805 6004 F8        		dc.b $F8, 5, $60, 4, $F8
(1)   19/    CF1E : 01                  byte_CE1A:	dc.b 1
(1)   20/    CF1F : F805 2008 F8        		dc.b $F8, 5, $20, 8, $F8
(1)   21/    CF24 : 01                  byte_CE20:	dc.b 1
(1)   22/    CF25 : F805 200C F8        		dc.b $F8, 5, $20, $C, $F8
(1)   23/    CF2A : 00                  byte_CE26:	dc.b 0			; Blank frame
(1)   24/    CF2B : (MACRO)             		align 2
(1)   24/    CF2B :  (MACRO-2)                  cnop 0,2
(1)   24/    CF2B :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   24/    CF2B : =$17                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   24/    CF2C :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   15834/    CF2C :                     
   15835/    CF2C :                     ; ===========================================================================
   15836/    CF2C :                     ; ---------------------------------------------------------------------------
   15837/    CF2C :                     ; Object 36 - spikes
   15838/    CF2C :                     ; ---------------------------------------------------------------------------
   15839/    CF2C :                     
   15840/    CF2C :                     Obj36:					; XREF: Obj_Index
   15841/    CF2C : 7000                		moveq	#0,d0
   15842/    CF2E : 1028 0024           		move.b	$24(a0),d0
   15843/    CF32 : 323B 0006           		move.w	Obj36_Index(pc,d0.w),d1
   15844/    CF36 : 4EFB 1002           		jmp	Obj36_Index(pc,d1.w)
   15845/    CF3A :                     ; ===========================================================================
   15846/    CF3A : 0010                Obj36_Index:	dc.w Obj36_Main-Obj36_Index
   15847/    CF3C : 005A                		dc.w Obj36_Solid-Obj36_Index
   15848/    CF3E :                     
   15849/    CF3E : 0014                Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
   15850/    CF40 : 0110                		dc.b 1,	$10
   15851/    CF42 : 0204                		dc.b 2,	4
   15852/    CF44 : 031C                		dc.b 3,	$1C
   15853/    CF46 : 0440                		dc.b 4,	$40
   15854/    CF48 : 0510                		dc.b 5,	$10
   15855/    CF4A :                     ; ===========================================================================
   15856/    CF4A :                     
   15857/    CF4A :                     Obj36_Main:				; XREF: Obj36_Index
   15858/    CF4A : 5428 0024           		addq.b	#2,$24(a0)
   15859/    CF4E : 217C 0000 D0F2 0004 		move.l	#Map_obj36,4(a0)
   15860/    CF56 : 317C 051B 0002      		move.w	#$51B,2(a0)
   15861/    CF5C : 0028 0004 0001      		ori.b	#4,1(a0)
   15862/    CF62 : 117C 0004 0018      		move.b	#4,$18(a0)
   15863/    CF68 : 1028 0028           		move.b	$28(a0),d0
   15864/    CF6C : 0228 000F 0028      		andi.b	#$F,$28(a0)
   15865/    CF72 : 0240 00F0           		andi.w	#$F0,d0
   15866/    CF76 : 43F9 0000 CF3E      		lea	(Obj36_Var).l,a1
   15867/    CF7C : E648                		lsr.w	#3,d0
   15868/    CF7E : D2C0                		adda.w	d0,a1
   15869/    CF80 : 1159 001A           		move.b	(a1)+,$1A(a0)
   15870/    CF84 : 1159 0019           		move.b	(a1)+,$19(a0)
   15871/    CF88 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   15872/    CF8E : 3168 000C 0032      		move.w	$C(a0),$32(a0)
   15873/    CF94 :                     
   15874/    CF94 :                     Obj36_Solid:				; XREF: Obj36_Index
   15875/    CF94 : 6100 00BA           		bsr.w	Obj36_Type0x	; make the object move
   15876/    CF98 : 343C 0004           		move.w	#4,d2
   15877/    CF9C : 0C28 0005 001A      		cmpi.b	#5,$1A(a0)	; is object type $5x ?
   15878/    CFA2 : 670C                		beq.s	Obj36_SideWays	; if yes, branch
   15879/    CFA4 : 0C28 0001 001A      		cmpi.b	#1,$1A(a0)	; is object type $1x ?
   15880/    CFAA : 6624                		bne.s	Obj36_Upright	; if not, branch
   15881/    CFAC : 343C 0014           		move.w	#$14,d2
   15882/    CFB0 :                     
   15883/    CFB0 :                     ; Spikes types $1x and $5x face	sideways
   15884/    CFB0 :                     
   15885/    CFB0 :                     Obj36_SideWays:				; XREF: Obj36_Solid
   15886/    CFB0 : 323C 001B           		move.w	#$1B,d1
   15887/    CFB4 : 3602                		move.w	d2,d3
   15888/    CFB6 : 5243                		addq.w	#1,d3
   15889/    CFB8 : 3828 0008           		move.w	8(a0),d4
   15890/    CFBC : 6100 2B28           		bsr.w	SolidObject
   15891/    CFC0 : 0828 0003 0022      		btst	#3,$22(a0)
   15892/    CFC6 : 6664                		bne.s	Obj36_Display
   15893/    CFC8 : 0C44 0001           		cmpi.w	#1,d4
   15894/    CFCC : 6728                		beq.s	Obj36_Hurt
   15895/    CFCE : 605C                		bra.s	Obj36_Display
   15896/    CFD0 :                     ; ===========================================================================
   15897/    CFD0 :                     
   15898/    CFD0 :                     ; Spikes types $0x, $2x, $3x and $4x face up or	down
   15899/    CFD0 :                     
   15900/    CFD0 :                     Obj36_Upright:				; XREF: Obj36_Solid
   15901/    CFD0 : 7200                		moveq	#0,d1
   15902/    CFD2 : 1228 0019           		move.b	$19(a0),d1
   15903/    CFD6 : 0641 000B           		addi.w	#$B,d1
   15904/    CFDA : 343C 0010           		move.w	#$10,d2
   15905/    CFDE : 363C 0011           		move.w	#$11,d3
   15906/    CFE2 : 3828 0008           		move.w	8(a0),d4
   15907/    CFE6 : 6100 2AFE           		bsr.w	SolidObject
   15908/    CFEA : 0828 0003 0022      		btst	#3,$22(a0)
   15909/    CFF0 : 6604                		bne.s	Obj36_Hurt
   15910/    CFF2 : 4A44                		tst.w	d4
   15911/    CFF4 : 6A36                		bpl.s	Obj36_Display
   15912/    CFF6 :                     
   15913/    CFF6 :                     Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
   15914/    CFF6 : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; is Sonic invincible?
   15915/    CFFA : 6630                		bne.s	Obj36_Display	; if yes, branch
   15916/    CFFC : 4A78 D030           		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
   15917/    D000 : 662A                		bne.s	Obj36_Display	; +++ if yes, branch
   15918/    D002 : 2F08                		move.l	a0,-(sp)
   15919/    D004 : 2448                		movea.l	a0,a2
   15920/    D006 : 41F8 D000           		lea	($FFFFD000).w,a0
   15921/    D00A : 0C28 0004 0024      		cmpi.b	#4,$24(a0)
   15922/    D010 : 6418                		bcc.s	loc_CF20
   15923/    D012 : 2628 000C           		move.l	$C(a0),d3
   15924/    D016 : 3028 0012           		move.w	$12(a0),d0
   15925/    D01A : 48C0                		ext.l	d0
   15926/    D01C : E180                		asl.l	#8,d0
   15927/    D01E : 9680                		sub.l	d0,d3
   15928/    D020 : 2143 000C           		move.l	d3,$C(a0)
   15929/    D024 : 4EB9 0001 B28E      		jsr	(HurtSonic).l
   15930/    D02A :                     
   15931/    D02A :                     loc_CF20:
   15932/    D02A : 205F                		movea.l	(sp)+,a0
   15933/    D02C :                     
   15934/    D02C :                     Obj36_Display:
   15935/    D02C : 6100 06E0           		bsr.w	DisplaySprite
   15936/    D030 : 3028 0030           		move.w	$30(a0),d0
   15937/    D034 : 0240 FF80           		andi.w	#$FF80,d0
   15938/    D038 : 3238 F700           		move.w	($FFFFF700).w,d1
   15939/    D03C : 0441 0080           		subi.w	#$80,d1
   15940/    D040 : 0241 FF80           		andi.w	#$FF80,d1
   15941/    D044 : 9041                		sub.w	d1,d0
   15942/    D046 : 0C40 0280           		cmpi.w	#$280,d0
   15943/    D04A : 6200 06FE           		bhi.w	DeleteObject
   15944/    D04E : 4E75                		rts	
   15945/    D050 :                     ; ===========================================================================
   15946/    D050 :                     
   15947/    D050 :                     Obj36_Type0x:				; XREF: Obj36_Solid
   15948/    D050 : 7000                		moveq	#0,d0
   15949/    D052 : 1028 0028           		move.b	$28(a0),d0
   15950/    D056 : D040                		add.w	d0,d0
   15951/    D058 : 323B 0006           		move.w	Obj36_TypeIndex(pc,d0.w),d1
   15952/    D05C : 4EFB 1002           		jmp	Obj36_TypeIndex(pc,d1.w)
   15953/    D060 :                     ; ===========================================================================
   15954/    D060 : 0006                Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
   15955/    D062 : 0008                		dc.w Obj36_Type01-Obj36_TypeIndex
   15956/    D064 : 001C                		dc.w Obj36_Type02-Obj36_TypeIndex
   15957/    D066 :                     ; ===========================================================================
   15958/    D066 :                     
   15959/    D066 :                     Obj36_Type00:				; XREF: Obj36_TypeIndex
   15960/    D066 : 4E75                		rts			; don"t move the object
   15961/    D068 :                     ; ===========================================================================
   15962/    D068 :                     
   15963/    D068 :                     Obj36_Type01:				; XREF: Obj36_TypeIndex
   15964/    D068 : 6100 0026           		bsr.w	Obj36_Wait
   15965/    D06C : 7000                		moveq	#0,d0
   15966/    D06E : 1028 0034           		move.b	$34(a0),d0
   15967/    D072 : D068 0032           		add.w	$32(a0),d0
   15968/    D076 : 3140 000C           		move.w	d0,$C(a0)	; move the object vertically
   15969/    D07A : 4E75                		rts	
   15970/    D07C :                     ; ===========================================================================
   15971/    D07C :                     
   15972/    D07C :                     Obj36_Type02:				; XREF: Obj36_TypeIndex
   15973/    D07C : 6100 0012           		bsr.w	Obj36_Wait
   15974/    D080 : 7000                		moveq	#0,d0
   15975/    D082 : 1028 0034           		move.b	$34(a0),d0
   15976/    D086 : D068 0030           		add.w	$30(a0),d0
   15977/    D08A : 3140 0008           		move.w	d0,8(a0)	; move the object horizontally
   15978/    D08E : 4E75                		rts	
   15979/    D090 :                     ; ===========================================================================
   15980/    D090 :                     
   15981/    D090 :                     Obj36_Wait:
   15982/    D090 : 4A68 0038           		tst.w	$38(a0)		; is time delay	= zero?
   15983/    D094 : 6718                		beq.s	loc_CFA4	; if yes, branch
   15984/    D096 : 5368 0038           		subq.w	#1,$38(a0)	; subtract 1 from time delay
   15985/    D09A : 6654                		bne.s	locret_CFE6
   15986/    D09C : 4A28 0001           		tst.b	1(a0)
   15987/    D0A0 : 6A4E                		bpl.s	locret_CFE6
   15988/    D0A2 : 303C 00B6           		move.w	#$B6,d0
   15989/    D0A6 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
   15990/    D0AC : 6042                		bra.s	locret_CFE6
   15991/    D0AE :                     ; ===========================================================================
   15992/    D0AE :                     
   15993/    D0AE :                     loc_CFA4:
   15994/    D0AE : 4A68 0036           		tst.w	$36(a0)
   15995/    D0B2 : 671C                		beq.s	loc_CFC6
   15996/    D0B4 : 0468 0800 0034      		subi.w	#$800,$34(a0)
   15997/    D0BA : 6434                		bcc.s	locret_CFE6
   15998/    D0BC : 317C 0000 0034      		move.w	#0,$34(a0)
   15999/    D0C2 : 317C 0000 0036      		move.w	#0,$36(a0)
   16000/    D0C8 : 317C 003C 0038      		move.w	#60,$38(a0)	; set time delay to 1 second
   16001/    D0CE : 6020                		bra.s	locret_CFE6
   16002/    D0D0 :                     ; ===========================================================================
   16003/    D0D0 :                     
   16004/    D0D0 :                     loc_CFC6:
   16005/    D0D0 : 0668 0800 0034      		addi.w	#$800,$34(a0)
   16006/    D0D6 : 0C68 2000 0034      		cmpi.w	#$2000,$34(a0)
   16007/    D0DC : 6512                		bcs.s	locret_CFE6
   16008/    D0DE : 317C 2000 0034      		move.w	#$2000,$34(a0)
   16009/    D0E4 : 317C 0001 0036      		move.w	#1,$36(a0)
   16010/    D0EA : 317C 003C 0038      		move.w	#60,$38(a0)	; set time delay to 1 second
   16011/    D0F0 :                     
   16012/    D0F0 :                     locret_CFE6:
   16013/    D0F0 : 4E75                		rts	
   16014/    D0F2 :                     ; ===========================================================================
   16015/    D0F2 :                     ; ---------------------------------------------------------------------------
   16016/    D0F2 :                     ; Sprite mappings - spikes
   16017/    D0F2 :                     ; ---------------------------------------------------------------------------
   16018/    D0F2 :                     Map_obj36:
   16019/    D0F2 :                     		include	"_maps/obj36.asm"
(1)    1/    D0F2 :                     ; ---------------------------------------------------------------------------
(1)    2/    D0F2 :                     ; Sprite mappings - spikes
(1)    3/    D0F2 :                     ; ---------------------------------------------------------------------------
(1)    4/    D0F2 : 000C                		dc.w byte_CFF4-Map_obj36
(1)    5/    D0F4 : 001C                		dc.w byte_D004-Map_obj36
(1)    6/    D0F6 : 002C                		dc.w byte_D014-Map_obj36
(1)    7/    D0F8 : 0032                		dc.w byte_D01A-Map_obj36
(1)    8/    D0FA : 0042                		dc.w byte_D02A-Map_obj36
(1)    9/    D0FC : 0061                		dc.w byte_D049-Map_obj36
(1)   10/    D0FE : 03                  byte_CFF4:	dc.b 3			; 3 spikes
(1)   11/    D0FF : F003 0004 EC        		dc.b $F0, 3, 0,	4, $EC
(1)   12/    D104 : F003 0004 FC        		dc.b $F0, 3, 0,	4, $FC
(1)   13/    D109 : F003 0004 0C        		dc.b $F0, 3, 0,	4, $C
(1)   14/    D10E : 03                  byte_D004:	dc.b 3			; 3 spikes facing sideways
(1)   15/    D10F : EC0C 0000 F0        		dc.b $EC, $C, 0, 0, $F0
(1)   16/    D114 : FC0C 0000 F0        		dc.b $FC, $C, 0, 0, $F0
(1)   17/    D119 : 0C0C 0000 F0        		dc.b $C, $C, 0,	0, $F0
(1)   18/    D11E : 01                  byte_D014:	dc.b 1			; 1 spike
(1)   19/    D11F : F003 0004 FC        		dc.b $F0, 3, 0,	4, $FC
(1)   20/    D124 : 03                  byte_D01A:	dc.b 3			; 3 spikes widely spaced
(1)   21/    D125 : F003 0004 E4        		dc.b $F0, 3, 0,	4, $E4
(1)   22/    D12A : F003 0004 FC        		dc.b $F0, 3, 0,	4, $FC
(1)   23/    D12F : F003 0004 14        		dc.b $F0, 3, 0,	4, $14
(1)   24/    D134 : 06                  byte_D02A:	dc.b 6			; 6 spikes
(1)   25/    D135 : F003 0004 C0        		dc.b $F0, 3, 0,	4, $C0
(1)   26/    D13A : F003 0004 D8        		dc.b $F0, 3, 0,	4, $D8
(1)   27/    D13F : F003 0004 F0        		dc.b $F0, 3, 0,	4, $F0
(1)   28/    D144 : F003 0004 08        		dc.b $F0, 3, 0,	4, 8
(1)   29/    D149 : F003 0004 20        		dc.b $F0, 3, 0,	4, $20
(1)   30/    D14E : F003 0004 38        		dc.b $F0, 3, 0,	4, $38
(1)   31/    D153 : 01                  byte_D049:	dc.b 1			; 1 spike facing sideways
(1)   32/    D154 : FC0C 0000 F0        		dc.b $FC, $C, 0, 0, $F0
(1)   33/    D159 : (MACRO)             		align 2
(1)   33/    D159 :  (MACRO-2)                  cnop 0,2
(1)   33/    D159 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   33/    D159 : =$18                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   33/    D15A :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   16020/    D15A :                     
   16021/    D15A :                     ; ===========================================================================
   16022/    D15A :                     ; ---------------------------------------------------------------------------
   16023/    D15A :                     ; Object 3B - purple rock (GHZ)
   16024/    D15A :                     ; ---------------------------------------------------------------------------
   16025/    D15A :                     
   16026/    D15A :                     Obj3B:					; XREF: Obj_Index
   16027/    D15A : 7000                		moveq	#0,d0
   16028/    D15C : 1028 0024           		move.b	$24(a0),d0
   16029/    D160 : 323B 0006           		move.w	Obj3B_Index(pc,d0.w),d1
   16030/    D164 : 4EFB 1002           		jmp	Obj3B_Index(pc,d1.w)
   16031/    D168 :                     ; ===========================================================================
   16032/    D168 : 0004                Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
   16033/    D16A : 0028                		dc.w Obj3B_Solid-Obj3B_Index
   16034/    D16C :                     ; ===========================================================================
   16035/    D16C :                     
   16036/    D16C :                     Obj3B_Main:				; XREF: Obj3B_Index
   16037/    D16C : 5428 0024           		addq.b	#2,$24(a0)
   16038/    D170 : 217C 0000 D218 0004 		move.l	#Map_obj3B,4(a0)
   16039/    D178 : 317C 63D0 0002      		move.w	#$63D0,2(a0)
   16040/    D17E : 117C 0004 0001      		move.b	#4,1(a0)
   16041/    D184 : 117C 0013 0019      		move.b	#$13,$19(a0)
   16042/    D18A : 117C 0004 0018      		move.b	#4,$18(a0)
   16043/    D190 :                     
   16044/    D190 :                     Obj3B_Solid:				; XREF: Obj3B_Index
   16045/    D190 : 323C 001B           		move.w	#$1B,d1
   16046/    D194 : 343C 0010           		move.w	#$10,d2
   16047/    D198 : 363C 0010           		move.w	#$10,d3
   16048/    D19C : 3828 0008           		move.w	8(a0),d4
   16049/    D1A0 : 6100 2944           		bsr.w	SolidObject
   16050/    D1A4 : 6100 0568           		bsr.w	DisplaySprite
   16051/    D1A8 : 3028 0008           		move.w	8(a0),d0
   16052/    D1AC : 0240 FF80           		andi.w	#$FF80,d0
   16053/    D1B0 : 3238 F700           		move.w	($FFFFF700).w,d1
   16054/    D1B4 : 0441 0080           		subi.w	#$80,d1
   16055/    D1B8 : 0241 FF80           		andi.w	#$FF80,d1
   16056/    D1BC : 9041                		sub.w	d1,d0
   16057/    D1BE : 0C40 0280           		cmpi.w	#$280,d0
   16058/    D1C2 : 6200 0586           		bhi.w	DeleteObject
   16059/    D1C6 : 4E75                		rts	
   16060/    D1C8 :                     ; ===========================================================================
   16061/    D1C8 :                     ; ---------------------------------------------------------------------------
   16062/    D1C8 :                     ; Object 49 - waterfall	sound effect (GHZ)
   16063/    D1C8 :                     ; ---------------------------------------------------------------------------
   16064/    D1C8 :                     
   16065/    D1C8 :                     Obj49:					; XREF: Obj_Index
   16066/    D1C8 : 7000                		moveq	#0,d0
   16067/    D1CA : 1028 0024           		move.b	$24(a0),d0
   16068/    D1CE : 323B 0006           		move.w	Obj49_Index(pc,d0.w),d1
   16069/    D1D2 : 4EFB 1002           		jmp	Obj49_Index(pc,d1.w)
   16070/    D1D6 :                     ; ===========================================================================
   16071/    D1D6 : 0004                Obj49_Index:	dc.w Obj49_Main-Obj49_Index
   16072/    D1D8 : 000E                		dc.w Obj49_PlaySnd-Obj49_Index
   16073/    D1DA :                     ; ===========================================================================
   16074/    D1DA :                     
   16075/    D1DA :                     Obj49_Main:				; XREF: Obj49_Index
   16076/    D1DA : 5428 0024           		addq.b	#2,$24(a0)
   16077/    D1DE : 117C 0004 0001      		move.b	#4,1(a0)
   16078/    D1E4 :                     
   16079/    D1E4 :                     Obj49_PlaySnd:				; XREF: Obj49_Index
   16080/    D1E4 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   16081/    D1E8 : 0200 003F           		andi.b	#$3F,d0
   16082/    D1EC : 660A                		bne.s	Obj49_ChkDel
   16083/    D1EE : 303C 00D0           		move.w	#$D0,d0
   16084/    D1F2 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play waterfall sound
   16085/    D1F8 :                     
   16086/    D1F8 :                     Obj49_ChkDel:
   16087/    D1F8 : 3028 0008           		move.w	8(a0),d0
   16088/    D1FC : 0240 FF80           		andi.w	#$FF80,d0
   16089/    D200 : 3238 F700           		move.w	($FFFFF700).w,d1
   16090/    D204 : 0441 0080           		subi.w	#$80,d1
   16091/    D208 : 0241 FF80           		andi.w	#$FF80,d1
   16092/    D20C : 9041                		sub.w	d1,d0
   16093/    D20E : 0C40 0280           		cmpi.w	#$280,d0
   16094/    D212 : 6200 0536           		bhi.w	DeleteObject
   16095/    D216 : 4E75                		rts	
   16096/    D218 :                     ; ===========================================================================
   16097/    D218 :                     ; ---------------------------------------------------------------------------
   16098/    D218 :                     ; Sprite mappings - purple rock	(GHZ)
   16099/    D218 :                     ; ---------------------------------------------------------------------------
   16100/    D218 :                     Map_obj3B:
   16101/    D218 :                     		include	"_maps/obj3B.asm"
(1)    1/    D218 :                     ; ---------------------------------------------------------------------------
(1)    2/    D218 :                     ; Sprite mappings - purple rock	(GHZ)
(1)    3/    D218 :                     ; ---------------------------------------------------------------------------
(1)    4/    D218 : 0002                		dc.w byte_D110-Map_obj3B
(1)    5/    D21A : 02                  byte_D110:	dc.b 2
(1)    6/    D21B : F00B 0000 E8        		dc.b $F0, $B, 0, 0, $E8
(1)    7/    D220 : F00B 000C 00        		dc.b $F0, $B, 0, $C, 0
(1)    8/    D225 : (MACRO)             		align 2
(1)    8/    D225 :  (MACRO-2)                  cnop 0,2
(1)    8/    D225 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)    8/    D225 : =$19                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)    8/    D226 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   16102/    D226 :                     
   16103/    D226 :                     ; ===========================================================================
   16104/    D226 :                     ; ---------------------------------------------------------------------------
   16105/    D226 :                     ; Object 3C - smashable	wall (GHZ, SLZ)
   16106/    D226 :                     ; ---------------------------------------------------------------------------
   16107/    D226 :                     
   16108/    D226 :                     Obj3C:					; XREF: Obj_Index
   16109/    D226 : 7000                		moveq	#0,d0
   16110/    D228 : 1028 0024           		move.b	$24(a0),d0
   16111/    D22C : 323B 000A           		move.w	Obj3C_Index(pc,d0.w),d1
   16112/    D230 : 4EBB 1006           		jsr	Obj3C_Index(pc,d1.w)
   16113/    D234 : 6000 2586           		bra.w	MarkObjGone
   16114/    D238 :                     ; ===========================================================================
   16115/    D238 : 0006                Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
   16116/    D23A : 0030                		dc.w Obj3C_Solid-Obj3C_Index
   16117/    D23C : 00A8                		dc.w Obj3C_FragMove-Obj3C_Index
   16118/    D23E :                     ; ===========================================================================
   16119/    D23E :                     
   16120/    D23E :                     Obj3C_Main:				; XREF: Obj3C_Index
   16121/    D23E : 5428 0024           		addq.b	#2,$24(a0)
   16122/    D242 : 217C 0000 D3C0 0004 		move.l	#Map_obj3C,4(a0)
   16123/    D24A : 317C 450F 0002      		move.w	#$450F,2(a0)
   16124/    D250 : 117C 0004 0001      		move.b	#4,1(a0)
   16125/    D256 : 117C 0010 0019      		move.b	#$10,$19(a0)
   16126/    D25C : 117C 0004 0018      		move.b	#4,$18(a0)
   16127/    D262 : 1168 0028 001A      		move.b	$28(a0),$1A(a0)
   16128/    D268 :                     
   16129/    D268 :                     Obj3C_Solid:				; XREF: Obj3C_Index
   16130/    D268 : 3178 D010 0030      		move.w	($FFFFD010).w,$30(a0) ;	load Sonic"s horizontal speed
   16131/    D26E : 323C 001B           		move.w	#$1B,d1
   16132/    D272 : 343C 0020           		move.w	#$20,d2
   16133/    D276 : 363C 0020           		move.w	#$20,d3
   16134/    D27A : 3828 0008           		move.w	8(a0),d4
   16135/    D27E : 6100 2866           		bsr.w	SolidObject
   16136/    D282 : 0828 0005 0022      		btst	#5,$22(a0)
   16137/    D288 : 6602                		bne.s	Obj3C_ChkRoll
   16138/    D28A :                     
   16139/    D28A :                     locret_D180:
   16140/    D28A : 4E75                		rts	
   16141/    D28C :                     ; ===========================================================================
   16142/    D28C :                     
   16143/    D28C :                     Obj3C_ChkRoll:				; XREF: Obj3C_Solid
   16144/    D28C : 0C29 0002 001C      		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
   16145/    D292 : 66F6                		bne.s	locret_D180	; if not, branch
   16146/    D294 : 3028 0030           		move.w	$30(a0),d0
   16147/    D298 : 6A02                		bpl.s	Obj3C_ChkSpeed
   16148/    D29A : 4440                		neg.w	d0
   16149/    D29C :                     
   16150/    D29C :                     Obj3C_ChkSpeed:
   16151/    D29C : 0C40 0480           		cmpi.w	#$480,d0	; is Sonic"s speed $480 or higher?
   16152/    D2A0 : 65E8                		bcs.s	locret_D180	; if not, branch
   16153/    D2A2 : 3368 0030 0010      		move.w	$30(a0),$10(a1)
   16154/    D2A8 : 5869 0008           		addq.w	#4,8(a1)
   16155/    D2AC : 49F9 0000 D380      		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
   16156/    D2B2 : 3028 0008           		move.w	8(a0),d0
   16157/    D2B6 : B069 0008           		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
   16158/    D2BA : 650A                		bcs.s	Obj3C_Smash	; if yes, branch
   16159/    D2BC : 5169 0008           		subq.w	#8,8(a1)
   16160/    D2C0 : 49F9 0000 D3A0      		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
   16161/    D2C6 :                     
   16162/    D2C6 :                     Obj3C_Smash:
   16163/    D2C6 : 3369 0010 0014      		move.w	$10(a1),$14(a1)
   16164/    D2CC : 08A8 0005 0022      		bclr	#5,$22(a0)
   16165/    D2D2 : 08A9 0005 0022      		bclr	#5,$22(a1)
   16166/    D2D8 : 7207                		moveq	#7,d1		; load 8 fragments
   16167/    D2DA : 343C 0070           		move.w	#$70,d2
   16168/    D2DE : 6118                		bsr.s	SmashObject
   16169/    D2E0 :                     
   16170/    D2E0 :                     Obj3C_FragMove:				; XREF: Obj3C_Index
   16171/    D2E0 : 6100 0406           		bsr.w	SpeedToPos
   16172/    D2E4 : 0668 0070 0012      		addi.w	#$70,$12(a0)	; make fragment	fall faster
   16173/    D2EA : 6100 0422           		bsr.w	DisplaySprite
   16174/    D2EE : 4A28 0001           		tst.b	1(a0)
   16175/    D2F2 : 6A00 0456           		bpl.w	DeleteObject
   16176/    D2F6 : 4E75                		rts	
   16177/    D2F8 :                     
   16178/    D2F8 :                     ; ---------------------------------------------------------------------------
   16179/    D2F8 :                     ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
   16180/    D2F8 :                     ; ---------------------------------------------------------------------------
   16181/    D2F8 :                     
   16182/    D2F8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16183/    D2F8 :                     
   16184/    D2F8 :                     
   16185/    D2F8 :                     SmashObject:				; XREF: Obj3C_Smash
   16186/    D2F8 : 7000                		moveq	#0,d0
   16187/    D2FA : 1028 001A           		move.b	$1A(a0),d0
   16188/    D2FE : D040                		add.w	d0,d0
   16189/    D300 : 2668 0004           		movea.l	4(a0),a3
   16190/    D304 : D6F3 0000           		adda.w	(a3,d0.w),a3
   16191/    D308 : 524B                		addq.w	#1,a3
   16192/    D30A : 08E8 0005 0001      		bset	#5,1(a0)
   16193/    D310 : (MACRO)             		_move.b	0(a0),d4
   16193/    D310 :  (MACRO-2)                          insn2op move.b, 0(a0),d4
   16193/    D310 : 1828 0001                                   !move.b   1+0(a0),d4
   16193/    D313 :                                             !org    *-1
   16193/    D313 : 00                                          !dc.b   0
   16194/    D314 : 1A28 0001           		move.b	1(a0),d5
   16195/    D318 : 2248                		movea.l	a0,a1
   16196/    D31A : 6008                		bra.s	Smash_LoadFrag
   16197/    D31C :                     ; ===========================================================================
   16198/    D31C :                     
   16199/    D31C :                     Smash_Loop:
   16200/    D31C : 6100 0878           		bsr.w	SingleObjLoad
   16201/    D320 : 6654                		bne.s	Smash_PlaySnd
   16202/    D322 : 5A4B                		addq.w	#5,a3
   16203/    D324 :                     
   16204/    D324 :                     Smash_LoadFrag:				; XREF: SmashObject
   16205/    D324 : 137C 0004 0024      		move.b	#4,$24(a1)
   16206/    D32A : (MACRO)             		_move.b	d4,0(a1)
   16206/    D32A :  (MACRO-2)                          insn2op move.b, d4,0(a1)
   16206/    D32A : 1344 0001                                   !move.b   d4,1+0(a1)
   16206/    D32D :                                             !org    *-1
   16206/    D32D : 00                                          !dc.b   0
   16207/    D32E : 234B 0004           		move.l	a3,4(a1)
   16208/    D332 : 1345 0001           		move.b	d5,1(a1)
   16209/    D336 : 3368 0008 0008      		move.w	8(a0),8(a1)
   16210/    D33C : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   16211/    D342 : 3368 0002 0002      		move.w	2(a0),2(a1)
   16212/    D348 : 1368 0018 0018      		move.b	$18(a0),$18(a1)
   16213/    D34E : 1368 0019 0019      		move.b	$19(a0),$19(a1)
   16214/    D354 : 335C 0010           		move.w	(a4)+,$10(a1)
   16215/    D358 : 335C 0012           		move.w	(a4)+,$12(a1)
   16216/    D35C : B3C8                		cmpa.l	a0,a1
   16217/    D35E : 6412                		bcc.s	loc_D268
   16218/    D360 : 2F08                		move.l	a0,-(sp)
   16219/    D362 : 2049                		movea.l	a1,a0
   16220/    D364 : 6100 0382           		bsr.w	SpeedToPos
   16221/    D368 : D568 0012           		add.w	d2,$12(a0)
   16222/    D36C : 205F                		movea.l	(sp)+,a0
   16223/    D36E : 6100 03BC           		bsr.w	DisplaySprite2
   16224/    D372 :                     
   16225/    D372 :                     loc_D268:
   16226/    D372 : 51C9 FFA8           		dbf	d1,Smash_Loop
   16227/    D376 :                     
   16228/    D376 :                     Smash_PlaySnd:
   16229/    D376 : 303C 00CB           		move.w	#$CB,d0
   16230/    D37A : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play smashing sound
   16231/    D380 :                     ; End of function SmashObject
   16232/    D380 :                     
   16233/    D380 :                     ; ===========================================================================
   16234/    D380 :                     ; Smashed block	fragment speeds
   16235/    D380 :                     ;
   16236/    D380 : 0400 FB00           Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
   16237/    D384 : 0600 FF00           		dc.w $600, $FF00
   16238/    D388 : 0600 0100           		dc.w $600, $100
   16239/    D38C : 0400 0500           		dc.w $400, $500
   16240/    D390 : 0600 FA00           		dc.w $600, $FA00
   16241/    D394 : 0800 FE00           		dc.w $800, $FE00
   16242/    D398 : 0800 0200           		dc.w $800, $200
   16243/    D39C : 0600 0600           		dc.w $600, $600
   16244/    D3A0 :                     
   16245/    D3A0 : FA00 FA00           Obj3C_FragSpd2:	dc.w $FA00, $FA00
   16246/    D3A4 : F800 FE00           		dc.w $F800, $FE00
   16247/    D3A8 : F800 0200           		dc.w $F800, $200
   16248/    D3AC : FA00 0600           		dc.w $FA00, $600
   16249/    D3B0 : FC00 FB00           		dc.w $FC00, $FB00
   16250/    D3B4 : FA00 FF00           		dc.w $FA00, $FF00
   16251/    D3B8 : FA00 0100           		dc.w $FA00, $100
   16252/    D3BC : FC00 0500           		dc.w $FC00, $500
   16253/    D3C0 :                     ; ---------------------------------------------------------------------------
   16254/    D3C0 :                     ; Sprite mappings - smashable walls (GHZ, SLZ)
   16255/    D3C0 :                     ; ---------------------------------------------------------------------------
   16256/    D3C0 :                     Map_obj3C:
   16257/    D3C0 :                     		include	"_maps/obj3C.asm"
(1)    1/    D3C0 :                     ; ---------------------------------------------------------------------------
(1)    2/    D3C0 :                     ; Sprite mappings - smashable walls (GHZ, SLZ)
(1)    3/    D3C0 :                     ; ---------------------------------------------------------------------------
(1)    4/    D3C0 : 0006                		dc.w byte_D2BC-Map_obj3C
(1)    5/    D3C2 : 002F                		dc.w byte_D2E5-Map_obj3C
(1)    6/    D3C4 : 0058                		dc.w byte_D30E-Map_obj3C
(1)    7/    D3C6 : 08                  byte_D2BC:	dc.b 8
(1)    8/    D3C7 : E005 0000 F0        		dc.b $E0, 5, 0,	0, $F0
(1)    9/    D3CC : F005 0000 F0        		dc.b $F0, 5, 0,	0, $F0
(1)   10/    D3D1 : 0005 0000 F0        		dc.b 0,	5, 0, 0, $F0
(1)   11/    D3D6 : 1005 0000 F0        		dc.b $10, 5, 0,	0, $F0
(1)   12/    D3DB : E005 0004 00        		dc.b $E0, 5, 0,	4, 0
(1)   13/    D3E0 : F005 0004 00        		dc.b $F0, 5, 0,	4, 0
(1)   14/    D3E5 : 0005 0004 00        		dc.b 0,	5, 0, 4, 0
(1)   15/    D3EA : 1005 0004 00        		dc.b $10, 5, 0,	4, 0
(1)   16/    D3EF : 08                  byte_D2E5:	dc.b 8
(1)   17/    D3F0 : E005 0004 F0        		dc.b $E0, 5, 0,	4, $F0
(1)   18/    D3F5 : F005 0004 F0        		dc.b $F0, 5, 0,	4, $F0
(1)   19/    D3FA : 0005 0004 F0        		dc.b 0,	5, 0, 4, $F0
(1)   20/    D3FF : 1005 0004 F0        		dc.b $10, 5, 0,	4, $F0
(1)   21/    D404 : E005 0004 00        		dc.b $E0, 5, 0,	4, 0
(1)   22/    D409 : F005 0004 00        		dc.b $F0, 5, 0,	4, 0
(1)   23/    D40E : 0005 0004 00        		dc.b 0,	5, 0, 4, 0
(1)   24/    D413 : 1005 0004 00        		dc.b $10, 5, 0,	4, 0
(1)   25/    D418 : 08                  byte_D30E:	dc.b 8
(1)   26/    D419 : E005 0004 F0        		dc.b $E0, 5, 0,	4, $F0
(1)   27/    D41E : F005 0004 F0        		dc.b $F0, 5, 0,	4, $F0
(1)   28/    D423 : 0005 0004 F0        		dc.b 0,	5, 0, 4, $F0
(1)   29/    D428 : 1005 0004 F0        		dc.b $10, 5, 0,	4, $F0
(1)   30/    D42D : E005 0008 00        		dc.b $E0, 5, 0,	8, 0
(1)   31/    D432 : F005 0008 00        		dc.b $F0, 5, 0,	8, 0
(1)   32/    D437 : 0005 0008 00        		dc.b 0,	5, 0, 8, 0
(1)   33/    D43C : 1005 0008 00        		dc.b $10, 5, 0,	8, 0
(1)   34/    D441 : (MACRO)             		align 2
(1)   34/    D441 :  (MACRO-2)                  cnop 0,2
(1)   34/    D441 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   34/    D441 : =$1A                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   34/    D442 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   16258/    D442 :                     
   16259/    D442 :                     ; ---------------------------------------------------------------------------
   16260/    D442 :                     ; Object code loading subroutine
   16261/    D442 :                     ; ---------------------------------------------------------------------------
   16262/    D442 :                     
   16263/    D442 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16264/    D442 :                     
   16265/    D442 :                     
   16266/    D442 :                     ObjectsLoad:				; XREF: TitleScreen; et al
   16267/    D442 : 41F8 D000           		lea	($FFFFD000).w,a0 ; set address for object RAM
   16268/    D446 : 7E7F                		moveq	#$7F,d7
   16269/    D448 : 7000                		moveq	#0,d0
   16270/    D44A : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
   16271/    D450 : 641A                		bcc.s	loc_D362
   16272/    D452 :                     
   16273/    D452 :                     loc_D348:
   16274/    D452 : 1010                		move.b	(a0),d0		; load object number from RAM
   16275/    D454 : 670C                		beq.s	loc_D358
   16276/    D456 : D040                		add.w	d0,d0
   16277/    D458 : D040                		add.w	d0,d0
   16278/    D45A : 227B 002C           		movea.l	Obj_Index-4(pc,d0.w),a1
   16279/    D45E : 4E91                		jsr	(a1)		; run the object"s code
   16280/    D460 : 7000                		moveq	#0,d0
   16281/    D462 :                     
   16282/    D462 :                     loc_D358:
   16283/    D462 : 41E8 0040           		lea	$40(a0),a0	; next object
   16284/    D466 : 51CF FFEA           		dbf	d7,loc_D348
   16285/    D46A : 4E75                		rts	
   16286/    D46C :                     ; ===========================================================================
   16287/    D46C :                     
   16288/    D46C :                     loc_D362:
   16289/    D46C : 7E1F                		moveq	#$1F,d7
   16290/    D46E : 61E2                		bsr.s	loc_D348
   16291/    D470 : 7E5F                		moveq	#$5F,d7
   16292/    D472 :                     
   16293/    D472 :                     loc_D368:
   16294/    D472 : 7000                		moveq	#0,d0
   16295/    D474 : 1010                		move.b	(a0),d0
   16296/    D476 : 670A                		beq.s	loc_D378
   16297/    D478 : 4A28 0001           		tst.b	1(a0)
   16298/    D47C : 6A04                		bpl.s	loc_D378
   16299/    D47E : 6100 028E           		bsr.w	DisplaySprite
   16300/    D482 :                     
   16301/    D482 :                     loc_D378:
   16302/    D482 : 41E8 0040           		lea	$40(a0),a0
   16303/    D486 :                     
   16304/    D486 :                     loc_D37C:
   16305/    D486 : 51CF FFEA           		dbf	d7,loc_D368
   16306/    D48A : 4E75                		rts	
   16307/    D48C :                     ; End of function ObjectsLoad
   16308/    D48C :                     
   16309/    D48C :                     ; ===========================================================================
   16310/    D48C :                     ; ---------------------------------------------------------------------------
   16311/    D48C :                     ; Object pointers
   16312/    D48C :                     ; ---------------------------------------------------------------------------
   16313/    D48C :                     Obj_Index:
   16314/    D48C :                     		include	"_inc/Object pointers.asm"
(1)    1/    D48C :                     ; ---------------------------------------------------------------------------
(1)    2/    D48C :                     ; Object pointers
(1)    3/    D48C :                     ; ---------------------------------------------------------------------------
(1)    4/    D48C : 0001 2CE8 0000 D6BC 	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
                    0000 D6BC 0000 D6BC 
(1)    5/    D49C : 0000 D6BC 0000 D6BC 	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
                    0000 D6BC 0001 456C 
(1)    6/    D4AC : 0001 BC1E 0001 3F14 	dc.l Obj09, Obj0A, Obj0B, Obj0C
                    0001 1316 0001 1456 
(1)    7/    D4BC : 0000 EC32 0000 A638 	dc.l Obj0D, Obj0E, Obj0F, Obj10
                    0000 A6B8 0001 C2BC 
(1)    8/    D4CC : 0000 7334 0000 EA16 	dc.l Obj11, Obj12, Obj13, Obj14
                    0000 E3A0 0000 E40E 
(1)    9/    D4DC : 0000 795E 0001 2014 	dc.l Obj15, Obj16, Obj17, Obj18
                    0000 7CAE 0000 7E3E 
(1)   10/    D4EC : 0000 81B4 0000 821C 	dc.l Obj19, Obj1A, Obj1B, Obj1C
                    0001 11D6 0000 87D6 
(1)   11/    D4FC : 0000 886A 0000 8B58 	dc.l Obj1D, Obj1E, Obj1F, Obj20
                    0000 94FC 0000 8C28 
(1)   12/    D50C : 0001 C7E2 0000 97EA 	dc.l Obj21, Obj22, Obj23, Obj24
                    0000 993E 0000 8CFE 
(1)   13/    D51C : 0000 9B32 0000 A124 	dc.l Obj25, Obj26, Obj27, Obj28
                    0000 8D6E 0000 8F2E 
(1)   14/    D52C : 0000 941E 0000 8940 	dc.l Obj29, Obj2A, Obj2B, Obj2C
                    0000 AC0A 0000 ACC4 
(1)   15/    D53C : 0000 AD8E 0000 A30E 	dc.l Obj2D, Obj2E, Obj2F, Obj30
                    0000 AFA2 0000 B488 
(1)   16/    D54C : 0000 B766 0000 BE18 	dc.l Obj31, Obj32, Obj33, Obj34
                    0000 BFBC 0000 C3F0 
(1)   17/    D55C : 0000 B2C6 0000 CF2C 	dc.l Obj35, Obj36, Obj37, Obj38
                    0000 9CC2 0001 43D4 
(1)   18/    D56C : 0000 C5A2 0000 C65C 	dc.l Obj39, Obj3A, Obj3B, Obj3C
                    0000 D15A 0000 D226 
(1)   19/    D57C : 0001 7990 0001 ADB2 	dc.l Obj3D, Obj3E, Obj3F, Obj40
                    0000 8E02 0000 F72A 
(1)   20/    D58C : 0000 DBC8 0000 DE72 	dc.l Obj41, Obj42, Obj43, Obj44
                    0000 E104 0000 E2DE 
(1)   21/    D59C : 0000 BA84 0000 E8DA 	dc.l Obj45, Obj46, Obj47, Obj48
                    0000 EADA 0001 7D74 
(1)   22/    D5AC : 0000 D1C8 0001 44D0 	dc.l Obj49, Obj4A, Obj4B, Obj4C
                    0000 9E12 0000 EE94 
(1)   23/    D5BC : 0000 EF80 0000 F16E 	dc.l Obj4D, Obj4E, Obj4F, Obj50
                    0000 F916 0000 F94A 
(1)   24/    D5CC : 0000 FDA2 0000 FF08 	dc.l Obj51, Obj52, Obj53, Obj54
                    0000 832C 0000 F2C8 
(1)   25/    D5DC : 0001 01B8 0001 0396 	dc.l Obj55, Obj56, Obj57, Obj58
                    0001 0892 0001 0A86 
(1)   26/    D5EC : 0001 0BE2 0001 0E6A 	dc.l Obj59, Obj5A, Obj5B, Obj5C
                    0001 0FA0 0001 1154 
(1)   27/    D5FC : 0001 160C 0001 174C 	dc.l Obj5D, Obj5E, Obj5F, Obj60
                    0001 1B06 0001 1DDE 
(1)   28/    D60C : 0001 20E4 0001 22F8 	dc.l Obj61, Obj62, Obj63, Obj64
                    0001 244C 0001 27B4 
(1)   29/    D61C : 0001 2BAE 0001 5316 	dc.l Obj65, Obj66, Obj67, Obj68
                    0001 575E 0001 590A 
(1)   30/    D62C : 0001 59AC 0001 5BF8 	dc.l Obj69, Obj6A, Obj6B, Obj6C
                    0001 5E8E 0001 6274 
(1)   31/    D63C : 0000 E5EA 0001 63C2 	dc.l Obj6D, Obj6E, Obj6F, Obj70
                    0001 64E6 0001 67A6 
(1)   32/    D64C : 0001 152A 0001 68E4 	dc.l Obj71, Obj72, Obj73, Obj74
                    0001 84C0 0001 8934 
(1)   33/    D65C : 0001 937E 0001 9922 	dc.l Obj75, Obj76, Obj77, Obj78
                    0001 80C6 0001 6BB0 
(1)   34/    D66C : 0001 70AA 0001 8B48 	dc.l Obj79, Obj7A, Obj7B, Obj7C
                    0001 8F5E 0000 9EE2 
(1)   35/    D67C : 0001 73DA 0000 C898 	dc.l Obj7D, Obj7E, Obj7F, Obj80
                    0000 CA40 0000 4E56 
(1)   36/    D68C : 0000 4F70 0001 9AC2 	dc.l Obj81, Obj82, Obj83, Obj84
                    0001 9DF0 0001 A6DE 
(1)   37/    D69C : 0001 9FE8 0001 AA6A 	dc.l Obj85, Obj86, Obj87, Obj88
                    0000 53F6 0000 5550 
(1)   38/    D6AC : 0000 562A 0001 74E0 	dc.l Obj89, Obj8A, Obj8B, Obj8C
                    0000 59EE 0000 5ACE 
   16315/    D6BC :                     
   16316/    D6BC :                     ; ---------------------------------------------------------------------------
   16317/    D6BC :                     ; Subroutine to	make an	object fall downwards, increasingly fast
   16318/    D6BC :                     ; ---------------------------------------------------------------------------
   16319/    D6BC :                     
   16320/    D6BC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16321/    D6BC :                     
   16322/    D6BC :                     
   16323/    D6BC :                     ObjectFall:
   16324/    D6BC : 2428 0008           		move.l	8(a0),d2
   16325/    D6C0 : 2628 000C           		move.l	$C(a0),d3
   16326/    D6C4 : 3028 0010           		move.w	$10(a0),d0
   16327/    D6C8 : 48C0                		ext.l	d0
   16328/    D6CA : E180                		asl.l	#8,d0
   16329/    D6CC : D480                		add.l	d0,d2
   16330/    D6CE : 3028 0012           		move.w	$12(a0),d0
   16331/    D6D2 : 0668 0038 0012      		addi.w	#$38,$12(a0)	; increase vertical speed
   16332/    D6D8 : 48C0                		ext.l	d0
   16333/    D6DA : E180                		asl.l	#8,d0
   16334/    D6DC : D680                		add.l	d0,d3
   16335/    D6DE : 2142 0008           		move.l	d2,8(a0)
   16336/    D6E2 : 2143 000C           		move.l	d3,$C(a0)
   16337/    D6E6 : 4E75                		rts	
   16338/    D6E8 :                     ; End of function ObjectFall
   16339/    D6E8 :                     
   16340/    D6E8 :                     ; ---------------------------------------------------------------------------
   16341/    D6E8 :                     ; Subroutine translating object	speed to update	object position
   16342/    D6E8 :                     ; ---------------------------------------------------------------------------
   16343/    D6E8 :                     
   16344/    D6E8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16345/    D6E8 :                     
   16346/    D6E8 :                     
   16347/    D6E8 :                     SpeedToPos:
   16348/    D6E8 : 2428 0008           		move.l	8(a0),d2
   16349/    D6EC : 2628 000C           		move.l	$C(a0),d3
   16350/    D6F0 : 3028 0010           		move.w	$10(a0),d0	; load horizontal speed
   16351/    D6F4 : 48C0                		ext.l	d0
   16352/    D6F6 : E180                		asl.l	#8,d0		; multiply speed by $100
   16353/    D6F8 : D480                		add.l	d0,d2		; add to x-axis	position
   16354/    D6FA : 3028 0012           		move.w	$12(a0),d0	; load vertical	speed
   16355/    D6FE : 48C0                		ext.l	d0
   16356/    D700 : E180                		asl.l	#8,d0		; multiply by $100
   16357/    D702 : D680                		add.l	d0,d3		; add to y-axis	position
   16358/    D704 : 2142 0008           		move.l	d2,8(a0)	; update x-axis	position
   16359/    D708 : 2143 000C           		move.l	d3,$C(a0)	; update y-axis	position
   16360/    D70C : 4E75                		rts	
   16361/    D70E :                     ; End of function SpeedToPos
   16362/    D70E :                     
   16363/    D70E :                     ; ---------------------------------------------------------------------------
   16364/    D70E :                     ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
   16365/    D70E :                     ; ---------------------------------------------------------------------------
   16366/    D70E :                     
   16367/    D70E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16368/    D70E :                     
   16369/    D70E :                     
   16370/    D70E :                     DisplaySprite:
   16371/    D70E : 43F8 AC00           		lea	($FFFFAC00).w,a1
   16372/    D712 : 3028 0018           		move.w	$18(a0),d0
   16373/    D716 : E248                		lsr.w	#1,d0
   16374/    D718 : 0240 0380           		andi.w	#$380,d0
   16375/    D71C : D2C0                		adda.w	d0,a1
   16376/    D71E : 0C51 007E           		cmpi.w	#$7E,(a1)
   16377/    D722 : 6406                		bcc.s	locret_D620
   16378/    D724 : 5451                		addq.w	#2,(a1)
   16379/    D726 : D2D1                		adda.w	(a1),a1
   16380/    D728 : 3288                		move.w	a0,(a1)
   16381/    D72A :                     
   16382/    D72A :                     locret_D620:
   16383/    D72A : 4E75                		rts	
   16384/    D72C :                     ; End of function DisplaySprite
   16385/    D72C :                     
   16386/    D72C :                     ; ---------------------------------------------------------------------------
   16387/    D72C :                     ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
   16388/    D72C :                     ; ---------------------------------------------------------------------------
   16389/    D72C :                     
   16390/    D72C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16391/    D72C :                     
   16392/    D72C :                     
   16393/    D72C :                     DisplaySprite2:
   16394/    D72C : 45F8 AC00           		lea	($FFFFAC00).w,a2
   16395/    D730 : 3029 0018           		move.w	$18(a1),d0
   16396/    D734 : E248                		lsr.w	#1,d0
   16397/    D736 : 0240 0380           		andi.w	#$380,d0
   16398/    D73A : D4C0                		adda.w	d0,a2
   16399/    D73C : 0C52 007E           		cmpi.w	#$7E,(a2)
   16400/    D740 : 6406                		bcc.s	locret_D63E
   16401/    D742 : 5452                		addq.w	#2,(a2)
   16402/    D744 : D4D2                		adda.w	(a2),a2
   16403/    D746 : 3489                		move.w	a1,(a2)
   16404/    D748 :                     
   16405/    D748 :                     locret_D63E:
   16406/    D748 : 4E75                		rts	
   16407/    D74A :                     ; End of function DisplaySprite2
   16408/    D74A :                     
   16409/    D74A :                     ; ---------------------------------------------------------------------------
   16410/    D74A :                     ; Subroutine to	delete an object
   16411/    D74A :                     ; ---------------------------------------------------------------------------
   16412/    D74A :                     
   16413/    D74A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16414/    D74A :                     
   16415/    D74A :                     
   16416/    D74A :                     DeleteObject:
   16417/    D74A : 2248                		movea.l	a0,a1
   16418/    D74C :                     
   16419/    D74C :                     DeleteObject2:
   16420/    D74C : 7200                		moveq	#0,d1
   16421/    D74E : 700F                		moveq	#$F,d0
   16422/    D750 :                     
   16423/    D750 :                     loc_D646:
   16424/    D750 : 22C1                		move.l	d1,(a1)+	; clear	the object RAM
   16425/    D752 : 51C8 FFFC           		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
   16426/    D756 : 4E75                		rts	
   16427/    D758 :                     ; End of function DeleteObject
   16428/    D758 :                     
   16429/    D758 :                     ; ===========================================================================
   16430/    D758 : 0000 0000           BldSpr_ScrPos:	dc.l 0			; blank
   16431/    D75C : 00FF F700           		dc.l $FFF700		; main screen x-position
   16432/    D760 : 00FF F708           		dc.l $FFF708		; background x-position	1
   16433/    D764 : 00FF F718           		dc.l $FFF718		; background x-position	2
   16434/    D768 :                     ; ---------------------------------------------------------------------------
   16435/    D768 :                     ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
   16436/    D768 :                     ; ---------------------------------------------------------------------------
   16437/    D768 :                     
   16438/    D768 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16439/    D768 :                     
   16440/    D768 :                     
   16441/    D768 :                     BuildSprites:				; XREF: TitleScreen; et al
   16442/    D768 : 45F8 F800           		lea	($FFFFF800).w,a2 ; set address for sprite table
   16443/    D76C : 7A00                		moveq	#0,d5
   16444/    D76E : 49F8 AC00           		lea	($FFFFAC00).w,a4
   16445/    D772 : 7E07                		moveq	#7,d7
   16446/    D774 :                     
   16447/    D774 :                     loc_D66A:
   16448/    D774 : 4A54                		tst.w	(a4)
   16449/    D776 : 6700 00C0           		beq.w	loc_D72E
   16450/    D77A : 7C02                		moveq	#2,d6
   16451/    D77C :                     
   16452/    D77C :                     loc_D672:
   16453/    D77C : 3074 6000           		movea.w	(a4,d6.w),a0
   16454/    D780 : 4A10                		tst.b	(a0)
   16455/    D782 : 6700 00AC           		beq.w	loc_D726
   16456/    D786 : 08A8 0007 0001      		bclr	#7,1(a0)
   16457/    D78C : 1028 0001           		move.b	1(a0),d0
   16458/    D790 : 1800                		move.b	d0,d4
   16459/    D792 : 0240 000C           		andi.w	#$C,d0
   16460/    D796 : 6750                		beq.s	loc_D6DE
   16461/    D798 : 227B 00BE           		movea.l	BldSpr_ScrPos(pc,d0.w),a1
   16462/    D79C : 7000                		moveq	#0,d0
   16463/    D79E : 1028 0019           		move.b	$19(a0),d0
   16464/    D7A2 : 3628 0008           		move.w	8(a0),d3
   16465/    D7A6 : 9651                		sub.w	(a1),d3
   16466/    D7A8 : 3203                		move.w	d3,d1
   16467/    D7AA : D240                		add.w	d0,d1
   16468/    D7AC : 6B00 0082           		bmi.w	loc_D726
   16469/    D7B0 : 3203                		move.w	d3,d1
   16470/    D7B2 : 9240                		sub.w	d0,d1
   16471/    D7B4 : 0C41 0140           		cmpi.w	#$140,d1
   16472/    D7B8 : 6C76                		bge.s	loc_D726
   16473/    D7BA : 0643 0080           		addi.w	#$80,d3
   16474/    D7BE : 0804 0004           		btst	#4,d4
   16475/    D7C2 : 672E                		beq.s	loc_D6E8
   16476/    D7C4 : 7000                		moveq	#0,d0
   16477/    D7C6 : 1028 0016           		move.b	$16(a0),d0
   16478/    D7CA : 3428 000C           		move.w	$C(a0),d2
   16479/    D7CE : 9469 0004           		sub.w	4(a1),d2
   16480/    D7D2 : 3202                		move.w	d2,d1
   16481/    D7D4 : D240                		add.w	d0,d1
   16482/    D7D6 : 6B58                		bmi.s	loc_D726
   16483/    D7D8 : 3202                		move.w	d2,d1
   16484/    D7DA : 9240                		sub.w	d0,d1
   16485/    D7DC : 0C41 00E0           		cmpi.w	#$E0,d1
   16486/    D7E0 : 6C4E                		bge.s	loc_D726
   16487/    D7E2 : 0642 0080           		addi.w	#$80,d2
   16488/    D7E6 : 6022                		bra.s	loc_D700
   16489/    D7E8 :                     ; ===========================================================================
   16490/    D7E8 :                     
   16491/    D7E8 :                     loc_D6DE:
   16492/    D7E8 : 3428 000A           		move.w	$A(a0),d2
   16493/    D7EC : 3628 0008           		move.w	8(a0),d3
   16494/    D7F0 : 6018                		bra.s	loc_D700
   16495/    D7F2 :                     ; ===========================================================================
   16496/    D7F2 :                     
   16497/    D7F2 :                     loc_D6E8:
   16498/    D7F2 : 3428 000C           		move.w	$C(a0),d2
   16499/    D7F6 : 9469 0004           		sub.w	4(a1),d2
   16500/    D7FA : 0642 0080           		addi.w	#$80,d2
   16501/    D7FE : 0C42 0060           		cmpi.w	#$60,d2
   16502/    D802 : 652C                		bcs.s	loc_D726
   16503/    D804 : 0C42 0180           		cmpi.w	#$180,d2
   16504/    D808 : 6426                		bcc.s	loc_D726
   16505/    D80A :                     
   16506/    D80A :                     loc_D700:
   16507/    D80A : 2268 0004           		movea.l	4(a0),a1
   16508/    D80E : 7200                		moveq	#0,d1
   16509/    D810 : 0804 0005           		btst	#5,d4
   16510/    D814 : 6610                		bne.s	loc_D71C
   16511/    D816 : 1228 001A           		move.b	$1A(a0),d1
   16512/    D81A : D201                		add.b	d1,d1
   16513/    D81C : D2F1 1000           		adda.w	(a1,d1.w),a1
   16514/    D820 : 1219                		move.b	(a1)+,d1
   16515/    D822 : 5301                		subq.b	#1,d1
   16516/    D824 : 6B04                		bmi.s	loc_D720
   16517/    D826 :                     
   16518/    D826 :                     loc_D71C:
   16519/    D826 : 6100 0032           		bsr.w	sub_D750
   16520/    D82A :                     
   16521/    D82A :                     loc_D720:
   16522/    D82A : 08E8 0007 0001      		bset	#7,1(a0)
   16523/    D830 :                     
   16524/    D830 :                     loc_D726:
   16525/    D830 : 5446                		addq.w	#2,d6
   16526/    D832 : 5554                		subq.w	#2,(a4)
   16527/    D834 : 6600 FF46           		bne.w	loc_D672
   16528/    D838 :                     
   16529/    D838 :                     loc_D72E:
   16530/    D838 : 49EC 0080           		lea	$80(a4),a4
   16531/    D83C : 51CF FF36           		dbf	d7,loc_D66A
   16532/    D840 : 11C5 F62C           		move.b	d5,($FFFFF62C).w
   16533/    D844 : 0C05 0050           		cmpi.b	#$50,d5
   16534/    D848 : 6708                		beq.s	loc_D748
   16535/    D84A : 24BC 0000 0000      		move.l	#0,(a2)
   16536/    D850 : 4E75                		rts	
   16537/    D852 :                     ; ===========================================================================
   16538/    D852 :                     
   16539/    D852 :                     loc_D748:
   16540/    D852 : 157C 0000 FFFB      		move.b	#0,-5(a2)
   16541/    D858 : 4E75                		rts	
   16542/    D85A :                     ; End of function BuildSprites
   16543/    D85A :                     
   16544/    D85A :                     
   16545/    D85A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16546/    D85A :                     
   16547/    D85A :                     
   16548/    D85A :                     sub_D750:				; XREF: BuildSprites
   16549/    D85A : 3668 0002           		movea.w	2(a0),a3
   16550/    D85E : 0804 0000           		btst	#0,d4
   16551/    D862 : 663C                		bne.s	loc_D796
   16552/    D864 : 0804 0001           		btst	#1,d4
   16553/    D868 : 6600 0084           		bne.w	loc_D7E4
   16554/    D86C :                     ; End of function sub_D750
   16555/    D86C :                     
   16556/    D86C :                     
   16557/    D86C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16558/    D86C :                     
   16559/    D86C :                     
   16560/    D86C :                     sub_D762:				; XREF: sub_D762; SS_ShowLayout
   16561/    D86C : 0C05 0050           		cmpi.b	#$50,d5
   16562/    D870 : 672C                		beq.s	locret_D794
   16563/    D872 : 1019                		move.b	(a1)+,d0
   16564/    D874 : 4880                		ext.w	d0
   16565/    D876 : D042                		add.w	d2,d0
   16566/    D878 : 34C0                		move.w	d0,(a2)+
   16567/    D87A : 14D9                		move.b	(a1)+,(a2)+
   16568/    D87C : 5205                		addq.b	#1,d5
   16569/    D87E : 14C5                		move.b	d5,(a2)+
   16570/    D880 : 1019                		move.b	(a1)+,d0
   16571/    D882 : E148                		lsl.w	#8,d0
   16572/    D884 : 1019                		move.b	(a1)+,d0
   16573/    D886 : D04B                		add.w	a3,d0
   16574/    D888 : 34C0                		move.w	d0,(a2)+
   16575/    D88A : 1019                		move.b	(a1)+,d0
   16576/    D88C : 4880                		ext.w	d0
   16577/    D88E : D043                		add.w	d3,d0
   16578/    D890 : 0240 01FF           		andi.w	#$1FF,d0
   16579/    D894 : 6602                		bne.s	loc_D78E
   16580/    D896 : 5240                		addq.w	#1,d0
   16581/    D898 :                     
   16582/    D898 :                     loc_D78E:
   16583/    D898 : 34C0                		move.w	d0,(a2)+
   16584/    D89A : 51C9 FFD0           		dbf	d1,sub_D762
   16585/    D89E :                     
   16586/    D89E :                     locret_D794:
   16587/    D89E : 4E75                		rts	
   16588/    D8A0 :                     ; End of function sub_D762
   16589/    D8A0 :                     
   16590/    D8A0 :                     ; ===========================================================================
   16591/    D8A0 :                     
   16592/    D8A0 :                     loc_D796:
   16593/    D8A0 : 0804 0001           		btst	#1,d4
   16594/    D8A4 : 6600 008E           		bne.w	loc_D82A
   16595/    D8A8 :                     
   16596/    D8A8 :                     loc_D79E:
   16597/    D8A8 : 0C05 0050           		cmpi.b	#$50,d5
   16598/    D8AC : 673E                		beq.s	locret_D7E2
   16599/    D8AE : 1019                		move.b	(a1)+,d0
   16600/    D8B0 : 4880                		ext.w	d0
   16601/    D8B2 : D042                		add.w	d2,d0
   16602/    D8B4 : 34C0                		move.w	d0,(a2)+
   16603/    D8B6 : 1819                		move.b	(a1)+,d4
   16604/    D8B8 : 14C4                		move.b	d4,(a2)+
   16605/    D8BA : 5205                		addq.b	#1,d5
   16606/    D8BC : 14C5                		move.b	d5,(a2)+
   16607/    D8BE : 1019                		move.b	(a1)+,d0
   16608/    D8C0 : E148                		lsl.w	#8,d0
   16609/    D8C2 : 1019                		move.b	(a1)+,d0
   16610/    D8C4 : D04B                		add.w	a3,d0
   16611/    D8C6 : 0A40 0800           		eori.w	#$800,d0
   16612/    D8CA : 34C0                		move.w	d0,(a2)+
   16613/    D8CC : 1019                		move.b	(a1)+,d0
   16614/    D8CE : 4880                		ext.w	d0
   16615/    D8D0 : 4440                		neg.w	d0
   16616/    D8D2 : D804                		add.b	d4,d4
   16617/    D8D4 : 0244 0018           		andi.w	#$18,d4
   16618/    D8D8 : 5044                		addq.w	#8,d4
   16619/    D8DA : 9044                		sub.w	d4,d0
   16620/    D8DC : D043                		add.w	d3,d0
   16621/    D8DE : 0240 01FF           		andi.w	#$1FF,d0
   16622/    D8E2 : 6602                		bne.s	loc_D7DC
   16623/    D8E4 : 5240                		addq.w	#1,d0
   16624/    D8E6 :                     
   16625/    D8E6 :                     loc_D7DC:
   16626/    D8E6 : 34C0                		move.w	d0,(a2)+
   16627/    D8E8 : 51C9 FFBE           		dbf	d1,loc_D79E
   16628/    D8EC :                     
   16629/    D8EC :                     locret_D7E2:
   16630/    D8EC : 4E75                		rts	
   16631/    D8EE :                     ; ===========================================================================
   16632/    D8EE :                     
   16633/    D8EE :                     loc_D7E4:				; XREF: sub_D750
   16634/    D8EE : 0C05 0050           		cmpi.b	#$50,d5
   16635/    D8F2 : 673E                		beq.s	locret_D828
   16636/    D8F4 : 1019                		move.b	(a1)+,d0
   16637/    D8F6 : 1811                		move.b	(a1),d4
   16638/    D8F8 : 4880                		ext.w	d0
   16639/    D8FA : 4440                		neg.w	d0
   16640/    D8FC : E70C                		lsl.b	#3,d4
   16641/    D8FE : 0244 0018           		andi.w	#$18,d4
   16642/    D902 : 5044                		addq.w	#8,d4
   16643/    D904 : 9044                		sub.w	d4,d0
   16644/    D906 : D042                		add.w	d2,d0
   16645/    D908 : 34C0                		move.w	d0,(a2)+
   16646/    D90A : 14D9                		move.b	(a1)+,(a2)+
   16647/    D90C : 5205                		addq.b	#1,d5
   16648/    D90E : 14C5                		move.b	d5,(a2)+
   16649/    D910 : 1019                		move.b	(a1)+,d0
   16650/    D912 : E148                		lsl.w	#8,d0
   16651/    D914 : 1019                		move.b	(a1)+,d0
   16652/    D916 : D04B                		add.w	a3,d0
   16653/    D918 : 0A40 1000           		eori.w	#$1000,d0
   16654/    D91C : 34C0                		move.w	d0,(a2)+
   16655/    D91E : 1019                		move.b	(a1)+,d0
   16656/    D920 : 4880                		ext.w	d0
   16657/    D922 : D043                		add.w	d3,d0
   16658/    D924 : 0240 01FF           		andi.w	#$1FF,d0
   16659/    D928 : 6602                		bne.s	loc_D822
   16660/    D92A : 5240                		addq.w	#1,d0
   16661/    D92C :                     
   16662/    D92C :                     loc_D822:
   16663/    D92C : 34C0                		move.w	d0,(a2)+
   16664/    D92E : 51C9 FFBE           		dbf	d1,loc_D7E4
   16665/    D932 :                     
   16666/    D932 :                     locret_D828:
   16667/    D932 : 4E75                		rts	
   16668/    D934 :                     ; ===========================================================================
   16669/    D934 :                     
   16670/    D934 :                     loc_D82A:
   16671/    D934 : 0C05 0050           		cmpi.b	#$50,d5
   16672/    D938 : 674C                		beq.s	locret_D87C
   16673/    D93A : 1019                		move.b	(a1)+,d0
   16674/    D93C : 1811                		move.b	(a1),d4
   16675/    D93E : 4880                		ext.w	d0
   16676/    D940 : 4440                		neg.w	d0
   16677/    D942 : E70C                		lsl.b	#3,d4
   16678/    D944 : 0244 0018           		andi.w	#$18,d4
   16679/    D948 : 5044                		addq.w	#8,d4
   16680/    D94A : 9044                		sub.w	d4,d0
   16681/    D94C : D042                		add.w	d2,d0
   16682/    D94E : 34C0                		move.w	d0,(a2)+
   16683/    D950 : 1819                		move.b	(a1)+,d4
   16684/    D952 : 14C4                		move.b	d4,(a2)+
   16685/    D954 : 5205                		addq.b	#1,d5
   16686/    D956 : 14C5                		move.b	d5,(a2)+
   16687/    D958 : 1019                		move.b	(a1)+,d0
   16688/    D95A : E148                		lsl.w	#8,d0
   16689/    D95C : 1019                		move.b	(a1)+,d0
   16690/    D95E : D04B                		add.w	a3,d0
   16691/    D960 : 0A40 1800           		eori.w	#$1800,d0
   16692/    D964 : 34C0                		move.w	d0,(a2)+
   16693/    D966 : 1019                		move.b	(a1)+,d0
   16694/    D968 : 4880                		ext.w	d0
   16695/    D96A : 4440                		neg.w	d0
   16696/    D96C : D804                		add.b	d4,d4
   16697/    D96E : 0244 0018           		andi.w	#$18,d4
   16698/    D972 : 5044                		addq.w	#8,d4
   16699/    D974 : 9044                		sub.w	d4,d0
   16700/    D976 : D043                		add.w	d3,d0
   16701/    D978 : 0240 01FF           		andi.w	#$1FF,d0
   16702/    D97C : 6602                		bne.s	loc_D876
   16703/    D97E : 5240                		addq.w	#1,d0
   16704/    D980 :                     
   16705/    D980 :                     loc_D876:
   16706/    D980 : 34C0                		move.w	d0,(a2)+
   16707/    D982 : 51C9 FFB0           		dbf	d1,loc_D82A
   16708/    D986 :                     
   16709/    D986 :                     locret_D87C:
   16710/    D986 : 4E75                		rts	
   16711/    D988 :                     ; ---------------------------------------------------------------------------
   16712/    D988 :                     ; Subroutine to	check if an object is on the screen
   16713/    D988 :                     ; ---------------------------------------------------------------------------
   16714/    D988 :                     
   16715/    D988 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16716/    D988 :                     
   16717/    D988 :                     
   16718/    D988 :                     ChkObjOnScreen:
   16719/    D988 : 3028 0008           		move.w	8(a0),d0	; get object x-position
   16720/    D98C : 9078 F700           		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
   16721/    D990 : 6B1A                		bmi.s	NotOnScreen
   16722/    D992 : 0C40 0140           		cmpi.w	#320,d0		; is object on the screen?
   16723/    D996 : 6C14                		bge.s	NotOnScreen	; if not, branch
   16724/    D998 :                     
   16725/    D998 : 3228 000C           		move.w	$C(a0),d1	; get object y-position
   16726/    D99C : 9278 F704           		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
   16727/    D9A0 : 6B0A                		bmi.s	NotOnScreen
   16728/    D9A2 : 0C41 00E0           		cmpi.w	#224,d1		; is object on the screen?
   16729/    D9A6 : 6C04                		bge.s	NotOnScreen	; if not, branch
   16730/    D9A8 :                     
   16731/    D9A8 : 7000                		moveq	#0,d0		; set flag to 0
   16732/    D9AA : 4E75                		rts	
   16733/    D9AC :                     ; ===========================================================================
   16734/    D9AC :                     
   16735/    D9AC :                     NotOnScreen:				; XREF: ChkObjOnScreen
   16736/    D9AC : 7001                		moveq	#1,d0		; set flag to 1
   16737/    D9AE : 4E75                		rts	
   16738/    D9B0 :                     ; End of function ChkObjOnScreen
   16739/    D9B0 :                     
   16740/    D9B0 :                     
   16741/    D9B0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16742/    D9B0 :                     
   16743/    D9B0 :                     
   16744/    D9B0 :                     ChkObjOnScreen2:
   16745/    D9B0 : 7200                		moveq	#0,d1
   16746/    D9B2 : 1228 0019           		move.b	$19(a0),d1
   16747/    D9B6 : 3028 0008           		move.w	8(a0),d0
   16748/    D9BA : 9078 F700           		sub.w	($FFFFF700).w,d0
   16749/    D9BE : D041                		add.w	d1,d0
   16750/    D9C0 : 6B1E                		bmi.s	NotOnScreen2
   16751/    D9C2 : D241                		add.w	d1,d1
   16752/    D9C4 : 9041                		sub.w	d1,d0
   16753/    D9C6 : 0C40 0140           		cmpi.w	#320,d0
   16754/    D9CA : 6C14                		bge.s	NotOnScreen2
   16755/    D9CC :                     
   16756/    D9CC : 3228 000C           		move.w	$C(a0),d1
   16757/    D9D0 : 9278 F704           		sub.w	($FFFFF704).w,d1
   16758/    D9D4 : 6B0A                		bmi.s	NotOnScreen2
   16759/    D9D6 : 0C41 00E0           		cmpi.w	#224,d1
   16760/    D9DA : 6C04                		bge.s	NotOnScreen2
   16761/    D9DC :                     
   16762/    D9DC : 7000                		moveq	#0,d0
   16763/    D9DE : 4E75                		rts	
   16764/    D9E0 :                     ; ===========================================================================
   16765/    D9E0 :                     
   16766/    D9E0 :                     NotOnScreen2:				; XREF: ChkObjOnScreen2
   16767/    D9E0 : 7001                		moveq	#1,d0
   16768/    D9E2 : 4E75                		rts	
   16769/    D9E4 :                     ; End of function ChkObjOnScreen2
   16770/    D9E4 :                     
   16771/    D9E4 :                     ; ---------------------------------------------------------------------------
   16772/    D9E4 :                     ; Subroutine to	load a level"s objects
   16773/    D9E4 :                     ; ---------------------------------------------------------------------------
   16774/    D9E4 :                     
   16775/    D9E4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16776/    D9E4 :                     
   16777/    D9E4 :                     
   16778/    D9E4 :                     ObjPosLoad:				; XREF: Level; et al
   16779/    D9E4 : 7000                		moveq	#0,d0
   16780/    D9E6 : 1038 F76C           		move.b	($FFFFF76C).w,d0
   16781/    D9EA : 303B 0006           		move.w	OPL_Index(pc,d0.w),d0
   16782/    D9EE : 4EFB 0002           		jmp	OPL_Index(pc,d0.w)
   16783/    D9F2 :                     ; End of function ObjPosLoad
   16784/    D9F2 :                     
   16785/    D9F2 :                     ; ===========================================================================
   16786/    D9F2 : 0004                OPL_Index:	dc.w OPL_Main-OPL_Index
   16787/    D9F4 : 0098                		dc.w OPL_Next-OPL_Index
   16788/    D9F6 :                     ; ===========================================================================
   16789/    D9F6 :                     
   16790/    D9F6 :                     OPL_Main:				; XREF: OPL_Index
   16791/    D9F6 : 5438 F76C           		addq.b	#2,($FFFFF76C).w
   16792/    D9FA : 3038 FE10           		move.w	($FFFFFE10).w,d0
   16793/    D9FE : ED08                		lsl.b	#6,d0
   16794/    DA00 : E848                		lsr.w	#4,d0
   16795/    DA02 : 41F9 0006 BE70      		lea	(ObjPos_Index).l,a0
   16796/    DA08 : 2248                		movea.l	a0,a1
   16797/    DA0A : D0F0 0000           		adda.w	(a0,d0.w),a0
   16798/    DA0E : 21C8 F770           		move.l	a0,($FFFFF770).w
   16799/    DA12 : 21C8 F774           		move.l	a0,($FFFFF774).w
   16800/    DA16 : D2F1 0002           		adda.w	2(a1,d0.w),a1
   16801/    DA1A : 21C9 F778           		move.l	a1,($FFFFF778).w
   16802/    DA1E : 21C9 F77C           		move.l	a1,($FFFFF77C).w
   16803/    DA22 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   16804/    DA26 : 34FC 0101           		move.w	#$101,(a2)+
   16805/    DA2A : 303C 005E           		move.w	#$5E,d0
   16806/    DA2E :                     
   16807/    DA2E :                     OPL_ClrList:
   16808/    DA2E : 429A                		clr.l	(a2)+
   16809/    DA30 : 51C8 FFFC           		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
   16810/    DA34 :                     
   16811/    DA34 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   16812/    DA38 : 7400                		moveq	#0,d2
   16813/    DA3A : 3C38 F700           		move.w	($FFFFF700).w,d6
   16814/    DA3E : 0446 0080           		subi.w	#$80,d6
   16815/    DA42 : 6402                		bcc.s	loc_D93C
   16816/    DA44 : 7C00                		moveq	#0,d6
   16817/    DA46 :                     
   16818/    DA46 :                     loc_D93C:
   16819/    DA46 : 0246 FF80           		andi.w	#$FF80,d6
   16820/    DA4A : 2078 F770           		movea.l	($FFFFF770).w,a0
   16821/    DA4E :                     
   16822/    DA4E :                     loc_D944:
   16823/    DA4E : BC50                		cmp.w	(a0),d6
   16824/    DA50 : 630E                		bls.s	loc_D956
   16825/    DA52 : 4A28 0004           		tst.b	4(a0)
   16826/    DA56 : 6A04                		bpl.s	loc_D952
   16827/    DA58 : 1412                		move.b	(a2),d2
   16828/    DA5A : 5212                		addq.b	#1,(a2)
   16829/    DA5C :                     
   16830/    DA5C :                     loc_D952:
   16831/    DA5C : 5C48                		addq.w	#6,a0
   16832/    DA5E : 60EE                		bra.s	loc_D944
   16833/    DA60 :                     ; ===========================================================================
   16834/    DA60 :                     
   16835/    DA60 :                     loc_D956:
   16836/    DA60 : 21C8 F770           		move.l	a0,($FFFFF770).w
   16837/    DA64 : 2078 F774           		movea.l	($FFFFF774).w,a0
   16838/    DA68 : 0446 0080           		subi.w	#$80,d6
   16839/    DA6C : 6512                		bcs.s	loc_D976
   16840/    DA6E :                     
   16841/    DA6E :                     loc_D964:
   16842/    DA6E : BC50                		cmp.w	(a0),d6
   16843/    DA70 : 630E                		bls.s	loc_D976
   16844/    DA72 : 4A28 0004           		tst.b	4(a0)
   16845/    DA76 : 6A04                		bpl.s	loc_D972
   16846/    DA78 : 522A 0001           		addq.b	#1,1(a2)
   16847/    DA7C :                     
   16848/    DA7C :                     loc_D972:
   16849/    DA7C : 5C48                		addq.w	#6,a0
   16850/    DA7E : 60EE                		bra.s	loc_D964
   16851/    DA80 :                     ; ===========================================================================
   16852/    DA80 :                     
   16853/    DA80 :                     loc_D976:
   16854/    DA80 : 21C8 F774           		move.l	a0,($FFFFF774).w
   16855/    DA84 : 31FC FFFF F76E      		move.w	#-1,($FFFFF76E).w
   16856/    DA8A :                     
   16857/    DA8A :                     OPL_Next:				; XREF: OPL_Index
   16858/    DA8A : 45F8 FC00           		lea	($FFFFFC00).w,a2
   16859/    DA8E : 7400                		moveq	#0,d2
   16860/    DA90 : 3C38 F700           		move.w	($FFFFF700).w,d6
   16861/    DA94 : 0246 FF80           		andi.w	#$FF80,d6
   16862/    DA98 : BC78 F76E           		cmp.w	($FFFFF76E).w,d6
   16863/    DA9C : 6700 00A6           		beq.w	locret_DA3A
   16864/    DAA0 : 6C5E                		bge.s	loc_D9F6
   16865/    DAA2 : 31C6 F76E           		move.w	d6,($FFFFF76E).w
   16866/    DAA6 : 2078 F774           		movea.l	($FFFFF774).w,a0
   16867/    DAAA : 0446 0080           		subi.w	#$80,d6
   16868/    DAAE : 652C                		bcs.s	loc_D9D2
   16869/    DAB0 :                     
   16870/    DAB0 :                     loc_D9A6:
   16871/    DAB0 : BC68 FFFA           		cmp.w	-6(a0),d6
   16872/    DAB4 : 6C26                		bge.s	loc_D9D2
   16873/    DAB6 : 5D48                		subq.w	#6,a0
   16874/    DAB8 : 4A28 0004           		tst.b	4(a0)
   16875/    DABC : 6A08                		bpl.s	loc_D9BC
   16876/    DABE : 532A 0001           		subq.b	#1,1(a2)
   16877/    DAC2 : 142A 0001           		move.b	1(a2),d2
   16878/    DAC6 :                     
   16879/    DAC6 :                     loc_D9BC:
   16880/    DAC6 : 6100 007E           		bsr.w	loc_DA3C
   16881/    DACA : 6604                		bne.s	loc_D9C6
   16882/    DACC : 5D48                		subq.w	#6,a0
   16883/    DACE : 60E0                		bra.s	loc_D9A6
   16884/    DAD0 :                     ; ===========================================================================
   16885/    DAD0 :                     
   16886/    DAD0 :                     loc_D9C6:
   16887/    DAD0 : 4A28 0004           		tst.b	4(a0)
   16888/    DAD4 : 6A04                		bpl.s	loc_D9D0
   16889/    DAD6 : 522A 0001           		addq.b	#1,1(a2)
   16890/    DADA :                     
   16891/    DADA :                     loc_D9D0:
   16892/    DADA : 5C48                		addq.w	#6,a0
   16893/    DADC :                     
   16894/    DADC :                     loc_D9D2:
   16895/    DADC : 21C8 F774           		move.l	a0,($FFFFF774).w
   16896/    DAE0 : 2078 F770           		movea.l	($FFFFF770).w,a0
   16897/    DAE4 : 0646 0300           		addi.w	#$300,d6
   16898/    DAE8 :                     
   16899/    DAE8 :                     loc_D9DE:
   16900/    DAE8 : BC68 FFFA           		cmp.w	-6(a0),d6
   16901/    DAEC : 6E0C                		bgt.s	loc_D9F0
   16902/    DAEE : 4A28 FFFE           		tst.b	-2(a0)
   16903/    DAF2 : 6A02                		bpl.s	loc_D9EC
   16904/    DAF4 : 5312                		subq.b	#1,(a2)
   16905/    DAF6 :                     
   16906/    DAF6 :                     loc_D9EC:
   16907/    DAF6 : 5D48                		subq.w	#6,a0
   16908/    DAF8 : 60EE                		bra.s	loc_D9DE
   16909/    DAFA :                     ; ===========================================================================
   16910/    DAFA :                     
   16911/    DAFA :                     loc_D9F0:
   16912/    DAFA : 21C8 F770           		move.l	a0,($FFFFF770).w
   16913/    DAFE : 4E75                		rts	
   16914/    DB00 :                     ; ===========================================================================
   16915/    DB00 :                     
   16916/    DB00 :                     loc_D9F6:
   16917/    DB00 : 31C6 F76E           		move.w	d6,($FFFFF76E).w
   16918/    DB04 : 2078 F770           		movea.l	($FFFFF770).w,a0
   16919/    DB08 : 0646 0280           		addi.w	#$280,d6
   16920/    DB0C :                     
   16921/    DB0C :                     loc_DA02:
   16922/    DB0C : BC50                		cmp.w	(a0),d6
   16923/    DB0E : 6310                		bls.s	loc_DA16
   16924/    DB10 : 4A28 0004           		tst.b	4(a0)
   16925/    DB14 : 6A04                		bpl.s	loc_DA10
   16926/    DB16 : 1412                		move.b	(a2),d2
   16927/    DB18 : 5212                		addq.b	#1,(a2)
   16928/    DB1A :                     
   16929/    DB1A :                     loc_DA10:
   16930/    DB1A : 6100 002A           		bsr.w	loc_DA3C
   16931/    DB1E : 67EC                		beq.s	loc_DA02
   16932/    DB20 :                     
   16933/    DB20 :                     loc_DA16:
   16934/    DB20 : 21C8 F770           		move.l	a0,($FFFFF770).w
   16935/    DB24 : 2078 F774           		movea.l	($FFFFF774).w,a0
   16936/    DB28 : 0446 0300           		subi.w	#$300,d6
   16937/    DB2C : 6512                		bcs.s	loc_DA36
   16938/    DB2E :                     
   16939/    DB2E :                     loc_DA24:
   16940/    DB2E : BC50                		cmp.w	(a0),d6
   16941/    DB30 : 630E                		bls.s	loc_DA36
   16942/    DB32 : 4A28 0004           		tst.b	4(a0)
   16943/    DB36 : 6A04                		bpl.s	loc_DA32
   16944/    DB38 : 522A 0001           		addq.b	#1,1(a2)
   16945/    DB3C :                     
   16946/    DB3C :                     loc_DA32:
   16947/    DB3C : 5C48                		addq.w	#6,a0
   16948/    DB3E : 60EE                		bra.s	loc_DA24
   16949/    DB40 :                     ; ===========================================================================
   16950/    DB40 :                     
   16951/    DB40 :                     loc_DA36:
   16952/    DB40 : 21C8 F774           		move.l	a0,($FFFFF774).w
   16953/    DB44 :                     
   16954/    DB44 :                     locret_DA3A:
   16955/    DB44 : 4E75                		rts	
   16956/    DB46 :                     ; ===========================================================================
   16957/    DB46 :                     
   16958/    DB46 :                     loc_DA3C:
   16959/    DB46 : 4A28 0004           		tst.b	4(a0)
   16960/    DB4A : 6A0E                		bpl.s	OPL_MakeItem
   16961/    DB4C : 08F2 0007 2002      		bset	#7,2(a2,d2.w)
   16962/    DB52 : 6706                		beq.s	OPL_MakeItem
   16963/    DB54 : 5C48                		addq.w	#6,a0
   16964/    DB56 : 7000                		moveq	#0,d0
   16965/    DB58 : 4E75                		rts	
   16966/    DB5A :                     ; ===========================================================================
   16967/    DB5A :                     
   16968/    DB5A :                     OPL_MakeItem:
   16969/    DB5A : 6100 003A           		bsr.w	SingleObjLoad
   16970/    DB5E : 6634                		bne.s	locret_DA8A
   16971/    DB60 : 3358 0008           		move.w	(a0)+,8(a1)
   16972/    DB64 : 3018                		move.w	(a0)+,d0
   16973/    DB66 : 3200                		move.w	d0,d1
   16974/    DB68 : 0240 0FFF           		andi.w	#$FFF,d0
   16975/    DB6C : 3340 000C           		move.w	d0,$C(a1)
   16976/    DB70 : E559                		rol.w	#2,d1
   16977/    DB72 : 0201 0003           		andi.b	#3,d1
   16978/    DB76 : 1341 0001           		move.b	d1,1(a1)
   16979/    DB7A : 1341 0022           		move.b	d1,$22(a1)
   16980/    DB7E : 1018                		move.b	(a0)+,d0
   16981/    DB80 : 6A08                		bpl.s	loc_DA80
   16982/    DB82 : 0200 007F           		andi.b	#$7F,d0
   16983/    DB86 : 1342 0023           		move.b	d2,$23(a1)
   16984/    DB8A :                     
   16985/    DB8A :                     loc_DA80:
   16986/    DB8A : (MACRO)             		_move.b	d0,0(a1)
   16986/    DB8A :  (MACRO-2)                          insn2op move.b, d0,0(a1)
   16986/    DB8A : 1340 0001                                   !move.b   d0,1+0(a1)
   16986/    DB8D :                                             !org    *-1
   16986/    DB8D : 00                                          !dc.b   0
   16987/    DB8E : 1358 0028           		move.b	(a0)+,$28(a1)
   16988/    DB92 : 7000                		moveq	#0,d0
   16989/    DB94 :                     
   16990/    DB94 :                     locret_DA8A:
   16991/    DB94 : 4E75                		rts	
   16992/    DB96 :                     ; ---------------------------------------------------------------------------
   16993/    DB96 :                     ; Single object	loading	subroutine
   16994/    DB96 :                     ; ---------------------------------------------------------------------------
   16995/    DB96 :                     
   16996/    DB96 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16997/    DB96 :                     
   16998/    DB96 :                     
   16999/    DB96 :                     SingleObjLoad:
   17000/    DB96 : 43F8 D800           		lea	($FFFFD800).w,a1 ; start address for object RAM
   17001/    DB9A : 303C 005F           		move.w	#$5F,d0
   17002/    DB9E :                     
   17003/    DB9E :                     loc_DA94:
   17004/    DB9E : 4A11                		tst.b	(a1)		; is object RAM	slot empty?
   17005/    DBA0 : 6708                		beq.s	locret_DAA0	; if yes, branch
   17006/    DBA2 : 43E9 0040           		lea	$40(a1),a1	; goto next object RAM slot
   17007/    DBA6 : 51C8 FFF6           		dbf	d0,loc_DA94	; repeat $5F times
   17008/    DBAA :                     
   17009/    DBAA :                     locret_DAA0:
   17010/    DBAA : 4E75                		rts	
   17011/    DBAC :                     ; End of function SingleObjLoad
   17012/    DBAC :                     
   17013/    DBAC :                     
   17014/    DBAC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   17015/    DBAC :                     
   17016/    DBAC :                     
   17017/    DBAC :                     SingleObjLoad2:
   17018/    DBAC : 2248                		movea.l	a0,a1
   17019/    DBAE : 303C F000           		move.w	#-$1000,d0
   17020/    DBB2 : 9048                		sub.w	a0,d0
   17021/    DBB4 : EC48                		lsr.w	#6,d0
   17022/    DBB6 : 5340                		subq.w	#1,d0
   17023/    DBB8 : 650C                		bcs.s	locret_DABC
   17024/    DBBA :                     
   17025/    DBBA :                     loc_DAB0:
   17026/    DBBA : 4A11                		tst.b	(a1)
   17027/    DBBC : 6708                		beq.s	locret_DABC
   17028/    DBBE : 43E9 0040           		lea	$40(a1),a1
   17029/    DBC2 : 51C8 FFF6           		dbf	d0,loc_DAB0
   17030/    DBC6 :                     
   17031/    DBC6 :                     locret_DABC:
   17032/    DBC6 : 4E75                		rts	
   17033/    DBC8 :                     ; End of function SingleObjLoad2
   17034/    DBC8 :                     
   17035/    DBC8 :                     ; ===========================================================================
   17036/    DBC8 :                     ; ---------------------------------------------------------------------------
   17037/    DBC8 :                     ; Object 41 - springs
   17038/    DBC8 :                     ; ---------------------------------------------------------------------------
   17039/    DBC8 :                     
   17040/    DBC8 :                     Obj41:					; XREF: Obj_Index
   17041/    DBC8 : 7000                		moveq	#0,d0
   17042/    DBCA : 1028 0024           		move.b	$24(a0),d0
   17043/    DBCE : 323B 002A           		move.w	Obj41_Index(pc,d0.w),d1
   17044/    DBD2 : 4EBB 1026           		jsr	Obj41_Index(pc,d1.w)
   17045/    DBD6 : 6100 FB36           		bsr.w	DisplaySprite
   17046/    DBDA : 3028 0008           		move.w	8(a0),d0
   17047/    DBDE : 0240 FF80           		andi.w	#$FF80,d0
   17048/    DBE2 : 3238 F700           		move.w	($FFFFF700).w,d1
   17049/    DBE6 : 0441 0080           		subi.w	#$80,d1
   17050/    DBEA : 0241 FF80           		andi.w	#$FF80,d1
   17051/    DBEE : 9041                		sub.w	d1,d0
   17052/    DBF0 : 0C40 0280           		cmpi.w	#$280,d0
   17053/    DBF4 : 6200 FB54           		bhi.w	DeleteObject
   17054/    DBF8 : 4E75                		rts	
   17055/    DBFA :                     ; ===========================================================================
   17056/    DBFA : 0018                Obj41_Index:	dc.w Obj41_Main-Obj41_Index
   17057/    DBFC : 008E                		dc.w Obj41_Up-Obj41_Index
   17058/    DBFE : 00E4                		dc.w Obj41_AniUp-Obj41_Index
   17059/    DC00 : 00EE                		dc.w Obj41_ResetUp-Obj41_Index
   17060/    DC02 : 00FA                		dc.w Obj41_LR-Obj41_Index
   17061/    DC04 : 017C                		dc.w Obj41_AniLR-Obj41_Index
   17062/    DC06 : 0186                		dc.w Obj41_ResetLR-Obj41_Index
   17063/    DC08 : 0192                		dc.w Obj41_Dwn-Obj41_Index
   17064/    DC0A : 01F8                		dc.w Obj41_AniDwn-Obj41_Index
   17065/    DC0C : 0202                		dc.w Obj41_ResetDwn-Obj41_Index
   17066/    DC0E :                     
   17067/    DC0E : F000                Obj41_Powers:	dc.w -$1000		; power	of red spring
   17068/    DC10 : F600                		dc.w -$A00		; power	of yellow spring
   17069/    DC12 :                     ; ===========================================================================
   17070/    DC12 :                     
   17071/    DC12 :                     Obj41_Main:				; XREF: Obj41_Index
   17072/    DC12 : 5428 0024           		addq.b	#2,$24(a0)
   17073/    DC16 : 217C 0000 DE24 0004 		move.l	#Map_obj41,4(a0)
   17074/    DC1E : 317C 0523 0002      		move.w	#$523,2(a0)
   17075/    DC24 : 0028 0004 0001      		ori.b	#4,1(a0)
   17076/    DC2A : 117C 0010 0019      		move.b	#$10,$19(a0)
   17077/    DC30 : 117C 0004 0018      		move.b	#4,$18(a0)
   17078/    DC36 : 1028 0028           		move.b	$28(a0),d0
   17079/    DC3A : 0800 0004           		btst	#4,d0		; does the spring face left/right?
   17080/    DC3E : 671E                		beq.s	loc_DB54	; if not, branch
   17081/    DC40 : 117C 0008 0024      		move.b	#8,$24(a0)	; use "Obj41_LR" routine
   17082/    DC46 : 117C 0001 001C      		move.b	#1,$1C(a0)
   17083/    DC4C : 117C 0003 001A      		move.b	#3,$1A(a0)
   17084/    DC52 : 317C 0533 0002      		move.w	#$533,2(a0)
   17085/    DC58 : 117C 0008 0019      		move.b	#8,$19(a0)
   17086/    DC5E :                     
   17087/    DC5E :                     loc_DB54:
   17088/    DC5E : 0800 0005           		btst	#5,d0		; does the spring face downwards?
   17089/    DC62 : 670C                		beq.s	loc_DB66	; if not, branch
   17090/    DC64 : 117C 000E 0024      		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
   17091/    DC6A : 08E8 0001 0022      		bset	#1,$22(a0)
   17092/    DC70 :                     
   17093/    DC70 :                     loc_DB66:
   17094/    DC70 : 0800 0001           		btst	#1,d0
   17095/    DC74 : 6706                		beq.s	loc_DB72
   17096/    DC76 : 08E8 0005 0002      		bset	#5,2(a0)
   17097/    DC7C :                     
   17098/    DC7C :                     loc_DB72:
   17099/    DC7C : 0240 000F           		andi.w	#$F,d0
   17100/    DC80 : 317B 008C 0030      		move.w	Obj41_Powers(pc,d0.w),$30(a0)
   17101/    DC86 : 4E75                		rts	
   17102/    DC88 :                     ; ===========================================================================
   17103/    DC88 :                     
   17104/    DC88 :                     Obj41_Up:				; XREF: Obj41_Index
   17105/    DC88 : 323C 001B           		move.w	#$1B,d1
   17106/    DC8C : 343C 0008           		move.w	#8,d2
   17107/    DC90 : 363C 0010           		move.w	#$10,d3
   17108/    DC94 : 3828 0008           		move.w	8(a0),d4
   17109/    DC98 : 6100 1E4C           		bsr.w	SolidObject
   17110/    DC9C : 4A28 0025           		tst.b	$25(a0)		; is Sonic on top of the spring?
   17111/    DCA0 : 6602                		bne.s	Obj41_BounceUp	; if yes, branch
   17112/    DCA2 : 4E75                		rts	
   17113/    DCA4 :                     ; ===========================================================================
   17114/    DCA4 :                     
   17115/    DCA4 :                     Obj41_BounceUp:				; XREF: Obj41_Up
   17116/    DCA4 : 5428 0024           		addq.b	#2,$24(a0)
   17117/    DCA8 : 5069 000C           		addq.w	#8,$C(a1)
   17118/    DCAC : 3368 0030 0012      		move.w	$30(a0),$12(a1)	; move Sonic upwards
   17119/    DCB2 : 08E9 0001 0022      		bset	#1,$22(a1)
   17120/    DCB8 : 08A9 0003 0022      		bclr	#3,$22(a1)
   17121/    DCBE : 137C 0010 001C      		move.b	#$10,$1C(a1)	; use "bouncing" animation
   17122/    DCC4 : 137C 0002 0024      		move.b	#2,$24(a1)
   17123/    DCCA : 08A8 0003 0022      		bclr	#3,$22(a0)
   17124/    DCD0 : 4228 0025           		clr.b	$25(a0)
   17125/    DCD4 : 303C 00CC           		move.w	#$CC,d0
   17126/    DCD8 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play spring sound
   17127/    DCDE :                     
   17128/    DCDE :                     Obj41_AniUp:				; XREF: Obj41_Index
   17129/    DCDE : 43F9 0000 DE08      		lea	(Ani_obj41).l,a1
   17130/    DCE4 : 6000 CA4E           		bra.w	AnimateSprite
   17131/    DCE8 :                     ; ===========================================================================
   17132/    DCE8 :                     
   17133/    DCE8 :                     Obj41_ResetUp:				; XREF: Obj41_Index
   17134/    DCE8 : 117C 0001 001D      		move.b	#1,$1D(a0)	; reset	animation
   17135/    DCEE : 5928 0024           		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
   17136/    DCF2 : 4E75                		rts	
   17137/    DCF4 :                     ; ===========================================================================
   17138/    DCF4 :                     
   17139/    DCF4 :                     Obj41_LR:				; XREF: Obj41_Index
   17140/    DCF4 : 323C 0013           		move.w	#$13,d1
   17141/    DCF8 : 343C 000E           		move.w	#$E,d2
   17142/    DCFC : 363C 000F           		move.w	#$F,d3
   17143/    DD00 : 3828 0008           		move.w	8(a0),d4
   17144/    DD04 : 6100 1DE0           		bsr.w	SolidObject
   17145/    DD08 : 0C28 0002 0024      		cmpi.b	#2,$24(a0)
   17146/    DD0E : 6606                		bne.s	loc_DC0C
   17147/    DD10 : 117C 0008 0024      		move.b	#8,$24(a0)
   17148/    DD16 :                     
   17149/    DD16 :                     loc_DC0C:
   17150/    DD16 : 0828 0005 0022      		btst	#5,$22(a0)
   17151/    DD1C : 6602                		bne.s	Obj41_BounceLR
   17152/    DD1E : 4E75                		rts	
   17153/    DD20 :                     ; ===========================================================================
   17154/    DD20 :                     
   17155/    DD20 :                     Obj41_BounceLR:				; XREF: Obj41_LR
   17156/    DD20 : 5428 0024           		addq.b	#2,$24(a0)
   17157/    DD24 : 3368 0030 0010      		move.w	$30(a0),$10(a1)	; move Sonic to	the left
   17158/    DD2A : 5069 0008           		addq.w	#8,8(a1)
   17159/    DD2E : 0828 0000 0022      		btst	#0,$22(a0)	; is object flipped?
   17160/    DD34 : 660A                		bne.s	loc_DC36	; if yes, branch
   17161/    DD36 : 0469 0010 0008      		subi.w	#$10,8(a1)
   17162/    DD3C : 4469 0010           		neg.w	$10(a1)		; move Sonic to	the right
   17163/    DD40 :                     
   17164/    DD40 :                     loc_DC36:
   17165/    DD40 : 337C 000F 003E      		move.w	#$F,$3E(a1)
   17166/    DD46 : 3369 0010 0014      		move.w	$10(a1),$14(a1)
   17167/    DD4C : 0869 0000 0022      		bchg	#0,$22(a1)
   17168/    DD52 : 0829 0002 0022      		btst	#2,$22(a1)
   17169/    DD58 : 6606                		bne.s	loc_DC56
   17170/    DD5A : 137C 0000 001C      		move.b	#0,$1C(a1)	; use running animation
   17171/    DD60 :                     
   17172/    DD60 :                     loc_DC56:
   17173/    DD60 : 08A8 0005 0022      		bclr	#5,$22(a0)
   17174/    DD66 : 08A9 0005 0022      		bclr	#5,$22(a1)
   17175/    DD6C : 303C 00CC           		move.w	#$CC,d0
   17176/    DD70 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play spring sound
   17177/    DD76 :                     
   17178/    DD76 :                     Obj41_AniLR:				; XREF: Obj41_Index
   17179/    DD76 : 43F9 0000 DE08      		lea	(Ani_obj41).l,a1
   17180/    DD7C : 6000 C9B6           		bra.w	AnimateSprite
   17181/    DD80 :                     ; ===========================================================================
   17182/    DD80 :                     
   17183/    DD80 :                     Obj41_ResetLR:				; XREF: Obj41_Index
   17184/    DD80 : 117C 0002 001D      		move.b	#2,$1D(a0)	; reset	animation
   17185/    DD86 : 5928 0024           		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
   17186/    DD8A : 4E75                		rts	
   17187/    DD8C :                     ; ===========================================================================
   17188/    DD8C :                     
   17189/    DD8C :                     Obj41_Dwn:				; XREF: Obj41_Index
   17190/    DD8C : 323C 001B           		move.w	#$1B,d1
   17191/    DD90 : 343C 0008           		move.w	#8,d2
   17192/    DD94 : 363C 0010           		move.w	#$10,d3
   17193/    DD98 : 3828 0008           		move.w	8(a0),d4
   17194/    DD9C : 6100 1D48           		bsr.w	SolidObject
   17195/    DDA0 : 0C28 0002 0024      		cmpi.b	#2,$24(a0)
   17196/    DDA6 : 6606                		bne.s	loc_DCA4
   17197/    DDA8 : 117C 000E 0024      		move.b	#$E,$24(a0)
   17198/    DDAE :                     
   17199/    DDAE :                     loc_DCA4:
   17200/    DDAE : 4A28 0025           		tst.b	$25(a0)
   17201/    DDB2 : 6604                		bne.s	locret_DCAE
   17202/    DDB4 : 4A44                		tst.w	d4
   17203/    DDB6 : 6B02                		bmi.s	Obj41_BounceDwn
   17204/    DDB8 :                     
   17205/    DDB8 :                     locret_DCAE:
   17206/    DDB8 : 4E75                		rts	
   17207/    DDBA :                     ; ===========================================================================
   17208/    DDBA :                     
   17209/    DDBA :                     Obj41_BounceDwn:			; XREF: Obj41_Dwn
   17210/    DDBA : 5428 0024           		addq.b	#2,$24(a0)
   17211/    DDBE : 5169 000C           		subq.w	#8,$C(a1)
   17212/    DDC2 : 3368 0030 0012      		move.w	$30(a0),$12(a1)
   17213/    DDC8 : 4469 0012           		neg.w	$12(a1)		; move Sonic downwards
   17214/    DDCC : 08E9 0001 0022      		bset	#1,$22(a1)
   17215/    DDD2 : 08A9 0003 0022      		bclr	#3,$22(a1)
   17216/    DDD8 : 137C 0002 0024      		move.b	#2,$24(a1)
   17217/    DDDE : 08A8 0003 0022      		bclr	#3,$22(a0)
   17218/    DDE4 : 4228 0025           		clr.b	$25(a0)
   17219/    DDE8 : 303C 00CC           		move.w	#$CC,d0
   17220/    DDEC : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play spring sound
   17221/    DDF2 :                     
   17222/    DDF2 :                     Obj41_AniDwn:				; XREF: Obj41_Index
   17223/    DDF2 : 43F9 0000 DE08      		lea	(Ani_obj41).l,a1
   17224/    DDF8 : 6000 C93A           		bra.w	AnimateSprite
   17225/    DDFC :                     ; ===========================================================================
   17226/    DDFC :                     
   17227/    DDFC :                     Obj41_ResetDwn:				; XREF: Obj41_Index
   17228/    DDFC : 117C 0001 001D      		move.b	#1,$1D(a0)	; reset	animation
   17229/    DE02 : 5928 0024           		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
   17230/    DE06 : 4E75                		rts	
   17231/    DE08 :                     ; ===========================================================================
   17232/    DE08 :                     Ani_obj41:
   17233/    DE08 :                     		include	"_anim/obj41.asm"
(1)    1/    DE08 :                     ; ---------------------------------------------------------------------------
(1)    2/    DE08 :                     ; Animation script - springs
(1)    3/    DE08 :                     ; ---------------------------------------------------------------------------
(1)    4/    DE08 : 0004                		dc.w byte_DD02-Ani_obj41
(1)    5/    DE0A : 0010                		dc.w byte_DD0E-Ani_obj41
(1)    6/    DE0C : 0001 0000 0202 0202 byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
                    0202 00FC           
(1)    7/    DE18 : 0004 0303 0505 0505 byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
                    0505 03FC           
(1)    8/    DE24 : (MACRO)             		align 2
(1)    8/    DE24 :  (MACRO-2)                  cnop 0,2
(1)    8/    DE24 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   17234/    DE24 :                     
   17235/    DE24 :                     ; ---------------------------------------------------------------------------
   17236/    DE24 :                     ; Sprite mappings - springs
   17237/    DE24 :                     ; ---------------------------------------------------------------------------
   17238/    DE24 :                     Map_obj41:
   17239/    DE24 :                     		include	"_maps/obj41.asm"
(1)    1/    DE24 :                     ; ---------------------------------------------------------------------------
(1)    2/    DE24 :                     ; Sprite mappings - springs
(1)    3/    DE24 :                     ; ---------------------------------------------------------------------------
(1)    4/    DE24 : 000C                		dc.w byte_DD26-Map_obj41
(1)    5/    DE26 : 0017                		dc.w byte_DD31-Map_obj41
(1)    6/    DE28 : 001D                		dc.w byte_DD37-Map_obj41
(1)    7/    DE2A : 002D                		dc.w byte_DD47-Map_obj41
(1)    8/    DE2C : 0033                		dc.w byte_DD4D-Map_obj41
(1)    9/    DE2E : 0039                		dc.w byte_DD53-Map_obj41
(1)   10/    DE30 : 02                  byte_DD26:	dc.b 2
(1)   11/    DE31 : F80C 0000 F0        		dc.b $F8, $C, 0, 0, $F0
(1)   12/    DE36 : 000C 0004 F0        		dc.b 0,	$C, 0, 4, $F0
(1)   13/    DE3B : 01                  byte_DD31:	dc.b 1
(1)   14/    DE3C : 000C 0000 F0        		dc.b 0,	$C, 0, 0, $F0
(1)   15/    DE41 : 03                  byte_DD37:	dc.b 3
(1)   16/    DE42 : E80C 0000 F0        		dc.b $E8, $C, 0, 0, $F0
(1)   17/    DE47 : F005 0008 F8        		dc.b $F0, 5, 0,	8, $F8
(1)   18/    DE4C : 000C 000C F0        		dc.b 0,	$C, 0, $C, $F0
(1)   19/    DE51 : 01                  byte_DD47:	dc.b 1
(1)   20/    DE52 : F007 0000 F8        		dc.b $F0, 7, 0,	0, $F8
(1)   21/    DE57 : 01                  byte_DD4D:	dc.b 1
(1)   22/    DE58 : F003 0004 F8        		dc.b $F0, 3, 0,	4, $F8
(1)   23/    DE5D : 04                  byte_DD53:	dc.b 4
(1)   24/    DE5E : F003 0004 10        		dc.b $F0, 3, 0,	4, $10
(1)   25/    DE63 : F809 0008 F8        		dc.b $F8, 9, 0,	8, $F8
(1)   26/    DE68 : F000 0000 F8        		dc.b $F0, 0, 0,	0, $F8
(1)   27/    DE6D : 0800 0003 F8        		dc.b 8,	0, 0, 3, $F8
(1)   28/    DE72 : (MACRO)             		align 2
(1)   28/    DE72 :  (MACRO-2)                  cnop 0,2
(1)   28/    DE72 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   17240/    DE72 :                     
   17241/    DE72 :                     ; ===========================================================================
   17242/    DE72 :                     ; ---------------------------------------------------------------------------
   17243/    DE72 :                     ; Object 42 - Newtron enemy (GHZ)
   17244/    DE72 :                     ; ---------------------------------------------------------------------------
   17245/    DE72 :                     
   17246/    DE72 :                     Obj42:					; XREF: Obj_Index
   17247/    DE72 : 7000                		moveq	#0,d0
   17248/    DE74 : 1028 0024           		move.b	$24(a0),d0
   17249/    DE78 : 323B 0006           		move.w	Obj42_Index(pc,d0.w),d1
   17250/    DE7C : 4EFB 1002           		jmp	Obj42_Index(pc,d1.w)
   17251/    DE80 :                     ; ===========================================================================
   17252/    DE80 : 0006                Obj42_Index:	dc.w Obj42_Main-Obj42_Index
   17253/    DE82 : 0036                		dc.w Obj42_Action-Obj42_Index
   17254/    DE84 : 01A0                		dc.w Obj42_Delete-Obj42_Index
   17255/    DE86 :                     ; ===========================================================================
   17256/    DE86 :                     
   17257/    DE86 :                     Obj42_Main:				; XREF: Obj42_Index
   17258/    DE86 : 5428 0024           		addq.b	#2,$24(a0)
   17259/    DE8A : 217C 0000 E04C 0004 		move.l	#Map_obj42,4(a0)
   17260/    DE92 : 317C 049B 0002      		move.w	#$49B,2(a0)
   17261/    DE98 : 117C 0004 0001      		move.b	#4,1(a0)
   17262/    DE9E : 117C 0004 0018      		move.b	#4,$18(a0)
   17263/    DEA4 : 117C 0014 0019      		move.b	#$14,$19(a0)
   17264/    DEAA : 117C 0010 0016      		move.b	#$10,$16(a0)
   17265/    DEB0 : 117C 0008 0017      		move.b	#8,$17(a0)
   17266/    DEB6 :                     
   17267/    DEB6 :                     Obj42_Action:				; XREF: Obj42_Index
   17268/    DEB6 : 7000                		moveq	#0,d0
   17269/    DEB8 : 1028 0025           		move.b	$25(a0),d0
   17270/    DEBC : 323B 0014           		move.w	Obj42_Index2(pc,d0.w),d1
   17271/    DEC0 : 4EBB 1010           		jsr	Obj42_Index2(pc,d1.w)
   17272/    DEC4 : 43F9 0000 E024      		lea	(Ani_obj42).l,a1
   17273/    DECA : 6100 C868           		bsr.w	AnimateSprite
   17274/    DECE : 6000 18EC           		bra.w	MarkObjGone
   17275/    DED2 :                     ; ===========================================================================
   17276/    DED2 : 000A                Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
   17277/    DED4 : 004C                		dc.w Obj42_Type00-Obj42_Index2
   17278/    DED6 : 00C0                		dc.w Obj42_MatchFloor-Obj42_Index2
   17279/    DED8 : 00E0                		dc.w Obj42_Speed-Obj42_Index2
   17280/    DEDA : 00E6                		dc.w Obj42_Type01-Obj42_Index2
   17281/    DEDC :                     ; ===========================================================================
   17282/    DEDC :                     
   17283/    DEDC :                     Obj42_ChkDist:				; XREF: Obj42_Index2
   17284/    DEDC : 08E8 0000 0022      		bset	#0,$22(a0)
   17285/    DEE2 : 3038 D008           		move.w	($FFFFD008).w,d0
   17286/    DEE6 : 9068 0008           		sub.w	8(a0),d0
   17287/    DEEA : 6408                		bcc.s	loc_DDEA
   17288/    DEEC : 4440                		neg.w	d0
   17289/    DEEE : 08A8 0000 0022      		bclr	#0,$22(a0)
   17290/    DEF4 :                     
   17291/    DEF4 :                     loc_DDEA:
   17292/    DEF4 : 0C40 0080           		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
   17293/    DEF8 : 6422                		bcc.s	locret_DE12	; if not, branch
   17294/    DEFA : 5428 0025           		addq.b	#2,$25(a0)
   17295/    DEFE : 117C 0001 001C      		move.b	#1,$1C(a0)
   17296/    DF04 : 4A28 0028           		tst.b	$28(a0)		; check	object type
   17297/    DF08 : 6712                		beq.s	locret_DE12	; if type is 00, branch
   17298/    DF0A : 317C 249B 0002      		move.w	#$249B,2(a0)
   17299/    DF10 : 117C 0008 0025      		move.b	#8,$25(a0)	; run type 01 newtron subroutine
   17300/    DF16 : 117C 0004 001C      		move.b	#4,$1C(a0)	; use different	animation
   17301/    DF1C :                     
   17302/    DF1C :                     locret_DE12:
   17303/    DF1C : 4E75                		rts	
   17304/    DF1E :                     ; ===========================================================================
   17305/    DF1E :                     
   17306/    DF1E :                     Obj42_Type00:				; XREF: Obj42_Index2
   17307/    DF1E : 0C28 0004 001A      		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
   17308/    DF24 : 6418                		bcc.s	Obj42_Fall	; is yes, branch
   17309/    DF26 : 08E8 0000 0022      		bset	#0,$22(a0)
   17310/    DF2C : 3038 D008           		move.w	($FFFFD008).w,d0
   17311/    DF30 : 9068 0008           		sub.w	8(a0),d0
   17312/    DF34 : 6406                		bcc.s	locret_DE32
   17313/    DF36 : 08A8 0000 0022      		bclr	#0,$22(a0)
   17314/    DF3C :                     
   17315/    DF3C :                     locret_DE32:
   17316/    DF3C : 4E75                		rts	
   17317/    DF3E :                     ; ===========================================================================
   17318/    DF3E :                     
   17319/    DF3E :                     Obj42_Fall:				; XREF: Obj42_Type00
   17320/    DF3E : 0C28 0001 001A      		cmpi.b	#1,$1A(a0)
   17321/    DF44 : 6606                		bne.s	loc_DE42
   17322/    DF46 : 117C 000C 0020      		move.b	#$C,$20(a0)
   17323/    DF4C :                     
   17324/    DF4C :                     loc_DE42:
   17325/    DF4C : 6100 F76E           		bsr.w	ObjectFall
   17326/    DF50 : 6100 7142           		bsr.w	ObjHitFloor
   17327/    DF54 : 4A41                		tst.w	d1		; has newtron hit the floor?
   17328/    DF56 : 6A38                		bpl.s	locret_DE86	; if not, branch
   17329/    DF58 : D368 000C           		add.w	d1,$C(a0)
   17330/    DF5C : 317C 0000 0012      		move.w	#0,$12(a0)	; stop newtron falling
   17331/    DF62 : 5428 0025           		addq.b	#2,$25(a0)
   17332/    DF66 : 117C 0002 001C      		move.b	#2,$1C(a0)
   17333/    DF6C : 0828 0005 0002      		btst	#5,2(a0)
   17334/    DF72 : 6704                		beq.s	Obj42_Move
   17335/    DF74 : 5228 001C           		addq.b	#1,$1C(a0)
   17336/    DF78 :                     
   17337/    DF78 :                     Obj42_Move:
   17338/    DF78 : 117C 000D 0020      		move.b	#$D,$20(a0)
   17339/    DF7E : 317C 0200 0010      		move.w	#$200,$10(a0)	; move newtron horizontally
   17340/    DF84 : 0828 0000 0022      		btst	#0,$22(a0)
   17341/    DF8A : 6604                		bne.s	locret_DE86
   17342/    DF8C : 4468 0010           		neg.w	$10(a0)
   17343/    DF90 :                     
   17344/    DF90 :                     locret_DE86:
   17345/    DF90 : 4E75                		rts	
   17346/    DF92 :                     ; ===========================================================================
   17347/    DF92 :                     
   17348/    DF92 :                     Obj42_MatchFloor:			; XREF: Obj42_Index2
   17349/    DF92 : 6100 F754           		bsr.w	SpeedToPos
   17350/    DF96 : 6100 70FC           		bsr.w	ObjHitFloor
   17351/    DF9A : 0C41 FFF8           		cmpi.w	#-8,d1
   17352/    DF9E : 6D0C                		blt.s	loc_DEA2
   17353/    DFA0 : 0C41 000C           		cmpi.w	#$C,d1
   17354/    DFA4 : 6C06                		bge.s	loc_DEA2
   17355/    DFA6 : D368 000C           		add.w	d1,$C(a0)	; match	newtron"s position with floor
   17356/    DFAA : 4E75                		rts	
   17357/    DFAC :                     ; ===========================================================================
   17358/    DFAC :                     
   17359/    DFAC :                     loc_DEA2:
   17360/    DFAC : 5428 0025           		addq.b	#2,$25(a0)
   17361/    DFB0 : 4E75                		rts	
   17362/    DFB2 :                     ; ===========================================================================
   17363/    DFB2 :                     
   17364/    DFB2 :                     Obj42_Speed:				; XREF: Obj42_Index2
   17365/    DFB2 : 6100 F734           		bsr.w	SpeedToPos
   17366/    DFB6 : 4E75                		rts	
   17367/    DFB8 :                     ; ===========================================================================
   17368/    DFB8 :                     
   17369/    DFB8 :                     Obj42_Type01:				; XREF: Obj42_Index2
   17370/    DFB8 : 0C28 0001 001A      		cmpi.b	#1,$1A(a0)
   17371/    DFBE : 6606                		bne.s	Obj42_FireMissile
   17372/    DFC0 : 117C 000C 0020      		move.b	#$C,$20(a0)
   17373/    DFC6 :                     
   17374/    DFC6 :                     Obj42_FireMissile:
   17375/    DFC6 : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)
   17376/    DFCC : 6650                		bne.s	locret_DF14
   17377/    DFCE : 4A28 0032           		tst.b	$32(a0)
   17378/    DFD2 : 664A                		bne.s	locret_DF14
   17379/    DFD4 : 117C 0001 0032      		move.b	#1,$32(a0)
   17380/    DFDA : 6100 FBBA           		bsr.w	SingleObjLoad
   17381/    DFDE : 663E                		bne.s	locret_DF14
   17382/    DFE0 : (MACRO)             		_move.b	#$23,0(a1)	; load missile object
   17382/    DFE0 :  (MACRO-2)                          insn2op move.b, #$23,0(a1)
   17382/    DFE0 : 137C 0023 0001                              !move.b   #$23,1+0(a1)
   17382/    DFE5 :                                             !org    *-1
   17382/    DFE5 : 00                                          !dc.b   0
   17383/    DFE6 : 3368 0008 0008      		move.w	8(a0),8(a1)
   17384/    DFEC : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   17385/    DFF2 : 5169 000C           		subq.w	#8,$C(a1)
   17386/    DFF6 : 337C 0200 0010      		move.w	#$200,$10(a1)
   17387/    DFFC : 303C 0014           		move.w	#$14,d0
   17388/    E000 : 0828 0000 0022      		btst	#0,$22(a0)
   17389/    E006 : 6606                		bne.s	loc_DF04
   17390/    E008 : 4440                		neg.w	d0
   17391/    E00A : 4469 0010           		neg.w	$10(a1)
   17392/    E00E :                     
   17393/    E00E :                     loc_DF04:
   17394/    E00E : D169 0008           		add.w	d0,8(a1)
   17395/    E012 : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   17396/    E018 : 137C 0001 0028      		move.b	#1,$28(a1)
   17397/    E01E :                     
   17398/    E01E :                     locret_DF14:
   17399/    E01E : 4E75                		rts	
   17400/    E020 :                     ; ===========================================================================
   17401/    E020 :                     
   17402/    E020 :                     Obj42_Delete:				; XREF: Obj42_Index
   17403/    E020 : 6000 F728           		bra.w	DeleteObject
   17404/    E024 :                     ; ===========================================================================
   17405/    E024 :                     Ani_obj42:
   17406/    E024 :                     		include	"_anim/obj42.asm"
(1)    1/    E024 :                     ; ---------------------------------------------------------------------------
(1)    2/    E024 :                     ; Animation script - Newtron enemy
(1)    3/    E024 :                     ; ---------------------------------------------------------------------------
(1)    4/    E024 : 000A                		dc.w byte_DF24-Ani_obj42
(1)    5/    E026 : 000E                		dc.w byte_DF28-Ani_obj42
(1)    6/    E028 : 0016                		dc.w byte_DF30-Ani_obj42
(1)    7/    E02A : 001A                		dc.w byte_DF34-Ani_obj42
(1)    8/    E02C : 001E                		dc.w byte_DF38-Ani_obj42
(1)    9/    E02E : 0F0A FF00           byte_DF24:	dc.b $F, $A, $FF, 0
(1)   10/    E032 : 1300 0103 0405 FE01 byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
(1)   11/    E03A : 0206 07FF           byte_DF30:	dc.b 2,	6, 7, $FF
(1)   12/    E03E : 0208 09FF           byte_DF34:	dc.b 2,	8, 9, $FF
(1)   13/    E042 : 1300 0101 0201 0100 byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
                    FC00                
(1)   14/    E04C : (MACRO)             		align 2
(1)   14/    E04C :  (MACRO-2)                  cnop 0,2
(1)   14/    E04C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   17407/    E04C :                     
   17408/    E04C :                     ; ---------------------------------------------------------------------------
   17409/    E04C :                     ; Sprite mappings - Newtron enemy (GHZ)
   17410/    E04C :                     ; ---------------------------------------------------------------------------
   17411/    E04C :                     Map_obj42:
   17412/    E04C :                     		include	"_maps/obj42.asm"
(1)    1/    E04C :                     ; ---------------------------------------------------------------------------
(1)    2/    E04C :                     ; Sprite mappings - Newtron enemy (GHZ)
(1)    3/    E04C :                     ; ---------------------------------------------------------------------------
(1)    4/    E04C : 0016 0026           		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
(1)    5/    E050 : 0036 0046           		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
(1)    6/    E054 : 005B 006B           		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
(1)    7/    E058 : 0076 0086           		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
(1)    8/    E05C : 0096 00A6           		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
(1)    9/    E060 : 00B6                		dc.w byte_DFF8-Map_obj42
(1)   10/    E062 : 03                  byte_DF58:	dc.b 3
(1)   11/    E063 : EC0D 0000 EC        		dc.b $EC, $D, 0, 0, $EC
(1)   12/    E068 : F400 0008 0C        		dc.b $F4, 0, 0,	8, $C
(1)   13/    E06D : FC0E 0009 F4        		dc.b $FC, $E, 0, 9, $F4
(1)   14/    E072 : 03                  byte_DF68:	dc.b 3
(1)   15/    E073 : EC06 0015 EC        		dc.b $EC, 6, 0,	$15, $EC
(1)   16/    E078 : EC09 001B FC        		dc.b $EC, 9, 0,	$1B, $FC
(1)   17/    E07D : FC0A 0021 FC        		dc.b $FC, $A, 0, $21, $FC
(1)   18/    E082 : 03                  byte_DF78:	dc.b 3
(1)   19/    E083 : EC06 002A EC        		dc.b $EC, 6, 0,	$2A, $EC
(1)   20/    E088 : EC09 001B FC        		dc.b $EC, 9, 0,	$1B, $FC
(1)   21/    E08D : FC0A 0021 FC        		dc.b $FC, $A, 0, $21, $FC
(1)   22/    E092 : 04                  byte_DF88:	dc.b 4
(1)   23/    E093 : EC06 0030 EC        		dc.b $EC, 6, 0,	$30, $EC
(1)   24/    E098 : EC09 001B FC        		dc.b $EC, 9, 0,	$1B, $FC
(1)   25/    E09D : FC09 0036 FC        		dc.b $FC, 9, 0,	$36, $FC
(1)   26/    E0A2 : 0C00 003C 0C        		dc.b $C, 0, 0, $3C, $C
(1)   27/    E0A7 : 03                  byte_DF9D:	dc.b 3
(1)   28/    E0A8 : F40D 003D EC        		dc.b $F4, $D, 0, $3D, $EC
(1)   29/    E0AD : FC00 0020 0C        		dc.b $FC, 0, 0,	$20, $C
(1)   30/    E0B2 : 0408 0045 FC        		dc.b 4,	8, 0, $45, $FC
(1)   31/    E0B7 : 02                  byte_DFAD:	dc.b 2
(1)   32/    E0B8 : F80D 0048 EC        		dc.b $F8, $D, 0, $48, $EC
(1)   33/    E0BD : F801 0050 0C        		dc.b $F8, 1, 0,	$50, $C
(1)   34/    E0C2 : 03                  byte_DFB8:	dc.b 3
(1)   35/    E0C3 : F80D 0048 EC        		dc.b $F8, $D, 0, $48, $EC
(1)   36/    E0C8 : F801 0050 0C        		dc.b $F8, 1, 0,	$50, $C
(1)   37/    E0CD : FE00 0052 14        		dc.b $FE, 0, 0,	$52, $14
(1)   38/    E0D2 : 03                  byte_DFC8:	dc.b 3
(1)   39/    E0D3 : F80D 0048 EC        		dc.b $F8, $D, 0, $48, $EC
(1)   40/    E0D8 : F801 0050 0C        		dc.b $F8, 1, 0,	$50, $C
(1)   41/    E0DD : FE04 0053 14        		dc.b $FE, 4, 0,	$53, $14
(1)   42/    E0E2 : 03                  byte_DFD8:	dc.b 3
(1)   43/    E0E3 : F80D 0048 EC        		dc.b $F8, $D, 0, $48, $EC
(1)   44/    E0E8 : F801 0050 0C        		dc.b $F8, 1, 0,	$50, $C
(1)   45/    E0ED : FE00 E052 14        		dc.b $FE, 0, $E0, $52, $14
(1)   46/    E0F2 : 03                  byte_DFE8:	dc.b 3
(1)   47/    E0F3 : F80D 0048 EC        		dc.b $F8, $D, 0, $48, $EC
(1)   48/    E0F8 : F801 0050 0C        		dc.b $F8, 1, 0,	$50, $C
(1)   49/    E0FD : FE04 E053 14        		dc.b $FE, 4, $E0, $53, $14
(1)   50/    E102 : 00                  byte_DFF8:	dc.b 0
(1)   51/    E103 : (MACRO)             		align 2
(1)   51/    E103 :  (MACRO-2)                  cnop 0,2
(1)   51/    E103 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   51/    E103 : =$1B                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   51/    E104 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   17413/    E104 :                     
   17414/    E104 :                     ; ===========================================================================
   17415/    E104 :                     ; ---------------------------------------------------------------------------
   17416/    E104 :                     ; Object 43 - Roller enemy (SYZ)
   17417/    E104 :                     ; ---------------------------------------------------------------------------
   17418/    E104 :                     
   17419/    E104 :                     Obj43:					; XREF: Obj_Index
   17420/    E104 : 7000                		moveq	#0,d0
   17421/    E106 : 1028 0024           		move.b	$24(a0),d0
   17422/    E10A : 323B 0006           		move.w	Obj43_Index(pc,d0.w),d1
   17423/    E10E : 4EFB 1002           		jmp	Obj43_Index(pc,d1.w)
   17424/    E112 :                     ; ===========================================================================
   17425/    E112 : 0004                Obj43_Index:	dc.w Obj43_Main-Obj43_Index
   17426/    E114 : 004C                		dc.w Obj43_Action-Obj43_Index
   17427/    E116 :                     ; ===========================================================================
   17428/    E116 :                     
   17429/    E116 :                     Obj43_Main:				; XREF: Obj43_Index
   17430/    E116 : 117C 000E 0016      		move.b	#$E,$16(a0)
   17431/    E11C : 117C 0008 0017      		move.b	#8,$17(a0)
   17432/    E122 : 6100 F598           		bsr.w	ObjectFall
   17433/    E126 : 6100 6F6C           		bsr.w	ObjHitFloor
   17434/    E12A : 4A41                		tst.w	d1
   17435/    E12C : 6A2E                		bpl.s	locret_E052
   17436/    E12E : D368 000C           		add.w	d1,$C(a0)	; match	roller"s position with the floor
   17437/    E132 : 317C 0000 0012      		move.w	#0,$12(a0)
   17438/    E138 : 5428 0024           		addq.b	#2,$24(a0)
   17439/    E13C : 217C 0000 E2AC 0004 		move.l	#Map_obj43,4(a0)
   17440/    E144 : 317C 04B8 0002      		move.w	#$4B8,2(a0)
   17441/    E14A : 117C 0004 0001      		move.b	#4,1(a0)
   17442/    E150 : 117C 0004 0018      		move.b	#4,$18(a0)
   17443/    E156 : 117C 0010 0019      		move.b	#$10,$19(a0)
   17444/    E15C :                     
   17445/    E15C :                     locret_E052:
   17446/    E15C : 4E75                		rts	
   17447/    E15E :                     ; ===========================================================================
   17448/    E15E :                     
   17449/    E15E :                     Obj43_Action:				; XREF: Obj43_Index
   17450/    E15E : 7000                		moveq	#0,d0
   17451/    E160 : 1028 0025           		move.b	$25(a0),d0
   17452/    E164 : 323B 0048           		move.w	Obj43_Index2(pc,d0.w),d1
   17453/    E168 : 4EBB 1044           		jsr	Obj43_Index2(pc,d1.w)
   17454/    E16C : 43F9 0000 E294      		lea	(Ani_obj43).l,a1
   17455/    E172 : 6100 C5C0           		bsr.w	AnimateSprite
   17456/    E176 : 3028 0008           		move.w	8(a0),d0
   17457/    E17A : 0240 FF80           		andi.w	#$FF80,d0
   17458/    E17E : 3238 F700           		move.w	($FFFFF700).w,d1
   17459/    E182 : 0441 0080           		subi.w	#$80,d1
   17460/    E186 : 0241 FF80           		andi.w	#$FF80,d1
   17461/    E18A : 9041                		sub.w	d1,d0
   17462/    E18C : 0C40 0280           		cmpi.w	#$280,d0
   17463/    E190 : 6E00 0006           		bgt.w	Obj43_ChkGone
   17464/    E194 : 6000 F578           		bra.w	DisplaySprite
   17465/    E198 :                     ; ===========================================================================
   17466/    E198 :                     
   17467/    E198 :                     Obj43_ChkGone:				; XREF: Obj43_Action
   17468/    E198 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   17469/    E19C : 7000                		moveq	#0,d0
   17470/    E19E : 1028 0023           		move.b	$23(a0),d0
   17471/    E1A2 : 6706                		beq.s	Obj43_Delete
   17472/    E1A4 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   17473/    E1AA :                     
   17474/    E1AA :                     Obj43_Delete:
   17475/    E1AA : 6000 F59E           		bra.w	DeleteObject
   17476/    E1AE :                     ; ===========================================================================
   17477/    E1AE : 0008                Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
   17478/    E1B0 : 0032                		dc.w Obj43_RollNoChk-Obj43_Index2
   17479/    E1B2 : 005A                		dc.w Obj43_ChkJump-Obj43_Index2
   17480/    E1B4 : 008C                		dc.w Obj43_MatchFloor-Obj43_Index2
   17481/    E1B6 :                     ; ===========================================================================
   17482/    E1B6 :                     
   17483/    E1B6 :                     Obj43_RollChk:				; XREF: Obj43_Index2
   17484/    E1B6 : 3038 D008           		move.w	($FFFFD008).w,d0
   17485/    E1BA : 0440 0100           		subi.w	#$100,d0
   17486/    E1BE : 651C                		bcs.s	loc_E0D2
   17487/    E1C0 : 9068 0008           		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
   17488/    E1C4 : 6516                		bcs.s	loc_E0D2
   17489/    E1C6 : 5828 0025           		addq.b	#4,$25(a0)
   17490/    E1CA : 117C 0002 001C      		move.b	#2,$1C(a0)
   17491/    E1D0 : 317C 0700 0010      		move.w	#$700,$10(a0)	; move Roller horizontally
   17492/    E1D6 : 117C 008E 0020      		move.b	#$8E,$20(a0)	; make Roller invincible
   17493/    E1DC :                     
   17494/    E1DC :                     loc_E0D2:
   17495/    E1DC : 588F                		addq.l	#4,sp
   17496/    E1DE : 4E75                		rts	
   17497/    E1E0 :                     ; ===========================================================================
   17498/    E1E0 :                     
   17499/    E1E0 :                     Obj43_RollNoChk:			; XREF: Obj43_Index2
   17500/    E1E0 : 0C28 0002 001C      		cmpi.b	#2,$1C(a0)
   17501/    E1E6 : 671A                		beq.s	loc_E0F8
   17502/    E1E8 : 5368 0030           		subq.w	#1,$30(a0)
   17503/    E1EC : 6A12                		bpl.s	locret_E0F6
   17504/    E1EE : 117C 0001 001C      		move.b	#1,$1C(a0)
   17505/    E1F4 : 317C 0700 0010      		move.w	#$700,$10(a0)
   17506/    E1FA : 117C 008E 0020      		move.b	#$8E,$20(a0)
   17507/    E200 :                     
   17508/    E200 :                     locret_E0F6:
   17509/    E200 : 4E75                		rts	
   17510/    E202 :                     ; ===========================================================================
   17511/    E202 :                     
   17512/    E202 :                     loc_E0F8:
   17513/    E202 : 5428 0025           		addq.b	#2,$25(a0)
   17514/    E206 : 4E75                		rts	
   17515/    E208 :                     ; ===========================================================================
   17516/    E208 :                     
   17517/    E208 :                     Obj43_ChkJump:				; XREF: Obj43_Index2
   17518/    E208 : 6100 0052           		bsr.w	Obj43_Stop
   17519/    E20C : 6100 F4DA           		bsr.w	SpeedToPos
   17520/    E210 : 6100 6E82           		bsr.w	ObjHitFloor
   17521/    E214 : 0C41 FFF8           		cmpi.w	#-8,d1
   17522/    E218 : 6D0C                		blt.s	Obj43_Jump
   17523/    E21A : 0C41 000C           		cmpi.w	#$C,d1
   17524/    E21E : 6C06                		bge.s	Obj43_Jump
   17525/    E220 : D368 000C           		add.w	d1,$C(a0)
   17526/    E224 : 4E75                		rts	
   17527/    E226 :                     ; ===========================================================================
   17528/    E226 :                     
   17529/    E226 :                     Obj43_Jump:
   17530/    E226 : 5428 0025           		addq.b	#2,$25(a0)
   17531/    E22A : 08E8 0000 0032      		bset	#0,$32(a0)
   17532/    E230 : 6706                		beq.s	locret_E12E
   17533/    E232 : 317C FA00 0012      		move.w	#-$600,$12(a0)	; move Roller vertically
   17534/    E238 :                     
   17535/    E238 :                     locret_E12E:
   17536/    E238 : 4E75                		rts	
   17537/    E23A :                     ; ===========================================================================
   17538/    E23A :                     
   17539/    E23A :                     Obj43_MatchFloor:			; XREF: Obj43_Index2
   17540/    E23A : 6100 F480           		bsr.w	ObjectFall
   17541/    E23E : 4A68 0012           		tst.w	$12(a0)
   17542/    E242 : 6B16                		bmi.s	locret_E150
   17543/    E244 : 6100 6E4E           		bsr.w	ObjHitFloor
   17544/    E248 : 4A41                		tst.w	d1
   17545/    E24A : 6A0E                		bpl.s	locret_E150
   17546/    E24C : D368 000C           		add.w	d1,$C(a0)	; match	Roller"s position with the floor
   17547/    E250 : 5528 0025           		subq.b	#2,$25(a0)
   17548/    E254 : 317C 0000 0012      		move.w	#0,$12(a0)
   17549/    E25A :                     
   17550/    E25A :                     locret_E150:
   17551/    E25A : 4E75                		rts	
   17552/    E25C :                     
   17553/    E25C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   17554/    E25C :                     
   17555/    E25C :                     
   17556/    E25C :                     Obj43_Stop:				; XREF: Obj43_ChkJump
   17557/    E25C : 4A28 0032           		tst.b	$32(a0)
   17558/    E260 : 6B30                		bmi.s	locret_E188
   17559/    E262 : 3038 D008           		move.w	($FFFFD008).w,d0
   17560/    E266 : 0440 0030           		subi.w	#$30,d0
   17561/    E26A : 9068 0008           		sub.w	8(a0),d0
   17562/    E26E : 6422                		bcc.s	locret_E188
   17563/    E270 : 117C 0000 001C      		move.b	#0,$1C(a0)
   17564/    E276 : 117C 000E 0020      		move.b	#$E,$20(a0)
   17565/    E27C : 4268 0010           		clr.w	$10(a0)
   17566/    E280 : 317C 0078 0030      		move.w	#120,$30(a0)	; set waiting time to 2	seconds
   17567/    E286 : 117C 0002 0025      		move.b	#2,$25(a0)
   17568/    E28C : 08E8 0007 0032      		bset	#7,$32(a0)
   17569/    E292 :                     
   17570/    E292 :                     locret_E188:
   17571/    E292 : 4E75                		rts	
   17572/    E294 :                     ; End of function Obj43_Stop
   17573/    E294 :                     
   17574/    E294 :                     ; ===========================================================================
   17575/    E294 :                     Ani_obj43:
   17576/    E294 :                     		include	"_anim/obj43.asm"
(1)    1/    E294 :                     ; ---------------------------------------------------------------------------
(1)    2/    E294 :                     ; Animation script - Roller enemy
(1)    3/    E294 :                     ; ---------------------------------------------------------------------------
(1)    4/    E294 : 0006                		dc.w byte_E190-Ani_obj43
(1)    5/    E296 : 000C                		dc.w byte_E196-Ani_obj43
(1)    6/    E298 : 0012                		dc.w byte_E19C-Ani_obj43
(1)    7/    E29A : 0F02 0100 FE01      byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
(1)    8/    E2A0 : 0F01 02FD 0200      byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
(1)    9/    E2A6 : 0303 0402 FF        byte_E19C:	dc.b 3,	3, 4, 2, $FF
(1)   10/    E2AB : (MACRO)             		align 2
(1)   10/    E2AB :  (MACRO-2)                  cnop 0,2
(1)   10/    E2AB :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   10/    E2AB : =$1C                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   10/    E2AC :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   17577/    E2AC :                     
   17578/    E2AC :                     ; ---------------------------------------------------------------------------
   17579/    E2AC :                     ; Sprite mappings - Roller enemy (SYZ)
   17580/    E2AC :                     ; ---------------------------------------------------------------------------
   17581/    E2AC :                     Map_obj43:
   17582/    E2AC :                     		include	"_maps/obj43.asm"
(1)    1/    E2AC :                     ; ---------------------------------------------------------------------------
(1)    2/    E2AC :                     ; Sprite mappings - Roller enemy (SYZ)
(1)    3/    E2AC :                     ; ---------------------------------------------------------------------------
(1)    4/    E2AC : 000A 0015           		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
(1)    5/    E2B0 : 0020 0026           		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
(1)    6/    E2B4 : 002C                		dc.w byte_E1CE-Map_obj43
(1)    7/    E2B6 : 02                  byte_E1AC:	dc.b 2
(1)    8/    E2B7 : DE0E 0000 F0        		dc.b $DE, $E, 0, 0, $F0
(1)    9/    E2BC : F60E 000C F0        		dc.b $F6, $E, 0, $C, $F0
(1)   10/    E2C1 : 02                  byte_E1B7:	dc.b 2
(1)   11/    E2C2 : E60E 0000 F0        		dc.b $E6, $E, 0, 0, $F0
(1)   12/    E2C7 : FE0D 0018 F0        		dc.b $FE, $D, 0, $18, $F0
(1)   13/    E2CC : 01                  byte_E1C2:	dc.b 1
(1)   14/    E2CD : F00F 0020 F0        		dc.b $F0, $F, 0, $20, $F0
(1)   15/    E2D2 : 01                  byte_E1C8:	dc.b 1
(1)   16/    E2D3 : F00F 0030 F0        		dc.b $F0, $F, 0, $30, $F0
(1)   17/    E2D8 : 01                  byte_E1CE:	dc.b 1
(1)   18/    E2D9 : F00F 0040 F0        		dc.b $F0, $F, 0, $40, $F0
(1)   19/    E2DE : (MACRO)             		align 2
(1)   19/    E2DE :  (MACRO-2)                  cnop 0,2
(1)   19/    E2DE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   17583/    E2DE :                     
   17584/    E2DE :                     ; ===========================================================================
   17585/    E2DE :                     ; ---------------------------------------------------------------------------
   17586/    E2DE :                     ; Object 44 - walls (GHZ)
   17587/    E2DE :                     ; ---------------------------------------------------------------------------
   17588/    E2DE :                     
   17589/    E2DE :                     Obj44:					; XREF: Obj_Index
   17590/    E2DE : 7000                		moveq	#0,d0
   17591/    E2E0 : 1028 0024           		move.b	$24(a0),d0
   17592/    E2E4 : 323B 0006           		move.w	Obj44_Index(pc,d0.w),d1
   17593/    E2E8 : 4EFB 1002           		jmp	Obj44_Index(pc,d1.w)
   17594/    E2EC :                     ; ===========================================================================
   17595/    E2EC : 0006                Obj44_Index:	dc.w Obj44_Main-Obj44_Index
   17596/    E2EE : 003E                		dc.w Obj44_Solid-Obj44_Index
   17597/    E2F0 : 004A                		dc.w Obj44_Display-Obj44_Index
   17598/    E2F2 :                     ; ===========================================================================
   17599/    E2F2 :                     
   17600/    E2F2 :                     Obj44_Main:				; XREF: Obj44_Index
   17601/    E2F2 : 5428 0024           		addq.b	#2,$24(a0)
   17602/    E2F6 : 217C 0000 E35A 0004 		move.l	#Map_obj44,4(a0)
   17603/    E2FE : 317C 434C 0002      		move.w	#$434C,2(a0)
   17604/    E304 : 0028 0004 0001      		ori.b	#4,1(a0)
   17605/    E30A : 117C 0008 0019      		move.b	#8,$19(a0)
   17606/    E310 : 117C 0006 0018      		move.b	#6,$18(a0)
   17607/    E316 : 1168 0028 001A      		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
   17608/    E31C : 08A8 0004 001A      		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
   17609/    E322 : 6706                		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
   17610/    E324 : 5428 0024           		addq.b	#2,$24(a0)
   17611/    E328 : 600C                		bra.s	Obj44_Display	; don"t make it solid if 4th bit = 1
   17612/    E32A :                     ; ===========================================================================
   17613/    E32A :                     
   17614/    E32A :                     Obj44_Solid:				; XREF: Obj44_Index
   17615/    E32A : 323C 0013           		move.w	#$13,d1
   17616/    E32E : 343C 0028           		move.w	#$28,d2
   17617/    E332 : 6100 A73A           		bsr.w	Obj44_SolidWall
   17618/    E336 :                     
   17619/    E336 :                     Obj44_Display:				; XREF: Obj44_Index
   17620/    E336 : 6100 F3D6           		bsr.w	DisplaySprite
   17621/    E33A : 3028 0008           		move.w	8(a0),d0
   17622/    E33E : 0240 FF80           		andi.w	#$FF80,d0
   17623/    E342 : 3238 F700           		move.w	($FFFFF700).w,d1
   17624/    E346 : 0441 0080           		subi.w	#$80,d1
   17625/    E34A : 0241 FF80           		andi.w	#$FF80,d1
   17626/    E34E : 9041                		sub.w	d1,d0
   17627/    E350 : 0C40 0280           		cmpi.w	#$280,d0
   17628/    E354 : 6200 F3F4           		bhi.w	DeleteObject
   17629/    E358 : 4E75                		rts	
   17630/    E35A :                     ; ===========================================================================
   17631/    E35A :                     ; ---------------------------------------------------------------------------
   17632/    E35A :                     ; Sprite mappings - walls (GHZ)
   17633/    E35A :                     ; ---------------------------------------------------------------------------
   17634/    E35A :                     Map_obj44:
   17635/    E35A :                     		include	"_maps/obj44.asm"
(1)    1/    E35A :                     ; ---------------------------------------------------------------------------
(1)    2/    E35A :                     ; Sprite mappings - walls (GHZ)
(1)    3/    E35A :                     ; ---------------------------------------------------------------------------
(1)    4/    E35A : 0006                		dc.w byte_E256-Map_obj44
(1)    5/    E35C : 001B                		dc.w byte_E26B-Map_obj44
(1)    6/    E35E : 0030                		dc.w byte_E280-Map_obj44
(1)    7/    E360 : 04                  byte_E256:	dc.b 4
(1)    8/    E361 : E005 0004 F8        		dc.b $E0, 5, 0,	4, $F8
(1)    9/    E366 : F005 0008 F8        		dc.b $F0, 5, 0,	8, $F8
(1)   10/    E36B : 0005 0008 F8        		dc.b 0,	5, 0, 8, $F8
(1)   11/    E370 : 1005 0008 F8        		dc.b $10, 5, 0,	8, $F8
(1)   12/    E375 : 04                  byte_E26B:	dc.b 4
(1)   13/    E376 : E005 0008 F8        		dc.b $E0, 5, 0,	8, $F8
(1)   14/    E37B : F005 0008 F8        		dc.b $F0, 5, 0,	8, $F8
(1)   15/    E380 : 0005 0008 F8        		dc.b 0,	5, 0, 8, $F8
(1)   16/    E385 : 1005 0008 F8        		dc.b $10, 5, 0,	8, $F8
(1)   17/    E38A : 04                  byte_E280:	dc.b 4
(1)   18/    E38B : E005 0000 F8        		dc.b $E0, 5, 0,	0, $F8
(1)   19/    E390 : F005 0000 F8        		dc.b $F0, 5, 0,	0, $F8
(1)   20/    E395 : 0005 0000 F8        		dc.b 0,	5, 0, 0, $F8
(1)   21/    E39A : 1005 0000 F8        		dc.b $10, 5, 0,	0, $F8
(1)   22/    E39F : (MACRO)             		align 2
(1)   22/    E39F :  (MACRO-2)                  cnop 0,2
(1)   22/    E39F :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   22/    E39F : =$1D                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   22/    E3A0 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   17636/    E3A0 :                     
   17637/    E3A0 :                     ; ===========================================================================
   17638/    E3A0 :                     ; ---------------------------------------------------------------------------
   17639/    E3A0 :                     ; Object 13 - lava ball	producer (MZ, SLZ)
   17640/    E3A0 :                     ; ---------------------------------------------------------------------------
   17641/    E3A0 :                     
   17642/    E3A0 :                     Obj13:					; XREF: Obj_Index
   17643/    E3A0 : 7000                		moveq	#0,d0
   17644/    E3A2 : 1028 0024           		move.b	$24(a0),d0
   17645/    E3A6 : 323B 000A           		move.w	Obj13_Index(pc,d0.w),d1
   17646/    E3AA : 4EBB 1006           		jsr	Obj13_Index(pc,d1.w)
   17647/    E3AE : 6000 0132           		bra.w	Obj14_ChkDel
   17648/    E3B2 :                     ; ===========================================================================
   17649/    E3B2 : 000A                Obj13_Index:	dc.w Obj13_Main-Obj13_Index
   17650/    E3B4 : 002A                		dc.w Obj13_MakeLava-Obj13_Index
   17651/    E3B6 :                     ; ---------------------------------------------------------------------------
   17652/    E3B6 :                     ;
   17653/    E3B6 :                     ; Lava ball production rates
   17654/    E3B6 :                     ;
   17655/    E3B6 : 1E3C 5A78 96B4      Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
   17656/    E3BC :                     ; ===========================================================================
   17657/    E3BC :                     
   17658/    E3BC :                     Obj13_Main:				; XREF: Obj13_Index
   17659/    E3BC : 5428 0024           		addq.b	#2,$24(a0)
   17660/    E3C0 : 1028 0028           		move.b	$28(a0),d0
   17661/    E3C4 : E848                		lsr.w	#4,d0
   17662/    E3C6 : 0240 000F           		andi.w	#$F,d0
   17663/    E3CA : 117B 00EA 001F      		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
   17664/    E3D0 : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
   17665/    E3D6 : 0228 000F 0028      		andi.b	#$F,$28(a0)
   17666/    E3DC :                     
   17667/    E3DC :                     Obj13_MakeLava:				; XREF: Obj13_Index
   17668/    E3DC : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from time delay
   17669/    E3E0 : 662A                		bne.s	locret_E302	; if time still	remains, branch
   17670/    E3E2 : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)	; reset	time delay
   17671/    E3E8 : 6100 F59E           		bsr.w	ChkObjOnScreen
   17672/    E3EC : 661E                		bne.s	locret_E302
   17673/    E3EE : 6100 F7A6           		bsr.w	SingleObjLoad
   17674/    E3F2 : 6618                		bne.s	locret_E302
   17675/    E3F4 : (MACRO)             		_move.b	#$14,0(a1)	; load lava ball object
   17675/    E3F4 :  (MACRO-2)                          insn2op move.b, #$14,0(a1)
   17675/    E3F4 : 137C 0014 0001                              !move.b   #$14,1+0(a1)
   17675/    E3F9 :                                             !org    *-1
   17675/    E3F9 : 00                                          !dc.b   0
   17676/    E3FA : 3368 0008 0008      		move.w	8(a0),8(a1)
   17677/    E400 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   17678/    E406 : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   17679/    E40C :                     
   17680/    E40C :                     locret_E302:
   17681/    E40C : 4E75                		rts	
   17682/    E40E :                     ; ===========================================================================
   17683/    E40E :                     ; ---------------------------------------------------------------------------
   17684/    E40E :                     ; Object 14 - lava balls (MZ, SLZ)
   17685/    E40E :                     ; ---------------------------------------------------------------------------
   17686/    E40E :                     
   17687/    E40E :                     Obj14:					; XREF: Obj_Index
   17688/    E40E : 7000                		moveq	#0,d0
   17689/    E410 : 1028 0024           		move.b	$24(a0),d0
   17690/    E414 : 323B 000A           		move.w	Obj14_Index(pc,d0.w),d1
   17691/    E418 : 4EBB 1006           		jsr	Obj14_Index(pc,d1.w)
   17692/    E41C : 6000 F2F0           		bra.w	DisplaySprite
   17693/    E420 :                     ; ===========================================================================
   17694/    E420 : 0018                Obj14_Index:	dc.w Obj14_Main-Obj14_Index
   17695/    E422 : 00A4                		dc.w Obj14_Action-Obj14_Index
   17696/    E424 : 01AA                		dc.w Obj14_Delete-Obj14_Index
   17697/    E426 :                     
   17698/    E426 : FC00 FB00 FA00 F900 Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
                    FE00                
   17699/    E430 : 0200 FE00 0200 0000 		dc.w $200, $FE00, $200,	0
   17700/    E438 :                     ; ===========================================================================
   17701/    E438 :                     
   17702/    E438 :                     Obj14_Main:				; XREF: Obj14_Index
   17703/    E438 : 5428 0024           		addq.b	#2,$24(a0)
   17704/    E43C : 117C 0008 0016      		move.b	#8,$16(a0)
   17705/    E442 : 117C 0008 0017      		move.b	#8,$17(a0)
   17706/    E448 : 217C 0000 B458 0004 		move.l	#Map_obj14,4(a0)
   17707/    E450 : 317C 0345 0002      		move.w	#$345,2(a0)
   17708/    E456 : 0C38 0003 FE10      		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
   17709/    E45C : 6606                		bne.s	loc_E35A
   17710/    E45E : 317C 0480 0002      		move.w	#$480,2(a0)	; SLZ specific code
   17711/    E464 :                     
   17712/    E464 :                     loc_E35A:
   17713/    E464 : 117C 0004 0001      		move.b	#4,1(a0)
   17714/    E46A : 117C 0003 0018      		move.b	#3,$18(a0)
   17715/    E470 : 117C 008B 0020      		move.b	#$8B,$20(a0)
   17716/    E476 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   17717/    E47C : 4A28 0029           		tst.b	$29(a0)
   17718/    E480 : 6704                		beq.s	Obj14_SetSpeed
   17719/    E482 : 5428 0018           		addq.b	#2,$18(a0)
   17720/    E486 :                     
   17721/    E486 :                     Obj14_SetSpeed:
   17722/    E486 : 7000                		moveq	#0,d0
   17723/    E488 : 1028 0028           		move.b	$28(a0),d0
   17724/    E48C : D040                		add.w	d0,d0
   17725/    E48E : 317B 0096 0012      		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
   17726/    E494 : 117C 0008 0019      		move.b	#8,$19(a0)
   17727/    E49A : 0C28 0006 0028      		cmpi.b	#6,$28(a0)	; is object type below $6 ?
   17728/    E4A0 : 6518                		bcs.s	Obj14_PlaySnd	; if yes, branch
   17729/    E4A2 : 117C 0010 0019      		move.b	#$10,$19(a0)
   17730/    E4A8 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use horizontal animation
   17731/    E4AE : 3168 0012 0010      		move.w	$12(a0),$10(a0)	; set horizontal speed
   17732/    E4B4 : 317C 0000 0012      		move.w	#0,$12(a0)	; delete vertical speed
   17733/    E4BA :                     
   17734/    E4BA :                     Obj14_PlaySnd:
   17735/    E4BA : 303C 00AE           		move.w	#$AE,d0
   17736/    E4BE : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play lava ball sound
   17737/    E4C4 :                     
   17738/    E4C4 :                     Obj14_Action:				; XREF: Obj14_Index
   17739/    E4C4 : 7000                		moveq	#0,d0
   17740/    E4C6 : 1028 0028           		move.b	$28(a0),d0
   17741/    E4CA : D040                		add.w	d0,d0
   17742/    E4CC : 323B 0034           		move.w	Obj14_TypeIndex(pc,d0.w),d1
   17743/    E4D0 : 4EBB 1030           		jsr	Obj14_TypeIndex(pc,d1.w)
   17744/    E4D4 : 6100 F212           		bsr.w	SpeedToPos
   17745/    E4D8 : 43F9 0000 E5CE      		lea	(Ani_obj14).l,a1
   17746/    E4DE : 6100 C254           		bsr.w	AnimateSprite
   17747/    E4E2 :                     
   17748/    E4E2 :                     Obj14_ChkDel:				; XREF: Obj13
   17749/    E4E2 : 3028 0008           		move.w	8(a0),d0
   17750/    E4E6 : 0240 FF80           		andi.w	#$FF80,d0
   17751/    E4EA : 3238 F700           		move.w	($FFFFF700).w,d1
   17752/    E4EE : 0441 0080           		subi.w	#$80,d1
   17753/    E4F2 : 0241 FF80           		andi.w	#$FF80,d1
   17754/    E4F6 : 9041                		sub.w	d1,d0
   17755/    E4F8 : 0C40 0280           		cmpi.w	#$280,d0
   17756/    E4FC : 6200 F24C           		bhi.w	DeleteObject
   17757/    E500 : 4E75                		rts	
   17758/    E502 :                     ; ===========================================================================
   17759/    E502 : 0012 0012           Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
   17760/    E506 : 0012 0012           		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
   17761/    E50A : 003A 005C           		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
   17762/    E50E : 007E 00A2           		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
   17763/    E512 : 00C6                		dc.w Obj14_Type08-Obj14_TypeIndex
   17764/    E514 :                     ; ===========================================================================
   17765/    E514 :                     ; lavaball types 00-03 fly up and fall back down
   17766/    E514 :                     
   17767/    E514 :                     Obj14_Type00:				; XREF: Obj14_TypeIndex
   17768/    E514 : 0668 0018 0012      		addi.w	#$18,$12(a0)	; increase object"s downward speed
   17769/    E51A : 3028 0030           		move.w	$30(a0),d0
   17770/    E51E : B068 000C           		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
   17771/    E522 : 6404                		bcc.s	loc_E41E	; if not, branch
   17772/    E524 : 5428 0024           		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
   17773/    E528 :                     
   17774/    E528 :                     loc_E41E:
   17775/    E528 : 08A8 0001 0022      		bclr	#1,$22(a0)
   17776/    E52E : 4A68 0012           		tst.w	$12(a0)
   17777/    E532 : 6A06                		bpl.s	locret_E430
   17778/    E534 : 08E8 0001 0022      		bset	#1,$22(a0)
   17779/    E53A :                     
   17780/    E53A :                     locret_E430:
   17781/    E53A : 4E75                		rts	
   17782/    E53C :                     ; ===========================================================================
   17783/    E53C :                     ; lavaball type	04 flies up until it hits the ceiling
   17784/    E53C :                     
   17785/    E53C :                     Obj14_Type04:				; XREF: Obj14_TypeIndex
   17786/    E53C : 08E8 0001 0022      		bset	#1,$22(a0)
   17787/    E542 : 6100 6CD6           		bsr.w	ObjHitCeiling
   17788/    E546 : 4A41                		tst.w	d1
   17789/    E548 : 6A12                		bpl.s	locret_E452
   17790/    E54A : 117C 0008 0028      		move.b	#8,$28(a0)
   17791/    E550 : 117C 0001 001C      		move.b	#1,$1C(a0)
   17792/    E556 : 317C 0000 0012      		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
   17793/    E55C :                     
   17794/    E55C :                     locret_E452:
   17795/    E55C : 4E75                		rts	
   17796/    E55E :                     ; ===========================================================================
   17797/    E55E :                     ; lavaball type	05 falls down until it hits the	floor
   17798/    E55E :                     
   17799/    E55E :                     Obj14_Type05:				; XREF: Obj14_TypeIndex
   17800/    E55E : 08A8 0001 0022      		bclr	#1,$22(a0)
   17801/    E564 : 6100 6B2E           		bsr.w	ObjHitFloor
   17802/    E568 : 4A41                		tst.w	d1
   17803/    E56A : 6A12                		bpl.s	locret_E474
   17804/    E56C : 117C 0008 0028      		move.b	#8,$28(a0)
   17805/    E572 : 117C 0001 001C      		move.b	#1,$1C(a0)
   17806/    E578 : 317C 0000 0012      		move.w	#0,$12(a0)	; stop the object when it touches the floor
   17807/    E57E :                     
   17808/    E57E :                     locret_E474:
   17809/    E57E : 4E75                		rts	
   17810/    E580 :                     ; ===========================================================================
   17811/    E580 :                     ; lavaball types 06-07 move sideways
   17812/    E580 :                     
   17813/    E580 :                     Obj14_Type06:				; XREF: Obj14_TypeIndex
   17814/    E580 : 08E8 0000 0022      		bset	#0,$22(a0)
   17815/    E586 : 76F8                		moveq	#-8,d3
   17816/    E588 : 6100 6D5E           		bsr.w	ObjHitWallLeft
   17817/    E58C : 4A41                		tst.w	d1
   17818/    E58E : 6A12                		bpl.s	locret_E498
   17819/    E590 : 117C 0008 0028      		move.b	#8,$28(a0)
   17820/    E596 : 117C 0003 001C      		move.b	#3,$1C(a0)
   17821/    E59C : 317C 0000 0010      		move.w	#0,$10(a0)	; stop object when it touches a	wall
   17822/    E5A2 :                     
   17823/    E5A2 :                     locret_E498:
   17824/    E5A2 : 4E75                		rts	
   17825/    E5A4 :                     ; ===========================================================================
   17826/    E5A4 :                     
   17827/    E5A4 :                     Obj14_Type07:				; XREF: Obj14_TypeIndex
   17828/    E5A4 : 08A8 0000 0022      		bclr	#0,$22(a0)
   17829/    E5AA : 7608                		moveq	#8,d3
   17830/    E5AC : 6100 6BA8           		bsr.w	ObjHitWallRight
   17831/    E5B0 : 4A41                		tst.w	d1
   17832/    E5B2 : 6A12                		bpl.s	locret_E4BC
   17833/    E5B4 : 117C 0008 0028      		move.b	#8,$28(a0)
   17834/    E5BA : 117C 0003 001C      		move.b	#3,$1C(a0)
   17835/    E5C0 : 317C 0000 0010      		move.w	#0,$10(a0)	; stop object when it touches a	wall
   17836/    E5C6 :                     
   17837/    E5C6 :                     locret_E4BC:
   17838/    E5C6 : 4E75                		rts	
   17839/    E5C8 :                     ; ===========================================================================
   17840/    E5C8 :                     
   17841/    E5C8 :                     Obj14_Type08:				; XREF: Obj14_TypeIndex
   17842/    E5C8 : 4E75                		rts	
   17843/    E5CA :                     ; ===========================================================================
   17844/    E5CA :                     
   17845/    E5CA :                     Obj14_Delete:				; XREF: Obj14_Index
   17846/    E5CA : 6000 F17E           		bra.w	DeleteObject
   17847/    E5CE :                     ; ===========================================================================
   17848/    E5CE :                     Ani_obj14:
   17849/    E5CE :                     		include	"_anim/obj14.asm"
(1)    1/    E5CE :                     ; ---------------------------------------------------------------------------
(1)    2/    E5CE :                     ; Animation script - lava balls
(1)    3/    E5CE :                     ; ---------------------------------------------------------------------------
(1)    4/    E5CE : 0008                		dc.w byte_E4CC-Ani_obj14
(1)    5/    E5D0 : 000E                		dc.w byte_E4D2-Ani_obj14
(1)    6/    E5D2 : 0012                		dc.w byte_E4D6-Ani_obj14
(1)    7/    E5D4 : 0018                		dc.w byte_E4DC-Ani_obj14
(1)    8/    E5D6 : 0500 2001 21FF      byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
(1)    9/    E5DC : 0502 FC00           byte_E4D2:	dc.b 5,	2, $FC,	0
(1)   10/    E5E0 : 0503 4304 44FF      byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
(1)   11/    E5E6 : 0505 FC00           byte_E4DC:	dc.b 5,	5, $FC,	0
(1)   12/    E5EA : (MACRO)             		align 2
(1)   12/    E5EA :  (MACRO-2)                  cnop 0,2
(1)   12/    E5EA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   17850/    E5EA :                     
   17851/    E5EA :                     ; ===========================================================================
   17852/    E5EA :                     ; ---------------------------------------------------------------------------
   17853/    E5EA :                     ; Object 6D - flame thrower (SBZ)
   17854/    E5EA :                     ; ---------------------------------------------------------------------------
   17855/    E5EA :                     
   17856/    E5EA :                     Obj6D:					; XREF: Obj_Index
   17857/    E5EA : 7000                		moveq	#0,d0
   17858/    E5EC : 1028 0024           		move.b	$24(a0),d0
   17859/    E5F0 : 323B 0006           		move.w	Obj6D_Index(pc,d0.w),d1
   17860/    E5F4 : 4EFB 1002           		jmp	Obj6D_Index(pc,d1.w)
   17861/    E5F8 :                     ; ===========================================================================
   17862/    E5F8 : 0004                Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
   17863/    E5FA : 0068                		dc.w Obj6D_Action-Obj6D_Index
   17864/    E5FC :                     ; ===========================================================================
   17865/    E5FC :                     
   17866/    E5FC :                     Obj6D_Main:				; XREF: Obj6D_Index
   17867/    E5FC : 5428 0024           		addq.b	#2,$24(a0)
   17868/    E600 : 217C 0000 E6FE 0004 		move.l	#Map_obj6D,4(a0)
   17869/    E608 : 317C 83D9 0002      		move.w	#$83D9,2(a0)
   17870/    E60E : 0028 0004 0001      		ori.b	#4,1(a0)
   17871/    E614 : 117C 0001 0018      		move.b	#1,$18(a0)
   17872/    E61A : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   17873/    E620 : 117C 000C 0019      		move.b	#$C,$19(a0)
   17874/    E626 : 1028 0028           		move.b	$28(a0),d0
   17875/    E62A : 0240 00F0           		andi.w	#$F0,d0		; read 1st digit of object type
   17876/    E62E : D040                		add.w	d0,d0		; multiply by 2
   17877/    E630 : 3140 0030           		move.w	d0,$30(a0)
   17878/    E634 : 3140 0032           		move.w	d0,$32(a0)	; set flaming time
   17879/    E638 : 1028 0028           		move.b	$28(a0),d0
   17880/    E63C : 0240 000F           		andi.w	#$F,d0		; read 2nd digit of object type
   17881/    E640 : EB48                		lsl.w	#5,d0		; multiply by $20
   17882/    E642 : 3140 0034           		move.w	d0,$34(a0)	; set pause time
   17883/    E646 : 117C 000A 0036      		move.b	#$A,$36(a0)
   17884/    E64C : 0828 0001 0022      		btst	#1,$22(a0)
   17885/    E652 : 670C                		beq.s	Obj6D_Action
   17886/    E654 : 117C 0002 001C      		move.b	#2,$1C(a0)
   17887/    E65A : 117C 0015 0036      		move.b	#$15,$36(a0)
   17888/    E660 :                     
   17889/    E660 :                     Obj6D_Action:				; XREF: Obj6D_Index
   17890/    E660 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time
   17891/    E664 : 6A1E                		bpl.s	loc_E57A	; if time remains, branch
   17892/    E666 : 3168 0034 0030      		move.w	$34(a0),$30(a0)	; begin	pause time
   17893/    E66C : 0868 0000 001C      		bchg	#0,$1C(a0)
   17894/    E672 : 6710                		beq.s	loc_E57A
   17895/    E674 : 3168 0032 0030      		move.w	$32(a0),$30(a0)	; begin	flaming	time
   17896/    E67A : 303C 00B3           		move.w	#$B3,d0
   17897/    E67E : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play flame sound
   17898/    E684 :                     
   17899/    E684 :                     loc_E57A:
   17900/    E684 : 43F9 0000 E6C6      		lea	(Ani_obj6D).l,a1
   17901/    E68A : 6100 C0A8           		bsr.w	AnimateSprite
   17902/    E68E : 117C 0000 0020      		move.b	#0,$20(a0)
   17903/    E694 : 1028 0036           		move.b	$36(a0),d0
   17904/    E698 : B028 001A           		cmp.b	$1A(a0),d0
   17905/    E69C : 6606                		bne.s	Obj6D_ChkDel
   17906/    E69E : 117C 00A3 0020      		move.b	#$A3,$20(a0)
   17907/    E6A4 :                     
   17908/    E6A4 :                     Obj6D_ChkDel:
   17909/    E6A4 : 3028 0008           		move.w	8(a0),d0
   17910/    E6A8 : 0240 FF80           		andi.w	#$FF80,d0
   17911/    E6AC : 3238 F700           		move.w	($FFFFF700).w,d1
   17912/    E6B0 : 0441 0080           		subi.w	#$80,d1
   17913/    E6B4 : 0241 FF80           		andi.w	#$FF80,d1
   17914/    E6B8 : 9041                		sub.w	d1,d0
   17915/    E6BA : 0C40 0280           		cmpi.w	#$280,d0
   17916/    E6BE : 6200 F08A           		bhi.w	DeleteObject
   17917/    E6C2 : 6000 F04A           		bra.w	DisplaySprite
   17918/    E6C6 :                     ; ===========================================================================
   17919/    E6C6 :                     Ani_obj6D:
   17920/    E6C6 :                     		include	"_anim/obj6D.asm"
(1)    1/    E6C6 :                     ; ---------------------------------------------------------------------------
(1)    2/    E6C6 :                     ; Animation script - flamethrower (SBZ)
(1)    3/    E6C6 :                     ; ---------------------------------------------------------------------------
(1)    4/    E6C6 : 0008                		dc.w byte_E5C4-Ani_obj6D
(1)    5/    E6C8 : 0016                		dc.w byte_E5D2-Ani_obj6D
(1)    6/    E6CA : 0020                		dc.w byte_E5DC-Ani_obj6D
(1)    7/    E6CC : 002E                		dc.w byte_E5EA-Ani_obj6D
(1)    8/    E6CE : 0300 0102 0304 0506 byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
                    0708 090A FE02      
(1)    9/    E6DC : 0009 0705 0301 00FE byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
                    0100                
(1)   10/    E6E6 : 030B 0C0D 0E0F 1011 byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
                    1213 1415 FE02      
(1)   11/    E6F4 : 0014 1211 0F0D 0BFE byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
                    0100                
(1)   12/    E6FE : (MACRO)             		align 2
(1)   12/    E6FE :  (MACRO-2)                  cnop 0,2
(1)   12/    E6FE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   17921/    E6FE :                     
   17922/    E6FE :                     ; ---------------------------------------------------------------------------
   17923/    E6FE :                     ; Sprite mappings - flame thrower (SBZ)
   17924/    E6FE :                     ; ---------------------------------------------------------------------------
   17925/    E6FE :                     Map_obj6D:
   17926/    E6FE :                     		include	"_maps/obj6D.asm"
(1)    1/    E6FE :                     ; ---------------------------------------------------------------------------
(1)    2/    E6FE :                     ; Sprite mappings - flame thrower (SBZ)
(1)    3/    E6FE :                     ; ---------------------------------------------------------------------------
(1)    4/    E6FE : 002C 0032           		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
(1)    5/    E702 : 003D 0048           		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
(1)    6/    E706 : 0058 0068           		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
(1)    7/    E70A : 007D 0092           		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
(1)    8/    E70E : 00AC 00C6           		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
(1)    9/    E712 : 00E5 0104           		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
(1)   10/    E716 : 010A 0115           		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
(1)   11/    E71A : 0120 0130           		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
(1)   12/    E71E : 0140 0155           		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
(1)   13/    E722 : 016A 0184           		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
(1)   14/    E726 : 019E 01BD           		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
(1)   15/    E72A : 01                  byte_E620:	dc.b 1
(1)   16/    E72B : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   17/    E730 : 02                  byte_E626:	dc.b 2
(1)   18/    E731 : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   19/    E736 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   20/    E73B : 02                  byte_E631:	dc.b 2
(1)   21/    E73C : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   22/    E741 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   23/    E746 : 03                  byte_E63C:	dc.b 3
(1)   24/    E747 : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   25/    E74C : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   26/    E751 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   27/    E756 : 03                  byte_E64C:	dc.b 3
(1)   28/    E757 : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   29/    E75C : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   30/    E761 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   31/    E766 : 04                  byte_E65C:	dc.b 4
(1)   32/    E767 : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)   33/    E76C : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   34/    E771 : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   35/    E776 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   36/    E77B : 04                  byte_E671:	dc.b 4
(1)   37/    E77C : 0806 0802 F8        		dc.b 8,	6, 8, 2, $F8
(1)   38/    E781 : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   39/    E786 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   40/    E78B : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   41/    E790 : 05                  byte_E686:	dc.b 5
(1)   42/    E791 : F80B 0008 F4        		dc.b $F8, $B, 0, 8, $F4
(1)   43/    E796 : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)   44/    E79B : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   45/    E7A0 : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   46/    E7A5 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   47/    E7AA : 05                  byte_E6A0:	dc.b 5
(1)   48/    E7AB : F80B 0808 F4        		dc.b $F8, $B, 8, 8, $F4
(1)   49/    E7B0 : 0806 0802 F8        		dc.b 8,	6, 8, 2, $F8
(1)   50/    E7B5 : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   51/    E7BA : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   52/    E7BF : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   53/    E7C4 : 06                  byte_E6BA:	dc.b 6
(1)   54/    E7C5 : E80B 0008 F4        		dc.b $E8, $B, 0, 8, $F4
(1)   55/    E7CA : F70B 0008 F4        		dc.b $F7, $B, 0, 8, $F4
(1)   56/    E7CF : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)   57/    E7D4 : 0F06 0002 F8        		dc.b $F, 6, 0, 2, $F8
(1)   58/    E7D9 : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   59/    E7DE : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   60/    E7E3 : 06                  byte_E6D9:	dc.b 6
(1)   61/    E7E4 : E70B 0808 F4        		dc.b $E7, $B, 8, 8, $F4
(1)   62/    E7E9 : F80B 0808 F4        		dc.b $F8, $B, 8, 8, $F4
(1)   63/    E7EE : 0706 0802 F8        		dc.b 7,	6, 8, 2, $F8
(1)   64/    E7F3 : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   65/    E7F8 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   66/    E7FD : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   67/    E802 : 01                  byte_E6F8:	dc.b 1
(1)   68/    E803 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   69/    E808 : 02                  byte_E6FE:	dc.b 2
(1)   70/    E809 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   71/    E80E : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   72/    E813 : 02                  byte_E709:	dc.b 2
(1)   73/    E814 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   74/    E819 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   75/    E81E : 03                  byte_E714:	dc.b 3
(1)   76/    E81F : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   77/    E824 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   78/    E829 : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   79/    E82E : 03                  byte_E724:	dc.b 3
(1)   80/    E82F : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   81/    E834 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   82/    E839 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   83/    E83E : 04                  byte_E734:	dc.b 4
(1)   84/    E83F : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)   85/    E844 : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   86/    E849 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   87/    E84E : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   88/    E853 : 04                  byte_E749:	dc.b 4
(1)   89/    E854 : 0806 0802 F8        		dc.b 8,	6, 8, 2, $F8
(1)   90/    E859 : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   91/    E85E : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   92/    E863 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   93/    E868 : 05                  byte_E75E:	dc.b 5
(1)   94/    E869 : F80B 0008 F4        		dc.b $F8, $B, 0, 8, $F4
(1)   95/    E86E : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)   96/    E873 : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   97/    E878 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   98/    E87D : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   99/    E882 : 05                  byte_E778:	dc.b 5
(1)  100/    E883 : F80B 0808 F4        		dc.b $F8, $B, 8, 8, $F4
(1)  101/    E888 : 0806 0802 F8        		dc.b 8,	6, 8, 2, $F8
(1)  102/    E88D : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)  103/    E892 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)  104/    E897 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)  105/    E89C : 06                  byte_E792:	dc.b 6
(1)  106/    E89D : E80B 0008 F4        		dc.b $E8, $B, 0, 8, $F4
(1)  107/    E8A2 : F70B 0008 F4        		dc.b $F7, $B, 0, 8, $F4
(1)  108/    E8A7 : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)  109/    E8AC : 0F06 0002 F8        		dc.b $F, 6, 0, 2, $F8
(1)  110/    E8B1 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)  111/    E8B6 : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)  112/    E8BB : 06                  byte_E7B1:	dc.b 6
(1)  113/    E8BC : E70B 0808 F4        		dc.b $E7, $B, 8, 8, $F4
(1)  114/    E8C1 : F80B 0808 F4        		dc.b $F8, $B, 8, 8, $F4
(1)  115/    E8C6 : 0706 0802 F8        		dc.b 7,	6, 8, 2, $F8
(1)  116/    E8CB : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)  117/    E8D0 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)  118/    E8D5 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)  119/    E8DA : (MACRO)             		align 2
(1)  119/    E8DA :  (MACRO-2)                  cnop 0,2
(1)  119/    E8DA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   17927/    E8DA :                     
   17928/    E8DA :                     ; ===========================================================================
   17929/    E8DA :                     ; ---------------------------------------------------------------------------
   17930/    E8DA :                     ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
   17931/    E8DA :                     ; ---------------------------------------------------------------------------
   17932/    E8DA :                     
   17933/    E8DA :                     Obj46:					; XREF: Obj_Index
   17934/    E8DA : 7000                		moveq	#0,d0
   17935/    E8DC : 1028 0024           		move.b	$24(a0),d0
   17936/    E8E0 : 323B 0006           		move.w	Obj46_Index(pc,d0.w),d1
   17937/    E8E4 : 4EFB 1002           		jmp	Obj46_Index(pc,d1.w)
   17938/    E8E8 :                     ; ===========================================================================
   17939/    E8E8 : 0004                Obj46_Index:	dc.w Obj46_Main-Obj46_Index
   17940/    E8EA : 0040                		dc.w Obj46_Action-Obj46_Index
   17941/    E8EC :                     ; ===========================================================================
   17942/    E8EC :                     
   17943/    E8EC :                     Obj46_Main:				; XREF: Obj46_Index
   17944/    E8EC : 5428 0024           		addq.b	#2,$24(a0)
   17945/    E8F0 : 117C 000F 0016      		move.b	#$F,$16(a0)
   17946/    E8F6 : 117C 000F 0017      		move.b	#$F,$17(a0)
   17947/    E8FC : 217C 0000 EA0E 0004 		move.l	#Map_obj46,4(a0)
   17948/    E904 : 317C 4000 0002      		move.w	#$4000,2(a0)
   17949/    E90A : 117C 0004 0001      		move.b	#4,1(a0)
   17950/    E910 : 117C 0003 0018      		move.b	#3,$18(a0)
   17951/    E916 : 117C 0010 0019      		move.b	#$10,$19(a0)
   17952/    E91C : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   17953/    E922 : 317C 05C0 0032      		move.w	#$5C0,$32(a0)
   17954/    E928 :                     
   17955/    E928 :                     Obj46_Action:				; XREF: Obj46_Index
   17956/    E928 : 4A28 0001           		tst.b	1(a0)
   17957/    E92C : 6A28                		bpl.s	Obj46_ChkDel
   17958/    E92E : 7000                		moveq	#0,d0
   17959/    E930 : 1028 0028           		move.b	$28(a0),d0	; get object type
   17960/    E934 : 0240 0007           		andi.w	#7,d0		; read only the	1st digit
   17961/    E938 : D040                		add.w	d0,d0
   17962/    E93A : 323B 003E           		move.w	Obj46_TypeIndex(pc,d0.w),d1
   17963/    E93E : 4EBB 103A           		jsr	Obj46_TypeIndex(pc,d1.w)
   17964/    E942 : 323C 001B           		move.w	#$1B,d1
   17965/    E946 : 343C 0010           		move.w	#$10,d2
   17966/    E94A : 363C 0011           		move.w	#$11,d3
   17967/    E94E : 3828 0008           		move.w	8(a0),d4
   17968/    E952 : 6100 1192           		bsr.w	SolidObject
   17969/    E956 :                     
   17970/    E956 :                     Obj46_ChkDel:
   17971/    E956 : 6100 EDB6           		bsr.w	DisplaySprite
   17972/    E95A : 3028 0008           		move.w	8(a0),d0
   17973/    E95E : 0240 FF80           		andi.w	#$FF80,d0
   17974/    E962 : 3238 F700           		move.w	($FFFFF700).w,d1
   17975/    E966 : 0441 0080           		subi.w	#$80,d1
   17976/    E96A : 0241 FF80           		andi.w	#$FF80,d1
   17977/    E96E : 9041                		sub.w	d1,d0
   17978/    E970 : 0C40 0280           		cmpi.w	#$280,d0
   17979/    E974 : 6200 EDD4           		bhi.w	DeleteObject
   17980/    E978 : 4E75                		rts	
   17981/    E97A :                     ; ===========================================================================
   17982/    E97A : 000A                Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
   17983/    E97C : 0024                		dc.w Obj46_Type01-Obj46_TypeIndex
   17984/    E97E : 000C                		dc.w Obj46_Type02-Obj46_TypeIndex
   17985/    E980 : 0044                		dc.w Obj46_Type03-Obj46_TypeIndex
   17986/    E982 : 0080                		dc.w Obj46_Type04-Obj46_TypeIndex
   17987/    E984 :                     ; ===========================================================================
   17988/    E984 :                     
   17989/    E984 :                     Obj46_Type00:				; XREF: Obj46_TypeIndex
   17990/    E984 : 4E75                		rts	
   17991/    E986 :                     ; ===========================================================================
   17992/    E986 :                     
   17993/    E986 :                     Obj46_Type02:				; XREF: Obj46_TypeIndex
   17994/    E986 : 3038 D008           		move.w	($FFFFD008).w,d0
   17995/    E98A : 9068 0008           		sub.w	8(a0),d0
   17996/    E98E : 6402                		bcc.s	loc_E888
   17997/    E990 : 4440                		neg.w	d0
   17998/    E992 :                     
   17999/    E992 :                     loc_E888:
   18000/    E992 : 0C40 0090           		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
   18001/    E996 : 6406                		bcc.s	Obj46_Type01	; if not, resume wobbling
   18002/    E998 : 117C 0003 0028      		move.b	#3,$28(a0)	; if yes, make the block fall
   18003/    E99E :                     
   18004/    E99E :                     Obj46_Type01:				; XREF: Obj46_TypeIndex
   18005/    E99E : 7000                		moveq	#0,d0
   18006/    E9A0 : 1038 FE74           		move.b	($FFFFFE74).w,d0
   18007/    E9A4 : 0828 0003 0028      		btst	#3,$28(a0)
   18008/    E9AA : 6706                		beq.s	loc_E8A8
   18009/    E9AC : 4440                		neg.w	d0
   18010/    E9AE : 0640 0010           		addi.w	#$10,d0
   18011/    E9B2 :                     
   18012/    E9B2 :                     loc_E8A8:
   18013/    E9B2 : 3228 0030           		move.w	$30(a0),d1
   18014/    E9B6 : 9240                		sub.w	d0,d1
   18015/    E9B8 : 3141 000C           		move.w	d1,$C(a0)	; update the block"s position to make it wobble
   18016/    E9BC : 4E75                		rts	
   18017/    E9BE :                     ; ===========================================================================
   18018/    E9BE :                     
   18019/    E9BE :                     Obj46_Type03:				; XREF: Obj46_TypeIndex
   18020/    E9BE : 6100 ED28           		bsr.w	SpeedToPos
   18021/    E9C2 : 0668 0018 0012      		addi.w	#$18,$12(a0)	; increase falling speed
   18022/    E9C8 : 6100 66CA           		bsr.w	ObjHitFloor
   18023/    E9CC : 4A41                		tst.w	d1		; has the block	hit the	floor?
   18024/    E9CE : 6A00 0028           		bpl.w	locret_E8EE	; if not, branch
   18025/    E9D2 : D368 000C           		add.w	d1,$C(a0)
   18026/    E9D6 : 4268 0012           		clr.w	$12(a0)		; stop the block falling
   18027/    E9DA : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   18028/    E9E0 : 117C 0004 0028      		move.b	#4,$28(a0)
   18029/    E9E6 : 3011                		move.w	(a1),d0
   18030/    E9E8 : 0240 03FF           		andi.w	#$3FF,d0
   18031/    E9EC : 0C40 02E8           		cmpi.w	#$2E8,d0
   18032/    E9F0 : 6406                		bcc.s	locret_E8EE
   18033/    E9F2 : 117C 0000 0028      		move.b	#0,$28(a0)
   18034/    E9F8 :                     
   18035/    E9F8 :                     locret_E8EE:
   18036/    E9F8 : 4E75                		rts	
   18037/    E9FA :                     ; ===========================================================================
   18038/    E9FA :                     
   18039/    E9FA :                     Obj46_Type04:				; XREF: Obj46_TypeIndex
   18040/    E9FA : 7000                		moveq	#0,d0
   18041/    E9FC : 1038 FE70           		move.b	($FFFFFE70).w,d0
   18042/    EA00 : E648                		lsr.w	#3,d0
   18043/    EA02 : 3228 0030           		move.w	$30(a0),d1
   18044/    EA06 : 9240                		sub.w	d0,d1
   18045/    EA08 : 3141 000C           		move.w	d1,$C(a0)	; make the block wobble
   18046/    EA0C : 4E75                		rts	
   18047/    EA0E :                     ; ===========================================================================
   18048/    EA0E :                     ; ---------------------------------------------------------------------------
   18049/    EA0E :                     ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
   18050/    EA0E :                     ; ---------------------------------------------------------------------------
   18051/    EA0E :                     Map_obj46:
   18052/    EA0E :                     		include	"_maps/obj46.asm"
(1)    1/    EA0E :                     ; ---------------------------------------------------------------------------
(1)    2/    EA0E :                     ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
(1)    3/    EA0E :                     ; ---------------------------------------------------------------------------
(1)    4/    EA0E : 0002                		dc.w byte_E906-Map_obj46
(1)    5/    EA10 : 01                  byte_E906:	dc.b 1
(1)    6/    EA11 : F00F 0001 F0        		dc.b $F0, $F, 0, 1, $F0
(1)    7/    EA16 : (MACRO)             		align 2
(1)    7/    EA16 :  (MACRO-2)                  cnop 0,2
(1)    7/    EA16 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   18053/    EA16 :                     
   18054/    EA16 :                     ; ===========================================================================
   18055/    EA16 :                     ; ---------------------------------------------------------------------------
   18056/    EA16 :                     ; Object 12 - lamp (SYZ)
   18057/    EA16 :                     ; ---------------------------------------------------------------------------
   18058/    EA16 :                     
   18059/    EA16 :                     Obj12:					; XREF: Obj_Index
   18060/    EA16 : 7000                		moveq	#0,d0
   18061/    EA18 : 1028 0024           		move.b	$24(a0),d0
   18062/    EA1C : 323B 0006           		move.w	Obj12_Index(pc,d0.w),d1
   18063/    EA20 : 4EFB 1002           		jmp	Obj12_Index(pc,d1.w)
   18064/    EA24 :                     ; ===========================================================================
   18065/    EA24 : 0004                Obj12_Index:	dc.w Obj12_Main-Obj12_Index
   18066/    EA26 : 0028                		dc.w Obj12_Animate-Obj12_Index
   18067/    EA28 :                     ; ===========================================================================
   18068/    EA28 :                     
   18069/    EA28 :                     Obj12_Main:				; XREF: Obj12_Index
   18070/    EA28 : 5428 0024           		addq.b	#2,$24(a0)
   18071/    EA2C : 217C 0000 EA8C 0004 		move.l	#Map_obj12,4(a0)
   18072/    EA34 : 317C 0000 0002      		move.w	#0,2(a0)
   18073/    EA3A : 117C 0004 0001      		move.b	#4,1(a0)
   18074/    EA40 : 117C 0010 0019      		move.b	#$10,$19(a0)
   18075/    EA46 : 117C 0006 0018      		move.b	#6,$18(a0)
   18076/    EA4C :                     
   18077/    EA4C :                     Obj12_Animate:				; XREF: Obj12_Index
   18078/    EA4C : 5328 001E           		subq.b	#1,$1E(a0)
   18079/    EA50 : 6A18                		bpl.s	Obj12_ChkDel
   18080/    EA52 : 117C 0007 001E      		move.b	#7,$1E(a0)
   18081/    EA58 : 5228 001A           		addq.b	#1,$1A(a0)
   18082/    EA5C : 0C28 0006 001A      		cmpi.b	#6,$1A(a0)
   18083/    EA62 : 6506                		bcs.s	Obj12_ChkDel
   18084/    EA64 : 117C 0000 001A      		move.b	#0,$1A(a0)
   18085/    EA6A :                     
   18086/    EA6A :                     Obj12_ChkDel:
   18087/    EA6A : 3028 0008           		move.w	8(a0),d0
   18088/    EA6E : 0240 FF80           		andi.w	#$FF80,d0
   18089/    EA72 : 3238 F700           		move.w	($FFFFF700).w,d1
   18090/    EA76 : 0441 0080           		subi.w	#$80,d1
   18091/    EA7A : 0241 FF80           		andi.w	#$FF80,d1
   18092/    EA7E : 9041                		sub.w	d1,d0
   18093/    EA80 : 0C40 0280           		cmpi.w	#$280,d0
   18094/    EA84 : 6200 ECC4           		bhi.w	DeleteObject
   18095/    EA88 : 6000 EC84           		bra.w	DisplaySprite
   18096/    EA8C :                     ; ===========================================================================
   18097/    EA8C :                     ; ---------------------------------------------------------------------------
   18098/    EA8C :                     ; Sprite mappings - lamp (SYZ)
   18099/    EA8C :                     ; ---------------------------------------------------------------------------
   18100/    EA8C :                     Map_obj12:
   18101/    EA8C :                     		include	"_maps/obj12.asm"
(1)    1/    EA8C :                     ; ---------------------------------------------------------------------------
(1)    2/    EA8C :                     ; Sprite mappings - lamp (SYZ)
(1)    3/    EA8C :                     ; ---------------------------------------------------------------------------
(1)    4/    EA8C : 000C 0017           		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
(1)    5/    EA90 : 0022 002D           		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
(1)    6/    EA94 : 0038 0043           		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
(1)    7/    EA98 : 02                  byte_E98E:	dc.b 2
(1)    8/    EA99 : F80C 0031 F0        		dc.b $F8, $C, 0, $31, $F0
(1)    9/    EA9E : 000C 1031 F0        		dc.b 0,	$C, $10, $31, $F0
(1)   10/    EAA3 : 02                  byte_E999:	dc.b 2
(1)   11/    EAA4 : F80C 0035 F0        		dc.b $F8, $C, 0, $35, $F0
(1)   12/    EAA9 : 000C 1035 F0        		dc.b 0,	$C, $10, $35, $F0
(1)   13/    EAAE : 02                  byte_E9A4:	dc.b 2
(1)   14/    EAAF : F80C 0039 F0        		dc.b $F8, $C, 0, $39, $F0
(1)   15/    EAB4 : 000C 1039 F0        		dc.b 0,	$C, $10, $39, $F0
(1)   16/    EAB9 : 02                  byte_E9AF:	dc.b 2
(1)   17/    EABA : F80C 003D F0        		dc.b $F8, $C, 0, $3D, $F0
(1)   18/    EABF : 000C 103D F0        		dc.b 0,	$C, $10, $3D, $F0
(1)   19/    EAC4 : 02                  byte_E9BA:	dc.b 2
(1)   20/    EAC5 : F80C 0041 F0        		dc.b $F8, $C, 0, $41, $F0
(1)   21/    EACA : 000C 1041 F0        		dc.b 0,	$C, $10, $41, $F0
(1)   22/    EACF : 02                  byte_E9C5:	dc.b 2
(1)   23/    EAD0 : F80C 0045 F0        		dc.b $F8, $C, 0, $45, $F0
(1)   24/    EAD5 : 000C 1045 F0        		dc.b 0,	$C, $10, $45, $F0
(1)   25/    EADA : (MACRO)             		align 2
(1)   25/    EADA :  (MACRO-2)                  cnop 0,2
(1)   25/    EADA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   18102/    EADA :                     
   18103/    EADA :                     ; ===========================================================================
   18104/    EADA :                     ; ---------------------------------------------------------------------------
   18105/    EADA :                     ; Object 47 - pinball bumper (SYZ)
   18106/    EADA :                     ; ---------------------------------------------------------------------------
   18107/    EADA :                     
   18108/    EADA :                     Obj47:					; XREF: Obj_Index
   18109/    EADA : 7000                		moveq	#0,d0
   18110/    EADC : 1028 0024           		move.b	$24(a0),d0
   18111/    EAE0 : 323B 0006           		move.w	Obj47_Index(pc,d0.w),d1
   18112/    EAE4 : 4EFB 1002           		jmp	Obj47_Index(pc,d1.w)
   18113/    EAE8 :                     ; ===========================================================================
   18114/    EAE8 : 0004                Obj47_Index:	dc.w Obj47_Main-Obj47_Index
   18115/    EAEA : 002E                		dc.w Obj47_Hit-Obj47_Index
   18116/    EAEC :                     ; ===========================================================================
   18117/    EAEC :                     
   18118/    EAEC :                     Obj47_Main:				; XREF: Obj47_Index
   18119/    EAEC : 5428 0024           		addq.b	#2,$24(a0)
   18120/    EAF0 : 217C 0000 EC0A 0004 		move.l	#Map_obj47,4(a0)
   18121/    EAF8 : 317C 0380 0002      		move.w	#$380,2(a0)
   18122/    EAFE : 117C 0004 0001      		move.b	#4,1(a0)
   18123/    EB04 : 117C 0010 0019      		move.b	#$10,$19(a0)
   18124/    EB0A : 117C 0001 0018      		move.b	#1,$18(a0)
   18125/    EB10 : 117C 00D7 0020      		move.b	#$D7,$20(a0)
   18126/    EB16 :                     
   18127/    EB16 :                     Obj47_Hit:				; XREF: Obj47_Index
   18128/    EB16 : 4A28 0021           		tst.b	$21(a0)		; has Sonic touched the	bumper?
   18129/    EB1A : 6700 009E           		beq.w	Obj47_Display	; if not, branch
   18130/    EB1E : 4228 0021           		clr.b	$21(a0)
   18131/    EB22 : 43F8 D000           		lea	($FFFFD000).w,a1
   18132/    EB26 : 3228 0008           		move.w	8(a0),d1
   18133/    EB2A : 3428 000C           		move.w	$C(a0),d2
   18134/    EB2E : 9269 0008           		sub.w	8(a1),d1
   18135/    EB32 : 9469 000C           		sub.w	$C(a1),d2
   18136/    EB36 : 4EB9 0000 2CB8      		jsr	(CalcAngle).l
   18137/    EB3C : 4EB9 0000 29EA      		jsr	(CalcSine).l
   18138/    EB42 : C3FC F900           		muls.w	#-$700,d1
   18139/    EB46 : E081                		asr.l	#8,d1
   18140/    EB48 : 3341 0010           		move.w	d1,$10(a1)	; bounce Sonic away
   18141/    EB4C : C1FC F900           		muls.w	#-$700,d0
   18142/    EB50 : E080                		asr.l	#8,d0
   18143/    EB52 : 3340 0012           		move.w	d0,$12(a1)	; bounce Sonic away
   18144/    EB56 : 08E9 0001 0022      		bset	#1,$22(a1)
   18145/    EB5C : 08A9 0004 0022      		bclr	#4,$22(a1)
   18146/    EB62 : 08A9 0005 0022      		bclr	#5,$22(a1)
   18147/    EB68 : 4229 003C           		clr.b	$3C(a1)
   18148/    EB6C : 117C 0001 001C      		move.b	#1,$1C(a0)
   18149/    EB72 : 303C 00B4           		move.w	#$B4,d0
   18150/    EB76 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play bumper sound
   18151/    EB7C : 45F8 FC00           		lea	($FFFFFC00).w,a2
   18152/    EB80 : 7000                		moveq	#0,d0
   18153/    EB82 : 1028 0023           		move.b	$23(a0),d0
   18154/    EB86 : 670C                		beq.s	Obj47_Score
   18155/    EB88 : 0C32 008A 0002      		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
   18156/    EB8E : 642A                		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
   18157/    EB90 : 5232 0002           		addq.b	#1,2(a2,d0.w)
   18158/    EB94 :                     
   18159/    EB94 :                     Obj47_Score:
   18160/    EB94 : 7001                		moveq	#1,d0
   18161/    EB96 : 4EB9 0001 C922      		jsr	(AddPoints).l	; add 10 to score
   18162/    EB9C : 6100 EFF8           		bsr.w	SingleObjLoad
   18163/    EBA0 : 6618                		bne.s	Obj47_Display
   18164/    EBA2 : (MACRO)             		_move.b	#$29,0(a1)	; load points object
   18164/    EBA2 :  (MACRO-2)                          insn2op move.b, #$29,0(a1)
   18164/    EBA2 : 137C 0029 0001                              !move.b   #$29,1+0(a1)
   18164/    EBA7 :                                             !org    *-1
   18164/    EBA7 : 00                                          !dc.b   0
   18165/    EBA8 : 3368 0008 0008      		move.w	8(a0),8(a1)
   18166/    EBAE : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   18167/    EBB4 : 137C 0004 001A      		move.b	#4,$1A(a1)
   18168/    EBBA :                     
   18169/    EBBA :                     Obj47_Display:
   18170/    EBBA : 43F9 0000 EBFA      		lea	(Ani_obj47).l,a1
   18171/    EBC0 : 6100 BB72           		bsr.w	AnimateSprite
   18172/    EBC4 : 3028 0008           		move.w	8(a0),d0
   18173/    EBC8 : 0240 FF80           		andi.w	#$FF80,d0
   18174/    EBCC : 3238 F700           		move.w	($FFFFF700).w,d1
   18175/    EBD0 : 0441 0080           		subi.w	#$80,d1
   18176/    EBD4 : 0241 FF80           		andi.w	#$FF80,d1
   18177/    EBD8 : 9041                		sub.w	d1,d0
   18178/    EBDA : 0C40 0280           		cmpi.w	#$280,d0
   18179/    EBDE : 6204                		bhi.s	Obj47_ChkHit
   18180/    EBE0 : 6000 EB2C           		bra.w	DisplaySprite
   18181/    EBE4 :                     ; ===========================================================================
   18182/    EBE4 :                     
   18183/    EBE4 :                     Obj47_ChkHit:				; XREF: Obj47_Display
   18184/    EBE4 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   18185/    EBE8 : 7000                		moveq	#0,d0
   18186/    EBEA : 1028 0023           		move.b	$23(a0),d0
   18187/    EBEE : 6706                		beq.s	Obj47_Delete
   18188/    EBF0 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   18189/    EBF6 :                     
   18190/    EBF6 :                     Obj47_Delete:
   18191/    EBF6 : 6000 EB52           		bra.w	DeleteObject
   18192/    EBFA :                     ; ===========================================================================
   18193/    EBFA :                     Ani_obj47:
   18194/    EBFA :                     		include	"_anim/obj47.asm"
(1)    1/    EBFA :                     ; ---------------------------------------------------------------------------
(1)    2/    EBFA :                     ; Animation script - flamethrower (SBZ)
(1)    3/    EBFA :                     ; ---------------------------------------------------------------------------
(1)    4/    EBFA : 0004                		dc.w byte_EAF4-Ani_obj47
(1)    5/    EBFC : 0008                		dc.w byte_EAF8-Ani_obj47
(1)    6/    EBFE : 0F00 FF00           byte_EAF4:	dc.b $F, 0, $FF, 0
(1)    7/    EC02 : 0301 0201 02FD 0000 byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
(1)    8/    EC0A : (MACRO)             		align 2
(1)    8/    EC0A :  (MACRO-2)                  cnop 0,2
(1)    8/    EC0A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   18195/    EC0A :                     
   18196/    EC0A :                     ; ---------------------------------------------------------------------------
   18197/    EC0A :                     ; Sprite mappings - pinball bumper (SYZ)
   18198/    EC0A :                     ; ---------------------------------------------------------------------------
   18199/    EC0A :                     Map_obj47:
   18200/    EC0A :                     		include	"_maps/obj47.asm"
(1)    1/    EC0A :                     ; ---------------------------------------------------------------------------
(1)    2/    EC0A :                     ; Sprite mappings - pinball bumper (SYZ)
(1)    3/    EC0A :                     ; ---------------------------------------------------------------------------
(1)    4/    EC0A : 0006                		dc.w byte_EB06-Map_obj47
(1)    5/    EC0C : 0011                		dc.w byte_EB11-Map_obj47
(1)    6/    EC0E : 001C                		dc.w byte_EB1C-Map_obj47
(1)    7/    EC10 : 02                  byte_EB06:	dc.b 2
(1)    8/    EC11 : F007 0000 F0        		dc.b $F0, 7, 0,	0, $F0
(1)    9/    EC16 : F007 0800 00        		dc.b $F0, 7, 8,	0, 0
(1)   10/    EC1B : 02                  byte_EB11:	dc.b 2
(1)   11/    EC1C : F406 0008 F4        		dc.b $F4, 6, 0,	8, $F4
(1)   12/    EC21 : F402 0808 04        		dc.b $F4, 2, 8,	8, 4
(1)   13/    EC26 : 02                  byte_EB1C:	dc.b 2
(1)   14/    EC27 : F007 000E F0        		dc.b $F0, 7, 0,	$E, $F0
(1)   15/    EC2C : F007 080E 00        		dc.b $F0, 7, 8,	$E, 0
(1)   16/    EC31 : (MACRO)             		align 2
(1)   16/    EC31 :  (MACRO-2)                  cnop 0,2
(1)   16/    EC31 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   16/    EC31 : =$1E                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   16/    EC32 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   18201/    EC32 :                     
   18202/    EC32 :                     ; ===========================================================================
   18203/    EC32 :                     ; ---------------------------------------------------------------------------
   18204/    EC32 :                     ; Object 0D - signpost at the end of a level
   18205/    EC32 :                     ; ---------------------------------------------------------------------------
   18206/    EC32 :                     
   18207/    EC32 :                     Obj0D:					; XREF: Obj_Index
   18208/    EC32 : 7000                		moveq	#0,d0
   18209/    EC34 : 1028 0024           		move.b	$24(a0),d0
   18210/    EC38 : 323B 0034           		move.w	Obj0D_Index(pc,d0.w),d1
   18211/    EC3C : 4EBB 1030           		jsr	Obj0D_Index(pc,d1.w)
   18212/    EC40 : 43F9 0000 EE2C      		lea	(Ani_obj0D).l,a1
   18213/    EC46 : 6100 BAEC           		bsr.w	AnimateSprite
   18214/    EC4A : 6100 EAC2           		bsr.w	DisplaySprite
   18215/    EC4E : 3028 0008           		move.w	8(a0),d0
   18216/    EC52 : 0240 FF80           		andi.w	#$FF80,d0
   18217/    EC56 : 3238 F700           		move.w	($FFFFF700).w,d1
   18218/    EC5A : 0441 0080           		subi.w	#$80,d1
   18219/    EC5E : 0241 FF80           		andi.w	#$FF80,d1
   18220/    EC62 : 9041                		sub.w	d1,d0
   18221/    EC64 : 0C40 0280           		cmpi.w	#$280,d0
   18222/    EC68 : 6200 EAE0           		bhi.w	DeleteObject
   18223/    EC6C : 4E75                		rts	
   18224/    EC6E :                     ; ===========================================================================
   18225/    EC6E : 000A                Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
   18226/    EC70 : 002E                		dc.w Obj0D_Touch-Obj0D_Index
   18227/    EC72 : 0058                		dc.w Obj0D_Spin-Obj0D_Index
   18228/    EC74 : 0126                		dc.w GotThroughAct-Obj0D_Index
   18229/    EC76 : 01BC                		dc.w locret_ED1A-Obj0D_Index
   18230/    EC78 :                     ; ===========================================================================
   18231/    EC78 :                     
   18232/    EC78 :                     Obj0D_Main:				; XREF: Obj0D_Index
   18233/    EC78 : 5428 0024           		addq.b	#2,$24(a0)
   18234/    EC7C : 217C 0000 EE48 0004 		move.l	#Map_obj0D,4(a0)
   18235/    EC84 : 317C 0680 0002      		move.w	#$680,2(a0)
   18236/    EC8A : 117C 0004 0001      		move.b	#4,1(a0)
   18237/    EC90 : 117C 0018 0019      		move.b	#$18,$19(a0)
   18238/    EC96 : 117C 0004 0018      		move.b	#4,$18(a0)
   18239/    EC9C :                     
   18240/    EC9C :                     Obj0D_Touch:				; XREF: Obj0D_Index
   18241/    EC9C : 3038 D008           		move.w	($FFFFD008).w,d0
   18242/    ECA0 : 9068 0008           		sub.w	8(a0),d0
   18243/    ECA4 : 651E                		bcs.s	locret_EBBA
   18244/    ECA6 : 0C40 0020           		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
   18245/    ECAA : 6418                		bcc.s	locret_EBBA	; if not, branch
   18246/    ECAC : 303C 00CF           		move.w	#$CF,d0
   18247/    ECB0 : 4EB9 0000 1396      		jsr	(PlaySound).l	; play signpost	sound
   18248/    ECB6 : 4238 FE1E           		clr.b	($FFFFFE1E).w	; stop time counter
   18249/    ECBA : 31F8 F72A F728      		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
   18250/    ECC0 : 5428 0024           		addq.b	#2,$24(a0)
   18251/    ECC4 :                     
   18252/    ECC4 :                     locret_EBBA:
   18253/    ECC4 : 4E75                		rts	
   18254/    ECC6 :                     ; ===========================================================================
   18255/    ECC6 :                     
   18256/    ECC6 :                     Obj0D_Spin:				; XREF: Obj0D_Index
   18257/    ECC6 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from spin time
   18258/    ECCA : 6A16                		bpl.s	Obj0D_Sparkle	; if time remains, branch
   18259/    ECCC : 317C 003C 0030      		move.w	#60,$30(a0)	; set spin cycle time to 1 second
   18260/    ECD2 : 5228 001C           		addq.b	#1,$1C(a0)	; next spin cycle
   18261/    ECD6 : 0C28 0003 001C      		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
   18262/    ECDC : 6604                		bne.s	Obj0D_Sparkle	; if not, branch
   18263/    ECDE : 5428 0024           		addq.b	#2,$24(a0)
   18264/    ECE2 :                     
   18265/    ECE2 :                     Obj0D_Sparkle:
   18266/    ECE2 : 5368 0032           		subq.w	#1,$32(a0)	; subtract 1 from time delay
   18267/    ECE6 : 6A64                		bpl.s	locret_EC42	; if time remains, branch
   18268/    ECE8 : 317C 000B 0032      		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
   18269/    ECEE : 7000                		moveq	#0,d0
   18270/    ECF0 : 1028 0034           		move.b	$34(a0),d0
   18271/    ECF4 : 5428 0034           		addq.b	#2,$34(a0)
   18272/    ECF8 : 0228 000E 0034      		andi.b	#$E,$34(a0)
   18273/    ECFE : 45FB 004E           		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
   18274/    ED02 : 6100 EE92           		bsr.w	SingleObjLoad
   18275/    ED06 : 6644                		bne.s	locret_EC42
   18276/    ED08 : (MACRO)             		_move.b	#$25,0(a1)	; load rings object
   18276/    ED08 :  (MACRO-2)                          insn2op move.b, #$25,0(a1)
   18276/    ED08 : 137C 0025 0001                              !move.b   #$25,1+0(a1)
   18276/    ED0D :                                             !org    *-1
   18276/    ED0D : 00                                          !dc.b   0
   18277/    ED0E : 137C 0006 0024      		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
   18278/    ED14 : 101A                		move.b	(a2)+,d0
   18279/    ED16 : 4880                		ext.w	d0
   18280/    ED18 : D068 0008           		add.w	8(a0),d0
   18281/    ED1C : 3340 0008           		move.w	d0,8(a1)
   18282/    ED20 : 101A                		move.b	(a2)+,d0
   18283/    ED22 : 4880                		ext.w	d0
   18284/    ED24 : D068 000C           		add.w	$C(a0),d0
   18285/    ED28 : 3340 000C           		move.w	d0,$C(a1)
   18286/    ED2C : 237C 0000 9F9E 0004 		move.l	#Map_obj25,4(a1)
   18287/    ED34 : 337C 27B2 0002      		move.w	#$27B2,2(a1)
   18288/    ED3A : 137C 0004 0001      		move.b	#4,1(a1)
   18289/    ED40 : 137C 0002 0018      		move.b	#2,$18(a1)
   18290/    ED46 : 137C 0008 0019      		move.b	#8,$19(a1)
   18291/    ED4C :                     
   18292/    ED4C :                     locret_EC42:
   18293/    ED4C : 4E75                		rts	
   18294/    ED4E :                     ; ===========================================================================
   18295/    ED4E : E8F0                Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
   18296/    ED50 : 0808                		dc.b	8,   8
   18297/    ED52 : F000                		dc.b -$10,   0
   18298/    ED54 : 18F8                		dc.b  $18,  -8
   18299/    ED56 : 00F8                		dc.b	0,  -8
   18300/    ED58 : 1000                		dc.b  $10,   0
   18301/    ED5A : E808                		dc.b -$18,   8
   18302/    ED5C : 1810                		dc.b  $18, $10
   18303/    ED5E :                     ; ===========================================================================
   18304/    ED5E :                     
   18305/    ED5E :                     bj0D_SonicRun:				; XREF: Obj0D_Index
   18306/    ED5E : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	on?
   18307/    ED62 : 6600 009A           		bne.w	locret_ECEE	; if yes, branch
   18308/    ED66 : 0838 0001 D022      		btst	#1,($FFFFD022).w
   18309/    ED6C : 660C                		bne.s	loc_EC70
   18310/    ED6E : 11FC 0001 F7CC      		move.b	#1,($FFFFF7CC).w ; lock	controls
   18311/    ED74 : 31FC 0800 F602      		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
   18312/    ED7A :                     
   18313/    ED7A :                     loc_EC70:
   18314/    ED7A : 4A38 D000           		tst.b	($FFFFD000).w
   18315/    ED7E : 6710                		beq.s	loc_EC86
   18316/    ED80 : 3038 D008           		move.w	($FFFFD008).w,d0
   18317/    ED84 : 3238 F72A           		move.w	($FFFFF72A).w,d1
   18318/    ED88 : 0641 0128           		addi.w	#$128,d1
   18319/    ED8C : B041                		cmp.w	d1,d0
   18320/    ED8E : 656E                		bcs.s	locret_ECEE
   18321/    ED90 :                     
   18322/    ED90 :                     loc_EC86:
   18323/    ED90 : 5428 0024           		addq.b	#2,$24(a0)
   18324/    ED94 :                     
   18325/    ED94 :                     ; ---------------------------------------------------------------------------
   18326/    ED94 :                     ; Subroutine to	set up bonuses at the end of an	act
   18327/    ED94 :                     ; ---------------------------------------------------------------------------
   18328/    ED94 :                     
   18329/    ED94 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   18330/    ED94 :                     
   18331/    ED94 :                     
   18332/    ED94 :                     GotThroughAct:				; XREF: Obj3E_EndAct
   18333/    ED94 : 11FC 0001 FF90      		move.b  #1,($FFFFFF90).w ; Set victory animation flag
   18334/    ED9A : 4A38 D5C0           		tst.b	($FFFFD5C0).w
   18335/    ED9E : 665E                		bne.s	locret_ECEE
   18336/    EDA0 : 31F8 F72A F728      		move.w	($FFFFF72A).w,($FFFFF728).w
   18337/    EDA6 : 4238 FE2D           		clr.b	($FFFFFE2D).w	; disable invincibility
   18338/    EDAA : 4238 FE1E           		clr.b	($FFFFFE1E).w	; stop time counter
   18339/    EDAE : 11FC 003A D5C0      		move.b	#$3A,($FFFFD5C0).w
   18340/    EDB4 : 7010                		moveq	#$10,d0
   18341/    EDB6 : 4EB9 0000 15B2      		jsr	(LoadPLC2).l	; load title card patterns
   18342/    EDBC : 11FC 0001 F7D6      		move.b	#1,($FFFFF7D6).w
   18343/    EDC2 : 7000                		moveq	#0,d0
   18344/    EDC4 : 1038 FE23           		move.b	($FFFFFE23).w,d0
   18345/    EDC8 : C0FC 003C           		mulu.w	#60,d0		; convert minutes to seconds
   18346/    EDCC : 7200                		moveq	#0,d1
   18347/    EDCE : 1238 FE24           		move.b	($FFFFFE24).w,d1
   18348/    EDD2 : D041                		add.w	d1,d0		; add up your time
   18349/    EDD4 : 80FC 000F           		divu.w	#15,d0		; divide by 15
   18350/    EDD8 : 7214                		moveq	#$14,d1
   18351/    EDDA : B041                		cmp.w	d1,d0		; is time 5 minutes or higher?
   18352/    EDDC : 6502                		bcs.s	loc_ECD0	; if not, branch
   18353/    EDDE : 3001                		move.w	d1,d0		; use minimum time bonus (0)
   18354/    EDE0 :                     
   18355/    EDE0 :                     loc_ECD0:
   18356/    EDE0 : D040                		add.w	d0,d0
   18357/    EDE2 : 31FB 001C F7D2      		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
   18358/    EDE8 : 3038 FE20           		move.w	($FFFFFE20).w,d0 ; load	number of rings
   18359/    EDEC : C0FC 000A           		mulu.w	#10,d0		; multiply by 10
   18360/    EDF0 : 31C0 F7D4           		move.w	d0,($FFFFF7D4).w ; set ring bonus
   18361/    EDF4 : 303C 008E           		move.w	#$8E,d0
   18362/    EDF8 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
   18363/    EDFE :                     
   18364/    EDFE :                     locret_ECEE:
   18365/    EDFE : 4E75                		rts	
   18366/    EE00 :                     ; End of function GotThroughAct
   18367/    EE00 :                     
   18368/    EE00 :                     ; ===========================================================================
   18369/    EE00 : 1388 1388 03E8 01F4 TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
                    0190 0190 012C 012C 
                    00C8 00C8           
   18370/    EE14 : 00C8 00C8 0064 0064 		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
                    0064 0064 0032 0032 
                    0032 0032 0000      
   18371/    EE2A :                     ; ===========================================================================
   18372/    EE2A :                     
   18373/    EE2A :                     locret_ED1A:				; XREF: Obj0D_Index
   18374/    EE2A : 4E75                		rts	
   18375/    EE2C :                     ; ===========================================================================
   18376/    EE2C :                     Ani_obj0D:
   18377/    EE2C :                     		include	"_anim/obj0D.asm"
(1)    1/    EE2C :                     ; ---------------------------------------------------------------------------
(1)    2/    EE2C :                     ; Animation script - signpost
(1)    3/    EE2C :                     ; ---------------------------------------------------------------------------
(1)    4/    EE2C : 0008                		dc.w byte_ED24-Ani_obj0D
(1)    5/    EE2E : 000C                		dc.w byte_ED28-Ani_obj0D
(1)    6/    EE30 : 0012                		dc.w byte_ED2E-Ani_obj0D
(1)    7/    EE32 : 0018                		dc.w byte_ED34-Ani_obj0D
(1)    8/    EE34 : 0F00 FF00           byte_ED24:	dc.b $F, 0, $FF, 0
(1)    9/    EE38 : 0100 0102 03FF      byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
(1)   10/    EE3E : 0104 0102 03FF      byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
(1)   11/    EE44 : 0F04 FF             byte_ED34:	dc.b $F, 4, $FF
(1)   12/    EE47 : (MACRO)             		align 2
(1)   12/    EE47 :  (MACRO-2)                  cnop 0,2
(1)   12/    EE47 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   12/    EE47 : =$1F                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   12/    EE48 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   18378/    EE48 :                     
   18379/    EE48 :                     ; ---------------------------------------------------------------------------
   18380/    EE48 :                     ; Sprite mappings - signpost
   18381/    EE48 :                     ; ---------------------------------------------------------------------------
   18382/    EE48 :                     Map_obj0D:
   18383/    EE48 :                     		include	"_maps/obj0D.asm"
(1)    1/    EE48 :                     ; ---------------------------------------------------------------------------
(1)    2/    EE48 :                     ; Sprite mappings - signpost
(1)    3/    EE48 :                     ; ---------------------------------------------------------------------------
(1)    4/    EE48 : 000A 001A           		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
(1)    5/    EE4C : 0025 0030           		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
(1)    6/    EE50 : 003B                		dc.w byte_ED73-Map_obj0D
(1)    7/    EE52 : 03                  byte_ED42:	dc.b 3
(1)    8/    EE53 : F00B 0000 E8        		dc.b $F0, $B, 0, 0, $E8
(1)    9/    EE58 : F00B 0800 00        		dc.b $F0, $B, 8, 0, 0
(1)   10/    EE5D : 1001 0038 FC        		dc.b $10, 1, 0,	$38, $FC
(1)   11/    EE62 : 02                  byte_ED52:	dc.b 2
(1)   12/    EE63 : F00F 000C F0        		dc.b $F0, $F, 0, $C, $F0
(1)   13/    EE68 : 1001 0038 FC        		dc.b $10, 1, 0,	$38, $FC
(1)   14/    EE6D : 02                  byte_ED5D:	dc.b 2
(1)   15/    EE6E : F003 001C FC        		dc.b $F0, 3, 0,	$1C, $FC
(1)   16/    EE73 : 1001 0838 FC        		dc.b $10, 1, 8,	$38, $FC
(1)   17/    EE78 : 02                  byte_ED68:	dc.b 2
(1)   18/    EE79 : F00F 080C F0        		dc.b $F0, $F, 8, $C, $F0
(1)   19/    EE7E : 1001 0838 FC        		dc.b $10, 1, 8,	$38, $FC
(1)   20/    EE83 : 03                  byte_ED73:	dc.b 3
(1)   21/    EE84 : F00B 0020 E8        		dc.b $F0, $B, 0, $20, $E8
(1)   22/    EE89 : F00B 002C 00        		dc.b $F0, $B, 0, $2C, 0
(1)   23/    EE8E : 1001 0038 FC        		dc.b $10, 1, 0,	$38, $FC
(1)   24/    EE93 : (MACRO)             		align 2
(1)   24/    EE93 :  (MACRO-2)                  cnop 0,2
(1)   24/    EE93 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   24/    EE93 : =$20                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   24/    EE94 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   18384/    EE94 :                     
   18385/    EE94 :                     ; ===========================================================================
   18386/    EE94 :                     ; ---------------------------------------------------------------------------
   18387/    EE94 :                     ; Object 4C - lava geyser / lavafall producer (MZ)
   18388/    EE94 :                     ; ---------------------------------------------------------------------------
   18389/    EE94 :                     
   18390/    EE94 :                     Obj4C:					; XREF: Obj_Index
   18391/    EE94 : 7000                		moveq	#0,d0
   18392/    EE96 : 1028 0024           		move.b	$24(a0),d0
   18393/    EE9A : 323B 000A           		move.w	Obj4C_Index(pc,d0.w),d1
   18394/    EE9E : 4EBB 1006           		jsr	Obj4C_Index(pc,d1.w)
   18395/    EEA2 : 6000 0204           		bra.w	Obj4D_ChkDel
   18396/    EEA6 :                     ; ===========================================================================
   18397/    EEA6 : 000C                Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
   18398/    EEA8 : 0036                		dc.w loc_EDCC-Obj4C_Index
   18399/    EEAA : 00A8                		dc.w loc_EE3E-Obj4C_Index
   18400/    EEAC : 005C                		dc.w Obj4C_MakeLava-Obj4C_Index
   18401/    EEAE : 00B4                		dc.w Obj4C_Display-Obj4C_Index
   18402/    EEB0 : 00C4                		dc.w Obj4C_Delete-Obj4C_Index
   18403/    EEB2 :                     ; ===========================================================================
   18404/    EEB2 :                     
   18405/    EEB2 :                     Obj4C_Main:				; XREF: Obj4C_Index
   18406/    EEB2 : 5428 0024           		addq.b	#2,$24(a0)
   18407/    EEB6 : 217C 0000 F35A 0004 		move.l	#Map_obj4C,4(a0)
   18408/    EEBE : 317C E3A8 0002      		move.w	#$E3A8,2(a0)
   18409/    EEC4 : 117C 0004 0001      		move.b	#4,1(a0)
   18410/    EECA : 117C 0001 0018      		move.b	#1,$18(a0)
   18411/    EED0 : 117C 0038 0019      		move.b	#$38,$19(a0)
   18412/    EED6 : 317C 0078 0034      		move.w	#120,$34(a0)	; set time delay to 2 seconds
   18413/    EEDC :                     
   18414/    EEDC :                     loc_EDCC:				; XREF: Obj4C_Index
   18415/    EEDC : 5368 0032           		subq.w	#1,$32(a0)
   18416/    EEE0 : 6A1E                		bpl.s	locret_EDF0
   18417/    EEE2 : 3168 0034 0032      		move.w	$34(a0),$32(a0)
   18418/    EEE8 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   18419/    EEEC : 3228 000C           		move.w	$C(a0),d1
   18420/    EEF0 : B041                		cmp.w	d1,d0
   18421/    EEF2 : 640C                		bcc.s	locret_EDF0
   18422/    EEF4 : 0441 0170           		subi.w	#$170,d1
   18423/    EEF8 : B041                		cmp.w	d1,d0
   18424/    EEFA : 6504                		bcs.s	locret_EDF0
   18425/    EEFC : 5428 0024           		addq.b	#2,$24(a0)
   18426/    EF00 :                     
   18427/    EF00 :                     locret_EDF0:
   18428/    EF00 : 4E75                		rts	
   18429/    EF02 :                     ; ===========================================================================
   18430/    EF02 :                     
   18431/    EF02 :                     Obj4C_MakeLava:				; XREF: Obj4C_Index
   18432/    EF02 : 5428 0024           		addq.b	#2,$24(a0)
   18433/    EF06 : 6100 ECA4           		bsr.w	SingleObjLoad2
   18434/    EF0A : 661C                		bne.s	loc_EE18
   18435/    EF0C : (MACRO)             		_move.b	#$4D,0(a1)	; load lavafall	object
   18435/    EF0C :  (MACRO-2)                          insn2op move.b, #$4D,0(a1)
   18435/    EF0C : 137C 004D 0001                              !move.b   #$4D,1+0(a1)
   18435/    EF11 :                                             !org    *-1
   18435/    EF11 : 00                                          !dc.b   0
   18436/    EF12 : 3368 0008 0008      		move.w	8(a0),8(a1)
   18437/    EF18 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   18438/    EF1E : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   18439/    EF24 : 2348 003C           		move.l	a0,$3C(a1)
   18440/    EF28 :                     
   18441/    EF28 :                     loc_EE18:
   18442/    EF28 : 117C 0001 001C      		move.b	#1,$1C(a0)
   18443/    EF2E : 4A28 0028           		tst.b	$28(a0)		; is object type 00 (geyser) ?
   18444/    EF32 : 6708                		beq.s	Obj4C_Type00	; if yes, branch
   18445/    EF34 : 117C 0004 001C      		move.b	#4,$1C(a0)
   18446/    EF3A : 601E                		bra.s	Obj4C_Display
   18447/    EF3C :                     ; ===========================================================================
   18448/    EF3C :                     
   18449/    EF3C :                     Obj4C_Type00:				; XREF: Obj4C_MakeLava
   18450/    EF3C : 2268 003C           		movea.l	$3C(a0),a1	; load geyser object
   18451/    EF40 : 08E9 0001 0022      		bset	#1,$22(a1)
   18452/    EF46 : 337C FA80 0012      		move.w	#-$580,$12(a1)
   18453/    EF4C : 600C                		bra.s	Obj4C_Display
   18454/    EF4E :                     ; ===========================================================================
   18455/    EF4E :                     
   18456/    EF4E :                     loc_EE3E:				; XREF: Obj4C_Index
   18457/    EF4E : 4A28 0028           		tst.b	$28(a0)		; is object type 00 (geyser) ?
   18458/    EF52 : 6706                		beq.s	Obj4C_Display	; if yes, branch
   18459/    EF54 : 5428 0024           		addq.b	#2,$24(a0)
   18460/    EF58 : 4E75                		rts	
   18461/    EF5A :                     ; ===========================================================================
   18462/    EF5A :                     
   18463/    EF5A :                     Obj4C_Display:				; XREF: Obj4C_Index
   18464/    EF5A : 43F9 0000 F324      		lea	(Ani_obj4C).l,a1
   18465/    EF60 : 6100 B7D2           		bsr.w	AnimateSprite
   18466/    EF64 : 6100 E7A8           		bsr.w	DisplaySprite
   18467/    EF68 : 4E75                		rts	
   18468/    EF6A :                     ; ===========================================================================
   18469/    EF6A :                     
   18470/    EF6A :                     Obj4C_Delete:				; XREF: Obj4C_Index
   18471/    EF6A : 117C 0000 001C      		move.b	#0,$1C(a0)
   18472/    EF70 : 117C 0002 0024      		move.b	#2,$24(a0)
   18473/    EF76 : 4A28 0028           		tst.b	$28(a0)
   18474/    EF7A : 6700 E7CE           		beq.w	DeleteObject
   18475/    EF7E : 4E75                		rts	
   18476/    EF80 :                     ; ===========================================================================
   18477/    EF80 :                     ; ---------------------------------------------------------------------------
   18478/    EF80 :                     ; Object 4D - lava geyser / lavafall (MZ)
   18479/    EF80 :                     ; ---------------------------------------------------------------------------
   18480/    EF80 :                     
   18481/    EF80 :                     Obj4D:					; XREF: Obj_Index
   18482/    EF80 : 7000                		moveq	#0,d0
   18483/    EF82 : 1028 0024           		move.b	$24(a0),d0
   18484/    EF86 : 323B 000A           		move.w	Obj4D_Index(pc,d0.w),d1
   18485/    EF8A : 4EBB 1006           		jsr	Obj4D_Index(pc,d1.w)
   18486/    EF8E : 6000 E77E           		bra.w	DisplaySprite
   18487/    EF92 :                     ; ===========================================================================
   18488/    EF92 : 000C                Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
   18489/    EF94 : 00F8                		dc.w Obj4D_Action-Obj4D_Index
   18490/    EF96 : 017A                		dc.w loc_EFFC-Obj4D_Index
   18491/    EF98 : 01D8                		dc.w Obj4D_Delete-Obj4D_Index
   18492/    EF9A :                     
   18493/    EF9A : FB00 0000           Obj4D_Speeds:	dc.w $FB00, 0
   18494/    EF9E :                     ; ===========================================================================
   18495/    EF9E :                     
   18496/    EF9E :                     Obj4D_Main:				; XREF: Obj4D_Index
   18497/    EF9E : 5428 0024           		addq.b	#2,$24(a0)
   18498/    EFA2 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   18499/    EFA8 : 4A28 0028           		tst.b	$28(a0)
   18500/    EFAC : 6706                		beq.s	loc_EEA4
   18501/    EFAE : 0468 0250 000C      		subi.w	#$250,$C(a0)
   18502/    EFB4 :                     
   18503/    EFB4 :                     loc_EEA4:
   18504/    EFB4 : 7000                		moveq	#0,d0
   18505/    EFB6 : 1028 0028           		move.b	$28(a0),d0
   18506/    EFBA : D040                		add.w	d0,d0
   18507/    EFBC : 317B 00DC 0012      		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
   18508/    EFC2 : 2248                		movea.l	a0,a1
   18509/    EFC4 : 7201                		moveq	#1,d1
   18510/    EFC6 : 6108                		bsr.s	Obj4D_MakeLava
   18511/    EFC8 : 6056                		bra.s	loc_EF10
   18512/    EFCA :                     ; ===========================================================================
   18513/    EFCA :                     
   18514/    EFCA :                     Obj4D_Loop:
   18515/    EFCA : 6100 EBE0           		bsr.w	SingleObjLoad2
   18516/    EFCE : 664A                		bne.s	loc_EF0A
   18517/    EFD0 :                     
   18518/    EFD0 :                     Obj4D_MakeLava:				; XREF: Obj4D_Main
   18519/    EFD0 : (MACRO)             		_move.b	#$4D,0(a1)
   18519/    EFD0 :  (MACRO-2)                          insn2op move.b, #$4D,0(a1)
   18519/    EFD0 : 137C 004D 0001                              !move.b   #$4D,1+0(a1)
   18519/    EFD5 :                                             !org    *-1
   18519/    EFD5 : 00                                          !dc.b   0
   18520/    EFD6 : 237C 0000 F35A 0004 		move.l	#Map_obj4C,4(a1)
   18521/    EFDE : 337C 63A8 0002      		move.w	#$63A8,2(a1)
   18522/    EFE4 : 137C 0004 0001      		move.b	#4,1(a1)
   18523/    EFEA : 137C 0020 0019      		move.b	#$20,$19(a1)
   18524/    EFF0 : 3368 0008 0008      		move.w	8(a0),8(a1)
   18525/    EFF6 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   18526/    EFFC : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   18527/    F002 : 137C 0001 0018      		move.b	#1,$18(a1)
   18528/    F008 : 137C 0005 001C      		move.b	#5,$1C(a1)
   18529/    F00E : 4A28 0028           		tst.b	$28(a0)
   18530/    F012 : 6706                		beq.s	loc_EF0A
   18531/    F014 : 137C 0002 001C      		move.b	#2,$1C(a1)
   18532/    F01A :                     
   18533/    F01A :                     loc_EF0A:
   18534/    F01A : 51C9 FFAE           		dbf	d1,Obj4D_Loop
   18535/    F01E : 4E75                		rts	
   18536/    F020 :                     ; ===========================================================================
   18537/    F020 :                     
   18538/    F020 :                     loc_EF10:				; XREF: Obj4D_Main
   18539/    F020 : 0669 0060 000C      		addi.w	#$60,$C(a1)
   18540/    F026 : 3368 0030 0030      		move.w	$30(a0),$30(a1)
   18541/    F02C : 0669 0060 0030      		addi.w	#$60,$30(a1)
   18542/    F032 : 137C 0093 0020      		move.b	#$93,$20(a1)
   18543/    F038 : 137C 0080 0016      		move.b	#$80,$16(a1)
   18544/    F03E : 08E9 0004 0001      		bset	#4,1(a1)
   18545/    F044 : 5829 0024           		addq.b	#4,$24(a1)
   18546/    F048 : 2348 003C           		move.l	a0,$3C(a1)
   18547/    F04C : 4A28 0028           		tst.b	$28(a0)
   18548/    F050 : 672E                		beq.s	Obj4D_PlaySnd
   18549/    F052 : 7200                		moveq	#0,d1
   18550/    F054 : 6100 FF74           		bsr.w	Obj4D_Loop
   18551/    F058 : 5429 0024           		addq.b	#2,$24(a1)
   18552/    F05C : 08E9 0004 0002      		bset	#4,2(a1)
   18553/    F062 : 0669 0100 000C      		addi.w	#$100,$C(a1)
   18554/    F068 : 137C 0000 0018      		move.b	#0,$18(a1)
   18555/    F06E : 3368 0030 0030      		move.w	$30(a0),$30(a1)
   18556/    F074 : 2368 003C 003C      		move.l	$3C(a0),$3C(a1)
   18557/    F07A : 117C 0000 0028      		move.b	#0,$28(a0)
   18558/    F080 :                     
   18559/    F080 :                     Obj4D_PlaySnd:
   18560/    F080 : 303C 00C8           		move.w	#$C8,d0
   18561/    F084 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play flame sound
   18562/    F08A :                     
   18563/    F08A :                     Obj4D_Action:				; XREF: Obj4D_Index
   18564/    F08A : 7000                		moveq	#0,d0
   18565/    F08C : 1028 0028           		move.b	$28(a0),d0
   18566/    F090 : D040                		add.w	d0,d0
   18567/    F092 : 323B 0034           		move.w	Obj4D_TypeIndex(pc,d0.w),d1
   18568/    F096 : 4EBB 1030           		jsr	Obj4D_TypeIndex(pc,d1.w)
   18569/    F09A : 6100 E64C           		bsr.w	SpeedToPos
   18570/    F09E : 43F9 0000 F324      		lea	(Ani_obj4C).l,a1
   18571/    F0A4 : 6100 B68E           		bsr.w	AnimateSprite
   18572/    F0A8 :                     
   18573/    F0A8 :                     Obj4D_ChkDel:				; XREF: Obj4C
   18574/    F0A8 : 3028 0008           		move.w	8(a0),d0
   18575/    F0AC : 0240 FF80           		andi.w	#$FF80,d0
   18576/    F0B0 : 3238 F700           		move.w	($FFFFF700).w,d1
   18577/    F0B4 : 0441 0080           		subi.w	#$80,d1
   18578/    F0B8 : 0241 FF80           		andi.w	#$FF80,d1
   18579/    F0BC : 9041                		sub.w	d1,d0
   18580/    F0BE : 0C40 0280           		cmpi.w	#$280,d0
   18581/    F0C2 : 6200 E686           		bhi.w	DeleteObject
   18582/    F0C6 : 4E75                		rts	
   18583/    F0C8 :                     ; ===========================================================================
   18584/    F0C8 : 0004                Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
   18585/    F0CA : 0024                		dc.w Obj4D_Type01-Obj4D_TypeIndex
   18586/    F0CC :                     ; ===========================================================================
   18587/    F0CC :                     
   18588/    F0CC :                     Obj4D_Type00:				; XREF: Obj4D_TypeIndex
   18589/    F0CC : 0668 0018 0012      		addi.w	#$18,$12(a0)	; increase object"s falling speed
   18590/    F0D2 : 3028 0030           		move.w	$30(a0),d0
   18591/    F0D6 : B068 000C           		cmp.w	$C(a0),d0
   18592/    F0DA : 640E                		bcc.s	locret_EFDA
   18593/    F0DC : 5828 0024           		addq.b	#4,$24(a0)
   18594/    F0E0 : 2268 003C           		movea.l	$3C(a0),a1
   18595/    F0E4 : 137C 0003 001C      		move.b	#3,$1C(a1)
   18596/    F0EA :                     
   18597/    F0EA :                     locret_EFDA:
   18598/    F0EA : 4E75                		rts	
   18599/    F0EC :                     ; ===========================================================================
   18600/    F0EC :                     
   18601/    F0EC :                     Obj4D_Type01:				; XREF: Obj4D_TypeIndex
   18602/    F0EC : 0668 0018 0012      		addi.w	#$18,$12(a0)	; increase object"s falling speed
   18603/    F0F2 : 3028 0030           		move.w	$30(a0),d0
   18604/    F0F6 : B068 000C           		cmp.w	$C(a0),d0
   18605/    F0FA : 640E                		bcc.s	locret_EFFA
   18606/    F0FC : 5828 0024           		addq.b	#4,$24(a0)
   18607/    F100 : 2268 003C           		movea.l	$3C(a0),a1
   18608/    F104 : 137C 0001 001C      		move.b	#1,$1C(a1)
   18609/    F10A :                     
   18610/    F10A :                     locret_EFFA:
   18611/    F10A : 4E75                		rts	
   18612/    F10C :                     ; ===========================================================================
   18613/    F10C :                     
   18614/    F10C :                     loc_EFFC:				; XREF: Obj4D_Index
   18615/    F10C : 2268 003C           		movea.l	$3C(a0),a1
   18616/    F110 : 0C29 0006 0024      		cmpi.b	#6,$24(a1)
   18617/    F116 : 6700 0052           		beq.w	Obj4D_Delete
   18618/    F11A : 3029 000C           		move.w	$C(a1),d0
   18619/    F11E : 0640 0060           		addi.w	#$60,d0
   18620/    F122 : 3140 000C           		move.w	d0,$C(a0)
   18621/    F126 : 9068 0030           		sub.w	$30(a0),d0
   18622/    F12A : 4440                		neg.w	d0
   18623/    F12C : 7208                		moveq	#8,d1
   18624/    F12E : 0C40 0040           		cmpi.w	#$40,d0
   18625/    F132 : 6C02                		bge.s	loc_F026
   18626/    F134 : 720B                		moveq	#$B,d1
   18627/    F136 :                     
   18628/    F136 :                     loc_F026:
   18629/    F136 : 0C40 0080           		cmpi.w	#$80,d0
   18630/    F13A : 6F02                		ble.s	loc_F02E
   18631/    F13C : 720E                		moveq	#$E,d1
   18632/    F13E :                     
   18633/    F13E :                     loc_F02E:
   18634/    F13E : 5328 001E           		subq.b	#1,$1E(a0)
   18635/    F142 : 6A18                		bpl.s	loc_F04C
   18636/    F144 : 117C 0007 001E      		move.b	#7,$1E(a0)
   18637/    F14A : 5228 001B           		addq.b	#1,$1B(a0)
   18638/    F14E : 0C28 0002 001B      		cmpi.b	#2,$1B(a0)
   18639/    F154 : 6506                		bcs.s	loc_F04C
   18640/    F156 : 117C 0000 001B      		move.b	#0,$1B(a0)
   18641/    F15C :                     
   18642/    F15C :                     loc_F04C:
   18643/    F15C : 1028 001B           		move.b	$1B(a0),d0
   18644/    F160 : D001                		add.b	d1,d0
   18645/    F162 : 1140 001A           		move.b	d0,$1A(a0)
   18646/    F166 : 6000 FF40           		bra.w	Obj4D_ChkDel
   18647/    F16A :                     ; ===========================================================================
   18648/    F16A :                     
   18649/    F16A :                     Obj4D_Delete:				; XREF: Obj4D_Index
   18650/    F16A : 6000 E5DE           		bra.w	DeleteObject
   18651/    F16E :                     ; ===========================================================================
   18652/    F16E :                     ; ---------------------------------------------------------------------------
   18653/    F16E :                     ; Object 4E - advancing	wall of	lava (MZ)
   18654/    F16E :                     ; ---------------------------------------------------------------------------
   18655/    F16E :                     
   18656/    F16E :                     Obj4E:					; XREF: Obj_Index
   18657/    F16E : 7000                		moveq	#0,d0
   18658/    F170 : 1028 0024           		move.b	$24(a0),d0
   18659/    F174 : 323B 0006           		move.w	Obj4E_Index(pc,d0.w),d1
   18660/    F178 : 4EFB 1002           		jmp	Obj4E_Index(pc,d1.w)
   18661/    F17C :                     ; ===========================================================================
   18662/    F17C : 000A                Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
   18663/    F17E : 00A6                		dc.w Obj4E_Solid-Obj4E_Index
   18664/    F180 : 006A                		dc.w Obj4E_Action-Obj4E_Index
   18665/    F182 : 012C                		dc.w Obj4E_Move2-Obj4E_Index
   18666/    F184 : 0148                		dc.w Obj4E_Delete-Obj4E_Index
   18667/    F186 :                     ; ===========================================================================
   18668/    F186 :                     
   18669/    F186 :                     Obj4E_Main:				; XREF: Obj4E_Index
   18670/    F186 : 5828 0024           		addq.b	#4,$24(a0)
   18671/    F18A : 2248                		movea.l	a0,a1
   18672/    F18C : 7201                		moveq	#1,d1
   18673/    F18E : 6006                		bra.s	Obj4E_Main2
   18674/    F190 :                     ; ===========================================================================
   18675/    F190 :                     
   18676/    F190 :                     Obj4E_Loop:
   18677/    F190 : 6100 EA1A           		bsr.w	SingleObjLoad2
   18678/    F194 : 6642                		bne.s	loc_F0C8
   18679/    F196 :                     
   18680/    F196 :                     Obj4E_Main2:				; XREF: Obj4E_Main
   18681/    F196 : (MACRO)             		_move.b	#$4E,0(a1)	; load object
   18681/    F196 :  (MACRO-2)                          insn2op move.b, #$4E,0(a1)
   18681/    F196 : 137C 004E 0001                              !move.b   #$4E,1+0(a1)
   18681/    F19B :                                             !org    *-1
   18681/    F19B : 00                                          !dc.b   0
   18682/    F19C : 237C 0000 F63E 0004 		move.l	#Map_obj4E,4(a1)
   18683/    F1A4 : 337C 63A8 0002      		move.w	#$63A8,2(a1)
   18684/    F1AA : 137C 0004 0001      		move.b	#4,1(a1)
   18685/    F1B0 : 137C 0050 0019      		move.b	#$50,$19(a1)
   18686/    F1B6 : 3368 0008 0008      		move.w	8(a0),8(a1)
   18687/    F1BC : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   18688/    F1C2 : 137C 0001 0018      		move.b	#1,$18(a1)
   18689/    F1C8 : 137C 0000 001C      		move.b	#0,$1C(a1)
   18690/    F1CE : 137C 0094 0020      		move.b	#$94,$20(a1)
   18691/    F1D4 : 2348 003C           		move.l	a0,$3C(a1)
   18692/    F1D8 :                     
   18693/    F1D8 :                     loc_F0C8:
   18694/    F1D8 : 51C9 FFB6           		dbf	d1,Obj4E_Loop	; repeat sequence once
   18695/    F1DC :                     
   18696/    F1DC : 5C29 0024           		addq.b	#6,$24(a1)
   18697/    F1E0 : 137C 0004 001A      		move.b	#4,$1A(a1)
   18698/    F1E6 :                     
   18699/    F1E6 :                     Obj4E_Action:				; XREF: Obj4E_Index
   18700/    F1E6 : 3038 D008           		move.w	($FFFFD008).w,d0
   18701/    F1EA : 9068 0008           		sub.w	8(a0),d0
   18702/    F1EE : 6402                		bcc.s	Obj4E_ChkSonic
   18703/    F1F0 : 4440                		neg.w	d0
   18704/    F1F2 :                     
   18705/    F1F2 :                     Obj4E_ChkSonic:
   18706/    F1F2 : 0C40 00C0           		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
   18707/    F1F6 : 641A                		bcc.s	Obj4E_Move	; if not, branch
   18708/    F1F8 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   18709/    F1FC : 9068 000C           		sub.w	$C(a0),d0
   18710/    F200 : 6402                		bcc.s	loc_F0F4
   18711/    F202 : 4440                		neg.w	d0
   18712/    F204 :                     
   18713/    F204 :                     loc_F0F4:
   18714/    F204 : 0C40 0060           		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
   18715/    F208 : 6408                		bcc.s	Obj4E_Move	; if not, branch
   18716/    F20A : 117C 0001 0036      		move.b	#1,$36(a0)	; set object to	move
   18717/    F210 : 6010                		bra.s	Obj4E_Solid
   18718/    F212 :                     ; ===========================================================================
   18719/    F212 :                     
   18720/    F212 :                     Obj4E_Move:				; XREF: Obj4E_ChkSonic
   18721/    F212 : 4A28 0036           		tst.b	$36(a0)		; is object set	to move?
   18722/    F216 : 670A                		beq.s	Obj4E_Solid	; if not, branch
   18723/    F218 : 317C 0180 0010      		move.w	#$180,$10(a0)	; set object speed
   18724/    F21E : 5528 0024           		subq.b	#2,$24(a0)
   18725/    F222 :                     
   18726/    F222 :                     Obj4E_Solid:				; XREF: Obj4E_Index
   18727/    F222 : 323C 002B           		move.w	#$2B,d1
   18728/    F226 : 343C 0018           		move.w	#$18,d2
   18729/    F22A : 3602                		move.w	d2,d3
   18730/    F22C : 5243                		addq.w	#1,d3
   18731/    F22E : 3828 0008           		move.w	8(a0),d4
   18732/    F232 : 1028 0024           		move.b	$24(a0),d0
   18733/    F236 : 3F00                		move.w	d0,-(sp)
   18734/    F238 : 6100 08AC           		bsr.w	SolidObject
   18735/    F23C : 301F                		move.w	(sp)+,d0
   18736/    F23E : 1140 0024           		move.b	d0,$24(a0)
   18737/    F242 : 0C68 06A0 0008      		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
   18738/    F248 : 6608                		bne.s	Obj4E_Animate	; if not, branch
   18739/    F24A : 4268 0010           		clr.w	$10(a0)		; stop object moving
   18740/    F24E : 4228 0036           		clr.b	$36(a0)
   18741/    F252 :                     
   18742/    F252 :                     Obj4E_Animate:
   18743/    F252 : 43F9 0000 F352      		lea	(Ani_obj4E).l,a1
   18744/    F258 : 6100 B4DA           		bsr.w	AnimateSprite
   18745/    F25C : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   18746/    F262 : 6404                		bcc.s	Obj4E_ChkDel
   18747/    F264 : 6100 E482           		bsr.w	SpeedToPos
   18748/    F268 :                     
   18749/    F268 :                     Obj4E_ChkDel:
   18750/    F268 : 6100 E4A4           		bsr.w	DisplaySprite
   18751/    F26C : 4A28 0036           		tst.b	$36(a0)
   18752/    F270 : 661C                		bne.s	locret_F17E
   18753/    F272 : 3028 0008           		move.w	8(a0),d0
   18754/    F276 : 0240 FF80           		andi.w	#$FF80,d0
   18755/    F27A : 3238 F700           		move.w	($FFFFF700).w,d1
   18756/    F27E : 0441 0080           		subi.w	#$80,d1
   18757/    F282 : 0241 FF80           		andi.w	#$FF80,d1
   18758/    F286 : 9041                		sub.w	d1,d0
   18759/    F288 : 0C40 0280           		cmpi.w	#$280,d0
   18760/    F28C : 6202                		bhi.s	Obj4E_ChkGone
   18761/    F28E :                     
   18762/    F28E :                     locret_F17E:
   18763/    F28E : 4E75                		rts	
   18764/    F290 :                     ; ===========================================================================
   18765/    F290 :                     
   18766/    F290 :                     Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
   18767/    F290 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   18768/    F294 : 7000                		moveq	#0,d0
   18769/    F296 : 1028 0023           		move.b	$23(a0),d0
   18770/    F29A : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   18771/    F2A0 : 117C 0008 0024      		move.b	#8,$24(a0)
   18772/    F2A6 : 4E75                		rts	
   18773/    F2A8 :                     ; ===========================================================================
   18774/    F2A8 :                     
   18775/    F2A8 :                     Obj4E_Move2:				; XREF: Obj4E_Index
   18776/    F2A8 : 2268 003C           		movea.l	$3C(a0),a1
   18777/    F2AC : 0C29 0008 0024      		cmpi.b	#8,$24(a1)
   18778/    F2B2 : 6710                		beq.s	Obj4E_Delete
   18779/    F2B4 : 3169 0008 0008      		move.w	8(a1),8(a0)	; move rest of lava wall
   18780/    F2BA : 0468 0080 0008      		subi.w	#$80,8(a0)
   18781/    F2C0 : 6000 E44C           		bra.w	DisplaySprite
   18782/    F2C4 :                     ; ===========================================================================
   18783/    F2C4 :                     
   18784/    F2C4 :                     Obj4E_Delete:				; XREF: Obj4E_Index
   18785/    F2C4 : 6000 E484           		bra.w	DeleteObject
   18786/    F2C8 :                     ; ===========================================================================
   18787/    F2C8 :                     ; ---------------------------------------------------------------------------
   18788/    F2C8 :                     ; Object 54 - invisible	lava tag (MZ)
   18789/    F2C8 :                     ; ---------------------------------------------------------------------------
   18790/    F2C8 :                     
   18791/    F2C8 :                     Obj54:					; XREF: Obj_Index
   18792/    F2C8 : 7000                		moveq	#0,d0
   18793/    F2CA : 1028 0024           		move.b	$24(a0),d0
   18794/    F2CE : 323B 0006           		move.w	Obj54_Index(pc,d0.w),d1
   18795/    F2D2 : 4EFB 1002           		jmp	Obj54_Index(pc,d1.w)
   18796/    F2D6 :                     ; ===========================================================================
   18797/    F2D6 : 0008                Obj54_Index:	dc.w Obj54_Main-Obj54_Index
   18798/    F2D8 : 0026                		dc.w Obj54_ChkDel-Obj54_Index
   18799/    F2DA :                     
   18800/    F2DA : 9694 9500           Obj54_Sizes:	dc.b $96, $94, $95, 0
   18801/    F2DE :                     ; ===========================================================================
   18802/    F2DE :                     
   18803/    F2DE :                     Obj54_Main:				; XREF: Obj54_Index
   18804/    F2DE : 5428 0024           		addq.b	#2,$24(a0)
   18805/    F2E2 : 7000                		moveq	#0,d0
   18806/    F2E4 : 1028 0028           		move.b	$28(a0),d0
   18807/    F2E8 : 117B 00F0 0020      		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
   18808/    F2EE : 217C 0000 F320 0004 		move.l	#Map_obj54,4(a0)
   18809/    F2F6 : 117C 0084 0001      		move.b	#$84,1(a0)
   18810/    F2FC :                     
   18811/    F2FC :                     Obj54_ChkDel:				; XREF: Obj54_Index
   18812/    F2FC : 3028 0008           		move.w	8(a0),d0
   18813/    F300 : 0240 FF80           		andi.w	#$FF80,d0
   18814/    F304 : 3238 F700           		move.w	($FFFFF700).w,d1
   18815/    F308 : 0441 0080           		subi.w	#$80,d1
   18816/    F30C : 0241 FF80           		andi.w	#$FF80,d1
   18817/    F310 : 9041                		sub.w	d1,d0
   18818/    F312 : 6B00 E436           		bmi.w	DeleteObject
   18819/    F316 : 0C40 0280           		cmpi.w	#$280,d0
   18820/    F31A : 6200 E42E           		bhi.w	DeleteObject
   18821/    F31E : 4E75                		rts	
   18822/    F320 :                     ; ===========================================================================
   18823/    F320 :                     ; ---------------------------------------------------------------------------
   18824/    F320 :                     ; Sprite mappings - invisible lava tag (MZ)
   18825/    F320 :                     ; ---------------------------------------------------------------------------
   18826/    F320 :                     Map_obj54:
   18827/    F320 :                     		include	"_maps/obj54.asm"
(1)    1/    F320 :                     ; ---------------------------------------------------------------------------
(1)    2/    F320 :                     ; Sprite mappings - invisible lava tag (MZ)
(1)    3/    F320 :                     ; ---------------------------------------------------------------------------
(1)    4/    F320 : 0002                		dc.w byte_F212-Map_obj54
(1)    5/    F322 : 00                  byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
(1)    6/    F323 : (MACRO)             		align 2
(1)    6/    F323 :  (MACRO-2)                  cnop 0,2
(1)    6/    F323 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)    6/    F323 : =$21                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)    6/    F324 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   18828/    F324 :                     
   18829/    F324 :                     Ani_obj4C:
   18830/    F324 :                     		include	"_anim/obj4C.asm"
(1)    1/    F324 :                     ; ---------------------------------------------------------------------------
(1)    2/    F324 :                     ; Animation script - geyser of lava (MZ)
(1)    3/    F324 :                     ; ---------------------------------------------------------------------------
(1)    4/    F324 : 000C                		dc.w byte_F220-Ani_obj4C
(1)    5/    F326 : 0016                		dc.w byte_F22A-Ani_obj4C
(1)    6/    F328 : 001A                		dc.w byte_F22E-Ani_obj4C
(1)    7/    F32A : 001E                		dc.w byte_F232-Ani_obj4C
(1)    8/    F32C : 0026                		dc.w byte_F23A-Ani_obj4C
(1)    9/    F32E : 002A                		dc.w byte_F23E-Ani_obj4C
(1)   10/    F330 : 0200 0100 0104 0504 byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
                    05FC                
(1)   11/    F33A : 0202 03FF           byte_F22A:	dc.b 2,	2, 3, $FF
(1)   12/    F33E : 0206 07FF           byte_F22E:	dc.b 2,	6, 7, $FF
(1)   13/    F342 : 0202 0300 0100 01FC byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
(1)   14/    F34A : 0F13 FF00           byte_F23A:	dc.b $F, $13, $FF, 0
(1)   15/    F34E : 0211 12FF           byte_F23E:	dc.b 2,	$11, $12, $FF
(1)   16/    F352 : (MACRO)             		align 2
(1)   16/    F352 :  (MACRO-2)                  cnop 0,2
(1)   16/    F352 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   18831/    F352 :                     
   18832/    F352 :                     Ani_obj4E:
   18833/    F352 :                     		include	"_anim/obj4E.asm"
(1)    1/    F352 :                     ; ---------------------------------------------------------------------------
(1)    2/    F352 :                     ; Animation script - advancing wall of lava (MZ)
(1)    3/    F352 :                     ; ---------------------------------------------------------------------------
(1)    4/    F352 : 0002                		dc.w byte_F244-Ani_obj4E
(1)    5/    F354 : 0900 0102 03FF      byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
(1)    6/    F35A : (MACRO)             		align 2
(1)    6/    F35A :  (MACRO-2)                  cnop 0,2
(1)    6/    F35A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   18834/    F35A :                     
   18835/    F35A :                     ; ---------------------------------------------------------------------------
   18836/    F35A :                     ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
   18837/    F35A :                     ; ---------------------------------------------------------------------------
   18838/    F35A :                     Map_obj4C:
   18839/    F35A :                     		include	"_maps/obj4C.asm"
(1)    1/    F35A :                     ; ---------------------------------------------------------------------------
(1)    2/    F35A :                     ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
(1)    3/    F35A :                     ; ---------------------------------------------------------------------------
(1)    4/    F35A : 0028 0033           		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
(1)    5/    F35E : 003E 0053           		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
(1)    6/    F362 : 0068 0087           		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
(1)    7/    F366 : 00A6 00B1           		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
(1)    8/    F36A : 00BC 00EF           		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
(1)    9/    F36E : 0122 0155           		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
(1)   10/    F372 : 0174 0193           		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
(1)   11/    F376 : 01B2 0203           		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
(1)   12/    F37A : 0254 02A5           		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
(1)   13/    F37E : 02C4 02E3           		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
(1)   14/    F382 : 02                  byte_F272:	dc.b 2
(1)   15/    F383 : EC0B 0000 E8        		dc.b $EC, $B, 0, 0, $E8
(1)   16/    F388 : EC0B 0800 00        		dc.b $EC, $B, 8, 0, 0
(1)   17/    F38D : 02                  byte_F27D:	dc.b 2
(1)   18/    F38E : EC0B 0018 E8        		dc.b $EC, $B, 0, $18, $E8
(1)   19/    F393 : EC0B 0818 00        		dc.b $EC, $B, 8, $18, 0
(1)   20/    F398 : 04                  byte_F288:	dc.b 4
(1)   21/    F399 : EC0B 0000 C8        		dc.b $EC, $B, 0, 0, $C8
(1)   22/    F39E : F40E 000C E0        		dc.b $F4, $E, 0, $C, $E0
(1)   23/    F3A3 : F40E 080C 00        		dc.b $F4, $E, 8, $C, 0
(1)   24/    F3A8 : EC0B 0800 20        		dc.b $EC, $B, 8, 0, $20
(1)   25/    F3AD : 04                  byte_F29D:	dc.b 4
(1)   26/    F3AE : EC0B 0018 C8        		dc.b $EC, $B, 0, $18, $C8
(1)   27/    F3B3 : F40E 0024 E0        		dc.b $F4, $E, 0, $24, $E0
(1)   28/    F3B8 : F40E 0824 00        		dc.b $F4, $E, 8, $24, 0
(1)   29/    F3BD : EC0B 0818 20        		dc.b $EC, $B, 8, $18, $20
(1)   30/    F3C2 : 06                  byte_F2B2:	dc.b 6
(1)   31/    F3C3 : EC0B 0000 C8        		dc.b $EC, $B, 0, 0, $C8
(1)   32/    F3C8 : F40E 000C E0        		dc.b $F4, $E, 0, $C, $E0
(1)   33/    F3CD : F40E 080C 00        		dc.b $F4, $E, 8, $C, 0
(1)   34/    F3D2 : EC0B 0800 20        		dc.b $EC, $B, 8, 0, $20
(1)   35/    F3D7 : E80E 0090 E0        		dc.b $E8, $E, 0, $90, $E0
(1)   36/    F3DC : E80E 0890 00        		dc.b $E8, $E, 8, $90, 0
(1)   37/    F3E1 : 06                  byte_F2D1:	dc.b 6
(1)   38/    F3E2 : EC0B 0018 C8        		dc.b $EC, $B, 0, $18, $C8
(1)   39/    F3E7 : F40E 0024 E0        		dc.b $F4, $E, 0, $24, $E0
(1)   40/    F3EC : F40E 0824 00        		dc.b $F4, $E, 8, $24, 0
(1)   41/    F3F1 : EC0B 0818 20        		dc.b $EC, $B, 8, $18, $20
(1)   42/    F3F6 : E80E 0890 E0        		dc.b $E8, $E, 8, $90, $E0
(1)   43/    F3FB : E80E 0090 00        		dc.b $E8, $E, 0, $90, 0
(1)   44/    F400 : 02                  byte_F2F0:	dc.b 2
(1)   45/    F401 : E00F 0030 E0        		dc.b $E0, $F, 0, $30, $E0
(1)   46/    F406 : E00F 0830 00        		dc.b $E0, $F, 8, $30, 0
(1)   47/    F40B : 02                  byte_F2FB:	dc.b 2
(1)   48/    F40C : E00F 0830 E0        		dc.b $E0, $F, 8, $30, $E0
(1)   49/    F411 : E00F 0030 00        		dc.b $E0, $F, 0, $30, 0
(1)   50/    F416 : 0A                  byte_F306:	dc.b $A
(1)   51/    F417 : 900F 0040 E0        		dc.b $90, $F, 0, $40, $E0
(1)   52/    F41C : 900F 0840 00        		dc.b $90, $F, 8, $40, 0
(1)   53/    F421 : B00F 0040 E0        		dc.b $B0, $F, 0, $40, $E0
(1)   54/    F426 : B00F 0840 00        		dc.b $B0, $F, 8, $40, 0
(1)   55/    F42B : D00F 0040 E0        		dc.b $D0, $F, 0, $40, $E0
(1)   56/    F430 : D00F 0840 00        		dc.b $D0, $F, 8, $40, 0
(1)   57/    F435 : F00F 0040 E0        		dc.b $F0, $F, 0, $40, $E0
(1)   58/    F43A : F00F 0840 00        		dc.b $F0, $F, 8, $40, 0
(1)   59/    F43F : 100F 0040 E0        		dc.b $10, $F, 0, $40, $E0
(1)   60/    F444 : 100F 0840 00        		dc.b $10, $F, 8, $40, 0
(1)   61/    F449 : 0A                  byte_F339:	dc.b $A
(1)   62/    F44A : 900F 0050 E0        		dc.b $90, $F, 0, $50, $E0
(1)   63/    F44F : 900F 0850 00        		dc.b $90, $F, 8, $50, 0
(1)   64/    F454 : B00F 0050 E0        		dc.b $B0, $F, 0, $50, $E0
(1)   65/    F459 : B00F 0850 00        		dc.b $B0, $F, 8, $50, 0
(1)   66/    F45E : D00F 0050 E0        		dc.b $D0, $F, 0, $50, $E0
(1)   67/    F463 : D00F 0850 00        		dc.b $D0, $F, 8, $50, 0
(1)   68/    F468 : F00F 0050 E0        		dc.b $F0, $F, 0, $50, $E0
(1)   69/    F46D : F00F 0850 00        		dc.b $F0, $F, 8, $50, 0
(1)   70/    F472 : 100F 0050 E0        		dc.b $10, $F, 0, $50, $E0
(1)   71/    F477 : 100F 0850 00        		dc.b $10, $F, 8, $50, 0
(1)   72/    F47C : 0A                  byte_F36C:	dc.b $A
(1)   73/    F47D : 900F 0060 E0        		dc.b $90, $F, 0, $60, $E0
(1)   74/    F482 : 900F 0860 00        		dc.b $90, $F, 8, $60, 0
(1)   75/    F487 : B00F 0060 E0        		dc.b $B0, $F, 0, $60, $E0
(1)   76/    F48C : B00F 0860 00        		dc.b $B0, $F, 8, $60, 0
(1)   77/    F491 : D00F 0060 E0        		dc.b $D0, $F, 0, $60, $E0
(1)   78/    F496 : D00F 0860 00        		dc.b $D0, $F, 8, $60, 0
(1)   79/    F49B : F00F 0060 E0        		dc.b $F0, $F, 0, $60, $E0
(1)   80/    F4A0 : F00F 0860 00        		dc.b $F0, $F, 8, $60, 0
(1)   81/    F4A5 : 100F 0060 E0        		dc.b $10, $F, 0, $60, $E0
(1)   82/    F4AA : 100F 0860 00        		dc.b $10, $F, 8, $60, 0
(1)   83/    F4AF : 06                  byte_F39F:	dc.b 6
(1)   84/    F4B0 : 900F 0040 E0        		dc.b $90, $F, 0, $40, $E0
(1)   85/    F4B5 : 900F 0840 00        		dc.b $90, $F, 8, $40, 0
(1)   86/    F4BA : B00F 0040 E0        		dc.b $B0, $F, 0, $40, $E0
(1)   87/    F4BF : B00F 0840 00        		dc.b $B0, $F, 8, $40, 0
(1)   88/    F4C4 : D00F 0040 E0        		dc.b $D0, $F, 0, $40, $E0
(1)   89/    F4C9 : D00F 0840 00        		dc.b $D0, $F, 8, $40, 0
(1)   90/    F4CE : 06                  byte_F3BE:	dc.b 6
(1)   91/    F4CF : 900F 0050 E0        		dc.b $90, $F, 0, $50, $E0
(1)   92/    F4D4 : 900F 0850 00        		dc.b $90, $F, 8, $50, 0
(1)   93/    F4D9 : B00F 0050 E0        		dc.b $B0, $F, 0, $50, $E0
(1)   94/    F4DE : B00F 0850 00        		dc.b $B0, $F, 8, $50, 0
(1)   95/    F4E3 : D00F 0050 E0        		dc.b $D0, $F, 0, $50, $E0
(1)   96/    F4E8 : D00F 0850 00        		dc.b $D0, $F, 8, $50, 0
(1)   97/    F4ED : 06                  byte_F3DD:	dc.b 6
(1)   98/    F4EE : 900F 0060 E0        		dc.b $90, $F, 0, $60, $E0
(1)   99/    F4F3 : 900F 0860 00        		dc.b $90, $F, 8, $60, 0
(1)  100/    F4F8 : B00F 0060 E0        		dc.b $B0, $F, 0, $60, $E0
(1)  101/    F4FD : B00F 0860 00        		dc.b $B0, $F, 8, $60, 0
(1)  102/    F502 : D00F 0060 E0        		dc.b $D0, $F, 0, $60, $E0
(1)  103/    F507 : D00F 0860 00        		dc.b $D0, $F, 8, $60, 0
(1)  104/    F50C : 10                  byte_F3FC:	dc.b $10
(1)  105/    F50D : 900F 0040 E0        		dc.b $90, $F, 0, $40, $E0
(1)  106/    F512 : 900F 0840 00        		dc.b $90, $F, 8, $40, 0
(1)  107/    F517 : B00F 0040 E0        		dc.b $B0, $F, 0, $40, $E0
(1)  108/    F51C : B00F 0840 00        		dc.b $B0, $F, 8, $40, 0
(1)  109/    F521 : D00F 0040 E0        		dc.b $D0, $F, 0, $40, $E0
(1)  110/    F526 : D00F 0840 00        		dc.b $D0, $F, 8, $40, 0
(1)  111/    F52B : F00F 0040 E0        		dc.b $F0, $F, 0, $40, $E0
(1)  112/    F530 : F00F 0840 00        		dc.b $F0, $F, 8, $40, 0
(1)  113/    F535 : 100F 0040 E0        		dc.b $10, $F, 0, $40, $E0
(1)  114/    F53A : 100F 0840 00        		dc.b $10, $F, 8, $40, 0
(1)  115/    F53F : 300F 0040 E0        		dc.b $30, $F, 0, $40, $E0
(1)  116/    F544 : 300F 0840 00        		dc.b $30, $F, 8, $40, 0
(1)  117/    F549 : 500F 0040 E0        		dc.b $50, $F, 0, $40, $E0
(1)  118/    F54E : 500F 0840 00        		dc.b $50, $F, 8, $40, 0
(1)  119/    F553 : 700F 0040 E0        		dc.b $70, $F, 0, $40, $E0
(1)  120/    F558 : 700F 0840 00        		dc.b $70, $F, 8, $40, 0
(1)  121/    F55D : 10                  byte_F44D:	dc.b $10
(1)  122/    F55E : 900F 0050 E0        		dc.b $90, $F, 0, $50, $E0
(1)  123/    F563 : 900F 0850 00        		dc.b $90, $F, 8, $50, 0
(1)  124/    F568 : B00F 0050 E0        		dc.b $B0, $F, 0, $50, $E0
(1)  125/    F56D : B00F 0850 00        		dc.b $B0, $F, 8, $50, 0
(1)  126/    F572 : D00F 0050 E0        		dc.b $D0, $F, 0, $50, $E0
(1)  127/    F577 : D00F 0850 00        		dc.b $D0, $F, 8, $50, 0
(1)  128/    F57C : F00F 0050 E0        		dc.b $F0, $F, 0, $50, $E0
(1)  129/    F581 : F00F 0850 00        		dc.b $F0, $F, 8, $50, 0
(1)  130/    F586 : 100F 0050 E0        		dc.b $10, $F, 0, $50, $E0
(1)  131/    F58B : 100F 0850 00        		dc.b $10, $F, 8, $50, 0
(1)  132/    F590 : 300F 0050 E0        		dc.b $30, $F, 0, $50, $E0
(1)  133/    F595 : 300F 0850 00        		dc.b $30, $F, 8, $50, 0
(1)  134/    F59A : 500F 0050 E0        		dc.b $50, $F, 0, $50, $E0
(1)  135/    F59F : 500F 0850 00        		dc.b $50, $F, 8, $50, 0
(1)  136/    F5A4 : 700F 0050 E0        		dc.b $70, $F, 0, $50, $E0
(1)  137/    F5A9 : 700F 0850 00        		dc.b $70, $F, 8, $50, 0
(1)  138/    F5AE : 10                  byte_F49E:	dc.b $10
(1)  139/    F5AF : 900F 0060 E0        		dc.b $90, $F, 0, $60, $E0
(1)  140/    F5B4 : 900F 0860 00        		dc.b $90, $F, 8, $60, 0
(1)  141/    F5B9 : B00F 0060 E0        		dc.b $B0, $F, 0, $60, $E0
(1)  142/    F5BE : B00F 0860 00        		dc.b $B0, $F, 8, $60, 0
(1)  143/    F5C3 : D00F 0060 E0        		dc.b $D0, $F, 0, $60, $E0
(1)  144/    F5C8 : D00F 0860 00        		dc.b $D0, $F, 8, $60, 0
(1)  145/    F5CD : F00F 0060 E0        		dc.b $F0, $F, 0, $60, $E0
(1)  146/    F5D2 : F00F 0860 00        		dc.b $F0, $F, 8, $60, 0
(1)  147/    F5D7 : 100F 0060 E0        		dc.b $10, $F, 0, $60, $E0
(1)  148/    F5DC : 100F 0860 00        		dc.b $10, $F, 8, $60, 0
(1)  149/    F5E1 : 300F 0060 E0        		dc.b $30, $F, 0, $60, $E0
(1)  150/    F5E6 : 300F 0860 00        		dc.b $30, $F, 8, $60, 0
(1)  151/    F5EB : 500F 0060 E0        		dc.b $50, $F, 0, $60, $E0
(1)  152/    F5F0 : 500F 0860 00        		dc.b $50, $F, 8, $60, 0
(1)  153/    F5F5 : 700F 0060 E0        		dc.b $70, $F, 0, $60, $E0
(1)  154/    F5FA : 700F 0860 00        		dc.b $70, $F, 8, $60, 0
(1)  155/    F5FF : 06                  byte_F4EF:	dc.b 6
(1)  156/    F600 : E00B 0000 C8        		dc.b $E0, $B, 0, 0, $C8
(1)  157/    F605 : E80E 000C E0        		dc.b $E8, $E, 0, $C, $E0
(1)  158/    F60A : E80E 080C 00        		dc.b $E8, $E, 8, $C, 0
(1)  159/    F60F : E00B 0800 20        		dc.b $E0, $B, 8, 0, $20
(1)  160/    F614 : D80E 0090 E0        		dc.b $D8, $E, 0, $90, $E0
(1)  161/    F619 : D80E 0890 00        		dc.b $D8, $E, 8, $90, 0
(1)  162/    F61E : 06                  byte_F50E:	dc.b 6
(1)  163/    F61F : E00B 0018 C8        		dc.b $E0, $B, 0, $18, $C8
(1)  164/    F624 : E80E 0024 E0        		dc.b $E8, $E, 0, $24, $E0
(1)  165/    F629 : E80E 0824 00        		dc.b $E8, $E, 8, $24, 0
(1)  166/    F62E : E00B 0818 20        		dc.b $E0, $B, 8, $18, $20
(1)  167/    F633 : D80E 0890 E0        		dc.b $D8, $E, 8, $90, $E0
(1)  168/    F638 : D80E 0090 00        		dc.b $D8, $E, 0, $90, 0
(1)  169/    F63D : 00                  byte_F52D:	dc.b 0
(1)  170/    F63E : (MACRO)             		align 2
(1)  170/    F63E :  (MACRO-2)                  cnop 0,2
(1)  170/    F63E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   18840/    F63E :                     
   18841/    F63E :                     ; ---------------------------------------------------------------------------
   18842/    F63E :                     ; Sprite mappings - advancing wall of lava (MZ)
   18843/    F63E :                     ; ---------------------------------------------------------------------------
   18844/    F63E :                     Map_obj4E:
   18845/    F63E :                     		include	"_maps/obj4E.asm"
(1)    1/    F63E :                     ; ---------------------------------------------------------------------------
(1)    2/    F63E :                     ; Sprite mappings - advancing wall of lava (MZ)
(1)    3/    F63E :                     ; ---------------------------------------------------------------------------
(1)    4/    F63E : 000A                		dc.w byte_F538-Map_obj4E
(1)    5/    F640 : 0038                		dc.w byte_F566-Map_obj4E
(1)    6/    F642 : 0066                		dc.w byte_F594-Map_obj4E
(1)    7/    F644 : 0094                		dc.w byte_F5C2-Map_obj4E
(1)    8/    F646 : 00C2                		dc.w byte_F5F0-Map_obj4E
(1)    9/    F648 : 09                  byte_F538:	dc.b 9
(1)   10/    F649 : E00F 0060 20        		dc.b $E0, $F, 0, $60, $20
(1)   11/    F64E : 000F 0070 3C        		dc.b 0,	$F, 0, $70, $3C
(1)   12/    F653 : 000F FF2A 20        		dc.b 0,	$F, $FF, $2A, $20
(1)   13/    F658 : E00F FF2A 00        		dc.b $E0, $F, $FF, $2A,	0
(1)   14/    F65D : 000F FF2A 00        		dc.b 0,	$F, $FF, $2A, 0
(1)   15/    F662 : E00F FF2A E0        		dc.b $E0, $F, $FF, $2A,	$E0
(1)   16/    F667 : 000F FF2A E0        		dc.b 0,	$F, $FF, $2A, $E0
(1)   17/    F66C : E00F FF2A C0        		dc.b $E0, $F, $FF, $2A,	$C0
(1)   18/    F671 : 000F FF2A C0        		dc.b 0,	$F, $FF, $2A, $C0
(1)   19/    F676 : 09                  byte_F566:	dc.b 9
(1)   20/    F677 : E00F 0070 20        		dc.b $E0, $F, 0, $70, $20
(1)   21/    F67C : 000F 0080 3C        		dc.b 0,	$F, 0, $80, $3C
(1)   22/    F681 : 000F FF2A 20        		dc.b 0,	$F, $FF, $2A, $20
(1)   23/    F686 : E00F FF2A 00        		dc.b $E0, $F, $FF, $2A,	0
(1)   24/    F68B : 000F FF2A 00        		dc.b 0,	$F, $FF, $2A, 0
(1)   25/    F690 : E00F FF2A E0        		dc.b $E0, $F, $FF, $2A,	$E0
(1)   26/    F695 : 000F FF2A E0        		dc.b 0,	$F, $FF, $2A, $E0
(1)   27/    F69A : E00F FF2A C0        		dc.b $E0, $F, $FF, $2A,	$C0
(1)   28/    F69F : 000F FF2A C0        		dc.b 0,	$F, $FF, $2A, $C0
(1)   29/    F6A4 : 09                  byte_F594:	dc.b 9
(1)   30/    F6A5 : E00F 0080 20        		dc.b $E0, $F, 0, $80, $20
(1)   31/    F6AA : 000F 0070 3C        		dc.b 0,	$F, 0, $70, $3C
(1)   32/    F6AF : 000F FF2A 20        		dc.b 0,	$F, $FF, $2A, $20
(1)   33/    F6B4 : E00F FF2A 00        		dc.b $E0, $F, $FF, $2A,	0
(1)   34/    F6B9 : 000F FF2A 00        		dc.b 0,	$F, $FF, $2A, 0
(1)   35/    F6BE : E00F FF2A E0        		dc.b $E0, $F, $FF, $2A,	$E0
(1)   36/    F6C3 : 000F FF2A E0        		dc.b 0,	$F, $FF, $2A, $E0
(1)   37/    F6C8 : E00F FF2A C0        		dc.b $E0, $F, $FF, $2A,	$C0
(1)   38/    F6CD : 000F FF2A C0        		dc.b 0,	$F, $FF, $2A, $C0
(1)   39/    F6D2 : 09                  byte_F5C2:	dc.b 9
(1)   40/    F6D3 : E00F 0070 20        		dc.b $E0, $F, 0, $70, $20
(1)   41/    F6D8 : 000F 0060 3C        		dc.b 0,	$F, 0, $60, $3C
(1)   42/    F6DD : 000F FF2A 20        		dc.b 0,	$F, $FF, $2A, $20
(1)   43/    F6E2 : E00F FF2A 00        		dc.b $E0, $F, $FF, $2A,	0
(1)   44/    F6E7 : 000F FF2A 00        		dc.b 0,	$F, $FF, $2A, 0
(1)   45/    F6EC : E00F FF2A E0        		dc.b $E0, $F, $FF, $2A,	$E0
(1)   46/    F6F1 : 000F FF2A E0        		dc.b 0,	$F, $FF, $2A, $E0
(1)   47/    F6F6 : E00F FF2A C0        		dc.b $E0, $F, $FF, $2A,	$C0
(1)   48/    F6FB : 000F FF2A C0        		dc.b 0,	$F, $FF, $2A, $C0
(1)   49/    F700 : 08                  byte_F5F0:	dc.b 8
(1)   50/    F701 : E00F FF2A 20        		dc.b $E0, $F, $FF, $2A,	$20
(1)   51/    F706 : 000F FF2A 20        		dc.b 0,	$F, $FF, $2A, $20
(1)   52/    F70B : E00F FF2A 00        		dc.b $E0, $F, $FF, $2A,	0
(1)   53/    F710 : 000F FF2A 00        		dc.b 0,	$F, $FF, $2A, 0
(1)   54/    F715 : E00F FF2A E0        		dc.b $E0, $F, $FF, $2A,	$E0
(1)   55/    F71A : 000F FF2A E0        		dc.b 0,	$F, $FF, $2A, $E0
(1)   56/    F71F : E00F FF2A C0        		dc.b $E0, $F, $FF, $2A,	$C0
(1)   57/    F724 : 000F FF2A C0        		dc.b 0,	$F, $FF, $2A, $C0
(1)   58/    F729 : (MACRO)             		align 2
(1)   58/    F729 :  (MACRO-2)                  cnop 0,2
(1)   58/    F729 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   58/    F729 : =$22                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   58/    F72A :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   18846/    F72A :                     
   18847/    F72A :                     ; ===========================================================================
   18848/    F72A :                     ; ---------------------------------------------------------------------------
   18849/    F72A :                     ; Object 40 - Moto Bug enemy (GHZ)
   18850/    F72A :                     ; ---------------------------------------------------------------------------
   18851/    F72A :                     
   18852/    F72A :                     Obj40:					; XREF: Obj_Index
   18853/    F72A : 7000                		moveq	#0,d0
   18854/    F72C : 1028 0024           		move.b	$24(a0),d0
   18855/    F730 : 323B 0006           		move.w	Obj40_Index(pc,d0.w),d1
   18856/    F734 : 4EFB 1002           		jmp	Obj40_Index(pc,d1.w)
   18857/    F738 :                     ; ===========================================================================
   18858/    F738 : 0008                Obj40_Index:	dc.w Obj40_Main-Obj40_Index
   18859/    F73A : 006C                		dc.w Obj40_Action-Obj40_Index
   18860/    F73C : 0148                		dc.w Obj40_Animate-Obj40_Index
   18861/    F73E : 0156                		dc.w Obj40_Delete-Obj40_Index
   18862/    F740 :                     ; ===========================================================================
   18863/    F740 :                     
   18864/    F740 :                     Obj40_Main:				; XREF: Obj40_Index
   18865/    F740 : 217C 0000 F8B0 0004 		move.l	#Map_obj40,4(a0)
   18866/    F748 : 317C 04F0 0002      		move.w	#$4F0,2(a0)
   18867/    F74E : 117C 0004 0001      		move.b	#4,1(a0)
   18868/    F754 : 117C 0004 0018      		move.b	#4,$18(a0)
   18869/    F75A : 117C 0014 0019      		move.b	#$14,$19(a0)
   18870/    F760 : 4A28 001C           		tst.b	$1C(a0)		; is object a smoke trail?
   18871/    F764 : 6636                		bne.s	Obj40_SetSmoke	; if yes, branch
   18872/    F766 : 117C 000E 0016      		move.b	#$E,$16(a0)
   18873/    F76C : 117C 0008 0017      		move.b	#8,$17(a0)
   18874/    F772 : 117C 000C 0020      		move.b	#$C,$20(a0)
   18875/    F778 : 6100 DF42           		bsr.w	ObjectFall
   18876/    F77C : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   18877/    F782 : 4A41                		tst.w	d1
   18878/    F784 : 6A14                		bpl.s	locret_F68A
   18879/    F786 : D368 000C           		add.w	d1,$C(a0)	; match	object"s position with the floor
   18880/    F78A : 317C 0000 0012      		move.w	#0,$12(a0)
   18881/    F790 : 5428 0024           		addq.b	#2,$24(a0)
   18882/    F794 : 0868 0000 0022      		bchg	#0,$22(a0)
   18883/    F79A :                     
   18884/    F79A :                     locret_F68A:
   18885/    F79A : 4E75                		rts	
   18886/    F79C :                     ; ===========================================================================
   18887/    F79C :                     
   18888/    F79C :                     Obj40_SetSmoke:				; XREF: Obj40_Main
   18889/    F79C : 5828 0024           		addq.b	#4,$24(a0)
   18890/    F7A0 : 6000 00DE           		bra.w	Obj40_Animate
   18891/    F7A4 :                     ; ===========================================================================
   18892/    F7A4 :                     
   18893/    F7A4 :                     Obj40_Action:				; XREF: Obj40_Index
   18894/    F7A4 : 7000                		moveq	#0,d0
   18895/    F7A6 : 1028 0025           		move.b	$25(a0),d0
   18896/    F7AA : 323B 0048           		move.w	Obj40_Index2(pc,d0.w),d1
   18897/    F7AE : 4EBB 1044           		jsr	Obj40_Index2(pc,d1.w)
   18898/    F7B2 : 43F9 0000 F892      		lea	(Ani_obj40).l,a1
   18899/    F7B8 : 6100 AF7A           		bsr.w	AnimateSprite
   18900/    F7BC :                     
   18901/    F7BC :                     ; ---------------------------------------------------------------------------
   18902/    F7BC :                     ; Routine to mark an enemy/monitor/ring	as destroyed
   18903/    F7BC :                     ; ---------------------------------------------------------------------------
   18904/    F7BC :                     
   18905/    F7BC :                     MarkObjGone:
   18906/    F7BC : 3028 0008           		move.w	8(a0),d0
   18907/    F7C0 : 0240 FF80           		andi.w	#$FF80,d0
   18908/    F7C4 : 3238 F700           		move.w	($FFFFF700).w,d1
   18909/    F7C8 : 0441 0080           		subi.w	#$80,d1
   18910/    F7CC : 0241 FF80           		andi.w	#$FF80,d1
   18911/    F7D0 : 9041                		sub.w	d1,d0
   18912/    F7D2 : 0C40 0280           		cmpi.w	#$280,d0
   18913/    F7D6 : 6200 0006           		bhi.w	Mark_ChkGone
   18914/    F7DA : 6000 DF32           		bra.w	DisplaySprite
   18915/    F7DE :                     ; ===========================================================================
   18916/    F7DE :                     
   18917/    F7DE :                     Mark_ChkGone:
   18918/    F7DE : 45F8 FC00           		lea	($FFFFFC00).w,a2
   18919/    F7E2 : 7000                		moveq	#0,d0
   18920/    F7E4 : 1028 0023           		move.b	$23(a0),d0
   18921/    F7E8 : 6706                		beq.s	Mark_Delete
   18922/    F7EA : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   18923/    F7F0 :                     
   18924/    F7F0 :                     Mark_Delete:
   18925/    F7F0 : 6000 DF58           		bra.w	DeleteObject
   18926/    F7F4 :                     
   18927/    F7F4 :                     ; ===========================================================================
   18928/    F7F4 : 0004                Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
   18929/    F7F6 : 0028                		dc.w Obj40_FixToFloor-Obj40_Index2
   18930/    F7F8 :                     ; ===========================================================================
   18931/    F7F8 :                     
   18932/    F7F8 :                     Obj40_Move:				; XREF: Obj40_Index2
   18933/    F7F8 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from pause	time
   18934/    F7FC : 6A1C                		bpl.s	locret_F70A	; if time remains, branch
   18935/    F7FE : 5428 0025           		addq.b	#2,$25(a0)
   18936/    F802 : 317C FF00 0010      		move.w	#-$100,$10(a0)	; move object to the left
   18937/    F808 : 117C 0001 001C      		move.b	#1,$1C(a0)
   18938/    F80E : 0868 0000 0022      		bchg	#0,$22(a0)
   18939/    F814 : 6604                		bne.s	locret_F70A
   18940/    F816 : 4468 0010           		neg.w	$10(a0)		; change direction
   18941/    F81A :                     
   18942/    F81A :                     locret_F70A:
   18943/    F81A : 4E75                		rts	
   18944/    F81C :                     ; ===========================================================================
   18945/    F81C :                     
   18946/    F81C :                     Obj40_FixToFloor:			; XREF: Obj40_Index2
   18947/    F81C : 6100 DECA           		bsr.w	SpeedToPos
   18948/    F820 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   18949/    F826 : 0C41 FFF8           		cmpi.w	#-8,d1
   18950/    F82A : 6D3C                		blt.s	Obj40_Pause
   18951/    F82C : 0C41 000C           		cmpi.w	#$C,d1
   18952/    F830 : 6C36                		bge.s	Obj40_Pause
   18953/    F832 : D368 000C           		add.w	d1,$C(a0)	; match	object"s position with the floor
   18954/    F836 : 5328 0033           		subq.b	#1,$33(a0)
   18955/    F83A : 6A2A                		bpl.s	locret_F756
   18956/    F83C : 117C 000F 0033      		move.b	#$F,$33(a0)
   18957/    F842 : 6100 E352           		bsr.w	SingleObjLoad
   18958/    F846 : 661E                		bne.s	locret_F756
   18959/    F848 : (MACRO)             		_move.b	#$40,0(a1)	; load exhaust smoke object
   18959/    F848 :  (MACRO-2)                          insn2op move.b, #$40,0(a1)
   18959/    F848 : 137C 0040 0001                              !move.b   #$40,1+0(a1)
   18959/    F84D :                                             !org    *-1
   18959/    F84D : 00                                          !dc.b   0
   18960/    F84E : 3368 0008 0008      		move.w	8(a0),8(a1)
   18961/    F854 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   18962/    F85A : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   18963/    F860 : 137C 0002 001C      		move.b	#2,$1C(a1)
   18964/    F866 :                     
   18965/    F866 :                     locret_F756:
   18966/    F866 : 4E75                		rts	
   18967/    F868 :                     ; ===========================================================================
   18968/    F868 :                     
   18969/    F868 :                     Obj40_Pause:				; XREF: Obj40_FixToFloor
   18970/    F868 : 5528 0025           		subq.b	#2,$25(a0)
   18971/    F86C : 317C 003B 0030      		move.w	#59,$30(a0)	; set pause time to 1 second
   18972/    F872 : 317C 0000 0010      		move.w	#0,$10(a0)	; stop the object moving
   18973/    F878 : 117C 0000 001C      		move.b	#0,$1C(a0)
   18974/    F87E : 4E75                		rts	
   18975/    F880 :                     ; ===========================================================================
   18976/    F880 :                     
   18977/    F880 :                     Obj40_Animate:				; XREF: Obj40_Index
   18978/    F880 : 43F9 0000 F892      		lea	(Ani_obj40).l,a1
   18979/    F886 : 6100 AEAC           		bsr.w	AnimateSprite
   18980/    F88A : 6000 DE82           		bra.w	DisplaySprite
   18981/    F88E :                     ; ===========================================================================
   18982/    F88E :                     
   18983/    F88E :                     Obj40_Delete:				; XREF: Obj40_Index
   18984/    F88E : 6000 DEBA           		bra.w	DeleteObject
   18985/    F892 :                     ; ===========================================================================
   18986/    F892 :                     Ani_obj40:
   18987/    F892 :                     		include	"_anim/obj40.asm"
(1)    1/    F892 :                     ; ---------------------------------------------------------------------------
(1)    2/    F892 :                     ; Animation script - Motobug enemy
(1)    3/    F892 :                     ; ---------------------------------------------------------------------------
(1)    4/    F892 : 0006                		dc.w byte_F788-Ani_obj40
(1)    5/    F894 : 000A                		dc.w byte_F78C-Ani_obj40
(1)    6/    F896 : 0010                		dc.w byte_F792-Ani_obj40
(1)    7/    F898 : 0F02 FF00           byte_F788:	dc.b $F, 2, $FF, 0
(1)    8/    F89C : 0700 0100 02FF      byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
(1)    9/    F8A2 : 0103 0603 0604 0604 byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
                    0604 0605 FC00      
(1)   10/    F8B0 : (MACRO)             		align 2
(1)   10/    F8B0 :  (MACRO-2)                  cnop 0,2
(1)   10/    F8B0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   18988/    F8B0 :                     
   18989/    F8B0 :                     ; ---------------------------------------------------------------------------
   18990/    F8B0 :                     ; Sprite mappings - Moto Bug enemy (GHZ)
   18991/    F8B0 :                     ; ---------------------------------------------------------------------------
   18992/    F8B0 :                     Map_obj40:
   18993/    F8B0 :                     		include	"_maps/obj40.asm"
(1)    1/    F8B0 :                     ; ---------------------------------------------------------------------------
(1)    2/    F8B0 :                     ; Sprite mappings - Moto Bug enemy (GHZ)
(1)    3/    F8B0 :                     ; ---------------------------------------------------------------------------
(1)    4/    F8B0 : 000E 0023           		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
(1)    5/    F8B4 : 0038 0052           		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
(1)    6/    F8B8 : 0058 005E           		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
(1)    7/    F8BC : 0064                		dc.w byte_F804-Map_obj40
(1)    8/    F8BE : 04                  byte_F7AE:	dc.b 4
(1)    9/    F8BF : F00D 0000 EC        		dc.b $F0, $D, 0, 0, $EC
(1)   10/    F8C4 : 000C 0008 EC        		dc.b 0,	$C, 0, 8, $EC
(1)   11/    F8C9 : F801 000C 0C        		dc.b $F8, 1, 0,	$C, $C
(1)   12/    F8CE : 0808 000E F4        		dc.b 8,	8, 0, $E, $F4
(1)   13/    F8D3 : 04                  byte_F7C3:	dc.b 4
(1)   14/    F8D4 : F10D 0000 EC        		dc.b $F1, $D, 0, 0, $EC
(1)   15/    F8D9 : 010C 0008 EC        		dc.b 1,	$C, 0, 8, $EC
(1)   16/    F8DE : F901 000C 0C        		dc.b $F9, 1, 0,	$C, $C
(1)   17/    F8E3 : 0908 0011 F4        		dc.b 9,	8, 0, $11, $F4
(1)   18/    F8E8 : 05                  byte_F7D8:	dc.b 5
(1)   19/    F8E9 : F00D 0000 EC        		dc.b $F0, $D, 0, 0, $EC
(1)   20/    F8EE : 000C 0014 EC        		dc.b 0,	$C, 0, $14, $EC
(1)   21/    F8F3 : F801 000C 0C        		dc.b $F8, 1, 0,	$C, $C
(1)   22/    F8F8 : 0804 0018 EC        		dc.b 8,	4, 0, $18, $EC
(1)   23/    F8FD : 0804 0012 FC        		dc.b 8,	4, 0, $12, $FC
(1)   24/    F902 : 01                  byte_F7F2:	dc.b 1
(1)   25/    F903 : FA00 001A 10        		dc.b $FA, 0, 0,	$1A, $10
(1)   26/    F908 : 01                  byte_F7F8:	dc.b 1
(1)   27/    F909 : FA00 001B 10        		dc.b $FA, 0, 0,	$1B, $10
(1)   28/    F90E : 01                  byte_F7FE:	dc.b 1
(1)   29/    F90F : FA00 001C 10        		dc.b $FA, 0, 0,	$1C, $10
(1)   30/    F914 : 00                  byte_F804:	dc.b 0
(1)   31/    F915 : (MACRO)             		align 2
(1)   31/    F915 :  (MACRO-2)                  cnop 0,2
(1)   31/    F915 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   31/    F915 : =$23                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   31/    F916 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   18994/    F916 :                     
   18995/    F916 :                     ; ===========================================================================
   18996/    F916 :                     ; ---------------------------------------------------------------------------
   18997/    F916 :                     ; Object 4F - blank
   18998/    F916 :                     ; ---------------------------------------------------------------------------
   18999/    F916 :                     
   19000/    F916 :                     Obj4F:					; XREF: Obj_Index
   19001/    F916 : 4E75                		rts	
   19002/    F918 :                     
   19003/    F918 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   19004/    F918 :                     
   19005/    F918 :                     
   19006/    F918 :                     Obj50_ChkWall:				; XREF: Obj50_FixToFloor
   19007/    F918 : 3038 FE04           		move.w	($FFFFFE04).w,d0
   19008/    F91C : D047                		add.w	d7,d0
   19009/    F91E : 0240 0003           		andi.w	#3,d0
   19010/    F922 : 6622                		bne.s	loc_F836
   19011/    F924 : 7600                		moveq	#0,d3
   19012/    F926 : 1628 0019           		move.b	$19(a0),d3
   19013/    F92A : 4A68 0010           		tst.w	$10(a0)
   19014/    F92E : 6B0C                		bmi.s	loc_F82C
   19015/    F930 : 6100 5824           		bsr.w	ObjHitWallRight
   19016/    F934 : 4A41                		tst.w	d1
   19017/    F936 : 6A0E                		bpl.s	loc_F836
   19018/    F938 :                     
   19019/    F938 :                     loc_F828:
   19020/    F938 : 7001                		moveq	#1,d0
   19021/    F93A : 4E75                		rts	
   19022/    F93C :                     ; ===========================================================================
   19023/    F93C :                     
   19024/    F93C :                     loc_F82C:
   19025/    F93C : 4643                		not.w	d3
   19026/    F93E : 6100 59A8           		bsr.w	ObjHitWallLeft
   19027/    F942 : 4A41                		tst.w	d1
   19028/    F944 : 6BF2                		bmi.s	loc_F828
   19029/    F946 :                     
   19030/    F946 :                     loc_F836:
   19031/    F946 : 7000                		moveq	#0,d0
   19032/    F948 : 4E75                		rts	
   19033/    F94A :                     ; End of function Obj50_ChkWall
   19034/    F94A :                     
   19035/    F94A :                     ; ===========================================================================
   19036/    F94A :                     ; ---------------------------------------------------------------------------
   19037/    F94A :                     ; Object 50 - Yadrin enemy (SYZ)
   19038/    F94A :                     ; ---------------------------------------------------------------------------
   19039/    F94A :                     
   19040/    F94A :                     Obj50:					; XREF: Obj_Index
   19041/    F94A : 7000                		moveq	#0,d0
   19042/    F94C : 1028 0024           		move.b	$24(a0),d0
   19043/    F950 : 323B 0006           		move.w	Obj50_Index(pc,d0.w),d1
   19044/    F954 : 4EFB 1002           		jmp	Obj50_Index(pc,d1.w)
   19045/    F958 :                     ; ===========================================================================
   19046/    F958 : 0004                Obj50_Index:	dc.w Obj50_Main-Obj50_Index
   19047/    F95A : 0058                		dc.w Obj50_Action-Obj50_Index
   19048/    F95C :                     ; ===========================================================================
   19049/    F95C :                     
   19050/    F95C :                     Obj50_Main:				; XREF: Obj50_Index
   19051/    F95C : 217C 0000 FA3E 0004 		move.l	#Map_obj50,4(a0)
   19052/    F964 : 317C 247B 0002      		move.w	#$247B,2(a0)
   19053/    F96A : 117C 0004 0001      		move.b	#4,1(a0)
   19054/    F970 : 117C 0004 0018      		move.b	#4,$18(a0)
   19055/    F976 : 117C 0014 0019      		move.b	#$14,$19(a0)
   19056/    F97C : 117C 0011 0016      		move.b	#$11,$16(a0)
   19057/    F982 : 117C 0008 0017      		move.b	#8,$17(a0)
   19058/    F988 : 117C 00CC 0020      		move.b	#$CC,$20(a0)
   19059/    F98E : 6100 DD2C           		bsr.w	ObjectFall
   19060/    F992 : 6100 5700           		bsr.w	ObjHitFloor
   19061/    F996 : 4A41                		tst.w	d1
   19062/    F998 : 6A14                		bpl.s	locret_F89E
   19063/    F99A : D368 000C           		add.w	d1,$C(a0)	; match	object"s position with the floor
   19064/    F99E : 317C 0000 0012      		move.w	#0,$12(a0)
   19065/    F9A4 : 5428 0024           		addq.b	#2,$24(a0)
   19066/    F9A8 : 0868 0000 0022      		bchg	#0,$22(a0)
   19067/    F9AE :                     
   19068/    F9AE :                     locret_F89E:
   19069/    F9AE : 4E75                		rts	
   19070/    F9B0 :                     ; ===========================================================================
   19071/    F9B0 :                     
   19072/    F9B0 :                     Obj50_Action:				; XREF: Obj50_Index
   19073/    F9B0 : 7000                		moveq	#0,d0
   19074/    F9B2 : 1028 0025           		move.b	$25(a0),d0
   19075/    F9B6 : 323B 0014           		move.w	Obj50_Index2(pc,d0.w),d1
   19076/    F9BA : 4EBB 1010           		jsr	Obj50_Index2(pc,d1.w)
   19077/    F9BE : 43F9 0000 FA2C      		lea	(Ani_obj50).l,a1
   19078/    F9C4 : 6100 AD6E           		bsr.w	AnimateSprite
   19079/    F9C8 : 6000 FDF2           		bra.w	MarkObjGone
   19080/    F9CC :                     ; ===========================================================================
   19081/    F9CC : 0004                Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
   19082/    F9CE : 0028                		dc.w Obj50_FixToFloor-Obj50_Index2
   19083/    F9D0 :                     ; ===========================================================================
   19084/    F9D0 :                     
   19085/    F9D0 :                     Obj50_Move:				; XREF: Obj50_Index2
   19086/    F9D0 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from pause	time
   19087/    F9D4 : 6A1C                		bpl.s	locret_F8E2	; if time remains, branch
   19088/    F9D6 : 5428 0025           		addq.b	#2,$25(a0)
   19089/    F9DA : 317C FF00 0010      		move.w	#-$100,$10(a0)	; move object
   19090/    F9E0 : 117C 0001 001C      		move.b	#1,$1C(a0)
   19091/    F9E6 : 0868 0000 0022      		bchg	#0,$22(a0)
   19092/    F9EC : 6604                		bne.s	locret_F8E2
   19093/    F9EE : 4468 0010           		neg.w	$10(a0)		; change direction
   19094/    F9F2 :                     
   19095/    F9F2 :                     locret_F8E2:
   19096/    F9F2 : 4E75                		rts	
   19097/    F9F4 :                     ; ===========================================================================
   19098/    F9F4 :                     
   19099/    F9F4 :                     Obj50_FixToFloor:			; XREF: Obj50_Index2
   19100/    F9F4 : 6100 DCF2           		bsr.w	SpeedToPos
   19101/    F9F8 : 6100 569A           		bsr.w	ObjHitFloor
   19102/    F9FC : 0C41 FFF8           		cmpi.w	#-8,d1
   19103/    FA00 : 6D12                		blt.s	Obj50_Pause
   19104/    FA02 : 0C41 000C           		cmpi.w	#$C,d1
   19105/    FA06 : 6C0C                		bge.s	Obj50_Pause
   19106/    FA08 : D368 000C           		add.w	d1,$C(a0)	; match	object"s position to the floor
   19107/    FA0C : 6100 FF0A           		bsr.w	Obj50_ChkWall
   19108/    FA10 : 6602                		bne.s	Obj50_Pause
   19109/    FA12 : 4E75                		rts	
   19110/    FA14 :                     ; ===========================================================================
   19111/    FA14 :                     
   19112/    FA14 :                     Obj50_Pause:				; XREF: Obj50_FixToFloor
   19113/    FA14 : 5528 0025           		subq.b	#2,$25(a0)
   19114/    FA18 : 317C 003B 0030      		move.w	#59,$30(a0)	; set pause time to 1 second
   19115/    FA1E : 317C 0000 0010      		move.w	#0,$10(a0)
   19116/    FA24 : 117C 0000 001C      		move.b	#0,$1C(a0)
   19117/    FA2A : 4E75                		rts	
   19118/    FA2C :                     ; ===========================================================================
   19119/    FA2C :                     Ani_obj50:
   19120/    FA2C :                     		include	"_anim/obj50.asm"
(1)    1/    FA2C :                     ; ---------------------------------------------------------------------------
(1)    2/    FA2C :                     ; Animation script - Yadrin enemy
(1)    3/    FA2C :                     ; ---------------------------------------------------------------------------
(1)    4/    FA2C : 0004                		dc.w byte_F920-Ani_obj50
(1)    5/    FA2E : 0008                		dc.w byte_F924-Ani_obj50
(1)    6/    FA30 : 0700 FF00           byte_F920:	dc.b 7,	0, $FF,	0
(1)    7/    FA34 : 0700 0301 0400 0302 byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
                    05FF                
(1)    8/    FA3E : (MACRO)             		align 2
(1)    8/    FA3E :  (MACRO-2)                  cnop 0,2
(1)    8/    FA3E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   19121/    FA3E :                     
   19122/    FA3E :                     ; ---------------------------------------------------------------------------
   19123/    FA3E :                     ; Sprite mappings - Yadrin enemy (SYZ)
   19124/    FA3E :                     ; ---------------------------------------------------------------------------
   19125/    FA3E :                     Map_obj50:
   19126/    FA3E :                     		include	"_maps/obj50.asm"
(1)    1/    FA3E :                     ; ---------------------------------------------------------------------------
(1)    2/    FA3E :                     ; Sprite mappings - Yadrin enemy (SYZ)
(1)    3/    FA3E :                     ; ---------------------------------------------------------------------------
(1)    4/    FA3E : 000C 0026           		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
(1)    5/    FA42 : 0040 005A           		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
(1)    6/    FA46 : 0074 008E           		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
(1)    7/    FA4A : 05                  byte_F93A:	dc.b 5
(1)    8/    FA4B : F408 0000 F4        		dc.b $F4, 8, 0,	0, $F4
(1)    9/    FA50 : FC0E 0003 EC        		dc.b $FC, $E, 0, 3, $EC
(1)   10/    FA55 : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   11/    FA5A : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   12/    FA5F : 0409 0031 FC        		dc.b 4,	9, 0, $31, $FC
(1)   13/    FA64 : 05                  byte_F954:	dc.b 5
(1)   14/    FA65 : F408 0014 F4        		dc.b $F4, 8, 0,	$14, $F4
(1)   15/    FA6A : FC0E 0017 EC        		dc.b $FC, $E, 0, $17, $EC
(1)   16/    FA6F : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   17/    FA74 : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   18/    FA79 : 0409 0031 FC        		dc.b 4,	9, 0, $31, $FC
(1)   19/    FA7E : 05                  byte_F96E:	dc.b 5
(1)   20/    FA7F : F409 0023 F4        		dc.b $F4, 9, 0,	$23, $F4
(1)   21/    FA84 : 040D 0029 EC        		dc.b 4,	$D, 0, $29, $EC
(1)   22/    FA89 : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   23/    FA8E : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   24/    FA93 : 0409 0031 FC        		dc.b 4,	9, 0, $31, $FC
(1)   25/    FA98 : 05                  byte_F988:	dc.b 5
(1)   26/    FA99 : F408 0000 F4        		dc.b $F4, 8, 0,	0, $F4
(1)   27/    FA9E : FC0E 0003 EC        		dc.b $FC, $E, 0, 3, $EC
(1)   28/    FAA3 : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   29/    FAA8 : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   30/    FAAD : 0409 0037 FC        		dc.b 4,	9, 0, $37, $FC
(1)   31/    FAB2 : 05                  byte_F9A2:	dc.b 5
(1)   32/    FAB3 : F408 0014 F4        		dc.b $F4, 8, 0,	$14, $F4
(1)   33/    FAB8 : FC0E 0017 EC        		dc.b $FC, $E, 0, $17, $EC
(1)   34/    FABD : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   35/    FAC2 : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   36/    FAC7 : 0409 0037 FC        		dc.b 4,	9, 0, $37, $FC
(1)   37/    FACC : 05                  byte_F9BC:	dc.b 5
(1)   38/    FACD : F409 0023 F4        		dc.b $F4, 9, 0,	$23, $F4
(1)   39/    FAD2 : 040D 0029 EC        		dc.b 4,	$D, 0, $29, $EC
(1)   40/    FAD7 : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   41/    FADC : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   42/    FAE1 : 0409 0037 FC        		dc.b 4,	9, 0, $37, $FC
(1)   43/    FAE6 : (MACRO)             		align 2
(1)   43/    FAE6 :  (MACRO-2)                  cnop 0,2
(1)   43/    FAE6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   19127/    FAE6 :                     
   19128/    FAE6 :                     ; ---------------------------------------------------------------------------
   19129/    FAE6 :                     ; Solid	object subroutine (includes spikes, blocks, rocks etc)
   19130/    FAE6 :                     ;
   19131/    FAE6 :                     ; variables:
   19132/    FAE6 :                     ; d1 = width
   19133/    FAE6 :                     ; d2 = height /	2 (when	jumping)
   19134/    FAE6 :                     ; d3 = height /	2 (when	walking)
   19135/    FAE6 :                     ; d4 = x-axis position
   19136/    FAE6 :                     ; ---------------------------------------------------------------------------
   19137/    FAE6 :                     
   19138/    FAE6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   19139/    FAE6 :                     
   19140/    FAE6 :                     
   19141/    FAE6 :                     SolidObject:
   19142/    FAE6 : 4A28 0025           		tst.b	$25(a0)
   19143/    FAEA : 6700 00EC           		beq.w	loc_FAC8
   19144/    FAEE : 3401                		move.w	d1,d2
   19145/    FAF0 : D442                		add.w	d2,d2
   19146/    FAF2 : 43F8 D000           		lea	($FFFFD000).w,a1
   19147/    FAF6 : 0829 0001 0022      		btst	#1,$22(a1)
   19148/    FAFC : 6610                		bne.s	loc_F9FE
   19149/    FAFE : 3029 0008           		move.w	8(a1),d0
   19150/    FB02 : 9068 0008           		sub.w	8(a0),d0
   19151/    FB06 : D041                		add.w	d1,d0
   19152/    FB08 : 6B04                		bmi.s	loc_F9FE
   19153/    FB0A : B042                		cmp.w	d2,d0
   19154/    FB0C : 6514                		bcs.s	loc_FA12
   19155/    FB0E :                     
   19156/    FB0E :                     loc_F9FE:
   19157/    FB0E : 08A9 0003 0022      		bclr	#3,$22(a1)
   19158/    FB14 : 08A8 0003 0022      		bclr	#3,$22(a0)
   19159/    FB1A : 4228 0025           		clr.b	$25(a0)
   19160/    FB1E : 7800                		moveq	#0,d4
   19161/    FB20 : 4E75                		rts	
   19162/    FB22 :                     ; ===========================================================================
   19163/    FB22 :                     
   19164/    FB22 :                     loc_FA12:
   19165/    FB22 : 3404                		move.w	d4,d2
   19166/    FB24 : 6100 8008           		bsr.w	MvSonicOnPtfm
   19167/    FB28 : 7800                		moveq	#0,d4
   19168/    FB2A : 4E75                		rts	
   19169/    FB2C :                     ; ===========================================================================
   19170/    FB2C :                     
   19171/    FB2C :                     SolidObject71:				; XREF: Obj71_Solid
   19172/    FB2C : 4A28 0025           		tst.b	$25(a0)
   19173/    FB30 : 6700 00AE           		beq.w	loc_FAD0
   19174/    FB34 : 3401                		move.w	d1,d2
   19175/    FB36 : D442                		add.w	d2,d2
   19176/    FB38 : 43F8 D000           		lea	($FFFFD000).w,a1
   19177/    FB3C : 0829 0001 0022      		btst	#1,$22(a1)
   19178/    FB42 : 6610                		bne.s	loc_FA44
   19179/    FB44 : 3029 0008           		move.w	8(a1),d0
   19180/    FB48 : 9068 0008           		sub.w	8(a0),d0
   19181/    FB4C : D041                		add.w	d1,d0
   19182/    FB4E : 6B04                		bmi.s	loc_FA44
   19183/    FB50 : B042                		cmp.w	d2,d0
   19184/    FB52 : 6514                		bcs.s	loc_FA58
   19185/    FB54 :                     
   19186/    FB54 :                     loc_FA44:
   19187/    FB54 : 08A9 0003 0022      		bclr	#3,$22(a1)
   19188/    FB5A : 08A8 0003 0022      		bclr	#3,$22(a0)
   19189/    FB60 : 4228 0025           		clr.b	$25(a0)
   19190/    FB64 : 7800                		moveq	#0,d4
   19191/    FB66 : 4E75                		rts	
   19192/    FB68 :                     ; ===========================================================================
   19193/    FB68 :                     
   19194/    FB68 :                     loc_FA58:
   19195/    FB68 : 3404                		move.w	d4,d2
   19196/    FB6A : 4EB8 7B2E           		jsr MvSonicOnPtfm
   19197/    FB6E : 7800                		moveq	#0,d4
   19198/    FB70 : 4E75                		rts	
   19199/    FB72 :                     ; ===========================================================================
   19200/    FB72 :                     
   19201/    FB72 :                     SolidObject2F:				; XREF: Obj2F_Solid
   19202/    FB72 : 43F8 D000           		lea	($FFFFD000).w,a1
   19203/    FB76 : 4A28 0001           		tst.b	1(a0)
   19204/    FB7A : 6A00 0126           		bpl.w	loc_FB92
   19205/    FB7E : 3029 0008           		move.w	8(a1),d0
   19206/    FB82 : 9068 0008           		sub.w	8(a0),d0
   19207/    FB86 : D041                		add.w	d1,d0
   19208/    FB88 : 6B00 0118           		bmi.w	loc_FB92
   19209/    FB8C : 3601                		move.w	d1,d3
   19210/    FB8E : D643                		add.w	d3,d3
   19211/    FB90 : B043                		cmp.w	d3,d0
   19212/    FB92 : 6200 010E           		bhi.w	loc_FB92
   19213/    FB96 : 3A00                		move.w	d0,d5
   19214/    FB98 : 0828 0000 0001      		btst	#0,1(a0)
   19215/    FB9E : 6704                		beq.s	loc_FA94
   19216/    FBA0 : 4645                		not.w	d5
   19217/    FBA2 : DA43                		add.w	d3,d5
   19218/    FBA4 :                     
   19219/    FBA4 :                     loc_FA94:
   19220/    FBA4 : E24D                		lsr.w	#1,d5
   19221/    FBA6 : 7600                		moveq	#0,d3
   19222/    FBA8 : 1632 5000           		move.b	(a2,d5.w),d3
   19223/    FBAC : 9612                		sub.b	(a2),d3
   19224/    FBAE : 3A28 000C           		move.w	$C(a0),d5
   19225/    FBB2 : 9A43                		sub.w	d3,d5
   19226/    FBB4 : 1629 0016           		move.b	$16(a1),d3
   19227/    FBB8 : 4883                		ext.w	d3
   19228/    FBBA : D443                		add.w	d3,d2
   19229/    FBBC : 3629 000C           		move.w	$C(a1),d3
   19230/    FBC0 : 9645                		sub.w	d5,d3
   19231/    FBC2 : 5843                		addq.w	#4,d3
   19232/    FBC4 : D642                		add.w	d2,d3
   19233/    FBC6 : 6B00 00DA           		bmi.w	loc_FB92
   19234/    FBCA : 3802                		move.w	d2,d4
   19235/    FBCC : D844                		add.w	d4,d4
   19236/    FBCE : B644                		cmp.w	d4,d3
   19237/    FBD0 : 6400 00D0           		bcc.w	loc_FB92
   19238/    FBD4 : 6000 0048           		bra.w	loc_FB0E
   19239/    FBD8 :                     ; ===========================================================================
   19240/    FBD8 :                     
   19241/    FBD8 :                     loc_FAC8:
   19242/    FBD8 : 4A28 0001           		tst.b	1(a0)
   19243/    FBDC : 6A00 00C4           		bpl.w	loc_FB92
   19244/    FBE0 :                     
   19245/    FBE0 :                     loc_FAD0:
   19246/    FBE0 : 43F8 D000           		lea	($FFFFD000).w,a1
   19247/    FBE4 : 3029 0008           		move.w	8(a1),d0
   19248/    FBE8 : 9068 0008           		sub.w	8(a0),d0
   19249/    FBEC : D041                		add.w	d1,d0
   19250/    FBEE : 6B00 00B2           		bmi.w	loc_FB92
   19251/    FBF2 : 3601                		move.w	d1,d3
   19252/    FBF4 : D643                		add.w	d3,d3
   19253/    FBF6 : B043                		cmp.w	d3,d0
   19254/    FBF8 : 6200 00A8           		bhi.w	loc_FB92
   19255/    FBFC : 1629 0016           		move.b	$16(a1),d3
   19256/    FC00 : 4883                		ext.w	d3
   19257/    FC02 : D443                		add.w	d3,d2
   19258/    FC04 : 3629 000C           		move.w	$C(a1),d3
   19259/    FC08 : 9668 000C           		sub.w	$C(a0),d3
   19260/    FC0C : 5843                		addq.w	#4,d3
   19261/    FC0E : D642                		add.w	d2,d3
   19262/    FC10 : 6B00 0090           		bmi.w	loc_FB92
   19263/    FC14 : 3802                		move.w	d2,d4
   19264/    FC16 : D844                		add.w	d4,d4
   19265/    FC18 : B644                		cmp.w	d4,d3
   19266/    FC1A : 6400 0086           		bcc.w	loc_FB92
   19267/    FC1E :                     
   19268/    FC1E :                     loc_FB0E:
   19269/    FC1E : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   19270/    FC22 : 6B00 007E           		bmi.w	loc_FB92
   19271/    FC26 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
   19272/    FC2C : 6400 0074           		bcc.w	loc_FB92
   19273/    FC30 : 4A78 FE08           		tst.w	($FFFFFE08).w
   19274/    FC34 : 6600 0086           		bne.w	loc_FBAC
   19275/    FC38 : 3A00                		move.w	d0,d5
   19276/    FC3A : B240                		cmp.w	d0,d1
   19277/    FC3C : 6408                		bcc.s	loc_FB36
   19278/    FC3E : D241                		add.w	d1,d1
   19279/    FC40 : 9041                		sub.w	d1,d0
   19280/    FC42 : 3A00                		move.w	d0,d5
   19281/    FC44 : 4445                		neg.w	d5
   19282/    FC46 :                     
   19283/    FC46 :                     loc_FB36:
   19284/    FC46 : 3203                		move.w	d3,d1
   19285/    FC48 : B443                		cmp.w	d3,d2
   19286/    FC4A : 6408                		bcc.s	loc_FB44
   19287/    FC4C : 5943                		subq.w	#4,d3
   19288/    FC4E : 9644                		sub.w	d4,d3
   19289/    FC50 : 3203                		move.w	d3,d1
   19290/    FC52 : 4441                		neg.w	d1
   19291/    FC54 :                     
   19292/    FC54 :                     loc_FB44:
   19293/    FC54 : BA41                		cmp.w	d1,d5
   19294/    FC56 : 6200 0068           		bhi.w	loc_FBB0
   19295/    FC5A : 0C41 0004           		cmpi.w	#4,d1
   19296/    FC5E : 633C                		bls.s	loc_FB8C
   19297/    FC60 : 4A40                		tst.w	d0
   19298/    FC62 : 671C                		beq.s	loc_FB70
   19299/    FC64 : 6B08                		bmi.s	loc_FB5E
   19300/    FC66 : 4A69 0010           		tst.w	$10(a1)
   19301/    FC6A : 6B14                		bmi.s	loc_FB70
   19302/    FC6C : 6006                		bra.s	loc_FB64
   19303/    FC6E :                     ; ===========================================================================
   19304/    FC6E :                     
   19305/    FC6E :                     loc_FB5E:
   19306/    FC6E : 4A69 0010           		tst.w	$10(a1)
   19307/    FC72 : 6A0C                		bpl.s	loc_FB70
   19308/    FC74 :                     
   19309/    FC74 :                     loc_FB64:
   19310/    FC74 : 337C 0000 0014      		move.w	#0,$14(a1)	; stop Sonic moving
   19311/    FC7A : 337C 0000 0010      		move.w	#0,$10(a1)
   19312/    FC80 :                     
   19313/    FC80 :                     loc_FB70:
   19314/    FC80 : 9169 0008           		sub.w	d0,8(a1)
   19315/    FC84 : 0829 0001 0022      		btst	#1,$22(a1)
   19316/    FC8A : 6610                		bne.s	loc_FB8C
   19317/    FC8C : 08E9 0005 0022      		bset	#5,$22(a1)
   19318/    FC92 : 08E8 0005 0022      		bset	#5,$22(a0)
   19319/    FC98 : 7801                		moveq	#1,d4
   19320/    FC9A : 4E75                		rts	
   19321/    FC9C :                     ; ===========================================================================
   19322/    FC9C :                     
   19323/    FC9C :                     loc_FB8C:
   19324/    FC9C : 6112                		bsr.s	loc_FBA0
   19325/    FC9E : 7801                		moveq	#1,d4
   19326/    FCA0 : 4E75                		rts	
   19327/    FCA2 :                     ; ===========================================================================
   19328/    FCA2 :                     
   19329/    FCA2 :                     loc_FB92:
   19330/    FCA2 : 0828 0005 0022      		btst	#5,$22(a0)
   19331/    FCA8 : 6712                		beq.s	loc_FBAC
   19332/    FCAA : 337C 0001 001C      		move.w	#1,$1C(a1)	; use walking animation
   19333/    FCB0 :                     
   19334/    FCB0 :                     loc_FBA0:
   19335/    FCB0 : 08A8 0005 0022      		bclr	#5,$22(a0)
   19336/    FCB6 : 08A9 0005 0022      		bclr	#5,$22(a1)
   19337/    FCBC :                     
   19338/    FCBC :                     loc_FBAC:
   19339/    FCBC : 7800                		moveq	#0,d4
   19340/    FCBE : 4E75                		rts	
   19341/    FCC0 :                     ; ===========================================================================
   19342/    FCC0 :                     
   19343/    FCC0 :                     loc_FBB0:
   19344/    FCC0 : 4A43                		tst.w	d3
   19345/    FCC2 : 6B08                		bmi.s	loc_FBBC
   19346/    FCC4 : 0C43 0010           		cmpi.w	#$10,d3
   19347/    FCC8 : 6534                		bcs.s	loc_FBEE
   19348/    FCCA : 60D6                		bra.s	loc_FB92
   19349/    FCCC :                     ; ===========================================================================
   19350/    FCCC :                     
   19351/    FCCC :                     loc_FBBC:
   19352/    FCCC : 4A69 0012           		tst.w	$12(a1)
   19353/    FCD0 : 6714                		beq.s	loc_FBD6
   19354/    FCD2 : 6A0E                		bpl.s	loc_FBD2
   19355/    FCD4 : 4A43                		tst.w	d3
   19356/    FCD6 : 6A0A                		bpl.s	loc_FBD2
   19357/    FCD8 : 9769 000C           		sub.w	d3,$C(a1)
   19358/    FCDC : 337C 0000 0012      		move.w	#0,$12(a1)	; stop Sonic moving
   19359/    FCE2 :                     
   19360/    FCE2 :                     loc_FBD2:
   19361/    FCE2 : 78FF                		moveq	#-1,d4
   19362/    FCE4 : 4E75                		rts	
   19363/    FCE6 :                     ; ===========================================================================
   19364/    FCE6 :                     
   19365/    FCE6 :                     loc_FBD6:
   19366/    FCE6 : 0829 0001 0022      		btst	#1,$22(a1)
   19367/    FCEC : 66F4                		bne.s	loc_FBD2
   19368/    FCEE : 2F08                		move.l	a0,-(sp)
   19369/    FCF0 : 2049                		movea.l	a1,a0
   19370/    FCF2 : 4EB9 0001 B332      		jsr	(KillSonic).l
   19371/    FCF8 : 205F                		movea.l	(sp)+,a0
   19372/    FCFA : 78FF                		moveq	#-1,d4
   19373/    FCFC : 4E75                		rts	
   19374/    FCFE :                     ; ===========================================================================
   19375/    FCFE :                     
   19376/    FCFE :                     loc_FBEE:
   19377/    FCFE : 5943                		subq.w	#4,d3
   19378/    FD00 : 7200                		moveq	#0,d1
   19379/    FD02 : 1228 0019           		move.b	$19(a0),d1
   19380/    FD06 : 3401                		move.w	d1,d2
   19381/    FD08 : D442                		add.w	d2,d2
   19382/    FD0A : D269 0008           		add.w	8(a1),d1
   19383/    FD0E : 9268 0008           		sub.w	8(a0),d1
   19384/    FD12 : 6B24                		bmi.s	loc_FC28
   19385/    FD14 : B242                		cmp.w	d2,d1
   19386/    FD16 : 6420                		bcc.s	loc_FC28
   19387/    FD18 : 4A69 0012           		tst.w	$12(a1)
   19388/    FD1C : 6B1A                		bmi.s	loc_FC28
   19389/    FD1E : 9769 000C           		sub.w	d3,$C(a1)
   19390/    FD22 : 5369 000C           		subq.w	#1,$C(a1)
   19391/    FD26 : 6114                		bsr.s	sub_FC2C
   19392/    FD28 : 117C 0002 0025      		move.b	#2,$25(a0)
   19393/    FD2E : 08E8 0003 0022      		bset	#3,$22(a0)
   19394/    FD34 : 78FF                		moveq	#-1,d4
   19395/    FD36 : 4E75                		rts	
   19396/    FD38 :                     ; ===========================================================================
   19397/    FD38 :                     
   19398/    FD38 :                     loc_FC28:
   19399/    FD38 : 7800                		moveq	#0,d4
   19400/    FD3A : 4E75                		rts	
   19401/    FD3C :                     ; End of function SolidObject
   19402/    FD3C :                     
   19403/    FD3C :                     
   19404/    FD3C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   19405/    FD3C :                     
   19406/    FD3C :                     
   19407/    FD3C :                     sub_FC2C:				; XREF: SolidObject
   19408/    FD3C : 0829 0003 0022      		btst	#3,$22(a1)
   19409/    FD42 : 671A                		beq.s	loc_FC4E
   19410/    FD44 : 7000                		moveq	#0,d0
   19411/    FD46 : 1029 003D           		move.b	$3D(a1),d0
   19412/    FD4A : ED48                		lsl.w	#6,d0
   19413/    FD4C : 0680 00FF D000      		addi.l	#$FFD000,d0
   19414/    FD52 : 2440                		movea.l	d0,a2
   19415/    FD54 : 08AA 0003 0022      		bclr	#3,$22(a2)
   19416/    FD5A : 422A 0025           		clr.b	$25(a2)
   19417/    FD5E :                     
   19418/    FD5E :                     loc_FC4E:
   19419/    FD5E : 3008                		move.w	a0,d0
   19420/    FD60 : 0440 D000           		subi.w	#-$3000,d0
   19421/    FD64 : EC48                		lsr.w	#6,d0
   19422/    FD66 : 0240 007F           		andi.w	#$7F,d0
   19423/    FD6A : 1340 003D           		move.b	d0,$3D(a1)
   19424/    FD6E : 137C 0000 0026      		move.b	#0,$26(a1)
   19425/    FD74 : 337C 0000 0012      		move.w	#0,$12(a1)
   19426/    FD7A : 3369 0010 0014      		move.w	$10(a1),$14(a1)
   19427/    FD80 : 0829 0001 0022      		btst	#1,$22(a1)
   19428/    FD86 : 670C                		beq.s	loc_FC84
   19429/    FD88 : 2F08                		move.l	a0,-(sp)
   19430/    FD8A : 2049                		movea.l	a1,a0
   19431/    FD8C : 4EB9 0001 3A0E      		jsr	(Sonic_ResetOnFloor).l
   19432/    FD92 : 205F                		movea.l	(sp)+,a0
   19433/    FD94 :                     
   19434/    FD94 :                     loc_FC84:
   19435/    FD94 : 08E9 0003 0022      		bset	#3,$22(a1)
   19436/    FD9A : 08E8 0003 0022      		bset	#3,$22(a0)
   19437/    FDA0 : 4E75                		rts	
   19438/    FDA2 :                     ; End of function sub_FC2C
   19439/    FDA2 :                     
   19440/    FDA2 :                     ; ===========================================================================
   19441/    FDA2 :                     ; ---------------------------------------------------------------------------
   19442/    FDA2 :                     ; Object 51 - smashable	green block (MZ)
   19443/    FDA2 :                     ; ---------------------------------------------------------------------------
   19444/    FDA2 :                     
   19445/    FDA2 :                     Obj51:					; XREF: Obj_Index
   19446/    FDA2 : 7000                		moveq	#0,d0
   19447/    FDA4 : 1028 0024           		move.b	$24(a0),d0
   19448/    FDA8 : 323B 000A           		move.w	Obj51_Index(pc,d0.w),d1
   19449/    FDAC : 4EBB 1006           		jsr	Obj51_Index(pc,d1.w)
   19450/    FDB0 : 6000 FA0A           		bra.w	MarkObjGone
   19451/    FDB4 :                     ; ===========================================================================
   19452/    FDB4 : 0006                Obj51_Index:	dc.w Obj51_Main-Obj51_Index
   19453/    FDB6 : 0030                		dc.w Obj51_Solid-Obj51_Index
   19454/    FDB8 : 0100                		dc.w Obj51_Display-Obj51_Index
   19455/    FDBA :                     ; ===========================================================================
   19456/    FDBA :                     
   19457/    FDBA :                     Obj51_Main:				; XREF: Obj51_Index
   19458/    FDBA : 5428 0024           		addq.b	#2,$24(a0)
   19459/    FDBE : 217C 0000 FEE4 0004 		move.l	#Map_obj51,4(a0)
   19460/    FDC6 : 317C 42B8 0002      		move.w	#$42B8,2(a0)
   19461/    FDCC : 117C 0004 0001      		move.b	#4,1(a0)
   19462/    FDD2 : 117C 0010 0019      		move.b	#$10,$19(a0)
   19463/    FDD8 : 117C 0004 0018      		move.b	#4,$18(a0)
   19464/    FDDE : 1168 0028 001A      		move.b	$28(a0),$1A(a0)
   19465/    FDE4 :                     
   19466/    FDE4 :                     Obj51_Solid:				; XREF: Obj51_Index
   19467/    FDE4 : 3178 F7D0 0034      		move.w	($FFFFF7D0).w,$34(a0)
   19468/    FDEA : 1178 D01C 0032      		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic"s animation number
   19469/    FDF0 : 323C 001B           		move.w	#$1B,d1
   19470/    FDF4 : 343C 0010           		move.w	#$10,d2
   19471/    FDF8 : 363C 0011           		move.w	#$11,d3
   19472/    FDFC : 3828 0008           		move.w	8(a0),d4
   19473/    FE00 : 6100 FCE4           		bsr.w	SolidObject
   19474/    FE04 : 0828 0003 0022      		btst	#3,$22(a0)
   19475/    FE0A : 6602                		bne.s	Obj51_Smash
   19476/    FE0C :                     
   19477/    FE0C :                     locret_FCFC:
   19478/    FE0C : 4E75                		rts	
   19479/    FE0E :                     ; ===========================================================================
   19480/    FE0E :                     
   19481/    FE0E :                     Obj51_Smash:				; XREF: Obj51_Solid
   19482/    FE0E : 0C28 0002 0032      		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
   19483/    FE14 : 66F6                		bne.s	locret_FCFC	; if not, branch
   19484/    FE16 : 31E8 0034 F7D0      		move.w	$34(a0),($FFFFF7D0).w
   19485/    FE1C : 08E9 0002 0022      		bset	#2,$22(a1)
   19486/    FE22 : 137C 000E 0016      		move.b	#$E,$16(a1)
   19487/    FE28 : 137C 0007 0017      		move.b	#7,$17(a1)
   19488/    FE2E : 137C 0002 001C      		move.b	#2,$1C(a1)
   19489/    FE34 : 337C FD00 0012      		move.w	#-$300,$12(a1)	; bounce Sonic upwards
   19490/    FE3A : 08E9 0001 0022      		bset	#1,$22(a1)
   19491/    FE40 : 08A9 0003 0022      		bclr	#3,$22(a1)
   19492/    FE46 : 137C 0002 0024      		move.b	#2,$24(a1)
   19493/    FE4C : 08A8 0003 0022      		bclr	#3,$22(a0)
   19494/    FE52 : 4228 0025           		clr.b	$25(a0)
   19495/    FE56 : 117C 0001 001A      		move.b	#1,$1A(a0)
   19496/    FE5C : 49F9 0000 FECC      		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
   19497/    FE62 : 7203                		moveq	#3,d1		; set number of	fragments to 4
   19498/    FE64 : 343C 0038           		move.w	#$38,d2
   19499/    FE68 : 6100 D48E           		bsr.w	SmashObject
   19500/    FE6C : 6100 DD28           		bsr.w	SingleObjLoad
   19501/    FE70 : 6642                		bne.s	Obj51_Display
   19502/    FE72 : (MACRO)             		_move.b	#$29,0(a1)	; load points object
   19502/    FE72 :  (MACRO-2)                          insn2op move.b, #$29,0(a1)
   19502/    FE72 : 137C 0029 0001                              !move.b   #$29,1+0(a1)
   19502/    FE77 :                                             !org    *-1
   19502/    FE77 : 00                                          !dc.b   0
   19503/    FE78 : 3368 0008 0008      		move.w	8(a0),8(a1)
   19504/    FE7E : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   19505/    FE84 : 3438 F7D0           		move.w	($FFFFF7D0).w,d2
   19506/    FE88 : 5478 F7D0           		addq.w	#2,($FFFFF7D0).w
   19507/    FE8C : 0C42 0006           		cmpi.w	#6,d2
   19508/    FE90 : 6502                		bcs.s	Obj51_Bonus
   19509/    FE92 : 7406                		moveq	#6,d2
   19510/    FE94 :                     
   19511/    FE94 :                     Obj51_Bonus:
   19512/    FE94 : 7000                		moveq	#0,d0
   19513/    FE96 : 303B 2044           		move.w	Obj51_Points(pc,d2.w),d0
   19514/    FE9A : 0C78 0020 F7D0      		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
   19515/    FEA0 : 6506                		bcs.s	loc_FD98	; if not, branch
   19516/    FEA2 : 303C 03E8           		move.w	#1000,d0	; give higher points for 16th block
   19517/    FEA6 : 740A                		moveq	#10,d2
   19518/    FEA8 :                     
   19519/    FEA8 :                     loc_FD98:
   19520/    FEA8 : 4EB9 0001 C922      		jsr	(AddPoints).l
   19521/    FEAE : E24A                		lsr.w	#1,d2
   19522/    FEB0 : 1342 001A           		move.b	d2,$1A(a1)
   19523/    FEB4 :                     
   19524/    FEB4 :                     Obj51_Display:				; XREF: Obj51_Index
   19525/    FEB4 : 6100 D832           		bsr.w	SpeedToPos
   19526/    FEB8 : 0668 0038 0012      		addi.w	#$38,$12(a0)
   19527/    FEBE : 6100 D84E           		bsr.w	DisplaySprite
   19528/    FEC2 : 4A28 0001           		tst.b	1(a0)
   19529/    FEC6 : 6A00 D882           		bpl.w	DeleteObject
   19530/    FECA : 4E75                		rts	
   19531/    FECC :                     ; ===========================================================================
   19532/    FECC : FE00 FE00           Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
   19533/    FED0 : FF00 FF00           		dc.w $FF00, $FF00
   19534/    FED4 : 0200 FE00           		dc.w $200, $FE00
   19535/    FED8 : 0100 FF00           		dc.w $100, $FF00
   19536/    FEDC :                     
   19537/    FEDC : 000A 0014 0032 0064 Obj51_Points:	dc.w 10, 20, 50, 100
   19538/    FEE4 :                     ; ---------------------------------------------------------------------------
   19539/    FEE4 :                     ; Sprite mappings - smashable green block (MZ)
   19540/    FEE4 :                     ; ---------------------------------------------------------------------------
   19541/    FEE4 :                     Map_obj51:
   19542/    FEE4 :                     		include	"_maps/obj51.asm"
(1)    1/    FEE4 :                     ; ---------------------------------------------------------------------------
(1)    2/    FEE4 :                     ; Sprite mappings - smashable green block (MZ)
(1)    3/    FEE4 :                     ; ---------------------------------------------------------------------------
(1)    4/    FEE4 : 0004                		dc.w byte_FDD8-Map_obj51
(1)    5/    FEE6 : 000F                		dc.w byte_FDE3-Map_obj51
(1)    6/    FEE8 : 02                  byte_FDD8:	dc.b 2
(1)    7/    FEE9 : F00D 0000 F0        		dc.b $F0, $D, 0, 0, $F0
(1)    8/    FEEE : 000D 0000 F0        		dc.b 0,	$D, 0, 0, $F0
(1)    9/    FEF3 : 04                  byte_FDE3:	dc.b 4
(1)   10/    FEF4 : F005 8000 F0        		dc.b $F0, 5, $80, 0, $F0
(1)   11/    FEF9 : 0005 8000 F0        		dc.b 0,	5, $80,	0, $F0
(1)   12/    FEFE : F005 8000 00        		dc.b $F0, 5, $80, 0, 0
(1)   13/    FF03 : 0005 8000 00        		dc.b 0,	5, $80,	0, 0
(1)   14/    FF08 : (MACRO)             		align 2
(1)   14/    FF08 :  (MACRO-2)                  cnop 0,2
(1)   14/    FF08 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   19543/    FF08 :                     
   19544/    FF08 :                     ; ===========================================================================
   19545/    FF08 :                     ; ---------------------------------------------------------------------------
   19546/    FF08 :                     ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
   19547/    FF08 :                     ; ---------------------------------------------------------------------------
   19548/    FF08 :                     
   19549/    FF08 :                     Obj52:					; XREF: Obj_Index
   19550/    FF08 : 7000                		moveq	#0,d0
   19551/    FF0A : 1028 0024           		move.b	$24(a0),d0
   19552/    FF0E : 323B 0006           		move.w	Obj52_Index(pc,d0.w),d1
   19553/    FF12 : 4EFB 1002           		jmp	Obj52_Index(pc,d1.w)
   19554/    FF16 :                     ; ===========================================================================
   19555/    FF16 : 0010                Obj52_Index:	dc.w Obj52_Main-Obj52_Index
   19556/    FF18 : 0090                		dc.w Obj52_Platform-Obj52_Index
   19557/    FF1A : 00A2                		dc.w Obj52_StandOn-Obj52_Index
   19558/    FF1C :                     
   19559/    FF1C : 1000                Obj52_Var:	dc.b $10, 0		; object width,	frame number
   19560/    FF1E : 2001                		dc.b $20, 1
   19561/    FF20 : 2002                		dc.b $20, 2
   19562/    FF22 : 4003                		dc.b $40, 3
   19563/    FF24 : 3004                		dc.b $30, 4
   19564/    FF26 :                     ; ===========================================================================
   19565/    FF26 :                     
   19566/    FF26 :                     Obj52_Main:				; XREF: Obj52_Index
   19567/    FF26 : 5428 0024           		addq.b	#2,$24(a0)
   19568/    FF2A : 217C 0001 015A 0004 		move.l	#Map_obj52,4(a0)
   19569/    FF32 : 317C 42B8 0002      		move.w	#$42B8,2(a0)
   19570/    FF38 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   19571/    FF3E : 6614                		bne.s	loc_FE44
   19572/    FF40 : 217C 0001 01B0 0004 		move.l	#Map_obj52a,4(a0) ; LZ specific	code
   19573/    FF48 : 317C 43BC 0002      		move.w	#$43BC,2(a0)
   19574/    FF4E : 117C 0007 0016      		move.b	#7,$16(a0)
   19575/    FF54 :                     
   19576/    FF54 :                     loc_FE44:
   19577/    FF54 : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
   19578/    FF5A : 6614                		bne.s	loc_FE60
   19579/    FF5C : 317C 22C0 0002      		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
   19580/    FF62 : 0C28 0028 0028      		cmpi.b	#$28,$28(a0)	; is object 5228 ?
   19581/    FF68 : 6706                		beq.s	loc_FE60	; if yes, branch
   19582/    FF6A : 317C 4460 0002      		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
   19583/    FF70 :                     
   19584/    FF70 :                     loc_FE60:
   19585/    FF70 : 117C 0004 0001      		move.b	#4,1(a0)
   19586/    FF76 : 7000                		moveq	#0,d0
   19587/    FF78 : 1028 0028           		move.b	$28(a0),d0
   19588/    FF7C : E648                		lsr.w	#3,d0
   19589/    FF7E : 0240 001E           		andi.w	#$1E,d0
   19590/    FF82 : 45FB 0098           		lea	Obj52_Var(pc,d0.w),a2
   19591/    FF86 : 115A 0019           		move.b	(a2)+,$19(a0)
   19592/    FF8A : 115A 001A           		move.b	(a2)+,$1A(a0)
   19593/    FF8E : 117C 0004 0018      		move.b	#4,$18(a0)
   19594/    FF94 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   19595/    FF9A : 3168 000C 0032      		move.w	$C(a0),$32(a0)
   19596/    FFA0 : 0228 000F 0028      		andi.b	#$F,$28(a0)
   19597/    FFA6 :                     
   19598/    FFA6 :                     Obj52_Platform:				; XREF: Obj52_Index
   19599/    FFA6 : 6100 004E           		bsr.w	Obj52_Move
   19600/    FFAA : 7200                		moveq	#0,d1
   19601/    FFAC : 1228 0019           		move.b	$19(a0),d1
   19602/    FFB0 : 4EB9 0000 7458      		jsr	(PlatformObject).l
   19603/    FFB6 : 601C                		bra.s	Obj52_ChkDel
   19604/    FFB8 :                     ; ===========================================================================
   19605/    FFB8 :                     
   19606/    FFB8 :                     Obj52_StandOn:				; XREF: Obj52_Index
   19607/    FFB8 : 7200                		moveq	#0,d1
   19608/    FFBA : 1228 0019           		move.b	$19(a0),d1
   19609/    FFBE : 4EB9 0000 75CC      		jsr	(ExitPlatform).l
   19610/    FFC4 : 3F28 0008           		move.w	8(a0),-(sp)
   19611/    FFC8 : 6100 002C           		bsr.w	Obj52_Move
   19612/    FFCC : 341F                		move.w	(sp)+,d2
   19613/    FFCE : 4EB9 0000 7B3A      		jsr	(MvSonicOnPtfm2).l
   19614/    FFD4 :                     
   19615/    FFD4 :                     Obj52_ChkDel:				; XREF: Obj52_Platform
   19616/    FFD4 : 3028 0030           		move.w	$30(a0),d0
   19617/    FFD8 : 0240 FF80           		andi.w	#$FF80,d0
   19618/    FFDC : 3238 F700           		move.w	($FFFFF700).w,d1
   19619/    FFE0 : 0441 0080           		subi.w	#$80,d1
   19620/    FFE4 : 0241 FF80           		andi.w	#$FF80,d1
   19621/    FFE8 : 9041                		sub.w	d1,d0
   19622/    FFEA : 0C40 0280           		cmpi.w	#$280,d0
   19623/    FFEE : 6200 D75A           		bhi.w	DeleteObject
   19624/    FFF2 : 6000 D71A           		bra.w	DisplaySprite
   19625/    FFF6 :                     ; ===========================================================================
   19626/    FFF6 :                     
   19627/    FFF6 :                     Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
   19628/    FFF6 : 7000                		moveq	#0,d0
   19629/    FFF8 : 1028 0028           		move.b	$28(a0),d0
   19630/    FFFC : 0240 000F           		andi.w	#$F,d0
   19631/   10000 : D040                		add.w	d0,d0
   19632/   10002 : 323B 0006           		move.w	Obj52_TypeIndex(pc,d0.w),d1
   19633/   10006 : 4EFB 1002           		jmp	Obj52_TypeIndex(pc,d1.w)
   19634/   1000A :                     ; ===========================================================================
   19635/   1000A : 0016 0018           Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
   19636/   1000E : 0038 0046           		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
   19637/   10012 : 0038 0066           		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
   19638/   10016 : 0086 00A8           		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
   19639/   1001A : 00D4 0038           		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
   19640/   1001E : 00F4                		dc.w Obj52_Type0A-Obj52_TypeIndex
   19641/   10020 :                     ; ===========================================================================
   19642/   10020 :                     
   19643/   10020 :                     Obj52_Type00:				; XREF: Obj52_TypeIndex
   19644/   10020 : 4E75                		rts	
   19645/   10022 :                     ; ===========================================================================
   19646/   10022 :                     
   19647/   10022 :                     Obj52_Type01:				; XREF: Obj52_TypeIndex
   19648/   10022 : 1038 FE6C           		move.b	($FFFFFE6C).w,d0
   19649/   10026 : 323C 0060           		move.w	#$60,d1
   19650/   1002A : 0828 0000 0022      		btst	#0,$22(a0)
   19651/   10030 : 6704                		beq.s	loc_FF26
   19652/   10032 : 4440                		neg.w	d0
   19653/   10034 : D041                		add.w	d1,d0
   19654/   10036 :                     
   19655/   10036 :                     loc_FF26:
   19656/   10036 : 3228 0030           		move.w	$30(a0),d1
   19657/   1003A : 9240                		sub.w	d0,d1
   19658/   1003C : 3141 0008           		move.w	d1,8(a0)
   19659/   10040 : 4E75                		rts	
   19660/   10042 :                     ; ===========================================================================
   19661/   10042 :                     
   19662/   10042 :                     Obj52_Type02:				; XREF: Obj52_TypeIndex
   19663/   10042 : 0C28 0004 0024      		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
   19664/   10048 : 6604                		bne.s	Obj52_02_Wait
   19665/   1004A : 5228 0028           		addq.b	#1,$28(a0)	; if yes, add 1	to type
   19666/   1004E :                     
   19667/   1004E :                     Obj52_02_Wait:
   19668/   1004E : 4E75                		rts	
   19669/   10050 :                     ; ===========================================================================
   19670/   10050 :                     
   19671/   10050 :                     Obj52_Type03:				; XREF: Obj52_TypeIndex
   19672/   10050 : 7600                		moveq	#0,d3
   19673/   10052 : 1628 0019           		move.b	$19(a0),d3
   19674/   10056 : 6100 50FE           		bsr.w	ObjHitWallRight
   19675/   1005A : 4A41                		tst.w	d1		; has the platform hit a wall?
   19676/   1005C : 6B0C                		bmi.s	Obj52_03_End	; if yes, branch
   19677/   1005E : 5268 0008           		addq.w	#1,8(a0)	; move platform	to the right
   19678/   10062 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   19679/   10068 : 4E75                		rts	
   19680/   1006A :                     ; ===========================================================================
   19681/   1006A :                     
   19682/   1006A :                     Obj52_03_End:
   19683/   1006A : 4228 0028           		clr.b	$28(a0)		; change to type 00 (non-moving	type)
   19684/   1006E : 4E75                		rts	
   19685/   10070 :                     ; ===========================================================================
   19686/   10070 :                     
   19687/   10070 :                     Obj52_Type05:				; XREF: Obj52_TypeIndex
   19688/   10070 : 7600                		moveq	#0,d3
   19689/   10072 : 1628 0019           		move.b	$19(a0),d3
   19690/   10076 : 6100 50DE           		bsr.w	ObjHitWallRight
   19691/   1007A : 4A41                		tst.w	d1		; has the platform hit a wall?
   19692/   1007C : 6B0C                		bmi.s	Obj52_05_End	; if yes, branch
   19693/   1007E : 5268 0008           		addq.w	#1,8(a0)	; move platform	to the right
   19694/   10082 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   19695/   10088 : 4E75                		rts	
   19696/   1008A :                     ; ===========================================================================
   19697/   1008A :                     
   19698/   1008A :                     Obj52_05_End:
   19699/   1008A : 5228 0028           		addq.b	#1,$28(a0)	; change to type 06 (falling)
   19700/   1008E : 4E75                		rts	
   19701/   10090 :                     ; ===========================================================================
   19702/   10090 :                     
   19703/   10090 :                     Obj52_Type06:				; XREF: Obj52_TypeIndex
   19704/   10090 : 6100 D656           		bsr.w	SpeedToPos
   19705/   10094 : 0668 0018 0012      		addi.w	#$18,$12(a0)	; make the platform fall
   19706/   1009A : 6100 4FF8           		bsr.w	ObjHitFloor
   19707/   1009E : 4A41                		tst.w	d1		; has platform hit the floor?
   19708/   100A0 : 6A00 000E           		bpl.w	locret_FFA0	; if not, branch
   19709/   100A4 : D368 000C           		add.w	d1,$C(a0)
   19710/   100A8 : 4268 0012           		clr.w	$12(a0)		; stop platform	falling
   19711/   100AC : 4228 0028           		clr.b	$28(a0)		; change to type 00 (non-moving)
   19712/   100B0 :                     
   19713/   100B0 :                     locret_FFA0:
   19714/   100B0 : 4E75                		rts	
   19715/   100B2 :                     ; ===========================================================================
   19716/   100B2 :                     
   19717/   100B2 :                     Obj52_Type07:				; XREF: Obj52_TypeIndex
   19718/   100B2 : 4A38 F7E2           		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
   19719/   100B6 : 6704                		beq.s	Obj52_07_ChkDel
   19720/   100B8 : 5728 0028           		subq.b	#3,$28(a0)	; if yes, change object	type to	04
   19721/   100BC :                     
   19722/   100BC :                     Obj52_07_ChkDel:
   19723/   100BC : 588F                		addq.l	#4,sp
   19724/   100BE : 3028 0030           		move.w	$30(a0),d0
   19725/   100C2 : 0240 FF80           		andi.w	#$FF80,d0
   19726/   100C6 : 3238 F700           		move.w	($FFFFF700).w,d1
   19727/   100CA : 0441 0080           		subi.w	#$80,d1
   19728/   100CE : 0241 FF80           		andi.w	#$FF80,d1
   19729/   100D2 : 9041                		sub.w	d1,d0
   19730/   100D4 : 0C40 0280           		cmpi.w	#$280,d0
   19731/   100D8 : 6200 D670           		bhi.w	DeleteObject
   19732/   100DC : 4E75                		rts	
   19733/   100DE :                     ; ===========================================================================
   19734/   100DE :                     
   19735/   100DE :                     Obj52_Type08:				; XREF: Obj52_TypeIndex
   19736/   100DE : 1038 FE7C           		move.b	($FFFFFE7C).w,d0
   19737/   100E2 : 323C 0080           		move.w	#$80,d1
   19738/   100E6 : 0828 0000 0022      		btst	#0,$22(a0)
   19739/   100EC : 6704                		beq.s	loc_FFE2
   19740/   100EE : 4440                		neg.w	d0
   19741/   100F0 : D041                		add.w	d1,d0
   19742/   100F2 :                     
   19743/   100F2 :                     loc_FFE2:
   19744/   100F2 : 3228 0032           		move.w	$32(a0),d1
   19745/   100F6 : 9240                		sub.w	d0,d1
   19746/   100F8 : 3141 000C           		move.w	d1,$C(a0)
   19747/   100FC : 4E75                		rts	
   19748/   100FE :                     ; ===========================================================================
   19749/   100FE :                     
   19750/   100FE :                     Obj52_Type0A:				; XREF: Obj52_TypeIndex
   19751/   100FE : 7600                		moveq	#0,d3
   19752/   10100 : 1628 0019           		move.b	$19(a0),d3
   19753/   10104 : D643                		add.w	d3,d3
   19754/   10106 : 7208                		moveq	#8,d1
   19755/   10108 : 0828 0000 0022      		btst	#0,$22(a0)
   19756/   1010E : 6704                		beq.s	loc_10004
   19757/   10110 : 4441                		neg.w	d1
   19758/   10112 : 4443                		neg.w	d3
   19759/   10114 :                     
   19760/   10114 :                     loc_10004:
   19761/   10114 : 4A68 0036           		tst.w	$36(a0)		; is platform set to move back?
   19762/   10118 : 6626                		bne.s	Obj52_0A_Back	; if yes, branch
   19763/   1011A : 3028 0008           		move.w	8(a0),d0
   19764/   1011E : 9068 0030           		sub.w	$30(a0),d0
   19765/   10122 : B043                		cmp.w	d3,d0
   19766/   10124 : 670C                		beq.s	Obj52_0A_Wait
   19767/   10126 : D368 0008           		add.w	d1,8(a0)	; move platform
   19768/   1012A : 317C 012C 0034      		move.w	#300,$34(a0)	; set time delay to 5 seconds
   19769/   10130 : 4E75                		rts	
   19770/   10132 :                     ; ===========================================================================
   19771/   10132 :                     
   19772/   10132 :                     Obj52_0A_Wait:
   19773/   10132 : 5368 0034           		subq.w	#1,$34(a0)	; subtract 1 from time delay
   19774/   10136 : 6606                		bne.s	locret_1002E	; if time remains, branch
   19775/   10138 : 317C 0001 0036      		move.w	#1,$36(a0)	; set platform to move back to its original position
   19776/   1013E :                     
   19777/   1013E :                     locret_1002E:
   19778/   1013E : 4E75                		rts	
   19779/   10140 :                     ; ===========================================================================
   19780/   10140 :                     
   19781/   10140 :                     Obj52_0A_Back:
   19782/   10140 : 3028 0008           		move.w	8(a0),d0
   19783/   10144 : 9068 0030           		sub.w	$30(a0),d0
   19784/   10148 : 6706                		beq.s	Obj52_0A_Reset
   19785/   1014A : 9368 0008           		sub.w	d1,8(a0)	; return platform to its original position
   19786/   1014E : 4E75                		rts	
   19787/   10150 :                     ; ===========================================================================
   19788/   10150 :                     
   19789/   10150 :                     Obj52_0A_Reset:
   19790/   10150 : 4268 0036           		clr.w	$36(a0)
   19791/   10154 : 5328 0028           		subq.b	#1,$28(a0)
   19792/   10158 : 4E75                		rts	
   19793/   1015A :                     ; ===========================================================================
   19794/   1015A :                     ; ---------------------------------------------------------------------------
   19795/   1015A :                     ; Sprite mappings - moving blocks (MZ, SBZ)
   19796/   1015A :                     ; ---------------------------------------------------------------------------
   19797/   1015A :                     Map_obj52:
   19798/   1015A :                     		include	"_maps/obj52mz.asm"
(1)    1/   1015A :                     ; ---------------------------------------------------------------------------
(1)    2/   1015A :                     ; Sprite mappings - moving blocks (MZ, SBZ)
(1)    3/   1015A :                     ; ---------------------------------------------------------------------------
(1)    4/   1015A : 000A 0010           		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
(1)    5/   1015E : 001B 0030           		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
(1)    6/   10162 : 0045                		dc.w byte_1008F-Map_obj52
(1)    7/   10164 : 01                  byte_10054:	dc.b 1
(1)    8/   10165 : F80F 0008 F0        		dc.b $F8, $F, 0, 8, $F0
(1)    9/   1016A : 02                  byte_1005A:	dc.b 2
(1)   10/   1016B : F80F 0008 E0        		dc.b $F8, $F, 0, 8, $E0
(1)   11/   10170 : F80F 0008 00        		dc.b $F8, $F, 0, 8, 0
(1)   12/   10175 : 04                  byte_10065:	dc.b 4
(1)   13/   10176 : F80C 2000 E0        		dc.b $F8, $C, $20, 0, $E0
(1)   14/   1017B : 000D 0004 E0        		dc.b 0,	$D, 0, 4, $E0
(1)   15/   10180 : F80C 2000 00        		dc.b $F8, $C, $20, 0, 0
(1)   16/   10185 : 000D 0004 00        		dc.b 0,	$D, 0, 4, 0
(1)   17/   1018A : 04                  byte_1007A:	dc.b 4
(1)   18/   1018B : F80E 0000 C0        		dc.b $F8, $E, 0, 0, $C0
(1)   19/   10190 : F80E 0003 E0        		dc.b $F8, $E, 0, 3, $E0
(1)   20/   10195 : F80E 0003 00        		dc.b $F8, $E, 0, 3, 0
(1)   21/   1019A : F80E 0800 20        		dc.b $F8, $E, 8, 0, $20
(1)   22/   1019F : 03                  byte_1008F:	dc.b 3
(1)   23/   101A0 : F80F 0008 D0        		dc.b $F8, $F, 0, 8, $D0
(1)   24/   101A5 : F80F 0008 F0        		dc.b $F8, $F, 0, 8, $F0
(1)   25/   101AA : F80F 0008 10        		dc.b $F8, $F, 0, 8, $10
(1)   26/   101AF : (MACRO)             		align 2
(1)   26/   101AF :  (MACRO-2)                  cnop 0,2
(1)   26/   101AF :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   26/   101AF : =$24                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   26/   101B0 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   19799/   101B0 :                     
   19800/   101B0 :                     ; ---------------------------------------------------------------------------
   19801/   101B0 :                     ; Sprite mappings - moving block (LZ)
   19802/   101B0 :                     ; ---------------------------------------------------------------------------
   19803/   101B0 :                     Map_obj52a:
   19804/   101B0 :                     		include	"_maps/obj52lz.asm"
(1)    1/   101B0 :                     ; ---------------------------------------------------------------------------
(1)    2/   101B0 :                     ; Sprite mappings - moving block (LZ)
(1)    3/   101B0 :                     ; ---------------------------------------------------------------------------
(1)    4/   101B0 : 0002                		dc.w byte_100A2-Map_obj52a
(1)    5/   101B2 : 01                  byte_100A2:	dc.b 1
(1)    6/   101B3 : F80D 0000 F0        		dc.b $F8, $D, 0, 0, $F0
(1)    7/   101B8 : (MACRO)             		align 2
(1)    7/   101B8 :  (MACRO-2)                  cnop 0,2
(1)    7/   101B8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   19805/   101B8 :                     
   19806/   101B8 :                     ; ===========================================================================
   19807/   101B8 :                     ; ---------------------------------------------------------------------------
   19808/   101B8 :                     ; Object 55 - Basaran enemy (MZ)
   19809/   101B8 :                     ; ---------------------------------------------------------------------------
   19810/   101B8 :                     
   19811/   101B8 :                     Obj55:					; XREF: Obj_Index
   19812/   101B8 : 7000                		moveq	#0,d0
   19813/   101BA : 1028 0024           		move.b	$24(a0),d0
   19814/   101BE : 323B 0006           		move.w	Obj55_Index(pc,d0.w),d1
   19815/   101C2 : 4EFB 1002           		jmp	Obj55_Index(pc,d1.w)
   19816/   101C6 :                     ; ===========================================================================
   19817/   101C6 : 0004                Obj55_Index:	dc.w Obj55_Main-Obj55_Index
   19818/   101C8 : 0034                		dc.w Obj55_Action-Obj55_Index
   19819/   101CA :                     ; ===========================================================================
   19820/   101CA :                     
   19821/   101CA :                     Obj55_Main:				; XREF: Obj55_Index
   19822/   101CA : 5428 0024           		addq.b	#2,$24(a0)
   19823/   101CE : 217C 0001 034E 0004 		move.l	#Map_obj55,4(a0)
   19824/   101D6 : 317C 84B8 0002      		move.w	#$84B8,2(a0)
   19825/   101DC : 117C 0004 0001      		move.b	#4,1(a0)
   19826/   101E2 : 117C 000C 0016      		move.b	#$C,$16(a0)
   19827/   101E8 : 117C 0002 0018      		move.b	#2,$18(a0)
   19828/   101EE : 117C 000B 0020      		move.b	#$B,$20(a0)
   19829/   101F4 : 117C 0010 0019      		move.b	#$10,$19(a0)
   19830/   101FA :                     
   19831/   101FA :                     Obj55_Action:				; XREF: Obj55_Index
   19832/   101FA : 7000                		moveq	#0,d0
   19833/   101FC : 1028 0025           		move.b	$25(a0),d0
   19834/   10200 : 323B 0014           		move.w	Obj55_Index2(pc,d0.w),d1
   19835/   10204 : 4EBB 1010           		jsr	Obj55_Index2(pc,d1.w)
   19836/   10208 : 43F9 0001 033A      		lea	(Ani_obj55).l,a1
   19837/   1020E : 6100 A524           		bsr.w	AnimateSprite
   19838/   10212 : 6000 F5A8           		bra.w	MarkObjGone
   19839/   10216 :                     ; ===========================================================================
   19840/   10216 : 0008                Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
   19841/   10218 : 0044                		dc.w Obj55_DropFly-Obj55_Index2
   19842/   1021A : 0086                		dc.w Obj55_PlaySnd-Obj55_Index2
   19843/   1021C : 00C2                		dc.w Obj55_FlyUp-Obj55_Index2
   19844/   1021E :                     ; ===========================================================================
   19845/   1021E :                     
   19846/   1021E :                     Obj55_ChkDrop:				; XREF: Obj55_Index2
   19847/   1021E : 343C 0080           		move.w	#$80,d2
   19848/   10222 : 6100 00E2           		bsr.w	Obj55_ChkSonic
   19849/   10226 : 6430                		bcc.s	Obj55_NoDrop
   19850/   10228 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   19851/   1022C : 3140 0036           		move.w	d0,$36(a0)
   19852/   10230 : 9068 000C           		sub.w	$C(a0),d0
   19853/   10234 : 6522                		bcs.s	Obj55_NoDrop
   19854/   10236 : 0C40 0080           		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
   19855/   1023A : 641C                		bcc.s	Obj55_NoDrop	; if not, branch
   19856/   1023C : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	on?
   19857/   10240 : 6616                		bne.s	Obj55_NoDrop	; if yes, branch
   19858/   10242 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   19859/   10246 : D007                		add.b	d7,d0
   19860/   10248 : 0200 0007           		andi.b	#7,d0
   19861/   1024C : 660A                		bne.s	Obj55_NoDrop
   19862/   1024E : 117C 0001 001C      		move.b	#1,$1C(a0)
   19863/   10254 : 5428 0025           		addq.b	#2,$25(a0)
   19864/   10258 :                     
   19865/   10258 :                     Obj55_NoDrop:
   19866/   10258 : 4E75                		rts	
   19867/   1025A :                     ; ===========================================================================
   19868/   1025A :                     
   19869/   1025A :                     Obj55_DropFly:				; XREF: Obj55_Index2
   19870/   1025A : 6100 D48C           		bsr.w	SpeedToPos
   19871/   1025E : 0668 0018 0012      		addi.w	#$18,$12(a0)	; make basaran fall
   19872/   10264 : 343C 0080           		move.w	#$80,d2
   19873/   10268 : 6100 009C           		bsr.w	Obj55_ChkSonic
   19874/   1026C : 3028 0036           		move.w	$36(a0),d0
   19875/   10270 : 9068 000C           		sub.w	$C(a0),d0
   19876/   10274 : 651C                		bcs.s	Obj55_ChkDel
   19877/   10276 : 0C40 0010           		cmpi.w	#$10,d0
   19878/   1027A : 6414                		bcc.s	locret_10180
   19879/   1027C : 3141 0010           		move.w	d1,$10(a0)	; make basaran fly horizontally
   19880/   10280 : 317C 0000 0012      		move.w	#0,$12(a0)	; stop basaran falling
   19881/   10286 : 117C 0002 001C      		move.b	#2,$1C(a0)
   19882/   1028C : 5428 0025           		addq.b	#2,$25(a0)
   19883/   10290 :                     
   19884/   10290 :                     locret_10180:
   19885/   10290 : 4E75                		rts	
   19886/   10292 :                     ; ===========================================================================
   19887/   10292 :                     
   19888/   10292 :                     Obj55_ChkDel:				; XREF: Obj55_DropFly
   19889/   10292 : 4A28 0001           		tst.b	1(a0)
   19890/   10296 : 6A00 D4B2           		bpl.w	DeleteObject
   19891/   1029A : 4E75                		rts	
   19892/   1029C :                     ; ===========================================================================
   19893/   1029C :                     
   19894/   1029C :                     Obj55_PlaySnd:				; XREF: Obj55_Index2
   19895/   1029C : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   19896/   102A0 : 0200 000F           		andi.b	#$F,d0
   19897/   102A4 : 660A                		bne.s	loc_101A0
   19898/   102A6 : 303C 00C0           		move.w	#$C0,d0
   19899/   102AA : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play flapping sound
   19900/   102B0 :                     
   19901/   102B0 :                     loc_101A0:
   19902/   102B0 : 6100 D436           		bsr.w	SpeedToPos
   19903/   102B4 : 3038 D008           		move.w	($FFFFD008).w,d0
   19904/   102B8 : 9068 0008           		sub.w	8(a0),d0
   19905/   102BC : 6402                		bcc.s	loc_101B0
   19906/   102BE : 4440                		neg.w	d0
   19907/   102C0 :                     
   19908/   102C0 :                     loc_101B0:
   19909/   102C0 : 0C40 0080           		cmpi.w	#$80,d0
   19910/   102C4 : 6510                		bcs.s	locret_101C6
   19911/   102C6 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   19912/   102CA : D007                		add.b	d7,d0
   19913/   102CC : 0200 0007           		andi.b	#7,d0
   19914/   102D0 : 6604                		bne.s	locret_101C6
   19915/   102D2 : 5428 0025           		addq.b	#2,$25(a0)
   19916/   102D6 :                     
   19917/   102D6 :                     locret_101C6:
   19918/   102D6 : 4E75                		rts	
   19919/   102D8 :                     ; ===========================================================================
   19920/   102D8 :                     
   19921/   102D8 :                     Obj55_FlyUp:				; XREF: Obj55_Index2
   19922/   102D8 : 6100 D40E           		bsr.w	SpeedToPos
   19923/   102DC : 0468 0018 0012      		subi.w	#$18,$12(a0)	; make basaran fly upwards
   19924/   102E2 : 6100 4F36           		bsr.w	ObjHitCeiling
   19925/   102E6 : 4A41                		tst.w	d1		; has basaran hit the ceiling?
   19926/   102E8 : 6A1A                		bpl.s	locret_101F4	; if not, branch
   19927/   102EA : 9368 000C           		sub.w	d1,$C(a0)
   19928/   102EE : 0268 FFF8 0008      		andi.w	#$FFF8,8(a0)
   19929/   102F4 : 4268 0010           		clr.w	$10(a0)		; stop basaran moving
   19930/   102F8 : 4268 0012           		clr.w	$12(a0)
   19931/   102FC : 4228 001C           		clr.b	$1C(a0)
   19932/   10300 : 4228 0025           		clr.b	$25(a0)
   19933/   10304 :                     
   19934/   10304 :                     locret_101F4:
   19935/   10304 : 4E75                		rts	
   19936/   10306 :                     ; ===========================================================================
   19937/   10306 :                     
   19938/   10306 :                     Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
   19939/   10306 : 323C 0100           		move.w	#$100,d1
   19940/   1030A : 08E8 0000 0022      		bset	#0,$22(a0)
   19941/   10310 : 3038 D008           		move.w	($FFFFD008).w,d0
   19942/   10314 : 9068 0008           		sub.w	8(a0),d0
   19943/   10318 : 640A                		bcc.s	loc_10214
   19944/   1031A : 4440                		neg.w	d0
   19945/   1031C : 4441                		neg.w	d1
   19946/   1031E : 08A8 0000 0022      		bclr	#0,$22(a0)
   19947/   10324 :                     
   19948/   10324 :                     loc_10214:
   19949/   10324 : B042                		cmp.w	d2,d0
   19950/   10326 : 4E75                		rts	
   19951/   10328 :                     ; ===========================================================================
   19952/   10328 : 6100 D3BE           		bsr.w	SpeedToPos
   19953/   1032C : 6100 D3E0           		bsr.w	DisplaySprite
   19954/   10330 : 4A28 0001           		tst.b	1(a0)
   19955/   10334 : 6A00 D414           		bpl.w	DeleteObject
   19956/   10338 : 4E75                		rts	
   19957/   1033A :                     ; ===========================================================================
   19958/   1033A :                     Ani_obj55:
   19959/   1033A :                     		include	"_anim/obj55.asm"
(1)    1/   1033A :                     ; ---------------------------------------------------------------------------
(1)    2/   1033A :                     ; Animation script - Basaran enemy
(1)    3/   1033A :                     ; ---------------------------------------------------------------------------
(1)    4/   1033A : 0006                		dc.w byte_10230-Ani_obj55
(1)    5/   1033C : 000A                		dc.w byte_10234-Ani_obj55
(1)    6/   1033E : 000E                		dc.w byte_10238-Ani_obj55
(1)    7/   10340 : 0F00 FF00           byte_10230:	dc.b $F, 0, $FF, 0
(1)    8/   10344 : 0F01 FF00           byte_10234:	dc.b $F, 1, $FF, 0
(1)    9/   10348 : 0301 0203 02FF      byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
(1)   10/   1034E : (MACRO)             		align 2
(1)   10/   1034E :  (MACRO-2)                  cnop 0,2
(1)   10/   1034E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   19960/   1034E :                     
   19961/   1034E :                     ; ---------------------------------------------------------------------------
   19962/   1034E :                     ; Sprite mappings - Basaran enemy (MZ)
   19963/   1034E :                     ; ---------------------------------------------------------------------------
   19964/   1034E :                     Map_obj55:
   19965/   1034E :                     		include	"_maps/obj55.asm"
(1)    1/   1034E :                     ; ---------------------------------------------------------------------------
(1)    2/   1034E :                     ; Sprite mappings - Basaran enemy (MZ)
(1)    3/   1034E :                     ; ---------------------------------------------------------------------------
(1)    4/   1034E : 0008 000E           		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
(1)    5/   10352 : 001E 0033           		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
(1)    6/   10356 : 01                  byte_10246:	dc.b 1
(1)    7/   10357 : F406 0000 F8        		dc.b $F4, 6, 0,	0, $F8
(1)    8/   1035C : 03                  byte_1024C:	dc.b 3
(1)    9/   1035D : F20E 0006 F4        		dc.b $F2, $E, 0, 6, $F4
(1)   10/   10362 : 0A04 0012 FC        		dc.b $A, 4, 0, $12, $FC
(1)   11/   10367 : 0200 0027 0C        		dc.b 2,	0, 0, $27, $C
(1)   12/   1036C : 04                  byte_1025C:	dc.b 4
(1)   13/   1036D : F804 0014 F8        		dc.b $F8, 4, 0,	$14, $F8
(1)   14/   10372 : 000C 0016 F0        		dc.b 0,	$C, 0, $16, $F0
(1)   15/   10377 : 0804 001A 00        		dc.b 8,	4, 0, $1A, 0
(1)   16/   1037C : 0000 0028 0C        		dc.b 0,	0, 0, $28, $C
(1)   17/   10381 : 04                  byte_10271:	dc.b 4
(1)   18/   10382 : F609 001C F5        		dc.b $F6, 9, 0,	$1C, $F5
(1)   19/   10387 : 0608 0022 F4        		dc.b 6,	8, 0, $22, $F4
(1)   20/   1038C : 0E04 0025 F4        		dc.b $E, 4, 0, $25, $F4
(1)   21/   10391 : FE00 0027 0C        		dc.b $FE, 0, 0,	$27, $C
(1)   22/   10396 : (MACRO)             		align 2
(1)   22/   10396 :  (MACRO-2)                  cnop 0,2
(1)   22/   10396 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   19966/   10396 :                     
   19967/   10396 :                     ; ===========================================================================
   19968/   10396 :                     ; ---------------------------------------------------------------------------
   19969/   10396 :                     ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
   19970/   10396 :                     ; ---------------------------------------------------------------------------
   19971/   10396 :                     
   19972/   10396 :                     Obj56:					; XREF: Obj_Index
   19973/   10396 : 7000                		moveq	#0,d0
   19974/   10398 : 1028 0024           		move.b	$24(a0),d0
   19975/   1039C : 323B 0006           		move.w	Obj56_Index(pc,d0.w),d1
   19976/   103A0 : 4EFB 1002           		jmp	Obj56_Index(pc,d1.w)
   19977/   103A4 :                     ; ===========================================================================
   19978/   103A4 : 0014                Obj56_Index:	dc.w Obj56_Main-Obj56_Index
   19979/   103A6 : 00E8                		dc.w Obj56_Action-Obj56_Index
   19980/   103A8 :                     
   19981/   103A8 : 1010                Obj56_Var:	dc.b  $10, $10		; width, height
   19982/   103AA : 2020                		dc.b  $20, $20
   19983/   103AC : 1020                		dc.b  $10, $20
   19984/   103AE : 201A                		dc.b  $20, $1A
   19985/   103B0 : 1027                		dc.b  $10, $27
   19986/   103B2 : 1010                		dc.b  $10, $10
   19987/   103B4 : 0820                		dc.b	8, $20
   19988/   103B6 : 4010                		dc.b  $40, $10
   19989/   103B8 :                     ; ===========================================================================
   19990/   103B8 :                     
   19991/   103B8 :                     Obj56_Main:				; XREF: Obj56_Index
   19992/   103B8 : 5428 0024           		addq.b	#2,$24(a0)
   19993/   103BC : 217C 0001 0810 0004 		move.l	#Map_obj56,4(a0)
   19994/   103C4 : 317C 4000 0002      		move.w	#$4000,2(a0)
   19995/   103CA : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   19996/   103D0 : 6606                		bne.s	loc_102C8
   19997/   103D2 : 317C 43C4 0002      		move.w	#$43C4,2(a0)	; LZ specific code
   19998/   103D8 :                     
   19999/   103D8 :                     loc_102C8:
   20000/   103D8 : 117C 0004 0001      		move.b	#4,1(a0)
   20001/   103DE : 117C 0003 0018      		move.b	#3,$18(a0)
   20002/   103E4 : 7000                		moveq	#0,d0
   20003/   103E6 : 1028 0028           		move.b	$28(a0),d0
   20004/   103EA : E648                		lsr.w	#3,d0
   20005/   103EC : 0240 000E           		andi.w	#$E,d0
   20006/   103F0 : 45FB 00B6           		lea	Obj56_Var(pc,d0.w),a2
   20007/   103F4 : 115A 0019           		move.b	(a2)+,$19(a0)
   20008/   103F8 : 1152 0016           		move.b	(a2),$16(a0)
   20009/   103FC : E248                		lsr.w	#1,d0
   20010/   103FE : 1140 001A           		move.b	d0,$1A(a0)
   20011/   10402 : 3168 0008 0034      		move.w	8(a0),$34(a0)
   20012/   10408 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   20013/   1040E : 7000                		moveq	#0,d0
   20014/   10410 : 1012                		move.b	(a2),d0
   20015/   10412 : D040                		add.w	d0,d0
   20016/   10414 : 3140 003A           		move.w	d0,$3A(a0)
   20017/   10418 : 7000                		moveq	#0,d0
   20018/   1041A : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   20019/   10420 : 6720                		beq.s	loc_10332
   20020/   10422 : 1028 0028           		move.b	$28(a0),d0	; SYZ/SLZ specific code
   20021/   10426 : 0240 000F           		andi.w	#$F,d0
   20022/   1042A : 5140                		subq.w	#8,d0
   20023/   1042C : 6514                		bcs.s	loc_10332
   20024/   1042E : E548                		lsl.w	#2,d0
   20025/   10430 : 45F8 FE8A           		lea	($FFFFFE8A).w,a2
   20026/   10434 : 45F2 0000           		lea	(a2,d0.w),a2
   20027/   10438 : 4A52                		tst.w	(a2)
   20028/   1043A : 6A06                		bpl.s	loc_10332
   20029/   1043C : 0868 0000 0022      		bchg	#0,$22(a0)
   20030/   10442 :                     
   20031/   10442 :                     loc_10332:
   20032/   10442 : 1028 0028           		move.b	$28(a0),d0
   20033/   10446 : 6A44                		bpl.s	Obj56_Action
   20034/   10448 : 0200 000F           		andi.b	#$F,d0
   20035/   1044C : 1140 003C           		move.b	d0,$3C(a0)
   20036/   10450 : 117C 0005 0028      		move.b	#5,$28(a0)
   20037/   10456 : 0C28 0007 001A      		cmpi.b	#7,$1A(a0)
   20038/   1045C : 660C                		bne.s	Obj56_ChkGone
   20039/   1045E : 117C 000C 0028      		move.b	#$C,$28(a0)
   20040/   10464 : 317C 0080 003A      		move.w	#$80,$3A(a0)
   20041/   1046A :                     
   20042/   1046A :                     Obj56_ChkGone:
   20043/   1046A : 45F8 FC00           		lea	($FFFFFC00).w,a2
   20044/   1046E : 7000                		moveq	#0,d0
   20045/   10470 : 1028 0023           		move.b	$23(a0),d0
   20046/   10474 : 6716                		beq.s	Obj56_Action
   20047/   10476 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   20048/   1047C : 0832 0000 0002      		btst	#0,2(a2,d0.w)
   20049/   10482 : 6708                		beq.s	Obj56_Action
   20050/   10484 : 5228 0028           		addq.b	#1,$28(a0)
   20051/   10488 : 4268 003A           		clr.w	$3A(a0)
   20052/   1048C :                     
   20053/   1048C :                     Obj56_Action:				; XREF: Obj56_Index
   20054/   1048C : 3F28 0008           		move.w	8(a0),-(sp)
   20055/   10490 : 7000                		moveq	#0,d0
   20056/   10492 : 1028 0028           		move.b	$28(a0),d0	; get object type
   20057/   10496 : 0240 000F           		andi.w	#$F,d0		; read only the	2nd digit
   20058/   1049A : D040                		add.w	d0,d0
   20059/   1049C : 323B 0048           		move.w	Obj56_TypeIndex(pc,d0.w),d1
   20060/   104A0 : 4EBB 1044           		jsr	Obj56_TypeIndex(pc,d1.w)
   20061/   104A4 : 381F                		move.w	(sp)+,d4
   20062/   104A6 : 4A28 0001           		tst.b	1(a0)
   20063/   104AA : 6A18                		bpl.s	Obj56_ChkDel
   20064/   104AC : 7200                		moveq	#0,d1
   20065/   104AE : 1228 0019           		move.b	$19(a0),d1
   20066/   104B2 : 0641 000B           		addi.w	#$B,d1
   20067/   104B6 : 7400                		moveq	#0,d2
   20068/   104B8 : 1428 0016           		move.b	$16(a0),d2
   20069/   104BC : 3602                		move.w	d2,d3
   20070/   104BE : 5243                		addq.w	#1,d3
   20071/   104C0 : 6100 F624           		bsr.w	SolidObject
   20072/   104C4 :                     
   20073/   104C4 :                     Obj56_ChkDel:
   20074/   104C4 : 3028 0034           		move.w	$34(a0),d0
   20075/   104C8 : 0240 FF80           		andi.w	#$FF80,d0
   20076/   104CC : 3238 F700           		move.w	($FFFFF700).w,d1
   20077/   104D0 : 0441 0080           		subi.w	#$80,d1
   20078/   104D4 : 0241 FF80           		andi.w	#$FF80,d1
   20079/   104D8 : 9041                		sub.w	d1,d0
   20080/   104DA : 0C40 0280           		cmpi.w	#$280,d0
   20081/   104DE : 6200 D26A           		bhi.w	DeleteObject
   20082/   104E2 : 6000 D22A           		bra.w	DisplaySprite
   20083/   104E6 :                     ; ===========================================================================
   20084/   104E6 : 001C 001E           Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
   20085/   104EA : 002A 004C           		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
   20086/   104EE : 0058 007A           		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
   20087/   104F2 : 010E 0172           		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
   20088/   104F6 : 026A 027C           		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
   20089/   104FA : 028C 029C           		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
   20090/   104FE : 01A4 0206           		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
   20091/   10502 :                     ; ===========================================================================
   20092/   10502 :                     
   20093/   10502 :                     Obj56_Type00:				; XREF: Obj56_TypeIndex
   20094/   10502 : 4E75                		rts	
   20095/   10504 :                     ; ===========================================================================
   20096/   10504 :                     
   20097/   10504 :                     Obj56_Type01:				; XREF: Obj56_TypeIndex
   20098/   10504 : 323C 0040           		move.w	#$40,d1
   20099/   10508 : 7000                		moveq	#0,d0
   20100/   1050A : 1038 FE68           		move.b	($FFFFFE68).w,d0
   20101/   1050E : 600A                		bra.s	Obj56_Move_LR
   20102/   10510 :                     ; ===========================================================================
   20103/   10510 :                     
   20104/   10510 :                     Obj56_Type02:				; XREF: Obj56_TypeIndex
   20105/   10510 : 323C 0080           		move.w	#$80,d1
   20106/   10514 : 7000                		moveq	#0,d0
   20107/   10516 : 1038 FE7C           		move.b	($FFFFFE7C).w,d0
   20108/   1051A :                     
   20109/   1051A :                     Obj56_Move_LR:
   20110/   1051A : 0828 0000 0022      		btst	#0,$22(a0)
   20111/   10520 : 6704                		beq.s	loc_10416
   20112/   10522 : 4440                		neg.w	d0
   20113/   10524 : D041                		add.w	d1,d0
   20114/   10526 :                     
   20115/   10526 :                     loc_10416:
   20116/   10526 : 3228 0034           		move.w	$34(a0),d1
   20117/   1052A : 9240                		sub.w	d0,d1
   20118/   1052C : 3141 0008           		move.w	d1,8(a0)	; move object horizontally
   20119/   10530 : 4E75                		rts	
   20120/   10532 :                     ; ===========================================================================
   20121/   10532 :                     
   20122/   10532 :                     Obj56_Type03:				; XREF: Obj56_TypeIndex
   20123/   10532 : 323C 0040           		move.w	#$40,d1
   20124/   10536 : 7000                		moveq	#0,d0
   20125/   10538 : 1038 FE68           		move.b	($FFFFFE68).w,d0
   20126/   1053C : 600A                		bra.s	Obj56_Move_UD
   20127/   1053E :                     ; ===========================================================================
   20128/   1053E :                     
   20129/   1053E :                     Obj56_Type04:				; XREF: Obj56_TypeIndex
   20130/   1053E : 323C 0080           		move.w	#$80,d1
   20131/   10542 : 7000                		moveq	#0,d0
   20132/   10544 : 1038 FE7C           		move.b	($FFFFFE7C).w,d0
   20133/   10548 :                     
   20134/   10548 :                     Obj56_Move_UD:
   20135/   10548 : 0828 0000 0022      		btst	#0,$22(a0)
   20136/   1054E : 6704                		beq.s	loc_10444
   20137/   10550 : 4440                		neg.w	d0
   20138/   10552 : D041                		add.w	d1,d0
   20139/   10554 :                     
   20140/   10554 :                     loc_10444:
   20141/   10554 : 3228 0030           		move.w	$30(a0),d1
   20142/   10558 : 9240                		sub.w	d0,d1
   20143/   1055A : 3141 000C           		move.w	d1,$C(a0)	; move object vertically
   20144/   1055E : 4E75                		rts	
   20145/   10560 :                     ; ===========================================================================
   20146/   10560 :                     
   20147/   10560 :                     Obj56_Type05:				; XREF: Obj56_TypeIndex
   20148/   10560 : 4A28 0038           		tst.b	$38(a0)
   20149/   10564 : 664E                		bne.s	loc_104A4
   20150/   10566 : 0C78 0100 FE10      		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
   20151/   1056C : 661C                		bne.s	loc_1047A	; if not, branch
   20152/   1056E : 0C28 0003 003C      		cmpi.b	#3,$3C(a0)
   20153/   10574 : 6614                		bne.s	loc_1047A
   20154/   10576 : 4238 F7C9           		clr.b	($FFFFF7C9).w
   20155/   1057A : 3038 D008           		move.w	($FFFFD008).w,d0
   20156/   1057E : B068 0008           		cmp.w	8(a0),d0
   20157/   10582 : 6406                		bcc.s	loc_1047A
   20158/   10584 : 11FC 0001 F7C9      		move.b	#1,($FFFFF7C9).w
   20159/   1058A :                     
   20160/   1058A :                     loc_1047A:
   20161/   1058A : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   20162/   1058E : 7000                		moveq	#0,d0
   20163/   10590 : 1028 003C           		move.b	$3C(a0),d0
   20164/   10594 : 0832 0000 0000      		btst	#0,(a2,d0.w)
   20165/   1059A : 6722                		beq.s	loc_104AE
   20166/   1059C : 0C78 0100 FE10      		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
   20167/   105A2 : 660A                		bne.s	loc_1049E	; if not, branch
   20168/   105A4 : 0C00 0003           		cmpi.b	#3,d0
   20169/   105A8 : 6604                		bne.s	loc_1049E
   20170/   105AA : 4238 F7C9           		clr.b	($FFFFF7C9).w
   20171/   105AE :                     
   20172/   105AE :                     loc_1049E:
   20173/   105AE : 117C 0001 0038      		move.b	#1,$38(a0)
   20174/   105B4 :                     
   20175/   105B4 :                     loc_104A4:
   20176/   105B4 : 4A68 003A           		tst.w	$3A(a0)
   20177/   105B8 : 671E                		beq.s	loc_104C8
   20178/   105BA : 5568 003A           		subq.w	#2,$3A(a0)
   20179/   105BE :                     
   20180/   105BE :                     loc_104AE:
   20181/   105BE : 3028 003A           		move.w	$3A(a0),d0
   20182/   105C2 : 0828 0000 0022      		btst	#0,$22(a0)
   20183/   105C8 : 6702                		beq.s	loc_104BC
   20184/   105CA : 4440                		neg.w	d0
   20185/   105CC :                     
   20186/   105CC :                     loc_104BC:
   20187/   105CC : 3228 0030           		move.w	$30(a0),d1
   20188/   105D0 : D240                		add.w	d0,d1
   20189/   105D2 : 3141 000C           		move.w	d1,$C(a0)
   20190/   105D6 : 4E75                		rts	
   20191/   105D8 :                     ; ===========================================================================
   20192/   105D8 :                     
   20193/   105D8 :                     loc_104C8:
   20194/   105D8 : 5228 0028           		addq.b	#1,$28(a0)
   20195/   105DC : 4228 0038           		clr.b	$38(a0)
   20196/   105E0 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   20197/   105E4 : 7000                		moveq	#0,d0
   20198/   105E6 : 1028 0023           		move.b	$23(a0),d0
   20199/   105EA : 67D2                		beq.s	loc_104AE
   20200/   105EC : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   20201/   105F2 : 60CA                		bra.s	loc_104AE
   20202/   105F4 :                     ; ===========================================================================
   20203/   105F4 :                     
   20204/   105F4 :                     Obj56_Type06:				; XREF: Obj56_TypeIndex
   20205/   105F4 : 4A28 0038           		tst.b	$38(a0)
   20206/   105F8 : 6616                		bne.s	loc_10500
   20207/   105FA : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   20208/   105FE : 7000                		moveq	#0,d0
   20209/   10600 : 1028 003C           		move.b	$3C(a0),d0
   20210/   10604 : 4A32 0000           		tst.b	(a2,d0.w)
   20211/   10608 : 6A18                		bpl.s	loc_10512
   20212/   1060A : 117C 0001 0038      		move.b	#1,$38(a0)
   20213/   10610 :                     
   20214/   10610 :                     loc_10500:
   20215/   10610 : 7000                		moveq	#0,d0
   20216/   10612 : 1028 0016           		move.b	$16(a0),d0
   20217/   10616 : D040                		add.w	d0,d0
   20218/   10618 : B068 003A           		cmp.w	$3A(a0),d0
   20219/   1061C : 671E                		beq.s	loc_1052C
   20220/   1061E : 5468 003A           		addq.w	#2,$3A(a0)
   20221/   10622 :                     
   20222/   10622 :                     loc_10512:
   20223/   10622 : 3028 003A           		move.w	$3A(a0),d0
   20224/   10626 : 0828 0000 0022      		btst	#0,$22(a0)
   20225/   1062C : 6702                		beq.s	loc_10520
   20226/   1062E : 4440                		neg.w	d0
   20227/   10630 :                     
   20228/   10630 :                     loc_10520:
   20229/   10630 : 3228 0030           		move.w	$30(a0),d1
   20230/   10634 : D240                		add.w	d0,d1
   20231/   10636 : 3141 000C           		move.w	d1,$C(a0)
   20232/   1063A : 4E75                		rts	
   20233/   1063C :                     ; ===========================================================================
   20234/   1063C :                     
   20235/   1063C :                     loc_1052C:
   20236/   1063C : 5328 0028           		subq.b	#1,$28(a0)
   20237/   10640 : 4228 0038           		clr.b	$38(a0)
   20238/   10644 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   20239/   10648 : 7000                		moveq	#0,d0
   20240/   1064A : 1028 0023           		move.b	$23(a0),d0
   20241/   1064E : 67D2                		beq.s	loc_10512
   20242/   10650 : 08B2 0000 0002      		bclr	#0,2(a2,d0.w)
   20243/   10656 : 60CA                		bra.s	loc_10512
   20244/   10658 :                     ; ===========================================================================
   20245/   10658 :                     
   20246/   10658 :                     Obj56_Type07:				; XREF: Obj56_TypeIndex
   20247/   10658 : 4A28 0038           		tst.b	$38(a0)
   20248/   1065C : 6610                		bne.s	loc_1055E
   20249/   1065E : 4A38 F7EF           		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
   20250/   10662 : 6724                		beq.s	locret_10578
   20251/   10664 : 117C 0001 0038      		move.b	#1,$38(a0)
   20252/   1066A : 4268 003A           		clr.w	$3A(a0)
   20253/   1066E :                     
   20254/   1066E :                     loc_1055E:
   20255/   1066E : 5268 0008           		addq.w	#1,8(a0)
   20256/   10672 : 3168 0008 0034      		move.w	8(a0),$34(a0)
   20257/   10678 : 5268 003A           		addq.w	#1,$3A(a0)
   20258/   1067C : 0C68 0380 003A      		cmpi.w	#$380,$3A(a0)
   20259/   10682 : 6604                		bne.s	locret_10578
   20260/   10684 : 4228 0028           		clr.b	$28(a0)
   20261/   10688 :                     
   20262/   10688 :                     locret_10578:
   20263/   10688 : 4E75                		rts	
   20264/   1068A :                     ; ===========================================================================
   20265/   1068A :                     
   20266/   1068A :                     Obj56_Type0C:				; XREF: Obj56_TypeIndex
   20267/   1068A : 4A28 0038           		tst.b	$38(a0)
   20268/   1068E : 6618                		bne.s	loc_10598
   20269/   10690 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   20270/   10694 : 7000                		moveq	#0,d0
   20271/   10696 : 1028 003C           		move.b	$3C(a0),d0
   20272/   1069A : 0832 0000 0000      		btst	#0,(a2,d0.w)
   20273/   106A0 : 6710                		beq.s	loc_105A2
   20274/   106A2 : 117C 0001 0038      		move.b	#1,$38(a0)
   20275/   106A8 :                     
   20276/   106A8 :                     loc_10598:
   20277/   106A8 : 4A68 003A           		tst.w	$3A(a0)
   20278/   106AC : 6722                		beq.s	loc_105C0
   20279/   106AE : 5568 003A           		subq.w	#2,$3A(a0)
   20280/   106B2 :                     
   20281/   106B2 :                     loc_105A2:
   20282/   106B2 : 3028 003A           		move.w	$3A(a0),d0
   20283/   106B6 : 0828 0000 0022      		btst	#0,$22(a0)
   20284/   106BC : 6706                		beq.s	loc_105B4
   20285/   106BE : 4440                		neg.w	d0
   20286/   106C0 : 0640 0080           		addi.w	#$80,d0
   20287/   106C4 :                     
   20288/   106C4 :                     loc_105B4:
   20289/   106C4 : 3228 0034           		move.w	$34(a0),d1
   20290/   106C8 : D240                		add.w	d0,d1
   20291/   106CA : 3141 0008           		move.w	d1,8(a0)
   20292/   106CE : 4E75                		rts	
   20293/   106D0 :                     ; ===========================================================================
   20294/   106D0 :                     
   20295/   106D0 :                     loc_105C0:
   20296/   106D0 : 5228 0028           		addq.b	#1,$28(a0)
   20297/   106D4 : 4228 0038           		clr.b	$38(a0)
   20298/   106D8 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   20299/   106DC : 7000                		moveq	#0,d0
   20300/   106DE : 1028 0023           		move.b	$23(a0),d0
   20301/   106E2 : 67CE                		beq.s	loc_105A2
   20302/   106E4 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   20303/   106EA : 60C6                		bra.s	loc_105A2
   20304/   106EC :                     ; ===========================================================================
   20305/   106EC :                     
   20306/   106EC :                     Obj56_Type0D:				; XREF: Obj56_TypeIndex
   20307/   106EC : 4A28 0038           		tst.b	$38(a0)
   20308/   106F0 : 6616                		bne.s	loc_105F8
   20309/   106F2 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   20310/   106F6 : 7000                		moveq	#0,d0
   20311/   106F8 : 1028 003C           		move.b	$3C(a0),d0
   20312/   106FC : 4A32 0000           		tst.b	(a2,d0.w)
   20313/   10700 : 6A14                		bpl.s	loc_10606
   20314/   10702 : 117C 0001 0038      		move.b	#1,$38(a0)
   20315/   10708 :                     
   20316/   10708 :                     loc_105F8:
   20317/   10708 : 303C 0080           		move.w	#$80,d0
   20318/   1070C : B068 003A           		cmp.w	$3A(a0),d0
   20319/   10710 : 6722                		beq.s	loc_10624
   20320/   10712 : 5468 003A           		addq.w	#2,$3A(a0)
   20321/   10716 :                     
   20322/   10716 :                     loc_10606:
   20323/   10716 : 3028 003A           		move.w	$3A(a0),d0
   20324/   1071A : 0828 0000 0022      		btst	#0,$22(a0)
   20325/   10720 : 6706                		beq.s	loc_10618
   20326/   10722 : 4440                		neg.w	d0
   20327/   10724 : 0640 0080           		addi.w	#$80,d0
   20328/   10728 :                     
   20329/   10728 :                     loc_10618:
   20330/   10728 : 3228 0034           		move.w	$34(a0),d1
   20331/   1072C : D240                		add.w	d0,d1
   20332/   1072E : 3141 0008           		move.w	d1,8(a0)
   20333/   10732 : 4E75                		rts	
   20334/   10734 :                     ; ===========================================================================
   20335/   10734 :                     
   20336/   10734 :                     loc_10624:
   20337/   10734 : 5328 0028           		subq.b	#1,$28(a0)
   20338/   10738 : 4228 0038           		clr.b	$38(a0)
   20339/   1073C : 45F8 FC00           		lea	($FFFFFC00).w,a2
   20340/   10740 : 7000                		moveq	#0,d0
   20341/   10742 : 1028 0023           		move.b	$23(a0),d0
   20342/   10746 : 67CE                		beq.s	loc_10606
   20343/   10748 : 08B2 0000 0002      		bclr	#0,2(a2,d0.w)
   20344/   1074E : 60C6                		bra.s	loc_10606
   20345/   10750 :                     ; ===========================================================================
   20346/   10750 :                     
   20347/   10750 :                     Obj56_Type08:				; XREF: Obj56_TypeIndex
   20348/   10750 : 323C 0010           		move.w	#$10,d1
   20349/   10754 : 7000                		moveq	#0,d0
   20350/   10756 : 1038 FE88           		move.b	($FFFFFE88).w,d0
   20351/   1075A : E248                		lsr.w	#1,d0
   20352/   1075C : 3638 FE8A           		move.w	($FFFFFE8A).w,d3
   20353/   10760 : 602E                		bra.s	Obj56_Move_Sqr
   20354/   10762 :                     ; ===========================================================================
   20355/   10762 :                     
   20356/   10762 :                     Obj56_Type09:				; XREF: Obj56_TypeIndex
   20357/   10762 : 323C 0030           		move.w	#$30,d1
   20358/   10766 : 7000                		moveq	#0,d0
   20359/   10768 : 1038 FE8C           		move.b	($FFFFFE8C).w,d0
   20360/   1076C : 3638 FE8E           		move.w	($FFFFFE8E).w,d3
   20361/   10770 : 601E                		bra.s	Obj56_Move_Sqr
   20362/   10772 :                     ; ===========================================================================
   20363/   10772 :                     
   20364/   10772 :                     Obj56_Type0A:				; XREF: Obj56_TypeIndex
   20365/   10772 : 323C 0050           		move.w	#$50,d1
   20366/   10776 : 7000                		moveq	#0,d0
   20367/   10778 : 1038 FE90           		move.b	($FFFFFE90).w,d0
   20368/   1077C : 3638 FE92           		move.w	($FFFFFE92).w,d3
   20369/   10780 : 600E                		bra.s	Obj56_Move_Sqr
   20370/   10782 :                     ; ===========================================================================
   20371/   10782 :                     
   20372/   10782 :                     Obj56_Type0B:				; XREF: Obj56_TypeIndex
   20373/   10782 : 323C 0070           		move.w	#$70,d1
   20374/   10786 : 7000                		moveq	#0,d0
   20375/   10788 : 1038 FE94           		move.b	($FFFFFE94).w,d0
   20376/   1078C : 3638 FE96           		move.w	($FFFFFE96).w,d3
   20377/   10790 :                     
   20378/   10790 :                     Obj56_Move_Sqr:
   20379/   10790 : 4A43                		tst.w	d3
   20380/   10792 : 660A                		bne.s	loc_1068E
   20381/   10794 : 5228 0022           		addq.b	#1,$22(a0)
   20382/   10798 : 0228 0003 0022      		andi.b	#3,$22(a0)
   20383/   1079E :                     
   20384/   1079E :                     loc_1068E:
   20385/   1079E : 1428 0022           		move.b	$22(a0),d2
   20386/   107A2 : 0202 0003           		andi.b	#3,d2
   20387/   107A6 : 6616                		bne.s	loc_106AE
   20388/   107A8 : 9041                		sub.w	d1,d0
   20389/   107AA : D068 0034           		add.w	$34(a0),d0
   20390/   107AE : 3140 0008           		move.w	d0,8(a0)
   20391/   107B2 : 4441                		neg.w	d1
   20392/   107B4 : D268 0030           		add.w	$30(a0),d1
   20393/   107B8 : 3141 000C           		move.w	d1,$C(a0)
   20394/   107BC : 4E75                		rts	
   20395/   107BE :                     ; ===========================================================================
   20396/   107BE :                     
   20397/   107BE :                     loc_106AE:
   20398/   107BE : 5302                		subq.b	#1,d2
   20399/   107C0 : 661A                		bne.s	loc_106CC
   20400/   107C2 : 5341                		subq.w	#1,d1
   20401/   107C4 : 9041                		sub.w	d1,d0
   20402/   107C6 : 4440                		neg.w	d0
   20403/   107C8 : D068 0030           		add.w	$30(a0),d0
   20404/   107CC : 3140 000C           		move.w	d0,$C(a0)
   20405/   107D0 : 5241                		addq.w	#1,d1
   20406/   107D2 : D268 0034           		add.w	$34(a0),d1
   20407/   107D6 : 3141 0008           		move.w	d1,8(a0)
   20408/   107DA : 4E75                		rts	
   20409/   107DC :                     ; ===========================================================================
   20410/   107DC :                     
   20411/   107DC :                     loc_106CC:
   20412/   107DC : 5302                		subq.b	#1,d2
   20413/   107DE : 661A                		bne.s	loc_106EA
   20414/   107E0 : 5341                		subq.w	#1,d1
   20415/   107E2 : 9041                		sub.w	d1,d0
   20416/   107E4 : 4440                		neg.w	d0
   20417/   107E6 : D068 0034           		add.w	$34(a0),d0
   20418/   107EA : 3140 0008           		move.w	d0,8(a0)
   20419/   107EE : 5241                		addq.w	#1,d1
   20420/   107F0 : D268 0030           		add.w	$30(a0),d1
   20421/   107F4 : 3141 000C           		move.w	d1,$C(a0)
   20422/   107F8 : 4E75                		rts	
   20423/   107FA :                     ; ===========================================================================
   20424/   107FA :                     
   20425/   107FA :                     loc_106EA:
   20426/   107FA : 9041                		sub.w	d1,d0
   20427/   107FC : D068 0030           		add.w	$30(a0),d0
   20428/   10800 : 3140 000C           		move.w	d0,$C(a0)
   20429/   10804 : 4441                		neg.w	d1
   20430/   10806 : D268 0034           		add.w	$34(a0),d1
   20431/   1080A : 3141 0008           		move.w	d1,8(a0)
   20432/   1080E : 4E75                		rts	
   20433/   10810 :                     ; ===========================================================================
   20434/   10810 :                     ; ---------------------------------------------------------------------------
   20435/   10810 :                     ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
   20436/   10810 :                     ; ---------------------------------------------------------------------------
   20437/   10810 :                     Map_obj56:
   20438/   10810 :                     		include	"_maps/obj56.asm"
(1)    1/   10810 :                     ; ---------------------------------------------------------------------------
(1)    2/   10810 :                     ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
(1)    3/   10810 :                     ; ---------------------------------------------------------------------------
(1)    4/   10810 : 0010 0016           		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
(1)    5/   10814 : 002B 0036           		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
(1)    6/   10818 : 004B 005B           		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
(1)    7/   1081C : 0061 006C           		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
(1)    8/   10820 : 01                  byte_10710:	dc.b 1
(1)    9/   10821 : F00F 0061 F0        		dc.b $F0, $F, 0, $61, $F0
(1)   10/   10826 : 04                  byte_10716:	dc.b 4
(1)   11/   10827 : E00F 0061 E0        		dc.b $E0, $F, 0, $61, $E0
(1)   12/   1082C : E00F 0061 00        		dc.b $E0, $F, 0, $61, 0
(1)   13/   10831 : 000F 0061 E0        		dc.b 0,	$F, 0, $61, $E0
(1)   14/   10836 : 000F 0061 00        		dc.b 0,	$F, 0, $61, 0
(1)   15/   1083B : 02                  byte_1072B:	dc.b 2
(1)   16/   1083C : E00F 0061 F0        		dc.b $E0, $F, 0, $61, $F0
(1)   17/   10841 : 000F 0061 F0        		dc.b 0,	$F, 0, $61, $F0
(1)   18/   10846 : 04                  byte_10736:	dc.b 4
(1)   19/   10847 : E60F 0081 E0        		dc.b $E6, $F, 0, $81, $E0
(1)   20/   1084C : E60F 0081 00        		dc.b $E6, $F, 0, $81, 0
(1)   21/   10851 : 000F 0081 E0        		dc.b 0,	$F, 0, $81, $E0
(1)   22/   10856 : 000F 0081 00        		dc.b 0,	$F, 0, $81, 0
(1)   23/   1085B : 03                  byte_1074B:	dc.b 3
(1)   24/   1085C : D90F 0081 F0        		dc.b $D9, $F, 0, $81, $F0
(1)   25/   10861 : F30F 0081 F0        		dc.b $F3, $F, 0, $81, $F0
(1)   26/   10866 : 0D0F 0081 F0        		dc.b $D, $F, 0,	$81, $F0
(1)   27/   1086B : 01                  byte_1075B:	dc.b 1
(1)   28/   1086C : F00F 0021 F0        		dc.b $F0, $F, 0, $21, $F0
(1)   29/   10871 : 02                  byte_10761:	dc.b 2
(1)   30/   10872 : E007 0000 F8        		dc.b $E0, 7, 0,	0, $F8
(1)   31/   10877 : 0007 1000 F8        		dc.b 0,	7, $10,	0, $F8
(1)   32/   1087C : 04                  byte_1076C:	dc.b 4
(1)   33/   1087D : F00F 0022 C0        		dc.b $F0, $F, 0, $22, $C0
(1)   34/   10882 : F00F 0022 E0        		dc.b $F0, $F, 0, $22, $E0
(1)   35/   10887 : F00F 0022 00        		dc.b $F0, $F, 0, $22, 0
(1)   36/   1088C : F00F 0022 20        		dc.b $F0, $F, 0, $22, $20
(1)   37/   10891 : (MACRO)             		align 2
(1)   37/   10891 :  (MACRO-2)                  cnop 0,2
(1)   37/   10891 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   37/   10891 : =$25                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   37/   10892 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   20439/   10892 :                     
   20440/   10892 :                     ; ===========================================================================
   20441/   10892 :                     ; ---------------------------------------------------------------------------
   20442/   10892 :                     ; Object 57 - spiked balls (SYZ, LZ)
   20443/   10892 :                     ; ---------------------------------------------------------------------------
   20444/   10892 :                     
   20445/   10892 :                     Obj57:					; XREF: Obj_Index
   20446/   10892 : 7000                		moveq	#0,d0
   20447/   10894 : 1028 0024           		move.b	$24(a0),d0
   20448/   10898 : 323B 0006           		move.w	Obj57_Index(pc,d0.w),d1
   20449/   1089C : 4EFB 1002           		jmp	Obj57_Index(pc,d1.w)
   20450/   108A0 :                     ; ===========================================================================
   20451/   108A0 : 0006                Obj57_Index:	dc.w Obj57_Main-Obj57_Index
   20452/   108A2 : 0126                		dc.w Obj57_Move-Obj57_Index
   20453/   108A4 : 01C2                		dc.w Obj57_Display-Obj57_Index
   20454/   108A6 :                     ; ===========================================================================
   20455/   108A6 :                     
   20456/   108A6 :                     Obj57_Main:				; XREF: Obj57_Index
   20457/   108A6 : 5428 0024           		addq.b	#2,$24(a0)
   20458/   108AA : 217C 0001 0A66 0004 		move.l	#Map_obj57,4(a0)
   20459/   108B2 : 317C 03BA 0002      		move.w	#$3BA,2(a0)
   20460/   108B8 : 117C 0004 0001      		move.b	#4,1(a0)
   20461/   108BE : 117C 0004 0018      		move.b	#4,$18(a0)
   20462/   108C4 : 117C 0008 0019      		move.b	#8,$19(a0)
   20463/   108CA : 3168 0008 003A      		move.w	8(a0),$3A(a0)
   20464/   108D0 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   20465/   108D6 : 117C 0098 0020      		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
   20466/   108DC : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   20467/   108E2 : 6614                		bne.s	loc_107E8
   20468/   108E4 : 117C 0000 0020      		move.b	#0,$20(a0)	; LZ specific code (chain doesn"t hurt)
   20469/   108EA : 317C 0310 0002      		move.w	#$310,2(a0)
   20470/   108F0 : 217C 0001 0A6E 0004 		move.l	#Map_obj57a,4(a0)
   20471/   108F8 :                     
   20472/   108F8 :                     loc_107E8:
   20473/   108F8 : 1228 0028           		move.b	$28(a0),d1	; get object type
   20474/   108FC : 0201 00F0           		andi.b	#$F0,d1		; read only the	1st digit
   20475/   10900 : 4881                		ext.w	d1
   20476/   10902 : E741                		asl.w	#3,d1		; multiply by 8
   20477/   10904 : 3141 003E           		move.w	d1,$3E(a0)	; set object twirl speed
   20478/   10908 : 1028 0022           		move.b	$22(a0),d0
   20479/   1090C : E418                		ror.b	#2,d0
   20480/   1090E : 0200 00C0           		andi.b	#-$40,d0
   20481/   10912 : 1140 0026           		move.b	d0,$26(a0)
   20482/   10916 : 45E8 0029           		lea	$29(a0),a2
   20483/   1091A : 1228 0028           		move.b	$28(a0),d1	; get object type
   20484/   1091E : 0241 0007           		andi.w	#7,d1		; read only the	2nd digit
   20485/   10922 : 14FC 0000           		move.b	#0,(a2)+
   20486/   10926 : 3601                		move.w	d1,d3
   20487/   10928 : E94B                		lsl.w	#4,d3
   20488/   1092A : 1143 003C           		move.b	d3,$3C(a0)
   20489/   1092E : 5341                		subq.w	#1,d1		; set chain length (type-1)
   20490/   10930 : 6572                		bcs.s	loc_10894
   20491/   10932 : 0828 0003 0028      		btst	#3,$28(a0)
   20492/   10938 : 6704                		beq.s	Obj57_MakeChain
   20493/   1093A : 5341                		subq.w	#1,d1
   20494/   1093C : 6566                		bcs.s	loc_10894
   20495/   1093E :                     
   20496/   1093E :                     Obj57_MakeChain:
   20497/   1093E : 6100 D256           		bsr.w	SingleObjLoad
   20498/   10942 : 6660                		bne.s	loc_10894
   20499/   10944 : 5228 0029           		addq.b	#1,$29(a0)
   20500/   10948 : 3A09                		move.w	a1,d5
   20501/   1094A : 0445 D000           		subi.w	#-$3000,d5
   20502/   1094E : EC4D                		lsr.w	#6,d5
   20503/   10950 : 0245 007F           		andi.w	#$7F,d5
   20504/   10954 : 14C5                		move.b	d5,(a2)+
   20505/   10956 : 137C 0004 0024      		move.b	#4,$24(a1)
   20506/   1095C : (MACRO)             		_move.b	0(a0),0(a1)
   20506/   1095C :  (MACRO-2)                          insn2op move.b, 0(a0),0(a1)
   20506/   1095C : 1368 0001 0001                              !move.b   1+0(a0),1+0(a1)
   20506/   1095F :                                             !org    *-3
   20506/   1095F : 00                                          !dc.b   0
   20506/   10961 :                                             !org    *+1
   20506/   10961 : 00                                          !dc.b   0
   20507/   10962 : 2368 0004 0004      		move.l	4(a0),4(a1)
   20508/   10968 : 3368 0002 0002      		move.w	2(a0),2(a1)
   20509/   1096E : 1368 0001 0001      		move.b	1(a0),1(a1)
   20510/   10974 : 1368 0018 0018      		move.b	$18(a0),$18(a1)
   20511/   1097A : 1368 0019 0019      		move.b	$19(a0),$19(a1)
   20512/   10980 : 1368 0020 0020      		move.b	$20(a0),$20(a1)
   20513/   10986 : 0403 0010           		subi.b	#$10,d3
   20514/   1098A : 1343 003C           		move.b	d3,$3C(a1)
   20515/   1098E : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
   20516/   10994 : 660A                		bne.s	loc_10890
   20517/   10996 : 4A03                		tst.b	d3
   20518/   10998 : 6606                		bne.s	loc_10890
   20519/   1099A : 137C 0002 001A      		move.b	#2,$1A(a1)
   20520/   109A0 :                     
   20521/   109A0 :                     loc_10890:
   20522/   109A0 : 51C9 FF9C           		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
   20523/   109A4 :                     
   20524/   109A4 :                     loc_10894:
   20525/   109A4 : 3A08                		move.w	a0,d5
   20526/   109A6 : 0445 D000           		subi.w	#-$3000,d5
   20527/   109AA : EC4D                		lsr.w	#6,d5
   20528/   109AC : 0245 007F           		andi.w	#$7F,d5
   20529/   109B0 : 14C5                		move.b	d5,(a2)+
   20530/   109B2 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   20531/   109B8 : 660C                		bne.s	Obj57_Move
   20532/   109BA : 117C 008B 0020      		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
   20533/   109C0 : 117C 0001 001A      		move.b	#1,$1A(a0)	; use different	frame
   20534/   109C6 :                     
   20535/   109C6 :                     Obj57_Move:				; XREF: Obj57_Index
   20536/   109C6 : 6100 0006           		bsr.w	Obj57_MoveSub
   20537/   109CA : 6000 0054           		bra.w	Obj57_ChkDel
   20538/   109CE :                     ; ===========================================================================
   20539/   109CE :                     
   20540/   109CE :                     Obj57_MoveSub:				; XREF: Obj57_Move
   20541/   109CE : 3028 003E           		move.w	$3E(a0),d0
   20542/   109D2 : D168 0026           		add.w	d0,$26(a0)
   20543/   109D6 : 1028 0026           		move.b	$26(a0),d0
   20544/   109DA : 4EB9 0000 29EA      		jsr	(CalcSine).l
   20545/   109E0 : 3428 0038           		move.w	$38(a0),d2
   20546/   109E4 : 3628 003A           		move.w	$3A(a0),d3
   20547/   109E8 : 45E8 0029           		lea	$29(a0),a2
   20548/   109EC : 7C00                		moveq	#0,d6
   20549/   109EE : 1C1A                		move.b	(a2)+,d6
   20550/   109F0 :                     
   20551/   109F0 :                     Obj57_MoveLoop:
   20552/   109F0 : 7800                		moveq	#0,d4
   20553/   109F2 : 181A                		move.b	(a2)+,d4
   20554/   109F4 : ED4C                		lsl.w	#6,d4
   20555/   109F6 : 0684 00FF D000      		addi.l	#$FFD000,d4
   20556/   109FC : 2244                		movea.l	d4,a1
   20557/   109FE : 7800                		moveq	#0,d4
   20558/   10A00 : 1829 003C           		move.b	$3C(a1),d4
   20559/   10A04 : 2A04                		move.l	d4,d5
   20560/   10A06 : C9C0                		muls.w	d0,d4
   20561/   10A08 : E084                		asr.l	#8,d4
   20562/   10A0A : CBC1                		muls.w	d1,d5
   20563/   10A0C : E085                		asr.l	#8,d5
   20564/   10A0E : D842                		add.w	d2,d4
   20565/   10A10 : DA43                		add.w	d3,d5
   20566/   10A12 : 3344 000C           		move.w	d4,$C(a1)
   20567/   10A16 : 3345 0008           		move.w	d5,8(a1)
   20568/   10A1A : 51CE FFD4           		dbf	d6,Obj57_MoveLoop
   20569/   10A1E : 4E75                		rts	
   20570/   10A20 :                     ; ===========================================================================
   20571/   10A20 :                     
   20572/   10A20 :                     Obj57_ChkDel:				; XREF: Obj57_Move
   20573/   10A20 : 3028 003A           		move.w	$3A(a0),d0
   20574/   10A24 : 0240 FF80           		andi.w	#$FF80,d0
   20575/   10A28 : 3238 F700           		move.w	($FFFFF700).w,d1
   20576/   10A2C : 0441 0080           		subi.w	#$80,d1
   20577/   10A30 : 0241 FF80           		andi.w	#$FF80,d1
   20578/   10A34 : 9041                		sub.w	d1,d0
   20579/   10A36 : 0C40 0280           		cmpi.w	#$280,d0
   20580/   10A3A : 6200 0006           		bhi.w	Obj57_Delete
   20581/   10A3E : 6000 CCCE           		bra.w	DisplaySprite
   20582/   10A42 :                     ; ===========================================================================
   20583/   10A42 :                     
   20584/   10A42 :                     Obj57_Delete:				; XREF: Obj57_ChkDel
   20585/   10A42 : 7400                		moveq	#0,d2
   20586/   10A44 : 45E8 0029           		lea	$29(a0),a2
   20587/   10A48 : 141A                		move.b	(a2)+,d2
   20588/   10A4A :                     
   20589/   10A4A :                     Obj57_DelLoop:
   20590/   10A4A : 7000                		moveq	#0,d0
   20591/   10A4C : 101A                		move.b	(a2)+,d0
   20592/   10A4E : ED48                		lsl.w	#6,d0
   20593/   10A50 : 0680 00FF D000      		addi.l	#$FFD000,d0
   20594/   10A56 : 2240                		movea.l	d0,a1
   20595/   10A58 : 6100 CCF2           		bsr.w	DeleteObject2
   20596/   10A5C : 51CA FFEC           		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
   20597/   10A60 :                     
   20598/   10A60 : 4E75                		rts	
   20599/   10A62 :                     ; ===========================================================================
   20600/   10A62 :                     
   20601/   10A62 :                     Obj57_Display:				; XREF: Obj57_Index
   20602/   10A62 : 6000 CCAA           		bra.w	DisplaySprite
   20603/   10A66 :                     ; ===========================================================================
   20604/   10A66 :                     ; ---------------------------------------------------------------------------
   20605/   10A66 :                     ; Sprite mappings - chain of spiked balls (SYZ)
   20606/   10A66 :                     ; ---------------------------------------------------------------------------
   20607/   10A66 :                     Map_obj57:
   20608/   10A66 :                     		include	"_maps/obj57syz.asm"
(1)    1/   10A66 :                     ; ---------------------------------------------------------------------------
(1)    2/   10A66 :                     ; Sprite mappings - chain of spiked balls (SYZ)
(1)    3/   10A66 :                     ; ---------------------------------------------------------------------------
(1)    4/   10A66 : 0002                		dc.w byte_10958-Map_obj57
(1)    5/   10A68 : 01                  byte_10958:	dc.b 1
(1)    6/   10A69 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)    7/   10A6E : (MACRO)             		align 2
(1)    7/   10A6E :  (MACRO-2)                  cnop 0,2
(1)    7/   10A6E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   20609/   10A6E :                     
   20610/   10A6E :                     ; ---------------------------------------------------------------------------
   20611/   10A6E :                     ; Sprite mappings - spiked ball	on a chain (LZ)
   20612/   10A6E :                     ; ---------------------------------------------------------------------------
   20613/   10A6E :                     Map_obj57a:
   20614/   10A6E :                     		include	"_maps/obj57lz.asm"
(1)    1/   10A6E :                     ; ---------------------------------------------------------------------------
(1)    2/   10A6E :                     ; Sprite mappings - spiked ball	on a chain (LZ)
(1)    3/   10A6E :                     ; ---------------------------------------------------------------------------
(1)    4/   10A6E : 0006                		dc.w byte_10964-Map_obj57a
(1)    5/   10A70 : 000C                		dc.w byte_1096A-Map_obj57a
(1)    6/   10A72 : 0012                		dc.w byte_10970-Map_obj57a
(1)    7/   10A74 : 01                  byte_10964:	dc.b 1
(1)    8/   10A75 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)    9/   10A7A : 01                  byte_1096A:	dc.b 1
(1)   10/   10A7B : F00F 0004 F0        		dc.b $F0, $F, 0, 4, $F0
(1)   11/   10A80 : 01                  byte_10970:	dc.b 1
(1)   12/   10A81 : F805 0014 F8        		dc.b $F8, 5, 0,	$14, $F8
(1)   13/   10A86 : (MACRO)             		align 2
(1)   13/   10A86 :  (MACRO-2)                  cnop 0,2
(1)   13/   10A86 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   20615/   10A86 :                     
   20616/   10A86 :                     ; ===========================================================================
   20617/   10A86 :                     ; ---------------------------------------------------------------------------
   20618/   10A86 :                     ; Object 58 - giant spiked balls (SYZ)
   20619/   10A86 :                     ; ---------------------------------------------------------------------------
   20620/   10A86 :                     
   20621/   10A86 :                     Obj58:					; XREF: Obj_Index
   20622/   10A86 : 7000                		moveq	#0,d0
   20623/   10A88 : 1028 0024           		move.b	$24(a0),d0
   20624/   10A8C : 323B 0006           		move.w	Obj58_Index(pc,d0.w),d1
   20625/   10A90 : 4EFB 1002           		jmp	Obj58_Index(pc,d1.w)
   20626/   10A94 :                     ; ===========================================================================
   20627/   10A94 : 0004                Obj58_Index:	dc.w Obj58_Main-Obj58_Index
   20628/   10A96 : 005E                		dc.w Obj58_Move-Obj58_Index
   20629/   10A98 :                     ; ===========================================================================
   20630/   10A98 :                     
   20631/   10A98 :                     Obj58_Main:				; XREF: Obj58_Index
   20632/   10A98 : 5428 0024           		addq.b	#2,$24(a0)
   20633/   10A9C : 217C 0001 0BB0 0004 		move.l	#Map_obj15b,4(a0)
   20634/   10AA4 : 317C 0396 0002      		move.w	#$396,2(a0)
   20635/   10AAA : 117C 0004 0001      		move.b	#4,1(a0)
   20636/   10AB0 : 117C 0004 0018      		move.b	#4,$18(a0)
   20637/   10AB6 : 117C 0018 0019      		move.b	#$18,$19(a0)
   20638/   10ABC : 3168 0008 003A      		move.w	8(a0),$3A(a0)
   20639/   10AC2 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   20640/   10AC8 : 117C 0086 0020      		move.b	#$86,$20(a0)
   20641/   10ACE : 1228 0028           		move.b	$28(a0),d1	; get object type
   20642/   10AD2 : 0201 00F0           		andi.b	#$F0,d1		; read only the	1st digit
   20643/   10AD6 : 4881                		ext.w	d1
   20644/   10AD8 : E741                		asl.w	#3,d1		; multiply by 8
   20645/   10ADA : 3141 003E           		move.w	d1,$3E(a0)	; set object speed
   20646/   10ADE : 1028 0022           		move.b	$22(a0),d0
   20647/   10AE2 : E418                		ror.b	#2,d0
   20648/   10AE4 : 0200 00C0           		andi.b	#$C0,d0
   20649/   10AE8 : 1140 0026           		move.b	d0,$26(a0)
   20650/   10AEC : 117C 0050 003C      		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
   20651/   10AF2 :                     
   20652/   10AF2 :                     Obj58_Move:				; XREF: Obj58_Index
   20653/   10AF2 : 7000                		moveq	#0,d0
   20654/   10AF4 : 1028 0028           		move.b	$28(a0),d0	; get object type
   20655/   10AF8 : 0240 0007           		andi.w	#7,d0		; read only the	2nd digit
   20656/   10AFC : D040                		add.w	d0,d0
   20657/   10AFE : 323B 0028           		move.w	Obj58_TypeIndex(pc,d0.w),d1
   20658/   10B02 : 4EBB 1024           		jsr	Obj58_TypeIndex(pc,d1.w)
   20659/   10B06 : 3028 003A           		move.w	$3A(a0),d0
   20660/   10B0A : 0240 FF80           		andi.w	#$FF80,d0
   20661/   10B0E : 3238 F700           		move.w	($FFFFF700).w,d1
   20662/   10B12 : 0441 0080           		subi.w	#$80,d1
   20663/   10B16 : 0241 FF80           		andi.w	#$FF80,d1
   20664/   10B1A : 9041                		sub.w	d1,d0
   20665/   10B1C : 0C40 0280           		cmpi.w	#$280,d0
   20666/   10B20 : 6200 CC28           		bhi.w	DeleteObject
   20667/   10B24 : 6000 CBE8           		bra.w	DisplaySprite
   20668/   10B28 :                     ; ===========================================================================
   20669/   10B28 : 0008                Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
   20670/   10B2A : 000A                		dc.w Obj58_Type01-Obj58_TypeIndex
   20671/   10B2C : 002C                		dc.w Obj58_Type02-Obj58_TypeIndex
   20672/   10B2E : 0050                		dc.w Obj58_Type03-Obj58_TypeIndex
   20673/   10B30 :                     ; ===========================================================================
   20674/   10B30 :                     
   20675/   10B30 :                     Obj58_Type00:				; XREF: Obj58_TypeIndex
   20676/   10B30 : 4E75                		rts	
   20677/   10B32 :                     ; ===========================================================================
   20678/   10B32 :                     
   20679/   10B32 :                     Obj58_Type01:				; XREF: Obj58_TypeIndex
   20680/   10B32 : 323C 0060           		move.w	#$60,d1
   20681/   10B36 : 7000                		moveq	#0,d0
   20682/   10B38 : 1038 FE6C           		move.b	($FFFFFE6C).w,d0
   20683/   10B3C : 0828 0000 0022      		btst	#0,$22(a0)
   20684/   10B42 : 6704                		beq.s	loc_10A38
   20685/   10B44 : 4440                		neg.w	d0
   20686/   10B46 : D041                		add.w	d1,d0
   20687/   10B48 :                     
   20688/   10B48 :                     loc_10A38:
   20689/   10B48 : 3228 003A           		move.w	$3A(a0),d1
   20690/   10B4C : 9240                		sub.w	d0,d1
   20691/   10B4E : 3141 0008           		move.w	d1,8(a0)	; move object horizontally
   20692/   10B52 : 4E75                		rts	
   20693/   10B54 :                     ; ===========================================================================
   20694/   10B54 :                     
   20695/   10B54 :                     Obj58_Type02:				; XREF: Obj58_TypeIndex
   20696/   10B54 : 323C 0060           		move.w	#$60,d1
   20697/   10B58 : 7000                		moveq	#0,d0
   20698/   10B5A : 1038 FE6C           		move.b	($FFFFFE6C).w,d0
   20699/   10B5E : 0828 0000 0022      		btst	#0,$22(a0)
   20700/   10B64 : 6706                		beq.s	loc_10A5C
   20701/   10B66 : 4440                		neg.w	d0
   20702/   10B68 : 0640 0080           		addi.w	#$80,d0
   20703/   10B6C :                     
   20704/   10B6C :                     loc_10A5C:
   20705/   10B6C : 3228 0038           		move.w	$38(a0),d1
   20706/   10B70 : 9240                		sub.w	d0,d1
   20707/   10B72 : 3141 000C           		move.w	d1,$C(a0)	; move object vertically
   20708/   10B76 : 4E75                		rts	
   20709/   10B78 :                     ; ===========================================================================
   20710/   10B78 :                     
   20711/   10B78 :                     Obj58_Type03:				; XREF: Obj58_TypeIndex
   20712/   10B78 : 3028 003E           		move.w	$3E(a0),d0
   20713/   10B7C : D168 0026           		add.w	d0,$26(a0)
   20714/   10B80 : 1028 0026           		move.b	$26(a0),d0
   20715/   10B84 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   20716/   10B8A : 3428 0038           		move.w	$38(a0),d2
   20717/   10B8E : 3628 003A           		move.w	$3A(a0),d3
   20718/   10B92 : 7800                		moveq	#0,d4
   20719/   10B94 : 1828 003C           		move.b	$3C(a0),d4
   20720/   10B98 : 2A04                		move.l	d4,d5
   20721/   10B9A : C9C0                		muls.w	d0,d4
   20722/   10B9C : E084                		asr.l	#8,d4
   20723/   10B9E : CBC1                		muls.w	d1,d5
   20724/   10BA0 : E085                		asr.l	#8,d5
   20725/   10BA2 : D842                		add.w	d2,d4
   20726/   10BA4 : DA43                		add.w	d3,d5
   20727/   10BA6 : 3144 000C           		move.w	d4,$C(a0)
   20728/   10BAA : 3145 0008           		move.w	d5,8(a0)
   20729/   10BAE : 4E75                		rts	
   20730/   10BB0 :                     ; ===========================================================================
   20731/   10BB0 :                     ; ---------------------------------------------------------------------------
   20732/   10BB0 :                     ; Sprite mappings - SBZ	spiked ball on a chain
   20733/   10BB0 :                     ; ---------------------------------------------------------------------------
   20734/   10BB0 :                     Map_obj15b:
   20735/   10BB0 :                     		include	"_maps/obj15sbz.asm"
(1)    1/   10BB0 :                     ; ---------------------------------------------------------------------------
(1)    2/   10BB0 :                     ; Sprite mappings - spiked ball on a chain (SBZ)
(1)    3/   10BB0 :                     ; ---------------------------------------------------------------------------
(1)    4/   10BB0 : 0006 0020           		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
(1)    5/   10BB4 : 0026                		dc.w byte_10AC6-Map_obj15b
(1)    6/   10BB6 : 05                  byte_10AA6:	dc.b 5
(1)    7/   10BB7 : E804 0000 F8        		dc.b $E8, 4, 0,	0, $F8
(1)    8/   10BBC : F00F 0002 F0        		dc.b $F0, $F, 0, 2, $F0
(1)    9/   10BC1 : F801 0012 E8        		dc.b $F8, 1, 0,	$12, $E8
(1)   10/   10BC6 : F801 0014 10        		dc.b $F8, 1, 0,	$14, $10
(1)   11/   10BCB : 1004 0016 F8        		dc.b $10, 4, 0,	$16, $F8
(1)   12/   10BD0 : 01                  byte_10AC0:	dc.b 1
(1)   13/   10BD1 : F805 0020 F8        		dc.b $F8, 5, 0,	$20, $F8
(1)   14/   10BD6 : 02                  byte_10AC6:	dc.b 2
(1)   15/   10BD7 : F80D 0018 F0        		dc.b $F8, $D, 0, $18, $F0
(1)   16/   10BDC : E80D 1018 F0        		dc.b $E8, $D, $10, $18,	$F0
(1)   17/   10BE1 : (MACRO)             		align 2
(1)   17/   10BE1 :  (MACRO-2)                  cnop 0,2
(1)   17/   10BE1 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   17/   10BE1 : =$26                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   17/   10BE2 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   20736/   10BE2 :                     
   20737/   10BE2 :                     ; ===========================================================================
   20738/   10BE2 :                     ; ---------------------------------------------------------------------------
   20739/   10BE2 :                     ; Object 59 - platforms	that move when you stand on them (SLZ)
   20740/   10BE2 :                     ; ---------------------------------------------------------------------------
   20741/   10BE2 :                     
   20742/   10BE2 :                     Obj59:					; XREF: Obj_Index
   20743/   10BE2 : 7000                		moveq	#0,d0
   20744/   10BE4 : 1028 0024           		move.b	$24(a0),d0
   20745/   10BE8 : 323B 0028           		move.w	Obj59_Index(pc,d0.w),d1
   20746/   10BEC : 4EBB 1024           		jsr	Obj59_Index(pc,d1.w)
   20747/   10BF0 : 3028 0032           		move.w	$32(a0),d0
   20748/   10BF4 : 0240 FF80           		andi.w	#$FF80,d0
   20749/   10BF8 : 3238 F700           		move.w	($FFFFF700).w,d1
   20750/   10BFC : 0441 0080           		subi.w	#$80,d1
   20751/   10C00 : 0241 FF80           		andi.w	#$FF80,d1
   20752/   10C04 : 9041                		sub.w	d1,d0
   20753/   10C06 : 0C40 0280           		cmpi.w	#$280,d0
   20754/   10C0A : 6200 CB3E           		bhi.w	DeleteObject
   20755/   10C0E : 6000 CAFE           		bra.w	DisplaySprite
   20756/   10C12 :                     ; ===========================================================================
   20757/   10C12 : 0028                Obj59_Index:	dc.w Obj59_Main-Obj59_Index
   20758/   10C14 : 00A0                		dc.w Obj59_Platform-Obj59_Index
   20759/   10C16 : 00B0                		dc.w Obj59_Action-Obj59_Index
   20760/   10C18 : 01FA                		dc.w Obj59_MakeMulti-Obj59_Index
   20761/   10C1A :                     
   20762/   10C1A : 2800                Obj59_Var1:	dc.b $28, 0		; width, frame number
   20763/   10C1C :                     
   20764/   10C1C : 1001                Obj59_Var2:	dc.b $10, 1		; width, action	type
   20765/   10C1E : 2001                		dc.b $20, 1
   20766/   10C20 : 3401                		dc.b $34, 1
   20767/   10C22 : 1003                		dc.b $10, 3
   20768/   10C24 : 2003                		dc.b $20, 3
   20769/   10C26 : 3403                		dc.b $34, 3
   20770/   10C28 : 1401                		dc.b $14, 1
   20771/   10C2A : 2401                		dc.b $24, 1
   20772/   10C2C : 2C01                		dc.b $2C, 1
   20773/   10C2E : 1403                		dc.b $14, 3
   20774/   10C30 : 2403                		dc.b $24, 3
   20775/   10C32 : 2C03                		dc.b $2C, 3
   20776/   10C34 : 2005                		dc.b $20, 5
   20777/   10C36 : 2007                		dc.b $20, 7
   20778/   10C38 : 3009                		dc.b $30, 9
   20779/   10C3A :                     ; ===========================================================================
   20780/   10C3A :                     
   20781/   10C3A :                     Obj59_Main:				; XREF: Obj59_Index
   20782/   10C3A : 5428 0024           		addq.b	#2,$24(a0)
   20783/   10C3E : 7000                		moveq	#0,d0
   20784/   10C40 : 1028 0028           		move.b	$28(a0),d0
   20785/   10C44 : 6A18                		bpl.s	Obj59_Main2
   20786/   10C46 : 5828 0024           		addq.b	#4,$24(a0)
   20787/   10C4A : 0240 007F           		andi.w	#$7F,d0
   20788/   10C4E : C0FC 0006           		mulu.w	#6,d0
   20789/   10C52 : 3140 003C           		move.w	d0,$3C(a0)
   20790/   10C56 : 3140 003E           		move.w	d0,$3E(a0)
   20791/   10C5A : 588F                		addq.l	#4,sp
   20792/   10C5C : 4E75                		rts	
   20793/   10C5E :                     ; ===========================================================================
   20794/   10C5E :                     
   20795/   10C5E :                     Obj59_Main2:
   20796/   10C5E : E648                		lsr.w	#3,d0
   20797/   10C60 : 0240 001E           		andi.w	#$1E,d0
   20798/   10C64 : 45FB 00B4           		lea	Obj59_Var1(pc,d0.w),a2
   20799/   10C68 : 115A 0019           		move.b	(a2)+,$19(a0)
   20800/   10C6C : 115A 001A           		move.b	(a2)+,$1A(a0)
   20801/   10C70 : 7000                		moveq	#0,d0
   20802/   10C72 : 1028 0028           		move.b	$28(a0),d0
   20803/   10C76 : D040                		add.w	d0,d0
   20804/   10C78 : 0240 001E           		andi.w	#$1E,d0
   20805/   10C7C : 45FB 009E           		lea	Obj59_Var2(pc,d0.w),a2
   20806/   10C80 : 101A                		move.b	(a2)+,d0
   20807/   10C82 : E548                		lsl.w	#2,d0
   20808/   10C84 : 3140 003C           		move.w	d0,$3C(a0)
   20809/   10C88 : 115A 0028           		move.b	(a2)+,$28(a0)
   20810/   10C8C : 217C 0001 0E58 0004 		move.l	#Map_obj59,4(a0)
   20811/   10C94 : 317C 4000 0002      		move.w	#$4000,2(a0)
   20812/   10C9A : 117C 0004 0001      		move.b	#4,1(a0)
   20813/   10CA0 : 117C 0004 0018      		move.b	#4,$18(a0)
   20814/   10CA6 : 3168 0008 0032      		move.w	8(a0),$32(a0)
   20815/   10CAC : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   20816/   10CB2 :                     
   20817/   10CB2 :                     Obj59_Platform:				; XREF: Obj59_Index
   20818/   10CB2 : 7200                		moveq	#0,d1
   20819/   10CB4 : 1228 0019           		move.b	$19(a0),d1
   20820/   10CB8 : 4EB9 0000 7458      		jsr	(PlatformObject).l
   20821/   10CBE : 6000 0026           		bra.w	Obj59_Types
   20822/   10CC2 :                     ; ===========================================================================
   20823/   10CC2 :                     
   20824/   10CC2 :                     Obj59_Action:				; XREF: Obj59_Index
   20825/   10CC2 : 7200                		moveq	#0,d1
   20826/   10CC4 : 1228 0019           		move.b	$19(a0),d1
   20827/   10CC8 : 4EB9 0000 75CC      		jsr	(ExitPlatform).l
   20828/   10CCE : 3F28 0008           		move.w	8(a0),-(sp)
   20829/   10CD2 : 6100 0012           		bsr.w	Obj59_Types
   20830/   10CD6 : 341F                		move.w	(sp)+,d2
   20831/   10CD8 : (MACRO)             		_tst.b	0(a0)
   20831/   10CD8 :  (MACRO-2)                          insn1op tst.b, 0(a0)
   20831/   10CD8 : 4A28 0001                           !tst.b   1+0(a0)
   20831/   10CDB :                                     !org    *-1
   20831/   10CDB : 00                                  !dc.b   0
   20832/   10CDC : 6706                		beq.s	locret_10BD4
   20833/   10CDE : 4EF9 0000 7B3A      		jmp	(MvSonicOnPtfm2).l
   20834/   10CE4 :                     ; ===========================================================================
   20835/   10CE4 :                     
   20836/   10CE4 :                     locret_10BD4:
   20837/   10CE4 : 4E75                		rts	
   20838/   10CE6 :                     ; ===========================================================================
   20839/   10CE6 :                     
   20840/   10CE6 :                     Obj59_Types:
   20841/   10CE6 : 7000                		moveq	#0,d0
   20842/   10CE8 : 1028 0028           		move.b	$28(a0),d0
   20843/   10CEC : 0240 000F           		andi.w	#$F,d0
   20844/   10CF0 : D040                		add.w	d0,d0
   20845/   10CF2 : 323B 0006           		move.w	Obj59_TypeIndex(pc,d0.w),d1
   20846/   10CF6 : 4EFB 1002           		jmp	Obj59_TypeIndex(pc,d1.w)
   20847/   10CFA :                     ; ===========================================================================
   20848/   10CFA : 0014 0016           Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
   20849/   10CFE : 0024 0016           		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
   20850/   10D02 : 0038 0016           		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
   20851/   10D06 : 004A 0016           		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
   20852/   10D0A : 006C 008E           		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
   20853/   10D0E :                     ; ===========================================================================
   20854/   10D0E :                     
   20855/   10D0E :                     Obj59_Type00:				; XREF: Obj59_TypeIndex
   20856/   10D0E : 4E75                		rts	
   20857/   10D10 :                     ; ===========================================================================
   20858/   10D10 :                     
   20859/   10D10 :                     Obj59_Type01:				; XREF: Obj59_TypeIndex
   20860/   10D10 : 0C28 0004 0024      		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
   20861/   10D16 : 6604                		bne.s	locret_10C0C
   20862/   10D18 : 5228 0028           		addq.b	#1,$28(a0)	; if yes, add 1	to type
   20863/   10D1C :                     
   20864/   10D1C :                     locret_10C0C:
   20865/   10D1C : 4E75                		rts	
   20866/   10D1E :                     ; ===========================================================================
   20867/   10D1E :                     
   20868/   10D1E :                     Obj59_Type02:				; XREF: Obj59_TypeIndex
   20869/   10D1E : 6100 00A2           		bsr.w	Obj59_Move
   20870/   10D22 : 3028 0034           		move.w	$34(a0),d0
   20871/   10D26 : 4440                		neg.w	d0
   20872/   10D28 : D068 0030           		add.w	$30(a0),d0
   20873/   10D2C : 3140 000C           		move.w	d0,$C(a0)
   20874/   10D30 : 4E75                		rts	
   20875/   10D32 :                     ; ===========================================================================
   20876/   10D32 :                     
   20877/   10D32 :                     Obj59_Type04:				; XREF: Obj59_TypeIndex
   20878/   10D32 : 6100 008E           		bsr.w	Obj59_Move
   20879/   10D36 : 3028 0034           		move.w	$34(a0),d0
   20880/   10D3A : D068 0030           		add.w	$30(a0),d0
   20881/   10D3E : 3140 000C           		move.w	d0,$C(a0)
   20882/   10D42 : 4E75                		rts	
   20883/   10D44 :                     ; ===========================================================================
   20884/   10D44 :                     
   20885/   10D44 :                     Obj59_Type06:				; XREF: Obj59_TypeIndex
   20886/   10D44 : 6100 007C           		bsr.w	Obj59_Move
   20887/   10D48 : 3028 0034           		move.w	$34(a0),d0
   20888/   10D4C : E240                		asr.w	#1,d0
   20889/   10D4E : 4440                		neg.w	d0
   20890/   10D50 : D068 0030           		add.w	$30(a0),d0
   20891/   10D54 : 3140 000C           		move.w	d0,$C(a0)
   20892/   10D58 : 3028 0034           		move.w	$34(a0),d0
   20893/   10D5C : D068 0032           		add.w	$32(a0),d0
   20894/   10D60 : 3140 0008           		move.w	d0,8(a0)
   20895/   10D64 : 4E75                		rts	
   20896/   10D66 :                     ; ===========================================================================
   20897/   10D66 :                     
   20898/   10D66 :                     Obj59_Type08:				; XREF: Obj59_TypeIndex
   20899/   10D66 : 6100 005A           		bsr.w	Obj59_Move
   20900/   10D6A : 3028 0034           		move.w	$34(a0),d0
   20901/   10D6E : E240                		asr.w	#1,d0
   20902/   10D70 : D068 0030           		add.w	$30(a0),d0
   20903/   10D74 : 3140 000C           		move.w	d0,$C(a0)
   20904/   10D78 : 3028 0034           		move.w	$34(a0),d0
   20905/   10D7C : 4440                		neg.w	d0
   20906/   10D7E : D068 0032           		add.w	$32(a0),d0
   20907/   10D82 : 3140 0008           		move.w	d0,8(a0)
   20908/   10D86 : 4E75                		rts	
   20909/   10D88 :                     ; ===========================================================================
   20910/   10D88 :                     
   20911/   10D88 :                     Obj59_Type09:				; XREF: Obj59_TypeIndex
   20912/   10D88 : 6100 0038           		bsr.w	Obj59_Move
   20913/   10D8C : 3028 0034           		move.w	$34(a0),d0
   20914/   10D90 : 4440                		neg.w	d0
   20915/   10D92 : D068 0030           		add.w	$30(a0),d0
   20916/   10D96 : 3140 000C           		move.w	d0,$C(a0)
   20917/   10D9A : 4A28 0028           		tst.b	$28(a0)
   20918/   10D9E : 6700 0004           		beq.w	loc_10C94
   20919/   10DA2 : 4E75                		rts	
   20920/   10DA4 :                     ; ===========================================================================
   20921/   10DA4 :                     
   20922/   10DA4 :                     loc_10C94:
   20923/   10DA4 : 0828 0003 0022      		btst	#3,$22(a0)
   20924/   10DAA : 6712                		beq.s	Obj59_Delete
   20925/   10DAC : 08E9 0001 0022      		bset	#1,$22(a1)
   20926/   10DB2 : 08A9 0003 0022      		bclr	#3,$22(a1)
   20927/   10DB8 : 137C 0002 0024      		move.b	#2,$24(a1)
   20928/   10DBE :                     
   20929/   10DBE :                     Obj59_Delete:
   20930/   10DBE : 6000 C98A           		bra.w	DeleteObject
   20931/   10DC2 :                     
   20932/   10DC2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   20933/   10DC2 :                     
   20934/   10DC2 :                     
   20935/   10DC2 :                     Obj59_Move:				; XREF: Obj59_Type02; et al
   20936/   10DC2 : 3028 0038           		move.w	$38(a0),d0
   20937/   10DC6 : 4A28 003A           		tst.b	$3A(a0)
   20938/   10DCA : 660C                		bne.s	loc_10CC8
   20939/   10DCC : 0C40 0800           		cmpi.w	#$800,d0
   20940/   10DD0 : 640E                		bcc.s	loc_10CD0
   20941/   10DD2 : 0640 0010           		addi.w	#$10,d0
   20942/   10DD6 : 6008                		bra.s	loc_10CD0
   20943/   10DD8 :                     ; ===========================================================================
   20944/   10DD8 :                     
   20945/   10DD8 :                     loc_10CC8:
   20946/   10DD8 : 4A40                		tst.w	d0
   20947/   10DDA : 6704                		beq.s	loc_10CD0
   20948/   10DDC : 0440 0010           		subi.w	#$10,d0
   20949/   10DE0 :                     
   20950/   10DE0 :                     loc_10CD0:
   20951/   10DE0 : 3140 0038           		move.w	d0,$38(a0)
   20952/   10DE4 : 48C0                		ext.l	d0
   20953/   10DE6 : E180                		asl.l	#8,d0
   20954/   10DE8 : D0A8 0034           		add.l	$34(a0),d0
   20955/   10DEC : 2140 0034           		move.l	d0,$34(a0)
   20956/   10DF0 : 4840                		swap	d0
   20957/   10DF2 : 3428 003C           		move.w	$3C(a0),d2
   20958/   10DF6 : B042                		cmp.w	d2,d0
   20959/   10DF8 : 6306                		bls.s	loc_10CF0
   20960/   10DFA : 117C 0001 003A      		move.b	#1,$3A(a0)
   20961/   10E00 :                     
   20962/   10E00 :                     loc_10CF0:
   20963/   10E00 : D442                		add.w	d2,d2
   20964/   10E02 : B042                		cmp.w	d2,d0
   20965/   10E04 : 6604                		bne.s	locret_10CFA
   20966/   10E06 : 4228 0028           		clr.b	$28(a0)
   20967/   10E0A :                     
   20968/   10E0A :                     locret_10CFA:
   20969/   10E0A : 4E75                		rts	
   20970/   10E0C :                     ; End of function Obj59_Move
   20971/   10E0C :                     
   20972/   10E0C :                     ; ===========================================================================
   20973/   10E0C :                     
   20974/   10E0C :                     Obj59_MakeMulti:			; XREF: Obj59_Index
   20975/   10E0C : 5368 003C           		subq.w	#1,$3C(a0)
   20976/   10E10 : 6624                		bne.s	Obj59_ChkDel
   20977/   10E12 : 3168 003E 003C      		move.w	$3E(a0),$3C(a0)
   20978/   10E18 : 6100 CD7C           		bsr.w	SingleObjLoad
   20979/   10E1C : 6618                		bne.s	Obj59_ChkDel
   20980/   10E1E : (MACRO)             		_move.b	#$59,0(a1)	; duplicate the	object
   20980/   10E1E :  (MACRO-2)                          insn2op move.b, #$59,0(a1)
   20980/   10E1E : 137C 0059 0001                              !move.b   #$59,1+0(a1)
   20980/   10E23 :                                             !org    *-1
   20980/   10E23 : 00                                          !dc.b   0
   20981/   10E24 : 3368 0008 0008      		move.w	8(a0),8(a1)
   20982/   10E2A : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   20983/   10E30 : 137C 000E 0028      		move.b	#$E,$28(a1)
   20984/   10E36 :                     
   20985/   10E36 :                     Obj59_ChkDel:
   20986/   10E36 : 588F                		addq.l	#4,sp
   20987/   10E38 : 3028 0008           		move.w	8(a0),d0
   20988/   10E3C : 0240 FF80           		andi.w	#$FF80,d0
   20989/   10E40 : 3238 F700           		move.w	($FFFFF700).w,d1
   20990/   10E44 : 0441 0080           		subi.w	#$80,d1
   20991/   10E48 : 0241 FF80           		andi.w	#$FF80,d1
   20992/   10E4C : 9041                		sub.w	d1,d0
   20993/   10E4E : 0C40 0280           		cmpi.w	#$280,d0
   20994/   10E52 : 6200 C8F6           		bhi.w	DeleteObject
   20995/   10E56 : 4E75                		rts	
   20996/   10E58 :                     ; ===========================================================================
   20997/   10E58 :                     ; ---------------------------------------------------------------------------
   20998/   10E58 :                     ; Sprite mappings - platforms that move	when you stand on them (SLZ)
   20999/   10E58 :                     ; ---------------------------------------------------------------------------
   21000/   10E58 :                     Map_obj59:
   21001/   10E58 :                     		include	"_maps/obj59.asm"
(1)    1/   10E58 :                     ; ---------------------------------------------------------------------------
(1)    2/   10E58 :                     ; Sprite mappings - platforms that move	when you stand on them (SLZ)
(1)    3/   10E58 :                     ; ---------------------------------------------------------------------------
(1)    4/   10E58 : 0002                		dc.w byte_10D4A-Map_obj59
(1)    5/   10E5A : 03                  byte_10D4A:	dc.b 3
(1)    6/   10E5B : F80F 0041 D8        		dc.b $F8, $F, 0, $41, $D8
(1)    7/   10E60 : F80F 0041 F8        		dc.b $F8, $F, 0, $41, $F8
(1)    8/   10E65 : F807 0041 18        		dc.b $F8, 7, 0,	$41, $18
(1)    9/   10E6A : (MACRO)             		align 2
(1)    9/   10E6A :  (MACRO-2)                  cnop 0,2
(1)    9/   10E6A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   21002/   10E6A :                     
   21003/   10E6A :                     ; ===========================================================================
   21004/   10E6A :                     ; ---------------------------------------------------------------------------
   21005/   10E6A :                     ; Object 5A - platforms	moving in circles (SLZ)
   21006/   10E6A :                     ; ---------------------------------------------------------------------------
   21007/   10E6A :                     
   21008/   10E6A :                     Obj5A:					; XREF: Obj_Index
   21009/   10E6A : 7000                		moveq	#0,d0
   21010/   10E6C : 1028 0024           		move.b	$24(a0),d0
   21011/   10E70 : 323B 0028           		move.w	Obj5A_Index(pc,d0.w),d1
   21012/   10E74 : 4EBB 1024           		jsr	Obj5A_Index(pc,d1.w)
   21013/   10E78 : 3028 0032           		move.w	$32(a0),d0
   21014/   10E7C : 0240 FF80           		andi.w	#$FF80,d0
   21015/   10E80 : 3238 F700           		move.w	($FFFFF700).w,d1
   21016/   10E84 : 0441 0080           		subi.w	#$80,d1
   21017/   10E88 : 0241 FF80           		andi.w	#$FF80,d1
   21018/   10E8C : 9041                		sub.w	d1,d0
   21019/   10E8E : 0C40 0280           		cmpi.w	#$280,d0
   21020/   10E92 : 6200 C8B6           		bhi.w	DeleteObject
   21021/   10E96 : 6000 C876           		bra.w	DisplaySprite
   21022/   10E9A :                     ; ===========================================================================
   21023/   10E9A : 0006                Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
   21024/   10E9C : 0036                		dc.w Obj5A_Platform-Obj5A_Index
   21025/   10E9E : 0046                		dc.w Obj5A_Action-Obj5A_Index
   21026/   10EA0 :                     ; ===========================================================================
   21027/   10EA0 :                     
   21028/   10EA0 :                     Obj5A_Main:				; XREF: Obj5A_Index
   21029/   10EA0 : 5428 0024           		addq.b	#2,$24(a0)
   21030/   10EA4 : 217C 0001 0F92 0004 		move.l	#Map_obj5A,4(a0)
   21031/   10EAC : 317C 4000 0002      		move.w	#$4000,2(a0)
   21032/   10EB2 : 117C 0004 0001      		move.b	#4,1(a0)
   21033/   10EB8 : 117C 0004 0018      		move.b	#4,$18(a0)
   21034/   10EBE : 117C 0018 0019      		move.b	#$18,$19(a0)
   21035/   10EC4 : 3168 0008 0032      		move.w	8(a0),$32(a0)
   21036/   10ECA : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   21037/   10ED0 :                     
   21038/   10ED0 :                     Obj5A_Platform:				; XREF: Obj5A_Index
   21039/   10ED0 : 7200                		moveq	#0,d1
   21040/   10ED2 : 1228 0019           		move.b	$19(a0),d1
   21041/   10ED6 : 4EB9 0000 7458      		jsr	(PlatformObject).l
   21042/   10EDC : 6000 001E           		bra.w	Obj5A_Types
   21043/   10EE0 :                     ; ===========================================================================
   21044/   10EE0 :                     
   21045/   10EE0 :                     Obj5A_Action:				; XREF: Obj5A_Index
   21046/   10EE0 : 7200                		moveq	#0,d1
   21047/   10EE2 : 1228 0019           		move.b	$19(a0),d1
   21048/   10EE6 : 4EB9 0000 75CC      		jsr	(ExitPlatform).l
   21049/   10EEC : 3F28 0008           		move.w	8(a0),-(sp)
   21050/   10EF0 : 6100 000A           		bsr.w	Obj5A_Types
   21051/   10EF4 : 341F                		move.w	(sp)+,d2
   21052/   10EF6 : 4EF9 0000 7B3A      		jmp	(MvSonicOnPtfm2).l
   21053/   10EFC :                     ; ===========================================================================
   21054/   10EFC :                     
   21055/   10EFC :                     Obj5A_Types:
   21056/   10EFC : 7000                		moveq	#0,d0
   21057/   10EFE : 1028 0028           		move.b	$28(a0),d0
   21058/   10F02 : 0240 000C           		andi.w	#$C,d0
   21059/   10F06 : E248                		lsr.w	#1,d0
   21060/   10F08 : 323B 0006           		move.w	Obj5A_TypeIndex(pc,d0.w),d1
   21061/   10F0C : 4EFB 1002           		jmp	Obj5A_TypeIndex(pc,d1.w)
   21062/   10F10 :                     ; ===========================================================================
   21063/   10F10 : 0004                Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
   21064/   10F12 : 0042                		dc.w Obj5A_Type04-Obj5A_TypeIndex
   21065/   10F14 :                     ; ===========================================================================
   21066/   10F14 :                     
   21067/   10F14 :                     Obj5A_Type00:				; XREF: Obj5A_TypeIndex
   21068/   10F14 : 1238 FE80           		move.b	($FFFFFE80).w,d1
   21069/   10F18 : 0401 0050           		subi.b	#$50,d1
   21070/   10F1C : 4881                		ext.w	d1
   21071/   10F1E : 1438 FE84           		move.b	($FFFFFE84).w,d2
   21072/   10F22 : 0402 0050           		subi.b	#$50,d2
   21073/   10F26 : 4882                		ext.w	d2
   21074/   10F28 : 0828 0000 0028      		btst	#0,$28(a0)
   21075/   10F2E : 6704                		beq.s	loc_10E24
   21076/   10F30 : 4441                		neg.w	d1
   21077/   10F32 : 4442                		neg.w	d2
   21078/   10F34 :                     
   21079/   10F34 :                     loc_10E24:
   21080/   10F34 : 0828 0001 0028      		btst	#1,$28(a0)
   21081/   10F3A : 6704                		beq.s	loc_10E30
   21082/   10F3C : 4441                		neg.w	d1
   21083/   10F3E : C342                		exg	d1,d2
   21084/   10F40 :                     
   21085/   10F40 :                     loc_10E30:
   21086/   10F40 : D268 0032           		add.w	$32(a0),d1
   21087/   10F44 : 3141 0008           		move.w	d1,8(a0)
   21088/   10F48 : D468 0030           		add.w	$30(a0),d2
   21089/   10F4C : 3142 000C           		move.w	d2,$C(a0)
   21090/   10F50 : 4E75                		rts	
   21091/   10F52 :                     ; ===========================================================================
   21092/   10F52 :                     
   21093/   10F52 :                     Obj5A_Type04:				; XREF: Obj5A_TypeIndex
   21094/   10F52 : 1238 FE80           		move.b	($FFFFFE80).w,d1
   21095/   10F56 : 0401 0050           		subi.b	#$50,d1
   21096/   10F5A : 4881                		ext.w	d1
   21097/   10F5C : 1438 FE84           		move.b	($FFFFFE84).w,d2
   21098/   10F60 : 0402 0050           		subi.b	#$50,d2
   21099/   10F64 : 4882                		ext.w	d2
   21100/   10F66 : 0828 0000 0028      		btst	#0,$28(a0)
   21101/   10F6C : 6704                		beq.s	loc_10E62
   21102/   10F6E : 4441                		neg.w	d1
   21103/   10F70 : 4442                		neg.w	d2
   21104/   10F72 :                     
   21105/   10F72 :                     loc_10E62:
   21106/   10F72 : 0828 0001 0028      		btst	#1,$28(a0)
   21107/   10F78 : 6704                		beq.s	loc_10E6E
   21108/   10F7A : 4441                		neg.w	d1
   21109/   10F7C : C342                		exg	d1,d2
   21110/   10F7E :                     
   21111/   10F7E :                     loc_10E6E:
   21112/   10F7E : 4441                		neg.w	d1
   21113/   10F80 : D268 0032           		add.w	$32(a0),d1
   21114/   10F84 : 3141 0008           		move.w	d1,8(a0)
   21115/   10F88 : D468 0030           		add.w	$30(a0),d2
   21116/   10F8C : 3142 000C           		move.w	d2,$C(a0)
   21117/   10F90 : 4E75                		rts	
   21118/   10F92 :                     ; ===========================================================================
   21119/   10F92 :                     ; ---------------------------------------------------------------------------
   21120/   10F92 :                     ; Sprite mappings - platforms that move	in circles (SLZ)
   21121/   10F92 :                     ; ---------------------------------------------------------------------------
   21122/   10F92 :                     Map_obj5A:
   21123/   10F92 :                     		include	"_maps/obj5A.asm"
(1)    1/   10F92 :                     ; ---------------------------------------------------------------------------
(1)    2/   10F92 :                     ; Sprite mappings - platforms that move	in circles (SLZ)
(1)    3/   10F92 :                     ; ---------------------------------------------------------------------------
(1)    4/   10F92 : 0002                		dc.w byte_10E84-Map_obj5A
(1)    5/   10F94 : 02                  byte_10E84:	dc.b 2
(1)    6/   10F95 : F809 0051 E8        		dc.b $F8, 9, 0,	$51, $E8
(1)    7/   10F9A : F809 0851 00        		dc.b $F8, 9, 8,	$51, 0
(1)    8/   10F9F : (MACRO)             		align 2
(1)    8/   10F9F :  (MACRO-2)                  cnop 0,2
(1)    8/   10F9F :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)    8/   10F9F : =$27                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)    8/   10FA0 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   21124/   10FA0 :                     
   21125/   10FA0 :                     ; ===========================================================================
   21126/   10FA0 :                     ; ---------------------------------------------------------------------------
   21127/   10FA0 :                     ; Object 5B - blocks that form a staircase (SLZ)
   21128/   10FA0 :                     ; ---------------------------------------------------------------------------
   21129/   10FA0 :                     
   21130/   10FA0 :                     Obj5B:					; XREF: Obj_Index
   21131/   10FA0 : 7000                		moveq	#0,d0
   21132/   10FA2 : 1028 0024           		move.b	$24(a0),d0
   21133/   10FA6 : 323B 0028           		move.w	Obj5B_Index(pc,d0.w),d1
   21134/   10FAA : 4EBB 1024           		jsr	Obj5B_Index(pc,d1.w)
   21135/   10FAE : 3028 0030           		move.w	$30(a0),d0
   21136/   10FB2 : 0240 FF80           		andi.w	#$FF80,d0
   21137/   10FB6 : 3238 F700           		move.w	($FFFFF700).w,d1
   21138/   10FBA : 0441 0080           		subi.w	#$80,d1
   21139/   10FBE : 0241 FF80           		andi.w	#$FF80,d1
   21140/   10FC2 : 9041                		sub.w	d1,d0
   21141/   10FC4 : 0C40 0280           		cmpi.w	#$280,d0
   21142/   10FC8 : 6200 C780           		bhi.w	DeleteObject
   21143/   10FCC : 6000 C740           		bra.w	DisplaySprite
   21144/   10FD0 :                     ; ===========================================================================
   21145/   10FD0 : 0006                Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
   21146/   10FD2 : 0086                		dc.w Obj5B_Move-Obj5B_Index
   21147/   10FD4 : 009A                		dc.w Obj5B_Solid-Obj5B_Index
   21148/   10FD6 :                     ; ===========================================================================
   21149/   10FD6 :                     
   21150/   10FD6 :                     Obj5B_Main:				; XREF: Obj5B_Index
   21151/   10FD6 : 5428 0024           		addq.b	#2,$24(a0)
   21152/   10FDA : 7638                		moveq	#$38,d3
   21153/   10FDC : 7801                		moveq	#1,d4
   21154/   10FDE : 0828 0000 0022      		btst	#0,$22(a0)
   21155/   10FE4 : 6704                		beq.s	loc_10EDA
   21156/   10FE6 : 763B                		moveq	#$3B,d3
   21157/   10FE8 : 78FF                		moveq	#-1,d4
   21158/   10FEA :                     
   21159/   10FEA :                     loc_10EDA:
   21160/   10FEA : 3428 0008           		move.w	8(a0),d2
   21161/   10FEE : 2248                		movea.l	a0,a1
   21162/   10FF0 : 7203                		moveq	#3,d1
   21163/   10FF2 : 600E                		bra.s	Obj5B_MakeBlocks
   21164/   10FF4 :                     ; ===========================================================================
   21165/   10FF4 :                     
   21166/   10FF4 :                     Obj5B_Loop:
   21167/   10FF4 : 6100 CBB6           		bsr.w	SingleObjLoad2
   21168/   10FF8 : 6600 005C           		bne.w	Obj5B_Move
   21169/   10FFC : 137C 0004 0024      		move.b	#4,$24(a1)
   21170/   11002 :                     
   21171/   11002 :                     Obj5B_MakeBlocks:			; XREF: Obj5B_Main
   21172/   11002 : (MACRO)             		_move.b	#$5B,0(a1)	; load another block object
   21172/   11002 :  (MACRO-2)                          insn2op move.b, #$5B,0(a1)
   21172/   11002 : 137C 005B 0001                              !move.b   #$5B,1+0(a1)
   21172/   11007 :                                             !org    *-1
   21172/   11007 : 00                                          !dc.b   0
   21173/   11008 : 237C 0001 114C 0004 		move.l	#Map_obj5B,4(a1)
   21174/   11010 : 337C 4000 0002      		move.w	#$4000,2(a1)
   21175/   11016 : 137C 0004 0001      		move.b	#4,1(a1)
   21176/   1101C : 137C 0003 0018      		move.b	#3,$18(a1)
   21177/   11022 : 137C 0010 0019      		move.b	#$10,$19(a1)
   21178/   11028 : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   21179/   1102E : 3342 0008           		move.w	d2,8(a1)
   21180/   11032 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   21181/   11038 : 3368 0008 0030      		move.w	8(a0),$30(a1)
   21182/   1103E : 3369 000C 0032      		move.w	$C(a1),$32(a1)
   21183/   11044 : 0642 0020           		addi.w	#$20,d2
   21184/   11048 : 1343 0037           		move.b	d3,$37(a1)
   21185/   1104C : 2348 003C           		move.l	a0,$3C(a1)
   21186/   11050 : D604                		add.b	d4,d3
   21187/   11052 : 51C9 FFA0           		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
   21188/   11056 :                     
   21189/   11056 :                     Obj5B_Move:				; XREF: Obj5B_Index
   21190/   11056 : 7000                		moveq	#0,d0
   21191/   11058 : 1028 0028           		move.b	$28(a0),d0
   21192/   1105C : 0240 0007           		andi.w	#7,d0
   21193/   11060 : D040                		add.w	d0,d0
   21194/   11062 : 323B 004E           		move.w	Obj5B_TypeIndex(pc,d0.w),d1
   21195/   11066 : 4EBB 104A           		jsr	Obj5B_TypeIndex(pc,d1.w)
   21196/   1106A :                     
   21197/   1106A :                     Obj5B_Solid:				; XREF: Obj5B_Index
   21198/   1106A : 2468 003C           		movea.l	$3C(a0),a2
   21199/   1106E : 7000                		moveq	#0,d0
   21200/   11070 : 1028 0037           		move.b	$37(a0),d0
   21201/   11074 : 1032 0000           		move.b	(a2,d0.w),d0
   21202/   11078 : D068 0032           		add.w	$32(a0),d0
   21203/   1107C : 3140 000C           		move.w	d0,$C(a0)
   21204/   11080 : 7200                		moveq	#0,d1
   21205/   11082 : 1228 0019           		move.b	$19(a0),d1
   21206/   11086 : 0641 000B           		addi.w	#$B,d1
   21207/   1108A : 343C 0010           		move.w	#$10,d2
   21208/   1108E : 363C 0011           		move.w	#$11,d3
   21209/   11092 : 3828 0008           		move.w	8(a0),d4
   21210/   11096 : 6100 EA4E           		bsr.w	SolidObject
   21211/   1109A : 4A04                		tst.b	d4
   21212/   1109C : 6A04                		bpl.s	loc_10F92
   21213/   1109E : 1544 0036           		move.b	d4,$36(a2)
   21214/   110A2 :                     
   21215/   110A2 :                     loc_10F92:
   21216/   110A2 : 0828 0003 0022      		btst	#3,$22(a0)
   21217/   110A8 : 6706                		beq.s	locret_10FA0
   21218/   110AA : 157C 0001 0036      		move.b	#1,$36(a2)
   21219/   110B0 :                     
   21220/   110B0 :                     locret_10FA0:
   21221/   110B0 : 4E75                		rts	
   21222/   110B2 :                     ; ===========================================================================
   21223/   110B2 : 0008                Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
   21224/   110B4 : 006E                		dc.w Obj5B_Type01-Obj5B_TypeIndex
   21225/   110B6 : 002A                		dc.w Obj5B_Type02-Obj5B_TypeIndex
   21226/   110B8 : 006E                		dc.w Obj5B_Type01-Obj5B_TypeIndex
   21227/   110BA :                     ; ===========================================================================
   21228/   110BA :                     
   21229/   110BA :                     Obj5B_Type00:				; XREF: Obj5B_TypeIndex
   21230/   110BA : 4A68 0034           		tst.w	$34(a0)
   21231/   110BE : 6610                		bne.s	loc_10FC0
   21232/   110C0 : 0C28 0001 0036      		cmpi.b	#1,$36(a0)
   21233/   110C6 : 6606                		bne.s	locret_10FBE
   21234/   110C8 : 317C 001E 0034      		move.w	#$1E,$34(a0)
   21235/   110CE :                     
   21236/   110CE :                     locret_10FBE:
   21237/   110CE : 4E75                		rts	
   21238/   110D0 :                     ; ===========================================================================
   21239/   110D0 :                     
   21240/   110D0 :                     loc_10FC0:
   21241/   110D0 : 5368 0034           		subq.w	#1,$34(a0)
   21242/   110D4 : 66F8                		bne.s	locret_10FBE
   21243/   110D6 : 5228 0028           		addq.b	#1,$28(a0)	; add 1	to type
   21244/   110DA : 4E75                		rts	
   21245/   110DC :                     ; ===========================================================================
   21246/   110DC :                     
   21247/   110DC :                     Obj5B_Type02:				; XREF: Obj5B_TypeIndex
   21248/   110DC : 4A68 0034           		tst.w	$34(a0)
   21249/   110E0 : 660E                		bne.s	loc_10FE0
   21250/   110E2 : 4A28 0036           		tst.b	$36(a0)
   21251/   110E6 : 6A06                		bpl.s	locret_10FDE
   21252/   110E8 : 317C 003C 0034      		move.w	#$3C,$34(a0)
   21253/   110EE :                     
   21254/   110EE :                     locret_10FDE:
   21255/   110EE : 4E75                		rts	
   21256/   110F0 :                     ; ===========================================================================
   21257/   110F0 :                     
   21258/   110F0 :                     loc_10FE0:
   21259/   110F0 : 5368 0034           		subq.w	#1,$34(a0)
   21260/   110F4 : 6606                		bne.s	loc_10FEC
   21261/   110F6 : 5228 0028           		addq.b	#1,$28(a0)	; add 1	to type
   21262/   110FA : 4E75                		rts	
   21263/   110FC :                     ; ===========================================================================
   21264/   110FC :                     
   21265/   110FC :                     loc_10FEC:
   21266/   110FC : 43E8 0038           		lea	$38(a0),a1
   21267/   11100 : 3028 0034           		move.w	$34(a0),d0
   21268/   11104 : E408                		lsr.b	#2,d0
   21269/   11106 : 0200 0001           		andi.b	#1,d0
   21270/   1110A : 12C0                		move.b	d0,(a1)+
   21271/   1110C : 0A00 0001           		eori.b	#1,d0
   21272/   11110 : 12C0                		move.b	d0,(a1)+
   21273/   11112 : 0A00 0001           		eori.b	#1,d0
   21274/   11116 : 12C0                		move.b	d0,(a1)+
   21275/   11118 : 0A00 0001           		eori.b	#1,d0
   21276/   1111C : 12C0                		move.b	d0,(a1)+
   21277/   1111E : 4E75                		rts	
   21278/   11120 :                     ; ===========================================================================
   21279/   11120 :                     
   21280/   11120 :                     Obj5B_Type01:				; XREF: Obj5B_TypeIndex
   21281/   11120 : 43E8 0038           		lea	$38(a0),a1
   21282/   11124 : 0C11 0080           		cmpi.b	#$80,(a1)
   21283/   11128 : 671E                		beq.s	locret_11038
   21284/   1112A : 5211                		addq.b	#1,(a1)
   21285/   1112C : 7200                		moveq	#0,d1
   21286/   1112E : 1219                		move.b	(a1)+,d1
   21287/   11130 : 4841                		swap	d1
   21288/   11132 : E289                		lsr.l	#1,d1
   21289/   11134 : 2401                		move.l	d1,d2
   21290/   11136 : E289                		lsr.l	#1,d1
   21291/   11138 : 2601                		move.l	d1,d3
   21292/   1113A : D682                		add.l	d2,d3
   21293/   1113C : 4841                		swap	d1
   21294/   1113E : 4842                		swap	d2
   21295/   11140 : 4843                		swap	d3
   21296/   11142 : 12C3                		move.b	d3,(a1)+
   21297/   11144 : 12C2                		move.b	d2,(a1)+
   21298/   11146 : 12C1                		move.b	d1,(a1)+
   21299/   11148 :                     
   21300/   11148 :                     locret_11038:
   21301/   11148 : 4E75                		rts	
   21302/   1114A : 4E75                		rts	
   21303/   1114C :                     ; ===========================================================================
   21304/   1114C :                     ; ---------------------------------------------------------------------------
   21305/   1114C :                     ; Sprite mappings - blocks that	form a staircase (SLZ)
   21306/   1114C :                     ; ---------------------------------------------------------------------------
   21307/   1114C :                     Map_obj5B:
   21308/   1114C :                     		include	"_maps/obj5B.asm"
(1)    1/   1114C :                     ; ---------------------------------------------------------------------------
(1)    2/   1114C :                     ; Sprite mappings - blocks that	form a staircase (SLZ)
(1)    3/   1114C :                     ; ---------------------------------------------------------------------------
(1)    4/   1114C : 0002                		dc.w byte_1103E-Map_obj5B
(1)    5/   1114E : 01                  byte_1103E:	dc.b 1
(1)    6/   1114F : F00F 0021 F0        		dc.b $F0, $F, 0, $21, $F0
(1)    7/   11154 : (MACRO)             		align 2
(1)    7/   11154 :  (MACRO-2)                  cnop 0,2
(1)    7/   11154 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   21309/   11154 :                     
   21310/   11154 :                     ; ===========================================================================
   21311/   11154 :                     ; ---------------------------------------------------------------------------
   21312/   11154 :                     ; Object 5C - metal girders in foreground (SLZ)
   21313/   11154 :                     ; ---------------------------------------------------------------------------
   21314/   11154 :                     
   21315/   11154 :                     Obj5C:					; XREF: Obj_Index
   21316/   11154 : 7000                		moveq	#0,d0
   21317/   11156 : 1028 0024           		move.b	$24(a0),d0
   21318/   1115A : 323B 0006           		move.w	Obj5C_Index(pc,d0.w),d1
   21319/   1115E : 4EFB 1002           		jmp	Obj5C_Index(pc,d1.w)
   21320/   11162 :                     ; ===========================================================================
   21321/   11162 : 0004                Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
   21322/   11164 : 001C                		dc.w Obj5C_Display-Obj5C_Index
   21323/   11166 :                     ; ===========================================================================
   21324/   11166 :                     
   21325/   11166 :                     Obj5C_Main:				; XREF: Obj5C_Index
   21326/   11166 : 5428 0024           		addq.b	#2,$24(a0)
   21327/   1116A : 217C 0001 11A6 0004 		move.l	#Map_obj5C,4(a0)
   21328/   11172 : 317C 83CC 0002      		move.w	#$83CC,2(a0)
   21329/   11178 : 117C 0010 0019      		move.b	#$10,$19(a0)
   21330/   1117E :                     
   21331/   1117E :                     Obj5C_Display:				; XREF: Obj5C_Index
   21332/   1117E : 2238 F700           		move.l	($FFFFF700).w,d1
   21333/   11182 : D281                		add.l	d1,d1
   21334/   11184 : 4841                		swap	d1
   21335/   11186 : 4441                		neg.w	d1
   21336/   11188 : 3141 0008           		move.w	d1,8(a0)
   21337/   1118C : 2238 F704           		move.l	($FFFFF704).w,d1
   21338/   11190 : D281                		add.l	d1,d1
   21339/   11192 : 4841                		swap	d1
   21340/   11194 : 0241 003F           		andi.w	#$3F,d1
   21341/   11198 : 4441                		neg.w	d1
   21342/   1119A : 0641 0100           		addi.w	#$100,d1
   21343/   1119E : 3141 000A           		move.w	d1,$A(a0)
   21344/   111A2 : 6000 C56A           		bra.w	DisplaySprite
   21345/   111A6 :                     ; ===========================================================================
   21346/   111A6 :                     ; ---------------------------------------------------------------------------
   21347/   111A6 :                     ; Sprite mappings - metal girders in foreground	(SLZ)
   21348/   111A6 :                     ; ---------------------------------------------------------------------------
   21349/   111A6 :                     Map_obj5C:
   21350/   111A6 :                     		include	"_maps/obj5C.asm"
(1)    1/   111A6 :                     ; ---------------------------------------------------------------------------
(1)    2/   111A6 :                     ; Sprite mappings - metal girders in foreground	(SLZ)
(1)    3/   111A6 :                     ; ---------------------------------------------------------------------------
(1)    4/   111A6 : 0002                		dc.w byte_11098-Map_obj5C
(1)    5/   111A8 : 09                  byte_11098:	dc.b 9
(1)    6/   111A9 : 800F 0000 F0        		dc.b $80, $F, 0, 0, $F0
(1)    7/   111AE : A00F 1000 F0        		dc.b $A0, $F, $10, 0, $F0
(1)    8/   111B3 : C00F 0000 F0        		dc.b $C0, $F, 0, 0, $F0
(1)    9/   111B8 : E00F 1000 F0        		dc.b $E0, $F, $10, 0, $F0
(1)   10/   111BD : 000F 0000 F0        		dc.b 0,	$F, 0, 0, $F0
(1)   11/   111C2 : 200F 1000 F0        		dc.b $20, $F, $10, 0, $F0
(1)   12/   111C7 : 400F 0000 F0        		dc.b $40, $F, 0, 0, $F0
(1)   13/   111CC : 600F 1000 F0        		dc.b $60, $F, $10, 0, $F0
(1)   14/   111D1 : 7F0F 0000 F0        		dc.b $7F, $F, 0, 0, $F0
(1)   15/   111D6 : (MACRO)             		align 2
(1)   15/   111D6 :  (MACRO-2)                  cnop 0,2
(1)   15/   111D6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   21351/   111D6 :                     
   21352/   111D6 :                     ; ===========================================================================
   21353/   111D6 :                     ; ---------------------------------------------------------------------------
   21354/   111D6 :                     ; Object 1B - water surface (LZ)
   21355/   111D6 :                     ; ---------------------------------------------------------------------------
   21356/   111D6 :                     
   21357/   111D6 :                     Obj1B:					; XREF: Obj_Index
   21358/   111D6 : 7000                		moveq	#0,d0
   21359/   111D8 : 1028 0024           		move.b	$24(a0),d0
   21360/   111DC : 323B 0006           		move.w	Obj1B_Index(pc,d0.w),d1
   21361/   111E0 : 4EFB 1002           		jmp	Obj1B_Index(pc,d1.w)
   21362/   111E4 :                     ; ===========================================================================
   21363/   111E4 : 0004                Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
   21364/   111E6 : 0028                		dc.w Obj1B_Action-Obj1B_Index
   21365/   111E8 :                     ; ===========================================================================
   21366/   111E8 :                     
   21367/   111E8 :                     Obj1B_Main:				; XREF: Obj1B_Index
   21368/   111E8 : 5428 0024           		addq.b	#2,$24(a0)
   21369/   111EC : 217C 0001 127C 0004 		move.l	#Map_obj1B,4(a0)
   21370/   111F4 : 317C C300 0002      		move.w	#$C300,2(a0)
   21371/   111FA : 117C 0004 0001      		move.b	#4,1(a0)
   21372/   11200 : 117C 0080 0019      		move.b	#$80,$19(a0)
   21373/   11206 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   21374/   1120C :                     
   21375/   1120C :                     Obj1B_Action:				; XREF: Obj1B_Index
   21376/   1120C : 3238 F700           		move.w	($FFFFF700).w,d1
   21377/   11210 : 0241 FFE0           		andi.w	#$FFE0,d1
   21378/   11214 : D268 0030           		add.w	$30(a0),d1
   21379/   11218 : 0838 0000 FE05      		btst	#0,($FFFFFE05).w
   21380/   1121E : 6704                		beq.s	loc_11114
   21381/   11220 : 0641 0020           		addi.w	#$20,d1
   21382/   11224 :                     
   21383/   11224 :                     loc_11114:
   21384/   11224 : 3141 0008           		move.w	d1,8(a0)	; match	obj x-position to screen position
   21385/   11228 : 3238 F646           		move.w	($FFFFF646).w,d1
   21386/   1122C : 3141 000C           		move.w	d1,$C(a0)	; match	obj y-position to water	height
   21387/   11230 : 4A28 0032           		tst.b	$32(a0)
   21388/   11234 : 6614                		bne.s	Obj1B_Animate
   21389/   11236 : 0838 0007 F605      		btst	#7,($FFFFF605).w ; is Start button pressed?
   21390/   1123C : 671C                		beq.s	loc_1114A	; if not, branch
   21391/   1123E : 5628 001A           		addq.b	#3,$1A(a0)	; use different	frames
   21392/   11242 : 117C 0001 0032      		move.b	#1,$32(a0)	; stop animation
   21393/   11248 : 602E                		bra.s	Obj1B_Display
   21394/   1124A :                     ; ===========================================================================
   21395/   1124A :                     
   21396/   1124A :                     Obj1B_Animate:				; XREF: loc_11114
   21397/   1124A : 4A78 F63A           		tst.w	($FFFFF63A).w	; is the game paused?
   21398/   1124E : 6628                		bne.s	Obj1B_Display	; if yes, branch
   21399/   11250 : 117C 0000 0032      		move.b	#0,$32(a0)	; resume animation
   21400/   11256 : 5728 001A           		subq.b	#3,$1A(a0)	; use normal frames
   21401/   1125A :                     
   21402/   1125A :                     loc_1114A:				; XREF: loc_11114
   21403/   1125A : 5328 001E           		subq.b	#1,$1E(a0)
   21404/   1125E : 6A18                		bpl.s	Obj1B_Display
   21405/   11260 : 117C 0007 001E      		move.b	#7,$1E(a0)
   21406/   11266 : 5228 001A           		addq.b	#1,$1A(a0)
   21407/   1126A : 0C28 0003 001A      		cmpi.b	#3,$1A(a0)
   21408/   11270 : 6506                		bcs.s	Obj1B_Display
   21409/   11272 : 117C 0000 001A      		move.b	#0,$1A(a0)
   21410/   11278 :                     
   21411/   11278 :                     Obj1B_Display:
   21412/   11278 : 6000 C494           		bra.w	DisplaySprite
   21413/   1127C :                     ; ===========================================================================
   21414/   1127C :                     ; ---------------------------------------------------------------------------
   21415/   1127C :                     ; Sprite mappings - water surface (LZ)
   21416/   1127C :                     ; ---------------------------------------------------------------------------
   21417/   1127C :                     Map_obj1B:
   21418/   1127C :                     		include	"_maps/obj1B.asm"
(1)    1/   1127C :                     ; ---------------------------------------------------------------------------
(1)    2/   1127C :                     ; Sprite mappings - water surface (LZ)
(1)    3/   1127C :                     ; ---------------------------------------------------------------------------
(1)    4/   1127C : 000C 001C           		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
(1)    5/   11280 : 002C 003C           		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
(1)    6/   11284 : 005B 007A           		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
(1)    7/   11288 : 03                  byte_11178:	dc.b 3
(1)    8/   11289 : FD0D 0000 A0        		dc.b $FD, $D, 0, 0, $A0
(1)    9/   1128E : FD0D 0000 E0        		dc.b $FD, $D, 0, 0, $E0
(1)   10/   11293 : FD0D 0000 20        		dc.b $FD, $D, 0, 0, $20
(1)   11/   11298 : 03                  byte_11188:	dc.b 3
(1)   12/   11299 : FD0D 0008 A0        		dc.b $FD, $D, 0, 8, $A0
(1)   13/   1129E : FD0D 0008 E0        		dc.b $FD, $D, 0, 8, $E0
(1)   14/   112A3 : FD0D 0008 20        		dc.b $FD, $D, 0, 8, $20
(1)   15/   112A8 : 03                  byte_11198:	dc.b 3
(1)   16/   112A9 : FD0D 0800 A0        		dc.b $FD, $D, 8, 0, $A0
(1)   17/   112AE : FD0D 0800 E0        		dc.b $FD, $D, 8, 0, $E0
(1)   18/   112B3 : FD0D 0800 20        		dc.b $FD, $D, 8, 0, $20
(1)   19/   112B8 : 06                  byte_111A8:	dc.b 6
(1)   20/   112B9 : FD0D 0000 A0        		dc.b $FD, $D, 0, 0, $A0
(1)   21/   112BE : FD0D 0000 C0        		dc.b $FD, $D, 0, 0, $C0
(1)   22/   112C3 : FD0D 0000 E0        		dc.b $FD, $D, 0, 0, $E0
(1)   23/   112C8 : FD0D 0000 00        		dc.b $FD, $D, 0, 0, 0
(1)   24/   112CD : FD0D 0000 20        		dc.b $FD, $D, 0, 0, $20
(1)   25/   112D2 : FD0D 0000 40        		dc.b $FD, $D, 0, 0, $40
(1)   26/   112D7 : 06                  byte_111C7:	dc.b 6
(1)   27/   112D8 : FD0D 0008 A0        		dc.b $FD, $D, 0, 8, $A0
(1)   28/   112DD : FD0D 0008 C0        		dc.b $FD, $D, 0, 8, $C0
(1)   29/   112E2 : FD0D 0008 E0        		dc.b $FD, $D, 0, 8, $E0
(1)   30/   112E7 : FD0D 0008 00        		dc.b $FD, $D, 0, 8, 0
(1)   31/   112EC : FD0D 0008 20        		dc.b $FD, $D, 0, 8, $20
(1)   32/   112F1 : FD0D 0008 40        		dc.b $FD, $D, 0, 8, $40
(1)   33/   112F6 : 06                  byte_111E6:	dc.b 6
(1)   34/   112F7 : FD0D 0800 A0        		dc.b $FD, $D, 8, 0, $A0
(1)   35/   112FC : FD0D 0800 C0        		dc.b $FD, $D, 8, 0, $C0
(1)   36/   11301 : FD0D 0800 E0        		dc.b $FD, $D, 8, 0, $E0
(1)   37/   11306 : FD0D 0800 00        		dc.b $FD, $D, 8, 0, 0
(1)   38/   1130B : FD0D 0800 20        		dc.b $FD, $D, 8, 0, $20
(1)   39/   11310 : FD0D 0800 40        		dc.b $FD, $D, 8, 0, $40
(1)   40/   11315 : (MACRO)             		align 2
(1)   40/   11315 :  (MACRO-2)                  cnop 0,2
(1)   40/   11315 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   40/   11315 : =$28                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   40/   11316 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   21419/   11316 :                     
   21420/   11316 :                     ; ===========================================================================
   21421/   11316 :                     ; ---------------------------------------------------------------------------
   21422/   11316 :                     ; Object 0B - pole that	breaks (LZ)
   21423/   11316 :                     ; ---------------------------------------------------------------------------
   21424/   11316 :                     
   21425/   11316 :                     Obj0B:					; XREF: Obj_Index
   21426/   11316 : 7000                		moveq	#0,d0
   21427/   11318 : 1028 0024           		move.b	$24(a0),d0
   21428/   1131C : 323B 0006           		move.w	Obj0B_Index(pc,d0.w),d1
   21429/   11320 : 4EFB 1002           		jmp	Obj0B_Index(pc,d1.w)
   21430/   11324 :                     ; ===========================================================================
   21431/   11324 : 0006                Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
   21432/   11326 : 003E                		dc.w Obj0B_Action-Obj0B_Index
   21433/   11328 : 010A                		dc.w Obj0B_Display-Obj0B_Index
   21434/   1132A :                     ; ===========================================================================
   21435/   1132A :                     
   21436/   1132A :                     Obj0B_Main:				; XREF: Obj0B_Index
   21437/   1132A : 5428 0024           		addq.b	#2,$24(a0)
   21438/   1132E : 217C 0001 1432 0004 		move.l	#Map_obj0B,4(a0)
   21439/   11336 : 317C 43DE 0002      		move.w	#$43DE,2(a0)
   21440/   1133C : 117C 0004 0001      		move.b	#4,1(a0)
   21441/   11342 : 117C 0008 0019      		move.b	#8,$19(a0)
   21442/   11348 : 117C 0004 0018      		move.b	#4,$18(a0)
   21443/   1134E : 117C 00E1 0020      		move.b	#$E1,$20(a0)
   21444/   11354 : 7000                		moveq	#0,d0
   21445/   11356 : 1028 0028           		move.b	$28(a0),d0	; get object type
   21446/   1135A : C0FC 003C           		mulu.w	#60,d0		; multiply by 60 (1 second)
   21447/   1135E : 3140 0030           		move.w	d0,$30(a0)	; set breakage time
   21448/   11362 :                     
   21449/   11362 :                     Obj0B_Action:				; XREF: Obj0B_Index
   21450/   11362 : 4A28 0032           		tst.b	$32(a0)
   21451/   11366 : 6770                		beq.s	Obj0B_Grab
   21452/   11368 : 4A68 0030           		tst.w	$30(a0)
   21453/   1136C : 670E                		beq.s	Obj0B_MoveUp
   21454/   1136E : 5368 0030           		subq.w	#1,$30(a0)
   21455/   11372 : 6608                		bne.s	Obj0B_MoveUp
   21456/   11374 : 117C 0001 001A      		move.b	#1,$1A(a0)	; break	the pole
   21457/   1137A : 6046                		bra.s	Obj0B_Release
   21458/   1137C :                     ; ===========================================================================
   21459/   1137C :                     
   21460/   1137C :                     Obj0B_MoveUp:				; XREF: Obj0B_Action
   21461/   1137C : 43F8 D000           		lea	($FFFFD000).w,a1
   21462/   11380 : 3028 000C           		move.w	$C(a0),d0
   21463/   11384 : 0440 0018           		subi.w	#$18,d0
   21464/   11388 : 0838 0000 F604      		btst	#0,($FFFFF604).w ; check if "up" is pressed
   21465/   1138E : 670E                		beq.s	Obj0B_MoveDown
   21466/   11390 : 5369 000C           		subq.w	#1,$C(a1)	; move Sonic up
   21467/   11394 : B069 000C           		cmp.w	$C(a1),d0
   21468/   11398 : 6504                		bcs.s	Obj0B_MoveDown
   21469/   1139A : 3340 000C           		move.w	d0,$C(a1)
   21470/   1139E :                     
   21471/   1139E :                     Obj0B_MoveDown:
   21472/   1139E : 0640 0024           		addi.w	#$24,d0
   21473/   113A2 : 0838 0001 F604      		btst	#1,($FFFFF604).w ; check if "down" is pressed
   21474/   113A8 : 670E                		beq.s	Obj0B_LetGo
   21475/   113AA : 5269 000C           		addq.w	#1,$C(a1)	; move Sonic down
   21476/   113AE : B069 000C           		cmp.w	$C(a1),d0
   21477/   113B2 : 6404                		bcc.s	Obj0B_LetGo
   21478/   113B4 : 3340 000C           		move.w	d0,$C(a1)
   21479/   113B8 :                     
   21480/   113B8 :                     Obj0B_LetGo:
   21481/   113B8 : 1038 F603           		move.b	($FFFFF603).w,d0
   21482/   113BC : 0240 0070           		andi.w	#$70,d0
   21483/   113C0 : 676C                		beq.s	Obj0B_Display
   21484/   113C2 :                     
   21485/   113C2 :                     Obj0B_Release:				; XREF: Obj0B_Action
   21486/   113C2 : 4228 0020           		clr.b	$20(a0)
   21487/   113C6 : 5428 0024           		addq.b	#2,$24(a0)
   21488/   113CA : 4238 F7C8           		clr.b	($FFFFF7C8).w
   21489/   113CE : 4238 F7C9           		clr.b	($FFFFF7C9).w
   21490/   113D2 : 4228 0032           		clr.b	$32(a0)
   21491/   113D6 : 6056                		bra.s	Obj0B_Display
   21492/   113D8 :                     ; ===========================================================================
   21493/   113D8 :                     
   21494/   113D8 :                     Obj0B_Grab:				; XREF: Obj0B_Action
   21495/   113D8 : 4A28 0021           		tst.b	$21(a0)		; has Sonic touched the	pole?
   21496/   113DC : 6750                		beq.s	Obj0B_Display	; if not, branch
   21497/   113DE : 43F8 D000           		lea	($FFFFD000).w,a1
   21498/   113E2 : 3028 0008           		move.w	8(a0),d0
   21499/   113E6 : 0640 0014           		addi.w	#$14,d0
   21500/   113EA : B069 0008           		cmp.w	8(a1),d0
   21501/   113EE : 643E                		bcc.s	Obj0B_Display
   21502/   113F0 : 4228 0021           		clr.b	$21(a0)
   21503/   113F4 : 0C29 0004 0024      		cmpi.b	#4,$24(a1)
   21504/   113FA : 6432                		bcc.s	Obj0B_Display
   21505/   113FC : 4269 0010           		clr.w	$10(a1)		; stop Sonic moving
   21506/   11400 : 4269 0012           		clr.w	$12(a1)		; stop Sonic moving
   21507/   11404 : 3028 0008           		move.w	8(a0),d0
   21508/   11408 : 0640 0014           		addi.w	#$14,d0
   21509/   1140C : 3340 0008           		move.w	d0,8(a1)
   21510/   11410 : 08A9 0000 0022      		bclr	#0,$22(a1)
   21511/   11416 : 137C 0011 001C      		move.b	#$11,$1C(a1)	; set Sonic"s animation to "hanging" ($11)
   21512/   1141C : 11FC 0001 F7C8      		move.b	#1,($FFFFF7C8).w ; lock	controls
   21513/   11422 : 11FC 0001 F7C9      		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
   21514/   11428 : 117C 0001 0032      		move.b	#1,$32(a0)	; begin	countdown to breakage
   21515/   1142E :                     
   21516/   1142E :                     Obj0B_Display:				; XREF: Obj0B_Index
   21517/   1142E : 6000 E38C           		bra.w	MarkObjGone
   21518/   11432 :                     ; ===========================================================================
   21519/   11432 :                     ; ---------------------------------------------------------------------------
   21520/   11432 :                     ; Sprite mappings - pole that breaks (LZ)
   21521/   11432 :                     ; ---------------------------------------------------------------------------
   21522/   11432 :                     Map_obj0B:
   21523/   11432 :                     		include	"_maps/obj0B.asm"
(1)    1/   11432 :                     ; ---------------------------------------------------------------------------
(1)    2/   11432 :                     ; Sprite mappings - pole that breaks (LZ)
(1)    3/   11432 :                     ; ---------------------------------------------------------------------------
(1)    4/   11432 : 0004                		dc.w byte_11326-Map_obj0B
(1)    5/   11434 : 000F                		dc.w byte_11331-Map_obj0B
(1)    6/   11436 : 02                  byte_11326:	dc.b 2			; normal pole
(1)    7/   11437 : E003 0000 FC        		dc.b $E0, 3, 0,	0, $FC
(1)    8/   1143C : 0003 1000 FC        		dc.b 0,	3, $10,	0, $FC
(1)    9/   11441 : 04                  byte_11331:	dc.b 4			; broken pole
(1)   10/   11442 : E001 0000 FC        		dc.b $E0, 1, 0,	0, $FC
(1)   11/   11447 : F005 0004 FC        		dc.b $F0, 5, 0,	4, $FC
(1)   12/   1144C : 0005 1004 FC        		dc.b 0,	5, $10,	4, $FC
(1)   13/   11451 : 1001 1000 FC        		dc.b $10, 1, $10, 0, $FC
(1)   14/   11456 : (MACRO)             		align 2
(1)   14/   11456 :  (MACRO-2)                  cnop 0,2
(1)   14/   11456 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   21524/   11456 :                     
   21525/   11456 :                     ; ===========================================================================
   21526/   11456 :                     ; ---------------------------------------------------------------------------
   21527/   11456 :                     ; Object 0C - flapping door (LZ)
   21528/   11456 :                     ; ---------------------------------------------------------------------------
   21529/   11456 :                     
   21530/   11456 :                     Obj0C:					; XREF: Obj_Index
   21531/   11456 : 7000                		moveq	#0,d0
   21532/   11458 : 1028 0024           		move.b	$24(a0),d0
   21533/   1145C : 323B 0006           		move.w	Obj0C_Index(pc,d0.w),d1
   21534/   11460 : 4EFB 1002           		jmp	Obj0C_Index(pc,d1.w)
   21535/   11464 :                     ; ===========================================================================
   21536/   11464 : 0004                Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
   21537/   11466 : 0030                		dc.w Obj0C_OpenClose-Obj0C_Index
   21538/   11468 :                     ; ===========================================================================
   21539/   11468 :                     
   21540/   11468 :                     Obj0C_Main:				; XREF: Obj0C_Index
   21541/   11468 : 5428 0024           		addq.b	#2,$24(a0)
   21542/   1146C : 217C 0001 1502 0004 		move.l	#Map_obj0C,4(a0)
   21543/   11474 : 317C 4328 0002      		move.w	#$4328,2(a0)
   21544/   1147A : 0028 0004 0001      		ori.b	#4,1(a0)
   21545/   11480 : 117C 0028 0019      		move.b	#$28,$19(a0)
   21546/   11486 : 7000                		moveq	#0,d0
   21547/   11488 : 1028 0028           		move.b	$28(a0),d0	; get object type
   21548/   1148C : C0FC 003C           		mulu.w	#60,d0		; multiply by 60 (1 second)
   21549/   11490 : 3140 0032           		move.w	d0,$32(a0)	; set flap delay time
   21550/   11494 :                     
   21551/   11494 :                     Obj0C_OpenClose:			; XREF: Obj0C_Index
   21552/   11494 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time delay
   21553/   11498 : 6A1C                		bpl.s	Obj0C_Solid	; if time remains, branch
   21554/   1149A : 3168 0032 0030      		move.w	$32(a0),$30(a0)	; reset	time delay
   21555/   114A0 : 0868 0000 001C      		bchg	#0,$1C(a0)	; open/close door
   21556/   114A6 : 4A28 0001           		tst.b	1(a0)
   21557/   114AA : 6A0A                		bpl.s	Obj0C_Solid
   21558/   114AC : 303C 00BB           		move.w	#$BB,d0
   21559/   114B0 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play door sound
   21560/   114B6 :                     
   21561/   114B6 :                     Obj0C_Solid:
   21562/   114B6 : 43F9 0001 14F2      		lea	(Ani_obj0C).l,a1
   21563/   114BC : 6100 9276           		bsr.w	AnimateSprite
   21564/   114C0 : 4238 F7C9           		clr.b	($FFFFF7C9).w	; enable wind tunnel
   21565/   114C4 : 4A28 001A           		tst.b	$1A(a0)		; is the door open?
   21566/   114C8 : 6624                		bne.s	Obj0C_Display	; if yes, branch
   21567/   114CA : 3038 D008           		move.w	($FFFFD008).w,d0
   21568/   114CE : B068 0008           		cmp.w	8(a0),d0	; is Sonic in front of the door?
   21569/   114D2 : 641A                		bcc.s	Obj0C_Display	; if yes, branch
   21570/   114D4 : 11FC 0001 F7C9      		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
   21571/   114DA : 323C 0013           		move.w	#$13,d1
   21572/   114DE : 343C 0020           		move.w	#$20,d2
   21573/   114E2 : 3602                		move.w	d2,d3
   21574/   114E4 : 5243                		addq.w	#1,d3
   21575/   114E6 : 3828 0008           		move.w	8(a0),d4
   21576/   114EA : 6100 E5FA           		bsr.w	SolidObject	; make the door	solid
   21577/   114EE :                     
   21578/   114EE :                     Obj0C_Display:
   21579/   114EE : 6000 E2CC           		bra.w	MarkObjGone
   21580/   114F2 :                     ; ===========================================================================
   21581/   114F2 :                     Ani_obj0C:
   21582/   114F2 :                     		include	"_anim/obj0C.asm"
(1)    1/   114F2 :                     ; ---------------------------------------------------------------------------
(1)    2/   114F2 :                     ; Animation script - flapping door (LZ)
(1)    3/   114F2 :                     ; ---------------------------------------------------------------------------
(1)    4/   114F2 : 0004                		dc.w byte_113E6-Ani_obj0C
(1)    5/   114F4 : 000A                		dc.w byte_113EC-Ani_obj0C
(1)    6/   114F6 : 0300 0102 FE01      byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
(1)    7/   114FC : 0302 0100 FE01      byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
(1)    8/   11502 : (MACRO)             		align 2
(1)    8/   11502 :  (MACRO-2)                  cnop 0,2
(1)    8/   11502 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   21583/   11502 :                     
   21584/   11502 :                     ; ---------------------------------------------------------------------------
   21585/   11502 :                     ; Sprite mappings - flapping door (LZ)
   21586/   11502 :                     ; ---------------------------------------------------------------------------
   21587/   11502 :                     Map_obj0C:
   21588/   11502 :                     		include	"_maps/obj0C.asm"
(1)    1/   11502 :                     ; ---------------------------------------------------------------------------
(1)    2/   11502 :                     ; Sprite mappings - flapping door (LZ)
(1)    3/   11502 :                     ; ---------------------------------------------------------------------------
(1)    4/   11502 : 0006                		dc.w byte_113F8-Map_obj0C
(1)    5/   11504 : 0011                		dc.w byte_11403-Map_obj0C
(1)    6/   11506 : 001C                		dc.w byte_1140E-Map_obj0C
(1)    7/   11508 : 02                  byte_113F8:	dc.b 2
(1)    8/   11509 : E007 0000 F8        		dc.b $E0, 7, 0,	0, $F8
(1)    9/   1150E : 0007 1000 F8        		dc.b 0,	7, $10,	0, $F8
(1)   10/   11513 : 02                  byte_11403:	dc.b 2
(1)   11/   11514 : DA0F 0008 FB        		dc.b $DA, $F, 0, 8, $FB
(1)   12/   11519 : 060F 1008 FB        		dc.b 6,	$F, $10, 8, $FB
(1)   13/   1151E : 02                  byte_1140E:	dc.b 2
(1)   14/   1151F : D80D 0018 00        		dc.b $D8, $D, 0, $18, 0
(1)   15/   11524 : 180D 1018 00        		dc.b $18, $D, $10, $18,	0
(1)   16/   11529 : (MACRO)             		align 2
(1)   16/   11529 :  (MACRO-2)                  cnop 0,2
(1)   16/   11529 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   16/   11529 : =$29                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   16/   1152A :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   21589/   1152A :                     
   21590/   1152A :                     ; ===========================================================================
   21591/   1152A :                     ; ---------------------------------------------------------------------------
   21592/   1152A :                     ; Object 71 - invisible	solid blocks
   21593/   1152A :                     ; ---------------------------------------------------------------------------
   21594/   1152A :                     
   21595/   1152A :                     Obj71:					; XREF: Obj_Index
   21596/   1152A : 7000                		moveq	#0,d0
   21597/   1152C : 1028 0024           		move.b	$24(a0),d0
   21598/   11530 : 323B 0006           		move.w	Obj71_Index(pc,d0.w),d1
   21599/   11534 : 4EFB 1002           		jmp	Obj71_Index(pc,d1.w)
   21600/   11538 :                     ; ===========================================================================
   21601/   11538 : 0004                Obj71_Index:	dc.w Obj71_Main-Obj71_Index
   21602/   1153A : 003C                		dc.w Obj71_Solid-Obj71_Index
   21603/   1153C :                     ; ===========================================================================
   21604/   1153C :                     
   21605/   1153C :                     Obj71_Main:				; XREF: Obj71_Index
   21606/   1153C : 5428 0024           		addq.b	#2,$24(a0)
   21607/   11540 : 217C 0001 15C6 0004 		move.l	#Map_obj71,4(a0)
   21608/   11548 : 317C 8680 0002      		move.w	#$8680,2(a0)
   21609/   1154E : 0028 0004 0001      		ori.b	#4,1(a0)
   21610/   11554 : 1028 0028           		move.b	$28(a0),d0	; get object type
   21611/   11558 : 1200                		move.b	d0,d1
   21612/   1155A : 0240 00F0           		andi.w	#$F0,d0		; read only the	1st byte
   21613/   1155E : 0640 0010           		addi.w	#$10,d0
   21614/   11562 : E248                		lsr.w	#1,d0
   21615/   11564 : 1140 0019           		move.b	d0,$19(a0)	; set object width
   21616/   11568 : 0241 000F           		andi.w	#$F,d1		; read only the	2nd byte
   21617/   1156C : 5241                		addq.w	#1,d1
   21618/   1156E : E749                		lsl.w	#3,d1
   21619/   11570 : 1141 0016           		move.b	d1,$16(a0)	; set object height
   21620/   11574 :                     
   21621/   11574 :                     Obj71_Solid:				; XREF: Obj71_Index
   21622/   11574 : 6100 C412           		bsr.w	ChkObjOnScreen
   21623/   11578 : 661C                		bne.s	Obj71_ChkDel
   21624/   1157A : 7200                		moveq	#0,d1
   21625/   1157C : 1228 0019           		move.b	$19(a0),d1
   21626/   11580 : 0641 000B           		addi.w	#$B,d1
   21627/   11584 : 7400                		moveq	#0,d2
   21628/   11586 : 1428 0016           		move.b	$16(a0),d2
   21629/   1158A : 3602                		move.w	d2,d3
   21630/   1158C : 5243                		addq.w	#1,d3
   21631/   1158E : 3828 0008           		move.w	8(a0),d4
   21632/   11592 : 6100 E598           		bsr.w	SolidObject71
   21633/   11596 :                     
   21634/   11596 :                     Obj71_ChkDel:
   21635/   11596 : 3028 0008           		move.w	8(a0),d0
   21636/   1159A : 0240 FF80           		andi.w	#$FF80,d0
   21637/   1159E : 3238 F700           		move.w	($FFFFF700).w,d1
   21638/   115A2 : 0441 0080           		subi.w	#$80,d1
   21639/   115A6 : 0241 FF80           		andi.w	#$FF80,d1
   21640/   115AA : 9041                		sub.w	d1,d0
   21641/   115AC : 0C40 0280           		cmpi.w	#$280,d0
   21642/   115B0 : 620E                		bhi.s	Obj71_Delete
   21643/   115B2 : 4A78 FE08           		tst.w	($FFFFFE08).w	; are you using	debug mode?
   21644/   115B6 : 6706                		beq.s	Obj71_NoDisplay	; if not, branch
   21645/   115B8 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l	; if yes, display the object
   21646/   115BE :                     ; ===========================================================================
   21647/   115BE :                     
   21648/   115BE :                     Obj71_NoDisplay:
   21649/   115BE : 4E75                		rts	
   21650/   115C0 :                     ; ===========================================================================
   21651/   115C0 :                     
   21652/   115C0 :                     Obj71_Delete:
   21653/   115C0 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   21654/   115C6 :                     ; ===========================================================================
   21655/   115C6 :                     ; ---------------------------------------------------------------------------
   21656/   115C6 :                     ; Sprite mappings - invisible solid blocks
   21657/   115C6 :                     ; ---------------------------------------------------------------------------
   21658/   115C6 :                     Map_obj71:
   21659/   115C6 :                     		include	"_maps/obj71.asm"
(1)    1/   115C6 :                     ; ---------------------------------------------------------------------------
(1)    2/   115C6 :                     ; Sprite mappings - invisible solid blocks
(1)    3/   115C6 :                     ; ---------------------------------------------------------------------------
(1)    4/   115C6 : 0006                		dc.w byte_114BC-Map_obj71
(1)    5/   115C8 : 001B                		dc.w byte_114D1-Map_obj71
(1)    6/   115CA : 0030                		dc.w byte_114E6-Map_obj71
(1)    7/   115CC : 04                  byte_114BC:	dc.b 4
(1)    8/   115CD : F005 0018 F0        		dc.b $F0, 5, 0,	$18, $F0
(1)    9/   115D2 : F005 0018 00        		dc.b $F0, 5, 0,	$18, 0
(1)   10/   115D7 : 0005 0018 F0        		dc.b 0,	5, 0, $18, $F0
(1)   11/   115DC : 0005 0018 00        		dc.b 0,	5, 0, $18, 0
(1)   12/   115E1 : 04                  byte_114D1:	dc.b 4
(1)   13/   115E2 : E005 0018 C0        		dc.b $E0, 5, 0,	$18, $C0
(1)   14/   115E7 : E005 0018 30        		dc.b $E0, 5, 0,	$18, $30
(1)   15/   115EC : 1005 0018 C0        		dc.b $10, 5, 0,	$18, $C0
(1)   16/   115F1 : 1005 0018 30        		dc.b $10, 5, 0,	$18, $30
(1)   17/   115F6 : 04                  byte_114E6:	dc.b 4
(1)   18/   115F7 : E005 0018 80        		dc.b $E0, 5, 0,	$18, $80
(1)   19/   115FC : E005 0018 70        		dc.b $E0, 5, 0,	$18, $70
(1)   20/   11601 : 1005 0018 80        		dc.b $10, 5, 0,	$18, $80
(1)   21/   11606 : 1005 0018 70        		dc.b $10, 5, 0,	$18, $70
(1)   22/   1160B : (MACRO)             		align 2
(1)   22/   1160B :  (MACRO-2)                  cnop 0,2
(1)   22/   1160B :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   22/   1160B : =$2A                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   22/   1160C :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   21660/   1160C :                     
   21661/   1160C :                     ; ===========================================================================
   21662/   1160C :                     ; ---------------------------------------------------------------------------
   21663/   1160C :                     ; Object 5D - fans (SLZ)
   21664/   1160C :                     ; ---------------------------------------------------------------------------
   21665/   1160C :                     
   21666/   1160C :                     Obj5D:					; XREF: Obj_Index
   21667/   1160C : 7000                		moveq	#0,d0
   21668/   1160E : 1028 0024           		move.b	$24(a0),d0
   21669/   11612 : 323B 0006           		move.w	Obj5D_Index(pc,d0.w),d1
   21670/   11616 : 4EFB 1002           		jmp	Obj5D_Index(pc,d1.w)
   21671/   1161A :                     ; ===========================================================================
   21672/   1161A : 0004                Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
   21673/   1161C : 0028                		dc.w Obj5D_Delay-Obj5D_Index
   21674/   1161E :                     ; ===========================================================================
   21675/   1161E :                     
   21676/   1161E :                     Obj5D_Main:				; XREF: Obj5D_Index
   21677/   1161E : 5428 0024           		addq.b	#2,$24(a0)
   21678/   11622 : 217C 0001 1720 0004 		move.l	#Map_obj5D,4(a0)
   21679/   1162A : 317C 43A0 0002      		move.w	#$43A0,2(a0)
   21680/   11630 : 0028 0004 0001      		ori.b	#4,1(a0)
   21681/   11636 : 117C 0010 0019      		move.b	#$10,$19(a0)
   21682/   1163C : 117C 0004 0018      		move.b	#4,$18(a0)
   21683/   11642 :                     
   21684/   11642 :                     Obj5D_Delay:				; XREF: Obj5D_Index
   21685/   11642 : 0828 0001 0028      		btst	#1,$28(a0)	; is object type 02/03?
   21686/   11648 : 661A                		bne.s	Obj5D_Blow	; if yes, branch
   21687/   1164A : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time delay
   21688/   1164E : 6A14                		bpl.s	Obj5D_Blow	; if time remains, branch
   21689/   11650 : 317C 0078 0030      		move.w	#120,$30(a0)	; set delay to 2 seconds
   21690/   11656 : 0868 0000 0032      		bchg	#0,$32(a0)	; switch fan on/off
   21691/   1165C : 6706                		beq.s	Obj5D_Blow	; if fan is off, branch
   21692/   1165E : 317C 00B4 0030      		move.w	#180,$30(a0)	; set delay to 3 seconds
   21693/   11664 :                     
   21694/   11664 :                     Obj5D_Blow:
   21695/   11664 : 4A28 0032           		tst.b	$32(a0)		; is fan switched on?
   21696/   11668 : 6600 0092           		bne.w	Obj5D_ChkDel	; if not, branch
   21697/   1166C : 43F8 D000           		lea	($FFFFD000).w,a1
   21698/   11670 : 3029 0008           		move.w	8(a1),d0
   21699/   11674 : 9068 0008           		sub.w	8(a0),d0
   21700/   11678 : 0828 0000 0022      		btst	#0,$22(a0)
   21701/   1167E : 6602                		bne.s	Obj5D_ChkSonic
   21702/   11680 : 4440                		neg.w	d0
   21703/   11682 :                     
   21704/   11682 :                     Obj5D_ChkSonic:
   21705/   11682 : 0640 0050           		addi.w	#$50,d0
   21706/   11686 : 0C40 00F0           		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
   21707/   1168A : 643E                		bcc.s	Obj5D_Animate	; if yes, branch
   21708/   1168C : 3229 000C           		move.w	$C(a1),d1
   21709/   11690 : 0641 0060           		addi.w	#$60,d1
   21710/   11694 : 9268 000C           		sub.w	$C(a0),d1
   21711/   11698 : 6530                		bcs.s	Obj5D_Animate
   21712/   1169A : 0C41 0070           		cmpi.w	#$70,d1
   21713/   1169E : 642A                		bcc.s	Obj5D_Animate
   21714/   116A0 : 0440 0050           		subi.w	#$50,d0
   21715/   116A4 : 6404                		bcc.s	loc_1159A
   21716/   116A6 : 4640                		not.w	d0
   21717/   116A8 : D040                		add.w	d0,d0
   21718/   116AA :                     
   21719/   116AA :                     loc_1159A:
   21720/   116AA : 0640 0060           		addi.w	#$60,d0
   21721/   116AE : 0828 0000 0022      		btst	#0,$22(a0)
   21722/   116B4 : 6602                		bne.s	loc_115A8
   21723/   116B6 : 4440                		neg.w	d0
   21724/   116B8 :                     
   21725/   116B8 :                     loc_115A8:
   21726/   116B8 : 4400                		neg.b	d0
   21727/   116BA : E840                		asr.w	#4,d0
   21728/   116BC : 0828 0000 0028      		btst	#0,$28(a0)
   21729/   116C2 : 6702                		beq.s	Obj5D_MoveSonic
   21730/   116C4 : 4440                		neg.w	d0
   21731/   116C6 :                     
   21732/   116C6 :                     Obj5D_MoveSonic:
   21733/   116C6 : D169 0008           		add.w	d0,8(a1)	; push Sonic away from the fan
   21734/   116CA :                     
   21735/   116CA :                     Obj5D_Animate:				; XREF: Obj5D_ChkSonic
   21736/   116CA : 5328 001E           		subq.b	#1,$1E(a0)
   21737/   116CE : 6A2C                		bpl.s	Obj5D_ChkDel
   21738/   116D0 : 117C 0000 001E      		move.b	#0,$1E(a0)
   21739/   116D6 : 5228 001B           		addq.b	#1,$1B(a0)
   21740/   116DA : 0C28 0003 001B      		cmpi.b	#3,$1B(a0)
   21741/   116E0 : 6506                		bcs.s	loc_115D8
   21742/   116E2 : 117C 0000 001B      		move.b	#0,$1B(a0)
   21743/   116E8 :                     
   21744/   116E8 :                     loc_115D8:
   21745/   116E8 : 7000                		moveq	#0,d0
   21746/   116EA : 0828 0000 0028      		btst	#0,$28(a0)
   21747/   116F0 : 6702                		beq.s	loc_115E4
   21748/   116F2 : 7002                		moveq	#2,d0
   21749/   116F4 :                     
   21750/   116F4 :                     loc_115E4:
   21751/   116F4 : D028 001B           		add.b	$1B(a0),d0
   21752/   116F8 : 1140 001A           		move.b	d0,$1A(a0)
   21753/   116FC :                     
   21754/   116FC :                     Obj5D_ChkDel:				; XREF: Obj5D_Animate
   21755/   116FC : 6100 C010           		bsr.w	DisplaySprite
   21756/   11700 : 3028 0008           		move.w	8(a0),d0
   21757/   11704 : 0240 FF80           		andi.w	#$FF80,d0
   21758/   11708 : 3238 F700           		move.w	($FFFFF700).w,d1
   21759/   1170C : 0441 0080           		subi.w	#$80,d1
   21760/   11710 : 0241 FF80           		andi.w	#$FF80,d1
   21761/   11714 : 9041                		sub.w	d1,d0
   21762/   11716 : 0C40 0280           		cmpi.w	#$280,d0
   21763/   1171A : 6200 C02E           		bhi.w	DeleteObject
   21764/   1171E : 4E75                		rts	
   21765/   11720 :                     ; ===========================================================================
   21766/   11720 :                     ; ---------------------------------------------------------------------------
   21767/   11720 :                     ; Sprite mappings - fans (SLZ)
   21768/   11720 :                     ; ---------------------------------------------------------------------------
   21769/   11720 :                     Map_obj5D:
   21770/   11720 :                     		include	"_maps/obj5D.asm"
(1)    1/   11720 :                     ; ---------------------------------------------------------------------------
(1)    2/   11720 :                     ; Sprite mappings - fans (SLZ)
(1)    3/   11720 :                     ; ---------------------------------------------------------------------------
(1)    4/   11720 : 000A 0015           		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
(1)    5/   11724 : 0020 0015           		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
(1)    6/   11728 : 000A                		dc.w byte_1161A-Map_obj5D
(1)    7/   1172A : 02                  byte_1161A:	dc.b 2
(1)    8/   1172B : F009 0000 F8        		dc.b $F0, 9, 0,	0, $F8
(1)    9/   11730 : 000D 0006 F0        		dc.b 0,	$D, 0, 6, $F0
(1)   10/   11735 : 02                  byte_11625:	dc.b 2
(1)   11/   11736 : F00D 000E F0        		dc.b $F0, $D, 0, $E, $F0
(1)   12/   1173B : 000D 0016 F0        		dc.b 0,	$D, 0, $16, $F0
(1)   13/   11740 : 02                  byte_11630:	dc.b 2
(1)   14/   11741 : F00D 001E F0        		dc.b $F0, $D, 0, $1E, $F0
(1)   15/   11746 : 0009 0026 F8        		dc.b 0,	9, 0, $26, $F8
(1)   16/   1174B : (MACRO)             		align 2
(1)   16/   1174B :  (MACRO-2)                  cnop 0,2
(1)   16/   1174B :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   16/   1174B : =$2B                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   16/   1174C :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   21771/   1174C :                     
   21772/   1174C :                     ; ===========================================================================
   21773/   1174C :                     ; ---------------------------------------------------------------------------
   21774/   1174C :                     ; Object 5E - seesaws (SLZ)
   21775/   1174C :                     ; ---------------------------------------------------------------------------
   21776/   1174C :                     
   21777/   1174C :                     Obj5E:					; XREF: Obj_Index
   21778/   1174C : 7000                		moveq	#0,d0
   21779/   1174E : 1028 0024           		move.b	$24(a0),d0
   21780/   11752 : 323B 002C           		move.w	Obj5E_Index(pc,d0.w),d1
   21781/   11756 : 4EBB 1028           		jsr	Obj5E_Index(pc,d1.w)
   21782/   1175A : 3028 0030           		move.w	$30(a0),d0
   21783/   1175E : 0240 FF80           		andi.w	#$FF80,d0
   21784/   11762 : 3238 F700           		move.w	($FFFFF700).w,d1
   21785/   11766 : 0441 0080           		subi.w	#$80,d1
   21786/   1176A : 0241 FF80           		andi.w	#$FF80,d1
   21787/   1176E : 9041                		sub.w	d1,d0
   21788/   11770 : 6B00 BFD8           		bmi.w	DeleteObject
   21789/   11774 : 0C40 0280           		cmpi.w	#$280,d0
   21790/   11778 : 6200 BFD0           		bhi.w	DeleteObject
   21791/   1177C : 6000 BF90           		bra.w	DisplaySprite
   21792/   11780 :                     ; ===========================================================================
   21793/   11780 : 000C                Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
   21794/   11782 : 0076                		dc.w Obj5E_Slope-Obj5E_Index
   21795/   11784 : 00A8                		dc.w Obj5E_Slope2-Obj5E_Index
   21796/   11786 : 0122                		dc.w Obj5E_Spikeball-Obj5E_Index
   21797/   11788 : 0178                		dc.w Obj5E_MoveSpike-Obj5E_Index
   21798/   1178A : 020C                		dc.w Obj5E_SpikeFall-Obj5E_Index
   21799/   1178C :                     ; ===========================================================================
   21800/   1178C :                     
   21801/   1178C :                     Obj5E_Main:				; XREF: Obj5E_Index
   21802/   1178C : 5428 0024           		addq.b	#2,$24(a0)
   21803/   11790 : 217C 0001 1AB4 0004 		move.l	#Map_obj5E,4(a0)
   21804/   11798 : 317C 0374 0002      		move.w	#$374,2(a0)
   21805/   1179E : 0028 0004 0001      		ori.b	#4,1(a0)
   21806/   117A4 : 117C 0004 0018      		move.b	#4,$18(a0)
   21807/   117AA : 117C 0030 0019      		move.b	#$30,$19(a0)
   21808/   117B0 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   21809/   117B6 : 4A28 0028           		tst.b	$28(a0)		; is object type 00 ?
   21810/   117BA : 6626                		bne.s	loc_116D2	; if not, branch
   21811/   117BC : 6100 C3EE           		bsr.w	SingleObjLoad2
   21812/   117C0 : 6620                		bne.s	loc_116D2
   21813/   117C2 : (MACRO)             		_move.b	#$5E,0(a1)	; load spikeball object
   21813/   117C2 :  (MACRO-2)                          insn2op move.b, #$5E,0(a1)
   21813/   117C2 : 137C 005E 0001                              !move.b   #$5E,1+0(a1)
   21813/   117C7 :                                             !org    *-1
   21813/   117C7 : 00                                          !dc.b   0
   21814/   117C8 : 5C29 0024           		addq.b	#6,$24(a1)
   21815/   117CC : 3368 0008 0008      		move.w	8(a0),8(a1)
   21816/   117D2 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   21817/   117D8 : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   21818/   117DE : 2348 003C           		move.l	a0,$3C(a1)
   21819/   117E2 :                     
   21820/   117E2 :                     loc_116D2:
   21821/   117E2 : 0828 0000 0022      		btst	#0,$22(a0)
   21822/   117E8 : 6706                		beq.s	loc_116E0
   21823/   117EA : 117C 0002 001A      		move.b	#2,$1A(a0)
   21824/   117F0 :                     
   21825/   117F0 :                     loc_116E0:
   21826/   117F0 : 1168 001A 003A      		move.b	$1A(a0),$3A(a0)
   21827/   117F6 :                     
   21828/   117F6 :                     Obj5E_Slope:				; XREF: Obj5E_Index
   21829/   117F6 : 1228 003A           		move.b	$3A(a0),d1
   21830/   117FA : 6100 007A           		bsr.w	loc_11766
   21831/   117FE : 45F9 0001 1A54      		lea	(Obj5E_Data1).l,a2
   21832/   11804 : 0828 0000 001A      		btst	#0,$1A(a0)
   21833/   1180A : 6706                		beq.s	loc_11702
   21834/   1180C : 45F9 0001 1A84      		lea	(Obj5E_Data2).l,a2
   21835/   11812 :                     
   21836/   11812 :                     loc_11702:
   21837/   11812 : 43F8 D000           		lea	($FFFFD000).w,a1
   21838/   11816 : 3169 0012 0038      		move.w	$12(a1),$38(a0)
   21839/   1181C : 323C 0030           		move.w	#$30,d1
   21840/   11820 : 4EB9 0000 752C      		jsr	(SlopeObject).l
   21841/   11826 : 4E75                		rts	
   21842/   11828 :                     ; ===========================================================================
   21843/   11828 :                     
   21844/   11828 :                     Obj5E_Slope2:				; XREF: Obj5E_Index
   21845/   11828 : 6100 0030           		bsr.w	loc_1174A
   21846/   1182C : 45F9 0001 1A54      		lea	(Obj5E_Data1).l,a2
   21847/   11832 : 0828 0000 001A      		btst	#0,$1A(a0)
   21848/   11838 : 6706                		beq.s	loc_11730
   21849/   1183A : 45F9 0001 1A84      		lea	(Obj5E_Data2).l,a2
   21850/   11840 :                     
   21851/   11840 :                     loc_11730:
   21852/   11840 : 323C 0030           		move.w	#$30,d1
   21853/   11844 : 4EB9 0000 75CC      		jsr	(ExitPlatform).l
   21854/   1184A : 323C 0030           		move.w	#$30,d1
   21855/   1184E : 3428 0008           		move.w	8(a0),d2
   21856/   11852 : 4EB9 0000 8536      		jsr	(SlopeObject2).l
   21857/   11858 : 4E75                		rts	
   21858/   1185A :                     ; ===========================================================================
   21859/   1185A :                     
   21860/   1185A :                     loc_1174A:				; XREF: Obj5E_Slope2
   21861/   1185A : 7202                		moveq	#2,d1
   21862/   1185C : 43F8 D000           		lea	($FFFFD000).w,a1
   21863/   11860 : 3028 0008           		move.w	8(a0),d0
   21864/   11864 : 9069 0008           		sub.w	8(a1),d0
   21865/   11868 : 6404                		bcc.s	loc_1175E
   21866/   1186A : 4440                		neg.w	d0
   21867/   1186C : 7200                		moveq	#0,d1
   21868/   1186E :                     
   21869/   1186E :                     loc_1175E:
   21870/   1186E : 0C40 0008           		cmpi.w	#8,d0
   21871/   11872 : 6402                		bcc.s	loc_11766
   21872/   11874 : 7201                		moveq	#1,d1
   21873/   11876 :                     
   21874/   11876 :                     loc_11766:
   21875/   11876 : 1028 001A           		move.b	$1A(a0),d0
   21876/   1187A : B001                		cmp.b	d1,d0
   21877/   1187C : 6722                		beq.s	locret_11790
   21878/   1187E : 6402                		bcc.s	loc_11772
   21879/   11880 : 5400                		addq.b	#2,d0
   21880/   11882 :                     
   21881/   11882 :                     loc_11772:
   21882/   11882 : 5300                		subq.b	#1,d0
   21883/   11884 : 1140 001A           		move.b	d0,$1A(a0)
   21884/   11888 : 1141 003A           		move.b	d1,$3A(a0)
   21885/   1188C : 08A8 0000 0001      		bclr	#0,1(a0)
   21886/   11892 : 0828 0001 001A      		btst	#1,$1A(a0)
   21887/   11898 : 6706                		beq.s	locret_11790
   21888/   1189A : 08E8 0000 0001      		bset	#0,1(a0)
   21889/   118A0 :                     
   21890/   118A0 :                     locret_11790:
   21891/   118A0 : 4E75                		rts	
   21892/   118A2 :                     ; ===========================================================================
   21893/   118A2 :                     
   21894/   118A2 :                     Obj5E_Spikeball:			; XREF: Obj5E_Index
   21895/   118A2 : 5428 0024           		addq.b	#2,$24(a0)
   21896/   118A6 : 217C 0001 1AF6 0004 		move.l	#Map_obj5Ea,4(a0)
   21897/   118AE : 317C 04F0 0002      		move.w	#$4F0,2(a0)
   21898/   118B4 : 0028 0004 0001      		ori.b	#4,1(a0)
   21899/   118BA : 117C 0004 0018      		move.b	#4,$18(a0)
   21900/   118C0 : 117C 008B 0020      		move.b	#$8B,$20(a0)
   21901/   118C6 : 117C 000C 0019      		move.b	#$C,$19(a0)
   21902/   118CC : 3168 0008 0030      		move.w	8(a0),$30(a0)
   21903/   118D2 : 0668 0028 0008      		addi.w	#$28,8(a0)
   21904/   118D8 : 3168 000C 0034      		move.w	$C(a0),$34(a0)
   21905/   118DE : 117C 0001 001A      		move.b	#1,$1A(a0)
   21906/   118E4 : 0828 0000 0022      		btst	#0,$22(a0)
   21907/   118EA : 670C                		beq.s	Obj5E_MoveSpike
   21908/   118EC : 0468 0050 0008      		subi.w	#$50,8(a0)
   21909/   118F2 : 117C 0002 003A      		move.b	#2,$3A(a0)
   21910/   118F8 :                     
   21911/   118F8 :                     Obj5E_MoveSpike:			; XREF: Obj5E_Index
   21912/   118F8 : 2268 003C           		movea.l	$3C(a0),a1
   21913/   118FC : 7000                		moveq	#0,d0
   21914/   118FE : 1028 003A           		move.b	$3A(a0),d0
   21915/   11902 : 9029 003A           		sub.b	$3A(a1),d0
   21916/   11906 : 6746                		beq.s	loc_1183E
   21917/   11908 : 6402                		bcc.s	loc_117FC
   21918/   1190A : 4400                		neg.b	d0
   21919/   1190C :                     
   21920/   1190C :                     loc_117FC:
   21921/   1190C : 323C F7E8           		move.w	#-$818,d1
   21922/   11910 : 343C FEEC           		move.w	#-$114,d2
   21923/   11914 : 0C00 0001           		cmpi.b	#1,d0
   21924/   11918 : 6718                		beq.s	loc_11822
   21925/   1191A : 323C F510           		move.w	#-$AF0,d1
   21926/   1191E : 343C FF34           		move.w	#-$CC,d2
   21927/   11922 : 0C69 0A00 0038      		cmpi.w	#$A00,$38(a1)
   21928/   11928 : 6D08                		blt.s	loc_11822
   21929/   1192A : 323C F200           		move.w	#-$E00,d1
   21930/   1192E : 343C FF60           		move.w	#-$A0,d2
   21931/   11932 :                     
   21932/   11932 :                     loc_11822:
   21933/   11932 : 3141 0012           		move.w	d1,$12(a0)
   21934/   11936 : 3142 0010           		move.w	d2,$10(a0)
   21935/   1193A : 3028 0008           		move.w	8(a0),d0
   21936/   1193E : 9068 0030           		sub.w	$30(a0),d0
   21937/   11942 : 6404                		bcc.s	loc_11838
   21938/   11944 : 4468 0010           		neg.w	$10(a0)
   21939/   11948 :                     
   21940/   11948 :                     loc_11838:
   21941/   11948 : 5428 0024           		addq.b	#2,$24(a0)
   21942/   1194C : 603E                		bra.s	Obj5E_SpikeFall
   21943/   1194E :                     ; ===========================================================================
   21944/   1194E :                     
   21945/   1194E :                     loc_1183E:				; XREF: Obj5E_MoveSpike
   21946/   1194E : 45F9 0001 1A4A      		lea	(Obj5E_Speeds).l,a2
   21947/   11954 : 7000                		moveq	#0,d0
   21948/   11956 : 1029 001A           		move.b	$1A(a1),d0
   21949/   1195A : 343C 0028           		move.w	#$28,d2
   21950/   1195E : 3228 0008           		move.w	8(a0),d1
   21951/   11962 : 9268 0030           		sub.w	$30(a0),d1
   21952/   11966 : 6404                		bcc.s	loc_1185C
   21953/   11968 : 4442                		neg.w	d2
   21954/   1196A : 5440                		addq.w	#2,d0
   21955/   1196C :                     
   21956/   1196C :                     loc_1185C:
   21957/   1196C : D040                		add.w	d0,d0
   21958/   1196E : 3228 0034           		move.w	$34(a0),d1
   21959/   11972 : D272 0000           		add.w	(a2,d0.w),d1
   21960/   11976 : 3141 000C           		move.w	d1,$C(a0)
   21961/   1197A : D468 0030           		add.w	$30(a0),d2
   21962/   1197E : 3142 0008           		move.w	d2,8(a0)
   21963/   11982 : 4268 000E           		clr.w	$E(a0)
   21964/   11986 : 4268 000A           		clr.w	$A(a0)
   21965/   1198A : 4E75                		rts	
   21966/   1198C :                     ; ===========================================================================
   21967/   1198C :                     
   21968/   1198C :                     Obj5E_SpikeFall:			; XREF: Obj5E_Index
   21969/   1198C : 4A68 0012           		tst.w	$12(a0)
   21970/   11990 : 6A18                		bpl.s	loc_1189A
   21971/   11992 : 6100 BD28           		bsr.w	ObjectFall
   21972/   11996 : 3028 0034           		move.w	$34(a0),d0
   21973/   1199A : 0440 002F           		subi.w	#$2F,d0
   21974/   1199E : B068 000C           		cmp.w	$C(a0),d0
   21975/   119A2 : 6E04                		bgt.s	locret_11898
   21976/   119A4 : 6100 BD16           		bsr.w	ObjectFall
   21977/   119A8 :                     
   21978/   119A8 :                     locret_11898:
   21979/   119A8 : 4E75                		rts	
   21980/   119AA :                     ; ===========================================================================
   21981/   119AA :                     
   21982/   119AA :                     loc_1189A:				; XREF: Obj5E_SpikeFall
   21983/   119AA : 6100 BD10           		bsr.w	ObjectFall
   21984/   119AE : 2268 003C           		movea.l	$3C(a0),a1
   21985/   119B2 : 45F9 0001 1A4A      		lea	(Obj5E_Speeds).l,a2
   21986/   119B8 : 7000                		moveq	#0,d0
   21987/   119BA : 1029 001A           		move.b	$1A(a1),d0
   21988/   119BE : 3228 0008           		move.w	8(a0),d1
   21989/   119C2 : 9268 0030           		sub.w	$30(a0),d1
   21990/   119C6 : 6402                		bcc.s	loc_118BA
   21991/   119C8 : 5440                		addq.w	#2,d0
   21992/   119CA :                     
   21993/   119CA :                     loc_118BA:
   21994/   119CA : D040                		add.w	d0,d0
   21995/   119CC : 3228 0034           		move.w	$34(a0),d1
   21996/   119D0 : D272 0000           		add.w	(a2,d0.w),d1
   21997/   119D4 : B268 000C           		cmp.w	$C(a0),d1
   21998/   119D8 : 6E6E                		bgt.s	locret_11938
   21999/   119DA : 2268 003C           		movea.l	$3C(a0),a1
   22000/   119DE : 7202                		moveq	#2,d1
   22001/   119E0 : 4A68 0010           		tst.w	$10(a0)
   22002/   119E4 : 6B02                		bmi.s	Obj5E_Spring
   22003/   119E6 : 7200                		moveq	#0,d1
   22004/   119E8 :                     
   22005/   119E8 :                     Obj5E_Spring:
   22006/   119E8 : 1341 003A           		move.b	d1,$3A(a1)
   22007/   119EC : 1141 003A           		move.b	d1,$3A(a0)
   22008/   119F0 : B229 001A           		cmp.b	$1A(a1),d1
   22009/   119F4 : 6746                		beq.s	loc_1192C
   22010/   119F6 : 08A9 0003 0022      		bclr	#3,$22(a1)
   22011/   119FC : 673E                		beq.s	loc_1192C
   22012/   119FE : 4229 0025           		clr.b	$25(a1)
   22013/   11A02 : 137C 0002 0024      		move.b	#2,$24(a1)
   22014/   11A08 : 45F8 D000           		lea	($FFFFD000).w,a2
   22015/   11A0C : 3568 0012 0012      		move.w	$12(a0),$12(a2)
   22016/   11A12 : 446A 0012           		neg.w	$12(a2)
   22017/   11A16 : 08EA 0001 0022      		bset	#1,$22(a2)
   22018/   11A1C : 08AA 0003 0022      		bclr	#3,$22(a2)
   22019/   11A22 : 422A 003C           		clr.b	$3C(a2)
   22020/   11A26 : 157C 0010 001C      		move.b	#$10,$1C(a2)	; change Sonic"s animation to "spring" ($10)
   22021/   11A2C : 157C 0002 0024      		move.b	#2,$24(a2)
   22022/   11A32 : 303C 00CC           		move.w	#$CC,d0
   22023/   11A36 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play spring sound
   22024/   11A3C :                     
   22025/   11A3C :                     loc_1192C:
   22026/   11A3C : 4268 0010           		clr.w	$10(a0)
   22027/   11A40 : 4268 0012           		clr.w	$12(a0)
   22028/   11A44 : 5528 0024           		subq.b	#2,$24(a0)
   22029/   11A48 :                     
   22030/   11A48 :                     locret_11938:
   22031/   11A48 : 4E75                		rts	
   22032/   11A4A :                     ; ===========================================================================
   22033/   11A4A : FFF8 FFE4 FFD1 FFE4 Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
                    FFF8                
   22034/   11A54 :                     
   22035/   11A54 :                     Obj5E_Data1:	binclude	misc/slzssaw1.bin
   22036/   11A84 : (MACRO)             		align 2
   22036/   11A84 :  (MACRO-2)                  cnop 0,2
   22036/   11A84 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   22037/   11A84 :                     Obj5E_Data2:	binclude	misc/slzssaw2.bin
   22038/   11AB4 : (MACRO)             		align 2
   22038/   11AB4 :  (MACRO-2)                  cnop 0,2
   22038/   11AB4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   22039/   11AB4 :                     ; ---------------------------------------------------------------------------
   22040/   11AB4 :                     ; Sprite mappings - seesaws (SLZ)
   22041/   11AB4 :                     ; ---------------------------------------------------------------------------
   22042/   11AB4 :                     Map_obj5E:
   22043/   11AB4 :                     		include	"_maps/obj5E.asm"
(1)    1/   11AB4 :                     ; ---------------------------------------------------------------------------
(1)    2/   11AB4 :                     ; Sprite mappings - seesaws (SLZ)
(1)    3/   11AB4 :                     ; ---------------------------------------------------------------------------
(1)    4/   11AB4 : 0008 002C           		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
(1)    5/   11AB8 : 0008 002C           		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
(1)    6/   11ABC : 07                  byte_119AC:	dc.b 7
(1)    7/   11ABD : D406 0000 D3        		dc.b $D4, 6, 0,	0, $D3
(1)    8/   11AC2 : DC06 0006 E3        		dc.b $DC, 6, 0,	6, $E3
(1)    9/   11AC7 : E404 000C F3        		dc.b $E4, 4, 0,	$C, $F3
(1)   10/   11ACC : EC0D 000E F3        		dc.b $EC, $D, 0, $E, $F3
(1)   11/   11AD1 : FC08 0016 FB        		dc.b $FC, 8, 0,	$16, $FB
(1)   12/   11AD6 : F406 0006 13        		dc.b $F4, 6, 0,	6, $13
(1)   13/   11ADB : FC05 0019 23        		dc.b $FC, 5, 0,	$19, $23
(1)   14/   11AE0 : 04                  byte_119D0:	dc.b 4
(1)   15/   11AE1 : E60A 001D D0        		dc.b $E6, $A, 0, $1D, $D0
(1)   16/   11AE6 : E60A 0023 E8        		dc.b $E6, $A, 0, $23, $E8
(1)   17/   11AEB : E60A 0823 00        		dc.b $E6, $A, 8, $23, 0
(1)   18/   11AF0 : E60A 081D 18        		dc.b $E6, $A, 8, $1D, $18
(1)   19/   11AF5 : (MACRO)             		align 2
(1)   19/   11AF5 :  (MACRO-2)                  cnop 0,2
(1)   19/   11AF5 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   19/   11AF5 : =$2C                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   19/   11AF6 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   22044/   11AF6 :                     
   22045/   11AF6 :                     ; ---------------------------------------------------------------------------
   22046/   11AF6 :                     ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
   22047/   11AF6 :                     ; ---------------------------------------------------------------------------
   22048/   11AF6 :                     Map_obj5Ea:
   22049/   11AF6 :                     		include	"_maps/obj5Eballs.asm"
(1)    1/   11AF6 :                     ; ---------------------------------------------------------------------------
(1)    2/   11AF6 :                     ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
(1)    3/   11AF6 :                     ; ---------------------------------------------------------------------------
(1)    4/   11AF6 : 0004                		dc.w byte_119EA-Map_obj5Ea
(1)    5/   11AF8 : 000A                		dc.w byte_119F0-Map_obj5Ea
(1)    6/   11AFA : 01                  byte_119EA:	dc.b 1
(1)    7/   11AFB : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/   11B00 : 01                  byte_119F0:	dc.b 1
(1)    9/   11B01 : F40A 0009 F4        		dc.b $F4, $A, 0, 9, $F4
(1)   10/   11B06 : (MACRO)             		align 2
(1)   10/   11B06 :  (MACRO-2)                  cnop 0,2
(1)   10/   11B06 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   22050/   11B06 :                     
   22051/   11B06 :                     ; ===========================================================================
   22052/   11B06 :                     ; ---------------------------------------------------------------------------
   22053/   11B06 :                     ; Object 5F - walking bomb enemy (SLZ, SBZ)
   22054/   11B06 :                     ; ---------------------------------------------------------------------------
   22055/   11B06 :                     
   22056/   11B06 :                     Obj5F:					; XREF: Obj_Index
   22057/   11B06 : 7000                		moveq	#0,d0
   22058/   11B08 : 1028 0024           		move.b	$24(a0),d0
   22059/   11B0C : 323B 0006           		move.w	Obj5F_Index(pc,d0.w),d1
   22060/   11B10 : 4EFB 1002           		jmp	Obj5F_Index(pc,d1.w)
   22061/   11B14 :                     ; ===========================================================================
   22062/   11B14 : 0008                Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
   22063/   11B16 : 0044                		dc.w Obj5F_Action-Obj5F_Index
   22064/   11B18 : 015C                		dc.w Obj5F_Display-Obj5F_Index
   22065/   11B1A : 01D4                		dc.w Obj5F_End-Obj5F_Index
   22066/   11B1C :                     ; ===========================================================================
   22067/   11B1C :                     
   22068/   11B1C :                     Obj5F_Main:				; XREF: Obj5F_Index
   22069/   11B1C : 5428 0024           		addq.b	#2,$24(a0)
   22070/   11B20 : 217C 0001 1D38 0004 		move.l	#Map_obj5F,4(a0)
   22071/   11B28 : 317C 0400 0002      		move.w	#$400,2(a0)
   22072/   11B2E : 0028 0004 0001      		ori.b	#4,1(a0)
   22073/   11B34 : 117C 0003 0018      		move.b	#3,$18(a0)
   22074/   11B3A : 117C 000C 0019      		move.b	#$C,$19(a0)
   22075/   11B40 : 1028 0028           		move.b	$28(a0),d0
   22076/   11B44 : 6706                		beq.s	loc_11A3C
   22077/   11B46 : 1140 0024           		move.b	d0,$24(a0)
   22078/   11B4A : 4E75                		rts	
   22079/   11B4C :                     ; ===========================================================================
   22080/   11B4C :                     
   22081/   11B4C :                     loc_11A3C:
   22082/   11B4C : 117C 009A 0020      		move.b	#$9A,$20(a0)
   22083/   11B52 : 0868 0000 0022      		bchg	#0,$22(a0)
   22084/   11B58 :                     
   22085/   11B58 :                     Obj5F_Action:				; XREF: Obj5F_Index
   22086/   11B58 : 7000                		moveq	#0,d0
   22087/   11B5A : 1028 0025           		move.b	$25(a0),d0
   22088/   11B5E : 323B 0014           		move.w	Obj5F_Index2(pc,d0.w),d1
   22089/   11B62 : 4EBB 1010           		jsr	Obj5F_Index2(pc,d1.w)
   22090/   11B66 : 43F9 0001 1D18      		lea	(Ani_obj5F).l,a1
   22091/   11B6C : 6100 8BC6           		bsr.w	AnimateSprite
   22092/   11B70 : 6000 DC4A           		bra.w	MarkObjGone
   22093/   11B74 :                     ; ===========================================================================
   22094/   11B74 : 0006                Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
   22095/   11B76 : 0034                		dc.w Obj5F_Wait-Obj5F_Index2
   22096/   11B78 : 005A                		dc.w Obj5F_Explode-Obj5F_Index2
   22097/   11B7A :                     ; ===========================================================================
   22098/   11B7A :                     
   22099/   11B7A :                     Obj5F_Walk:				; XREF: Obj5F_Index2
   22100/   11B7A : 6100 0066           		bsr.w	Obj5F_ChkSonic
   22101/   11B7E : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time delay
   22102/   11B82 : 6A22                		bpl.s	locret_11A96	; if time remains, branch
   22103/   11B84 : 5428 0025           		addq.b	#2,$25(a0)
   22104/   11B88 : 317C 05FF 0030      		move.w	#1535,$30(a0)	; set time delay to 25 seconds
   22105/   11B8E : 317C 0010 0010      		move.w	#$10,$10(a0)
   22106/   11B94 : 117C 0001 001C      		move.b	#1,$1C(a0)
   22107/   11B9A : 0868 0000 0022      		bchg	#0,$22(a0)
   22108/   11BA0 : 6704                		beq.s	locret_11A96
   22109/   11BA2 : 4468 0010           		neg.w	$10(a0)		; change direction
   22110/   11BA6 :                     
   22111/   11BA6 :                     locret_11A96:
   22112/   11BA6 : 4E75                		rts	
   22113/   11BA8 :                     ; ===========================================================================
   22114/   11BA8 :                     
   22115/   11BA8 :                     Obj5F_Wait:				; XREF: Obj5F_Index2
   22116/   11BA8 : 6100 0038           		bsr.w	Obj5F_ChkSonic
   22117/   11BAC : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time delay
   22118/   11BB0 : 6B06                		bmi.s	loc_11AA8
   22119/   11BB2 : 6100 BB34           		bsr.w	SpeedToPos
   22120/   11BB6 : 4E75                		rts	
   22121/   11BB8 :                     ; ===========================================================================
   22122/   11BB8 :                     
   22123/   11BB8 :                     loc_11AA8:
   22124/   11BB8 : 5528 0025           		subq.b	#2,$25(a0)
   22125/   11BBC : 317C 00B3 0030      		move.w	#179,$30(a0)	; set time delay to 3 seconds
   22126/   11BC2 : 4268 0010           		clr.w	$10(a0)		; stop walking
   22127/   11BC6 : 117C 0000 001C      		move.b	#0,$1C(a0)	; stop animation
   22128/   11BCC : 4E75                		rts	
   22129/   11BCE :                     ; ===========================================================================
   22130/   11BCE :                     
   22131/   11BCE :                     Obj5F_Explode:				; XREF: Obj5F_Index2
   22132/   11BCE : 5368 0030           		subq.w	#1,$30(a0)
   22133/   11BD2 : 6A0C                		bpl.s	locret_11AD0
   22134/   11BD4 : (MACRO)             		_move.b	#$3F,0(a0)	; change bomb into an explosion
   22134/   11BD4 :  (MACRO-2)                          insn2op move.b, #$3F,0(a0)
   22134/   11BD4 : 117C 003F 0001                              !move.b   #$3F,1+0(a0)
   22134/   11BD9 :                                             !org    *-1
   22134/   11BD9 : 00                                          !dc.b   0
   22135/   11BDA : 117C 0000 0024      		move.b	#0,$24(a0)
   22136/   11BE0 :                     
   22137/   11BE0 :                     locret_11AD0:
   22138/   11BE0 : 4E75                		rts	
   22139/   11BE2 :                     ; ===========================================================================
   22140/   11BE2 :                     
   22141/   11BE2 :                     Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
   22142/   11BE2 : 3038 D008           		move.w	($FFFFD008).w,d0
   22143/   11BE6 : 9068 0008           		sub.w	8(a0),d0
   22144/   11BEA : 6402                		bcc.s	loc_11ADE
   22145/   11BEC : 4440                		neg.w	d0
   22146/   11BEE :                     
   22147/   11BEE :                     loc_11ADE:
   22148/   11BEE : 0C40 0060           		cmpi.w	#$60,d0
   22149/   11BF2 : 647A                		bcc.s	locret_11B5E
   22150/   11BF4 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   22151/   11BF8 : 9068 000C           		sub.w	$C(a0),d0
   22152/   11BFC : 6402                		bcc.s	Obj5F_MakeFuse
   22153/   11BFE : 4440                		neg.w	d0
   22154/   11C00 :                     
   22155/   11C00 :                     Obj5F_MakeFuse:
   22156/   11C00 : 0C40 0060           		cmpi.w	#$60,d0
   22157/   11C04 : 6468                		bcc.s	locret_11B5E
   22158/   11C06 : 4A78 FE08           		tst.w	($FFFFFE08).w
   22159/   11C0A : 6662                		bne.s	locret_11B5E
   22160/   11C0C : 117C 0004 0025      		move.b	#4,$25(a0)
   22161/   11C12 : 317C 008F 0030      		move.w	#143,$30(a0)	; set fuse time
   22162/   11C18 : 4268 0010           		clr.w	$10(a0)
   22163/   11C1C : 117C 0002 001C      		move.b	#2,$1C(a0)
   22164/   11C22 : 6100 BF88           		bsr.w	SingleObjLoad2
   22165/   11C26 : 6646                		bne.s	locret_11B5E
   22166/   11C28 : (MACRO)             		_move.b	#$5F,0(a1)	; load fuse object
   22166/   11C28 :  (MACRO-2)                          insn2op move.b, #$5F,0(a1)
   22166/   11C28 : 137C 005F 0001                              !move.b   #$5F,1+0(a1)
   22166/   11C2D :                                             !org    *-1
   22166/   11C2D : 00                                          !dc.b   0
   22167/   11C2E : 3368 0008 0008      		move.w	8(a0),8(a1)
   22168/   11C34 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   22169/   11C3A : 3368 000C 0034      		move.w	$C(a0),$34(a1)
   22170/   11C40 : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   22171/   11C46 : 137C 0004 0028      		move.b	#4,$28(a1)
   22172/   11C4C : 137C 0003 001C      		move.b	#3,$1C(a1)
   22173/   11C52 : 337C 0010 0012      		move.w	#$10,$12(a1)
   22174/   11C58 : 0828 0001 0022      		btst	#1,$22(a0)
   22175/   11C5E : 6704                		beq.s	loc_11B54
   22176/   11C60 : 4469 0012           		neg.w	$12(a1)
   22177/   11C64 :                     
   22178/   11C64 :                     loc_11B54:
   22179/   11C64 : 337C 008F 0030      		move.w	#143,$30(a1)	; set fuse time
   22180/   11C6A : 2348 003C           		move.l	a0,$3C(a1)
   22181/   11C6E :                     
   22182/   11C6E :                     locret_11B5E:
   22183/   11C6E : 4E75                		rts	
   22184/   11C70 :                     ; ===========================================================================
   22185/   11C70 :                     
   22186/   11C70 :                     Obj5F_Display:				; XREF: Obj5F_Index
   22187/   11C70 : 610E                		bsr.s	loc_11B70
   22188/   11C72 : 43F9 0001 1D18      		lea	(Ani_obj5F).l,a1
   22189/   11C78 : 6100 8ABA           		bsr.w	AnimateSprite
   22190/   11C7C : 6000 DB3E           		bra.w	MarkObjGone
   22191/   11C80 :                     ; ===========================================================================
   22192/   11C80 :                     
   22193/   11C80 :                     loc_11B70:
   22194/   11C80 : 5368 0030           		subq.w	#1,$30(a0)
   22195/   11C84 : 6B06                		bmi.s	loc_11B7C
   22196/   11C86 : 6100 BA60           		bsr.w	SpeedToPos
   22197/   11C8A : 4E75                		rts	
   22198/   11C8C :                     ; ===========================================================================
   22199/   11C8C :                     
   22200/   11C8C :                     loc_11B7C:
   22201/   11C8C : 4268 0030           		clr.w	$30(a0)
   22202/   11C90 : 4228 0024           		clr.b	$24(a0)
   22203/   11C94 : 3168 0034 000C      		move.w	$34(a0),$C(a0)
   22204/   11C9A : 7203                		moveq	#3,d1
   22205/   11C9C : 2248                		movea.l	a0,a1
   22206/   11C9E : 45F9 0001 1D08      		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
   22207/   11CA4 : 6006                		bra.s	Obj5F_MakeShrap
   22208/   11CA6 :                     ; ===========================================================================
   22209/   11CA6 :                     
   22210/   11CA6 :                     Obj5F_Loop:
   22211/   11CA6 : 6100 BF04           		bsr.w	SingleObjLoad2
   22212/   11CAA : 6632                		bne.s	loc_11BCE
   22213/   11CAC :                     
   22214/   11CAC :                     Obj5F_MakeShrap:			; XREF: loc_11B7C
   22215/   11CAC : (MACRO)             		_move.b	#$5F,0(a1)	; load shrapnel	object
   22215/   11CAC :  (MACRO-2)                          insn2op move.b, #$5F,0(a1)
   22215/   11CAC : 137C 005F 0001                              !move.b   #$5F,1+0(a1)
   22215/   11CB1 :                                             !org    *-1
   22215/   11CB1 : 00                                          !dc.b   0
   22216/   11CB2 : 3368 0008 0008      		move.w	8(a0),8(a1)
   22217/   11CB8 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   22218/   11CBE : 137C 0006 0028      		move.b	#6,$28(a1)
   22219/   11CC4 : 137C 0004 001C      		move.b	#4,$1C(a1)
   22220/   11CCA : 335A 0010           		move.w	(a2)+,$10(a1)
   22221/   11CCE : 335A 0012           		move.w	(a2)+,$12(a1)
   22222/   11CD2 : 137C 0098 0020      		move.b	#$98,$20(a1)
   22223/   11CD8 : 08E9 0007 0001      		bset	#7,1(a1)
   22224/   11CDE :                     
   22225/   11CDE :                     loc_11BCE:
   22226/   11CDE : 51C9 FFC6           		dbf	d1,Obj5F_Loop	; repeat 3 more	times
   22227/   11CE2 :                     
   22228/   11CE2 : 117C 0006 0024      		move.b	#6,$24(a0)
   22229/   11CE8 :                     
   22230/   11CE8 :                     Obj5F_End:				; XREF: Obj5F_Index
   22231/   11CE8 : 6100 B9FE           		bsr.w	SpeedToPos
   22232/   11CEC : 0668 0018 0012      		addi.w	#$18,$12(a0)
   22233/   11CF2 : 43F9 0001 1D18      		lea	(Ani_obj5F).l,a1
   22234/   11CF8 : 6100 8A3A           		bsr.w	AnimateSprite
   22235/   11CFC : 4A28 0001           		tst.b	1(a0)
   22236/   11D00 : 6A00 BA48           		bpl.w	DeleteObject
   22237/   11D04 : 6000 BA08           		bra.w	DisplaySprite
   22238/   11D08 :                     ; ===========================================================================
   22239/   11D08 : FE00 FD00 FF00 FE00 Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
                    0200 FD00 0100 FE00 
   22240/   11D18 :                     
   22241/   11D18 :                     Ani_obj5F:
   22242/   11D18 :                     		include	"_anim/obj5F.asm"
(1)    1/   11D18 :                     ; ---------------------------------------------------------------------------
(1)    2/   11D18 :                     ; Animation script - Bomb enemy
(1)    3/   11D18 :                     ; ---------------------------------------------------------------------------
(1)    4/   11D18 : 000A                		dc.w byte_11C12-Ani_obj5F
(1)    5/   11D1A : 000E                		dc.w byte_11C16-Ani_obj5F
(1)    6/   11D1C : 0014                		dc.w byte_11C1C-Ani_obj5F
(1)    7/   11D1E : 0018                		dc.w byte_11C20-Ani_obj5F
(1)    8/   11D20 : 001C                		dc.w byte_11C24-Ani_obj5F
(1)    9/   11D22 : 1301 00FF           byte_11C12:	dc.b $13, 1, 0,	$FF
(1)   10/   11D26 : 1305 0403 02FF      byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
(1)   11/   11D2C : 1307 06FF           byte_11C1C:	dc.b $13, 7, 6,	$FF
(1)   12/   11D30 : 0308 09FF           byte_11C20:	dc.b 3,	8, 9, $FF
(1)   13/   11D34 : 030A 0BFF           byte_11C24:	dc.b 3,	$A, $B,	$FF
(1)   14/   11D38 : (MACRO)             		align 2
(1)   14/   11D38 :  (MACRO-2)                  cnop 0,2
(1)   14/   11D38 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   22243/   11D38 :                     
   22244/   11D38 :                     ; ---------------------------------------------------------------------------
   22245/   11D38 :                     ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
   22246/   11D38 :                     ; ---------------------------------------------------------------------------
   22247/   11D38 :                     Map_obj5F:
   22248/   11D38 :                     		include	"_maps/obj5F.asm"
(1)    1/   11D38 :                     ; ---------------------------------------------------------------------------
(1)    2/   11D38 :                     ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
(1)    3/   11D38 :                     ; ---------------------------------------------------------------------------
(1)    4/   11D38 : 0018 0028           		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
(1)    5/   11D3C : 0038 0048           		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
(1)    6/   11D40 : 0058 0068           		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
(1)    7/   11D44 : 0078 0083           		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
(1)    8/   11D48 : 008E 0094           		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
(1)    9/   11D4C : 009A 00A0           		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
(1)   10/   11D50 : 03                  byte_11C40:	dc.b 3
(1)   11/   11D51 : F10A 0000 F4        		dc.b $F1, $A, 0, 0, $F4
(1)   12/   11D56 : 0908 0012 F4        		dc.b 9,	8, 0, $12, $F4
(1)   13/   11D5B : E701 0021 FC        		dc.b $E7, 1, 0,	$21, $FC
(1)   14/   11D60 : 03                  byte_11C50:	dc.b 3
(1)   15/   11D61 : F10A 0009 F4        		dc.b $F1, $A, 0, 9, $F4
(1)   16/   11D66 : 0908 0012 F4        		dc.b 9,	8, 0, $12, $F4
(1)   17/   11D6B : E701 0021 FC        		dc.b $E7, 1, 0,	$21, $FC
(1)   18/   11D70 : 03                  byte_11C60:	dc.b 3
(1)   19/   11D71 : F00A 0000 F4        		dc.b $F0, $A, 0, 0, $F4
(1)   20/   11D76 : 0808 0015 F4        		dc.b 8,	8, 0, $15, $F4
(1)   21/   11D7B : E601 0021 FC        		dc.b $E6, 1, 0,	$21, $FC
(1)   22/   11D80 : 03                  byte_11C70:	dc.b 3
(1)   23/   11D81 : F10A 0009 F4        		dc.b $F1, $A, 0, 9, $F4
(1)   24/   11D86 : 0908 0018 F4        		dc.b 9,	8, 0, $18, $F4
(1)   25/   11D8B : E701 0021 FC        		dc.b $E7, 1, 0,	$21, $FC
(1)   26/   11D90 : 03                  byte_11C80:	dc.b 3
(1)   27/   11D91 : F00A 0000 F4        		dc.b $F0, $A, 0, 0, $F4
(1)   28/   11D96 : 0808 001B F4        		dc.b 8,	8, 0, $1B, $F4
(1)   29/   11D9B : E601 0021 FC        		dc.b $E6, 1, 0,	$21, $FC
(1)   30/   11DA0 : 03                  byte_11C90:	dc.b 3
(1)   31/   11DA1 : F10A 0009 F4        		dc.b $F1, $A, 0, 9, $F4
(1)   32/   11DA6 : 0908 001E F4        		dc.b 9,	8, 0, $1E, $F4
(1)   33/   11DAB : E701 0021 FC        		dc.b $E7, 1, 0,	$21, $FC
(1)   34/   11DB0 : 02                  byte_11CA0:	dc.b 2
(1)   35/   11DB1 : F10A 0000 F4        		dc.b $F1, $A, 0, 0, $F4
(1)   36/   11DB6 : 0908 0012 F4        		dc.b 9,	8, 0, $12, $F4
(1)   37/   11DBB : 02                  byte_11CAB:	dc.b 2
(1)   38/   11DBC : F10A 0009 F4        		dc.b $F1, $A, 0, 9, $F4
(1)   39/   11DC1 : 0908 0012 F4        		dc.b 9,	8, 0, $12, $F4
(1)   40/   11DC6 : 01                  byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
(1)   41/   11DC7 : E701 0023 FC        		dc.b $E7, 1, 0,	$23, $FC
(1)   42/   11DCC : 01                  byte_11CBC:	dc.b 1			; fuse
(1)   43/   11DCD : E701 0025 FC        		dc.b $E7, 1, 0,	$25, $FC
(1)   44/   11DD2 : 01                  byte_11CC2:	dc.b 1			; fireball (after it exploded)
(1)   45/   11DD3 : FC00 0027 FC        		dc.b $FC, 0, 0,	$27, $FC
(1)   46/   11DD8 : 01                  byte_11CC8:	dc.b 1			; fireball
(1)   47/   11DD9 : FC00 0028 FC        		dc.b $FC, 0, 0,	$28, $FC
(1)   48/   11DDE : (MACRO)             		align 2
(1)   48/   11DDE :  (MACRO-2)                  cnop 0,2
(1)   48/   11DDE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   22249/   11DDE :                     
   22250/   11DDE :                     ; ===========================================================================
   22251/   11DDE :                     ; ---------------------------------------------------------------------------
   22252/   11DDE :                     ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
   22253/   11DDE :                     ; ---------------------------------------------------------------------------
   22254/   11DDE :                     
   22255/   11DDE :                     Obj60:					; XREF: Obj_Index
   22256/   11DDE : 7000                		moveq	#0,d0
   22257/   11DE0 : 1028 0024           		move.b	$24(a0),d0
   22258/   11DE4 : 323B 0006           		move.w	Obj60_Index(pc,d0.w),d1
   22259/   11DE8 : 4EFB 1002           		jmp	Obj60_Index(pc,d1.w)
   22260/   11DEC :                     ; ===========================================================================
   22261/   11DEC : 000A                Obj60_Index:	dc.w Obj60_Main-Obj60_Index
   22262/   11DEE : 00E2                		dc.w Obj60_ChkSonic-Obj60_Index
   22263/   11DF0 : 0120                		dc.w Obj60_Display-Obj60_Index
   22264/   11DF2 : 017E                		dc.w Obj60_MoveOrb-Obj60_Index
   22265/   11DF4 : 01EA                		dc.w Obj60_ChkDel2-Obj60_Index
   22266/   11DF6 :                     ; ===========================================================================
   22267/   11DF6 :                     
   22268/   11DF6 :                     Obj60_Main:				; XREF: Obj60_Index
   22269/   11DF6 : 217C 0001 1FF4 0004 		move.l	#Map_obj60,4(a0)
   22270/   11DFE : 317C 0429 0002      		move.w	#$429,2(a0)	; SBZ specific code
   22271/   11E04 : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
   22272/   11E0A : 6706                		beq.s	loc_11D02
   22273/   11E0C : 317C 2429 0002      		move.w	#$2429,2(a0)	; SLZ specific code
   22274/   11E12 :                     
   22275/   11E12 :                     loc_11D02:
   22276/   11E12 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   22277/   11E18 : 6606                		bne.s	loc_11D10
   22278/   11E1A : 317C 0467 0002      		move.w	#$467,2(a0)	; LZ specific code
   22279/   11E20 :                     
   22280/   11E20 :                     loc_11D10:
   22281/   11E20 : 0028 0004 0001      		ori.b	#4,1(a0)
   22282/   11E26 : 117C 0004 0018      		move.b	#4,$18(a0)
   22283/   11E2C : 117C 000B 0020      		move.b	#$B,$20(a0)
   22284/   11E32 : 117C 000C 0019      		move.b	#$C,$19(a0)
   22285/   11E38 : 7400                		moveq	#0,d2
   22286/   11E3A : 45E8 0037           		lea	$37(a0),a2
   22287/   11E3E : 264A                		movea.l	a2,a3
   22288/   11E40 : 524A                		addq.w	#1,a2
   22289/   11E42 : 7203                		moveq	#3,d1
   22290/   11E44 :                     
   22291/   11E44 :                     Obj60_MakeOrbs:
   22292/   11E44 : 6100 BD66           		bsr.w	SingleObjLoad2
   22293/   11E48 : 6656                		bne.s	loc_11D90
   22294/   11E4A : 5213                		addq.b	#1,(a3)
   22295/   11E4C : 3A09                		move.w	a1,d5
   22296/   11E4E : 0445 D000           		subi.w	#-$3000,d5
   22297/   11E52 : EC4D                		lsr.w	#6,d5
   22298/   11E54 : 0245 007F           		andi.w	#$7F,d5
   22299/   11E58 : 14C5                		move.b	d5,(a2)+
   22300/   11E5A : (MACRO)             		_move.b	0(a0),0(a1)	; load spiked orb object
   22300/   11E5A :  (MACRO-2)                          insn2op move.b, 0(a0),0(a1)
   22300/   11E5A : 1368 0001 0001                              !move.b   1+0(a0),1+0(a1)
   22300/   11E5D :                                             !org    *-3
   22300/   11E5D : 00                                          !dc.b   0
   22300/   11E5F :                                             !org    *+1
   22300/   11E5F : 00                                          !dc.b   0
   22301/   11E60 : 137C 0006 0024      		move.b	#6,$24(a1)
   22302/   11E66 : 2368 0004 0004      		move.l	4(a0),4(a1)
   22303/   11E6C : 3368 0002 0002      		move.w	2(a0),2(a1)
   22304/   11E72 : 0029 0004 0001      		ori.b	#4,1(a1)
   22305/   11E78 : 137C 0004 0018      		move.b	#4,$18(a1)
   22306/   11E7E : 137C 0008 0019      		move.b	#8,$19(a1)
   22307/   11E84 : 137C 0003 001A      		move.b	#3,$1A(a1)
   22308/   11E8A : 137C 0098 0020      		move.b	#$98,$20(a1)
   22309/   11E90 : 1342 0026           		move.b	d2,$26(a1)
   22310/   11E94 : 0602 0040           		addi.b	#$40,d2
   22311/   11E98 : 2348 003C           		move.l	a0,$3C(a1)
   22312/   11E9C : 51C9 FFA6           		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
   22313/   11EA0 :                     
   22314/   11EA0 :                     loc_11D90:
   22315/   11EA0 : 7001                		moveq	#1,d0
   22316/   11EA2 : 0828 0000 0022      		btst	#0,$22(a0)
   22317/   11EA8 : 6702                		beq.s	Obj60_Move
   22318/   11EAA : 4440                		neg.w	d0
   22319/   11EAC :                     
   22320/   11EAC :                     Obj60_Move:
   22321/   11EAC : 1140 0036           		move.b	d0,$36(a0)
   22322/   11EB0 : 1168 0028 0024      		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
   22323/   11EB6 : 5428 0024           		addq.b	#2,$24(a0)
   22324/   11EBA : 317C FFC0 0010      		move.w	#-$40,$10(a0)	; move orbinaut	to the left
   22325/   11EC0 : 0828 0000 0022      		btst	#0,$22(a0)	; is orbinaut reversed?
   22326/   11EC6 : 6704                		beq.s	locret_11DBC	; if not, branch
   22327/   11EC8 : 4468 0010           		neg.w	$10(a0)		; move orbinaut	to the right
   22328/   11ECC :                     
   22329/   11ECC :                     locret_11DBC:
   22330/   11ECC : 4E75                		rts	
   22331/   11ECE :                     ; ===========================================================================
   22332/   11ECE :                     
   22333/   11ECE :                     Obj60_ChkSonic:				; XREF: Obj60_Index
   22334/   11ECE : 3038 D008           		move.w	($FFFFD008).w,d0
   22335/   11ED2 : 9068 0008           		sub.w	8(a0),d0
   22336/   11ED6 : 6402                		bcc.s	loc_11DCA
   22337/   11ED8 : 4440                		neg.w	d0
   22338/   11EDA :                     
   22339/   11EDA :                     loc_11DCA:
   22340/   11EDA : 0C40 00A0           		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
   22341/   11EDE : 641E                		bcc.s	Obj60_Animate	; if not, branch
   22342/   11EE0 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   22343/   11EE4 : 9068 000C           		sub.w	$C(a0),d0
   22344/   11EE8 : 6402                		bcc.s	loc_11DDC
   22345/   11EEA : 4440                		neg.w	d0
   22346/   11EEC :                     
   22347/   11EEC :                     loc_11DDC:
   22348/   11EEC : 0C40 0050           		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
   22349/   11EF0 : 640C                		bcc.s	Obj60_Animate	; if not, branch
   22350/   11EF2 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	on?
   22351/   11EF6 : 6606                		bne.s	Obj60_Animate	; if yes, branch
   22352/   11EF8 : 117C 0001 001C      		move.b	#1,$1C(a0)	; use "angry" animation
   22353/   11EFE :                     
   22354/   11EFE :                     Obj60_Animate:
   22355/   11EFE : 43F9 0001 1FE6      		lea	(Ani_obj60).l,a1
   22356/   11F04 : 6100 882E           		bsr.w	AnimateSprite
   22357/   11F08 : 6000 0006           		bra.w	Obj60_ChkDel
   22358/   11F0C :                     ; ===========================================================================
   22359/   11F0C :                     
   22360/   11F0C :                     Obj60_Display:				; XREF: Obj60_Index
   22361/   11F0C : 6100 B7DA           		bsr.w	SpeedToPos
   22362/   11F10 :                     
   22363/   11F10 :                     Obj60_ChkDel:				; XREF: Obj60_Animate
   22364/   11F10 : 3028 0008           		move.w	8(a0),d0
   22365/   11F14 : 0240 FF80           		andi.w	#$FF80,d0
   22366/   11F18 : 3238 F700           		move.w	($FFFFF700).w,d1
   22367/   11F1C : 0441 0080           		subi.w	#$80,d1
   22368/   11F20 : 0241 FF80           		andi.w	#$FF80,d1
   22369/   11F24 : 9041                		sub.w	d1,d0
   22370/   11F26 : 0C40 0280           		cmpi.w	#$280,d0
   22371/   11F2A : 6200 0006           		bhi.w	Obj60_ChkGone
   22372/   11F2E : 6000 B7DE           		bra.w	DisplaySprite
   22373/   11F32 :                     ; ===========================================================================
   22374/   11F32 :                     
   22375/   11F32 :                     Obj60_ChkGone:				; XREF: Obj60_ChkDel
   22376/   11F32 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   22377/   11F36 : 7000                		moveq	#0,d0
   22378/   11F38 : 1028 0023           		move.b	$23(a0),d0
   22379/   11F3C : 6706                		beq.s	loc_11E34
   22380/   11F3E : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   22381/   11F44 :                     
   22382/   11F44 :                     loc_11E34:
   22383/   11F44 : 45E8 0037           		lea	$37(a0),a2
   22384/   11F48 : 7400                		moveq	#0,d2
   22385/   11F4A : 141A                		move.b	(a2)+,d2
   22386/   11F4C : 5342                		subq.w	#1,d2
   22387/   11F4E : 6516                		bcs.s	Obj60_Delete
   22388/   11F50 :                     
   22389/   11F50 :                     loc_11E40:
   22390/   11F50 : 7000                		moveq	#0,d0
   22391/   11F52 : 101A                		move.b	(a2)+,d0
   22392/   11F54 : ED48                		lsl.w	#6,d0
   22393/   11F56 : 0680 00FF D000      		addi.l	#$FFD000,d0
   22394/   11F5C : 2240                		movea.l	d0,a1
   22395/   11F5E : 6100 B7EC           		bsr.w	DeleteObject2
   22396/   11F62 : 51CA FFEC           		dbf	d2,loc_11E40
   22397/   11F66 :                     
   22398/   11F66 :                     Obj60_Delete:
   22399/   11F66 : 6000 B7E2           		bra.w	DeleteObject
   22400/   11F6A :                     ; ===========================================================================
   22401/   11F6A :                     
   22402/   11F6A :                     Obj60_MoveOrb:				; XREF: Obj60_Index
   22403/   11F6A : 2268 003C           		movea.l	$3C(a0),a1
   22404/   11F6E : (MACRO)             		_cmpi.b	#$60,0(a1)
   22404/   11F6E :  (MACRO-2)                          insn2op cmpi.b, #$60,0(a1)
   22404/   11F6E : 0C29 0060 0001                              !cmpi.b   #$60,1+0(a1)
   22404/   11F73 :                                             !org    *-1
   22404/   11F73 : 00                                          !dc.b   0
   22405/   11F74 : 6600 B7D4           		bne.w	DeleteObject
   22406/   11F78 : 0C29 0002 001A      		cmpi.b	#2,$1A(a1)
   22407/   11F7E : 662C                		bne.s	Obj60_Circle
   22408/   11F80 : 0C28 0040 0026      		cmpi.b	#$40,$26(a0)
   22409/   11F86 : 6624                		bne.s	Obj60_Circle
   22410/   11F88 : 5428 0024           		addq.b	#2,$24(a0)
   22411/   11F8C : 5329 0037           		subq.b	#1,$37(a1)
   22412/   11F90 : 6604                		bne.s	Obj60_FireOrb
   22413/   11F92 : 5429 0024           		addq.b	#2,$24(a1)
   22414/   11F96 :                     
   22415/   11F96 :                     Obj60_FireOrb:
   22416/   11F96 : 317C FE00 0010      		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
   22417/   11F9C : 0829 0000 0022      		btst	#0,$22(a1)
   22418/   11FA2 : 6704                		beq.s	Obj60_Display2
   22419/   11FA4 : 4468 0010           		neg.w	$10(a0)
   22420/   11FA8 :                     
   22421/   11FA8 :                     Obj60_Display2:
   22422/   11FA8 : 6000 B764           		bra.w	DisplaySprite
   22423/   11FAC :                     ; ===========================================================================
   22424/   11FAC :                     
   22425/   11FAC :                     Obj60_Circle:				; XREF: Obj60_MoveOrb
   22426/   11FAC : 1028 0026           		move.b	$26(a0),d0
   22427/   11FB0 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   22428/   11FB6 : E841                		asr.w	#4,d1
   22429/   11FB8 : D269 0008           		add.w	8(a1),d1
   22430/   11FBC : 3141 0008           		move.w	d1,8(a0)
   22431/   11FC0 : E840                		asr.w	#4,d0
   22432/   11FC2 : D069 000C           		add.w	$C(a1),d0
   22433/   11FC6 : 3140 000C           		move.w	d0,$C(a0)
   22434/   11FCA : 1029 0036           		move.b	$36(a1),d0
   22435/   11FCE : D128 0026           		add.b	d0,$26(a0)
   22436/   11FD2 : 6000 B73A           		bra.w	DisplaySprite
   22437/   11FD6 :                     ; ===========================================================================
   22438/   11FD6 :                     
   22439/   11FD6 :                     Obj60_ChkDel2:				; XREF: Obj60_Index
   22440/   11FD6 : 6100 B710           		bsr.w	SpeedToPos
   22441/   11FDA : 4A28 0001           		tst.b	1(a0)
   22442/   11FDE : 6A00 B76A           		bpl.w	DeleteObject
   22443/   11FE2 : 6000 B72A           		bra.w	DisplaySprite
   22444/   11FE6 :                     ; ===========================================================================
   22445/   11FE6 :                     Ani_obj60:
   22446/   11FE6 :                     		include	"_anim/obj60.asm"
(1)    1/   11FE6 :                     ; ---------------------------------------------------------------------------
(1)    2/   11FE6 :                     ; Animation script - Orbinaut enemy
(1)    3/   11FE6 :                     ; ---------------------------------------------------------------------------
(1)    4/   11FE6 : 0004                		dc.w byte_11EDA-Ani_obj60
(1)    5/   11FE8 : 0008                		dc.w byte_11EDE-Ani_obj60
(1)    6/   11FEA : 0F00 FF00           byte_11EDA:	dc.b $F, 0, $FF, 0
(1)    7/   11FEE : 0F01 02FE 0100      byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
(1)    8/   11FF4 : (MACRO)             		align 2
(1)    8/   11FF4 :  (MACRO-2)                  cnop 0,2
(1)    8/   11FF4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   22447/   11FF4 :                     
   22448/   11FF4 :                     ; ---------------------------------------------------------------------------
   22449/   11FF4 :                     ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
   22450/   11FF4 :                     ; ---------------------------------------------------------------------------
   22451/   11FF4 :                     Map_obj60:
   22452/   11FF4 :                     		include	"_maps/obj60.asm"
(1)    1/   11FF4 :                     ; ---------------------------------------------------------------------------
(1)    2/   11FF4 :                     ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
(1)    3/   11FF4 :                     ; ---------------------------------------------------------------------------
(1)    4/   11FF4 : 0008 000E           		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
(1)    5/   11FF8 : 0014 001A           		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
(1)    6/   11FFC : 01                  byte_11EEC:	dc.b 1
(1)    7/   11FFD : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/   12002 : 01                  byte_11EF2:	dc.b 1
(1)    9/   12003 : F40A 2009 F4        		dc.b $F4, $A, $20, 9, $F4
(1)   10/   12008 : 01                  byte_11EF8:	dc.b 1
(1)   11/   12009 : F40A 0012 F4        		dc.b $F4, $A, 0, $12, $F4
(1)   12/   1200E : 01                  byte_11EFE:	dc.b 1
(1)   13/   1200F : F805 001B F8        		dc.b $F8, 5, 0,	$1B, $F8
(1)   14/   12014 : (MACRO)             		align 2
(1)   14/   12014 :  (MACRO-2)                  cnop 0,2
(1)   14/   12014 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   22453/   12014 :                     
   22454/   12014 :                     ; ===========================================================================
   22455/   12014 :                     ; ---------------------------------------------------------------------------
   22456/   12014 :                     ; Object 16 - harpoon (LZ)
   22457/   12014 :                     ; ---------------------------------------------------------------------------
   22458/   12014 :                     
   22459/   12014 :                     Obj16:					; XREF: Obj_Index
   22460/   12014 : 7000                		moveq	#0,d0
   22461/   12016 : 1028 0024           		move.b	$24(a0),d0
   22462/   1201A : 323B 0006           		move.w	Obj16_Index(pc,d0.w),d1
   22463/   1201E : 4EFB 1002           		jmp	Obj16_Index(pc,d1.w)
   22464/   12022 :                     ; ===========================================================================
   22465/   12022 : 0006                Obj16_Index:	dc.w Obj16_Main-Obj16_Index
   22466/   12024 : 0036                		dc.w Obj16_Move-Obj16_Index
   22467/   12026 : 0056                		dc.w Obj16_Wait-Obj16_Index
   22468/   12028 :                     ; ===========================================================================
   22469/   12028 :                     
   22470/   12028 :                     Obj16_Main:				; XREF: Obj16_Index
   22471/   12028 : 5428 0024           		addq.b	#2,$24(a0)
   22472/   1202C : 217C 0001 20AA 0004 		move.l	#Map_obj16,4(a0)
   22473/   12034 : 317C 03CC 0002      		move.w	#$3CC,2(a0)
   22474/   1203A : 0028 0004 0001      		ori.b	#4,1(a0)
   22475/   12040 : 117C 0004 0018      		move.b	#4,$18(a0)
   22476/   12046 : 1168 0028 001C      		move.b	$28(a0),$1C(a0)
   22477/   1204C : 117C 0014 0019      		move.b	#$14,$19(a0)
   22478/   12052 : 317C 003C 0030      		move.w	#60,$30(a0)
   22479/   12058 :                     
   22480/   12058 :                     Obj16_Move:				; XREF: Obj16_Index
   22481/   12058 : 43F9 0001 2092      		lea	(Ani_obj16).l,a1
   22482/   1205E : 6100 86D4           		bsr.w	AnimateSprite
   22483/   12062 : 7000                		moveq	#0,d0
   22484/   12064 : 1028 001A           		move.b	$1A(a0),d0	; move frame number to d0
   22485/   12068 : 117B 0008 0020      		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
   22486/   1206E : 6000 D74C           		bra.w	MarkObjGone
   22487/   12072 :                     ; ===========================================================================
   22488/   12072 : 9B9C 9D9E 9FA0      Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
   22489/   12078 :                     ; ===========================================================================
   22490/   12078 :                     
   22491/   12078 :                     Obj16_Wait:				; XREF: Obj16_Index
   22492/   12078 : 5368 0030           		subq.w	#1,$30(a0)
   22493/   1207C : 6A10                		bpl.s	Obj16_ChkDel
   22494/   1207E : 317C 003C 0030      		move.w	#60,$30(a0)
   22495/   12084 : 5528 0024           		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
   22496/   12088 : 0868 0000 001C      		bchg	#0,$1C(a0)	; reverse animation
   22497/   1208E :                     
   22498/   1208E :                     Obj16_ChkDel:
   22499/   1208E : 6000 D72C           		bra.w	MarkObjGone
   22500/   12092 :                     ; ===========================================================================
   22501/   12092 :                     Ani_obj16:
   22502/   12092 :                     		include	"_anim/obj16.asm"
(1)    1/   12092 :                     ; ---------------------------------------------------------------------------
(1)    2/   12092 :                     ; Animation script - harpoon (LZ)
(1)    3/   12092 :                     ; ---------------------------------------------------------------------------
(1)    4/   12092 : 0008                		dc.w byte_11F8A-Ani_obj16
(1)    5/   12094 : 000C                		dc.w byte_11F8E-Ani_obj16
(1)    6/   12096 : 0010                		dc.w byte_11F92-Ani_obj16
(1)    7/   12098 : 0014                		dc.w byte_11F96-Ani_obj16
(1)    8/   1209A : 0301 02FC           byte_11F8A:	dc.b 3,	1, 2, $FC
(1)    9/   1209E : 0301 00FC           byte_11F8E:	dc.b 3,	1, 0, $FC
(1)   10/   120A2 : 0304 05FC           byte_11F92:	dc.b 3,	4, 5, $FC
(1)   11/   120A6 : 0304 03FC           byte_11F96:	dc.b 3,	4, 3, $FC
(1)   12/   120AA : (MACRO)             		align 2
(1)   12/   120AA :  (MACRO-2)                  cnop 0,2
(1)   12/   120AA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   22503/   120AA :                     
   22504/   120AA :                     ; ---------------------------------------------------------------------------
   22505/   120AA :                     ; Sprite mappings - harpoon (LZ)
   22506/   120AA :                     ; ---------------------------------------------------------------------------
   22507/   120AA :                     Map_obj16:
   22508/   120AA :                     		include	"_maps/obj16.asm"
(1)    1/   120AA :                     ; ---------------------------------------------------------------------------
(1)    2/   120AA :                     ; Sprite mappings - harpoon (LZ)
(1)    3/   120AA :                     ; ---------------------------------------------------------------------------
(1)    4/   120AA : 000C 0012           		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
(1)    5/   120AE : 0018 0023           		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
(1)    6/   120B2 : 0029 002F           		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
(1)    7/   120B6 : 01                  byte_11FA6:	dc.b 1
(1)    8/   120B7 : FC04 0000 F8        		dc.b $FC, 4, 0,	0, $F8
(1)    9/   120BC : 01                  byte_11FAC:	dc.b 1
(1)   10/   120BD : FC0C 0002 F8        		dc.b $FC, $C, 0, 2, $F8
(1)   11/   120C2 : 02                  byte_11FB2:	dc.b 2
(1)   12/   120C3 : FC08 0006 F8        		dc.b $FC, 8, 0,	6, $F8
(1)   13/   120C8 : FC08 0003 10        		dc.b $FC, 8, 0,	3, $10
(1)   14/   120CD : 01                  byte_11FBD:	dc.b 1
(1)   15/   120CE : F801 0009 FC        		dc.b $F8, 1, 0,	9, $FC
(1)   16/   120D3 : 01                  byte_11FC3:	dc.b 1
(1)   17/   120D4 : E803 000B FC        		dc.b $E8, 3, 0,	$B, $FC
(1)   18/   120D9 : 02                  byte_11FC9:	dc.b 2
(1)   19/   120DA : D802 000B FC        		dc.b $D8, 2, 0,	$B, $FC
(1)   20/   120DF : F002 000F FC        		dc.b $F0, 2, 0,	$F, $FC
(1)   21/   120E4 : (MACRO)             		align 2
(1)   21/   120E4 :  (MACRO-2)                  cnop 0,2
(1)   21/   120E4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   22509/   120E4 :                     
   22510/   120E4 :                     ; ===========================================================================
   22511/   120E4 :                     ; ---------------------------------------------------------------------------
   22512/   120E4 :                     ; Object 61 - blocks (LZ)
   22513/   120E4 :                     ; ---------------------------------------------------------------------------
   22514/   120E4 :                     
   22515/   120E4 :                     Obj61:					; XREF: Obj_Index
   22516/   120E4 : 7000                		moveq	#0,d0
   22517/   120E6 : 1028 0024           		move.b	$24(a0),d0
   22518/   120EA : 323B 0006           		move.w	Obj61_Index(pc,d0.w),d1
   22519/   120EE : 4EFB 1002           		jmp	Obj61_Index(pc,d1.w)
   22520/   120F2 :                     ; ===========================================================================
   22521/   120F2 : 000C                Obj61_Index:	dc.w Obj61_Main-Obj61_Index
   22522/   120F4 : 006A                		dc.w Obj61_Action-Obj61_Index
   22523/   120F6 :                     
   22524/   120F6 : 1010                Obj61_Var:	dc.b $10, $10		; width, height
   22525/   120F8 : 200C                		dc.b $20, $C
   22526/   120FA : 1010                		dc.b $10, $10
   22527/   120FC : 1010                		dc.b $10, $10
   22528/   120FE :                     ; ===========================================================================
   22529/   120FE :                     
   22530/   120FE :                     Obj61_Main:				; XREF: Obj61_Index
   22531/   120FE : 5428 0024           		addq.b	#2,$24(a0)
   22532/   12102 : 217C 0001 22D2 0004 		move.l	#Map_obj61,4(a0)
   22533/   1210A : 317C 43E6 0002      		move.w	#$43E6,2(a0)
   22534/   12110 : 117C 0004 0001      		move.b	#4,1(a0)
   22535/   12116 : 117C 0003 0018      		move.b	#3,$18(a0)
   22536/   1211C : 7000                		moveq	#0,d0
   22537/   1211E : 1028 0028           		move.b	$28(a0),d0
   22538/   12122 : E648                		lsr.w	#3,d0
   22539/   12124 : 0240 000E           		andi.w	#$E,d0
   22540/   12128 : 45FB 00CC           		lea	Obj61_Var(pc,d0.w),a2
   22541/   1212C : 115A 0019           		move.b	(a2)+,$19(a0)
   22542/   12130 : 1152 0016           		move.b	(a2),$16(a0)
   22543/   12134 : E248                		lsr.w	#1,d0
   22544/   12136 : 1140 001A           		move.b	d0,$1A(a0)
   22545/   1213A : 3168 0008 0034      		move.w	8(a0),$34(a0)
   22546/   12140 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   22547/   12146 : 1028 0028           		move.b	$28(a0),d0
   22548/   1214A : 0200 000F           		andi.b	#$F,d0
   22549/   1214E : 670C                		beq.s	Obj61_Action
   22550/   12150 : 0C00 0007           		cmpi.b	#7,d0
   22551/   12154 : 6706                		beq.s	Obj61_Action
   22552/   12156 : 117C 0001 0038      		move.b	#1,$38(a0)
   22553/   1215C :                     
   22554/   1215C :                     Obj61_Action:				; XREF: Obj61_Index
   22555/   1215C : 3F28 0008           		move.w	8(a0),-(sp)
   22556/   12160 : 7000                		moveq	#0,d0
   22557/   12162 : 1028 0028           		move.b	$28(a0),d0
   22558/   12166 : 0240 000F           		andi.w	#$F,d0
   22559/   1216A : D040                		add.w	d0,d0
   22560/   1216C : 323B 0050           		move.w	Obj61_TypeIndex(pc,d0.w),d1
   22561/   12170 : 4EBB 104C           		jsr	Obj61_TypeIndex(pc,d1.w)
   22562/   12174 : 381F                		move.w	(sp)+,d4
   22563/   12176 : 4A28 0001           		tst.b	1(a0)
   22564/   1217A : 6A20                		bpl.s	Obj61_ChkDel
   22565/   1217C : 7200                		moveq	#0,d1
   22566/   1217E : 1228 0019           		move.b	$19(a0),d1
   22567/   12182 : 0641 000B           		addi.w	#$B,d1
   22568/   12186 : 7400                		moveq	#0,d2
   22569/   12188 : 1428 0016           		move.b	$16(a0),d2
   22570/   1218C : 3602                		move.w	d2,d3
   22571/   1218E : 5243                		addq.w	#1,d3
   22572/   12190 : 6100 D954           		bsr.w	SolidObject
   22573/   12194 : 1144 003F           		move.b	d4,$3F(a0)
   22574/   12198 : 6100 00F6           		bsr.w	loc_12180
   22575/   1219C :                     
   22576/   1219C :                     Obj61_ChkDel:
   22577/   1219C : 3028 0034           		move.w	$34(a0),d0
   22578/   121A0 : 0240 FF80           		andi.w	#$FF80,d0
   22579/   121A4 : 3238 F700           		move.w	($FFFFF700).w,d1
   22580/   121A8 : 0441 0080           		subi.w	#$80,d1
   22581/   121AC : 0241 FF80           		andi.w	#$FF80,d1
   22582/   121B0 : 9041                		sub.w	d1,d0
   22583/   121B2 : 0C40 0280           		cmpi.w	#$280,d0
   22584/   121B6 : 6200 B592           		bhi.w	DeleteObject
   22585/   121BA : 6000 B552           		bra.w	DisplaySprite
   22586/   121BE :                     ; ===========================================================================
   22587/   121BE : 0010 0012           Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
   22588/   121C2 : 0038 0012           		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
   22589/   121C6 : 005A 007A           		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
   22590/   121CA : 0038 008C           		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
   22591/   121CE :                     ; ===========================================================================
   22592/   121CE :                     
   22593/   121CE :                     Obj61_Type00:				; XREF: Obj61_TypeIndex
   22594/   121CE : 4E75                		rts	
   22595/   121D0 :                     ; ===========================================================================
   22596/   121D0 :                     
   22597/   121D0 :                     Obj61_Type01:				; XREF: Obj61_TypeIndex
   22598/   121D0 : 4A68 0036           		tst.w	$36(a0)		; is Sonic standing on the object?
   22599/   121D4 : 6610                		bne.s	loc_120D6	; if yes, branch
   22600/   121D6 : 0828 0003 0022      		btst	#3,$22(a0)
   22601/   121DC : 6706                		beq.s	locret_120D4
   22602/   121DE : 317C 001E 0036      		move.w	#30,$36(a0)	; wait for « second
   22603/   121E4 :                     
   22604/   121E4 :                     locret_120D4:
   22605/   121E4 : 4E75                		rts	
   22606/   121E6 :                     ; ===========================================================================
   22607/   121E6 :                     
   22608/   121E6 :                     loc_120D6:
   22609/   121E6 : 5368 0036           		subq.w	#1,$36(a0)	; subtract 1 from waiting time
   22610/   121EA : 66F8                		bne.s	locret_120D4	; if time remains, branch
   22611/   121EC : 5228 0028           		addq.b	#1,$28(a0)	; add 1	to type
   22612/   121F0 : 4228 0038           		clr.b	$38(a0)
   22613/   121F4 : 4E75                		rts	
   22614/   121F6 :                     ; ===========================================================================
   22615/   121F6 :                     
   22616/   121F6 :                     Obj61_Type02:				; XREF: Obj61_TypeIndex
   22617/   121F6 : 6100 B4F0           		bsr.w	SpeedToPos
   22618/   121FA : 5068 0012           		addq.w	#8,$12(a0)	; make object fall
   22619/   121FE : 6100 2E94           		bsr.w	ObjHitFloor
   22620/   12202 : 4A41                		tst.w	d1
   22621/   12204 : 6A00 0010           		bpl.w	locret_12106
   22622/   12208 : 5241                		addq.w	#1,d1
   22623/   1220A : D368 000C           		add.w	d1,$C(a0)
   22624/   1220E : 4268 0012           		clr.w	$12(a0)		; stop when it touches the floor
   22625/   12212 : 4228 0028           		clr.b	$28(a0)		; set type to 00 (non-moving type)
   22626/   12216 :                     
   22627/   12216 :                     locret_12106:
   22628/   12216 : 4E75                		rts	
   22629/   12218 :                     ; ===========================================================================
   22630/   12218 :                     
   22631/   12218 :                     Obj61_Type04:				; XREF: Obj61_TypeIndex
   22632/   12218 : 6100 B4CE           		bsr.w	SpeedToPos
   22633/   1221C : 5168 0012           		subq.w	#8,$12(a0)	; make object rise
   22634/   12220 : 6100 2FF8           		bsr.w	ObjHitCeiling
   22635/   12224 : 4A41                		tst.w	d1
   22636/   12226 : 6A00 000E           		bpl.w	locret_12126
   22637/   1222A : 9368 000C           		sub.w	d1,$C(a0)
   22638/   1222E : 4268 0012           		clr.w	$12(a0)		; stop when it touches the ceiling
   22639/   12232 : 4228 0028           		clr.b	$28(a0)		; set type to 00 (non-moving type)
   22640/   12236 :                     
   22641/   12236 :                     locret_12126:
   22642/   12236 : 4E75                		rts	
   22643/   12238 :                     ; ===========================================================================
   22644/   12238 :                     
   22645/   12238 :                     Obj61_Type05:				; XREF: Obj61_TypeIndex
   22646/   12238 : 0C28 0001 003F      		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
   22647/   1223E : 6608                		bne.s	locret_12138	; if not, branch
   22648/   12240 : 5228 0028           		addq.b	#1,$28(a0)	; if yes, add 1	to type
   22649/   12244 : 4228 0038           		clr.b	$38(a0)
   22650/   12248 :                     
   22651/   12248 :                     locret_12138:
   22652/   12248 : 4E75                		rts	
   22653/   1224A :                     ; ===========================================================================
   22654/   1224A :                     
   22655/   1224A :                     Obj61_Type07:				; XREF: Obj61_TypeIndex
   22656/   1224A : 3038 F646           		move.w	($FFFFF646).w,d0
   22657/   1224E : 9068 000C           		sub.w	$C(a0),d0
   22658/   12252 : 673A                		beq.s	locret_1217E
   22659/   12254 : 641C                		bcc.s	loc_12162
   22660/   12256 : 0C40 FFFE           		cmpi.w	#-2,d0
   22661/   1225A : 6C02                		bge.s	loc_1214E
   22662/   1225C : 70FE                		moveq	#-2,d0
   22663/   1225E :                     
   22664/   1225E :                     loc_1214E:
   22665/   1225E : D168 000C           		add.w	d0,$C(a0)	; make the block rise with water level
   22666/   12262 : 6100 2FB6           		bsr.w	ObjHitCeiling
   22667/   12266 : 4A41                		tst.w	d1
   22668/   12268 : 6A00 0006           		bpl.w	locret_12160
   22669/   1226C : 9368 000C           		sub.w	d1,$C(a0)
   22670/   12270 :                     
   22671/   12270 :                     locret_12160:
   22672/   12270 : 4E75                		rts	
   22673/   12272 :                     ; ===========================================================================
   22674/   12272 :                     
   22675/   12272 :                     loc_12162:				; XREF: Obj61_Type07
   22676/   12272 : 0C40 0002           		cmpi.w	#2,d0
   22677/   12276 : 6F02                		ble.s	loc_1216A
   22678/   12278 : 7002                		moveq	#2,d0
   22679/   1227A :                     
   22680/   1227A :                     loc_1216A:
   22681/   1227A : D168 000C           		add.w	d0,$C(a0)	; make the block sink with water level
   22682/   1227E : 6100 2E14           		bsr.w	ObjHitFloor
   22683/   12282 : 4A41                		tst.w	d1
   22684/   12284 : 6A00 0008           		bpl.w	locret_1217E
   22685/   12288 : 5241                		addq.w	#1,d1
   22686/   1228A : D368 000C           		add.w	d1,$C(a0)
   22687/   1228E :                     
   22688/   1228E :                     locret_1217E:
   22689/   1228E : 4E75                		rts	
   22690/   12290 :                     ; ===========================================================================
   22691/   12290 :                     
   22692/   12290 :                     loc_12180:				; XREF: Obj61_Action
   22693/   12290 : 4A28 0038           		tst.b	$38(a0)
   22694/   12294 : 673A                		beq.s	locret_121C0
   22695/   12296 : 0828 0003 0022      		btst	#3,$22(a0)
   22696/   1229C : 660C                		bne.s	loc_1219A
   22697/   1229E : 4A28 003E           		tst.b	$3E(a0)
   22698/   122A2 : 672C                		beq.s	locret_121C0
   22699/   122A4 : 5928 003E           		subq.b	#4,$3E(a0)
   22700/   122A8 : 600C                		bra.s	loc_121A6
   22701/   122AA :                     ; ===========================================================================
   22702/   122AA :                     
   22703/   122AA :                     loc_1219A:
   22704/   122AA : 0C28 0040 003E      		cmpi.b	#$40,$3E(a0)
   22705/   122B0 : 671E                		beq.s	locret_121C0
   22706/   122B2 : 5828 003E           		addq.b	#4,$3E(a0)
   22707/   122B6 :                     
   22708/   122B6 :                     loc_121A6:
   22709/   122B6 : 1028 003E           		move.b	$3E(a0),d0
   22710/   122BA : 4EB9 0000 29EA      		jsr	(CalcSine).l
   22711/   122C0 : 323C 0400           		move.w	#$400,d1
   22712/   122C4 : C1C1                		muls.w	d1,d0
   22713/   122C6 : 4840                		swap	d0
   22714/   122C8 : D068 0030           		add.w	$30(a0),d0
   22715/   122CC : 3140 000C           		move.w	d0,$C(a0)
   22716/   122D0 :                     
   22717/   122D0 :                     locret_121C0:
   22718/   122D0 : 4E75                		rts	
   22719/   122D2 :                     ; ===========================================================================
   22720/   122D2 :                     ; ---------------------------------------------------------------------------
   22721/   122D2 :                     ; Sprite mappings - blocks (LZ)
   22722/   122D2 :                     ; ---------------------------------------------------------------------------
   22723/   122D2 :                     Map_obj61:
   22724/   122D2 :                     		include	"_maps/obj61.asm"
(1)    1/   122D2 :                     ; ---------------------------------------------------------------------------
(1)    2/   122D2 :                     ; Sprite mappings - blocks (LZ)
(1)    3/   122D2 :                     ; ---------------------------------------------------------------------------
(1)    4/   122D2 : 0008 000E           		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
(1)    5/   122D6 : 0019 001F           		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
(1)    6/   122DA : 01                  byte_121CA:	dc.b 1
(1)    7/   122DB : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)    8/   122E0 : 02                  byte_121D0:	dc.b 2
(1)    9/   122E1 : F40E 0069 E0        		dc.b $F4, $E, 0, $69, $E0
(1)   10/   122E6 : F40E 0075 00        		dc.b $F4, $E, 0, $75, 0
(1)   11/   122EB : 01                  byte_121DB:	dc.b 1
(1)   12/   122EC : F00F 011A F0        		dc.b $F0, $F, 1, $1A, $F0
(1)   13/   122F1 : 01                  byte_121E1:	dc.b 1
(1)   14/   122F2 : F00F FDFA F0        		dc.b $F0, $F, $FD, $FA,	$F0
(1)   15/   122F7 : (MACRO)             		align 2
(1)   15/   122F7 :  (MACRO-2)                  cnop 0,2
(1)   15/   122F7 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   15/   122F7 : =$2D                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   15/   122F8 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   22725/   122F8 :                     
   22726/   122F8 :                     ; ===========================================================================
   22727/   122F8 :                     ; ---------------------------------------------------------------------------
   22728/   122F8 :                     ; Object 62 - gargoyle head (LZ)
   22729/   122F8 :                     ; ---------------------------------------------------------------------------
   22730/   122F8 :                     
   22731/   122F8 :                     Obj62:					; XREF: Obj_Index
   22732/   122F8 : 7000                		moveq	#0,d0
   22733/   122FA : 1028 0024           		move.b	$24(a0),d0
   22734/   122FE : 323B 000A           		move.w	Obj62_Index(pc,d0.w),d1
   22735/   12302 : 4EBB 1006           		jsr	Obj62_Index(pc,d1.w)
   22736/   12306 : 6000 D4B4           		bra.w	MarkObjGone
   22737/   1230A :                     ; ===========================================================================
   22738/   1230A : 0010                Obj62_Index:	dc.w Obj62_Main-Obj62_Index
   22739/   1230C : 004E                		dc.w Obj62_MakeFire-Obj62_Index
   22740/   1230E : 008A                		dc.w Obj62_FireBall-Obj62_Index
   22741/   12310 : 00E6                		dc.w Obj62_AniFire-Obj62_Index
   22742/   12312 :                     
   22743/   12312 : 1E3C 5A78 96B4 D2F0 Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
   22744/   1231A :                     ; ===========================================================================
   22745/   1231A :                     
   22746/   1231A :                     Obj62_Main:				; XREF: Obj62_Index
   22747/   1231A : 5428 0024           		addq.b	#2,$24(a0)
   22748/   1231E : 217C 0001 2428 0004 		move.l	#Map_obj62,4(a0)
   22749/   12326 : 317C 42E9 0002      		move.w	#$42E9,2(a0)
   22750/   1232C : 0028 0004 0001      		ori.b	#4,1(a0)
   22751/   12332 : 117C 0003 0018      		move.b	#3,$18(a0)
   22752/   12338 : 117C 0010 0019      		move.b	#$10,$19(a0)
   22753/   1233E : 1028 0028           		move.b	$28(a0),d0	; get object type
   22754/   12342 : 0240 000F           		andi.w	#$F,d0		; read only the	2nd digit
   22755/   12346 : 117B 00CA 001F      		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
   22756/   1234C : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)
   22757/   12352 : 0228 000F 0028      		andi.b	#$F,$28(a0)
   22758/   12358 :                     
   22759/   12358 :                     Obj62_MakeFire:				; XREF: Obj62_Index
   22760/   12358 : 5328 001E           		subq.b	#1,$1E(a0)
   22761/   1235C : 6634                		bne.s	Obj62_NoFire
   22762/   1235E : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)
   22763/   12364 : 6100 B622           		bsr.w	ChkObjOnScreen
   22764/   12368 : 6628                		bne.s	Obj62_NoFire
   22765/   1236A : 6100 B82A           		bsr.w	SingleObjLoad
   22766/   1236E : 6622                		bne.s	Obj62_NoFire
   22767/   12370 : (MACRO)             		_move.b	#$62,0(a1)	; load fireball	object
   22767/   12370 :  (MACRO-2)                          insn2op move.b, #$62,0(a1)
   22767/   12370 : 137C 0062 0001                              !move.b   #$62,1+0(a1)
   22767/   12375 :                                             !org    *-1
   22767/   12375 : 00                                          !dc.b   0
   22768/   12376 : 5829 0024           		addq.b	#4,$24(a1)
   22769/   1237A : 3368 0008 0008      		move.w	8(a0),8(a1)
   22770/   12380 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   22771/   12386 : 1368 0001 0001      		move.b	1(a0),1(a1)
   22772/   1238C : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   22773/   12392 :                     
   22774/   12392 :                     Obj62_NoFire:
   22775/   12392 : 4E75                		rts	
   22776/   12394 :                     ; ===========================================================================
   22777/   12394 :                     
   22778/   12394 :                     Obj62_FireBall:				; XREF: Obj62_Index
   22779/   12394 : 5428 0024           		addq.b	#2,$24(a0)
   22780/   12398 : 117C 0008 0016      		move.b	#8,$16(a0)
   22781/   1239E : 117C 0008 0017      		move.b	#8,$17(a0)
   22782/   123A4 : 217C 0001 2428 0004 		move.l	#Map_obj62,4(a0)
   22783/   123AC : 317C 02E9 0002      		move.w	#$2E9,2(a0)
   22784/   123B2 : 0028 0004 0001      		ori.b	#4,1(a0)
   22785/   123B8 : 117C 0004 0018      		move.b	#4,$18(a0)
   22786/   123BE : 117C 0098 0020      		move.b	#$98,$20(a0)
   22787/   123C4 : 117C 0008 0019      		move.b	#8,$19(a0)
   22788/   123CA : 117C 0002 001A      		move.b	#2,$1A(a0)
   22789/   123D0 : 5068 000C           		addq.w	#8,$C(a0)
   22790/   123D4 : 317C 0200 0010      		move.w	#$200,$10(a0)
   22791/   123DA : 0828 0000 0022      		btst	#0,$22(a0)
   22792/   123E0 : 6604                		bne.s	Obj62_Sound
   22793/   123E2 : 4468 0010           		neg.w	$10(a0)
   22794/   123E6 :                     
   22795/   123E6 :                     Obj62_Sound:
   22796/   123E6 : 303C 00AE           		move.w	#$AE,d0
   22797/   123EA : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play lava ball sound
   22798/   123F0 :                     
   22799/   123F0 :                     Obj62_AniFire:				; XREF: Obj62_Index
   22800/   123F0 : 1038 FE05           		move.b	($FFFFFE05).w,d0
   22801/   123F4 : 0200 0007           		andi.b	#7,d0
   22802/   123F8 : 6606                		bne.s	Obj62_StopFire
   22803/   123FA : 0868 0000 001A      		bchg	#0,$1A(a0)	; switch between frame 01 and 02
   22804/   12400 :                     
   22805/   12400 :                     Obj62_StopFire:
   22806/   12400 : 6100 B2E6           		bsr.w	SpeedToPos
   22807/   12404 : 0828 0000 0022      		btst	#0,$22(a0)
   22808/   1240A : 660E                		bne.s	Obj62_StopFire2
   22809/   1240C : 76F8                		moveq	#-8,d3
   22810/   1240E : 6100 2ED8           		bsr.w	ObjHitWallLeft
   22811/   12412 : 4A41                		tst.w	d1
   22812/   12414 : 6B00 B334           		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
   22813/   12418 : 4E75                		rts	
   22814/   1241A :                     ; ===========================================================================
   22815/   1241A :                     
   22816/   1241A :                     Obj62_StopFire2:
   22817/   1241A : 7608                		moveq	#8,d3
   22818/   1241C : 6100 2D38           		bsr.w	ObjHitWallRight
   22819/   12420 : 4A41                		tst.w	d1
   22820/   12422 : 6B00 B326           		bmi.w	DeleteObject
   22821/   12426 : 4E75                		rts	
   22822/   12428 :                     ; ===========================================================================
   22823/   12428 :                     ; ---------------------------------------------------------------------------
   22824/   12428 :                     ; Sprite mappings - gargoyle head (LZ)
   22825/   12428 :                     ; ---------------------------------------------------------------------------
   22826/   12428 :                     Map_obj62:
   22827/   12428 :                     		include	"_maps/obj62.asm"
(1)    1/   12428 :                     ; ---------------------------------------------------------------------------
(1)    2/   12428 :                     ; Sprite mappings - gargoyle head (LZ)
(1)    3/   12428 :                     ; ---------------------------------------------------------------------------
(1)    4/   12428 : 0008 0008           		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
(1)    5/   1242C : 0018 001E           		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
(1)    6/   12430 : 03                  byte_12320:	dc.b 3
(1)    7/   12431 : F004 0000 00        		dc.b $F0, 4, 0,	0, 0
(1)    8/   12436 : F80D 0002 F0        		dc.b $F8, $D, 0, 2, $F0
(1)    9/   1243B : 0808 000A F8        		dc.b 8,	8, 0, $A, $F8
(1)   10/   12440 : 01                  byte_12330:	dc.b 1
(1)   11/   12441 : FC04 000D F8        		dc.b $FC, 4, 0,	$D, $F8
(1)   12/   12446 : 01                  byte_12336:	dc.b 1
(1)   13/   12447 : FC04 000F F8        		dc.b $FC, 4, 0,	$F, $F8
(1)   14/   1244C : (MACRO)             		align 2
(1)   14/   1244C :  (MACRO-2)                  cnop 0,2
(1)   14/   1244C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   22828/   1244C :                     
   22829/   1244C :                     ; ===========================================================================
   22830/   1244C :                     ; ---------------------------------------------------------------------------
   22831/   1244C :                     ; Object 63 - platforms	on a conveyor belt (LZ)
   22832/   1244C :                     ; ---------------------------------------------------------------------------
   22833/   1244C :                     
   22834/   1244C :                     Obj63:					; XREF: Obj_Index
   22835/   1244C : 7000                		moveq	#0,d0
   22836/   1244E : 1028 0024           		move.b	$24(a0),d0
   22837/   12452 : 323B 004E           		move.w	Obj63_Index(pc,d0.w),d1
   22838/   12456 : 4EBB 104A           		jsr	Obj63_Index(pc,d1.w)
   22839/   1245A : 3028 0030           		move.w	$30(a0),d0
   22840/   1245E : 0240 FF80           		andi.w	#$FF80,d0
   22841/   12462 : 3238 F700           		move.w	($FFFFF700).w,d1
   22842/   12466 : 0441 0080           		subi.w	#$80,d1
   22843/   1246A : 0241 FF80           		andi.w	#$FF80,d1
   22844/   1246E : 9041                		sub.w	d1,d0
   22845/   12470 : 0C40 0280           		cmpi.w	#$280,d0
   22846/   12474 : 6204                		bhi.s	loc_1236A
   22847/   12476 :                     
   22848/   12476 :                     Obj63_Display:				; XREF: loc_1236A
   22849/   12476 : 6000 B296           		bra.w	DisplaySprite
   22850/   1247A :                     ; ===========================================================================
   22851/   1247A :                     
   22852/   1247A :                     loc_1236A:				; XREF: Obj63
   22853/   1247A : 0C38 0002 FE11      		cmpi.b	#2,($FFFFFE11).w
   22854/   12480 : 6606                		bne.s	loc_12378
   22855/   12482 : 0C40 FF80           		cmpi.w	#-$80,d0
   22856/   12486 : 64EE                		bcc.s	Obj63_Display
   22857/   12488 :                     
   22858/   12488 :                     loc_12378:
   22859/   12488 : 1028 002F           		move.b	$2F(a0),d0
   22860/   1248C : 6A00 B2BC           		bpl.w	DeleteObject
   22861/   12490 : 0240 007F           		andi.w	#$7F,d0
   22862/   12494 : 45F8 F7C1           		lea	($FFFFF7C1).w,a2
   22863/   12498 : 08B2 0000 0000      		bclr	#0,(a2,d0.w)
   22864/   1249E : 6000 B2AA           		bra.w	DeleteObject
   22865/   124A2 :                     ; ===========================================================================
   22866/   124A2 : 0008                Obj63_Index:	dc.w Obj63_Main-Obj63_Index
   22867/   124A4 : 0120                		dc.w loc_124B2-Obj63_Index
   22868/   124A6 : 0130                		dc.w loc_124C2-Obj63_Index
   22869/   124A8 : 014C                		dc.w loc_124DE-Obj63_Index
   22870/   124AA :                     ; ===========================================================================
   22871/   124AA :                     
   22872/   124AA :                     Obj63_Main:				; XREF: Obj63_Index
   22873/   124AA : 1028 0028           		move.b	$28(a0),d0
   22874/   124AE : 6B00 00C0           		bmi.w	loc_12460
   22875/   124B2 : 5428 0024           		addq.b	#2,$24(a0)
   22876/   124B6 : 217C 0001 278C 0004 		move.l	#Map_obj63,4(a0)
   22877/   124BE : 317C 43F6 0002      		move.w	#$43F6,2(a0)
   22878/   124C4 : 0028 0004 0001      		ori.b	#4,1(a0)
   22879/   124CA : 117C 0010 0019      		move.b	#$10,$19(a0)
   22880/   124D0 : 117C 0004 0018      		move.b	#4,$18(a0)
   22881/   124D6 : 0C28 007F 0028      		cmpi.b	#$7F,$28(a0)
   22882/   124DC : 6614                		bne.s	loc_123E2
   22883/   124DE : 5828 0024           		addq.b	#4,$24(a0)
   22884/   124E2 : 317C 03F6 0002      		move.w	#$3F6,2(a0)
   22885/   124E8 : 117C 0001 0018      		move.b	#1,$18(a0)
   22886/   124EE : 6000 00FE           		bra.w	loc_124DE
   22887/   124F2 :                     ; ===========================================================================
   22888/   124F2 :                     
   22889/   124F2 :                     loc_123E2:
   22890/   124F2 : 117C 0004 001A      		move.b	#4,$1A(a0)
   22891/   124F8 : 7000                		moveq	#0,d0
   22892/   124FA : 1028 0028           		move.b	$28(a0),d0
   22893/   124FE : 3200                		move.w	d0,d1
   22894/   12500 : E648                		lsr.w	#3,d0
   22895/   12502 : 0240 001E           		andi.w	#$1E,d0
   22896/   12506 : 45FA 01F0           		lea	Obj63_Data(pc),a2
   22897/   1250A : D4F2 0000           		adda.w	(a2,d0.w),a2
   22898/   1250E : 315A 0038           		move.w	(a2)+,$38(a0)
   22899/   12512 : 315A 0030           		move.w	(a2)+,$30(a0)
   22900/   12516 : 214A 003C           		move.l	a2,$3C(a0)
   22901/   1251A : 0241 000F           		andi.w	#$F,d1
   22902/   1251E : E549                		lsl.w	#2,d1
   22903/   12520 : 1141 0038           		move.b	d1,$38(a0)
   22904/   12524 : 117C 0004 003A      		move.b	#4,$3A(a0)
   22905/   1252A : 4A38 F7C0           		tst.b	($FFFFF7C0).w
   22906/   1252E : 672C                		beq.s	loc_1244C
   22907/   12530 : 117C 0001 003B      		move.b	#1,$3B(a0)
   22908/   12536 : 4428 003A           		neg.b	$3A(a0)
   22909/   1253A : 7200                		moveq	#0,d1
   22910/   1253C : 1228 0038           		move.b	$38(a0),d1
   22911/   12540 : D228 003A           		add.b	$3A(a0),d1
   22912/   12544 : B228 0039           		cmp.b	$39(a0),d1
   22913/   12548 : 650E                		bcs.s	loc_12448
   22914/   1254A : 1001                		move.b	d1,d0
   22915/   1254C : 7200                		moveq	#0,d1
   22916/   1254E : 4A00                		tst.b	d0
   22917/   12550 : 6A06                		bpl.s	loc_12448
   22918/   12552 : 1228 0039           		move.b	$39(a0),d1
   22919/   12556 : 5901                		subq.b	#4,d1
   22920/   12558 :                     
   22921/   12558 :                     loc_12448:
   22922/   12558 : 1141 0038           		move.b	d1,$38(a0)
   22923/   1255C :                     
   22924/   1255C :                     loc_1244C:
   22925/   1255C : 3172 1000 0034      		move.w	(a2,d1.w),$34(a0)
   22926/   12562 : 3172 1002 0036      		move.w	2(a2,d1.w),$36(a0)
   22927/   12568 : 6100 0116           		bsr.w	Obj63_ChangeDir
   22928/   1256C : 6000 0054           		bra.w	loc_124B2
   22929/   12570 :                     ; ===========================================================================
   22930/   12570 :                     
   22931/   12570 :                     loc_12460:				; XREF: Obj63_Main
   22932/   12570 : 1140 002F           		move.b	d0,$2F(a0)
   22933/   12574 : 0240 007F           		andi.w	#$7F,d0
   22934/   12578 : 45F8 F7C1           		lea	($FFFFF7C1).w,a2
   22935/   1257C : 08F2 0000 0000      		bset	#0,(a2,d0.w)
   22936/   12582 : 6600 B1C6           		bne.w	DeleteObject
   22937/   12586 : D040                		add.w	d0,d0
   22938/   12588 : 0240 001E           		andi.w	#$1E,d0
   22939/   1258C : 0640 0070           		addi.w	#$70,d0
   22940/   12590 : 45F9 0006 BE70      		lea	(ObjPos_Index).l,a2
   22941/   12596 : D4F2 0000           		adda.w	(a2,d0.w),a2
   22942/   1259A : 321A                		move.w	(a2)+,d1
   22943/   1259C : 2248                		movea.l	a0,a1
   22944/   1259E : 6006                		bra.s	Obj63_MakePtfms
   22945/   125A0 :                     ; ===========================================================================
   22946/   125A0 :                     
   22947/   125A0 :                     Obj63_Loop:
   22948/   125A0 : 6100 B5F4           		bsr.w	SingleObjLoad
   22949/   125A4 : 6614                		bne.s	loc_124AA
   22950/   125A6 :                     
   22951/   125A6 :                     Obj63_MakePtfms:			; XREF: loc_12460
   22952/   125A6 : (MACRO)             		_move.b	#$63,0(a1)
   22952/   125A6 :  (MACRO-2)                          insn2op move.b, #$63,0(a1)
   22952/   125A6 : 137C 0063 0001                              !move.b   #$63,1+0(a1)
   22952/   125AB :                                             !org    *-1
   22952/   125AB : 00                                          !dc.b   0
   22953/   125AC : 335A 0008           		move.w	(a2)+,8(a1)
   22954/   125B0 : 335A 000C           		move.w	(a2)+,$C(a1)
   22955/   125B4 : 301A                		move.w	(a2)+,d0
   22956/   125B6 : 1340 0028           		move.b	d0,$28(a1)
   22957/   125BA :                     
   22958/   125BA :                     loc_124AA:
   22959/   125BA : 51C9 FFE4           		dbf	d1,Obj63_Loop
   22960/   125BE :                     
   22961/   125BE : 588F                		addq.l	#4,sp
   22962/   125C0 : 4E75                		rts	
   22963/   125C2 :                     ; ===========================================================================
   22964/   125C2 :                     
   22965/   125C2 :                     loc_124B2:				; XREF: Obj63_Index
   22966/   125C2 : 7200                		moveq	#0,d1
   22967/   125C4 : 1228 0019           		move.b	$19(a0),d1
   22968/   125C8 : 4EB9 0000 7458      		jsr	(PlatformObject).l
   22969/   125CE : 6000 0042           		bra.w	sub_12502
   22970/   125D2 :                     ; ===========================================================================
   22971/   125D2 :                     
   22972/   125D2 :                     loc_124C2:				; XREF: Obj63_Index
   22973/   125D2 : 7200                		moveq	#0,d1
   22974/   125D4 : 1228 0019           		move.b	$19(a0),d1
   22975/   125D8 : 4EB9 0000 75CC      		jsr	(ExitPlatform).l
   22976/   125DE : 3F28 0008           		move.w	8(a0),-(sp)
   22977/   125E2 : 6100 002E           		bsr.w	sub_12502
   22978/   125E6 : 341F                		move.w	(sp)+,d2
   22979/   125E8 : 4EF9 0000 7B3A      		jmp	(MvSonicOnPtfm2).l
   22980/   125EE :                     ; ===========================================================================
   22981/   125EE :                     
   22982/   125EE :                     loc_124DE:				; XREF: Obj63_Index
   22983/   125EE : 3038 FE04           		move.w	($FFFFFE04).w,d0
   22984/   125F2 : 0240 0003           		andi.w	#3,d0
   22985/   125F6 : 6614                		bne.s	loc_124FC
   22986/   125F8 : 7201                		moveq	#1,d1
   22987/   125FA : 4A38 F7C0           		tst.b	($FFFFF7C0).w
   22988/   125FE : 6702                		beq.s	loc_124F2
   22989/   12600 : 4401                		neg.b	d1
   22990/   12602 :                     
   22991/   12602 :                     loc_124F2:
   22992/   12602 : D328 001A           		add.b	d1,$1A(a0)
   22993/   12606 : 0228 0003 001A      		andi.b	#3,$1A(a0)
   22994/   1260C :                     
   22995/   1260C :                     loc_124FC:
   22996/   1260C : 588F                		addq.l	#4,sp
   22997/   1260E : 6000 D1AC           		bra.w	MarkObjGone
   22998/   12612 :                     
   22999/   12612 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23000/   12612 :                     
   23001/   12612 :                     
   23002/   12612 :                     sub_12502:				; XREF: loc_124B2; loc_124C2
   23003/   12612 : 4A38 F7EE           		tst.b	($FFFFF7EE).w
   23004/   12616 : 6718                		beq.s	loc_12520
   23005/   12618 : 4A28 003B           		tst.b	$3B(a0)
   23006/   1261C : 6612                		bne.s	loc_12520
   23007/   1261E : 117C 0001 003B      		move.b	#1,$3B(a0)
   23008/   12624 : 11FC 0001 F7C0      		move.b	#1,($FFFFF7C0).w
   23009/   1262A : 4428 003A           		neg.b	$3A(a0)
   23010/   1262E : 6014                		bra.s	loc_12534
   23011/   12630 :                     ; ===========================================================================
   23012/   12630 :                     
   23013/   12630 :                     loc_12520:
   23014/   12630 : 3028 0008           		move.w	8(a0),d0
   23015/   12634 : B068 0034           		cmp.w	$34(a0),d0
   23016/   12638 : 6640                		bne.s	loc_1256A
   23017/   1263A : 3028 000C           		move.w	$C(a0),d0
   23018/   1263E : B068 0036           		cmp.w	$36(a0),d0
   23019/   12642 : 6636                		bne.s	loc_1256A
   23020/   12644 :                     
   23021/   12644 :                     loc_12534:
   23022/   12644 : 7200                		moveq	#0,d1
   23023/   12646 : 1228 0038           		move.b	$38(a0),d1
   23024/   1264A : D228 003A           		add.b	$3A(a0),d1
   23025/   1264E : B228 0039           		cmp.b	$39(a0),d1
   23026/   12652 : 650E                		bcs.s	loc_12552
   23027/   12654 : 1001                		move.b	d1,d0
   23028/   12656 : 7200                		moveq	#0,d1
   23029/   12658 : 4A00                		tst.b	d0
   23030/   1265A : 6A06                		bpl.s	loc_12552
   23031/   1265C : 1228 0039           		move.b	$39(a0),d1
   23032/   12660 : 5901                		subq.b	#4,d1
   23033/   12662 :                     
   23034/   12662 :                     loc_12552:
   23035/   12662 : 1141 0038           		move.b	d1,$38(a0)
   23036/   12666 : 2268 003C           		movea.l	$3C(a0),a1
   23037/   1266A : 3171 1000 0034      		move.w	(a1,d1.w),$34(a0)
   23038/   12670 : 3171 1002 0036      		move.w	2(a1,d1.w),$36(a0)
   23039/   12676 : 6100 0008           		bsr.w	Obj63_ChangeDir
   23040/   1267A :                     
   23041/   1267A :                     loc_1256A:
   23042/   1267A : 6100 B06C           		bsr.w	SpeedToPos
   23043/   1267E : 4E75                		rts	
   23044/   12680 :                     ; End of function sub_12502
   23045/   12680 :                     
   23046/   12680 :                     
   23047/   12680 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23048/   12680 :                     
   23049/   12680 :                     
   23050/   12680 :                     Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
   23051/   12680 : 7000                		moveq	#0,d0
   23052/   12682 : 343C FF00           		move.w	#-$100,d2
   23053/   12686 : 3028 0008           		move.w	8(a0),d0
   23054/   1268A : 9068 0034           		sub.w	$34(a0),d0
   23055/   1268E : 6404                		bcc.s	loc_12584
   23056/   12690 : 4440                		neg.w	d0
   23057/   12692 : 4442                		neg.w	d2
   23058/   12694 :                     
   23059/   12694 :                     loc_12584:
   23060/   12694 : 7200                		moveq	#0,d1
   23061/   12696 : 363C FF00           		move.w	#-$100,d3
   23062/   1269A : 3228 000C           		move.w	$C(a0),d1
   23063/   1269E : 9268 0036           		sub.w	$36(a0),d1
   23064/   126A2 : 6404                		bcc.s	loc_12598
   23065/   126A4 : 4441                		neg.w	d1
   23066/   126A6 : 4443                		neg.w	d3
   23067/   126A8 :                     
   23068/   126A8 :                     loc_12598:
   23069/   126A8 : B240                		cmp.w	d0,d1
   23070/   126AA : 6526                		bcs.s	loc_125C2
   23071/   126AC : 3028 0008           		move.w	8(a0),d0
   23072/   126B0 : 9068 0034           		sub.w	$34(a0),d0
   23073/   126B4 : 6708                		beq.s	loc_125AE
   23074/   126B6 : 48C0                		ext.l	d0
   23075/   126B8 : E180                		asl.l	#8,d0
   23076/   126BA : 81C1                		divs.w	d1,d0
   23077/   126BC : 4440                		neg.w	d0
   23078/   126BE :                     
   23079/   126BE :                     loc_125AE:
   23080/   126BE : 3140 0010           		move.w	d0,$10(a0)
   23081/   126C2 : 3143 0012           		move.w	d3,$12(a0)
   23082/   126C6 : 4840                		swap	d0
   23083/   126C8 : 3140 000A           		move.w	d0,$A(a0)
   23084/   126CC : 4268 000E           		clr.w	$E(a0)
   23085/   126D0 : 4E75                		rts	
   23086/   126D2 :                     ; ===========================================================================
   23087/   126D2 :                     
   23088/   126D2 :                     loc_125C2:				; XREF: Obj63_ChangeDir
   23089/   126D2 : 3228 000C           		move.w	$C(a0),d1
   23090/   126D6 : 9268 0036           		sub.w	$36(a0),d1
   23091/   126DA : 6708                		beq.s	loc_125D4
   23092/   126DC : 48C1                		ext.l	d1
   23093/   126DE : E181                		asl.l	#8,d1
   23094/   126E0 : 83C0                		divs.w	d0,d1
   23095/   126E2 : 4441                		neg.w	d1
   23096/   126E4 :                     
   23097/   126E4 :                     loc_125D4:
   23098/   126E4 : 3141 0012           		move.w	d1,$12(a0)
   23099/   126E8 : 3142 0010           		move.w	d2,$10(a0)
   23100/   126EC : 4841                		swap	d1
   23101/   126EE : 3141 000E           		move.w	d1,$E(a0)
   23102/   126F2 : 4268 000A           		clr.w	$A(a0)
   23103/   126F6 : 4E75                		rts	
   23104/   126F8 :                     ; End of function Obj63_ChangeDir
   23105/   126F8 :                     
   23106/   126F8 :                     ; ===========================================================================
   23107/   126F8 : 000C                Obj63_Data:	dc.w word_125F4-Obj63_Data
   23108/   126FA : 0028                		dc.w word_12610-Obj63_Data
   23109/   126FC : 0040                		dc.w word_12628-Obj63_Data
   23110/   126FE : 0054                		dc.w word_1263C-Obj63_Data
   23111/   12700 : 0068                		dc.w word_12650-Obj63_Data
   23112/   12702 : 0080                		dc.w word_12668-Obj63_Data
   23113/   12704 : 0018 1070 1078 021A word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
                    10BE 0260 10BE 0393 
   23114/   12714 : 108C 03C5 1022 0390 		dc.w $108C, $3C5, $1022, $390, $1022, $244
                    1022 0244           
   23115/   12720 : 0014 1280 127E 0280 word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
                    12CE 02D0 12CE 046E 
   23116/   12730 : 1232 0420 1232 02CC 		dc.w $1232, $420, $1232, $2CC
   23117/   12738 : 0010 0D68 0D22 0482 word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
                    0D22 05DE 0DAE 05DE 
                    0DAE 0482           
   23118/   1274C : 0010 0DA0 0D62 03A2 word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
                    0DEE 03A2 0DEE 04DE 
                    0D62 04DE           
   23119/   12760 : 0014 0D00 0CAC 0242 word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
                    0DDE 0242 0DDE 03DE 
                    0C52 03DE 0C52 029C 
   23120/   12778 : 0010 1300 1252 020A word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
                    13DE 020A 13DE 02BE 
                    1252 02BE           
   23121/   1278C :                     
   23122/   1278C :                     ; ---------------------------------------------------------------------------
   23123/   1278C :                     ; Sprite mappings - platforms on a conveyor belt (LZ)
   23124/   1278C :                     ; ---------------------------------------------------------------------------
   23125/   1278C :                     Map_obj63:
   23126/   1278C :                     		include	"_maps/obj63.asm"
(1)    1/   1278C :                     ; ---------------------------------------------------------------------------
(1)    2/   1278C :                     ; Sprite mappings - platforms on a conveyor belt (LZ)
(1)    3/   1278C :                     ; ---------------------------------------------------------------------------
(1)    4/   1278C : 000A 0010           		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
(1)    5/   12790 : 0016 001C           		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
(1)    6/   12794 : 0022                		dc.w byte_1269E-Map_obj63
(1)    7/   12796 : 01                  byte_12686:	dc.b 1
(1)    8/   12797 : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)    9/   1279C : 01                  byte_1268C:	dc.b 1
(1)   10/   1279D : F00F 0010 F0        		dc.b $F0, $F, 0, $10, $F0
(1)   11/   127A2 : 01                  byte_12692:	dc.b 1
(1)   12/   127A3 : F00F 0020 F0        		dc.b $F0, $F, 0, $20, $F0
(1)   13/   127A8 : 01                  byte_12698:	dc.b 1
(1)   14/   127A9 : F00F 0030 F0        		dc.b $F0, $F, 0, $30, $F0
(1)   15/   127AE : 01                  byte_1269E:	dc.b 1
(1)   16/   127AF : F80D 0040 F0        		dc.b $F8, $D, 0, $40, $F0
(1)   17/   127B4 : (MACRO)             		align 2
(1)   17/   127B4 :  (MACRO-2)                  cnop 0,2
(1)   17/   127B4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   23127/   127B4 :                     
   23128/   127B4 :                     ; ===========================================================================
   23129/   127B4 :                     ; ---------------------------------------------------------------------------
   23130/   127B4 :                     ; Object 64 - bubbles (LZ)
   23131/   127B4 :                     ; ---------------------------------------------------------------------------
   23132/   127B4 :                     
   23133/   127B4 :                     Obj64:					; XREF: Obj_Index
   23134/   127B4 : 7000                		moveq	#0,d0
   23135/   127B6 : 1028 0024           		move.b	$24(a0),d0
   23136/   127BA : 323B 0006           		move.w	Obj64_Index(pc,d0.w),d1
   23137/   127BE : 4EFB 1002           		jmp	Obj64_Index(pc,d1.w)
   23138/   127C2 :                     ; ===========================================================================
   23139/   127C2 : 000C                Obj64_Index:	dc.w Obj64_Main-Obj64_Index
   23140/   127C4 : 006A                		dc.w Obj64_Animate-Obj64_Index
   23141/   127C6 : 0084                		dc.w Obj64_ChkWater-Obj64_Index
   23142/   127C8 : 013E                		dc.w Obj64_Display2-Obj64_Index
   23143/   127CA : 015C                		dc.w Obj64_Delete3-Obj64_Index
   23144/   127CC : 0160                		dc.w Obj64_BblMaker-Obj64_Index
   23145/   127CE :                     ; ===========================================================================
   23146/   127CE :                     
   23147/   127CE :                     Obj64_Main:				; XREF: Obj64_Index
   23148/   127CE : 5428 0024           		addq.b	#2,$24(a0)
   23149/   127D2 : 217C 0001 2ADC 0004 		move.l	#Map_obj64,4(a0)
   23150/   127DA : 317C 8348 0002      		move.w	#$8348,2(a0)
   23151/   127E0 : 117C 0084 0001      		move.b	#$84,1(a0)
   23152/   127E6 : 117C 0010 0019      		move.b	#$10,$19(a0)
   23153/   127EC : 117C 0001 0018      		move.b	#1,$18(a0)
   23154/   127F2 : 1028 0028           		move.b	$28(a0),d0	; get object type
   23155/   127F6 : 6A1A                		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
   23156/   127F8 : 5028 0024           		addq.b	#8,$24(a0)
   23157/   127FC : 0240 007F           		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
   23158/   12800 : 1140 0032           		move.b	d0,$32(a0)
   23159/   12804 : 1140 0033           		move.b	d0,$33(a0)
   23160/   12808 : 117C 0006 001C      		move.b	#6,$1C(a0)
   23161/   1280E : 6000 0112           		bra.w	Obj64_BblMaker
   23162/   12812 :                     ; ===========================================================================
   23163/   12812 :                     
   23164/   12812 :                     Obj64_Bubble:				; XREF: Obj64_Main
   23165/   12812 : 1140 001C           		move.b	d0,$1C(a0)
   23166/   12816 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   23167/   1281C : 317C FF78 0012      		move.w	#-$88,$12(a0)	; float	bubble upwards
   23168/   12822 : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   23169/   12828 : 1140 0026           		move.b	d0,$26(a0)
   23170/   1282C :                     
   23171/   1282C :                     Obj64_Animate:				; XREF: Obj64_Index
   23172/   1282C : 43F9 0001 2AAC      		lea	(Ani_obj64).l,a1
   23173/   12832 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   23174/   12838 : 0C28 0006 001A      		cmpi.b	#6,$1A(a0)
   23175/   1283E : 6606                		bne.s	Obj64_ChkWater
   23176/   12840 : 117C 0001 002E      		move.b	#1,$2E(a0)
   23177/   12846 :                     
   23178/   12846 :                     Obj64_ChkWater:				; XREF: Obj64_Index
   23179/   12846 : 3038 F646           		move.w	($FFFFF646).w,d0
   23180/   1284A : B068 000C           		cmp.w	$C(a0),d0	; is bubble underwater?
   23181/   1284E : 650E                		bcs.s	Obj64_Wobble	; if yes, branch
   23182/   12850 :                     
   23183/   12850 :                     Obj64_Burst:				; XREF: Obj64_Wobble
   23184/   12850 : 117C 0006 0024      		move.b	#6,$24(a0)
   23185/   12856 : 5628 001C           		addq.b	#3,$1C(a0)	; run "bursting" animation
   23186/   1285A : 6000 00A4           		bra.w	Obj64_Display2
   23187/   1285E :                     ; ===========================================================================
   23188/   1285E :                     
   23189/   1285E :                     Obj64_Wobble:				; XREF: Obj64_ChkWater
   23190/   1285E : 1028 0026           		move.b	$26(a0),d0
   23191/   12862 : 5228 0026           		addq.b	#1,$26(a0)
   23192/   12866 : 0240 007F           		andi.w	#$7F,d0
   23193/   1286A : 43F9 0001 4098      		lea	(Obj0A_WobbleData).l,a1
   23194/   12870 : 1031 0000           		move.b	(a1,d0.w),d0
   23195/   12874 : 4880                		ext.w	d0
   23196/   12876 : D068 0030           		add.w	$30(a0),d0
   23197/   1287A : 3140 0008           		move.w	d0,8(a0)	; change bubble"s horizontal position
   23198/   1287E : 4A28 002E           		tst.b	$2E(a0)
   23199/   12882 : 6766                		beq.s	Obj64_Display
   23200/   12884 : 6100 01E8           		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
   23201/   12888 : 6760                		beq.s	Obj64_Display	; if not, branch
   23202/   1288A :                     
   23203/   1288A : 6100 1A7E           		bsr.w	ResumeMusic	; cancel countdown music
   23204/   1288E : 303C 00AD           		move.w	#$AD,d0
   23205/   12892 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
   23206/   12898 : 43F8 D000           		lea	($FFFFD000).w,a1
   23207/   1289C : 4269 0010           		clr.w	$10(a1)
   23208/   128A0 : 4269 0012           		clr.w	$12(a1)
   23209/   128A4 : 4269 0014           		clr.w	$14(a1)
   23210/   128A8 : 137C 0015 001C      		move.b	#$15,$1C(a1)
   23211/   128AE : 337C 0023 003E      		move.w	#$23,$3E(a1)
   23212/   128B4 : 137C 0000 003C      		move.b	#0,$3C(a1)
   23213/   128BA : 08A9 0005 0022      		bclr	#5,$22(a1)
   23214/   128C0 : 08A9 0004 0022      		bclr	#4,$22(a1)
   23215/   128C6 : 0829 0002 0022      		btst	#2,$22(a1)
   23216/   128CC : 6700 FF82           		beq.w	Obj64_Burst
   23217/   128D0 : 08A9 0002 0022      		bclr	#2,$22(a1)
   23218/   128D6 : 137C 0013 0016      		move.b	#$13,$16(a1)
   23219/   128DC : 137C 0009 0017      		move.b	#9,$17(a1)
   23220/   128E2 : 5B69 000C           		subq.w	#5,$C(a1)
   23221/   128E6 : 6000 FF68           		bra.w	Obj64_Burst
   23222/   128EA :                     ; ===========================================================================
   23223/   128EA :                     
   23224/   128EA :                     Obj64_Display:				; XREF: Obj64_Wobble
   23225/   128EA : 6100 ADFC           		bsr.w	SpeedToPos
   23226/   128EE : 4A28 0001           		tst.b	1(a0)
   23227/   128F2 : 6A06                		bpl.s	Obj64_Delete
   23228/   128F4 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   23229/   128FA :                     ; ===========================================================================
   23230/   128FA :                     
   23231/   128FA :                     Obj64_Delete:
   23232/   128FA : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   23233/   12900 :                     ; ===========================================================================
   23234/   12900 :                     
   23235/   12900 :                     Obj64_Display2:				; XREF: Obj64_Index
   23236/   12900 : 43F9 0001 2AAC      		lea	(Ani_obj64).l,a1
   23237/   12906 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   23238/   1290C : 4A28 0001           		tst.b	1(a0)
   23239/   12910 : 6A06                		bpl.s	Obj64_Delete2
   23240/   12912 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   23241/   12918 :                     ; ===========================================================================
   23242/   12918 :                     
   23243/   12918 :                     Obj64_Delete2:
   23244/   12918 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   23245/   1291E :                     ; ===========================================================================
   23246/   1291E :                     
   23247/   1291E :                     Obj64_Delete3:				; XREF: Obj64_Index
   23248/   1291E : 6000 AE2A           		bra.w	DeleteObject
   23249/   12922 :                     ; ===========================================================================
   23250/   12922 :                     
   23251/   12922 :                     Obj64_BblMaker:				; XREF: Obj64_Index
   23252/   12922 : 4A68 0036           		tst.w	$36(a0)
   23253/   12926 : 665C                		bne.s	loc_12874
   23254/   12928 : 3038 F646           		move.w	($FFFFF646).w,d0
   23255/   1292C : B068 000C           		cmp.w	$C(a0),d0	; is bubble maker underwater?
   23256/   12930 : 6400 00FE           		bcc.w	Obj64_ChkDel	; if not, branch
   23257/   12934 : 4A28 0001           		tst.b	1(a0)
   23258/   12938 : 6A00 00F6           		bpl.w	Obj64_ChkDel
   23259/   1293C : 5368 0038           		subq.w	#1,$38(a0)
   23260/   12940 : 6A00 00E2           		bpl.w	loc_12914
   23261/   12944 : 317C 0001 0036      		move.w	#1,$36(a0)
   23262/   1294A :                     
   23263/   1294A :                     loc_1283A:
   23264/   1294A : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   23265/   12950 : 3200                		move.w	d0,d1
   23266/   12952 : 0240 0007           		andi.w	#7,d0
   23267/   12956 : 0C40 0006           		cmpi.w	#6,d0
   23268/   1295A : 64EE                		bcc.s	loc_1283A
   23269/   1295C :                     
   23270/   1295C : 1140 0034           		move.b	d0,$34(a0)
   23271/   12960 : 0241 000C           		andi.w	#$C,d1
   23272/   12964 : 43F9 0001 2A5C      		lea	(Obj64_BblTypes).l,a1
   23273/   1296A : D2C1                		adda.w	d1,a1
   23274/   1296C : 2149 003C           		move.l	a1,$3C(a0)
   23275/   12970 : 5328 0032           		subq.b	#1,$32(a0)
   23276/   12974 : 6A0C                		bpl.s	loc_12872
   23277/   12976 : 1168 0033 0032      		move.b	$33(a0),$32(a0)
   23278/   1297C : 08E8 0007 0036      		bset	#7,$36(a0)
   23279/   12982 :                     
   23280/   12982 :                     loc_12872:
   23281/   12982 : 6008                		bra.s	loc_1287C
   23282/   12984 :                     ; ===========================================================================
   23283/   12984 :                     
   23284/   12984 :                     loc_12874:				; XREF: Obj64_BblMaker
   23285/   12984 : 5368 0038           		subq.w	#1,$38(a0)
   23286/   12988 : 6A00 009A           		bpl.w	loc_12914
   23287/   1298C :                     
   23288/   1298C :                     loc_1287C:
   23289/   1298C : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   23290/   12992 : 0240 001F           		andi.w	#$1F,d0
   23291/   12996 : 3140 0038           		move.w	d0,$38(a0)
   23292/   1299A : 6100 B1FA           		bsr.w	SingleObjLoad
   23293/   1299E : 6668                		bne.s	loc_128F8
   23294/   129A0 : (MACRO)             		_move.b	#$64,0(a1)	; load bubble object
   23294/   129A0 :  (MACRO-2)                          insn2op move.b, #$64,0(a1)
   23294/   129A0 : 137C 0064 0001                              !move.b   #$64,1+0(a1)
   23294/   129A5 :                                             !org    *-1
   23294/   129A5 : 00                                          !dc.b   0
   23295/   129A6 : 3368 0008 0008      		move.w	8(a0),8(a1)
   23296/   129AC : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   23297/   129B2 : 0240 000F           		andi.w	#$F,d0
   23298/   129B6 : 5140                		subq.w	#8,d0
   23299/   129B8 : D169 0008           		add.w	d0,8(a1)
   23300/   129BC : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   23301/   129C2 : 7000                		moveq	#0,d0
   23302/   129C4 : 1028 0034           		move.b	$34(a0),d0
   23303/   129C8 : 2468 003C           		movea.l	$3C(a0),a2
   23304/   129CC : 1372 0000 0028      		move.b	(a2,d0.w),$28(a1)
   23305/   129D2 : 0828 0007 0036      		btst	#7,$36(a0)
   23306/   129D8 : 672E                		beq.s	loc_128F8
   23307/   129DA : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   23308/   129E0 : 0240 0003           		andi.w	#3,d0
   23309/   129E4 : 660E                		bne.s	loc_128E4
   23310/   129E6 : 08E8 0006 0036      		bset	#6,$36(a0)
   23311/   129EC : 661A                		bne.s	loc_128F8
   23312/   129EE : 137C 0002 0028      		move.b	#2,$28(a1)
   23313/   129F4 :                     
   23314/   129F4 :                     loc_128E4:
   23315/   129F4 : 4A28 0034           		tst.b	$34(a0)
   23316/   129F8 : 660E                		bne.s	loc_128F8
   23317/   129FA : 08E8 0006 0036      		bset	#6,$36(a0)
   23318/   12A00 : 6606                		bne.s	loc_128F8
   23319/   12A02 : 137C 0002 0028      		move.b	#2,$28(a1)
   23320/   12A08 :                     
   23321/   12A08 :                     loc_128F8:
   23322/   12A08 : 5328 0034           		subq.b	#1,$34(a0)
   23323/   12A0C : 6A16                		bpl.s	loc_12914
   23324/   12A0E : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   23325/   12A14 : 0240 007F           		andi.w	#$7F,d0
   23326/   12A18 : 0640 0080           		addi.w	#$80,d0
   23327/   12A1C : D168 0038           		add.w	d0,$38(a0)
   23328/   12A20 : 4268 0036           		clr.w	$36(a0)
   23329/   12A24 :                     
   23330/   12A24 :                     loc_12914:
   23331/   12A24 : 43F9 0001 2AAC      		lea	(Ani_obj64).l,a1
   23332/   12A2A : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   23333/   12A30 :                     
   23334/   12A30 :                     Obj64_ChkDel:				; XREF: Obj64_BblMaker
   23335/   12A30 : 3028 0008           		move.w	8(a0),d0
   23336/   12A34 : 0240 FF80           		andi.w	#$FF80,d0
   23337/   12A38 : 3238 F700           		move.w	($FFFFF700).w,d1
   23338/   12A3C : 0441 0080           		subi.w	#$80,d1
   23339/   12A40 : 0241 FF80           		andi.w	#$FF80,d1
   23340/   12A44 : 9041                		sub.w	d1,d0
   23341/   12A46 : 0C40 0280           		cmpi.w	#$280,d0
   23342/   12A4A : 6200 ACFE           		bhi.w	DeleteObject
   23343/   12A4E : 3038 F646           		move.w	($FFFFF646).w,d0
   23344/   12A52 : B068 000C           		cmp.w	$C(a0),d0
   23345/   12A56 : 6500 ACB6           		bcs.w	DisplaySprite
   23346/   12A5A : 4E75                		rts	
   23347/   12A5C :                     ; ===========================================================================
   23348/   12A5C :                     ; bubble production sequence
   23349/   12A5C :                     
   23350/   12A5C :                     ; 0 = small bubble, 1 =	large bubble
   23351/   12A5C :                     
   23352/   12A5C : 0001 0000 0000 0100 Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
                    0000 0001 0001 0000 
                    0100                
   23353/   12A6E :                     
   23354/   12A6E :                     ; ===========================================================================
   23355/   12A6E :                     
   23356/   12A6E :                     Obj64_ChkSonic:				; XREF: Obj64_Wobble
   23357/   12A6E : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   23358/   12A72 : 6B34                		bmi.s	loc_12998
   23359/   12A74 : 43F8 D000           		lea	($FFFFD000).w,a1
   23360/   12A78 : 3029 0008           		move.w	8(a1),d0
   23361/   12A7C : 3228 0008           		move.w	8(a0),d1
   23362/   12A80 : 0441 0010           		subi.w	#$10,d1
   23363/   12A84 : B240                		cmp.w	d0,d1
   23364/   12A86 : 6420                		bcc.s	loc_12998
   23365/   12A88 : 0641 0020           		addi.w	#$20,d1
   23366/   12A8C : B240                		cmp.w	d0,d1
   23367/   12A8E : 6518                		bcs.s	loc_12998
   23368/   12A90 : 3029 000C           		move.w	$C(a1),d0
   23369/   12A94 : 3228 000C           		move.w	$C(a0),d1
   23370/   12A98 : B240                		cmp.w	d0,d1
   23371/   12A9A : 640C                		bcc.s	loc_12998
   23372/   12A9C : 0641 0010           		addi.w	#$10,d1
   23373/   12AA0 : B240                		cmp.w	d0,d1
   23374/   12AA2 : 6504                		bcs.s	loc_12998
   23375/   12AA4 : 7001                		moveq	#1,d0
   23376/   12AA6 : 4E75                		rts	
   23377/   12AA8 :                     ; ===========================================================================
   23378/   12AA8 :                     
   23379/   12AA8 :                     loc_12998:
   23380/   12AA8 : 7000                		moveq	#0,d0
   23381/   12AAA : 4E75                		rts	
   23382/   12AAC :                     ; ===========================================================================
   23383/   12AAC :                     Ani_obj64:
   23384/   12AAC :                     		include	"_anim/obj64.asm"
(1)    1/   12AAC :                     ; ---------------------------------------------------------------------------
(1)    2/   12AAC :                     ; Animation script - bubbles (LZ)
(1)    3/   12AAC :                     ; ---------------------------------------------------------------------------
(1)    4/   12AAC : 000E                		dc.w byte_129AA-Ani_obj64
(1)    5/   12AAE : 0014                		dc.w byte_129B0-Ani_obj64
(1)    6/   12AB0 : 001A                		dc.w byte_129B6-Ani_obj64
(1)    7/   12AB2 : 0022                		dc.w byte_129BE-Ani_obj64
(1)    8/   12AB4 : 0022                		dc.w byte_129BE-Ani_obj64
(1)    9/   12AB6 : 0024                		dc.w byte_129C0-Ani_obj64
(1)   10/   12AB8 : 002A                		dc.w byte_129C6-Ani_obj64
(1)   11/   12ABA : 0E00 0102 FC00      byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
(1)   12/   12AC0 : 0E01 0203 04FC      byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
(1)   13/   12AC6 : 0E02 0304 0506 FC00 byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
(1)   14/   12ACE : 04FC                byte_129BE:	dc.b 4,	$FC
(1)   15/   12AD0 : 0406 0708 FC00      byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
(1)   16/   12AD6 : 0F13 1415 FF        byte_129C6:	dc.b $F, $13, $14, $15,	$FF
(1)   17/   12ADB : (MACRO)             		align 2
(1)   17/   12ADB :  (MACRO-2)                  cnop 0,2
(1)   17/   12ADB :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   17/   12ADB : =$2E                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   17/   12ADC :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   23385/   12ADC :                     
   23386/   12ADC :                     ; ---------------------------------------------------------------------------
   23387/   12ADC :                     ; Sprite mappings - bubbles (LZ)
   23388/   12ADC :                     ; ---------------------------------------------------------------------------
   23389/   12ADC :                     Map_obj64:
   23390/   12ADC :                     		include	"_maps/obj64.asm"
(1)    1/   12ADC :                     ; ---------------------------------------------------------------------------
(1)    2/   12ADC :                     ; Sprite mappings - bubbles (LZ)
(1)    3/   12ADC :                     ; ---------------------------------------------------------------------------
(1)    4/   12ADC : 002E 0034           		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
(1)    5/   12AE0 : 003A 0040           		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
(1)    6/   12AE4 : 0046 004C           		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
(1)    7/   12AE8 : 0052 0058           		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
(1)    8/   12AEC : 006D 0082           		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
(1)    9/   12AF0 : 0088 008E           		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
(1)   10/   12AF4 : 0094 009A           		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
(1)   11/   12AF8 : 00A0 00A6           		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
(1)   12/   12AFC : 00AC 00B2           		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
(1)   13/   12B00 : 00B8 00BE           		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
(1)   14/   12B04 : 00C4 00CA           		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
(1)   15/   12B08 : 00D0                		dc.w byte_12A9C-Map_obj64
(1)   16/   12B0A : 01                  byte_129FA:	dc.b 1
(1)   17/   12B0B : FC00 0000 FC        		dc.b $FC, 0, 0,	0, $FC
(1)   18/   12B10 : 01                  byte_12A00:	dc.b 1
(1)   19/   12B11 : FC00 0001 FC        		dc.b $FC, 0, 0,	1, $FC
(1)   20/   12B16 : 01                  byte_12A06:	dc.b 1
(1)   21/   12B17 : FC00 0002 FC        		dc.b $FC, 0, 0,	2, $FC
(1)   22/   12B1C : 01                  byte_12A0C:	dc.b 1
(1)   23/   12B1D : F805 0003 F8        		dc.b $F8, 5, 0,	3, $F8
(1)   24/   12B22 : 01                  byte_12A12:	dc.b 1
(1)   25/   12B23 : F805 0007 F8        		dc.b $F8, 5, 0,	7, $F8
(1)   26/   12B28 : 01                  byte_12A18:	dc.b 1
(1)   27/   12B29 : F40A 000B F4        		dc.b $F4, $A, 0, $B, $F4
(1)   28/   12B2E : 01                  byte_12A1E:	dc.b 1
(1)   29/   12B2F : F00F 0014 F0        		dc.b $F0, $F, 0, $14, $F0
(1)   30/   12B34 : 04                  byte_12A24:	dc.b 4
(1)   31/   12B35 : F005 0024 F0        		dc.b $F0, 5, 0,	$24, $F0
(1)   32/   12B3A : F005 0824 00        		dc.b $F0, 5, 8,	$24, 0
(1)   33/   12B3F : 0005 1024 F0        		dc.b 0,	5, $10,	$24, $F0
(1)   34/   12B44 : 0005 1824 00        		dc.b 0,	5, $18,	$24, 0
(1)   35/   12B49 : 04                  byte_12A39:	dc.b 4
(1)   36/   12B4A : F005 0028 F0        		dc.b $F0, 5, 0,	$28, $F0
(1)   37/   12B4F : F005 0828 00        		dc.b $F0, 5, 8,	$28, 0
(1)   38/   12B54 : 0005 1028 F0        		dc.b 0,	5, $10,	$28, $F0
(1)   39/   12B59 : 0005 1828 00        		dc.b 0,	5, $18,	$28, 0
(1)   40/   12B5E : 01                  byte_12A4E:	dc.b 1
(1)   41/   12B5F : F406 002C F8        		dc.b $F4, 6, 0,	$2C, $F8
(1)   42/   12B64 : 01                  byte_12A54:	dc.b 1
(1)   43/   12B65 : F406 0032 F8        		dc.b $F4, 6, 0,	$32, $F8
(1)   44/   12B6A : 01                  byte_12A5A:	dc.b 1
(1)   45/   12B6B : F406 0038 F8        		dc.b $F4, 6, 0,	$38, $F8
(1)   46/   12B70 : 01                  byte_12A60:	dc.b 1
(1)   47/   12B71 : F406 003E F8        		dc.b $F4, 6, 0,	$3E, $F8
(1)   48/   12B76 : 01                  byte_12A66:	dc.b 1
(1)   49/   12B77 : F406 2044 F8        		dc.b $F4, 6, $20, $44, $F8
(1)   50/   12B7C : 01                  byte_12A6C:	dc.b 1
(1)   51/   12B7D : F406 204A F8        		dc.b $F4, 6, $20, $4A, $F8
(1)   52/   12B82 : 01                  byte_12A72:	dc.b 1
(1)   53/   12B83 : F406 2050 F8        		dc.b $F4, 6, $20, $50, $F8
(1)   54/   12B88 : 01                  byte_12A78:	dc.b 1
(1)   55/   12B89 : F406 2056 F8        		dc.b $F4, 6, $20, $56, $F8
(1)   56/   12B8E : 01                  byte_12A7E:	dc.b 1
(1)   57/   12B8F : F406 205C F8        		dc.b $F4, 6, $20, $5C, $F8
(1)   58/   12B94 : 01                  byte_12A84:	dc.b 1
(1)   59/   12B95 : F406 2062 F8        		dc.b $F4, 6, $20, $62, $F8
(1)   60/   12B9A : 01                  byte_12A8A:	dc.b 1
(1)   61/   12B9B : F805 0068 F8        		dc.b $F8, 5, 0,	$68, $F8
(1)   62/   12BA0 : 01                  byte_12A90:	dc.b 1
(1)   63/   12BA1 : F805 006C F8        		dc.b $F8, 5, 0,	$6C, $F8
(1)   64/   12BA6 : 01                  byte_12A96:	dc.b 1
(1)   65/   12BA7 : F805 0070 F8        		dc.b $F8, 5, 0,	$70, $F8
(1)   66/   12BAC : 00                  byte_12A9C:	dc.b 0
(1)   67/   12BAD : (MACRO)             		align 2
(1)   67/   12BAD :  (MACRO-2)                  cnop 0,2
(1)   67/   12BAD :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   67/   12BAD : =$2F                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   67/   12BAE :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   23391/   12BAE :                     
   23392/   12BAE :                     ; ===========================================================================
   23393/   12BAE :                     ; ---------------------------------------------------------------------------
   23394/   12BAE :                     ; Object 65 - waterfalls (LZ)
   23395/   12BAE :                     ; ---------------------------------------------------------------------------
   23396/   12BAE :                     
   23397/   12BAE :                     Obj65:					; XREF: Obj_Index
   23398/   12BAE : 7000                		moveq	#0,d0
   23399/   12BB0 : 1028 0024           		move.b	$24(a0),d0
   23400/   12BB4 : 323B 0006           		move.w	Obj65_Index(pc,d0.w),d1
   23401/   12BB8 : 4EFB 1002           		jmp	Obj65_Index(pc,d1.w)
   23402/   12BBC :                     ; ===========================================================================
   23403/   12BBC : 000A                Obj65_Index:	dc.w Obj65_Main-Obj65_Index
   23404/   12BBE : 006C                		dc.w Obj65_Animate-Obj65_Index
   23405/   12BC0 : 0078                		dc.w Obj65_ChkDel-Obj65_Index
   23406/   12BC2 : 007C                		dc.w Obj65_FixHeight-Obj65_Index
   23407/   12BC4 : 008A                		dc.w loc_12B36-Obj65_Index
   23408/   12BC6 :                     ; ===========================================================================
   23409/   12BC6 :                     
   23410/   12BC6 :                     Obj65_Main:				; XREF: Obj65_Index
   23411/   12BC6 : 5828 0024           		addq.b	#4,$24(a0)
   23412/   12BCA : 217C 0001 2C64 0004 		move.l	#Map_obj65,4(a0)
   23413/   12BD2 : 317C 4259 0002      		move.w	#$4259,2(a0)
   23414/   12BD8 : 0028 0004 0001      		ori.b	#4,1(a0)
   23415/   12BDE : 117C 0018 0019      		move.b	#$18,$19(a0)
   23416/   12BE4 : 117C 0001 0018      		move.b	#1,$18(a0)
   23417/   12BEA : 1028 0028           		move.b	$28(a0),d0	; get object type
   23418/   12BEE : 6A06                		bpl.s	loc_12AE6
   23419/   12BF0 : 08E8 0007 0002      		bset	#7,2(a0)
   23420/   12BF6 :                     
   23421/   12BF6 :                     loc_12AE6:
   23422/   12BF6 : 0200 000F           		andi.b	#$F,d0		; read only the	2nd byte
   23423/   12BFA : 1140 001A           		move.b	d0,$1A(a0)	; set frame number
   23424/   12BFE : 0C00 0009           		cmpi.b	#9,d0		; is object type $x9 ?
   23425/   12C02 : 6630                		bne.s	Obj65_ChkDel	; if not, branch
   23426/   12C04 : 4228 0018           		clr.b	$18(a0)
   23427/   12C08 : 5528 0024           		subq.b	#2,$24(a0)
   23428/   12C0C : 0828 0006 0028      		btst	#6,$28(a0)	; is object type $4x ?
   23429/   12C12 : 6706                		beq.s	loc_12B0A	; if not, branch
   23430/   12C14 : 117C 0006 0024      		move.b	#6,$24(a0)
   23431/   12C1A :                     
   23432/   12C1A :                     loc_12B0A:
   23433/   12C1A : 0828 0005 0028      		btst	#5,$28(a0)	; is object type $Ax ?
   23434/   12C20 : 6706                		beq.s	Obj65_Animate	; if not, branch
   23435/   12C22 : 117C 0008 0024      		move.b	#8,$24(a0)
   23436/   12C28 :                     
   23437/   12C28 :                     Obj65_Animate:				; XREF: Obj65_Index
   23438/   12C28 : 43F9 0001 2C5C      		lea	(Ani_obj65).l,a1
   23439/   12C2E : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   23440/   12C34 :                     
   23441/   12C34 :                     Obj65_ChkDel:				; XREF: Obj65_Index
   23442/   12C34 : 6000 CB86           		bra.w	MarkObjGone
   23443/   12C38 :                     ; ===========================================================================
   23444/   12C38 :                     
   23445/   12C38 :                     Obj65_FixHeight:			; XREF: Obj65_Index
   23446/   12C38 : 3038 F646           		move.w	($FFFFF646).w,d0
   23447/   12C3C : 0440 0010           		subi.w	#$10,d0
   23448/   12C40 : 3140 000C           		move.w	d0,$C(a0)	; match	object position	to water height
   23449/   12C44 : 60E2                		bra.s	Obj65_Animate
   23450/   12C46 :                     ; ===========================================================================
   23451/   12C46 :                     
   23452/   12C46 :                     loc_12B36:				; XREF: Obj65_Index
   23453/   12C46 : 08A8 0007 0002      		bclr	#7,2(a0)
   23454/   12C4C : 0C38 0007 A506      		cmpi.b	#7,($FFFFA506).w
   23455/   12C52 : 6606                		bne.s	Obj65_Animate2
   23456/   12C54 : 08E8 0007 0002      		bset	#7,2(a0)
   23457/   12C5A :                     
   23458/   12C5A :                     Obj65_Animate2:
   23459/   12C5A : 60CC                		bra.s	Obj65_Animate
   23460/   12C5C :                     ; ===========================================================================
   23461/   12C5C :                     Ani_obj65:
   23462/   12C5C :                     		include	"_anim/obj65.asm"
(1)    1/   12C5C :                     ; ---------------------------------------------------------------------------
(1)    2/   12C5C :                     ; Animation script - waterfall (LZ)
(1)    3/   12C5C :                     ; ---------------------------------------------------------------------------
(1)    4/   12C5C : 0002                		dc.w byte_12B4E-Ani_obj65
(1)    5/   12C5E : 0509 0A0B FF        byte_12B4E:	dc.b 5,	9, $A, $B, $FF
(1)    6/   12C63 : (MACRO)             		align 2
(1)    6/   12C63 :  (MACRO-2)                  cnop 0,2
(1)    6/   12C63 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)    6/   12C63 : =$30                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)    6/   12C64 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   23463/   12C64 :                     
   23464/   12C64 :                     ; ---------------------------------------------------------------------------
   23465/   12C64 :                     ; Sprite mappings - waterfalls (LZ)
   23466/   12C64 :                     ; ---------------------------------------------------------------------------
   23467/   12C64 :                     Map_obj65:
   23468/   12C64 :                     		include	"_maps/obj65.asm"
(1)    1/   12C64 :                     ; ---------------------------------------------------------------------------
(1)    2/   12C64 :                     ; Sprite mappings - waterfalls (LZ)
(1)    3/   12C64 :                     ; ---------------------------------------------------------------------------
(1)    4/   12C64 : 0018 001E           		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
(1)    5/   12C68 : 0029 0034           		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
(1)    6/   12C6C : 003A 0045           		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
(1)    7/   12C70 : 004B 0051           		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
(1)    8/   12C74 : 0057 0062           		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
(1)    9/   12C78 : 006D 0078           		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
(1)   10/   12C7C : 01                  byte_12B6C:	dc.b 1
(1)   11/   12C7D : F007 0000 F8        		dc.b $F0, 7, 0,	0, $F8
(1)   12/   12C82 : 02                  byte_12B72:	dc.b 2
(1)   13/   12C83 : F804 0008 FC        		dc.b $F8, 4, 0,	8, $FC
(1)   14/   12C88 : 0008 000A F4        		dc.b 0,	8, 0, $A, $F4
(1)   15/   12C8D : 02                  byte_12B7D:	dc.b 2
(1)   16/   12C8E : F800 0008 00        		dc.b $F8, 0, 0,	8, 0
(1)   17/   12C93 : 0004 000D F8        		dc.b 0,	4, 0, $D, $F8
(1)   18/   12C98 : 01                  byte_12B88:	dc.b 1
(1)   19/   12C99 : F801 000F 00        		dc.b $F8, 1, 0,	$F, 0
(1)   20/   12C9E : 02                  byte_12B8E:	dc.b 2
(1)   21/   12C9F : F800 0008 00        		dc.b $F8, 0, 0,	8, 0
(1)   22/   12CA4 : 0004 000D F8        		dc.b 0,	4, 0, $D, $F8
(1)   23/   12CA9 : 01                  byte_12B99:	dc.b 1
(1)   24/   12CAA : F801 0011 00        		dc.b $F8, 1, 0,	$11, 0
(1)   25/   12CAF : 01                  byte_12B9F:	dc.b 1
(1)   26/   12CB0 : F801 0013 00        		dc.b $F8, 1, 0,	$13, 0
(1)   27/   12CB5 : 01                  byte_12BA5:	dc.b 1
(1)   28/   12CB6 : F007 0015 F8        		dc.b $F0, 7, 0,	$15, $F8
(1)   29/   12CBB : 02                  byte_12BAB:	dc.b 2
(1)   30/   12CBC : F80C 001D F6        		dc.b $F8, $C, 0, $1D, $F6
(1)   31/   12CC1 : 000C 0021 E8        		dc.b 0,	$C, 0, $21, $E8
(1)   32/   12CC6 : 02                  byte_12BB6:	dc.b 2
(1)   33/   12CC7 : F00B 0025 E8        		dc.b $F0, $B, 0, $25, $E8
(1)   34/   12CCC : F00B 0031 00        		dc.b $F0, $B, 0, $31, 0
(1)   35/   12CD1 : 02                  byte_12BC1:	dc.b 2
(1)   36/   12CD2 : F00B 003D E8        		dc.b $F0, $B, 0, $3D, $E8
(1)   37/   12CD7 : F00B 0049 00        		dc.b $F0, $B, 0, $49, 0
(1)   38/   12CDC : 02                  byte_12BCC:	dc.b 2
(1)   39/   12CDD : F00B 0055 E8        		dc.b $F0, $B, 0, $55, $E8
(1)   40/   12CE2 : F00B 0061 00        		dc.b $F0, $B, 0, $61, 0
(1)   41/   12CE7 : (MACRO)             		align 2
(1)   41/   12CE7 :  (MACRO-2)                  cnop 0,2
(1)   41/   12CE7 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   41/   12CE7 : =$31                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   41/   12CE8 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   23469/   12CE8 :                     
   23470/   12CE8 :                     ; ===========================================================================
   23471/   12CE8 :                     ; ---------------------------------------------------------------------------
   23472/   12CE8 :                     ; Object 01 - Sonic
   23473/   12CE8 :                     ; ---------------------------------------------------------------------------
   23474/   12CE8 :                     
   23475/   12CE8 :                     Obj01:					; XREF: Obj_Index
   23476/   12CE8 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	being used?
   23477/   12CEC : 6706                		beq.s	Obj01_Normal	; if not, branch
   23478/   12CEE : 4EF9 0001 D1B0      		jmp	(DebugMode).l
   23479/   12CF4 :                     ; ===========================================================================
   23480/   12CF4 :                     
   23481/   12CF4 :                     Obj01_Normal:
   23482/   12CF4 : 7000                		moveq	#0,d0
   23483/   12CF6 : 1028 0024           		move.b	$24(a0),d0
   23484/   12CFA : 323B 0006           		move.w	Obj01_Index(pc,d0.w),d1
   23485/   12CFE : 4EFB 1002           		jmp	Obj01_Index(pc,d1.w)
   23486/   12D02 :                     ; ===========================================================================
   23487/   12D02 : 000A                Obj01_Index:	dc.w Obj01_Main-Obj01_Index
   23488/   12D04 : 004C                		dc.w Obj01_Control-Obj01_Index
   23489/   12D06 : 0D5E                		dc.w Obj01_Hurt-Obj01_Index
   23490/   12D08 : 0DCE                		dc.w Obj01_Death-Obj01_Index
   23491/   12D0A : 0E6E                		dc.w Obj01_ResetLevel-Obj01_Index
   23492/   12D0C :                     ; ===========================================================================
   23493/   12D0C :                     
   23494/   12D0C :                     Obj01_Main:				; XREF: Obj01_Index
   23495/   12D0C : 5428 0024           		addq.b	#2,$24(a0)
   23496/   12D10 : 117C 0013 0016      		move.b	#$13,$16(a0)
   23497/   12D16 : 117C 0009 0017      		move.b	#9,$17(a0)
   23498/   12D1C : 217C 0002 1422 0004 		move.l	#Map_Sonic,4(a0)
   23499/   12D24 : 317C 0780 0002      		move.w	#$780,2(a0)
   23500/   12D2A : 117C 0002 0018      		move.b	#2,$18(a0)
   23501/   12D30 : 117C 0018 0019      		move.b	#$18,$19(a0)
   23502/   12D36 : 117C 0004 0001      		move.b	#4,1(a0)
   23503/   12D3C : 31FC 0600 F760      		move.w	#$600,($FFFFF760).w ; Sonic"s top speed
   23504/   12D42 : 31FC 000C F762      		move.w	#$C,($FFFFF762).w ; Sonic"s acceleration
   23505/   12D48 : 31FC 0080 F764      		move.w	#$80,($FFFFF764).w ; Sonic"s deceleration
   23506/   12D4E :                     
   23507/   12D4E :                     Obj01_Control:				; XREF: Obj01_Index
   23508/   12D4E : 4A78 FFFA           		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
   23509/   12D52 : 6714                		beq.s	loc_12C58	; if not, branch
   23510/   12D54 : 0838 0004 F605      		btst	#4,($FFFFF605).w ; is button C pressed?
   23511/   12D5A : 670C                		beq.s	loc_12C58	; if not, branch
   23512/   12D5C : 31FC 0001 FE08      		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
   23513/   12D62 : 4238 F7CC           		clr.b	($FFFFF7CC).w
   23514/   12D66 : 4E75                		rts	
   23515/   12D68 :                     ; ===========================================================================
   23516/   12D68 :                     
   23517/   12D68 :                     loc_12C58:
   23518/   12D68 : 4A38 F7CC           		tst.b	($FFFFF7CC).w	; are controls locked?
   23519/   12D6C : 6606                		bne.s	loc_12C64	; if yes, branch
   23520/   12D6E : 31F8 F604 F602      		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
   23521/   12D74 :                     
   23522/   12D74 :                     loc_12C64:
   23523/   12D74 : 0838 0000 F7C8      		btst	#0,($FFFFF7C8).w ; are controls	locked?
   23524/   12D7A : 6612                		bne.s	loc_12C7E	; if yes, branch
   23525/   12D7C : 7000                		moveq	#0,d0
   23526/   12D7E : 1028 0022           		move.b	$22(a0),d0
   23527/   12D82 : 0240 0006           		andi.w	#6,d0
   23528/   12D86 : 323B 0048           		move.w	Obj01_Modes(pc,d0.w),d1
   23529/   12D8A : 4EBB 1044           		jsr	Obj01_Modes(pc,d1.w)
   23530/   12D8E :                     
   23531/   12D8E :                     loc_12C7E:
   23532/   12D8E : 614E                		bsr.s	Sonic_Display
   23533/   12D90 : 6100 00DC           		bsr.w	Sonic_RecordPos
   23534/   12D94 : 6100 00F2           		bsr.w	Sonic_Water
   23535/   12D98 : 1178 F768 0036      		move.b	($FFFFF768).w,$36(a0)
   23536/   12D9E : 1178 F76A 0037      		move.b	($FFFFF76A).w,$37(a0)
   23537/   12DA4 : 4A38 F7C7           		tst.b	($FFFFF7C7).w
   23538/   12DA8 : 670C                		beq.s	loc_12CA6
   23539/   12DAA : 4A28 001C           		tst.b	$1C(a0)
   23540/   12DAE : 6606                		bne.s	loc_12CA6
   23541/   12DB0 : 1168 001D 001C      		move.b	$1D(a0),$1C(a0)
   23542/   12DB6 :                     
   23543/   12DB6 :                     loc_12CA6:
   23544/   12DB6 : 6100 0E7A           		bsr.w	Sonic_Animate
   23545/   12DBA : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   23546/   12DBE : 6B06                		bmi.s	loc_12CB6
   23547/   12DC0 : 4EB9 0001 B074      		jsr	(TouchResponse).l
   23548/   12DC6 :                     
   23549/   12DC6 :                     loc_12CB6:
   23550/   12DC6 : 6100 0DBC           		bsr.w	Sonic_Loops
   23551/   12DCA : 6100 10EE           		bsr.w	LoadSonicDynPLC
   23552/   12DCE : 4E75                		rts	
   23553/   12DD0 :                     ; ===========================================================================
   23554/   12DD0 : 0158                Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
   23555/   12DD2 : 0180                		dc.w Obj01_MdJump-Obj01_Modes
   23556/   12DD4 : 01AA                		dc.w Obj01_MdRoll-Obj01_Modes
   23557/   12DD6 : 01CA                		dc.w Obj01_MdJump2-Obj01_Modes
   23558/   12DD8 :                     ; ---------------------------------------------------------------------------
   23559/   12DD8 :                     ; Music	to play	after invincibility wears off
   23560/   12DD8 :                     ; ---------------------------------------------------------------------------
   23561/   12DD8 :                     MusicList2:	binclude	misc/muslist2.bin
   23562/   12DDE : (MACRO)             		align 2
   23562/   12DDE :  (MACRO-2)                  cnop 0,2
   23562/   12DDE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   23563/   12DDE :                     ; ===========================================================================
   23564/   12DDE :                     
   23565/   12DDE :                     Sonic_Display:				; XREF: loc_12C7E
   23566/   12DDE : 3028 0030           		move.w	$30(a0),d0
   23567/   12DE2 : 6708                		beq.s	Obj01_Display
   23568/   12DE4 : 5368 0030           		subq.w	#1,$30(a0)
   23569/   12DE8 : E648                		lsr.w	#3,d0
   23570/   12DEA : 6406                		bcc.s	Obj01_ChkInvin
   23571/   12DEC :                     
   23572/   12DEC :                     Obj01_Display:
   23573/   12DEC : 4EB9 0000 D70E      		jsr	(DisplaySprite).l
   23574/   12DF2 :                     
   23575/   12DF2 :                     Obj01_ChkInvin:
   23576/   12DF2 : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
   23577/   12DF6 : 6740                		beq.s	Obj01_ChkShoes	; if not, branch
   23578/   12DF8 : 4A68 0032           		tst.w	$32(a0)		; check	time remaining for invinciblity
   23579/   12DFC : 673A                		beq.s	Obj01_ChkShoes	; if no	time remains, branch
   23580/   12DFE : 5368 0032           		subq.w	#1,$32(a0)	; subtract 1 from time
   23581/   12E02 : 6634                		bne.s	Obj01_ChkShoes
   23582/   12E04 : 4A38 F7AA           		tst.b	($FFFFF7AA).w
   23583/   12E08 : 6628                		bne.s	Obj01_RmvInvin
   23584/   12E0A : 0C78 000C FE14      		cmpi.w	#$C,($FFFFFE14).w
   23585/   12E10 : 6520                		bcs.s	Obj01_RmvInvin
   23586/   12E12 : 7000                		moveq	#0,d0
   23587/   12E14 : 1038 FE10           		move.b	($FFFFFE10).w,d0
   23588/   12E18 : 0C78 0103 FE10      		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
   23589/   12E1E : 6602                		bne.s	Obj01_PlayMusic
   23590/   12E20 : 7005                		moveq	#5,d0		; play SBZ music
   23591/   12E22 :                     
   23592/   12E22 :                     Obj01_PlayMusic:
   23593/   12E22 : 43F9 0001 2DD8      		lea	(MusicList2).l,a1
   23594/   12E28 : 1031 0000           		move.b	(a1,d0.w),d0
   23595/   12E2C : 4EB9 0000 1396      		jsr	(PlaySound).l	; play normal music
   23596/   12E32 :                     
   23597/   12E32 :                     Obj01_RmvInvin:
   23598/   12E32 : 11FC 0000 FE2D      		move.b	#0,($FFFFFE2D).w ; cancel invincibility
   23599/   12E38 :                     
   23600/   12E38 :                     Obj01_ChkShoes:
   23601/   12E38 : 4A38 FE2E           		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
   23602/   12E3C : 672E                		beq.s	Obj01_ExitChk	; if not, branch
   23603/   12E3E : 4A68 0034           		tst.w	$34(a0)		; check	time remaining
   23604/   12E42 : 6728                		beq.s	Obj01_ExitChk
   23605/   12E44 : 5368 0034           		subq.w	#1,$34(a0)	; subtract 1 from time
   23606/   12E48 : 6622                		bne.s	Obj01_ExitChk
   23607/   12E4A : 31FC 0600 F760      		move.w	#$600,($FFFFF760).w ; restore Sonic"s speed
   23608/   12E50 : 31FC 000C F762      		move.w	#$C,($FFFFF762).w ; restore Sonic"s acceleration
   23609/   12E56 : 31FC 0080 F764      		move.w	#$80,($FFFFF764).w ; restore Sonic"s deceleration
   23610/   12E5C : 11FC 0000 FE2E      		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
   23611/   12E62 : 303C 00E3           		move.w	#$E3,d0
   23612/   12E66 : 4EF9 0000 1396      		jmp	(PlaySound).l	; run music at normal speed
   23613/   12E6C :                     ; ===========================================================================
   23614/   12E6C :                     
   23615/   12E6C :                     Obj01_ExitChk:
   23616/   12E6C : 4E75                		rts	
   23617/   12E6E :                     
   23618/   12E6E :                     ; ---------------------------------------------------------------------------
   23619/   12E6E :                     ; Subroutine to	record Sonic"s previous positions for invincibility stars
   23620/   12E6E :                     ; ---------------------------------------------------------------------------
   23621/   12E6E :                     
   23622/   12E6E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23623/   12E6E :                     
   23624/   12E6E :                     
   23625/   12E6E :                     Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
   23626/   12E6E : 3038 F7A8           		move.w	($FFFFF7A8).w,d0
   23627/   12E72 : 43F8 CB00           		lea	($FFFFCB00).w,a1
   23628/   12E76 : 43F1 0000           		lea	(a1,d0.w),a1
   23629/   12E7A : 32E8 0008           		move.w	8(a0),(a1)+
   23630/   12E7E : 32E8 000C           		move.w	$C(a0),(a1)+
   23631/   12E82 : 5838 F7A9           		addq.b	#4,($FFFFF7A9).w
   23632/   12E86 : 4E75                		rts	
   23633/   12E88 :                     ; End of function Sonic_RecordPos
   23634/   12E88 :                     
   23635/   12E88 :                     ; ---------------------------------------------------------------------------
   23636/   12E88 :                     ; Subroutine for Sonic when he"s underwater
   23637/   12E88 :                     ; ---------------------------------------------------------------------------
   23638/   12E88 :                     
   23639/   12E88 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23640/   12E88 :                     
   23641/   12E88 :                     
   23642/   12E88 :                     Sonic_Water:				; XREF: loc_12C7E
   23643/   12E88 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
   23644/   12E8E : 6702                		beq.s	Obj01_InWater	; if yes, branch
   23645/   12E90 :                     
   23646/   12E90 :                     locret_12D80:
   23647/   12E90 : 4E75                		rts	
   23648/   12E92 :                     ; ===========================================================================
   23649/   12E92 :                     
   23650/   12E92 :                     Obj01_InWater:
   23651/   12E92 : 3038 F646           		move.w	($FFFFF646).w,d0
   23652/   12E96 : B068 000C           		cmp.w	$C(a0),d0	; is Sonic above the water?
   23653/   12E9A : 6C48                		bge.s	Obj01_OutWater	; if yes, branch
   23654/   12E9C : 08E8 0006 0022      		bset	#6,$22(a0)
   23655/   12EA2 : 66EC                		bne.s	locret_12D80
   23656/   12EA4 : 6100 1464           		bsr.w	ResumeMusic
   23657/   12EA8 : 11FC 000A D340      		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic"s mouth
   23658/   12EAE : 11FC 0081 D368      		move.b	#$81,($FFFFD368).w
   23659/   12EB4 : 31FC 0300 F760      		move.w	#$300,($FFFFF760).w ; change Sonic"s top speed
   23660/   12EBA : 31FC 0006 F762      		move.w	#6,($FFFFF762).w ; change Sonic"s acceleration
   23661/   12EC0 : 31FC 0040 F764      		move.w	#$40,($FFFFF764).w ; change Sonic"s deceleration
   23662/   12EC6 : E0E8 0010           		asr	$10(a0)
   23663/   12ECA : E0E8 0012           		asr	$12(a0)
   23664/   12ECE : E0E8 0012           		asr	$12(a0)
   23665/   12ED2 : 67BC                		beq.s	locret_12D80
   23666/   12ED4 : 11FC 0008 D300      		move.b	#8,($FFFFD300).w ; load	splash object
   23667/   12EDA : 303C 00AA           		move.w	#$AA,d0
   23668/   12EDE : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play splash sound
   23669/   12EE4 :                     ; ===========================================================================
   23670/   12EE4 :                     
   23671/   12EE4 :                     Obj01_OutWater:
   23672/   12EE4 : 08A8 0006 0022      		bclr	#6,$22(a0)
   23673/   12EEA : 67A4                		beq.s	locret_12D80
   23674/   12EEC : 6100 141C           		bsr.w	ResumeMusic
   23675/   12EF0 : 31FC 0600 F760      		move.w	#$600,($FFFFF760).w ; restore Sonic"s speed
   23676/   12EF6 : 31FC 000C F762      		move.w	#$C,($FFFFF762).w ; restore Sonic"s acceleration
   23677/   12EFC : 31FC 0080 F764      		move.w	#$80,($FFFFF764).w ; restore Sonic"s deceleration
   23678/   12F02 : E1E8 0012           		asl	$12(a0)
   23679/   12F06 : 6700 FF88           		beq.w	locret_12D80
   23680/   12F0A : 11FC 0008 D300      		move.b	#8,($FFFFD300).w ; load	splash object
   23681/   12F10 : 0C68 F000 0012      		cmpi.w	#-$1000,$12(a0)
   23682/   12F16 : 6E06                		bgt.s	loc_12E0E
   23683/   12F18 : 317C F000 0012      		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
   23684/   12F1E :                     
   23685/   12F1E :                     loc_12E0E:
   23686/   12F1E : 303C 00AA           		move.w	#$AA,d0
   23687/   12F22 : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play splash sound
   23688/   12F28 :                     ; End of function Sonic_Water
   23689/   12F28 :                     
   23690/   12F28 :                     ; ===========================================================================
   23691/   12F28 :                     ; ---------------------------------------------------------------------------
   23692/   12F28 :                     ; Modes	for controlling	Sonic
   23693/   12F28 :                     ; ---------------------------------------------------------------------------
   23694/   12F28 :                     
   23695/   12F28 :                     Obj01_MdNormal:				; XREF: Obj01_Modes
   23696/   12F28 : 6100 06D8           		bsr.w	Sonic_SpinDash
   23697/   12F2C : 6100 05DC           		bsr.w	Sonic_Jump
   23698/   12F30 : 6100 0810           		bsr.w	Sonic_SlopeResist
   23699/   12F34 : 6100 008E           		bsr.w	Sonic_Move
   23700/   12F38 : 6100 056A           		bsr.w	Sonic_Roll
   23701/   12F3C : 6100 04DA           		bsr.w	Sonic_LevelBound
   23702/   12F40 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   23703/   12F46 : 6100 1922           		bsr.w	Sonic_AnglePos
   23704/   12F4A : 6100 0868           		bsr.w	Sonic_SlopeRepel
   23705/   12F4E : 4E75                		rts	
   23706/   12F50 :                     ; ===========================================================================
   23707/   12F50 :                     
   23708/   12F50 :                     Obj01_MdJump:				; XREF: Obj01_Modes
   23709/   12F50 : 6100 0674           		bsr.w	Sonic_JumpHeight
   23710/   12F54 : 6100 0406           		bsr.w	Sonic_ChgJumpDir
   23711/   12F58 : 6100 04BE           		bsr.w	Sonic_LevelBound
   23712/   12F5C : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   23713/   12F62 : 0828 0006 0022      		btst	#6,$22(a0)
   23714/   12F68 : 6706                		beq.s	loc_12E5C
   23715/   12F6A : 0468 0028 0012      		subi.w	#$28,$12(a0)
   23716/   12F70 :                     
   23717/   12F70 :                     loc_12E5C:
   23718/   12F70 : 6100 0884           		bsr.w	Sonic_JumpAngle
   23719/   12F74 : 6100 089C           		bsr.w	Sonic_Floor
   23720/   12F78 : 4E75                		rts	
   23721/   12F7A :                     ; ===========================================================================
   23722/   12F7A :                     
   23723/   12F7A :                     Obj01_MdRoll:				; XREF: Obj01_Modes
   23724/   12F7A : 6100 058E           		bsr.w	Sonic_Jump
   23725/   12F7E : 6100 07F8           		bsr.w	Sonic_RollRepel
   23726/   12F82 : 6100 02E0           		bsr.w	Sonic_RollSpeed
   23727/   12F86 : 6100 0490           		bsr.w	Sonic_LevelBound
   23728/   12F8A : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   23729/   12F90 : 6100 18D8           		bsr.w	Sonic_AnglePos
   23730/   12F94 : 6100 081E           		bsr.w	Sonic_SlopeRepel
   23731/   12F98 : 4E75                		rts	
   23732/   12F9A :                     ; ===========================================================================
   23733/   12F9A :                     
   23734/   12F9A :                     Obj01_MdJump2:				; XREF: Obj01_Modes
   23735/   12F9A : 6100 062A           		bsr.w	Sonic_JumpHeight
   23736/   12F9E : 6100 03BC           		bsr.w	Sonic_ChgJumpDir
   23737/   12FA2 : 6100 0474           		bsr.w	Sonic_LevelBound
   23738/   12FA6 : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   23739/   12FAC : 0828 0006 0022      		btst	#6,$22(a0)
   23740/   12FB2 : 6706                		beq.s	loc_12EA6
   23741/   12FB4 : 0468 0028 0012      		subi.w	#$28,$12(a0)
   23742/   12FBA :                     
   23743/   12FBA :                     loc_12EA6:
   23744/   12FBA : 6100 083A           		bsr.w	Sonic_JumpAngle
   23745/   12FBE : 6100 0852           		bsr.w	Sonic_Floor
   23746/   12FC2 : 4E75                		rts	
   23747/   12FC4 :                     ; ---------------------------------------------------------------------------
   23748/   12FC4 :                     ; Subroutine to	make Sonic walk/run
   23749/   12FC4 :                     ; ---------------------------------------------------------------------------
   23750/   12FC4 :                     
   23751/   12FC4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23752/   12FC4 :                     
   23753/   12FC4 :                     
   23754/   12FC4 :                     Sonic_Move:				; XREF: Obj01_MdNormal
   23755/   12FC4 : 3C38 F760           		move.w	($FFFFF760).w,d6
   23756/   12FC8 : 3A38 F762           		move.w	($FFFFF762).w,d5
   23757/   12FCC : 3838 F764           		move.w	($FFFFF764).w,d4
   23758/   12FD0 : 4A38 F7CA           		tst.b	($FFFFF7CA).w
   23759/   12FD4 : 6600 012C           		bne.w	loc_12FEE
   23760/   12FD8 : 4A68 003E           		tst.w	$3E(a0)
   23761/   12FDC : 6600 00E6           		bne.w	Obj01_ResetScr
   23762/   12FE0 : 0838 0002 F602      		btst	#2,($FFFFF602).w ; is left being pressed?
   23763/   12FE6 : 6704                		beq.s	Obj01_NotLeft	; if not, branch
   23764/   12FE8 : 6100 01A8           		bsr.w	Sonic_MoveLeft
   23765/   12FEC :                     
   23766/   12FEC :                     Obj01_NotLeft:
   23767/   12FEC : 0838 0003 F602      		btst	#3,($FFFFF602).w ; is right being pressed?
   23768/   12FF2 : 6704                		beq.s	Obj01_NotRight	; if not, branch
   23769/   12FF4 : 6100 0208           		bsr.w	Sonic_MoveRight
   23770/   12FF8 :                     
   23771/   12FF8 :                     Obj01_NotRight:
   23772/   12FF8 : 1028 0026           		move.b	$26(a0),d0
   23773/   12FFC : 0600 0020           		addi.b	#$20,d0
   23774/   13000 : 0200 00C0           		andi.b	#$C0,d0		; is Sonic on a	slope?
   23775/   13004 : 6600 00BE           		bne.w	Obj01_ResetScr	; if yes, branch
   23776/   13008 : 4A68 0014           		tst.w	$14(a0)		; is Sonic moving?
   23777/   1300C : 6600 00B6           		bne.w	Obj01_ResetScr	; if yes, branch
   23778/   13010 : 08A8 0005 0022      		bclr	#5,$22(a0)
   23779/   13016 : 117C 0005 001C      		move.b	#5,$1C(a0)	; use "standing" animation
   23780/   1301C : 0828 0003 0022      		btst	#3,$22(a0)
   23781/   13022 : 6736                		beq.s	Sonic_Balance
   23782/   13024 : 7000                		moveq	#0,d0
   23783/   13026 : 1028 003D           		move.b	$3D(a0),d0
   23784/   1302A : ED48                		lsl.w	#6,d0
   23785/   1302C : 43F8 D000           		lea	($FFFFD000).w,a1
   23786/   13030 : 43F1 0000           		lea	(a1,d0.w),a1
   23787/   13034 : 4A29 0022           		tst.b	$22(a1)
   23788/   13038 : 6B52                		bmi.s	Sonic_LookUp
   23789/   1303A : 7200                		moveq	#0,d1
   23790/   1303C : 1229 0019           		move.b	$19(a1),d1
   23791/   13040 : 3401                		move.w	d1,d2
   23792/   13042 : D442                		add.w	d2,d2
   23793/   13044 : 5942                		subq.w	#4,d2
   23794/   13046 : D268 0008           		add.w	8(a0),d1
   23795/   1304A : 9269 0008           		sub.w	8(a1),d1
   23796/   1304E : 0C41 0004           		cmpi.w	#4,d1
   23797/   13052 : 6D2A                		blt.s	loc_12F6A
   23798/   13054 : B242                		cmp.w	d2,d1
   23799/   13056 : 6C16                		bge.s	loc_12F5A
   23800/   13058 : 6032                		bra.s	Sonic_LookUp
   23801/   1305A :                     ; ===========================================================================
   23802/   1305A :                     
   23803/   1305A :                     Sonic_Balance:
   23804/   1305A : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   23805/   13060 : 0C41 000C           		cmpi.w	#$C,d1
   23806/   13064 : 6D26                		blt.s	Sonic_LookUp
   23807/   13066 : 0C28 0003 0036      		cmpi.b	#3,$36(a0)
   23808/   1306C : 6608                		bne.s	loc_12F62
   23809/   1306E :                     
   23810/   1306E :                     loc_12F5A:
   23811/   1306E : 08A8 0000 0022      		bclr	#0,$22(a0)
   23812/   13074 : 600E                		bra.s	loc_12F70
   23813/   13076 :                     ; ===========================================================================
   23814/   13076 :                     
   23815/   13076 :                     loc_12F62:
   23816/   13076 : 0C28 0003 0037      		cmpi.b	#3,$37(a0)
   23817/   1307C : 660E                		bne.s	Sonic_LookUp
   23818/   1307E :                     
   23819/   1307E :                     loc_12F6A:
   23820/   1307E : 08E8 0000 0022      		bset	#0,$22(a0)
   23821/   13084 :                     
   23822/   13084 :                     loc_12F70:
   23823/   13084 : 117C 0006 001C      		move.b	#6,$1C(a0)	; use "balancing" animation
   23824/   1308A : 6038                		bra.s	Obj01_ResetScr
   23825/   1308C :                     ; ===========================================================================
   23826/   1308C :                     
   23827/   1308C :                     Sonic_LookUp:
   23828/   1308C : 0838 0000 F602      		btst	#0,($FFFFF602).w ; is up being pressed?
   23829/   13092 : 6714                		beq.s	Sonic_Duck	; if not, branch
   23830/   13094 : 117C 0007 001C      		move.b	#7,$1C(a0)	; use "looking up" animation
   23831/   1309A : 0C78 00C8 F73E      		cmpi.w	#$C8,($FFFFF73E).w
   23832/   130A0 : 6734                		beq.s	loc_12FC2
   23833/   130A2 : 5478 F73E           		addq.w	#2,($FFFFF73E).w
   23834/   130A6 : 602E                		bra.s	loc_12FC2
   23835/   130A8 :                     ; ===========================================================================
   23836/   130A8 :                     
   23837/   130A8 :                     Sonic_Duck:
   23838/   130A8 : 0838 0001 F602      		btst	#1,($FFFFF602).w ; is down being pressed?
   23839/   130AE : 6714                		beq.s	Obj01_ResetScr	; if not, branch
   23840/   130B0 : 117C 0008 001C      		move.b	#8,$1C(a0)	; use "ducking"	animation
   23841/   130B6 : 0C78 0008 F73E      		cmpi.w	#8,($FFFFF73E).w
   23842/   130BC : 6718                		beq.s	loc_12FC2
   23843/   130BE : 5578 F73E           		subq.w	#2,($FFFFF73E).w
   23844/   130C2 : 6012                		bra.s	loc_12FC2
   23845/   130C4 :                     ; ===========================================================================
   23846/   130C4 :                     
   23847/   130C4 :                     Obj01_ResetScr:
   23848/   130C4 : 0C78 0060 F73E      		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
   23849/   130CA : 670A                		beq.s	loc_12FC2	; if yes, branch
   23850/   130CC : 6404                		bcc.s	loc_12FBE
   23851/   130CE : 5878 F73E           		addq.w	#4,($FFFFF73E).w ; move	screen back to default
   23852/   130D2 :                     
   23853/   130D2 :                     loc_12FBE:
   23854/   130D2 : 5578 F73E           		subq.w	#2,($FFFFF73E).w ; move	screen back to default
   23855/   130D6 :                     
   23856/   130D6 :                     loc_12FC2:
   23857/   130D6 : 1038 F602           		move.b	($FFFFF602).w,d0
   23858/   130DA : 0200 000C           		andi.b	#$C,d0		; is left/right	pressed?
   23859/   130DE : 6622                		bne.s	loc_12FEE	; if yes, branch
   23860/   130E0 : 3028 0014           		move.w	$14(a0),d0
   23861/   130E4 : 671C                		beq.s	loc_12FEE
   23862/   130E6 : 6B0E                		bmi.s	loc_12FE2
   23863/   130E8 : 9045                		sub.w	d5,d0
   23864/   130EA : 6404                		bcc.s	loc_12FDC
   23865/   130EC : 303C 0000           		move.w	#0,d0
   23866/   130F0 :                     
   23867/   130F0 :                     loc_12FDC:
   23868/   130F0 : 3140 0014           		move.w	d0,$14(a0)
   23869/   130F4 : 600C                		bra.s	loc_12FEE
   23870/   130F6 :                     ; ===========================================================================
   23871/   130F6 :                     
   23872/   130F6 :                     loc_12FE2:
   23873/   130F6 : D045                		add.w	d5,d0
   23874/   130F8 : 6404                		bcc.s	loc_12FEA
   23875/   130FA : 303C 0000           		move.w	#0,d0
   23876/   130FE :                     
   23877/   130FE :                     loc_12FEA:
   23878/   130FE : 3140 0014           		move.w	d0,$14(a0)
   23879/   13102 :                     
   23880/   13102 :                     loc_12FEE:
   23881/   13102 : 1028 0026           		move.b	$26(a0),d0
   23882/   13106 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   23883/   1310C : C3E8 0014           		muls.w	$14(a0),d1
   23884/   13110 : E081                		asr.l	#8,d1
   23885/   13112 : 3141 0010           		move.w	d1,$10(a0)
   23886/   13116 : C1E8 0014           		muls.w	$14(a0),d0
   23887/   1311A : E080                		asr.l	#8,d0
   23888/   1311C : 3140 0012           		move.w	d0,$12(a0)
   23889/   13120 :                     
   23890/   13120 :                     loc_1300C:
   23891/   13120 : 1028 0026           		move.b	$26(a0),d0
   23892/   13124 : 0600 0040           		addi.b	#$40,d0
   23893/   13128 : 6B66                		bmi.s	locret_1307C
   23894/   1312A : 123C 0040           		move.b	#$40,d1
   23895/   1312E : 4A68 0014           		tst.w	$14(a0)
   23896/   13132 : 675C                		beq.s	locret_1307C
   23897/   13134 : 6B02                		bmi.s	loc_13024
   23898/   13136 : 4441                		neg.w	d1
   23899/   13138 :                     
   23900/   13138 :                     loc_13024:
   23901/   13138 : 1028 0026           		move.b	$26(a0),d0
   23902/   1313C : D001                		add.b	d1,d0
   23903/   1313E : 3F00                		move.w	d0,-(sp)
   23904/   13140 : 6100 1E18           		bsr.w	Sonic_WalkSpeed
   23905/   13144 : 301F                		move.w	(sp)+,d0
   23906/   13146 : 4A41                		tst.w	d1
   23907/   13148 : 6A46                		bpl.s	locret_1307C
   23908/   1314A : E141                		asl.w	#8,d1
   23909/   1314C : 0600 0020           		addi.b	#$20,d0
   23910/   13150 : 0200 00C0           		andi.b	#$C0,d0
   23911/   13154 : 6736                		beq.s	loc_13078
   23912/   13156 : 0C00 0040           		cmpi.b	#$40,d0
   23913/   1315A : 671E                		beq.s	loc_13066
   23914/   1315C : 0C00 0080           		cmpi.b	#$80,d0
   23915/   13160 : 6712                		beq.s	loc_13060
   23916/   13162 : D368 0010           		add.w	d1,$10(a0)
   23917/   13166 : 08E8 0005 0022      		bset	#5,$22(a0)
   23918/   1316C : 317C 0000 0014      		move.w	#0,$14(a0)
   23919/   13172 : 4E75                		rts	
   23920/   13174 :                     ; ===========================================================================
   23921/   13174 :                     
   23922/   13174 :                     loc_13060:
   23923/   13174 : 9368 0012           		sub.w	d1,$12(a0)
   23924/   13178 : 4E75                		rts	
   23925/   1317A :                     ; ===========================================================================
   23926/   1317A :                     
   23927/   1317A :                     loc_13066:
   23928/   1317A : 9368 0010           		sub.w	d1,$10(a0)
   23929/   1317E : 08E8 0005 0022      		bset	#5,$22(a0)
   23930/   13184 : 317C 0000 0014      		move.w	#0,$14(a0)
   23931/   1318A : 4E75                		rts	
   23932/   1318C :                     ; ===========================================================================
   23933/   1318C :                     
   23934/   1318C :                     loc_13078:
   23935/   1318C : D368 0012           		add.w	d1,$12(a0)
   23936/   13190 :                     
   23937/   13190 :                     locret_1307C:
   23938/   13190 : 4E75                		rts	
   23939/   13192 :                     ; End of function Sonic_Move
   23940/   13192 :                     
   23941/   13192 :                     
   23942/   13192 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23943/   13192 :                     
   23944/   13192 :                     
   23945/   13192 :                     Sonic_MoveLeft:				; XREF: Sonic_Move
   23946/   13192 : 3028 0014           		move.w	$14(a0),d0
   23947/   13196 : 6702                		beq.s	loc_13086
   23948/   13198 : 6A2C                		bpl.s	loc_130B2
   23949/   1319A :                     
   23950/   1319A :                     loc_13086:
   23951/   1319A : 08E8 0000 0022      		bset	#0,$22(a0)
   23952/   131A0 : 660C                		bne.s	loc_1309A
   23953/   131A2 : 08A8 0005 0022      		bclr	#5,$22(a0)
   23954/   131A8 : 117C 0001 001D      		move.b	#1,$1D(a0)
   23955/   131AE :                     
   23956/   131AE :                     loc_1309A:
   23957/   131AE : 9045                		sub.w	d5,d0
   23958/   131B0 : 3206                		move.w	d6,d1
   23959/   131B2 : 4441                		neg.w	d1
   23960/   131B4 : B041                		cmp.w	d1,d0
   23961/   131B6 : 6E02                		bgt.s	loc_130A6
   23962/   131B8 : 3001                		move.w	d1,d0
   23963/   131BA :                     
   23964/   131BA :                     loc_130A6:
   23965/   131BA : 3140 0014           		move.w	d0,$14(a0)
   23966/   131BE : 117C 0000 001C      		move.b	#0,$1C(a0)	; use walking animation
   23967/   131C4 : 4E75                		rts	
   23968/   131C6 :                     ; ===========================================================================
   23969/   131C6 :                     
   23970/   131C6 :                     loc_130B2:				; XREF: Sonic_MoveLeft
   23971/   131C6 : 9044                		sub.w	d4,d0
   23972/   131C8 : 6404                		bcc.s	loc_130BA
   23973/   131CA : 303C FF80           		move.w	#-$80,d0
   23974/   131CE :                     
   23975/   131CE :                     loc_130BA:
   23976/   131CE : 3140 0014           		move.w	d0,$14(a0)
   23977/   131D2 : 1028 0026           		move.b	$26(a0),d0
   23978/   131D6 : 0600 0020           		addi.b	#$20,d0
   23979/   131DA : 0200 00C0           		andi.b	#$C0,d0
   23980/   131DE : 661C                		bne.s	locret_130E8
   23981/   131E0 : 0C40 0400           		cmpi.w	#$400,d0
   23982/   131E4 : 6D16                		blt.s	locret_130E8
   23983/   131E6 : 117C 000D 001C      		move.b	#$D,$1C(a0)	; use "stopping" animation
   23984/   131EC : 08A8 0000 0022      		bclr	#0,$22(a0)
   23985/   131F2 : 303C 00A4           		move.w	#$A4,d0
   23986/   131F6 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play stopping sound
   23987/   131FC :                     
   23988/   131FC :                     locret_130E8:
   23989/   131FC : 4E75                		rts	
   23990/   131FE :                     ; End of function Sonic_MoveLeft
   23991/   131FE :                     
   23992/   131FE :                     
   23993/   131FE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23994/   131FE :                     
   23995/   131FE :                     
   23996/   131FE :                     Sonic_MoveRight:			; XREF: Sonic_Move
   23997/   131FE : 3028 0014           		move.w	$14(a0),d0
   23998/   13202 : 6B28                		bmi.s	loc_13118
   23999/   13204 : 08A8 0000 0022      		bclr	#0,$22(a0)
   24000/   1320A : 670C                		beq.s	loc_13104
   24001/   1320C : 08A8 0005 0022      		bclr	#5,$22(a0)
   24002/   13212 : 117C 0001 001D      		move.b	#1,$1D(a0)
   24003/   13218 :                     
   24004/   13218 :                     loc_13104:
   24005/   13218 : D045                		add.w	d5,d0
   24006/   1321A : B046                		cmp.w	d6,d0
   24007/   1321C : 6D02                		blt.s	loc_1310C
   24008/   1321E : 3006                		move.w	d6,d0
   24009/   13220 :                     
   24010/   13220 :                     loc_1310C:
   24011/   13220 : 3140 0014           		move.w	d0,$14(a0)
   24012/   13224 : 117C 0000 001C      		move.b	#0,$1C(a0)	; use walking animation
   24013/   1322A : 4E75                		rts	
   24014/   1322C :                     ; ===========================================================================
   24015/   1322C :                     
   24016/   1322C :                     loc_13118:				; XREF: Sonic_MoveRight
   24017/   1322C : D044                		add.w	d4,d0
   24018/   1322E : 6404                		bcc.s	loc_13120
   24019/   13230 : 303C 0080           		move.w	#$80,d0
   24020/   13234 :                     
   24021/   13234 :                     loc_13120:
   24022/   13234 : 3140 0014           		move.w	d0,$14(a0)
   24023/   13238 : 1028 0026           		move.b	$26(a0),d0
   24024/   1323C : 0600 0020           		addi.b	#$20,d0
   24025/   13240 : 0200 00C0           		andi.b	#$C0,d0
   24026/   13244 : 661C                		bne.s	locret_1314E
   24027/   13246 : 0C40 FC00           		cmpi.w	#-$400,d0
   24028/   1324A : 6E16                		bgt.s	locret_1314E
   24029/   1324C : 117C 000D 001C      		move.b	#$D,$1C(a0)	; use "stopping" animation
   24030/   13252 : 08E8 0000 0022      		bset	#0,$22(a0)
   24031/   13258 : 303C 00A4           		move.w	#$A4,d0
   24032/   1325C : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play stopping sound
   24033/   13262 :                     
   24034/   13262 :                     locret_1314E:
   24035/   13262 : 4E75                		rts	
   24036/   13264 :                     ; End of function Sonic_MoveRight
   24037/   13264 :                     
   24038/   13264 :                     ; ---------------------------------------------------------------------------
   24039/   13264 :                     ; Subroutine to	change Sonic"s speed as he rolls
   24040/   13264 :                     ; ---------------------------------------------------------------------------
   24041/   13264 :                     
   24042/   13264 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24043/   13264 :                     
   24044/   13264 :                     
   24045/   13264 :                     Sonic_RollSpeed:			; XREF: Obj01_MdRoll
   24046/   13264 : 3C38 F760           		move.w	($FFFFF760).w,d6
   24047/   13268 : E346                		asl.w	#1,d6
   24048/   1326A : 3A38 F762           		move.w	($FFFFF762).w,d5
   24049/   1326E : E245                		asr.w	#1,d5
   24050/   13270 : 3838 F764           		move.w	($FFFFF764).w,d4
   24051/   13274 : E444                		asr.w	#2,d4
   24052/   13276 : 4A38 F7CA           		tst.b	($FFFFF7CA).w
   24053/   1327A : 6600 0064           		bne.w	loc_131CC
   24054/   1327E : 4A68 003E           		tst.w	$3E(a0)
   24055/   13282 : 6618                		bne.s	loc_13188
   24056/   13284 : 0838 0002 F602      		btst	#2,($FFFFF602).w ; is left being pressed?
   24057/   1328A : 6704                		beq.s	loc_1317C	; if not, branch
   24058/   1328C : 6100 0088           		bsr.w	Sonic_RollLeft
   24059/   13290 :                     
   24060/   13290 :                     loc_1317C:
   24061/   13290 : 0838 0003 F602      		btst	#3,($FFFFF602).w ; is right being pressed?
   24062/   13296 : 6704                		beq.s	loc_13188	; if not, branch
   24063/   13298 : 6100 00A0           		bsr.w	Sonic_RollRight
   24064/   1329C :                     
   24065/   1329C :                     loc_13188:
   24066/   1329C : 3028 0014           		move.w	$14(a0),d0
   24067/   132A0 : 671C                		beq.s	loc_131AA
   24068/   132A2 : 6B0E                		bmi.s	loc_1319E
   24069/   132A4 : 9045                		sub.w	d5,d0
   24070/   132A6 : 6404                		bcc.s	loc_13198
   24071/   132A8 : 303C 0000           		move.w	#0,d0
   24072/   132AC :                     
   24073/   132AC :                     loc_13198:
   24074/   132AC : 3140 0014           		move.w	d0,$14(a0)
   24075/   132B0 : 600C                		bra.s	loc_131AA
   24076/   132B2 :                     ; ===========================================================================
   24077/   132B2 :                     
   24078/   132B2 :                     loc_1319E:				; XREF: Sonic_RollSpeed
   24079/   132B2 : D045                		add.w	d5,d0
   24080/   132B4 : 6404                		bcc.s	loc_131A6
   24081/   132B6 : 303C 0000           		move.w	#0,d0
   24082/   132BA :                     
   24083/   132BA :                     loc_131A6:
   24084/   132BA : 3140 0014           		move.w	d0,$14(a0)
   24085/   132BE :                     
   24086/   132BE :                     loc_131AA:
   24087/   132BE : 4A68 0014           		tst.w	$14(a0)		; is Sonic moving?
   24088/   132C2 : 661C                		bne.s	loc_131CC	; if yes, branch
   24089/   132C4 : 08A8 0002 0022      		bclr	#2,$22(a0)
   24090/   132CA : 117C 0013 0016      		move.b	#$13,$16(a0)
   24091/   132D0 : 117C 0009 0017      		move.b	#9,$17(a0)
   24092/   132D6 : 117C 0005 001C      		move.b	#5,$1C(a0)	; use "standing" animation
   24093/   132DC : 5B68 000C           		subq.w	#5,$C(a0)
   24094/   132E0 :                     
   24095/   132E0 :                     loc_131CC:
   24096/   132E0 : 1028 0026           		move.b	$26(a0),d0
   24097/   132E4 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   24098/   132EA : C1E8 0014           		muls.w	$14(a0),d0
   24099/   132EE : E080                		asr.l	#8,d0
   24100/   132F0 : 3140 0012           		move.w	d0,$12(a0)
   24101/   132F4 : C3E8 0014           		muls.w	$14(a0),d1
   24102/   132F8 : E081                		asr.l	#8,d1
   24103/   132FA : 0C41 1000           		cmpi.w	#$1000,d1
   24104/   132FE : 6F04                		ble.s	loc_131F0
   24105/   13300 : 323C 1000           		move.w	#$1000,d1
   24106/   13304 :                     
   24107/   13304 :                     loc_131F0:
   24108/   13304 : 0C41 F000           		cmpi.w	#-$1000,d1
   24109/   13308 : 6C04                		bge.s	loc_131FA
   24110/   1330A : 323C F000           		move.w	#-$1000,d1
   24111/   1330E :                     
   24112/   1330E :                     loc_131FA:
   24113/   1330E : 3141 0010           		move.w	d1,$10(a0)
   24114/   13312 : 6000 FE0C           		bra.w	loc_1300C
   24115/   13316 :                     ; End of function Sonic_RollSpeed
   24116/   13316 :                     
   24117/   13316 :                     
   24118/   13316 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24119/   13316 :                     
   24120/   13316 :                     
   24121/   13316 :                     Sonic_RollLeft:				; XREF: Sonic_RollSpeed
   24122/   13316 : 3028 0014           		move.w	$14(a0),d0
   24123/   1331A : 6702                		beq.s	loc_1320A
   24124/   1331C : 6A0E                		bpl.s	loc_13218
   24125/   1331E :                     
   24126/   1331E :                     loc_1320A:
   24127/   1331E : 08E8 0000 0022      		bset	#0,$22(a0)
   24128/   13324 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "rolling"	animation
   24129/   1332A : 4E75                		rts	
   24130/   1332C :                     ; ===========================================================================
   24131/   1332C :                     
   24132/   1332C :                     loc_13218:
   24133/   1332C : 9044                		sub.w	d4,d0
   24134/   1332E : 6404                		bcc.s	loc_13220
   24135/   13330 : 303C FF80           		move.w	#-$80,d0
   24136/   13334 :                     
   24137/   13334 :                     loc_13220:
   24138/   13334 : 3140 0014           		move.w	d0,$14(a0)
   24139/   13338 : 4E75                		rts	
   24140/   1333A :                     ; End of function Sonic_RollLeft
   24141/   1333A :                     
   24142/   1333A :                     
   24143/   1333A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24144/   1333A :                     
   24145/   1333A :                     
   24146/   1333A :                     Sonic_RollRight:			; XREF: Sonic_RollSpeed
   24147/   1333A : 3028 0014           		move.w	$14(a0),d0
   24148/   1333E : 6B0E                		bmi.s	loc_1323A
   24149/   13340 : 08A8 0000 0022      		bclr	#0,$22(a0)
   24150/   13346 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "rolling"	animation
   24151/   1334C : 4E75                		rts	
   24152/   1334E :                     ; ===========================================================================
   24153/   1334E :                     
   24154/   1334E :                     loc_1323A:
   24155/   1334E : D044                		add.w	d4,d0
   24156/   13350 : 6404                		bcc.s	loc_13242
   24157/   13352 : 303C 0080           		move.w	#$80,d0
   24158/   13356 :                     
   24159/   13356 :                     loc_13242:
   24160/   13356 : 3140 0014           		move.w	d0,$14(a0)
   24161/   1335A : 4E75                		rts	
   24162/   1335C :                     ; End of function Sonic_RollRight
   24163/   1335C :                     
   24164/   1335C :                     ; ---------------------------------------------------------------------------
   24165/   1335C :                     ; Subroutine to	change Sonic"s direction while jumping
   24166/   1335C :                     ; ---------------------------------------------------------------------------
   24167/   1335C :                     
   24168/   1335C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24169/   1335C :                     
   24170/   1335C :                     
   24171/   1335C :                     Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
   24172/   1335C : 3C38 F760           		move.w	($FFFFF760).w,d6
   24173/   13360 : 3A38 F762           		move.w	($FFFFF762).w,d5
   24174/   13364 : E345                		asl.w	#1,d5
   24175/   13366 : 0828 0004 0022      		btst	#4,$22(a0)
   24176/   1336C : 6638                		bne.s	Obj01_ResetScr2
   24177/   1336E : 3028 0010           		move.w	$10(a0),d0
   24178/   13372 : 0838 0002 F602      		btst	#2,($FFFFF602).w ; is left being pressed?
   24179/   13378 : 6712                		beq.s	loc_13278	; if not, branch
   24180/   1337A : 08E8 0000 0022      		bset	#0,$22(a0)
   24181/   13380 : 9045                		sub.w	d5,d0
   24182/   13382 : 3206                		move.w	d6,d1
   24183/   13384 : 4441                		neg.w	d1
   24184/   13386 : B041                		cmp.w	d1,d0
   24185/   13388 : 6E02                		bgt.s	loc_13278
   24186/   1338A : 3001                		move.w	d1,d0
   24187/   1338C :                     
   24188/   1338C :                     loc_13278:
   24189/   1338C : 0838 0003 F602      		btst	#3,($FFFFF602).w ; is right being pressed?
   24190/   13392 : 670E                		beq.s	Obj01_JumpMove	; if not, branch
   24191/   13394 : 08A8 0000 0022      		bclr	#0,$22(a0)
   24192/   1339A : D045                		add.w	d5,d0
   24193/   1339C : B046                		cmp.w	d6,d0
   24194/   1339E : 6D02                		blt.s	Obj01_JumpMove
   24195/   133A0 : 3006                		move.w	d6,d0
   24196/   133A2 :                     
   24197/   133A2 :                     Obj01_JumpMove:
   24198/   133A2 : 3140 0010           		move.w	d0,$10(a0)	; change Sonic"s horizontal speed
   24199/   133A6 :                     
   24200/   133A6 :                     Obj01_ResetScr2:
   24201/   133A6 : 0C78 0060 F73E      		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
   24202/   133AC : 670A                		beq.s	loc_132A4	; if yes, branch
   24203/   133AE : 6404                		bcc.s	loc_132A0
   24204/   133B0 : 5878 F73E           		addq.w	#4,($FFFFF73E).w
   24205/   133B4 :                     
   24206/   133B4 :                     loc_132A0:
   24207/   133B4 : 5578 F73E           		subq.w	#2,($FFFFF73E).w
   24208/   133B8 :                     
   24209/   133B8 :                     loc_132A4:
   24210/   133B8 : 0C68 FC00 0012      		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
   24211/   133BE : 6526                		bcs.s	locret_132D2	; if yes, branch
   24212/   133C0 : 3028 0010           		move.w	$10(a0),d0
   24213/   133C4 : 3200                		move.w	d0,d1
   24214/   133C6 : EA41                		asr.w	#5,d1
   24215/   133C8 : 671C                		beq.s	locret_132D2
   24216/   133CA : 6B0E                		bmi.s	loc_132C6
   24217/   133CC : 9041                		sub.w	d1,d0
   24218/   133CE : 6404                		bcc.s	loc_132C0
   24219/   133D0 : 303C 0000           		move.w	#0,d0
   24220/   133D4 :                     
   24221/   133D4 :                     loc_132C0:
   24222/   133D4 : 3140 0010           		move.w	d0,$10(a0)
   24223/   133D8 : 4E75                		rts	
   24224/   133DA :                     ; ===========================================================================
   24225/   133DA :                     
   24226/   133DA :                     loc_132C6:
   24227/   133DA : 9041                		sub.w	d1,d0
   24228/   133DC : 6504                		bcs.s	loc_132CE
   24229/   133DE : 303C 0000           		move.w	#0,d0
   24230/   133E2 :                     
   24231/   133E2 :                     loc_132CE:
   24232/   133E2 : 3140 0010           		move.w	d0,$10(a0)
   24233/   133E6 :                     
   24234/   133E6 :                     locret_132D2:
   24235/   133E6 : 4E75                		rts	
   24236/   133E8 :                     ; End of function Sonic_ChgJumpDir
   24237/   133E8 :                     
   24238/   133E8 :                     ; ===========================================================================
   24239/   133E8 :                     ; ---------------------------------------------------------------------------
   24240/   133E8 :                     ; Unused subroutine to squash Sonic
   24241/   133E8 :                     ; ---------------------------------------------------------------------------
   24242/   133E8 : 1028 0026           		move.b	$26(a0),d0
   24243/   133EC : 0600 0020           		addi.b	#$20,d0
   24244/   133F0 : 0200 00C0           		andi.b	#$C0,d0
   24245/   133F4 : 6620                		bne.s	locret_13302
   24246/   133F6 : 6100 1D8C           		bsr.w	Sonic_DontRunOnWalls
   24247/   133FA : 4A41                		tst.w	d1
   24248/   133FC : 6A18                		bpl.s	locret_13302
   24249/   133FE : 317C 0000 0014      		move.w	#0,$14(a0)	; stop Sonic moving
   24250/   13404 : 317C 0000 0010      		move.w	#0,$10(a0)
   24251/   1340A : 317C 0000 0012      		move.w	#0,$12(a0)
   24252/   13410 : 117C 000B 001C      		move.b	#$B,$1C(a0)	; use "warping"	animation
   24253/   13416 :                     
   24254/   13416 :                     locret_13302:
   24255/   13416 : 4E75                		rts	
   24256/   13418 :                     ; ---------------------------------------------------------------------------
   24257/   13418 :                     ; Subroutine to	pralign 2t	Sonic leaving the boundaries of	a level
   24258/   13418 :                     ; ---------------------------------------------------------------------------
   24259/   13418 :                     
   24260/   13418 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24261/   13418 :                     
   24262/   13418 :                     
   24263/   13418 :                     Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
   24264/   13418 : 2228 0008           		move.l	8(a0),d1
   24265/   1341C : 3028 0010           		move.w	$10(a0),d0
   24266/   13420 : 48C0                		ext.l	d0
   24267/   13422 : E180                		asl.l	#8,d0
   24268/   13424 : D280                		add.l	d0,d1
   24269/   13426 : 4841                		swap	d1
   24270/   13428 : 3038 F728           		move.w	($FFFFF728).w,d0
   24271/   1342C : 0640 0010           		addi.w	#$10,d0
   24272/   13430 : B041                		cmp.w	d1,d0		; has Sonic touched the	side boundary?
   24273/   13432 : 6258                		bhi.s	Boundary_Sides	; if yes, branch
   24274/   13434 : 3038 F72A           		move.w	($FFFFF72A).w,d0
   24275/   13438 : 0640 0128           		addi.w	#$128,d0
   24276/   1343C : 4A38 F7AA           		tst.b	($FFFFF7AA).w
   24277/   13440 : 6604                		bne.s	loc_13332
   24278/   13442 : 0640 0040           		addi.w	#$40,d0
   24279/   13446 :                     
   24280/   13446 :                     loc_13332:
   24281/   13446 : B041                		cmp.w	d1,d0		; has Sonic touched the	side boundary?
   24282/   13448 : 6342                		bls.s	Boundary_Sides	; if yes, branch
   24283/   1344A :                     
   24284/   1344A :                     loc_13336:
   24285/   1344A : 3038 F72E           		move.w	($FFFFF72E).w,d0
   24286/   1344E : 0640 00E0           		addi.w	#$E0,d0
   24287/   13452 : B068 000C           		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
   24288/   13456 : 6D02                		blt.s	Boundary_Bottom	; if yes, branch
   24289/   13458 : 4E75                		rts	
   24290/   1345A :                     ; ===========================================================================
   24291/   1345A :                     
   24292/   1345A :                     Boundary_Bottom:
   24293/   1345A : 3038 F726           		move.w	($FFFFF726).w,d0
   24294/   1345E : 3238 F72E           		move.w	($FFFFF72E).w,d1
   24295/   13462 : B240                		cmp.w	d0,d1			; screen still scrolling down?
   24296/   13464 : 6D24                		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
   24297/   13466 : 0C78 0501 FE10      		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
   24298/   1346C : 6600 7EC4           		bne.w	KillSonic		; if not, kill Sonic
   24299/   13470 : 0C78 2000 D008      		cmpi.w	#$2000,($FFFFD008).w
   24300/   13476 : 6500 7EBA           		bcs.w	KillSonic
   24301/   1347A : 4238 FE30           		clr.b	($FFFFFE30).w		; clear lamppost counter
   24302/   1347E : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w	; restart the level
   24303/   13484 : 31FC 0103 FE10      		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
   24304/   1348A :                     
   24305/   1348A :                     Boundary_Bottom_locret:
   24306/   1348A : 4E75                		rts	
   24307/   1348C :                     ; ===========================================================================
   24308/   1348C :                     
   24309/   1348C :                     Boundary_Sides:
   24310/   1348C : 3140 0008           		move.w	d0,8(a0)
   24311/   13490 : 317C 0000 000A      		move.w	#0,$A(a0)
   24312/   13496 : 317C 0000 0010      		move.w	#0,$10(a0)	; stop Sonic moving
   24313/   1349C : 317C 0000 0014      		move.w	#0,$14(a0)
   24314/   134A2 : 60A6                		bra.s	loc_13336
   24315/   134A4 :                     ; End of function Sonic_LevelBound
   24316/   134A4 :                     
   24317/   134A4 :                     ; ---------------------------------------------------------------------------
   24318/   134A4 :                     ; Subroutine allowing Sonic to roll when he"s moving
   24319/   134A4 :                     ; ---------------------------------------------------------------------------
   24320/   134A4 :                     
   24321/   134A4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24322/   134A4 :                     
   24323/   134A4 :                     
   24324/   134A4 :                     Sonic_Roll:				; XREF: Obj01_MdNormal
   24325/   134A4 : 4A38 F7CA           		tst.b	($FFFFF7CA).w
   24326/   134A8 : 6620                		bne.s	Obj01_NoRoll
   24327/   134AA : 3028 0014           		move.w	$14(a0),d0
   24328/   134AE : 6A02                		bpl.s	loc_13392
   24329/   134B0 : 4440                		neg.w	d0
   24330/   134B2 :                     
   24331/   134B2 :                     loc_13392:
   24332/   134B2 : 0C40 0080           		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
   24333/   134B6 : 6512                		bcs.s	Obj01_NoRoll	; if not, branch
   24334/   134B8 : 1038 F602           		move.b	($FFFFF602).w,d0
   24335/   134BC : 0200 000C           		andi.b	#$C,d0		; is left/right	being pressed?
   24336/   134C0 : 6608                		bne.s	Obj01_NoRoll	; if yes, branch
   24337/   134C2 : 0838 0001 F602      		btst	#1,($FFFFF602).w ; is down being pressed?
   24338/   134C8 : 6602                		bne.s	Obj01_ChkRoll	; if yes, branch
   24339/   134CA :                     
   24340/   134CA :                     Obj01_NoRoll:
   24341/   134CA : 4E75                		rts	
   24342/   134CC :                     ; ===========================================================================
   24343/   134CC :                     
   24344/   134CC :                     Obj01_ChkRoll:
   24345/   134CC : 0828 0002 0022      		btst	#2,$22(a0)	; is Sonic already rolling?
   24346/   134D2 : 6702                		beq.s	Obj01_DoRoll	; if not, branch
   24347/   134D4 : 4E75                		rts	
   24348/   134D6 :                     ; ===========================================================================
   24349/   134D6 :                     
   24350/   134D6 :                     Obj01_DoRoll:
   24351/   134D6 : 08E8 0002 0022      		bset	#2,$22(a0)
   24352/   134DC : 117C 000E 0016      		move.b	#$E,$16(a0)
   24353/   134E2 : 117C 0007 0017      		move.b	#7,$17(a0)
   24354/   134E8 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "rolling"	animation
   24355/   134EE : 5A68 000C           		addq.w	#5,$C(a0)
   24356/   134F2 : 303C 00BE           		move.w	#$BE,d0
   24357/   134F6 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play rolling sound
   24358/   134FC : 4A68 0014           		tst.w	$14(a0)
   24359/   13500 : 6606                		bne.s	locret_133E8
   24360/   13502 : 317C 0200 0014      		move.w	#$200,$14(a0)
   24361/   13508 :                     
   24362/   13508 :                     locret_133E8:
   24363/   13508 : 4E75                		rts	
   24364/   1350A :                     ; End of function Sonic_Roll
   24365/   1350A :                     
   24366/   1350A :                     ; ---------------------------------------------------------------------------
   24367/   1350A :                     ; Subroutine allowing Sonic to jump
   24368/   1350A :                     ; ---------------------------------------------------------------------------
   24369/   1350A :                     
   24370/   1350A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24371/   1350A :                     
   24372/   1350A :                     
   24373/   1350A :                     Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
   24374/   1350A : 1038 F603           		move.b	($FFFFF603).w,d0
   24375/   1350E : 0200 0070           		andi.b	#$70,d0		; is A,	B or C pressed?
   24376/   13512 : 6700 00A8           		beq.w	locret_1348E	; if not, branch
   24377/   13516 : 7000                		moveq	#0,d0
   24378/   13518 : 1028 0026           		move.b	$26(a0),d0
   24379/   1351C : 0600 0080           		addi.b	#$80,d0
   24380/   13520 : 6100 1AA2           		bsr.w	sub_14D48
   24381/   13524 : 0C41 0006           		cmpi.w	#6,d1
   24382/   13528 : 6D00 0092           		blt.w	locret_1348E
   24383/   1352C : 343C 0680           		move.w	#$680,d2
   24384/   13530 : 0828 0006 0022      		btst	#6,$22(a0)
   24385/   13536 : 6704                		beq.s	loc_1341C
   24386/   13538 : 343C 0380           		move.w	#$380,d2
   24387/   1353C :                     
   24388/   1353C :                     loc_1341C:
   24389/   1353C : 7000                		moveq	#0,d0
   24390/   1353E : 1028 0026           		move.b	$26(a0),d0
   24391/   13542 : 0400 0040           		subi.b	#$40,d0
   24392/   13546 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   24393/   1354C : C3C2                		muls.w	d2,d1
   24394/   1354E : E081                		asr.l	#8,d1
   24395/   13550 : D368 0010           		add.w	d1,$10(a0)	; make Sonic jump
   24396/   13554 : C1C2                		muls.w	d2,d0
   24397/   13556 : E080                		asr.l	#8,d0
   24398/   13558 : D168 0012           		add.w	d0,$12(a0)	; make Sonic jump
   24399/   1355C : 08E8 0001 0022      		bset	#1,$22(a0)
   24400/   13562 : 08A8 0005 0022      		bclr	#5,$22(a0)
   24401/   13568 : 588F                		addq.l	#4,sp
   24402/   1356A : 117C 0001 003C      		move.b	#1,$3C(a0)
   24403/   13570 : 4228 0038           		clr.b	$38(a0)
   24404/   13574 : 303C 00A0           		move.w	#$A0,d0
   24405/   13578 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play jumping sound
   24406/   1357E : 117C 0013 0016      		move.b	#$13,$16(a0)
   24407/   13584 : 117C 0009 0017      		move.b	#9,$17(a0)
   24408/   1358A : 0828 0002 0022      		btst	#2,$22(a0)
   24409/   13590 : 662C                		bne.s	loc_13490
   24410/   13592 : 117C 000E 0016      		move.b	#$E,$16(a0)
   24411/   13598 : 117C 0007 0017      		move.b	#7,$17(a0)
   24412/   1359E :                     Result_Check:
   24413/   1359E : 4A38 FF90                   tst.b   ($FFFFFF90).w ; Has the victory animation flag been set?
   24414/   135A2 : 6708                        beq.s   NormalJump ; If not, branch
   24415/   135A4 : 117C 0013 001C              move.b  #$13,$1C(a0) ; Play the victory animation
   24416/   135AA : 6006                        bra.s   cont ; Continue
   24417/   135AC :                     NormalJump:
   24418/   135AC : 117C 0002 001C              move.b  #2,$1C(a0)    ; use "jumping"    animation
   24419/   135B2 :                     cont:
   24420/   135B2 : 08E8 0002 0022      		bset	#2,$22(a0)
   24421/   135B8 : 5A68 000C           		addq.w	#5,$C(a0)
   24422/   135BC :                     
   24423/   135BC :                     locret_1348E:
   24424/   135BC : 4E75                		rts	
   24425/   135BE :                     ; ===========================================================================
   24426/   135BE :                     
   24427/   135BE :                     loc_13490:
   24428/   135BE : 08E8 0004 0022      		bset	#4,$22(a0)
   24429/   135C4 : 4E75                		rts	
   24430/   135C6 :                     ; End of function Sonic_Jump
   24431/   135C6 :                     
   24432/   135C6 :                     
   24433/   135C6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24434/   135C6 :                     
   24435/   135C6 :                     
   24436/   135C6 :                     Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
   24437/   135C6 : 4A28 003C           		tst.b	$3C(a0)
   24438/   135CA : 6726                		beq.s	loc_134C4
   24439/   135CC : 323C FC00           		move.w	#-$400,d1
   24440/   135D0 : 0828 0006 0022      		btst	#6,$22(a0)
   24441/   135D6 : 6704                		beq.s	loc_134AE
   24442/   135D8 : 323C FE00           		move.w	#-$200,d1
   24443/   135DC :                     
   24444/   135DC :                     loc_134AE:
   24445/   135DC : B268 0012           		cmp.w	$12(a0),d1
   24446/   135E0 : 6F0E                		ble.s	locret_134C2
   24447/   135E2 : 1038 F602           		move.b	($FFFFF602).w,d0
   24448/   135E6 : 0200 0070           		andi.b	#$70,d0		; is A,	B or C pressed?
   24449/   135EA : 6604                		bne.s	locret_134C2	; if yes, branch
   24450/   135EC : 3141 0012           		move.w	d1,$12(a0)
   24451/   135F0 :                     
   24452/   135F0 :                     locret_134C2:
   24453/   135F0 : 4E75                		rts	
   24454/   135F2 :                     ; ===========================================================================
   24455/   135F2 :                     
   24456/   135F2 :                     loc_134C4:
   24457/   135F2 : 0C68 F040 0012      		cmpi.w	#-$FC0,$12(a0)
   24458/   135F8 : 6C06                		bge.s	locret_134D2
   24459/   135FA : 317C F040 0012      		move.w	#-$FC0,$12(a0)
   24460/   13600 :                     
   24461/   13600 :                     locret_134D2:
   24462/   13600 : 4E75                		rts	
   24463/   13602 :                     ; End of function 
   24464/   13602 :                     ; ---------------------------------------------------------------------------
   24465/   13602 :                     ; Subroutine to make Sonic perform a spindash
   24466/   13602 :                     ; ---------------------------------------------------------------------------
   24467/   13602 :                     
   24468/   13602 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24469/   13602 :                     
   24470/   13602 :                     
   24471/   13602 :                     Sonic_SpinDash:
   24472/   13602 : 4A28 0039           		tst.b	$39(a0)
   24473/   13606 : 664A                		bne.s	loc_1AC8E
   24474/   13608 : 0C28 0008 001C      		cmpi.b	#8,$1C(a0)
   24475/   1360E : 6640                		bne.s	locret_1AC8C
   24476/   13610 : 1038 F603           		move.b	($FFFFF603).w,d0
   24477/   13614 : 0200 0070           		andi.b	#$70,d0
   24478/   13618 : 6700 0036           		beq.w	locret_1AC8C
   24479/   1361C : 117C 001F 001C      	move.b	#$1F,$1C(a0)	; changed from #9
   24480/   13622 : 303C 00BE           		move.w	#$BE,d0	
   24481/   13626 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l
   24482/   1362C : 588F                		addq.l	#4,sp
   24483/   1362E : 117C 0001 0039      		move.b	#1,$39(a0)
   24484/   13634 : 317C 0000 003A      		move.w	#0,$3A(a0)
   24485/   1363A : 0C28 000C 0028      		cmpi.b	#$C,$28(a0)
   24486/   13640 : 6506                		bcs.s	loc_1AC84
   24487/   13642 : 11FC 0002 D11C      		move.b	#2,($FFFFD11C).w
   24488/   13648 :                     
   24489/   13648 :                     loc_1AC84:
   24490/   13648 : 6100 FDCE           		bsr.w	Sonic_LevelBound
   24491/   1364C : 6100 121C           		bsr.w	Sonic_AnglePos
   24492/   13650 :                     
   24493/   13650 :                     locret_1AC8C:
   24494/   13650 : 4E75                		rts	
   24495/   13652 :                     ; ---------------------------------------------------------------------------
   24496/   13652 :                     
   24497/   13652 :                     loc_1AC8E:
   24498/   13652 : 1038 F602           		move.b	($FFFFF602).w,d0
   24499/   13656 : 0800 0001           		btst	#1,d0
   24500/   1365A : 6600 007A           		bne.w	loc_1AD30
   24501/   1365E : 117C 000E 0016      		move.b	#$E,$16(a0)
   24502/   13664 : 117C 0007 0017      		move.b	#7,$17(a0)
   24503/   1366A : 117C 0002 001C      		move.b	#2,$1C(a0)
   24504/   13670 : 5A68 000C           		addq.w	#5,$C(a0)
   24505/   13674 : 117C 0000 0039      		move.b	#0,$39(a0)
   24506/   1367A : 7000                		moveq	#0,d0
   24507/   1367C : 1028 003A           		move.b	$3A(a0),d0
   24508/   13680 : D040                		add.w	d0,d0
   24509/   13682 : 317B 0040 0014      		move.w	Dash_Speeds(pc,d0.w),$14(a0)
   24510/   13688 : 3028 0014           		move.w	$14(a0),d0
   24511/   1368C : 0440 0800           		subi.w	#$800,d0
   24512/   13690 : D040                		add.w	d0,d0
   24513/   13692 : 0240 1F00           		andi.w	#$1F00,d0
   24514/   13696 : 4440                		neg.w	d0
   24515/   13698 : 0640 2000           		addi.w	#$2000,d0
   24516/   1369C : 31C0 EED0           		move.w	d0,($FFFFEED0).w
   24517/   136A0 : 0828 0000 0022      		btst	#0,$22(a0)
   24518/   136A6 : 6704                		beq.s	loc_1ACF4
   24519/   136A8 : 4468 0014           		neg.w	$14(a0)
   24520/   136AC :                     
   24521/   136AC :                     loc_1ACF4:
   24522/   136AC : 08E8 0002 0022      		bset	#2,$22(a0)
   24523/   136B2 : 11FC 0000 D11C      		move.b	#0,($FFFFD11C).w
   24524/   136B8 : 303C 00BC           		move.w	#$BC,d0
   24525/   136BC : 4EB9 0000 139C      		jsr	(PlaySound_Special).l
   24526/   136C2 : 605A                		bra.s	loc_1AD78
   24527/   136C4 :                     ; ===========================================================================
   24528/   136C4 : 0800                Dash_Speeds:	dc.w  $800		; 0
   24529/   136C6 : 0880                		dc.w  $880		; 1
   24530/   136C8 : 0900                		dc.w  $900		; 2
   24531/   136CA : 0980                		dc.w  $980		; 3
   24532/   136CC : 0A00                		dc.w  $A00		; 4
   24533/   136CE : 0A80                		dc.w  $A80		; 5
   24534/   136D0 : 0B00                		dc.w  $B00		; 6
   24535/   136D2 : 0B80                		dc.w  $B80		; 7
   24536/   136D4 : 0C00                		dc.w  $C00		; 8
   24537/   136D6 :                     ; ===========================================================================
   24538/   136D6 :                     
   24539/   136D6 :                     loc_1AD30:				; If still charging the dash...
   24540/   136D6 : 4A68 003A           		tst.w	$3A(a0)
   24541/   136DA : 6712                		beq.s	loc_1AD48
   24542/   136DC : 3028 003A           		move.w	$3A(a0),d0
   24543/   136E0 : EA48                		lsr.w	#5,d0
   24544/   136E2 : 9168 003A           		sub.w	d0,$3A(a0)
   24545/   136E6 : 6406                		bcc.s	loc_1AD48
   24546/   136E8 : 317C 0000 003A      		move.w	#0,$3A(a0)
   24547/   136EE :                     
   24548/   136EE :                     loc_1AD48:
   24549/   136EE : 1038 F603           		move.b	($FFFFF603).w,d0
   24550/   136F2 : 0200 0070           		andi.b	#$70,d0	; 'p'
   24551/   136F6 : 6700 0026           		beq.w	loc_1AD78
   24552/   136FA : 317C 1F00 001C      		move.w	#$1F00,$1C(a0)
   24553/   13700 : 303C 00BE           		move.w	#$BE,d0		; changed from #$E0
   24554/   13704 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l
   24555/   1370A : 0668 0200 003A      		addi.w	#$200,$3A(a0)
   24556/   13710 : 0C68 0800 003A      		cmpi.w	#$800,$3A(a0)
   24557/   13716 : 6506                		bcs.s	loc_1AD78
   24558/   13718 : 317C 0800 003A      		move.w	#$800,$3A(a0)
   24559/   1371E :                     
   24560/   1371E :                     loc_1AD78:
   24561/   1371E : 588F                		addq.l	#4,sp
   24562/   13720 : 0C78 0060 EED8      		cmpi.w	#$60,($FFFFEED8).w
   24563/   13726 : 670A                		beq.s	loc_1AD8C
   24564/   13728 : 6404                		bcc.s	loc_1AD88
   24565/   1372A : 5878 EED8           		addq.w	#4,($FFFFEED8).w
   24566/   1372E :                     
   24567/   1372E :                     loc_1AD88:
   24568/   1372E : 5578 EED8           		subq.w	#2,($FFFFEED8).w
   24569/   13732 :                     
   24570/   13732 :                     loc_1AD8C:
   24571/   13732 : 6100 FCE4           		bsr.w	Sonic_LevelBound
   24572/   13736 : 6100 1132           		bsr.w	Sonic_AnglePos
   24573/   1373A : 31FC 0060 F73E      		move.w	#$60,($FFFFF73E).w	; reset looking up/down
   24574/   13740 : 4E75                		rts
   24575/   13742 :                     ; End of subroutine Sonic_SpinDash
   24576/   13742 :                     
   24577/   13742 :                     ; ---------------------------------------------------------------------------
   24578/   13742 :                     ; Subroutine to	slow Sonic walking up a	slope
   24579/   13742 :                     ; ---------------------------------------------------------------------------
   24580/   13742 :                     
   24581/   13742 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24582/   13742 :                     
   24583/   13742 :                     
   24584/   13742 :                     Sonic_SlopeResist:			; XREF: Obj01_MdNormal
   24585/   13742 : 1028 0026           		move.b	$26(a0),d0
   24586/   13746 : 0600 0060           		addi.b	#$60,d0
   24587/   1374A : 0C00 00C0           		cmpi.b	#$C0,d0
   24588/   1374E : 6426                		bcc.s	locret_13508
   24589/   13750 : 1028 0026           		move.b	$26(a0),d0
   24590/   13754 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   24591/   1375A : C1FC 0020           		muls.w	#$20,d0
   24592/   1375E : E080                		asr.l	#8,d0
   24593/   13760 : 4A68 0014           		tst.w	$14(a0)
   24594/   13764 : 6710                		beq.s	locret_13508
   24595/   13766 : 6B0A                		bmi.s	loc_13504
   24596/   13768 : 4A40                		tst.w	d0
   24597/   1376A : 6704                		beq.s	locret_13502
   24598/   1376C : D168 0014           		add.w	d0,$14(a0)	; change Sonic"s inertia
   24599/   13770 :                     
   24600/   13770 :                     locret_13502:
   24601/   13770 : 4E75                		rts	
   24602/   13772 :                     ; ===========================================================================
   24603/   13772 :                     
   24604/   13772 :                     loc_13504:
   24605/   13772 : D168 0014           		add.w	d0,$14(a0)
   24606/   13776 :                     
   24607/   13776 :                     locret_13508:
   24608/   13776 : 4E75                		rts	
   24609/   13778 :                     ; End of function Sonic_SlopeResist
   24610/   13778 :                     
   24611/   13778 :                     ; ---------------------------------------------------------------------------
   24612/   13778 :                     ; Subroutine to	push Sonic down	a slope	while he"s rolling
   24613/   13778 :                     ; ---------------------------------------------------------------------------
   24614/   13778 :                     
   24615/   13778 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24616/   13778 :                     
   24617/   13778 :                     
   24618/   13778 :                     Sonic_RollRepel:			; XREF: Obj01_MdRoll
   24619/   13778 : 1028 0026           		move.b	$26(a0),d0
   24620/   1377C : 0600 0060           		addi.b	#$60,d0
   24621/   13780 : 0C00 00C0           		cmpi.b	#-$40,d0
   24622/   13784 : 642C                		bcc.s	locret_13544
   24623/   13786 : 1028 0026           		move.b	$26(a0),d0
   24624/   1378A : 4EB9 0000 29EA      		jsr	(CalcSine).l
   24625/   13790 : C1FC 0050           		muls.w	#$50,d0
   24626/   13794 : E080                		asr.l	#8,d0
   24627/   13796 : 4A68 0014           		tst.w	$14(a0)
   24628/   1379A : 6B0C                		bmi.s	loc_1353A
   24629/   1379C : 4A40                		tst.w	d0
   24630/   1379E : 6A02                		bpl.s	loc_13534
   24631/   137A0 : E480                		asr.l	#2,d0
   24632/   137A2 :                     
   24633/   137A2 :                     loc_13534:
   24634/   137A2 : D168 0014           		add.w	d0,$14(a0)
   24635/   137A6 : 4E75                		rts	
   24636/   137A8 :                     ; ===========================================================================
   24637/   137A8 :                     
   24638/   137A8 :                     loc_1353A:
   24639/   137A8 : 4A40                		tst.w	d0
   24640/   137AA : 6B02                		bmi.s	loc_13540
   24641/   137AC : E480                		asr.l	#2,d0
   24642/   137AE :                     
   24643/   137AE :                     loc_13540:
   24644/   137AE : D168 0014           		add.w	d0,$14(a0)
   24645/   137B2 :                     
   24646/   137B2 :                     locret_13544:
   24647/   137B2 : 4E75                		rts	
   24648/   137B4 :                     ; End of function Sonic_RollRepel
   24649/   137B4 :                     
   24650/   137B4 :                     ; ---------------------------------------------------------------------------
   24651/   137B4 :                     ; Subroutine to	push Sonic down	a slope
   24652/   137B4 :                     ; ---------------------------------------------------------------------------
   24653/   137B4 :                     
   24654/   137B4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24655/   137B4 :                     
   24656/   137B4 :                     
   24657/   137B4 :                     Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
   24658/   137B4 : 4E71                		nop	
   24659/   137B6 : 4A28 0038           		tst.b	$38(a0)
   24660/   137BA : 6632                		bne.s	locret_13580
   24661/   137BC : 4A68 003E           		tst.w	$3E(a0)
   24662/   137C0 : 662E                		bne.s	loc_13582
   24663/   137C2 : 1028 0026           		move.b	$26(a0),d0
   24664/   137C6 : 0600 0020           		addi.b	#$20,d0
   24665/   137CA : 0200 00C0           		andi.b	#$C0,d0
   24666/   137CE : 671E                		beq.s	locret_13580
   24667/   137D0 : 3028 0014           		move.w	$14(a0),d0
   24668/   137D4 : 6A02                		bpl.s	loc_1356A
   24669/   137D6 : 4440                		neg.w	d0
   24670/   137D8 :                     
   24671/   137D8 :                     loc_1356A:
   24672/   137D8 : 0C40 0280           		cmpi.w	#$280,d0
   24673/   137DC : 6410                		bcc.s	locret_13580
   24674/   137DE : 4268 0014           		clr.w	$14(a0)
   24675/   137E2 : 08E8 0001 0022      		bset	#1,$22(a0)
   24676/   137E8 : 317C 001E 003E      		move.w	#$1E,$3E(a0)
   24677/   137EE :                     
   24678/   137EE :                     locret_13580:
   24679/   137EE : 4E75                		rts	
   24680/   137F0 :                     ; ===========================================================================
   24681/   137F0 :                     
   24682/   137F0 :                     loc_13582:
   24683/   137F0 : 5368 003E           		subq.w	#1,$3E(a0)
   24684/   137F4 : 4E75                		rts	
   24685/   137F6 :                     ; End of function Sonic_SlopeRepel
   24686/   137F6 :                     
   24687/   137F6 :                     ; ---------------------------------------------------------------------------
   24688/   137F6 :                     ; Subroutine to	return Sonic"s angle to 0 as he jumps
   24689/   137F6 :                     ; ---------------------------------------------------------------------------
   24690/   137F6 :                     
   24691/   137F6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24692/   137F6 :                     
   24693/   137F6 :                     
   24694/   137F6 :                     Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
   24695/   137F6 : 1028 0026           		move.b	$26(a0),d0	; get Sonic"s angle
   24696/   137FA : 6714                		beq.s	locret_135A2	; if already 0,	branch
   24697/   137FC : 6A08                		bpl.s	loc_13598	; if higher than 0, branch
   24698/   137FE :                     
   24699/   137FE : 5400                		addq.b	#2,d0		; increase angle
   24700/   13800 : 6402                		bcc.s	loc_13596
   24701/   13802 : 7000                		moveq	#0,d0
   24702/   13804 :                     
   24703/   13804 :                     loc_13596:
   24704/   13804 : 6006                		bra.s	loc_1359E
   24705/   13806 :                     ; ===========================================================================
   24706/   13806 :                     
   24707/   13806 :                     loc_13598:
   24708/   13806 : 5500                		subq.b	#2,d0		; decrease angle
   24709/   13808 : 6402                		bcc.s	loc_1359E
   24710/   1380A : 7000                		moveq	#0,d0
   24711/   1380C :                     
   24712/   1380C :                     loc_1359E:
   24713/   1380C : 1140 0026           		move.b	d0,$26(a0)
   24714/   13810 :                     
   24715/   13810 :                     locret_135A2:
   24716/   13810 : 4E75                		rts	
   24717/   13812 :                     ; End of function Sonic_JumpAngle
   24718/   13812 :                     
   24719/   13812 :                     ; ---------------------------------------------------------------------------
   24720/   13812 :                     ; Subroutine for Sonic to interact with	the floor after	jumping/falling
   24721/   13812 :                     ; ---------------------------------------------------------------------------
   24722/   13812 :                     
   24723/   13812 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24724/   13812 :                     
   24725/   13812 :                     
   24726/   13812 :                     Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
   24727/   13812 : 3228 0010           		move.w	$10(a0),d1
   24728/   13816 : 3428 0012           		move.w	$12(a0),d2
   24729/   1381A : 4EB9 0000 2CB8      		jsr	(CalcAngle).l
   24730/   13820 : 11C0 FFEC           		move.b	d0,($FFFFFFEC).w
   24731/   13824 : 0400 0020           		subi.b	#$20,d0
   24732/   13828 : 11C0 FFED           		move.b	d0,($FFFFFFED).w
   24733/   1382C : 0200 00C0           		andi.b	#$C0,d0
   24734/   13830 : 11C0 FFEE           		move.b	d0,($FFFFFFEE).w
   24735/   13834 : 0C00 0040           		cmpi.b	#$40,d0
   24736/   13838 : 6700 00B4           		beq.w	loc_13680
   24737/   1383C : 0C00 0080           		cmpi.b	#$80,d0
   24738/   13840 : 6700 010E           		beq.w	loc_136E2
   24739/   13844 : 0C00 00C0           		cmpi.b	#-$40,d0
   24740/   13848 : 6700 0162           		beq.w	loc_1373E
   24741/   1384C : 6100 1A70           		bsr.w	Sonic_HitWall
   24742/   13850 : 4A41                		tst.w	d1
   24743/   13852 : 6A0A                		bpl.s	loc_135F0
   24744/   13854 : 9368 0008           		sub.w	d1,8(a0)
   24745/   13858 : 317C 0000 0010      		move.w	#0,$10(a0)
   24746/   1385E :                     
   24747/   1385E :                     loc_135F0:
   24748/   1385E : 6100 18D0           		bsr.w	sub_14EB4
   24749/   13862 : 4A41                		tst.w	d1
   24750/   13864 : 6A0A                		bpl.s	loc_13602
   24751/   13866 : D368 0008           		add.w	d1,8(a0)
   24752/   1386A : 317C 0000 0010      		move.w	#0,$10(a0)
   24753/   13870 :                     
   24754/   13870 :                     loc_13602:
   24755/   13870 : 6100 177A           		bsr.w	Sonic_HitFloor
   24756/   13874 : 11C1 FFEF           		move.b	d1,($FFFFFFEF).w
   24757/   13878 : 4A41                		tst.w	d1
   24758/   1387A : 6A70                		bpl.s	locret_1367E
   24759/   1387C : 1428 0012           		move.b	$12(a0),d2
   24760/   13880 : 5002                		addq.b	#8,d2
   24761/   13882 : 4402                		neg.b	d2
   24762/   13884 : B202                		cmp.b	d2,d1
   24763/   13886 : 6C04                		bge.s	loc_1361E
   24764/   13888 : B002                		cmp.b	d2,d0
   24765/   1388A : 6D60                		blt.s	locret_1367E
   24766/   1388C :                     
   24767/   1388C :                     loc_1361E:
   24768/   1388C : D368 000C           		add.w	d1,$C(a0)
   24769/   13890 : 1143 0026           		move.b	d3,$26(a0)
   24770/   13894 : 6100 0178           		bsr.w	Sonic_ResetOnFloor
   24771/   13898 : 117C 0000 001C      		move.b	#0,$1C(a0)
   24772/   1389E : 1003                		move.b	d3,d0
   24773/   138A0 : 0600 0020           		addi.b	#$20,d0
   24774/   138A4 : 0200 0040           		andi.b	#$40,d0
   24775/   138A8 : 6620                		bne.s	loc_1365C
   24776/   138AA : 1003                		move.b	d3,d0
   24777/   138AC : 0600 0010           		addi.b	#$10,d0
   24778/   138B0 : 0200 0020           		andi.b	#$20,d0
   24779/   138B4 : 6706                		beq.s	loc_1364E
   24780/   138B6 : E0E8 0012           		asr	$12(a0)
   24781/   138BA : 6022                		bra.s	loc_13670
   24782/   138BC :                     ; ===========================================================================
   24783/   138BC :                     
   24784/   138BC :                     loc_1364E:
   24785/   138BC : 317C 0000 0012      		move.w	#0,$12(a0)
   24786/   138C2 : 3168 0010 0014      		move.w	$10(a0),$14(a0)
   24787/   138C8 : 4E75                		rts	
   24788/   138CA :                     ; ===========================================================================
   24789/   138CA :                     
   24790/   138CA :                     loc_1365C:
   24791/   138CA : 317C 0000 0010      		move.w	#0,$10(a0)
   24792/   138D0 : 0C68 0FC0 0012      		cmpi.w	#$FC0,$12(a0)
   24793/   138D6 : 6F06                		ble.s	loc_13670
   24794/   138D8 : 317C 0FC0 0012      		move.w	#$FC0,$12(a0)
   24795/   138DE :                     
   24796/   138DE :                     loc_13670:
   24797/   138DE : 3168 0012 0014      		move.w	$12(a0),$14(a0)
   24798/   138E4 : 4A03                		tst.b	d3
   24799/   138E6 : 6A04                		bpl.s	locret_1367E
   24800/   138E8 : 4468 0014           		neg.w	$14(a0)
   24801/   138EC :                     
   24802/   138EC :                     locret_1367E:
   24803/   138EC : 4E75                		rts	
   24804/   138EE :                     ; ===========================================================================
   24805/   138EE :                     
   24806/   138EE :                     loc_13680:
   24807/   138EE : 6100 19CE           		bsr.w	Sonic_HitWall
   24808/   138F2 : 4A41                		tst.w	d1
   24809/   138F4 : 6A12                		bpl.s	loc_1369A
   24810/   138F6 : 9368 0008           		sub.w	d1,8(a0)
   24811/   138FA : 317C 0000 0010      		move.w	#0,$10(a0)
   24812/   13900 : 3168 0012 0014      		move.w	$12(a0),$14(a0)
   24813/   13906 : 4E75                		rts	
   24814/   13908 :                     ; ===========================================================================
   24815/   13908 :                     
   24816/   13908 :                     loc_1369A:
   24817/   13908 : 6100 187A           		bsr.w	Sonic_DontRunOnWalls
   24818/   1390C : 4A41                		tst.w	d1
   24819/   1390E : 6A12                		bpl.s	loc_136B4
   24820/   13910 : 9368 000C           		sub.w	d1,$C(a0)
   24821/   13914 : 4A68 0012           		tst.w	$12(a0)
   24822/   13918 : 6A06                		bpl.s	locret_136B2
   24823/   1391A : 317C 0000 0012      		move.w	#0,$12(a0)
   24824/   13920 :                     
   24825/   13920 :                     locret_136B2:
   24826/   13920 : 4E75                		rts	
   24827/   13922 :                     ; ===========================================================================
   24828/   13922 :                     
   24829/   13922 :                     loc_136B4:
   24830/   13922 : 4A68 0012           		tst.w	$12(a0)
   24831/   13926 : 6B26                		bmi.s	locret_136E0
   24832/   13928 : 6100 16C2           		bsr.w	Sonic_HitFloor
   24833/   1392C : 4A41                		tst.w	d1
   24834/   1392E : 6A1E                		bpl.s	locret_136E0
   24835/   13930 : D368 000C           		add.w	d1,$C(a0)
   24836/   13934 : 1143 0026           		move.b	d3,$26(a0)
   24837/   13938 : 6100 00D4           		bsr.w	Sonic_ResetOnFloor
   24838/   1393C : 117C 0000 001C      		move.b	#0,$1C(a0)
   24839/   13942 : 317C 0000 0012      		move.w	#0,$12(a0)
   24840/   13948 : 3168 0010 0014      		move.w	$10(a0),$14(a0)
   24841/   1394E :                     
   24842/   1394E :                     locret_136E0:
   24843/   1394E : 4E75                		rts	
   24844/   13950 :                     ; ===========================================================================
   24845/   13950 :                     
   24846/   13950 :                     loc_136E2:
   24847/   13950 : 6100 196C           		bsr.w	Sonic_HitWall
   24848/   13954 : 4A41                		tst.w	d1
   24849/   13956 : 6A0A                		bpl.s	loc_136F4
   24850/   13958 : 9368 0008           		sub.w	d1,8(a0)
   24851/   1395C : 317C 0000 0010      		move.w	#0,$10(a0)
   24852/   13962 :                     
   24853/   13962 :                     loc_136F4:
   24854/   13962 : 6100 17CC           		bsr.w	sub_14EB4
   24855/   13966 : 4A41                		tst.w	d1
   24856/   13968 : 6A0A                		bpl.s	loc_13706
   24857/   1396A : D368 0008           		add.w	d1,8(a0)
   24858/   1396E : 317C 0000 0010      		move.w	#0,$10(a0)
   24859/   13974 :                     
   24860/   13974 :                     loc_13706:
   24861/   13974 : 6100 180E           		bsr.w	Sonic_DontRunOnWalls
   24862/   13978 : 4A41                		tst.w	d1
   24863/   1397A : 6A2E                		bpl.s	locret_1373C
   24864/   1397C : 9368 000C           		sub.w	d1,$C(a0)
   24865/   13980 : 1003                		move.b	d3,d0
   24866/   13982 : 0600 0020           		addi.b	#$20,d0
   24867/   13986 : 0200 0040           		andi.b	#$40,d0
   24868/   1398A : 6608                		bne.s	loc_13726
   24869/   1398C : 317C 0000 0012      		move.w	#0,$12(a0)
   24870/   13992 : 4E75                		rts	
   24871/   13994 :                     ; ===========================================================================
   24872/   13994 :                     
   24873/   13994 :                     loc_13726:
   24874/   13994 : 1143 0026           		move.b	d3,$26(a0)
   24875/   13998 : 6100 0074           		bsr.w	Sonic_ResetOnFloor
   24876/   1399C : 3168 0012 0014      		move.w	$12(a0),$14(a0)
   24877/   139A2 : 4A03                		tst.b	d3
   24878/   139A4 : 6A04                		bpl.s	locret_1373C
   24879/   139A6 : 4468 0014           		neg.w	$14(a0)
   24880/   139AA :                     
   24881/   139AA :                     locret_1373C:
   24882/   139AA : 4E75                		rts	
   24883/   139AC :                     ; ===========================================================================
   24884/   139AC :                     
   24885/   139AC :                     loc_1373E:
   24886/   139AC : 6100 1782           		bsr.w	sub_14EB4
   24887/   139B0 : 4A41                		tst.w	d1
   24888/   139B2 : 6A12                		bpl.s	loc_13758
   24889/   139B4 : D368 0008           		add.w	d1,8(a0)
   24890/   139B8 : 317C 0000 0010      		move.w	#0,$10(a0)
   24891/   139BE : 3168 0012 0014      		move.w	$12(a0),$14(a0)
   24892/   139C4 : 4E75                		rts	
   24893/   139C6 :                     ; ===========================================================================
   24894/   139C6 :                     
   24895/   139C6 :                     loc_13758:
   24896/   139C6 : 6100 17BC           		bsr.w	Sonic_DontRunOnWalls
   24897/   139CA : 4A41                		tst.w	d1
   24898/   139CC : 6A12                		bpl.s	loc_13772
   24899/   139CE : 9368 000C           		sub.w	d1,$C(a0)
   24900/   139D2 : 4A68 0012           		tst.w	$12(a0)
   24901/   139D6 : 6A06                		bpl.s	locret_13770
   24902/   139D8 : 317C 0000 0012      		move.w	#0,$12(a0)
   24903/   139DE :                     
   24904/   139DE :                     locret_13770:
   24905/   139DE : 4E75                		rts	
   24906/   139E0 :                     ; ===========================================================================
   24907/   139E0 :                     
   24908/   139E0 :                     loc_13772:
   24909/   139E0 : 4A68 0012           		tst.w	$12(a0)
   24910/   139E4 : 6B26                		bmi.s	locret_1379E
   24911/   139E6 : 6100 1604           		bsr.w	Sonic_HitFloor
   24912/   139EA : 4A41                		tst.w	d1
   24913/   139EC : 6A1E                		bpl.s	locret_1379E
   24914/   139EE : D368 000C           		add.w	d1,$C(a0)
   24915/   139F2 : 1143 0026           		move.b	d3,$26(a0)
   24916/   139F6 : 6100 0016           		bsr.w	Sonic_ResetOnFloor
   24917/   139FA : 117C 0000 001C      		move.b	#0,$1C(a0)
   24918/   13A00 : 317C 0000 0012      		move.w	#0,$12(a0)
   24919/   13A06 : 3168 0010 0014      		move.w	$10(a0),$14(a0)
   24920/   13A0C :                     
   24921/   13A0C :                     locret_1379E:
   24922/   13A0C : 4E75                		rts	
   24923/   13A0E :                     ; End of function Sonic_Floor
   24924/   13A0E :                     
   24925/   13A0E :                     ; ---------------------------------------------------------------------------
   24926/   13A0E :                     ; Subroutine to	reset Sonic"s mode when he lands on the floor
   24927/   13A0E :                     ; ---------------------------------------------------------------------------
   24928/   13A0E :                     
   24929/   13A0E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24930/   13A0E :                     
   24931/   13A0E :                     
   24932/   13A0E :                     Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
   24933/   13A0E : 0828 0004 0022      		btst	#4,$22(a0)
   24934/   13A14 : 6706                		beq.s	loc_137AE
   24935/   13A16 : 4E71                		nop	
   24936/   13A18 : 4E71                		nop	
   24937/   13A1A : 4E71                		nop	
   24938/   13A1C :                     
   24939/   13A1C :                     loc_137AE:
   24940/   13A1C : 08A8 0005 0022      		bclr	#5,$22(a0)
   24941/   13A22 : 08A8 0001 0022      		bclr	#1,$22(a0)
   24942/   13A28 : 08A8 0004 0022      		bclr	#4,$22(a0)
   24943/   13A2E : 0828 0002 0022      		btst	#2,$22(a0)
   24944/   13A34 : 671C                		beq.s	loc_137E4
   24945/   13A36 : 08A8 0002 0022      		bclr	#2,$22(a0)
   24946/   13A3C : 117C 0013 0016      		move.b	#$13,$16(a0)
   24947/   13A42 : 117C 0009 0017      		move.b	#9,$17(a0)
   24948/   13A48 : 117C 0000 001C      		move.b	#0,$1C(a0)	; use running/walking animation
   24949/   13A4E : 5B68 000C           		subq.w	#5,$C(a0)
   24950/   13A52 :                     
   24951/   13A52 :                     loc_137E4:
   24952/   13A52 : 117C 0000 003C      		move.b	#0,$3C(a0)
   24953/   13A58 : 31FC 0000 F7D0      		move.w	#0,($FFFFF7D0).w
   24954/   13A5E : 4E75                		rts	
   24955/   13A60 :                     ; End of function Sonic_ResetOnFloor
   24956/   13A60 :                     
   24957/   13A60 :                     ; ===========================================================================
   24958/   13A60 :                     ; ---------------------------------------------------------------------------
   24959/   13A60 :                     ; Sonic	when he	gets hurt
   24960/   13A60 :                     ; ---------------------------------------------------------------------------
   24961/   13A60 :                     
   24962/   13A60 :                     Obj01_Hurt:				; XREF: Obj01_Index
   24963/   13A60 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   24964/   13A66 : 0668 0030 0012      		addi.w	#$30,$12(a0)
   24965/   13A6C : 0828 0006 0022      		btst	#6,$22(a0)
   24966/   13A72 : 6706                		beq.s	loc_1380C
   24967/   13A74 : 0468 0020 0012      		subi.w	#$20,$12(a0)
   24968/   13A7A :                     
   24969/   13A7A :                     loc_1380C:
   24970/   13A7A : 6100 0018           		bsr.w	Sonic_HurtStop
   24971/   13A7E : 6100 F998           		bsr.w	Sonic_LevelBound
   24972/   13A82 : 6100 F3EA           		bsr.w	Sonic_RecordPos
   24973/   13A86 : 6100 01AA           		bsr.w	Sonic_Animate
   24974/   13A8A : 6100 042E           		bsr.w	LoadSonicDynPLC
   24975/   13A8E : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   24976/   13A94 :                     
   24977/   13A94 :                     ; ---------------------------------------------------------------------------
   24978/   13A94 :                     ; Subroutine to	stop Sonic falling after he"s been hurt
   24979/   13A94 :                     ; ---------------------------------------------------------------------------
   24980/   13A94 :                     
   24981/   13A94 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24982/   13A94 :                     
   24983/   13A94 :                     
   24984/   13A94 :                     Sonic_HurtStop:				; XREF: Obj01_Hurt
   24985/   13A94 : 3038 F72E           		move.w	($FFFFF72E).w,d0
   24986/   13A98 : 0640 00E0           		addi.w	#$E0,d0
   24987/   13A9C : B068 000C           		cmp.w	$C(a0),d0
   24988/   13AA0 : 6500 7890           		bcs.w	KillSonic
   24989/   13AA4 : 6100 FD6C           		bsr.w	Sonic_Floor
   24990/   13AA8 : 0828 0001 0022      		btst	#1,$22(a0)
   24991/   13AAE : 661E                		bne.s	locret_13860
   24992/   13AB0 : 7000                		moveq	#0,d0
   24993/   13AB2 : 3140 0012           		move.w	d0,$12(a0)
   24994/   13AB6 : 3140 0010           		move.w	d0,$10(a0)
   24995/   13ABA : 3140 0014           		move.w	d0,$14(a0)
   24996/   13ABE : 117C 0000 001C      		move.b	#0,$1C(a0)
   24997/   13AC4 : 5528 0024           		subq.b	#2,$24(a0)
   24998/   13AC8 : 317C 0078 0030      		move.w	#$78,$30(a0)
   24999/   13ACE :                     
   25000/   13ACE :                     locret_13860:
   25001/   13ACE : 4E75                		rts	
   25002/   13AD0 :                     ; End of function Sonic_HurtStop
   25003/   13AD0 :                     
   25004/   13AD0 :                     ; ===========================================================================
   25005/   13AD0 :                     ; ---------------------------------------------------------------------------
   25006/   13AD0 :                     ; Sonic	when he	dies
   25007/   13AD0 :                     ; ---------------------------------------------------------------------------
   25008/   13AD0 :                     
   25009/   13AD0 :                     Obj01_Death:				; XREF: Obj01_Index
   25010/   13AD0 : 6100 001A           		bsr.w	GameOver
   25011/   13AD4 : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   25012/   13ADA : 6100 F392           		bsr.w	Sonic_RecordPos
   25013/   13ADE : 6100 0152           		bsr.w	Sonic_Animate
   25014/   13AE2 : 6100 03D6           		bsr.w	LoadSonicDynPLC
   25015/   13AE6 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   25016/   13AEC :                     
   25017/   13AEC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25018/   13AEC :                     
   25019/   13AEC :                     
   25020/   13AEC :                     GameOver:				; XREF: Obj01_Death
   25021/   13AEC : 3038 F72E           		move.w	($FFFFF72E).w,d0
   25022/   13AF0 : 0640 0100           		addi.w	#$100,d0
   25023/   13AF4 : B068 000C           		cmp.w	$C(a0),d0
   25024/   13AF8 : 6400 0074           		bcc.w	locret_13900
   25025/   13AFC : 317C FFC8 0012      		move.w	#-$38,$12(a0)
   25026/   13B02 : 5428 0024           		addq.b	#2,$24(a0)
   25027/   13B06 : 4238 FE1E           		clr.b	($FFFFFE1E).w	; stop time counter
   25028/   13B0A : 5238 FE1C           		addq.b	#1,($FFFFFE1C).w ; update lives	counter
   25029/   13B0E : 5338 FE12           		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
   25030/   13B12 : 662E                		bne.s	loc_138D4
   25031/   13B14 : 317C 0000 003A      		move.w	#0,$3A(a0)
   25032/   13B1A : 11FC 0039 D080      		move.b	#$39,($FFFFD080).w ; load GAME object
   25033/   13B20 : 11FC 0039 D0C0      		move.b	#$39,($FFFFD0C0).w ; load OVER object
   25034/   13B26 : 11FC 0001 D0DA      		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
   25035/   13B2C : 4238 FE1A           		clr.b	($FFFFFE1A).w
   25036/   13B30 :                     
   25037/   13B30 :                     loc_138C2:
   25038/   13B30 : 303C 008F           		move.w	#$8F,d0
   25039/   13B34 : 4EB9 0000 1396      		jsr	(PlaySound).l	; play game over music
   25040/   13B3A : 7003                		moveq	#3,d0
   25041/   13B3C : 4EF9 0000 1580      		jmp	(LoadPLC).l	; load game over patterns
   25042/   13B42 :                     ; ===========================================================================
   25043/   13B42 :                     
   25044/   13B42 :                     loc_138D4:
   25045/   13B42 : 317C 003C 003A      		move.w	#60,$3A(a0)	; set time delay to 1 second
   25046/   13B48 : 4A38 FE1A           		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
   25047/   13B4C : 6720                		beq.s	locret_13900	; if not, branch
   25048/   13B4E : 317C 0000 003A      		move.w	#0,$3A(a0)
   25049/   13B54 : 11FC 0039 D080      		move.b	#$39,($FFFFD080).w ; load TIME object
   25050/   13B5A : 11FC 0039 D0C0      		move.b	#$39,($FFFFD0C0).w ; load OVER object
   25051/   13B60 : 11FC 0002 D09A      		move.b	#2,($FFFFD09A).w
   25052/   13B66 : 11FC 0003 D0DA      		move.b	#3,($FFFFD0DA).w
   25053/   13B6C : 60C2                		bra.s	loc_138C2
   25054/   13B6E :                     ; ===========================================================================
   25055/   13B6E :                     
   25056/   13B6E :                     locret_13900:
   25057/   13B6E : 4E75                		rts	
   25058/   13B70 :                     ; End of function GameOver
   25059/   13B70 :                     
   25060/   13B70 :                     ; ===========================================================================
   25061/   13B70 :                     ; ---------------------------------------------------------------------------
   25062/   13B70 :                     ; Sonic	when the level is restarted
   25063/   13B70 :                     ; ---------------------------------------------------------------------------
   25064/   13B70 :                     
   25065/   13B70 :                     Obj01_ResetLevel:			; XREF: Obj01_Index
   25066/   13B70 : 4A68 003A           		tst.w	$3A(a0)
   25067/   13B74 : 670C                		beq.s	locret_13914
   25068/   13B76 : 5368 003A           		subq.w	#1,$3A(a0)	; subtract 1 from time delay
   25069/   13B7A : 6606                		bne.s	locret_13914
   25070/   13B7C : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart the level
   25071/   13B82 :                     
   25072/   13B82 :                     locret_13914:
   25073/   13B82 : 4E75                		rts	
   25074/   13B84 :                     
   25075/   13B84 :                     ; ---------------------------------------------------------------------------
   25076/   13B84 :                     ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
   25077/   13B84 :                     ; ---------------------------------------------------------------------------
   25078/   13B84 :                     
   25079/   13B84 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25080/   13B84 :                     
   25081/   13B84 :                     
   25082/   13B84 :                     Sonic_Loops:				; XREF: Obj01_Control
   25083/   13B84 : 0C38 0003 FE10      		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
   25084/   13B8A : 6708                		beq.s	loc_13926	; if yes, branch
   25085/   13B8C : 4A38 FE10           		tst.b	($FFFFFE10).w	; is level GHZ ?
   25086/   13B90 : 6600 009E           		bne.w	locret_139C2	; if not, branch
   25087/   13B94 :                     
   25088/   13B94 :                     loc_13926:
   25089/   13B94 : 3028 000C           		move.w	$C(a0),d0
   25090/   13B98 : E248                		lsr.w	#1,d0
   25091/   13B9A : 0240 0380           		andi.w	#$380,d0
   25092/   13B9E : 1228 0008           		move.b	8(a0),d1
   25093/   13BA2 : 0241 007F           		andi.w	#$7F,d1
   25094/   13BA6 : D041                		add.w	d1,d0
   25095/   13BA8 : 43F8 A400           		lea	($FFFFA400).w,a1
   25096/   13BAC : 1231 0000           		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
   25097/   13BB0 : B238 F7AE           		cmp.b	($FFFFF7AE).w,d1
   25098/   13BB4 : 6700 F916           		beq.w	Obj01_ChkRoll
   25099/   13BB8 : B238 F7AF           		cmp.b	($FFFFF7AF).w,d1
   25100/   13BBC : 6700 F90E           		beq.w	Obj01_ChkRoll
   25101/   13BC0 : B238 F7AC           		cmp.b	($FFFFF7AC).w,d1
   25102/   13BC4 : 671E                		beq.s	loc_13976
   25103/   13BC6 : B238 F7AD           		cmp.b	($FFFFF7AD).w,d1
   25104/   13BCA : 6708                		beq.s	loc_13966
   25105/   13BCC : 08A8 0006 0001      		bclr	#6,1(a0)
   25106/   13BD2 : 4E75                		rts	
   25107/   13BD4 :                     ; ===========================================================================
   25108/   13BD4 :                     
   25109/   13BD4 :                     loc_13966:
   25110/   13BD4 : 0828 0001 0022      		btst	#1,$22(a0)
   25111/   13BDA : 6708                		beq.s	loc_13976
   25112/   13BDC : 08A8 0006 0001      		bclr	#6,1(a0)	; send Sonic to	high plane
   25113/   13BE2 : 4E75                		rts	
   25114/   13BE4 :                     ; ===========================================================================
   25115/   13BE4 :                     
   25116/   13BE4 :                     loc_13976:
   25117/   13BE4 : 3428 0008           		move.w	8(a0),d2
   25118/   13BE8 : 0C02 002C           		cmpi.b	#$2C,d2
   25119/   13BEC : 6408                		bcc.s	loc_13988
   25120/   13BEE : 08A8 0006 0001      		bclr	#6,1(a0)	; send Sonic to	high plane
   25121/   13BF4 : 4E75                		rts	
   25122/   13BF6 :                     ; ===========================================================================
   25123/   13BF6 :                     
   25124/   13BF6 :                     loc_13988:
   25125/   13BF6 : 0C02 00E0           		cmpi.b	#-$20,d2
   25126/   13BFA : 6508                		bcs.s	loc_13996
   25127/   13BFC : 08E8 0006 0001      		bset	#6,1(a0)	; send Sonic to	low plane
   25128/   13C02 : 4E75                		rts	
   25129/   13C04 :                     ; ===========================================================================
   25130/   13C04 :                     
   25131/   13C04 :                     loc_13996:
   25132/   13C04 : 0828 0006 0001      		btst	#6,1(a0)
   25133/   13C0A : 6614                		bne.s	loc_139B2
   25134/   13C0C : 1228 0026           		move.b	$26(a0),d1
   25135/   13C10 : 671E                		beq.s	locret_139C2
   25136/   13C12 : 0C01 0080           		cmpi.b	#-$80,d1
   25137/   13C16 : 6218                		bhi.s	locret_139C2
   25138/   13C18 : 08E8 0006 0001      		bset	#6,1(a0)	; send Sonic to	low plane
   25139/   13C1E : 4E75                		rts	
   25140/   13C20 :                     ; ===========================================================================
   25141/   13C20 :                     
   25142/   13C20 :                     loc_139B2:
   25143/   13C20 : 1228 0026           		move.b	$26(a0),d1
   25144/   13C24 : 0C01 0080           		cmpi.b	#-$80,d1
   25145/   13C28 : 6306                		bls.s	locret_139C2
   25146/   13C2A : 08A8 0006 0001      		bclr	#6,1(a0)	; send Sonic to	high plane
   25147/   13C30 :                     
   25148/   13C30 :                     locret_139C2:
   25149/   13C30 : 4E75                		rts	
   25150/   13C32 :                     ; End of function Sonic_Loops
   25151/   13C32 :                     
   25152/   13C32 :                     ; ---------------------------------------------------------------------------
   25153/   13C32 :                     ; Subroutine to	animate	Sonic"s sprites
   25154/   13C32 :                     ; ---------------------------------------------------------------------------
   25155/   13C32 :                     
   25156/   13C32 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25157/   13C32 :                     
   25158/   13C32 :                     
   25159/   13C32 :                     Sonic_Animate:				; XREF: Obj01_Control; et al
   25160/   13C32 : 43F9 0001 3DB6      		lea	(SonicAniData).l,a1
   25161/   13C38 : 7000                		moveq	#0,d0
   25162/   13C3A : 1028 001C           		move.b	$1C(a0),d0
   25163/   13C3E : B028 001D           		cmp.b	$1D(a0),d0	; is animation set to restart?
   25164/   13C42 : 6710                		beq.s	SAnim_Do	; if not, branch
   25165/   13C44 : 1140 001D           		move.b	d0,$1D(a0)	; set to "no restart"
   25166/   13C48 : 117C 0000 001B      		move.b	#0,$1B(a0)	; reset	animation
   25167/   13C4E : 117C 0000 001E      		move.b	#0,$1E(a0)	; reset	frame duration
   25168/   13C54 :                     
   25169/   13C54 :                     SAnim_Do:
   25170/   13C54 : D040                		add.w	d0,d0
   25171/   13C56 : D2F1 0000           		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
   25172/   13C5A : 1011                		move.b	(a1),d0
   25173/   13C5C : 6B62                		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
   25174/   13C5E : 1228 0022           		move.b	$22(a0),d1
   25175/   13C62 : 0201 0001           		andi.b	#1,d1
   25176/   13C66 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   25177/   13C6C : 8328 0001           		or.b	d1,1(a0)
   25178/   13C70 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   25179/   13C74 : 6A18                		bpl.s	SAnim_Delay	; if time remains, branch
   25180/   13C76 : 1140 001E           		move.b	d0,$1E(a0)	; load frame duration
   25181/   13C7A :                     
   25182/   13C7A :                     SAnim_Do2:
   25183/   13C7A : 7200                		moveq	#0,d1
   25184/   13C7C : 1228 001B           		move.b	$1B(a0),d1	; load current frame number
   25185/   13C80 : 1031 1001           		move.b	1(a1,d1.w),d0	; read sprite number from script
   25186/   13C84 : 6B0A                		bmi.s	SAnim_End_FF	; if animation is complete, branch
   25187/   13C86 :                     
   25188/   13C86 :                     SAnim_Next:
   25189/   13C86 : 1140 001A           		move.b	d0,$1A(a0)	; load sprite number
   25190/   13C8A : 5228 001B           		addq.b	#1,$1B(a0)	; next frame number
   25191/   13C8E :                     
   25192/   13C8E :                     SAnim_Delay:
   25193/   13C8E : 4E75                		rts	
   25194/   13C90 :                     ; ===========================================================================
   25195/   13C90 :                     
   25196/   13C90 :                     SAnim_End_FF:
   25197/   13C90 : 5200                		addq.b	#1,d0		; is the end flag = $FF	?
   25198/   13C92 : 660C                		bne.s	SAnim_End_FE	; if not, branch
   25199/   13C94 : 117C 0000 001B      		move.b	#0,$1B(a0)	; restart the animation
   25200/   13C9A : 1029 0001           		move.b	1(a1),d0	; read sprite number
   25201/   13C9E : 60E6                		bra.s	SAnim_Next
   25202/   13CA0 :                     ; ===========================================================================
   25203/   13CA0 :                     
   25204/   13CA0 :                     SAnim_End_FE:
   25205/   13CA0 : 5200                		addq.b	#1,d0		; is the end flag = $FE	?
   25206/   13CA2 : 6610                		bne.s	SAnim_End_FD	; if not, branch
   25207/   13CA4 : 1031 1002           		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
   25208/   13CA8 : 9128 001B           		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
   25209/   13CAC : 9200                		sub.b	d0,d1
   25210/   13CAE : 1031 1001           		move.b	1(a1,d1.w),d0	; read sprite number
   25211/   13CB2 : 60D2                		bra.s	SAnim_Next
   25212/   13CB4 :                     ; ===========================================================================
   25213/   13CB4 :                     
   25214/   13CB4 :                     SAnim_End_FD:
   25215/   13CB4 : 5200                		addq.b	#1,d0		; is the end flag = $FD	?
   25216/   13CB6 : 6606                		bne.s	SAnim_End	; if not, branch
   25217/   13CB8 : 1171 1002 001C      		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
   25218/   13CBE :                     
   25219/   13CBE :                     SAnim_End:
   25220/   13CBE : 4E75                		rts	
   25221/   13CC0 :                     ; ===========================================================================
   25222/   13CC0 :                     
   25223/   13CC0 :                     SAnim_WalkRun:				; XREF: SAnim_Do
   25224/   13CC0 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   25225/   13CC4 : 6AC8                		bpl.s	SAnim_Delay	; if time remains, branch
   25226/   13CC6 : 5200                		addq.b	#1,d0		; is animation walking/running?
   25227/   13CC8 : 6600 0076           		bne.w	SAnim_RollJump	; if not, branch
   25228/   13CCC : 7200                		moveq	#0,d1
   25229/   13CCE : 1028 0026           		move.b	$26(a0),d0	; get Sonic"s angle
   25230/   13CD2 : 1428 0022           		move.b	$22(a0),d2
   25231/   13CD6 : 0202 0001           		andi.b	#1,d2		; is Sonic mirrored horizontally?
   25232/   13CDA : 6602                		bne.s	loc_13A70	; if yes, branch
   25233/   13CDC : 4600                		not.b	d0		; reverse angle
   25234/   13CDE :                     
   25235/   13CDE :                     loc_13A70:
   25236/   13CDE : 0600 0010           		addi.b	#$10,d0		; add $10 to angle
   25237/   13CE2 : 6A02                		bpl.s	loc_13A78	; if angle is $0-$7F, branch
   25238/   13CE4 : 7203                		moveq	#3,d1
   25239/   13CE6 :                     
   25240/   13CE6 :                     loc_13A78:
   25241/   13CE6 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   25242/   13CEC : B302                		eor.b	d1,d2
   25243/   13CEE : 8528 0001           		or.b	d2,1(a0)
   25244/   13CF2 : 0828 0005 0022      		btst	#5,$22(a0)
   25245/   13CF8 : 6600 008A           		bne.w	SAnim_Push
   25246/   13CFC : E808                		lsr.b	#4,d0		; divide angle by $10
   25247/   13CFE : 0200 0006           		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
   25248/   13D02 : 3428 0014           		move.w	$14(a0),d2	; get Sonic"s speed
   25249/   13D06 : 6A02                		bpl.s	loc_13A9C
   25250/   13D08 : 4442                		neg.w	d2
   25251/   13D0A :                     
   25252/   13D0A :                     loc_13A9C:
   25253/   13D0A : 43F9 0001 3DFE      		lea	(SonAni_Run).l,a1 ; use	running	animation
   25254/   13D10 : 0C42 0600           		cmpi.w	#$600,d2	; is Sonic at running speed?
   25255/   13D14 : 640C                		bcc.s	loc_13AB4	; if yes, branch
   25256/   13D16 : 43F9 0001 3DF6      		lea	(SonAni_Walk).l,a1 ; use walking animation
   25257/   13D1C : 1200                		move.b	d0,d1
   25258/   13D1E : E209                		lsr.b	#1,d1
   25259/   13D20 : D001                		add.b	d1,d0
   25260/   13D22 :                     
   25261/   13D22 :                     loc_13AB4:
   25262/   13D22 : D000                		add.b	d0,d0
   25263/   13D24 : 1600                		move.b	d0,d3
   25264/   13D26 : 4442                		neg.w	d2
   25265/   13D28 : 0642 0800           		addi.w	#$800,d2
   25266/   13D2C : 6A02                		bpl.s	loc_13AC2
   25267/   13D2E : 7400                		moveq	#0,d2
   25268/   13D30 :                     
   25269/   13D30 :                     loc_13AC2:
   25270/   13D30 : E04A                		lsr.w	#8,d2
   25271/   13D32 : 1142 001E           		move.b	d2,$1E(a0)	; modify frame duration
   25272/   13D36 : 6100 FF42           		bsr.w	SAnim_Do2
   25273/   13D3A : D728 001A           		add.b	d3,$1A(a0)	; modify frame number
   25274/   13D3E : 4E75                		rts	
   25275/   13D40 :                     ; ===========================================================================
   25276/   13D40 :                     
   25277/   13D40 :                     SAnim_RollJump:				; XREF: SAnim_WalkRun
   25278/   13D40 : 5200                		addq.b	#1,d0		; is animation rolling/jumping?
   25279/   13D42 : 6640                		bne.s	SAnim_Push	; if not, branch
   25280/   13D44 : 3428 0014           		move.w	$14(a0),d2	; get Sonic"s speed
   25281/   13D48 : 6A02                		bpl.s	loc_13ADE
   25282/   13D4A : 4442                		neg.w	d2
   25283/   13D4C :                     
   25284/   13D4C :                     loc_13ADE:
   25285/   13D4C : 43F9 0001 3E0E      		lea	(SonAni_Roll2).l,a1 ; use fast animation
   25286/   13D52 : 0C42 0600           		cmpi.w	#$600,d2	; is Sonic moving fast?
   25287/   13D56 : 6406                		bcc.s	loc_13AF0	; if yes, branch
   25288/   13D58 : 43F9 0001 3E06      		lea	(SonAni_Roll).l,a1 ; use slower	animation
   25289/   13D5E :                     
   25290/   13D5E :                     loc_13AF0:
   25291/   13D5E : 4442                		neg.w	d2
   25292/   13D60 : 0642 0400           		addi.w	#$400,d2
   25293/   13D64 : 6A02                		bpl.s	loc_13AFA
   25294/   13D66 : 7400                		moveq	#0,d2
   25295/   13D68 :                     
   25296/   13D68 :                     loc_13AFA:
   25297/   13D68 : E04A                		lsr.w	#8,d2
   25298/   13D6A : 1142 001E           		move.b	d2,$1E(a0)	; modify frame duration
   25299/   13D6E : 1228 0022           		move.b	$22(a0),d1
   25300/   13D72 : 0201 0001           		andi.b	#1,d1
   25301/   13D76 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   25302/   13D7C : 8328 0001           		or.b	d1,1(a0)
   25303/   13D80 : 6000 FEF8           		bra.w	SAnim_Do2
   25304/   13D84 :                     ; ===========================================================================
   25305/   13D84 :                     
   25306/   13D84 :                     SAnim_Push:				; XREF: SAnim_RollJump
   25307/   13D84 : 3428 0014           		move.w	$14(a0),d2	; get Sonic"s speed
   25308/   13D88 : 6B02                		bmi.s	loc_13B1E
   25309/   13D8A : 4442                		neg.w	d2
   25310/   13D8C :                     
   25311/   13D8C :                     loc_13B1E:
   25312/   13D8C : 0642 0800           		addi.w	#$800,d2
   25313/   13D90 : 6A02                		bpl.s	loc_13B26
   25314/   13D92 : 7400                		moveq	#0,d2
   25315/   13D94 :                     
   25316/   13D94 :                     loc_13B26:
   25317/   13D94 : EC4A                		lsr.w	#6,d2
   25318/   13D96 : 1142 001E           		move.b	d2,$1E(a0)	; modify frame duration
   25319/   13D9A : 43F9 0001 3E16      		lea	(SonAni_Push).l,a1
   25320/   13DA0 : 1228 0022           		move.b	$22(a0),d1
   25321/   13DA4 : 0201 0001           		andi.b	#1,d1
   25322/   13DA8 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   25323/   13DAE : 8328 0001           		or.b	d1,1(a0)
   25324/   13DB2 : 6000 FEC6           		bra.w	SAnim_Do2
   25325/   13DB6 :                     ; End of function Sonic_Animate
   25326/   13DB6 :                     
   25327/   13DB6 :                     ; ===========================================================================
   25328/   13DB6 :                     SonicAniData:
   25329/   13DB6 :                     		include	"_anim/Sonic.asm"
(1)    1/   13DB6 :                     ; ---------------------------------------------------------------------------
(1)    2/   13DB6 :                     ; Animation script - Sonic
(1)    3/   13DB6 :                     ; ---------------------------------------------------------------------------
(1)    4/   13DB6 : 0040                		dc.w SonAni_Walk-SonicAniData
(1)    5/   13DB8 : 0048                		dc.w SonAni_Run-SonicAniData
(1)    6/   13DBA : 0050                		dc.w SonAni_Roll-SonicAniData
(1)    7/   13DBC : 0058                		dc.w SonAni_Roll2-SonicAniData
(1)    8/   13DBE : 0060                		dc.w SonAni_Push-SonicAniData
(1)    9/   13DC0 : 0068                		dc.w SonAni_Wait-SonicAniData
(1)   10/   13DC2 : 007E                		dc.w SonAni_Balance-SonicAniData
(1)   11/   13DC4 : 0082                		dc.w SonAni_LookUp-SonicAniData
(1)   12/   13DC6 : 0086                		dc.w SonAni_Duck-SonicAniData
(1)   13/   13DC8 : 008A                		dc.w SonAni_Warp1-SonicAniData
(1)   14/   13DCA : 008E                		dc.w SonAni_Warp2-SonicAniData
(1)   15/   13DCC : 0092                		dc.w SonAni_Warp3-SonicAniData
(1)   16/   13DCE : 0096                		dc.w SonAni_Warp4-SonicAniData
(1)   17/   13DD0 : 009A                		dc.w SonAni_Stop-SonicAniData
(1)   18/   13DD2 : 009E                		dc.w SonAni_Float1-SonicAniData
(1)   19/   13DD4 : 00A2                		dc.w SonAni_Float2-SonicAniData
(1)   20/   13DD6 : 00AA                		dc.w SonAni_Spring-SonicAniData
(1)   21/   13DD8 : 00AE                		dc.w SonAni_LZHang-SonicAniData
(1)   22/   13DDA : 00B2                		dc.w SonAni_Leap1-SonicAniData
(1)   23/   13DDC : 00B8                		dc.w SonAni_Leap2-SonicAniData
(1)   24/   13DDE : 00BE                		dc.w SonAni_Surf-SonicAniData
(1)   25/   13DE0 : 00C2                		dc.w SonAni_Bubble-SonicAniData
(1)   26/   13DE2 : 00CA                		dc.w SonAni_Death1-SonicAniData
(1)   27/   13DE4 : 00CE                		dc.w SonAni_Drown-SonicAniData
(1)   28/   13DE6 : 00D2                		dc.w SonAni_Death2-SonicAniData
(1)   29/   13DE8 : 00D6                		dc.w SonAni_Shrink-SonicAniData
(1)   30/   13DEA : 00E0                		dc.w SonAni_Hurt-SonicAniData
(1)   31/   13DEC : 00E4                		dc.w SonAni_LZSlide-SonicAniData
(1)   32/   13DEE : 00E8                		dc.w SonAni_Blank-SonicAniData
(1)   33/   13DF0 : 00EC                		dc.w SonAni_Float3-SonicAniData
(1)   34/   13DF2 : 00F4                		dc.w SonAni_Float4-SonicAniData
(1)   35/   13DF4 : 00F8                		dc.w SonAni_SpinDash-SonicAniData	;1F
(1)   36/   13DF6 : FF08 090A 0B06 07FF SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
(1)   37/   13DFE : FF1E 1F20 21FF FFFF SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
(1)   38/   13E06 : FE2E 2F30 3132 FFFF SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
(1)   39/   13E0E : FE2E 2F32 3031 32FF SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
(1)   40/   13E16 : FD45 4647 48FF FFFF SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
(1)   41/   13E1E : 1701 0101 0101 0101 SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3
                    0101 0101 0103      
(1)   42/   13E2C : 0202 0203 04FE 0200 		dc.b 2, 2, 2, 3, 4, $FE, 2, 0
(1)   43/   13E34 : 1F3A 3BFF           SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
(1)   44/   13E38 : 3F05 FF00           SonAni_LookUp:	dc.b $3F, 5, $FF, 0
(1)   45/   13E3C : 3F39 FF00           SonAni_Duck:	dc.b $3F, $39, $FF, 0
(1)   46/   13E40 : 3F33 FF00           SonAni_Warp1:	dc.b $3F, $33, $FF, 0
(1)   47/   13E44 : 3F34 FF00           SonAni_Warp2:	dc.b $3F, $34, $FF, 0
(1)   48/   13E48 : 3F35 FF00           SonAni_Warp3:	dc.b $3F, $35, $FF, 0
(1)   49/   13E4C : 3F36 FF00           SonAni_Warp4:	dc.b $3F, $36, $FF, 0
(1)   50/   13E50 : 0737 38FF           SonAni_Stop:	dc.b 7,	$37, $38, $FF
(1)   51/   13E54 : 073C 3FFF           SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
(1)   52/   13E58 : 073C 3D53 3E54 FF00 SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
(1)   53/   13E60 : 2F40 FD00           SonAni_Spring:	dc.b $2F, $40, $FD, 0
(1)   54/   13E64 : 0441 42FF           SonAni_LZHang:	dc.b 4,	$41, $42, $FF
(1)   55/   13E68 : 0F43 4343 FE01      SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
(1)   56/   13E6E : 0F43 44FE 0100      SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
(1)   57/   13E74 : 3F49 FF00           SonAni_Surf:	dc.b $3F, $49, $FF, 0
(1)   58/   13E78 : 0B56 560A 0BFD 0000 SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
(1)   59/   13E80 : 204B FF00           SonAni_Death1:	dc.b $20, $4B, $FF, 0
(1)   60/   13E84 : 2F4C FF00           SonAni_Drown:	dc.b $2F, $4C, $FF, 0
(1)   61/   13E88 : 034D FF00           SonAni_Death2:	dc.b 3,	$4D, $FF, 0
(1)   62/   13E8C : 034E 4F50 5152 00FE SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
                    0100                
(1)   63/   13E96 : 0355 FF00           SonAni_Hurt:	dc.b 3,	$55, $FF, 0
(1)   64/   13E9A : 0755 57FF           SonAni_LZSlide:	dc.b 7, $55, $57, $FF
(1)   65/   13E9E : 7700 FD00           SonAni_Blank:	dc.b $77, 0, $FD, 0
(1)   66/   13EA2 : 033C 3D53 3E54 FF00 SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
(1)   67/   13EAA : 033C FD00           SonAni_Float4:	dc.b 3,	$3C, $FD, 0
(1)   68/   13EAE : 0058 5958 5A58 5B58 SonAni_SpinDash:	dc.b 0, $58, $59, $58, $5A, $58, $5B, $58, $5C, $58, $5D, $FF
                    5C58 5DFF           
(1)   69/   13EBA : (MACRO)             		align 2
(1)   69/   13EBA :  (MACRO-2)                  cnop 0,2
(1)   69/   13EBA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   25330/   13EBA :                     
   25331/   13EBA :                     ; ---------------------------------------------------------------------------
   25332/   13EBA :                     ; Sonic	pattern	loading	subroutine
   25333/   13EBA :                     ; ---------------------------------------------------------------------------
   25334/   13EBA :                     
   25335/   13EBA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25336/   13EBA :                     
   25337/   13EBA :                     
   25338/   13EBA :                     LoadSonicDynPLC:			; XREF: Obj01_Control; et al
   25339/   13EBA : 7000                		moveq	#0,d0
   25340/   13EBC : 1028 001A           		move.b	$1A(a0),d0	; load frame number
   25341/   13EC0 : B038 F766           		cmp.b	($FFFFF766).w,d0
   25342/   13EC4 : 674C                		beq.s	locret_13C96
   25343/   13EC6 : 11C0 F766           		move.b	d0,($FFFFF766).w
   25344/   13ECA : 45F9 0002 1A8C      		lea	(SonicDynPLC).l,a2
   25345/   13ED0 : D040                		add.w	d0,d0
   25346/   13ED2 : D4F2 0000           		adda.w	(a2,d0.w),a2
   25347/   13ED6 : 7200                		moveq	#0,d1
   25348/   13ED8 : 121A                		move.b	(a2)+,d1	; read "number of entries" value
   25349/   13EDA : 5301                		subq.b	#1,d1
   25350/   13EDC : 6B34                		bmi.s	locret_13C96
   25351/   13EDE : 47F8 C800           		lea	($FFFFC800).w,a3
   25352/   13EE2 : 11FC 0001 F767      		move.b	#1,($FFFFF767).w
   25353/   13EE8 :                     
   25354/   13EE8 :                     SPLC_ReadEntry:
   25355/   13EE8 : 7400                		moveq	#0,d2
   25356/   13EEA : 141A                		move.b	(a2)+,d2
   25357/   13EEC : 3002                		move.w	d2,d0
   25358/   13EEE : E808                		lsr.b	#4,d0
   25359/   13EF0 : E14A                		lsl.w	#8,d2
   25360/   13EF2 : 141A                		move.b	(a2)+,d2
   25361/   13EF4 : EB4A                		lsl.w	#5,d2
   25362/   13EF6 : 43F9 0002 1DB8      		lea	(Art_Sonic).l,a1
   25363/   13EFC : D3C2                		adda.l	d2,a1
   25364/   13EFE :                     
   25365/   13EFE :                     SPLC_LoadTile:
   25366/   13EFE : 4CD9 707C           		movem.l	(a1)+,d2-d6/a4-a6
   25367/   13F02 : 48D3 707C           		movem.l	d2-d6/a4-a6,(a3)
   25368/   13F06 : 47EB 0020           		lea	$20(a3),a3	; next tile
   25369/   13F0A : 51C8 FFF2           		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
   25370/   13F0E :                     
   25371/   13F0E : 51C9 FFD8           		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
   25372/   13F12 :                     
   25373/   13F12 :                     locret_13C96:
   25374/   13F12 : 4E75                		rts	
   25375/   13F14 :                     ; End of function LoadSonicDynPLC
   25376/   13F14 :                     
   25377/   13F14 :                     ; ===========================================================================
   25378/   13F14 :                     ; ---------------------------------------------------------------------------
   25379/   13F14 :                     ; Object 0A - drowning countdown numbers and small bubbles (LZ)
   25380/   13F14 :                     ; ---------------------------------------------------------------------------
   25381/   13F14 :                     
   25382/   13F14 :                     Obj0A:					; XREF: Obj_Index
   25383/   13F14 : 7000                		moveq	#0,d0
   25384/   13F16 : 1028 0024           		move.b	$24(a0),d0
   25385/   13F1A : 323B 0006           		move.w	Obj0A_Index(pc,d0.w),d1
   25386/   13F1E : 4EFB 1002           		jmp	Obj0A_Index(pc,d1.w)
   25387/   13F22 :                     ; ===========================================================================
   25388/   13F22 : 0012 006A           Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
   25389/   13F26 : 0076 00D8           		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
   25390/   13F2A : 00EC 01F6           		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
   25391/   13F2E : 00F2 00D8           		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
   25392/   13F32 : 00EC                		dc.w Obj0A_Delete2-Obj0A_Index
   25393/   13F34 :                     ; ===========================================================================
   25394/   13F34 :                     
   25395/   13F34 :                     Obj0A_Main:				; XREF: Obj0A_Index
   25396/   13F34 : 5428 0024           		addq.b	#2,$24(a0)
   25397/   13F38 : 217C 0001 2ADC 0004 		move.l	#Map_obj64,4(a0)
   25398/   13F40 : 317C 8348 0002      		move.w	#$8348,2(a0)
   25399/   13F46 : 117C 0084 0001      		move.b	#$84,1(a0)
   25400/   13F4C : 117C 0010 0019      		move.b	#$10,$19(a0)
   25401/   13F52 : 117C 0001 0018      		move.b	#1,$18(a0)
   25402/   13F58 : 1028 0028           		move.b	$28(a0),d0
   25403/   13F5C : 6A1E                		bpl.s	loc_13D00
   25404/   13F5E : 5028 0024           		addq.b	#8,$24(a0)
   25405/   13F62 : 217C 0001 43CC 0004 		move.l	#Map_obj0A,4(a0)
   25406/   13F6A : 317C 0440 0002      		move.w	#$440,2(a0)
   25407/   13F70 : 0240 007F           		andi.w	#$7F,d0
   25408/   13F74 : 1140 0033           		move.b	d0,$33(a0)
   25409/   13F78 : 6000 019E           		bra.w	Obj0A_Countdown
   25410/   13F7C :                     ; ===========================================================================
   25411/   13F7C :                     
   25412/   13F7C :                     loc_13D00:
   25413/   13F7C : 1140 001C           		move.b	d0,$1C(a0)
   25414/   13F80 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   25415/   13F86 : 317C FF78 0012      		move.w	#-$88,$12(a0)
   25416/   13F8C :                     
   25417/   13F8C :                     Obj0A_Animate:				; XREF: Obj0A_Index
   25418/   13F8C : 43F9 0001 4334      		lea	(Ani_obj0A).l,a1
   25419/   13F92 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   25420/   13F98 :                     
   25421/   13F98 :                     Obj0A_ChkWater:				; XREF: Obj0A_Index
   25422/   13F98 : 3038 F646           		move.w	($FFFFF646).w,d0
   25423/   13F9C : B068 000C           		cmp.w	$C(a0),d0	; has bubble reached the water surface?
   25424/   13FA0 : 6514                		bcs.s	Obj0A_Wobble	; if not, branch
   25425/   13FA2 : 117C 0006 0024      		move.b	#6,$24(a0)
   25426/   13FA8 : 5E28 001C           		addq.b	#7,$1C(a0)
   25427/   13FAC : 0C28 000D 001C      		cmpi.b	#$D,$1C(a0)
   25428/   13FB2 : 6746                		beq.s	Obj0A_Display
   25429/   13FB4 : 6044                		bra.s	Obj0A_Display
   25430/   13FB6 :                     ; ===========================================================================
   25431/   13FB6 :                     
   25432/   13FB6 :                     Obj0A_Wobble:
   25433/   13FB6 : 4A38 F7C7           		tst.b	($FFFFF7C7).w
   25434/   13FBA : 6704                		beq.s	loc_13D44
   25435/   13FBC : 5868 0030           		addq.w	#4,$30(a0)
   25436/   13FC0 :                     
   25437/   13FC0 :                     loc_13D44:
   25438/   13FC0 : 1028 0026           		move.b	$26(a0),d0
   25439/   13FC4 : 5228 0026           		addq.b	#1,$26(a0)
   25440/   13FC8 : 0240 007F           		andi.w	#$7F,d0
   25441/   13FCC : 43F9 0001 4098      		lea	(Obj0A_WobbleData).l,a1
   25442/   13FD2 : 1031 0000           		move.b	(a1,d0.w),d0
   25443/   13FD6 : 4880                		ext.w	d0
   25444/   13FD8 : D068 0030           		add.w	$30(a0),d0
   25445/   13FDC : 3140 0008           		move.w	d0,8(a0)
   25446/   13FE0 : 616A                		bsr.s	Obj0A_ShowNumber
   25447/   13FE2 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   25448/   13FE8 : 4A28 0001           		tst.b	1(a0)
   25449/   13FEC : 6A06                		bpl.s	Obj0A_Delete
   25450/   13FEE : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   25451/   13FF4 :                     ; ===========================================================================
   25452/   13FF4 :                     
   25453/   13FF4 :                     Obj0A_Delete:
   25454/   13FF4 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   25455/   13FFA :                     ; ===========================================================================
   25456/   13FFA :                     
   25457/   13FFA :                     Obj0A_Display:				; XREF: Obj0A_Index
   25458/   13FFA : 6150                		bsr.s	Obj0A_ShowNumber
   25459/   13FFC : 43F9 0001 4334      		lea	(Ani_obj0A).l,a1
   25460/   14002 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   25461/   14008 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   25462/   1400E :                     ; ===========================================================================
   25463/   1400E :                     
   25464/   1400E :                     Obj0A_Delete2:				; XREF: Obj0A_Index
   25465/   1400E : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   25466/   14014 :                     ; ===========================================================================
   25467/   14014 :                     
   25468/   14014 :                     Obj0A_AirLeft:				; XREF: Obj0A_Index
   25469/   14014 : 0C78 000C FE14      		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
   25470/   1401A : 622A                		bhi.s	Obj0A_Delete3	; if higher than $C, branch
   25471/   1401C : 5368 0038           		subq.w	#1,$38(a0)
   25472/   14020 : 660C                		bne.s	Obj0A_Display2
   25473/   14022 : 117C 000E 0024      		move.b	#$E,$24(a0)
   25474/   14028 : 5E28 001C           		addq.b	#7,$1C(a0)
   25475/   1402C : 60CC                		bra.s	Obj0A_Display
   25476/   1402E :                     ; ===========================================================================
   25477/   1402E :                     
   25478/   1402E :                     Obj0A_Display2:
   25479/   1402E : 43F9 0001 4334      		lea	(Ani_obj0A).l,a1
   25480/   14034 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   25481/   1403A : 4A28 0001           		tst.b	1(a0)
   25482/   1403E : 6A06                		bpl.s	Obj0A_Delete3
   25483/   14040 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   25484/   14046 :                     ; ===========================================================================
   25485/   14046 :                     
   25486/   14046 :                     Obj0A_Delete3:
   25487/   14046 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   25488/   1404C :                     ; ===========================================================================
   25489/   1404C :                     
   25490/   1404C :                     Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
   25491/   1404C : 4A68 0038           		tst.w	$38(a0)
   25492/   14050 : 6744                		beq.s	locret_13E1A
   25493/   14052 : 5368 0038           		subq.w	#1,$38(a0)
   25494/   14056 : 663E                		bne.s	locret_13E1A
   25495/   14058 : 0C28 0007 001C      		cmpi.b	#7,$1C(a0)
   25496/   1405E : 6436                		bcc.s	locret_13E1A
   25497/   14060 : 317C 000F 0038      		move.w	#$F,$38(a0)
   25498/   14066 : 4268 0012           		clr.w	$12(a0)
   25499/   1406A : 117C 0080 0001      		move.b	#$80,1(a0)
   25500/   14070 : 3028 0008           		move.w	8(a0),d0
   25501/   14074 : 9078 F700           		sub.w	($FFFFF700).w,d0
   25502/   14078 : 0640 0080           		addi.w	#$80,d0
   25503/   1407C : 3140 0008           		move.w	d0,8(a0)
   25504/   14080 : 3028 000C           		move.w	$C(a0),d0
   25505/   14084 : 9078 F704           		sub.w	($FFFFF704).w,d0
   25506/   14088 : 0640 0080           		addi.w	#$80,d0
   25507/   1408C : 3140 000A           		move.w	d0,$A(a0)
   25508/   14090 : 117C 000C 0024      		move.b	#$C,$24(a0)
   25509/   14096 :                     
   25510/   14096 :                     locret_13E1A:
   25511/   14096 : 4E75                		rts	
   25512/   14098 :                     ; ===========================================================================
   25513/   14098 :                     Obj0A_WobbleData:
   25514/   14098 : 0000 0000 0000 0101 		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
                    0101 0102 0202 0202 
                    02                  
   25515/   140A9 : 0203 0303 0303 0303 		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
                    0303 0303 0303 0304 
                    03                  
   25516/   140BA : 0303 0303 0303 0303 		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
                    0303 0303 0302 0202 
                    02                  
   25517/   140CB : 0202 0201 0101 0101 		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
                    0000 0000 0000 FFFF 
   25518/   140DB : FFFF FFFE FEFE FEFE 		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
                    FDFD FDFD FD        
   25519/   140E8 : FDFD FCFC FCFC FCFC 		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
                    FCFC FCFC FC        
   25520/   140F5 : FCFC FCFC FCFC FCFC 		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
                    FCFC FCFC FC        
   25521/   14102 : FCFC FCFC FCFD FDFD 		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
                    FDFD FDFD FE        
   25522/   1410F : FEFE FEFE FFFF FFFF 		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
                    FF                  
   25523/   14118 :                     ; ===========================================================================
   25524/   14118 :                     
   25525/   14118 :                     Obj0A_Countdown:			; XREF: Obj0A_Index
   25526/   14118 : 4A68 002C           		tst.w	$2C(a0)
   25527/   1411C : 6600 00E4           		bne.w	loc_13F86
   25528/   14120 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
   25529/   14126 : 6400 01E0           		bcc.w	locret_1408C
   25530/   1412A : 0838 0006 D022      		btst	#6,($FFFFD022).w
   25531/   14130 : 6700 01D6           		beq.w	locret_1408C
   25532/   14134 : 5368 0038           		subq.w	#1,$38(a0)
   25533/   14138 : 6A00 00EE           		bpl.w	loc_13FAC
   25534/   1413C : 317C 003B 0038      		move.w	#59,$38(a0)
   25535/   14142 : 317C 0001 0036      		move.w	#1,$36(a0)
   25536/   14148 : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   25537/   1414E : 0240 0001           		andi.w	#1,d0
   25538/   14152 : 1140 0034           		move.b	d0,$34(a0)
   25539/   14156 : 3038 FE14           		move.w	($FFFFFE14).w,d0 ; check air remaining
   25540/   1415A : 0C40 0019           		cmpi.w	#$19,d0
   25541/   1415E : 6732                		beq.s	Obj0A_WarnSound	; play sound if	air is $19
   25542/   14160 : 0C40 0014           		cmpi.w	#$14,d0
   25543/   14164 : 672C                		beq.s	Obj0A_WarnSound
   25544/   14166 : 0C40 000F           		cmpi.w	#$F,d0
   25545/   1416A : 6726                		beq.s	Obj0A_WarnSound
   25546/   1416C : 0C40 000C           		cmpi.w	#$C,d0
   25547/   14170 : 622A                		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
   25548/   14172 : 660A                		bne.s	loc_13F02
   25549/   14174 : 303C 0092           		move.w	#$92,d0
   25550/   14178 : 4EB9 0000 1396      		jsr	(PlaySound).l	; play countdown music
   25551/   1417E :                     
   25552/   1417E :                     loc_13F02:
   25553/   1417E : 5328 0032           		subq.b	#1,$32(a0)
   25554/   14182 : 6A18                		bpl.s	Obj0A_ReduceAir
   25555/   14184 : 1168 0033 0032      		move.b	$33(a0),$32(a0)
   25556/   1418A : 08E8 0007 0036      		bset	#7,$36(a0)
   25557/   14190 : 600A                		bra.s	Obj0A_ReduceAir
   25558/   14192 :                     ; ===========================================================================
   25559/   14192 :                     
   25560/   14192 :                     Obj0A_WarnSound:			; XREF: Obj0A_Countdown
   25561/   14192 : 303C 00C2           		move.w	#$C2,d0
   25562/   14196 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
   25563/   1419C :                     
   25564/   1419C :                     Obj0A_ReduceAir:
   25565/   1419C : 5378 FE14           		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
   25566/   141A0 : 6400 0084           		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
   25567/   141A4 : 6100 0164           		bsr.w	ResumeMusic
   25568/   141A8 : 11FC 0081 F7C8      		move.b	#$81,($FFFFF7C8).w ; lock controls
   25569/   141AE : 303C 00B2           		move.w	#$B2,d0
   25570/   141B2 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play drowning sound
   25571/   141B8 : 117C 000A 0034      		move.b	#$A,$34(a0)
   25572/   141BE : 317C 0001 0036      		move.w	#1,$36(a0)
   25573/   141C4 : 317C 0078 002C      		move.w	#$78,$2C(a0)
   25574/   141CA : 2F08                		move.l	a0,-(sp)
   25575/   141CC : 41F8 D000           		lea	($FFFFD000).w,a0
   25576/   141D0 : 6100 F83C           		bsr.w	Sonic_ResetOnFloor
   25577/   141D4 : 117C 0017 001C      		move.b	#$17,$1C(a0)	; use Sonic"s drowning animation
   25578/   141DA : 08E8 0001 0022      		bset	#1,$22(a0)
   25579/   141E0 : 08E8 0007 0002      		bset	#7,2(a0)
   25580/   141E6 : 317C 0000 0012      		move.w	#0,$12(a0)
   25581/   141EC : 317C 0000 0010      		move.w	#0,$10(a0)
   25582/   141F2 : 317C 0000 0014      		move.w	#0,$14(a0)
   25583/   141F8 : 11FC 0001 F744      		move.b	#1,($FFFFF744).w
   25584/   141FE : 205F                		movea.l	(sp)+,a0
   25585/   14200 : 4E75                		rts	
   25586/   14202 :                     ; ===========================================================================
   25587/   14202 :                     
   25588/   14202 :                     loc_13F86:
   25589/   14202 : 5368 002C           		subq.w	#1,$2C(a0)
   25590/   14206 : 6608                		bne.s	loc_13F94
   25591/   14208 : 11FC 0006 D024      		move.b	#6,($FFFFD024).w
   25592/   1420E : 4E75                		rts	
   25593/   14210 :                     ; ===========================================================================
   25594/   14210 :                     
   25595/   14210 :                     loc_13F94:
   25596/   14210 : 2F08                		move.l	a0,-(sp)
   25597/   14212 : 41F8 D000           		lea	($FFFFD000).w,a0
   25598/   14216 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   25599/   1421C : 0668 0010 0012      		addi.w	#$10,$12(a0)
   25600/   14222 : 205F                		movea.l	(sp)+,a0
   25601/   14224 : 6002                		bra.s	loc_13FAC
   25602/   14226 :                     ; ===========================================================================
   25603/   14226 :                     
   25604/   14226 :                     Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
   25605/   14226 : 6010                		bra.s	Obj0A_MakeItem
   25606/   14228 :                     ; ===========================================================================
   25607/   14228 :                     
   25608/   14228 :                     loc_13FAC:
   25609/   14228 : 4A68 0036           		tst.w	$36(a0)
   25610/   1422C : 6700 00DA           		beq.w	locret_1408C
   25611/   14230 : 5368 003A           		subq.w	#1,$3A(a0)
   25612/   14234 : 6A00 00D2           		bpl.w	locret_1408C
   25613/   14238 :                     
   25614/   14238 :                     Obj0A_MakeItem:
   25615/   14238 : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   25616/   1423E : 0240 000F           		andi.w	#$F,d0
   25617/   14242 : 3140 003A           		move.w	d0,$3A(a0)
   25618/   14246 : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   25619/   1424C : 6600 00BA           		bne.w	locret_1408C
   25620/   14250 : (MACRO)             		_move.b	#$A,0(a1)	; load object
   25620/   14250 :  (MACRO-2)                          insn2op move.b, #$A,0(a1)
   25620/   14250 : 137C 000A 0001                              !move.b   #$A,1+0(a1)
   25620/   14255 :                                             !org    *-1
   25620/   14255 : 00                                          !dc.b   0
   25621/   14256 : 3378 D008 0008      		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
   25622/   1425C : 7006                		moveq	#6,d0
   25623/   1425E : 0838 0000 D022      		btst	#0,($FFFFD022).w
   25624/   14264 : 6708                		beq.s	loc_13FF2
   25625/   14266 : 4440                		neg.w	d0
   25626/   14268 : 137C 0040 0026      		move.b	#$40,$26(a1)
   25627/   1426E :                     
   25628/   1426E :                     loc_13FF2:
   25629/   1426E : D169 0008           		add.w	d0,8(a1)
   25630/   14272 : 3378 D00C 000C      		move.w	($FFFFD00C).w,$C(a1)
   25631/   14278 : 137C 0006 0028      		move.b	#6,$28(a1)
   25632/   1427E : 4A68 002C           		tst.w	$2C(a0)
   25633/   14282 : 6700 0036           		beq.w	loc_1403E
   25634/   14286 : 0268 0007 003A      		andi.w	#7,$3A(a0)
   25635/   1428C : 0668 0000 003A      		addi.w	#0,$3A(a0)
   25636/   14292 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   25637/   14296 : 0440 000C           		subi.w	#$C,d0
   25638/   1429A : 3340 000C           		move.w	d0,$C(a1)
   25639/   1429E : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   25640/   142A4 : 1340 0026           		move.b	d0,$26(a1)
   25641/   142A8 : 3038 FE04           		move.w	($FFFFFE04).w,d0
   25642/   142AC : 0200 0003           		andi.b	#3,d0
   25643/   142B0 : 664C                		bne.s	loc_14082
   25644/   142B2 : 137C 000E 0028      		move.b	#$E,$28(a1)
   25645/   142B8 : 6044                		bra.s	loc_14082
   25646/   142BA :                     ; ===========================================================================
   25647/   142BA :                     
   25648/   142BA :                     loc_1403E:
   25649/   142BA : 0828 0007 0036      		btst	#7,$36(a0)
   25650/   142C0 : 673C                		beq.s	loc_14082
   25651/   142C2 : 3438 FE14           		move.w	($FFFFFE14).w,d2
   25652/   142C6 : E24A                		lsr.w	#1,d2
   25653/   142C8 : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   25654/   142CE : 0240 0003           		andi.w	#3,d0
   25655/   142D2 : 6612                		bne.s	loc_1406A
   25656/   142D4 : 08E8 0006 0036      		bset	#6,$36(a0)
   25657/   142DA : 6622                		bne.s	loc_14082
   25658/   142DC : 1342 0028           		move.b	d2,$28(a1)
   25659/   142E0 : 337C 001C 0038      		move.w	#$1C,$38(a1)
   25660/   142E6 :                     
   25661/   142E6 :                     loc_1406A:
   25662/   142E6 : 4A28 0034           		tst.b	$34(a0)
   25663/   142EA : 6612                		bne.s	loc_14082
   25664/   142EC : 08E8 0006 0036      		bset	#6,$36(a0)
   25665/   142F2 : 660A                		bne.s	loc_14082
   25666/   142F4 : 1342 0028           		move.b	d2,$28(a1)
   25667/   142F8 : 337C 001C 0038      		move.w	#$1C,$38(a1)
   25668/   142FE :                     
   25669/   142FE :                     loc_14082:
   25670/   142FE : 5328 0034           		subq.b	#1,$34(a0)
   25671/   14302 : 6A04                		bpl.s	locret_1408C
   25672/   14304 : 4268 0036           		clr.w	$36(a0)
   25673/   14308 :                     
   25674/   14308 :                     locret_1408C:
   25675/   14308 : 4E75                		rts	
   25676/   1430A :                     
   25677/   1430A :                     ; ---------------------------------------------------------------------------
   25678/   1430A :                     ; Subroutine to	play music for LZ/SBZ3 after a countdown
   25679/   1430A :                     ; ---------------------------------------------------------------------------
   25680/   1430A :                     
   25681/   1430A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25682/   1430A :                     
   25683/   1430A :                     
   25684/   1430A :                     ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
   25685/   1430A : 0C78 000C FE14      		cmpi.w	#$C,($FFFFFE14).w
   25686/   14310 : 6216                		bhi.s	loc_140AC
   25687/   14312 : 303C 0082           		move.w	#$82,d0		; play LZ music
   25688/   14316 : 0C78 0103 FE10      		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
   25689/   1431C : 6604                		bne.s	loc_140A6
   25690/   1431E : 303C 0086           		move.w	#$86,d0		; play SBZ music
   25691/   14322 :                     
   25692/   14322 :                     loc_140A6:
   25693/   14322 : 4EB9 0000 1396      		jsr	(PlaySound).l
   25694/   14328 :                     
   25695/   14328 :                     loc_140AC:
   25696/   14328 : 31FC 001E FE14      		move.w	#$1E,($FFFFFE14).w
   25697/   1432E : 4238 D372           		clr.b	($FFFFD372).w
   25698/   14332 : 4E75                		rts	
   25699/   14334 :                     ; End of function ResumeMusic
   25700/   14334 :                     
   25701/   14334 :                     ; ===========================================================================
   25702/   14334 :                     Ani_obj0A:
   25703/   14334 :                     		include	"_anim/obj0A.asm"
(1)    1/   14334 :                     ; ---------------------------------------------------------------------------
(1)    2/   14334 :                     ; Animation script - countdown numbers and bubbles (LZ)
(1)    3/   14334 :                     ; ---------------------------------------------------------------------------
(1)    4/   14334 : 001E                		dc.w byte_140D6-Ani_obj0A
(1)    5/   14336 : 0028                		dc.w byte_140E0-Ani_obj0A
(1)    6/   14338 : 0032                		dc.w byte_140EA-Ani_obj0A
(1)    7/   1433A : 003C                		dc.w byte_140F4-Ani_obj0A
(1)    8/   1433C : 0046                		dc.w byte_140FE-Ani_obj0A
(1)    9/   1433E : 0050                		dc.w byte_14108-Ani_obj0A
(1)   10/   14340 : 005A                		dc.w byte_14112-Ani_obj0A
(1)   11/   14342 : 0060                		dc.w byte_14118-Ani_obj0A
(1)   12/   14344 : 0068                		dc.w byte_14120-Ani_obj0A
(1)   13/   14346 : 0070                		dc.w byte_14128-Ani_obj0A
(1)   14/   14348 : 0078                		dc.w byte_14130-Ani_obj0A
(1)   15/   1434A : 0080                		dc.w byte_14138-Ani_obj0A
(1)   16/   1434C : 0088                		dc.w byte_14140-Ani_obj0A
(1)   17/   1434E : 0090                		dc.w byte_14148-Ani_obj0A
(1)   18/   14350 : 0092                		dc.w byte_1414A-Ani_obj0A
(1)   19/   14352 : 0500 0102 0304 090D byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
                    FC00                
(1)   20/   1435C : 0500 0102 0304 0C12 byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
                    FC00                
(1)   21/   14366 : 0500 0102 0304 0C11 byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
                    FC00                
(1)   22/   14370 : 0500 0102 0304 0B10 byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
                    FC00                
(1)   23/   1437A : 0500 0102 0304 090F byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
                    FC00                
(1)   24/   14384 : 0500 0102 0304 0A0E byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
                    FC00                
(1)   25/   1438E : 0E00 0102 FC00      byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
(1)   26/   14394 : 0716 0D16 0D16 0DFC byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
(1)   27/   1439C : 0716 1216 1216 12FC byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
(1)   28/   143A4 : 0716 1116 1116 11FC byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
(1)   29/   143AC : 0716 1016 1016 10FC byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
(1)   30/   143B4 : 0716 0F16 0F16 0FFC byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
(1)   31/   143BC : 0716 0E16 0E16 0EFC byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
(1)   32/   143C4 : 0EFC                byte_14148:	dc.b $E, $FC
(1)   33/   143C6 : 0E01 0203 04FC      byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
(1)   34/   143CC : (MACRO)             		align 2
(1)   34/   143CC :  (MACRO-2)                  cnop 0,2
(1)   34/   143CC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   25704/   143CC :                     
   25705/   143CC :                     ; ---------------------------------------------------------------------------
   25706/   143CC :                     ; Sprite mappings - drowning countdown numbers (LZ)
   25707/   143CC :                     ; ---------------------------------------------------------------------------
   25708/   143CC :                     Map_obj0A:
   25709/   143CC :                     		include	"_maps/obj0A.asm"
(1)    1/   143CC :                     ; ---------------------------------------------------------------------------
(1)    2/   143CC :                     ; Sprite mappings - drowning countdown numbers (LZ)
(1)    3/   143CC :                     ; ---------------------------------------------------------------------------
(1)    4/   143CC : 0002                		dc.w byte_14152-Map_obj0A
(1)    5/   143CE : 01                  byte_14152:	dc.b 1
(1)    6/   143CF : E80E 0000 F2        		dc.b $E8, $E, 0, 0, $F2
(1)    7/   143D4 : (MACRO)             		align 2
(1)    7/   143D4 :  (MACRO-2)                  cnop 0,2
(1)    7/   143D4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   25710/   143D4 :                     
   25711/   143D4 :                     ; ===========================================================================
   25712/   143D4 :                     ; ---------------------------------------------------------------------------
   25713/   143D4 :                     ; Object 38 - shield and invincibility stars
   25714/   143D4 :                     ; ---------------------------------------------------------------------------
   25715/   143D4 :                     
   25716/   143D4 :                     Obj38:					; XREF: Obj_Index
   25717/   143D4 : 7000                		moveq	#0,d0
   25718/   143D6 : 1028 0024           		move.b	$24(a0),d0
   25719/   143DA : 323B 0006           		move.w	Obj38_Index(pc,d0.w),d1
   25720/   143DE : 4EFB 1002           		jmp	Obj38_Index(pc,d1.w)
   25721/   143E2 :                     ; ===========================================================================
   25722/   143E2 : 0006                Obj38_Index:	dc.w Obj38_Main-Obj38_Index
   25723/   143E4 : 003E                		dc.w Obj38_Shield-Obj38_Index
   25724/   143E6 : 0076                		dc.w Obj38_Stars-Obj38_Index
   25725/   143E8 :                     ; ===========================================================================
   25726/   143E8 :                     
   25727/   143E8 :                     Obj38_Main:				; XREF: Obj38_Index
   25728/   143E8 : 5428 0024           		addq.b	#2,$24(a0)
   25729/   143EC : 217C 0001 462E 0004 		move.l	#Map_obj38,4(a0)
   25730/   143F4 : 117C 0004 0001      		move.b	#4,1(a0)
   25731/   143FA : 117C 0001 0018      		move.b	#1,$18(a0)
   25732/   14400 : 117C 0010 0019      		move.b	#$10,$19(a0)
   25733/   14406 : 4A28 001C           		tst.b	$1C(a0)		; is object a shield?
   25734/   1440A : 6608                		bne.s	Obj38_DoStars	; if not, branch
   25735/   1440C : 317C 0541 0002      		move.w	#$541,2(a0)	; shield specific code
   25736/   14412 : 4E75                		rts	
   25737/   14414 :                     ; ===========================================================================
   25738/   14414 :                     
   25739/   14414 :                     Obj38_DoStars:
   25740/   14414 : 5428 0024           		addq.b	#2,$24(a0)	; stars	specific code
   25741/   14418 : 317C 055C 0002      		move.w	#$55C,2(a0)
   25742/   1441E : 4E75                		rts	
   25743/   14420 :                     ; ===========================================================================
   25744/   14420 :                     
   25745/   14420 :                     Obj38_Shield:				; XREF: Obj38_Index
   25746/   14420 : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
   25747/   14424 : 662A                		bne.s	Obj38_RmvShield	; if yes, branch
   25748/   14426 : 4A38 FE2C           		tst.b	($FFFFFE2C).w	; does Sonic have shield?
   25749/   1442A : 6726                		beq.s	Obj38_Delete	; if not, branch
   25750/   1442C : 3178 D008 0008      		move.w	($FFFFD008).w,8(a0)
   25751/   14432 : 3178 D00C 000C      		move.w	($FFFFD00C).w,$C(a0)
   25752/   14438 : 1178 D022 0022      		move.b	($FFFFD022).w,$22(a0)
   25753/   1443E : 43F9 0001 45C8      		lea	(Ani_obj38).l,a1
   25754/   14444 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   25755/   1444A : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   25756/   14450 :                     ; ===========================================================================
   25757/   14450 :                     
   25758/   14450 :                     Obj38_RmvShield:
   25759/   14450 : 4E75                		rts	
   25760/   14452 :                     ; ===========================================================================
   25761/   14452 :                     
   25762/   14452 :                     Obj38_Delete:
   25763/   14452 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   25764/   14458 :                     ; ===========================================================================
   25765/   14458 :                     
   25766/   14458 :                     Obj38_Stars:				; XREF: Obj38_Index
   25767/   14458 : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
   25768/   1445C : 676C                		beq.s	Obj38_Delete2	; if not, branch
   25769/   1445E : 3038 F7A8           		move.w	($FFFFF7A8).w,d0
   25770/   14462 : 1228 001C           		move.b	$1C(a0),d1
   25771/   14466 : 5301                		subq.b	#1,d1
   25772/   14468 : 6018                		bra.s	Obj38_StarTrail
   25773/   1446A :                     ; ===========================================================================
   25774/   1446A : E909                		lsl.b	#4,d1
   25775/   1446C : 5801                		addq.b	#4,d1
   25776/   1446E : 9001                		sub.b	d1,d0
   25777/   14470 : 1228 0030           		move.b	$30(a0),d1
   25778/   14474 : 9001                		sub.b	d1,d0
   25779/   14476 : 5801                		addq.b	#4,d1
   25780/   14478 : 0201 000F           		andi.b	#$F,d1
   25781/   1447C : 1141 0030           		move.b	d1,$30(a0)
   25782/   14480 : 6020                		bra.s	Obj38_StarTrail2a
   25783/   14482 :                     ; ===========================================================================
   25784/   14482 :                     
   25785/   14482 :                     Obj38_StarTrail:			; XREF: Obj38_Stars
   25786/   14482 : E709                		lsl.b	#3,d1
   25787/   14484 : 1401                		move.b	d1,d2
   25788/   14486 : D201                		add.b	d1,d1
   25789/   14488 : D202                		add.b	d2,d1
   25790/   1448A : 5801                		addq.b	#4,d1
   25791/   1448C : 9001                		sub.b	d1,d0
   25792/   1448E : 1228 0030           		move.b	$30(a0),d1
   25793/   14492 : 9001                		sub.b	d1,d0
   25794/   14494 : 5801                		addq.b	#4,d1
   25795/   14496 : 0C01 0018           		cmpi.b	#$18,d1
   25796/   1449A : 6502                		bcs.s	Obj38_StarTrail2
   25797/   1449C : 7200                		moveq	#0,d1
   25798/   1449E :                     
   25799/   1449E :                     Obj38_StarTrail2:
   25800/   1449E : 1141 0030           		move.b	d1,$30(a0)
   25801/   144A2 :                     
   25802/   144A2 :                     Obj38_StarTrail2a:
   25803/   144A2 : 43F8 CB00           		lea	($FFFFCB00).w,a1
   25804/   144A6 : 43F1 0000           		lea	(a1,d0.w),a1
   25805/   144AA : 3159 0008           		move.w	(a1)+,8(a0)
   25806/   144AE : 3159 000C           		move.w	(a1)+,$C(a0)
   25807/   144B2 : 1178 D022 0022      		move.b	($FFFFD022).w,$22(a0)
   25808/   144B8 : 43F9 0001 45C8      		lea	(Ani_obj38).l,a1
   25809/   144BE : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   25810/   144C4 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   25811/   144CA :                     ; ===========================================================================
   25812/   144CA :                     
   25813/   144CA :                     Obj38_Delete2:				; XREF: Obj38_Stars
   25814/   144CA : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   25815/   144D0 :                     ; ===========================================================================
   25816/   144D0 :                     ; ---------------------------------------------------------------------------
   25817/   144D0 :                     ; Object 4A - special stage entry from beta
   25818/   144D0 :                     ; ---------------------------------------------------------------------------
   25819/   144D0 :                     
   25820/   144D0 :                     Obj4A:					; XREF: Obj_Index
   25821/   144D0 : 7000                		moveq	#0,d0
   25822/   144D2 : 1028 0024           		move.b	$24(a0),d0
   25823/   144D6 : 323B 0006           		move.w	Obj4A_Index(pc,d0.w),d1
   25824/   144DA : 4EFB 1002           		jmp	Obj4A_Index(pc,d1.w)
   25825/   144DE :                     ; ===========================================================================
   25826/   144DE : 0006                Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
   25827/   144E0 : 0038                		dc.w Obj4A_RmvSonic-Obj4A_Index
   25828/   144E2 : 007A                		dc.w Obj4A_LoadSonic-Obj4A_Index
   25829/   144E4 :                     ; ===========================================================================
   25830/   144E4 :                     
   25831/   144E4 :                     Obj4A_Main:				; XREF: Obj4A_Index
   25832/   144E4 : 4AB8 F680           		tst.l	($FFFFF680).w	; are pattern load cues	empty?
   25833/   144E8 : 6702                		beq.s	Obj4A_Main2	; if yes, branch
   25834/   144EA : 4E75                		rts	
   25835/   144EC :                     ; ===========================================================================
   25836/   144EC :                     
   25837/   144EC :                     Obj4A_Main2:
   25838/   144EC : 5428 0024           		addq.b	#2,$24(a0)
   25839/   144F0 : 217C 0001 46E8 0004 		move.l	#Map_obj4A,4(a0)
   25840/   144F8 : 117C 0004 0001      		move.b	#4,1(a0)
   25841/   144FE : 117C 0001 0018      		move.b	#1,$18(a0)
   25842/   14504 : 117C 0038 0019      		move.b	#$38,$19(a0)
   25843/   1450A : 317C 0541 0002      		move.w	#$541,2(a0)
   25844/   14510 : 317C 0078 0030      		move.w	#120,$30(a0)	; set time for Sonic"s disappearance to 2 seconds
   25845/   14516 :                     
   25846/   14516 :                     Obj4A_RmvSonic:				; XREF: Obj4A_Index
   25847/   14516 : 3178 D008 0008      		move.w	($FFFFD008).w,8(a0)
   25848/   1451C : 3178 D00C 000C      		move.w	($FFFFD00C).w,$C(a0)
   25849/   14522 : 1178 D022 0022      		move.b	($FFFFD022).w,$22(a0)
   25850/   14528 : 43F9 0001 46D2      		lea	(Ani_obj4A).l,a1
   25851/   1452E : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   25852/   14534 : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)
   25853/   1453A : 6616                		bne.s	Obj4A_Display
   25854/   1453C : 4A38 D000           		tst.b	($FFFFD000).w
   25855/   14540 : 6710                		beq.s	Obj4A_Display
   25856/   14542 : 11FC 0000 D000      		move.b	#0,($FFFFD000).w ; remove Sonic
   25857/   14548 : 303C 00A8           		move.w	#$A8,d0
   25858/   1454C : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
   25859/   14552 :                     
   25860/   14552 :                     Obj4A_Display:
   25861/   14552 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   25862/   14558 :                     ; ===========================================================================
   25863/   14558 :                     
   25864/   14558 :                     Obj4A_LoadSonic:			; XREF: Obj4A_Index
   25865/   14558 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time
   25866/   1455C : 660C                		bne.s	Obj4A_Wait	; if time remains, branch
   25867/   1455E : 11FC 0001 D000      		move.b	#1,($FFFFD000).w ; load	Sonic object
   25868/   14564 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   25869/   1456A :                     ; ===========================================================================
   25870/   1456A :                     
   25871/   1456A :                     Obj4A_Wait:
   25872/   1456A : 4E75                		rts	
   25873/   1456C :                     ; ===========================================================================
   25874/   1456C :                     ; ---------------------------------------------------------------------------
   25875/   1456C :                     ; Object 08 - water splash (LZ)
   25876/   1456C :                     ; ---------------------------------------------------------------------------
   25877/   1456C :                     
   25878/   1456C :                     Obj08:					; XREF: Obj_Index
   25879/   1456C : 7000                		moveq	#0,d0
   25880/   1456E : 1028 0024           		move.b	$24(a0),d0
   25881/   14572 : 323B 0006           		move.w	Obj08_Index(pc,d0.w),d1
   25882/   14576 : 4EFB 1002           		jmp	Obj08_Index(pc,d1.w)
   25883/   1457A :                     ; ===========================================================================
   25884/   1457A : 0006                Obj08_Index:	dc.w Obj08_Main-Obj08_Index
   25885/   1457C : 0030                		dc.w Obj08_Display-Obj08_Index
   25886/   1457E : 0048                		dc.w Obj08_Delete-Obj08_Index
   25887/   14580 :                     ; ===========================================================================
   25888/   14580 :                     
   25889/   14580 :                     Obj08_Main:				; XREF: Obj08_Index
   25890/   14580 : 5428 0024           		addq.b	#2,$24(a0)
   25891/   14584 : 217C 0001 4848 0004 		move.l	#Map_obj08,4(a0)
   25892/   1458C : 0028 0004 0001      		ori.b	#4,1(a0)
   25893/   14592 : 117C 0001 0018      		move.b	#1,$18(a0)
   25894/   14598 : 117C 0010 0019      		move.b	#$10,$19(a0)
   25895/   1459E : 317C 4259 0002      		move.w	#$4259,2(a0)
   25896/   145A4 : 3178 D008 0008      		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
   25897/   145AA :                     
   25898/   145AA :                     Obj08_Display:				; XREF: Obj08_Index
   25899/   145AA : 3178 F646 000C      		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
   25900/   145B0 : 43F9 0001 4840      		lea	(Ani_obj08).l,a1
   25901/   145B6 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   25902/   145BC : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   25903/   145C2 :                     ; ===========================================================================
   25904/   145C2 :                     
   25905/   145C2 :                     Obj08_Delete:				; XREF: Obj08_Index
   25906/   145C2 : 4EF9 0000 D74A      		jmp	(DeleteObject).l	; delete when animation	is complete
   25907/   145C8 :                     ; ===========================================================================
   25908/   145C8 :                     Ani_obj38:
   25909/   145C8 :                     		include	"_anim/obj38.asm"
(1)    1/   145C8 :                     ; ---------------------------------------------------------------------------
(1)    2/   145C8 :                     ; Animation script - shield and invincibility stars
(1)    3/   145C8 :                     ; ---------------------------------------------------------------------------
(1)    4/   145C8 : 000A                		dc.w byte_14356-Ani_obj38
(1)    5/   145CA : 0012                		dc.w byte_1435E-Ani_obj38
(1)    6/   145CC : 0018                		dc.w byte_14364-Ani_obj38
(1)    7/   145CE : 0032                		dc.w byte_1437E-Ani_obj38
(1)    8/   145D0 : 004C                		dc.w byte_14398-Ani_obj38
(1)    9/   145D2 : 0101 0002 0003 00FF byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
(1)   10/   145DA : 0504 0506 07FF      byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
(1)   11/   145E0 : 0004 0400 0404 0005 byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
                    0500 0505 0006 0600 
                    06                  
(1)   12/   145F1 : 0600 0707 0007 0700 		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
                    FF                  
(1)   13/   145FA : 0004 0400 0400 0005 byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
                    0500 0500 0006 0600 
                    06                  
(1)   14/   1460B : 0000 0707 0007 0000 		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
                    FF                  
(1)   15/   14614 : 0004 0000 0400 0005 byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
                    0000 0500 0006 0000 
                    06                  
(1)   16/   14625 : 0000 0700 0007 0000 		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
                    FF                  
(1)   17/   1462E : (MACRO)             		align 2
(1)   17/   1462E :  (MACRO-2)                  cnop 0,2
(1)   17/   1462E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   25910/   1462E :                     
   25911/   1462E :                     ; ---------------------------------------------------------------------------
   25912/   1462E :                     ; Sprite mappings - shield and invincibility stars
   25913/   1462E :                     ; ---------------------------------------------------------------------------
   25914/   1462E :                     Map_obj38:
   25915/   1462E :                     		include	"_maps/obj38.asm"
(1)    1/   1462E :                     ; ---------------------------------------------------------------------------
(1)    2/   1462E :                     ; Sprite mappings - shield and invincibility stars
(1)    3/   1462E :                     ; ---------------------------------------------------------------------------
(1)    4/   1462E : 001B 0010           		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
(1)    5/   14632 : 0025 003A           		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
(1)    6/   14636 : 004F 0064           		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
(1)    7/   1463A : 0079 008E           		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
(1)    8/   1463E : 04                  byte_143C2:	dc.b 4
(1)    9/   1463F : E80A 0000 E8        		dc.b $E8, $A, 0, 0, $E8
(1)   10/   14644 : E80A 0009 00        		dc.b $E8, $A, 0, 9, 0
(1)   11/   14649 : 000A 1000 E8        byte_143CD:	dc.b 0,	$A, $10, 0, $E8
(1)   12/   1464E : 000A 1009 00        		dc.b 0,	$A, $10, 9, 0
(1)   13/   14653 : 04                  byte_143D7:	dc.b 4
(1)   14/   14654 : E80A 0812 E9        		dc.b $E8, $A, 8, $12, $E9
(1)   15/   14659 : E80A 0012 00        		dc.b $E8, $A, 0, $12, 0
(1)   16/   1465E : 000A 1812 E9        		dc.b 0,	$A, $18, $12, $E9
(1)   17/   14663 : 000A 1012 00        		dc.b 0,	$A, $10, $12, 0
(1)   18/   14668 : 04                  byte_143EC:	dc.b 4
(1)   19/   14669 : E80A 0809 E8        		dc.b $E8, $A, 8, 9, $E8
(1)   20/   1466E : E80A 0800 00        		dc.b $E8, $A, 8, 0, 0
(1)   21/   14673 : 000A 1809 E8        		dc.b 0,	$A, $18, 9, $E8
(1)   22/   14678 : 000A 1800 00        		dc.b 0,	$A, $18, 0, 0
(1)   23/   1467D : 04                  byte_14401:	dc.b 4
(1)   24/   1467E : E80A 0000 E8        		dc.b $E8, $A, 0, 0, $E8
(1)   25/   14683 : E80A 0009 00        		dc.b $E8, $A, 0, 9, 0
(1)   26/   14688 : 000A 1809 E8        		dc.b 0,	$A, $18, 9, $E8
(1)   27/   1468D : 000A 1800 00        		dc.b 0,	$A, $18, 0, 0
(1)   28/   14692 : 04                  byte_14416:	dc.b 4
(1)   29/   14693 : E80A 0809 E8        		dc.b $E8, $A, 8, 9, $E8
(1)   30/   14698 : E80A 0800 00        		dc.b $E8, $A, 8, 0, 0
(1)   31/   1469D : 000A 1000 E8        		dc.b 0,	$A, $10, 0, $E8
(1)   32/   146A2 : 000A 1009 00        		dc.b 0,	$A, $10, 9, 0
(1)   33/   146A7 : 04                  byte_1442B:	dc.b 4
(1)   34/   146A8 : E80A 0012 E8        		dc.b $E8, $A, 0, $12, $E8
(1)   35/   146AD : E80A 001B 00        		dc.b $E8, $A, 0, $1B, 0
(1)   36/   146B2 : 000A 181B E8        		dc.b 0,	$A, $18, $1B, $E8
(1)   37/   146B7 : 000A 1812 00        		dc.b 0,	$A, $18, $12, 0
(1)   38/   146BC : 04                  byte_14440:	dc.b 4
(1)   39/   146BD : E80A 081B E8        		dc.b $E8, $A, 8, $1B, $E8
(1)   40/   146C2 : E80A 0812 00        		dc.b $E8, $A, 8, $12, 0
(1)   41/   146C7 : 000A 1012 E8        		dc.b 0,	$A, $10, $12, $E8
(1)   42/   146CC : 000A 101B 00        		dc.b 0,	$A, $10, $1B, 0
(1)   43/   146D1 : (MACRO)             		align 2
(1)   43/   146D1 :  (MACRO-2)                  cnop 0,2
(1)   43/   146D1 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   43/   146D1 : =$32                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   43/   146D2 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   25916/   146D2 :                     
   25917/   146D2 :                     Ani_obj4A:
   25918/   146D2 :                     		include	"_anim/obj4A.asm"
(1)    1/   146D2 :                     ; ---------------------------------------------------------------------------
(1)    2/   146D2 :                     ; Animation script - special stage entry effect from beta
(1)    3/   146D2 :                     ; ---------------------------------------------------------------------------
(1)    4/   146D2 : 0002                		dc.w byte_14458-Ani_obj4A
(1)    5/   146D4 : 0500 0100 0100 0701 byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
                    0702 0703 0704 0705 
                    0706 07FC           
(1)    6/   146E8 : (MACRO)             		align 2
(1)    6/   146E8 :  (MACRO-2)                  cnop 0,2
(1)    6/   146E8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   25919/   146E8 :                     
   25920/   146E8 :                     ; ---------------------------------------------------------------------------
   25921/   146E8 :                     ; Sprite mappings - special stage entry	from beta
   25922/   146E8 :                     ; ---------------------------------------------------------------------------
   25923/   146E8 :                     Map_obj4A:
   25924/   146E8 :                     		include	"_maps/obj4A.asm"
(1)    1/   146E8 :                     ; ---------------------------------------------------------------------------
(1)    2/   146E8 :                     ; Sprite mappings - special stage entry	from beta
(1)    3/   146E8 :                     ; ---------------------------------------------------------------------------
(1)    4/   146E8 : 0010 0020           		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
(1)    5/   146EC : 0030 004A           		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
(1)    6/   146F0 : 0078 00D3           		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
(1)    7/   146F4 : 0129 0153           		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
(1)    8/   146F8 : 03                  byte_1447C:	dc.b 3
(1)    9/   146F9 : F800 0000 08        		dc.b $F8, 0, 0,	0, 8
(1)   10/   146FE : 0004 0001 00        		dc.b 0,	4, 0, 1, 0
(1)   11/   14703 : 0800 1000 08        		dc.b 8,	0, $10,	0, 8
(1)   12/   14708 : 03                  byte_1448C:	dc.b 3
(1)   13/   14709 : F00D 0003 F0        		dc.b $F0, $D, 0, 3, $F0
(1)   14/   1470E : 000C 000B F0        		dc.b 0,	$C, 0, $B, $F0
(1)   15/   14713 : 080D 1003 F0        		dc.b 8,	$D, $10, 3, $F0
(1)   16/   14718 : 05                  byte_1449C:	dc.b 5
(1)   17/   14719 : E40E 000F F4        		dc.b $E4, $E, 0, $F, $F4
(1)   18/   1471E : EC02 001B EC        		dc.b $EC, 2, 0,	$1B, $EC
(1)   19/   14723 : FC0C 001E F4        		dc.b $FC, $C, 0, $1E, $F4
(1)   20/   14728 : 040E 100F F4        		dc.b 4,	$E, $10, $F, $F4
(1)   21/   1472D : 0401 101B EC        		dc.b 4,	1, $10,	$1B, $EC
(1)   22/   14732 : 09                  byte_144B6:	dc.b 9
(1)   23/   14733 : F008 0022 F8        		dc.b $F0, 8, 0,	$22, $F8
(1)   24/   14738 : F80E 0025 F0        		dc.b $F8, $E, 0, $25, $F0
(1)   25/   1473D : 1008 0031 F0        		dc.b $10, 8, 0,	$31, $F0
(1)   26/   14742 : 0005 0034 10        		dc.b 0,	5, 0, $34, $10
(1)   27/   14747 : F800 0825 10        		dc.b $F8, 0, 8,	$25, $10
(1)   28/   1474C : F000 1836 18        		dc.b $F0, 0, $18, $36, $18
(1)   29/   14751 : F800 1825 20        		dc.b $F8, 0, $18, $25, $20
(1)   30/   14756 : 0000 0825 28        		dc.b 0,	0, 8, $25, $28
(1)   31/   1475B : F800 0025 30        		dc.b $F8, 0, 0,	$25, $30
(1)   32/   14760 : 12                  byte_144E4:	dc.b $12
(1)   33/   14761 : 0000 1825 F0        		dc.b 0,	0, $18,	$25, $F0
(1)   34/   14766 : F804 0038 F8        		dc.b $F8, 4, 0,	$38, $F8
(1)   35/   1476B : F000 0026 08        		dc.b $F0, 0, 0,	$26, 8
(1)   36/   14770 : 0000 0025 00        		dc.b 0,	0, 0, $25, 0
(1)   37/   14775 : 0800 1825 F8        		dc.b 8,	0, $18,	$25, $F8
(1)   38/   1477A : 1000 1026 00        		dc.b $10, 0, $10, $26, 0
(1)   39/   1477F : 0800 1038 08        		dc.b 8,	0, $10,	$38, 8
(1)   40/   14784 : F800 0029 10        		dc.b $F8, 0, 0,	$29, $10
(1)   41/   14789 : 0000 0026 10        		dc.b 0,	0, 0, $26, $10
(1)   42/   1478E : 0000 002D 18        		dc.b 0,	0, 0, $2D, $18
(1)   43/   14793 : 0800 0826 18        		dc.b 8,	0, 8, $26, $18
(1)   44/   14798 : 0800 0029 20        		dc.b 8,	0, 0, $29, $20
(1)   45/   1479D : F800 0026 20        		dc.b $F8, 0, 0,	$26, $20
(1)   46/   147A2 : F800 002D 28        		dc.b $F8, 0, 0,	$2D, $28
(1)   47/   147A7 : 0000 003A 28        		dc.b 0,	0, 0, $3A, $28
(1)   48/   147AC : F800 1826 30        		dc.b $F8, 0, $18, $26, $30
(1)   49/   147B1 : 0000 1025 38        		dc.b 0,	0, $10,	$25, $38
(1)   50/   147B6 : F800 1025 40        		dc.b $F8, 0, $10, $25, $40
(1)   51/   147BB : 11                  byte_1453F:	dc.b $11
(1)   52/   147BC : F800 0825 00        		dc.b $F8, 0, 8,	$25, 0
(1)   53/   147C1 : F000 0038 10        		dc.b $F0, 0, 0,	$38, $10
(1)   54/   147C6 : 1000 0825 00        		dc.b $10, 0, 8,	$25, 0
(1)   55/   147CB : 0000 1825 10        		dc.b 0,	0, $18,	$25, $10
(1)   56/   147D0 : 0800 1025 18        		dc.b 8,	0, $10,	$25, $18
(1)   57/   147D5 : F800 1825 20        		dc.b $F8, 0, $18, $25, $20
(1)   58/   147DA : 0000 1026 28        		dc.b 0,	0, $10,	$26, $28
(1)   59/   147DF : F800 1025 30        		dc.b $F8, 0, $10, $25, $30
(1)   60/   147E4 : 0000 0025 30        		dc.b 0,	0, 0, $25, $30
(1)   61/   147E9 : 0800 0825 30        		dc.b 8,	0, 8, $25, $30
(1)   62/   147EE : 0000 0826 38        		dc.b 0,	0, 8, $26, $38
(1)   63/   147F3 : 0800 0029 38        		dc.b 8,	0, 0, $29, $38
(1)   64/   147F8 : F800 0826 40        		dc.b $F8, 0, 8,	$26, $40
(1)   65/   147FD : 0000 002D 40        		dc.b 0,	0, 0, $2D, $40
(1)   66/   14802 : F800 0825 48        		dc.b $F8, 0, 8,	$25, $48
(1)   67/   14807 : 0000 0025 48        		dc.b 0,	0, 0, $25, $48
(1)   68/   1480C : 0000 1025 50        		dc.b 0,	0, $10,	$25, $50
(1)   69/   14811 : 09                  byte_14595:	dc.b 9
(1)   70/   14812 : FC00 0826 30        		dc.b $FC, 0, 8,	$26, $30
(1)   71/   14817 : 0400 0825 28        		dc.b 4,	0, 8, $25, $28
(1)   72/   1481C : 0400 1027 38        		dc.b 4,	0, $10,	$27, $38
(1)   73/   14821 : 0400 0826 40        		dc.b 4,	0, 8, $26, $40
(1)   74/   14826 : FC00 1025 40        		dc.b $FC, 0, $10, $25, $40
(1)   75/   1482B : FC00 1026 48        		dc.b $FC, 0, $10, $26, $48
(1)   76/   14830 : 0C00 0827 48        		dc.b $C, 0, 8, $27, $48
(1)   77/   14835 : 0400 1826 50        		dc.b 4,	0, $18,	$26, $50
(1)   78/   1483A : 04                  		dc.b 4
(1)   79/   1483B : 0008 2758 00        byte_145BF:	dc.b 0,	8, $27,	$58, 0
(1)   80/   14840 : (MACRO)             		align 2
(1)   80/   14840 :  (MACRO-2)                  cnop 0,2
(1)   80/   14840 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   25925/   14840 :                     
   25926/   14840 :                     Ani_obj08:
   25927/   14840 :                     		include	"_anim/obj08.asm"
(1)    1/   14840 :                     ; ---------------------------------------------------------------------------
(1)    2/   14840 :                     ; Animation script - water splash (LZ)
(1)    3/   14840 :                     ; ---------------------------------------------------------------------------
(1)    4/   14840 : 0002                		dc.w byte_145C6-Ani_obj08
(1)    5/   14842 : 0400 0102 FC00      byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
(1)    6/   14848 : (MACRO)             		align 2
(1)    6/   14848 :  (MACRO-2)                  cnop 0,2
(1)    6/   14848 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   25928/   14848 :                     
   25929/   14848 :                     ; ---------------------------------------------------------------------------
   25930/   14848 :                     ; Sprite mappings - water splash (LZ)
   25931/   14848 :                     ; ---------------------------------------------------------------------------
   25932/   14848 :                     Map_obj08:
   25933/   14848 :                     		include	"_maps/obj08.asm"
(1)    1/   14848 :                     ; ---------------------------------------------------------------------------
(1)    2/   14848 :                     ; Sprite mappings - water splash (LZ)
(1)    3/   14848 :                     ; ---------------------------------------------------------------------------
(1)    4/   14848 : 0006                		dc.w byte_145D2-Map_obj08
(1)    5/   1484A : 0011                		dc.w byte_145DD-Map_obj08
(1)    6/   1484C : 001C                		dc.w byte_145E8-Map_obj08
(1)    7/   1484E : 02                  byte_145D2:	dc.b 2
(1)    8/   1484F : F204 006D F8        		dc.b $F2, 4, 0,	$6D, $F8
(1)    9/   14854 : FA0C 006F F0        		dc.b $FA, $C, 0, $6F, $F0
(1)   10/   14859 : 02                  byte_145DD:	dc.b 2
(1)   11/   1485A : E200 0073 F8        		dc.b $E2, 0, 0,	$73, $F8
(1)   12/   1485F : EA0E 0074 F0        		dc.b $EA, $E, 0, $74, $F0
(1)   13/   14864 : 01                  byte_145E8:	dc.b 1
(1)   14/   14865 : E20F 0080 F0        		dc.b $E2, $F, 0, $80, $F0
(1)   15/   1486A : (MACRO)             		align 2
(1)   15/   1486A :  (MACRO-2)                  cnop 0,2
(1)   15/   1486A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   25934/   1486A :                     
   25935/   1486A :                     ; ---------------------------------------------------------------------------
   25936/   1486A :                     ; Subroutine to	change Sonic"s angle & position as he walks along the floor
   25937/   1486A :                     ; ---------------------------------------------------------------------------
   25938/   1486A :                     
   25939/   1486A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25940/   1486A :                     
   25941/   1486A :                     
   25942/   1486A :                     Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
   25943/   1486A : 0828 0003 0022      		btst	#3,$22(a0)
   25944/   14870 : 670C                		beq.s	loc_14602
   25945/   14872 : 7000                		moveq	#0,d0
   25946/   14874 : 11C0 F768           		move.b	d0,($FFFFF768).w
   25947/   14878 : 11C0 F76A           		move.b	d0,($FFFFF76A).w
   25948/   1487C : 4E75                		rts	
   25949/   1487E :                     ; ===========================================================================
   25950/   1487E :                     
   25951/   1487E :                     loc_14602:
   25952/   1487E : 7003                		moveq	#3,d0
   25953/   14880 : 11C0 F768           		move.b	d0,($FFFFF768).w
   25954/   14884 : 11C0 F76A           		move.b	d0,($FFFFF76A).w
   25955/   14888 : 1028 0026           		move.b	$26(a0),d0
   25956/   1488C : 0600 0020           		addi.b	#$20,d0
   25957/   14890 : 6A0E                		bpl.s	loc_14624
   25958/   14892 : 1028 0026           		move.b	$26(a0),d0
   25959/   14896 : 6A02                		bpl.s	loc_1461E
   25960/   14898 : 5300                		subq.b	#1,d0
   25961/   1489A :                     
   25962/   1489A :                     loc_1461E:
   25963/   1489A : 0600 0020           		addi.b	#$20,d0
   25964/   1489E : 600C                		bra.s	loc_14630
   25965/   148A0 :                     ; ===========================================================================
   25966/   148A0 :                     
   25967/   148A0 :                     loc_14624:
   25968/   148A0 : 1028 0026           		move.b	$26(a0),d0
   25969/   148A4 : 6A02                		bpl.s	loc_1462C
   25970/   148A6 : 5200                		addq.b	#1,d0
   25971/   148A8 :                     
   25972/   148A8 :                     loc_1462C:
   25973/   148A8 : 0600 001F           		addi.b	#$1F,d0
   25974/   148AC :                     
   25975/   148AC :                     loc_14630:
   25976/   148AC : 0200 00C0           		andi.b	#$C0,d0
   25977/   148B0 : 0C00 0040           		cmpi.b	#$40,d0
   25978/   148B4 : 6700 0280           		beq.w	Sonic_WalkVertL
   25979/   148B8 : 0C00 0080           		cmpi.b	#$80,d0
   25980/   148BC : 6700 01D6           		beq.w	Sonic_WalkCeiling
   25981/   148C0 : 0C00 00C0           		cmpi.b	#$C0,d0
   25982/   148C4 : 6700 0132           		beq.w	Sonic_WalkVertR
   25983/   148C8 : 3428 000C           		move.w	$C(a0),d2
   25984/   148CC : 3628 0008           		move.w	8(a0),d3
   25985/   148D0 : 7000                		moveq	#0,d0
   25986/   148D2 : 1028 0016           		move.b	$16(a0),d0
   25987/   148D6 : 4880                		ext.w	d0
   25988/   148D8 : D440                		add.w	d0,d2
   25989/   148DA : 1028 0017           		move.b	$17(a0),d0
   25990/   148DE : 4880                		ext.w	d0
   25991/   148E0 : D640                		add.w	d0,d3
   25992/   148E2 : 49F8 F768           		lea	($FFFFF768).w,a4
   25993/   148E6 : 367C 0010           		movea.w	#$10,a3
   25994/   148EA : 3C3C 0000           		move.w	#0,d6
   25995/   148EE : 7A0D                		moveq	#$D,d5
   25996/   148F0 : 6100 0358           		bsr.w	FindFloor
   25997/   148F4 : 3F01                		move.w	d1,-(sp)
   25998/   148F6 : 3428 000C           		move.w	$C(a0),d2
   25999/   148FA : 3628 0008           		move.w	8(a0),d3
   26000/   148FE : 7000                		moveq	#0,d0
   26001/   14900 : 1028 0016           		move.b	$16(a0),d0
   26002/   14904 : 4880                		ext.w	d0
   26003/   14906 : D440                		add.w	d0,d2
   26004/   14908 : 1028 0017           		move.b	$17(a0),d0
   26005/   1490C : 4880                		ext.w	d0
   26006/   1490E : 4440                		neg.w	d0
   26007/   14910 : D640                		add.w	d0,d3
   26008/   14912 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   26009/   14916 : 367C 0010           		movea.w	#$10,a3
   26010/   1491A : 3C3C 0000           		move.w	#0,d6
   26011/   1491E : 7A0D                		moveq	#$D,d5
   26012/   14920 : 6100 0328           		bsr.w	FindFloor
   26013/   14924 : 301F                		move.w	(sp)+,d0
   26014/   14926 : 6100 00A4           		bsr.w	Sonic_Angle
   26015/   1492A : 4A41                		tst.w	d1
   26016/   1492C : 670C                		beq.s	locret_146BE
   26017/   1492E : 6A0C                		bpl.s	loc_146C0
   26018/   14930 : 0C41 FFF2           		cmpi.w	#-$E,d1
   26019/   14934 : 6D2C                		blt.s	locret_146E6
   26020/   14936 : D368 000C           		add.w	d1,$C(a0)
   26021/   1493A :                     
   26022/   1493A :                     locret_146BE:
   26023/   1493A : 4E75                		rts	
   26024/   1493C :                     ; ===========================================================================
   26025/   1493C :                     
   26026/   1493C :                     loc_146C0:
   26027/   1493C : 0C41 000E           		cmpi.w	#$E,d1
   26028/   14940 : 6E06                		bgt.s	loc_146CC
   26029/   14942 :                     
   26030/   14942 :                     loc_146C6:
   26031/   14942 : D368 000C           		add.w	d1,$C(a0)
   26032/   14946 : 4E75                		rts	
   26033/   14948 :                     ; ===========================================================================
   26034/   14948 :                     
   26035/   14948 :                     loc_146CC:
   26036/   14948 : 4A28 0038           		tst.b	$38(a0)
   26037/   1494C : 66F4                		bne.s	loc_146C6
   26038/   1494E : 08E8 0001 0022      		bset	#1,$22(a0)
   26039/   14954 : 08A8 0005 0022      		bclr	#5,$22(a0)
   26040/   1495A : 117C 0001 001D      		move.b	#1,$1D(a0)
   26041/   14960 : 4E75                		rts	
   26042/   14962 :                     ; ===========================================================================
   26043/   14962 :                     
   26044/   14962 :                     locret_146E6:
   26045/   14962 : 4E75                		rts	
   26046/   14964 :                     ; End of function Sonic_AnglePos
   26047/   14964 :                     
   26048/   14964 :                     ; ===========================================================================
   26049/   14964 : 2428 0008           		move.l	8(a0),d2
   26050/   14968 : 3028 0010           		move.w	$10(a0),d0
   26051/   1496C : 48C0                		ext.l	d0
   26052/   1496E : E180                		asl.l	#8,d0
   26053/   14970 : 9480                		sub.l	d0,d2
   26054/   14972 : 2142 0008           		move.l	d2,8(a0)
   26055/   14976 : 303C 0038           		move.w	#$38,d0
   26056/   1497A : 48C0                		ext.l	d0
   26057/   1497C : E180                		asl.l	#8,d0
   26058/   1497E : 9680                		sub.l	d0,d3
   26059/   14980 : 2143 000C           		move.l	d3,$C(a0)
   26060/   14984 : 4E75                		rts	
   26061/   14986 :                     ; ===========================================================================
   26062/   14986 :                     
   26063/   14986 :                     locret_1470A:
   26064/   14986 : 4E75                		rts	
   26065/   14988 :                     ; ===========================================================================
   26066/   14988 : 2628 000C           		move.l	$C(a0),d3
   26067/   1498C : 3028 0012           		move.w	$12(a0),d0
   26068/   14990 : 0440 0038           		subi.w	#$38,d0
   26069/   14994 : 3140 0012           		move.w	d0,$12(a0)
   26070/   14998 : 48C0                		ext.l	d0
   26071/   1499A : E180                		asl.l	#8,d0
   26072/   1499C : 9680                		sub.l	d0,d3
   26073/   1499E : 2143 000C           		move.l	d3,$C(a0)
   26074/   149A2 : 4E75                		rts	
   26075/   149A4 : 4E75                		rts	
   26076/   149A6 :                     ; ===========================================================================
   26077/   149A6 : 2428 0008           		move.l	8(a0),d2
   26078/   149AA : 2628 000C           		move.l	$C(a0),d3
   26079/   149AE : 3028 0010           		move.w	$10(a0),d0
   26080/   149B2 : 48C0                		ext.l	d0
   26081/   149B4 : E180                		asl.l	#8,d0
   26082/   149B6 : 9480                		sub.l	d0,d2
   26083/   149B8 : 3028 0012           		move.w	$12(a0),d0
   26084/   149BC : 48C0                		ext.l	d0
   26085/   149BE : E180                		asl.l	#8,d0
   26086/   149C0 : 9680                		sub.l	d0,d3
   26087/   149C2 : 2142 0008           		move.l	d2,8(a0)
   26088/   149C6 : 2143 000C           		move.l	d3,$C(a0)
   26089/   149CA : 4E75                		rts	
   26090/   149CC :                     
   26091/   149CC :                     ; ---------------------------------------------------------------------------
   26092/   149CC :                     ; Subroutine to	change Sonic"s angle as he walks along the floor
   26093/   149CC :                     ; ---------------------------------------------------------------------------
   26094/   149CC :                     
   26095/   149CC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26096/   149CC :                     
   26097/   149CC :                     
   26098/   149CC :                     Sonic_Angle:				; XREF: Sonic_AnglePos; et al
   26099/   149CC : 1438 F76A           		move.b	($FFFFF76A).w,d2
   26100/   149D0 : B240                		cmp.w	d0,d1
   26101/   149D2 : 6F06                		ble.s	loc_1475E
   26102/   149D4 : 1438 F768           		move.b	($FFFFF768).w,d2
   26103/   149D8 : 3200                		move.w	d0,d1
   26104/   149DA :                     
   26105/   149DA :                     loc_1475E:
   26106/   149DA : 0802 0000           		btst	#0,d2
   26107/   149DE : 6606                		bne.s	loc_1476A
   26108/   149E0 : 1142 0026           		move.b	d2,$26(a0)
   26109/   149E4 : 4E75                		rts	
   26110/   149E6 :                     ; ===========================================================================
   26111/   149E6 :                     
   26112/   149E6 :                     loc_1476A:
   26113/   149E6 : 1428 0026           		move.b	$26(a0),d2
   26114/   149EA : 0602 0020           		addi.b	#$20,d2
   26115/   149EE : 0202 00C0           		andi.b	#$C0,d2
   26116/   149F2 : 1142 0026           		move.b	d2,$26(a0)
   26117/   149F6 : 4E75                		rts	
   26118/   149F8 :                     ; End of function Sonic_Angle
   26119/   149F8 :                     
   26120/   149F8 :                     ; ---------------------------------------------------------------------------
   26121/   149F8 :                     ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
   26122/   149F8 :                     ; ---------------------------------------------------------------------------
   26123/   149F8 :                     
   26124/   149F8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26125/   149F8 :                     
   26126/   149F8 :                     
   26127/   149F8 :                     Sonic_WalkVertR:			; XREF: Sonic_AnglePos
   26128/   149F8 : 3428 000C           		move.w	$C(a0),d2
   26129/   149FC : 3628 0008           		move.w	8(a0),d3
   26130/   14A00 : 7000                		moveq	#0,d0
   26131/   14A02 : 1028 0017           		move.b	$17(a0),d0
   26132/   14A06 : 4880                		ext.w	d0
   26133/   14A08 : 4440                		neg.w	d0
   26134/   14A0A : D440                		add.w	d0,d2
   26135/   14A0C : 1028 0016           		move.b	$16(a0),d0
   26136/   14A10 : 4880                		ext.w	d0
   26137/   14A12 : D640                		add.w	d0,d3
   26138/   14A14 : 49F8 F768           		lea	($FFFFF768).w,a4
   26139/   14A18 : 367C 0010           		movea.w	#$10,a3
   26140/   14A1C : 3C3C 0000           		move.w	#0,d6
   26141/   14A20 : 7A0D                		moveq	#$D,d5
   26142/   14A22 : 6100 0364           		bsr.w	FindWall
   26143/   14A26 : 3F01                		move.w	d1,-(sp)
   26144/   14A28 : 3428 000C           		move.w	$C(a0),d2
   26145/   14A2C : 3628 0008           		move.w	8(a0),d3
   26146/   14A30 : 7000                		moveq	#0,d0
   26147/   14A32 : 1028 0017           		move.b	$17(a0),d0
   26148/   14A36 : 4880                		ext.w	d0
   26149/   14A38 : D440                		add.w	d0,d2
   26150/   14A3A : 1028 0016           		move.b	$16(a0),d0
   26151/   14A3E : 4880                		ext.w	d0
   26152/   14A40 : D640                		add.w	d0,d3
   26153/   14A42 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   26154/   14A46 : 367C 0010           		movea.w	#$10,a3
   26155/   14A4A : 3C3C 0000           		move.w	#0,d6
   26156/   14A4E : 7A0D                		moveq	#$D,d5
   26157/   14A50 : 6100 0336           		bsr.w	FindWall
   26158/   14A54 : 301F                		move.w	(sp)+,d0
   26159/   14A56 : 6100 FF74           		bsr.w	Sonic_Angle
   26160/   14A5A : 4A41                		tst.w	d1
   26161/   14A5C : 670E                		beq.s	locret_147F0
   26162/   14A5E : 6A0E                		bpl.s	loc_147F2
   26163/   14A60 : 0C41 FFF2           		cmpi.w	#-$E,d1
   26164/   14A64 : 6D00 FF20           		blt.w	locret_1470A
   26165/   14A68 : D368 0008           		add.w	d1,8(a0)
   26166/   14A6C :                     
   26167/   14A6C :                     locret_147F0:
   26168/   14A6C : 4E75                		rts	
   26169/   14A6E :                     ; ===========================================================================
   26170/   14A6E :                     
   26171/   14A6E :                     loc_147F2:
   26172/   14A6E : 0C41 000E           		cmpi.w	#$E,d1
   26173/   14A72 : 6E06                		bgt.s	loc_147FE
   26174/   14A74 :                     
   26175/   14A74 :                     loc_147F8:
   26176/   14A74 : D368 0008           		add.w	d1,8(a0)
   26177/   14A78 : 4E75                		rts	
   26178/   14A7A :                     ; ===========================================================================
   26179/   14A7A :                     
   26180/   14A7A :                     loc_147FE:
   26181/   14A7A : 4A28 0038           		tst.b	$38(a0)
   26182/   14A7E : 66F4                		bne.s	loc_147F8
   26183/   14A80 : 08E8 0001 0022      		bset	#1,$22(a0)
   26184/   14A86 : 08A8 0005 0022      		bclr	#5,$22(a0)
   26185/   14A8C : 117C 0001 001D      		move.b	#1,$1D(a0)
   26186/   14A92 : 4E75                		rts	
   26187/   14A94 :                     ; End of function Sonic_WalkVertR
   26188/   14A94 :                     
   26189/   14A94 :                     ; ---------------------------------------------------------------------------
   26190/   14A94 :                     ; Subroutine allowing Sonic to walk upside-down
   26191/   14A94 :                     ; ---------------------------------------------------------------------------
   26192/   14A94 :                     
   26193/   14A94 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26194/   14A94 :                     
   26195/   14A94 :                     
   26196/   14A94 :                     Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
   26197/   14A94 : 3428 000C           		move.w	$C(a0),d2
   26198/   14A98 : 3628 0008           		move.w	8(a0),d3
   26199/   14A9C : 7000                		moveq	#0,d0
   26200/   14A9E : 1028 0016           		move.b	$16(a0),d0
   26201/   14AA2 : 4880                		ext.w	d0
   26202/   14AA4 : 9440                		sub.w	d0,d2
   26203/   14AA6 : 0A42 000F           		eori.w	#$F,d2
   26204/   14AAA : 1028 0017           		move.b	$17(a0),d0
   26205/   14AAE : 4880                		ext.w	d0
   26206/   14AB0 : D640                		add.w	d0,d3
   26207/   14AB2 : 49F8 F768           		lea	($FFFFF768).w,a4
   26208/   14AB6 : 367C FFF0           		movea.w	#-$10,a3
   26209/   14ABA : 3C3C 1000           		move.w	#$1000,d6
   26210/   14ABE : 7A0D                		moveq	#$D,d5
   26211/   14AC0 : 6100 0188           		bsr.w	FindFloor
   26212/   14AC4 : 3F01                		move.w	d1,-(sp)
   26213/   14AC6 : 3428 000C           		move.w	$C(a0),d2
   26214/   14ACA : 3628 0008           		move.w	8(a0),d3
   26215/   14ACE : 7000                		moveq	#0,d0
   26216/   14AD0 : 1028 0016           		move.b	$16(a0),d0
   26217/   14AD4 : 4880                		ext.w	d0
   26218/   14AD6 : 9440                		sub.w	d0,d2
   26219/   14AD8 : 0A42 000F           		eori.w	#$F,d2
   26220/   14ADC : 1028 0017           		move.b	$17(a0),d0
   26221/   14AE0 : 4880                		ext.w	d0
   26222/   14AE2 : 9640                		sub.w	d0,d3
   26223/   14AE4 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   26224/   14AE8 : 367C FFF0           		movea.w	#-$10,a3
   26225/   14AEC : 3C3C 1000           		move.w	#$1000,d6
   26226/   14AF0 : 7A0D                		moveq	#$D,d5
   26227/   14AF2 : 6100 0156           		bsr.w	FindFloor
   26228/   14AF6 : 301F                		move.w	(sp)+,d0
   26229/   14AF8 : 6100 FED2           		bsr.w	Sonic_Angle
   26230/   14AFC : 4A41                		tst.w	d1
   26231/   14AFE : 670E                		beq.s	locret_14892
   26232/   14B00 : 6A0E                		bpl.s	loc_14894
   26233/   14B02 : 0C41 FFF2           		cmpi.w	#-$E,d1
   26234/   14B06 : 6D00 FE5A           		blt.w	locret_146E6
   26235/   14B0A : 9368 000C           		sub.w	d1,$C(a0)
   26236/   14B0E :                     
   26237/   14B0E :                     locret_14892:
   26238/   14B0E : 4E75                		rts	
   26239/   14B10 :                     ; ===========================================================================
   26240/   14B10 :                     
   26241/   14B10 :                     loc_14894:
   26242/   14B10 : 0C41 000E           		cmpi.w	#$E,d1
   26243/   14B14 : 6E06                		bgt.s	loc_148A0
   26244/   14B16 :                     
   26245/   14B16 :                     loc_1489A:
   26246/   14B16 : 9368 000C           		sub.w	d1,$C(a0)
   26247/   14B1A : 4E75                		rts	
   26248/   14B1C :                     ; ===========================================================================
   26249/   14B1C :                     
   26250/   14B1C :                     loc_148A0:
   26251/   14B1C : 4A28 0038           		tst.b	$38(a0)
   26252/   14B20 : 66F4                		bne.s	loc_1489A
   26253/   14B22 : 08E8 0001 0022      		bset	#1,$22(a0)
   26254/   14B28 : 08A8 0005 0022      		bclr	#5,$22(a0)
   26255/   14B2E : 117C 0001 001D      		move.b	#1,$1D(a0)
   26256/   14B34 : 4E75                		rts	
   26257/   14B36 :                     ; End of function Sonic_WalkCeiling
   26258/   14B36 :                     
   26259/   14B36 :                     ; ---------------------------------------------------------------------------
   26260/   14B36 :                     ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
   26261/   14B36 :                     ; ---------------------------------------------------------------------------
   26262/   14B36 :                     
   26263/   14B36 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26264/   14B36 :                     
   26265/   14B36 :                     
   26266/   14B36 :                     Sonic_WalkVertL:			; XREF: Sonic_AnglePos
   26267/   14B36 : 3428 000C           		move.w	$C(a0),d2
   26268/   14B3A : 3628 0008           		move.w	8(a0),d3
   26269/   14B3E : 7000                		moveq	#0,d0
   26270/   14B40 : 1028 0017           		move.b	$17(a0),d0
   26271/   14B44 : 4880                		ext.w	d0
   26272/   14B46 : 9440                		sub.w	d0,d2
   26273/   14B48 : 1028 0016           		move.b	$16(a0),d0
   26274/   14B4C : 4880                		ext.w	d0
   26275/   14B4E : 9640                		sub.w	d0,d3
   26276/   14B50 : 0A43 000F           		eori.w	#$F,d3
   26277/   14B54 : 49F8 F768           		lea	($FFFFF768).w,a4
   26278/   14B58 : 367C FFF0           		movea.w	#-$10,a3
   26279/   14B5C : 3C3C 0800           		move.w	#$800,d6
   26280/   14B60 : 7A0D                		moveq	#$D,d5
   26281/   14B62 : 6100 0224           		bsr.w	FindWall
   26282/   14B66 : 3F01                		move.w	d1,-(sp)
   26283/   14B68 : 3428 000C           		move.w	$C(a0),d2
   26284/   14B6C : 3628 0008           		move.w	8(a0),d3
   26285/   14B70 : 7000                		moveq	#0,d0
   26286/   14B72 : 1028 0017           		move.b	$17(a0),d0
   26287/   14B76 : 4880                		ext.w	d0
   26288/   14B78 : D440                		add.w	d0,d2
   26289/   14B7A : 1028 0016           		move.b	$16(a0),d0
   26290/   14B7E : 4880                		ext.w	d0
   26291/   14B80 : 9640                		sub.w	d0,d3
   26292/   14B82 : 0A43 000F           		eori.w	#$F,d3
   26293/   14B86 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   26294/   14B8A : 367C FFF0           		movea.w	#-$10,a3
   26295/   14B8E : 3C3C 0800           		move.w	#$800,d6
   26296/   14B92 : 7A0D                		moveq	#$D,d5
   26297/   14B94 : 6100 01F2           		bsr.w	FindWall
   26298/   14B98 : 301F                		move.w	(sp)+,d0
   26299/   14B9A : 6100 FE30           		bsr.w	Sonic_Angle
   26300/   14B9E : 4A41                		tst.w	d1
   26301/   14BA0 : 670E                		beq.s	locret_14934
   26302/   14BA2 : 6A0E                		bpl.s	loc_14936
   26303/   14BA4 : 0C41 FFF2           		cmpi.w	#-$E,d1
   26304/   14BA8 : 6D00 FDDC           		blt.w	locret_1470A
   26305/   14BAC : 9368 0008           		sub.w	d1,8(a0)
   26306/   14BB0 :                     
   26307/   14BB0 :                     locret_14934:
   26308/   14BB0 : 4E75                		rts	
   26309/   14BB2 :                     ; ===========================================================================
   26310/   14BB2 :                     
   26311/   14BB2 :                     loc_14936:
   26312/   14BB2 : 0C41 000E           		cmpi.w	#$E,d1
   26313/   14BB6 : 6E06                		bgt.s	loc_14942
   26314/   14BB8 :                     
   26315/   14BB8 :                     loc_1493C:
   26316/   14BB8 : 9368 0008           		sub.w	d1,8(a0)
   26317/   14BBC : 4E75                		rts	
   26318/   14BBE :                     ; ===========================================================================
   26319/   14BBE :                     
   26320/   14BBE :                     loc_14942:
   26321/   14BBE : 4A28 0038           		tst.b	$38(a0)
   26322/   14BC2 : 66F4                		bne.s	loc_1493C
   26323/   14BC4 : 08E8 0001 0022      		bset	#1,$22(a0)
   26324/   14BCA : 08A8 0005 0022      		bclr	#5,$22(a0)
   26325/   14BD0 : 117C 0001 001D      		move.b	#1,$1D(a0)
   26326/   14BD6 : 4E75                		rts	
   26327/   14BD8 :                     ; End of function Sonic_WalkVertL
   26328/   14BD8 :                     
   26329/   14BD8 :                     ; ---------------------------------------------------------------------------
   26330/   14BD8 :                     ; Subroutine to	find which tile	the object is standing on
   26331/   14BD8 :                     ; ---------------------------------------------------------------------------
   26332/   14BD8 :                     
   26333/   14BD8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26334/   14BD8 :                     
   26335/   14BD8 :                     
   26336/   14BD8 :                     Floor_ChkTile:				; XREF: FindFloor; et al
   26337/   14BD8 : 3002                		move.w	d2,d0
   26338/   14BDA : E248                		lsr.w	#1,d0
   26339/   14BDC : 0240 0380           		andi.w	#$380,d0
   26340/   14BE0 : 3203                		move.w	d3,d1
   26341/   14BE2 : E049                		lsr.w	#8,d1
   26342/   14BE4 : 0241 007F           		andi.w	#$7F,d1
   26343/   14BE8 : D041                		add.w	d1,d0
   26344/   14BEA : 72FF                		moveq	#-1,d1
   26345/   14BEC : 43F8 A400           		lea	($FFFFA400).w,a1
   26346/   14BF0 : 1231 0000           		move.b	(a1,d0.w),d1
   26347/   14BF4 : 671C                		beq.s	loc_14996
   26348/   14BF6 : 6B1E                		bmi.s	loc_1499A
   26349/   14BF8 : 5301                		subq.b	#1,d1
   26350/   14BFA : 4881                		ext.w	d1
   26351/   14BFC : EE59                		ror.w	#7,d1
   26352/   14BFE : 3002                		move.w	d2,d0
   26353/   14C00 : D040                		add.w	d0,d0
   26354/   14C02 : 0240 01E0           		andi.w	#$1E0,d0
   26355/   14C06 : D240                		add.w	d0,d1
   26356/   14C08 : 3003                		move.w	d3,d0
   26357/   14C0A : E648                		lsr.w	#3,d0
   26358/   14C0C : 0240 001E           		andi.w	#$1E,d0
   26359/   14C10 : D240                		add.w	d0,d1
   26360/   14C12 :                     
   26361/   14C12 :                     loc_14996:
   26362/   14C12 : 2241                		movea.l	d1,a1
   26363/   14C14 : 4E75                		rts	
   26364/   14C16 :                     ; ===========================================================================
   26365/   14C16 :                     
   26366/   14C16 :                     loc_1499A:
   26367/   14C16 : 0241 007F           		andi.w	#$7F,d1
   26368/   14C1A : 0828 0006 0001      		btst	#6,1(a0)
   26369/   14C20 : 670C                		beq.s	loc_149B2
   26370/   14C22 : 5241                		addq.w	#1,d1
   26371/   14C24 : 0C41 0029           		cmpi.w	#$29,d1
   26372/   14C28 : 6604                		bne.s	loc_149B2
   26373/   14C2A : 323C 0051           		move.w	#$51,d1
   26374/   14C2E :                     
   26375/   14C2E :                     loc_149B2:
   26376/   14C2E : 5301                		subq.b	#1,d1
   26377/   14C30 : EE59                		ror.w	#7,d1
   26378/   14C32 : 3002                		move.w	d2,d0
   26379/   14C34 : D040                		add.w	d0,d0
   26380/   14C36 : 0240 01E0           		andi.w	#$1E0,d0
   26381/   14C3A : D240                		add.w	d0,d1
   26382/   14C3C : 3003                		move.w	d3,d0
   26383/   14C3E : E648                		lsr.w	#3,d0
   26384/   14C40 : 0240 001E           		andi.w	#$1E,d0
   26385/   14C44 : D240                		add.w	d0,d1
   26386/   14C46 : 2241                		movea.l	d1,a1
   26387/   14C48 : 4E75                		rts	
   26388/   14C4A :                     ; End of function Floor_ChkTile
   26389/   14C4A :                     
   26390/   14C4A :                     
   26391/   14C4A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26392/   14C4A :                     
   26393/   14C4A :                     
   26394/   14C4A :                     FindFloor:				; XREF: Sonic_AnglePos; et al
   26395/   14C4A : 618C                		bsr.s	Floor_ChkTile
   26396/   14C4C : 3011                		move.w	(a1),d0
   26397/   14C4E : 3800                		move.w	d0,d4
   26398/   14C50 : 0240 07FF           		andi.w	#$7FF,d0
   26399/   14C54 : 6704                		beq.s	loc_149DE
   26400/   14C56 : 0B04                		btst	d5,d4
   26401/   14C58 : 660E                		bne.s	loc_149EC
   26402/   14C5A :                     
   26403/   14C5A :                     loc_149DE:
   26404/   14C5A : D44B                		add.w	a3,d2
   26405/   14C5C : 6100 0092           		bsr.w	FindFloor2
   26406/   14C60 : 944B                		sub.w	a3,d2
   26407/   14C62 : 0641 0010           		addi.w	#$10,d1
   26408/   14C66 : 4E75                		rts	
   26409/   14C68 :                     ; ===========================================================================
   26410/   14C68 :                     
   26411/   14C68 :                     loc_149EC:
   26412/   14C68 : 2478 F796           		movea.l	($FFFFF796).w,a2 ; load	collision index
   26413/   14C6C : 1032 0000           		move.b	(a2,d0.w),d0
   26414/   14C70 : 0240 00FF           		andi.w	#$FF,d0
   26415/   14C74 : 67E4                		beq.s	loc_149DE
   26416/   14C76 : 45F9 0006 3742      		lea	(AngleMap).l,a2
   26417/   14C7C : 18B2 0000           		move.b	(a2,d0.w),(a4)
   26418/   14C80 : E948                		lsl.w	#4,d0
   26419/   14C82 : 3203                		move.w	d3,d1
   26420/   14C84 : 0804 000B           		btst	#$B,d4
   26421/   14C88 : 6704                		beq.s	loc_14A12
   26422/   14C8A : 4641                		not.w	d1
   26423/   14C8C : 4414                		neg.b	(a4)
   26424/   14C8E :                     
   26425/   14C8E :                     loc_14A12:
   26426/   14C8E : 0804 000C           		btst	#$C,d4
   26427/   14C92 : 670A                		beq.s	loc_14A22
   26428/   14C94 : 0614 0040           		addi.b	#$40,(a4)
   26429/   14C98 : 4414                		neg.b	(a4)
   26430/   14C9A : 0414 0040           		subi.b	#$40,(a4)
   26431/   14C9E :                     
   26432/   14C9E :                     loc_14A22:
   26433/   14C9E : 0241 000F           		andi.w	#$F,d1
   26434/   14CA2 : D240                		add.w	d0,d1
   26435/   14CA4 : 45F9 0006 3842      		lea	(CollArray1).l,a2
   26436/   14CAA : 1032 1000           		move.b	(a2,d1.w),d0
   26437/   14CAE : 4880                		ext.w	d0
   26438/   14CB0 : BD44                		eor.w	d6,d4
   26439/   14CB2 : 0804 000C           		btst	#$C,d4
   26440/   14CB6 : 6702                		beq.s	loc_14A3E
   26441/   14CB8 : 4440                		neg.w	d0
   26442/   14CBA :                     
   26443/   14CBA :                     loc_14A3E:
   26444/   14CBA : 4A40                		tst.w	d0
   26445/   14CBC : 679C                		beq.s	loc_149DE
   26446/   14CBE : 6B16                		bmi.s	loc_14A5A
   26447/   14CC0 : 0C00 0010           		cmpi.b	#$10,d0
   26448/   14CC4 : 671C                		beq.s	loc_14A66
   26449/   14CC6 : 3202                		move.w	d2,d1
   26450/   14CC8 : 0241 000F           		andi.w	#$F,d1
   26451/   14CCC : D041                		add.w	d1,d0
   26452/   14CCE : 323C 000F           		move.w	#$F,d1
   26453/   14CD2 : 9240                		sub.w	d0,d1
   26454/   14CD4 : 4E75                		rts	
   26455/   14CD6 :                     ; ===========================================================================
   26456/   14CD6 :                     
   26457/   14CD6 :                     loc_14A5A:
   26458/   14CD6 : 3202                		move.w	d2,d1
   26459/   14CD8 : 0241 000F           		andi.w	#$F,d1
   26460/   14CDC : D041                		add.w	d1,d0
   26461/   14CDE : 6A00 FF7A           		bpl.w	loc_149DE
   26462/   14CE2 :                     
   26463/   14CE2 :                     loc_14A66:
   26464/   14CE2 : 944B                		sub.w	a3,d2
   26465/   14CE4 : 6100 000A           		bsr.w	FindFloor2
   26466/   14CE8 : D44B                		add.w	a3,d2
   26467/   14CEA : 0441 0010           		subi.w	#$10,d1
   26468/   14CEE : 4E75                		rts	
   26469/   14CF0 :                     ; End of function FindFloor
   26470/   14CF0 :                     
   26471/   14CF0 :                     
   26472/   14CF0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26473/   14CF0 :                     
   26474/   14CF0 :                     
   26475/   14CF0 :                     FindFloor2:				; XREF: FindFloor
   26476/   14CF0 : 6100 FEE6           		bsr.w	Floor_ChkTile
   26477/   14CF4 : 3011                		move.w	(a1),d0
   26478/   14CF6 : 3800                		move.w	d0,d4
   26479/   14CF8 : 0240 07FF           		andi.w	#$7FF,d0
   26480/   14CFC : 6704                		beq.s	loc_14A86
   26481/   14CFE : 0B04                		btst	d5,d4
   26482/   14D00 : 660E                		bne.s	loc_14A94
   26483/   14D02 :                     
   26484/   14D02 :                     loc_14A86:
   26485/   14D02 : 323C 000F           		move.w	#$F,d1
   26486/   14D06 : 3002                		move.w	d2,d0
   26487/   14D08 : 0240 000F           		andi.w	#$F,d0
   26488/   14D0C : 9240                		sub.w	d0,d1
   26489/   14D0E : 4E75                		rts	
   26490/   14D10 :                     ; ===========================================================================
   26491/   14D10 :                     
   26492/   14D10 :                     loc_14A94:
   26493/   14D10 : 2478 F796           		movea.l	($FFFFF796).w,a2
   26494/   14D14 : 1032 0000           		move.b	(a2,d0.w),d0
   26495/   14D18 : 0240 00FF           		andi.w	#$FF,d0
   26496/   14D1C : 67E4                		beq.s	loc_14A86
   26497/   14D1E : 45F9 0006 3742      		lea	(AngleMap).l,a2
   26498/   14D24 : 18B2 0000           		move.b	(a2,d0.w),(a4)
   26499/   14D28 : E948                		lsl.w	#4,d0
   26500/   14D2A : 3203                		move.w	d3,d1
   26501/   14D2C : 0804 000B           		btst	#$B,d4
   26502/   14D30 : 6704                		beq.s	loc_14ABA
   26503/   14D32 : 4641                		not.w	d1
   26504/   14D34 : 4414                		neg.b	(a4)
   26505/   14D36 :                     
   26506/   14D36 :                     loc_14ABA:
   26507/   14D36 : 0804 000C           		btst	#$C,d4
   26508/   14D3A : 670A                		beq.s	loc_14ACA
   26509/   14D3C : 0614 0040           		addi.b	#$40,(a4)
   26510/   14D40 : 4414                		neg.b	(a4)
   26511/   14D42 : 0414 0040           		subi.b	#$40,(a4)
   26512/   14D46 :                     
   26513/   14D46 :                     loc_14ACA:
   26514/   14D46 : 0241 000F           		andi.w	#$F,d1
   26515/   14D4A : D240                		add.w	d0,d1
   26516/   14D4C : 45F9 0006 3842      		lea	(CollArray1).l,a2
   26517/   14D52 : 1032 1000           		move.b	(a2,d1.w),d0
   26518/   14D56 : 4880                		ext.w	d0
   26519/   14D58 : BD44                		eor.w	d6,d4
   26520/   14D5A : 0804 000C           		btst	#$C,d4
   26521/   14D5E : 6702                		beq.s	loc_14AE6
   26522/   14D60 : 4440                		neg.w	d0
   26523/   14D62 :                     
   26524/   14D62 :                     loc_14AE6:
   26525/   14D62 : 4A40                		tst.w	d0
   26526/   14D64 : 679C                		beq.s	loc_14A86
   26527/   14D66 : 6B10                		bmi.s	loc_14AFC
   26528/   14D68 : 3202                		move.w	d2,d1
   26529/   14D6A : 0241 000F           		andi.w	#$F,d1
   26530/   14D6E : D041                		add.w	d1,d0
   26531/   14D70 : 323C 000F           		move.w	#$F,d1
   26532/   14D74 : 9240                		sub.w	d0,d1
   26533/   14D76 : 4E75                		rts	
   26534/   14D78 :                     ; ===========================================================================
   26535/   14D78 :                     
   26536/   14D78 :                     loc_14AFC:
   26537/   14D78 : 3202                		move.w	d2,d1
   26538/   14D7A : 0241 000F           		andi.w	#$F,d1
   26539/   14D7E : D041                		add.w	d1,d0
   26540/   14D80 : 6A00 FF80           		bpl.w	loc_14A86
   26541/   14D84 : 4641                		not.w	d1
   26542/   14D86 : 4E75                		rts	
   26543/   14D88 :                     ; End of function FindFloor2
   26544/   14D88 :                     
   26545/   14D88 :                     
   26546/   14D88 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26547/   14D88 :                     
   26548/   14D88 :                     
   26549/   14D88 :                     FindWall:				; XREF: Sonic_WalkVertR; et al
   26550/   14D88 : 6100 FE4E           		bsr.w	Floor_ChkTile
   26551/   14D8C : 3011                		move.w	(a1),d0
   26552/   14D8E : 3800                		move.w	d0,d4
   26553/   14D90 : 0240 07FF           		andi.w	#$7FF,d0
   26554/   14D94 : 6704                		beq.s	loc_14B1E
   26555/   14D96 : 0B04                		btst	d5,d4
   26556/   14D98 : 660E                		bne.s	loc_14B2C
   26557/   14D9A :                     
   26558/   14D9A :                     loc_14B1E:
   26559/   14D9A : D64B                		add.w	a3,d3
   26560/   14D9C : 6100 0092           		bsr.w	FindWall2
   26561/   14DA0 : 964B                		sub.w	a3,d3
   26562/   14DA2 : 0641 0010           		addi.w	#$10,d1
   26563/   14DA6 : 4E75                		rts	
   26564/   14DA8 :                     ; ===========================================================================
   26565/   14DA8 :                     
   26566/   14DA8 :                     loc_14B2C:
   26567/   14DA8 : 2478 F796           		movea.l	($FFFFF796).w,a2
   26568/   14DAC : 1032 0000           		move.b	(a2,d0.w),d0
   26569/   14DB0 : 0240 00FF           		andi.w	#$FF,d0
   26570/   14DB4 : 67E4                		beq.s	loc_14B1E
   26571/   14DB6 : 45F9 0006 3742      		lea	(AngleMap).l,a2
   26572/   14DBC : 18B2 0000           		move.b	(a2,d0.w),(a4)
   26573/   14DC0 : E948                		lsl.w	#4,d0
   26574/   14DC2 : 3202                		move.w	d2,d1
   26575/   14DC4 : 0804 000C           		btst	#$C,d4
   26576/   14DC8 : 670C                		beq.s	loc_14B5A
   26577/   14DCA : 4641                		not.w	d1
   26578/   14DCC : 0614 0040           		addi.b	#$40,(a4)
   26579/   14DD0 : 4414                		neg.b	(a4)
   26580/   14DD2 : 0414 0040           		subi.b	#$40,(a4)
   26581/   14DD6 :                     
   26582/   14DD6 :                     loc_14B5A:
   26583/   14DD6 : 0804 000B           		btst	#$B,d4
   26584/   14DDA : 6702                		beq.s	loc_14B62
   26585/   14DDC : 4414                		neg.b	(a4)
   26586/   14DDE :                     
   26587/   14DDE :                     loc_14B62:
   26588/   14DDE : 0241 000F           		andi.w	#$F,d1
   26589/   14DE2 : D240                		add.w	d0,d1
   26590/   14DE4 : 45F9 0006 4842      		lea	(CollArray2).l,a2
   26591/   14DEA : 1032 1000           		move.b	(a2,d1.w),d0
   26592/   14DEE : 4880                		ext.w	d0
   26593/   14DF0 : BD44                		eor.w	d6,d4
   26594/   14DF2 : 0804 000B           		btst	#$B,d4
   26595/   14DF6 : 6702                		beq.s	loc_14B7E
   26596/   14DF8 : 4440                		neg.w	d0
   26597/   14DFA :                     
   26598/   14DFA :                     loc_14B7E:
   26599/   14DFA : 4A40                		tst.w	d0
   26600/   14DFC : 679C                		beq.s	loc_14B1E
   26601/   14DFE : 6B16                		bmi.s	loc_14B9A
   26602/   14E00 : 0C00 0010           		cmpi.b	#$10,d0
   26603/   14E04 : 671C                		beq.s	loc_14BA6
   26604/   14E06 : 3203                		move.w	d3,d1
   26605/   14E08 : 0241 000F           		andi.w	#$F,d1
   26606/   14E0C : D041                		add.w	d1,d0
   26607/   14E0E : 323C 000F           		move.w	#$F,d1
   26608/   14E12 : 9240                		sub.w	d0,d1
   26609/   14E14 : 4E75                		rts	
   26610/   14E16 :                     ; ===========================================================================
   26611/   14E16 :                     
   26612/   14E16 :                     loc_14B9A:
   26613/   14E16 : 3203                		move.w	d3,d1
   26614/   14E18 : 0241 000F           		andi.w	#$F,d1
   26615/   14E1C : D041                		add.w	d1,d0
   26616/   14E1E : 6A00 FF7A           		bpl.w	loc_14B1E
   26617/   14E22 :                     
   26618/   14E22 :                     loc_14BA6:
   26619/   14E22 : 964B                		sub.w	a3,d3
   26620/   14E24 : 6100 000A           		bsr.w	FindWall2
   26621/   14E28 : D64B                		add.w	a3,d3
   26622/   14E2A : 0441 0010           		subi.w	#$10,d1
   26623/   14E2E : 4E75                		rts	
   26624/   14E30 :                     ; End of function FindWall
   26625/   14E30 :                     
   26626/   14E30 :                     
   26627/   14E30 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26628/   14E30 :                     
   26629/   14E30 :                     
   26630/   14E30 :                     FindWall2:				; XREF: FindWall
   26631/   14E30 : 6100 FDA6           		bsr.w	Floor_ChkTile
   26632/   14E34 : 3011                		move.w	(a1),d0
   26633/   14E36 : 3800                		move.w	d0,d4
   26634/   14E38 : 0240 07FF           		andi.w	#$7FF,d0
   26635/   14E3C : 6704                		beq.s	loc_14BC6
   26636/   14E3E : 0B04                		btst	d5,d4
   26637/   14E40 : 660E                		bne.s	loc_14BD4
   26638/   14E42 :                     
   26639/   14E42 :                     loc_14BC6:
   26640/   14E42 : 323C 000F           		move.w	#$F,d1
   26641/   14E46 : 3003                		move.w	d3,d0
   26642/   14E48 : 0240 000F           		andi.w	#$F,d0
   26643/   14E4C : 9240                		sub.w	d0,d1
   26644/   14E4E : 4E75                		rts	
   26645/   14E50 :                     ; ===========================================================================
   26646/   14E50 :                     
   26647/   14E50 :                     loc_14BD4:
   26648/   14E50 : 2478 F796           		movea.l	($FFFFF796).w,a2
   26649/   14E54 : 1032 0000           		move.b	(a2,d0.w),d0
   26650/   14E58 : 0240 00FF           		andi.w	#$FF,d0
   26651/   14E5C : 67E4                		beq.s	loc_14BC6
   26652/   14E5E : 45F9 0006 3742      		lea	(AngleMap).l,a2
   26653/   14E64 : 18B2 0000           		move.b	(a2,d0.w),(a4)
   26654/   14E68 : E948                		lsl.w	#4,d0
   26655/   14E6A : 3202                		move.w	d2,d1
   26656/   14E6C : 0804 000C           		btst	#$C,d4
   26657/   14E70 : 670C                		beq.s	loc_14C02
   26658/   14E72 : 4641                		not.w	d1
   26659/   14E74 : 0614 0040           		addi.b	#$40,(a4)
   26660/   14E78 : 4414                		neg.b	(a4)
   26661/   14E7A : 0414 0040           		subi.b	#$40,(a4)
   26662/   14E7E :                     
   26663/   14E7E :                     loc_14C02:
   26664/   14E7E : 0804 000B           		btst	#$B,d4
   26665/   14E82 : 6702                		beq.s	loc_14C0A
   26666/   14E84 : 4414                		neg.b	(a4)
   26667/   14E86 :                     
   26668/   14E86 :                     loc_14C0A:
   26669/   14E86 : 0241 000F           		andi.w	#$F,d1
   26670/   14E8A : D240                		add.w	d0,d1
   26671/   14E8C : 45F9 0006 4842      		lea	(CollArray2).l,a2
   26672/   14E92 : 1032 1000           		move.b	(a2,d1.w),d0
   26673/   14E96 : 4880                		ext.w	d0
   26674/   14E98 : BD44                		eor.w	d6,d4
   26675/   14E9A : 0804 000B           		btst	#$B,d4
   26676/   14E9E : 6702                		beq.s	loc_14C26
   26677/   14EA0 : 4440                		neg.w	d0
   26678/   14EA2 :                     
   26679/   14EA2 :                     loc_14C26:
   26680/   14EA2 : 4A40                		tst.w	d0
   26681/   14EA4 : 679C                		beq.s	loc_14BC6
   26682/   14EA6 : 6B10                		bmi.s	loc_14C3C
   26683/   14EA8 : 3203                		move.w	d3,d1
   26684/   14EAA : 0241 000F           		andi.w	#$F,d1
   26685/   14EAE : D041                		add.w	d1,d0
   26686/   14EB0 : 323C 000F           		move.w	#$F,d1
   26687/   14EB4 : 9240                		sub.w	d0,d1
   26688/   14EB6 : 4E75                		rts	
   26689/   14EB8 :                     ; ===========================================================================
   26690/   14EB8 :                     
   26691/   14EB8 :                     loc_14C3C:
   26692/   14EB8 : 3203                		move.w	d3,d1
   26693/   14EBA : 0241 000F           		andi.w	#$F,d1
   26694/   14EBE : D041                		add.w	d1,d0
   26695/   14EC0 : 6A00 FF80           		bpl.w	loc_14BC6
   26696/   14EC4 : 4641                		not.w	d1
   26697/   14EC6 : 4E75                		rts	
   26698/   14EC8 :                     ; End of function FindWall2
   26699/   14EC8 :                     
   26700/   14EC8 :                     ; ---------------------------------------------------------------------------
   26701/   14EC8 :                     ; Unused floor/wall subroutine - logs something	to do with collision
   26702/   14EC8 :                     ; ---------------------------------------------------------------------------
   26703/   14EC8 :                     
   26704/   14EC8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26705/   14EC8 :                     
   26706/   14EC8 :                     
   26707/   14EC8 :                     FloorLog_Unk:				; XREF: Level
   26708/   14EC8 : 4E75                		rts	
   26709/   14ECA :                     
   26710/   14ECA : 43F9 0006 3842      		lea	(CollArray1).l,a1
   26711/   14ED0 : 45F9 0006 3842      		lea	(CollArray1).l,a2
   26712/   14ED6 : 363C 00FF           		move.w	#$FF,d3
   26713/   14EDA :                     
   26714/   14EDA :                     loc_14C5E:
   26715/   14EDA : 7A10                		moveq	#$10,d5
   26716/   14EDC : 343C 000F           		move.w	#$F,d2
   26717/   14EE0 :                     
   26718/   14EE0 :                     loc_14C64:
   26719/   14EE0 : 7800                		moveq	#0,d4
   26720/   14EE2 : 323C 000F           		move.w	#$F,d1
   26721/   14EE6 :                     
   26722/   14EE6 :                     loc_14C6A:
   26723/   14EE6 : 3019                		move.w	(a1)+,d0
   26724/   14EE8 : EAA8                		lsr.l	d5,d0
   26725/   14EEA : D944                		addx.w	d4,d4
   26726/   14EEC : 51C9 FFF8           		dbf	d1,loc_14C6A
   26727/   14EF0 :                     
   26728/   14EF0 : 34C4                		move.w	d4,(a2)+
   26729/   14EF2 : 92FC 0020           		suba.w	#$20,a1
   26730/   14EF6 : 5345                		subq.w	#1,d5
   26731/   14EF8 : 51CA FFE6           		dbf	d2,loc_14C64
   26732/   14EFC :                     
   26733/   14EFC : D2FC 0020           		adda.w	#$20,a1
   26734/   14F00 : 51CB FFD8           		dbf	d3,loc_14C5E
   26735/   14F04 :                     
   26736/   14F04 : 43F9 0006 3842      		lea	(CollArray1).l,a1
   26737/   14F0A : 45F9 0006 4842      		lea	(CollArray2).l,a2
   26738/   14F10 : 610C                		bsr.s	FloorLog_Unk2
   26739/   14F12 : 43F9 0006 3842      		lea	(CollArray1).l,a1
   26740/   14F18 : 45F9 0006 3842      		lea	(CollArray1).l,a2
   26741/   14F1E :                     
   26742/   14F1E :                     ; End of function FloorLog_Unk
   26743/   14F1E :                     
   26744/   14F1E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26745/   14F1E :                     
   26746/   14F1E :                     
   26747/   14F1E :                     FloorLog_Unk2:				; XREF: FloorLog_Unk
   26748/   14F1E : 363C 0FFF           		move.w	#$FFF,d3
   26749/   14F22 :                     
   26750/   14F22 :                     loc_14CA6:
   26751/   14F22 : 7400                		moveq	#0,d2
   26752/   14F24 : 323C 000F           		move.w	#$F,d1
   26753/   14F28 : 3019                		move.w	(a1)+,d0
   26754/   14F2A : 6724                		beq.s	loc_14CD4
   26755/   14F2C : 6B0C                		bmi.s	loc_14CBE
   26756/   14F2E :                     
   26757/   14F2E :                     loc_14CB2:
   26758/   14F2E : E248                		lsr.w	#1,d0
   26759/   14F30 : 6402                		bcc.s	loc_14CB8
   26760/   14F32 : 5202                		addq.b	#1,d2
   26761/   14F34 :                     
   26762/   14F34 :                     loc_14CB8:
   26763/   14F34 : 51C9 FFF8           		dbf	d1,loc_14CB2
   26764/   14F38 :                     
   26765/   14F38 : 6018                		bra.s	loc_14CD6
   26766/   14F3A :                     ; ===========================================================================
   26767/   14F3A :                     
   26768/   14F3A :                     loc_14CBE:
   26769/   14F3A : 0C40 FFFF           		cmpi.w	#-1,d0
   26770/   14F3E : 670C                		beq.s	loc_14CD0
   26771/   14F40 :                     
   26772/   14F40 :                     loc_14CC4:
   26773/   14F40 : E348                		lsl.w	#1,d0
   26774/   14F42 : 6402                		bcc.s	loc_14CCA
   26775/   14F44 : 5302                		subq.b	#1,d2
   26776/   14F46 :                     
   26777/   14F46 :                     loc_14CCA:
   26778/   14F46 : 51C9 FFF8           		dbf	d1,loc_14CC4
   26779/   14F4A :                     
   26780/   14F4A : 6006                		bra.s	loc_14CD6
   26781/   14F4C :                     ; ===========================================================================
   26782/   14F4C :                     
   26783/   14F4C :                     loc_14CD0:
   26784/   14F4C : 303C 0010           		move.w	#$10,d0
   26785/   14F50 :                     
   26786/   14F50 :                     loc_14CD4:
   26787/   14F50 : 3400                		move.w	d0,d2
   26788/   14F52 :                     
   26789/   14F52 :                     loc_14CD6:
   26790/   14F52 : 14C2                		move.b	d2,(a2)+
   26791/   14F54 : 51CB FFCC           		dbf	d3,loc_14CA6
   26792/   14F58 :                     
   26793/   14F58 : 4E75                		rts	
   26794/   14F5A :                     
   26795/   14F5A :                     ; End of function FloorLog_Unk2
   26796/   14F5A :                     
   26797/   14F5A :                     
   26798/   14F5A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26799/   14F5A :                     
   26800/   14F5A :                     
   26801/   14F5A :                     Sonic_WalkSpeed:			; XREF: Sonic_Move
   26802/   14F5A : 2628 0008           		move.l	8(a0),d3
   26803/   14F5E : 2428 000C           		move.l	$C(a0),d2
   26804/   14F62 : 3228 0010           		move.w	$10(a0),d1
   26805/   14F66 : 48C1                		ext.l	d1
   26806/   14F68 : E181                		asl.l	#8,d1
   26807/   14F6A : D681                		add.l	d1,d3
   26808/   14F6C : 3228 0012           		move.w	$12(a0),d1
   26809/   14F70 : 48C1                		ext.l	d1
   26810/   14F72 : E181                		asl.l	#8,d1
   26811/   14F74 : D481                		add.l	d1,d2
   26812/   14F76 : 4842                		swap	d2
   26813/   14F78 : 4843                		swap	d3
   26814/   14F7A : 11C0 F768           		move.b	d0,($FFFFF768).w
   26815/   14F7E : 11C0 F76A           		move.b	d0,($FFFFF76A).w
   26816/   14F82 : 1200                		move.b	d0,d1
   26817/   14F84 : 0600 0020           		addi.b	#$20,d0
   26818/   14F88 : 6A0C                		bpl.s	loc_14D1A
   26819/   14F8A : 1001                		move.b	d1,d0
   26820/   14F8C : 6A02                		bpl.s	loc_14D14
   26821/   14F8E : 5300                		subq.b	#1,d0
   26822/   14F90 :                     
   26823/   14F90 :                     loc_14D14:
   26824/   14F90 : 0600 0020           		addi.b	#$20,d0
   26825/   14F94 : 600A                		bra.s	loc_14D24
   26826/   14F96 :                     ; ===========================================================================
   26827/   14F96 :                     
   26828/   14F96 :                     loc_14D1A:
   26829/   14F96 : 1001                		move.b	d1,d0
   26830/   14F98 : 6A02                		bpl.s	loc_14D20
   26831/   14F9A : 5200                		addq.b	#1,d0
   26832/   14F9C :                     
   26833/   14F9C :                     loc_14D20:
   26834/   14F9C : 0600 001F           		addi.b	#$1F,d0
   26835/   14FA0 :                     
   26836/   14FA0 :                     loc_14D24:
   26837/   14FA0 : 0200 00C0           		andi.b	#$C0,d0
   26838/   14FA4 : 6700 00C6           		beq.w	loc_14DF0
   26839/   14FA8 : 0C00 0080           		cmpi.b	#$80,d0
   26840/   14FAC : 6700 024A           		beq.w	loc_14F7C
   26841/   14FB0 : 0201 0038           		andi.b	#$38,d1
   26842/   14FB4 : 6602                		bne.s	loc_14D3C
   26843/   14FB6 : 5042                		addq.w	#8,d2
   26844/   14FB8 :                     
   26845/   14FB8 :                     loc_14D3C:
   26846/   14FB8 : 0C00 0040           		cmpi.b	#$40,d0
   26847/   14FBC : 6700 0308           		beq.w	loc_1504A
   26848/   14FC0 : 6000 0176           		bra.w	loc_14EBC
   26849/   14FC4 :                     
   26850/   14FC4 :                     ; End of function Sonic_WalkSpeed
   26851/   14FC4 :                     
   26852/   14FC4 :                     
   26853/   14FC4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26854/   14FC4 :                     
   26855/   14FC4 :                     
   26856/   14FC4 :                     sub_14D48:				; XREF: Sonic_Jump
   26857/   14FC4 : 11C0 F768           		move.b	d0,($FFFFF768).w
   26858/   14FC8 : 11C0 F76A           		move.b	d0,($FFFFF76A).w
   26859/   14FCC : 0600 0020           		addi.b	#$20,d0
   26860/   14FD0 : 0200 00C0           		andi.b	#$C0,d0
   26861/   14FD4 : 0C00 0040           		cmpi.b	#$40,d0
   26862/   14FD8 : 6700 0278           		beq.w	loc_14FD6
   26863/   14FDC : 0C00 0080           		cmpi.b	#$80,d0
   26864/   14FE0 : 6700 01A2           		beq.w	Sonic_DontRunOnWalls
   26865/   14FE4 : 0C00 00C0           		cmpi.b	#$C0,d0
   26866/   14FE8 : 6700 00E2           		beq.w	sub_14E50
   26867/   14FEC :                     
   26868/   14FEC :                     ; End of function sub_14D48
   26869/   14FEC :                     
   26870/   14FEC :                     ; ---------------------------------------------------------------------------
   26871/   14FEC :                     ; Subroutine to	make Sonic land	on the floor after jumping
   26872/   14FEC :                     ; ---------------------------------------------------------------------------
   26873/   14FEC :                     
   26874/   14FEC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26875/   14FEC :                     
   26876/   14FEC :                     
   26877/   14FEC :                     Sonic_HitFloor:				; XREF: Sonic_Floor
   26878/   14FEC : 3428 000C           		move.w	$C(a0),d2
   26879/   14FF0 : 3628 0008           		move.w	8(a0),d3
   26880/   14FF4 : 7000                		moveq	#0,d0
   26881/   14FF6 : 1028 0016           		move.b	$16(a0),d0
   26882/   14FFA : 4880                		ext.w	d0
   26883/   14FFC : D440                		add.w	d0,d2
   26884/   14FFE : 1028 0017           		move.b	$17(a0),d0
   26885/   15002 : 4880                		ext.w	d0
   26886/   15004 : D640                		add.w	d0,d3
   26887/   15006 : 49F8 F768           		lea	($FFFFF768).w,a4
   26888/   1500A : 367C 0010           		movea.w	#$10,a3
   26889/   1500E : 3C3C 0000           		move.w	#0,d6
   26890/   15012 : 7A0D                		moveq	#$D,d5
   26891/   15014 : 6100 FC34           		bsr.w	FindFloor
   26892/   15018 : 3F01                		move.w	d1,-(sp)
   26893/   1501A : 3428 000C           		move.w	$C(a0),d2
   26894/   1501E : 3628 0008           		move.w	8(a0),d3
   26895/   15022 : 7000                		moveq	#0,d0
   26896/   15024 : 1028 0016           		move.b	$16(a0),d0
   26897/   15028 : 4880                		ext.w	d0
   26898/   1502A : D440                		add.w	d0,d2
   26899/   1502C : 1028 0017           		move.b	$17(a0),d0
   26900/   15030 : 4880                		ext.w	d0
   26901/   15032 : 9640                		sub.w	d0,d3
   26902/   15034 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   26903/   15038 : 367C 0010           		movea.w	#$10,a3
   26904/   1503C : 3C3C 0000           		move.w	#0,d6
   26905/   15040 : 7A0D                		moveq	#$D,d5
   26906/   15042 : 6100 FC06           		bsr.w	FindFloor
   26907/   15046 : 301F                		move.w	(sp)+,d0
   26908/   15048 : 143C 0000           		move.b	#0,d2
   26909/   1504C :                     
   26910/   1504C :                     loc_14DD0:
   26911/   1504C : 1638 F76A           		move.b	($FFFFF76A).w,d3
   26912/   15050 : B240                		cmp.w	d0,d1
   26913/   15052 : 6F06                		ble.s	loc_14DDE
   26914/   15054 : 1638 F768           		move.b	($FFFFF768).w,d3
   26915/   15058 : C141                		exg	d0,d1
   26916/   1505A :                     
   26917/   1505A :                     loc_14DDE:
   26918/   1505A : 0803 0000           		btst	#0,d3
   26919/   1505E : 6702                		beq.s	locret_14DE6
   26920/   15060 : 1602                		move.b	d2,d3
   26921/   15062 :                     
   26922/   15062 :                     locret_14DE6:
   26923/   15062 : 4E75                		rts	
   26924/   15064 :                     
   26925/   15064 :                     ; End of function Sonic_HitFloor
   26926/   15064 :                     
   26927/   15064 :                     ; ===========================================================================
   26928/   15064 : 3428 000C           		move.w	$C(a0),d2
   26929/   15068 : 3628 0008           		move.w	8(a0),d3
   26930/   1506C :                     
   26931/   1506C :                     loc_14DF0:				; XREF: Sonic_WalkSpeed
   26932/   1506C : 0642 000A           		addi.w	#$A,d2
   26933/   15070 : 49F8 F768           		lea	($FFFFF768).w,a4
   26934/   15074 : 367C 0010           		movea.w	#$10,a3
   26935/   15078 : 3C3C 0000           		move.w	#0,d6
   26936/   1507C : 7A0E                		moveq	#$E,d5
   26937/   1507E : 6100 FBCA           		bsr.w	FindFloor
   26938/   15082 : 143C 0000           		move.b	#0,d2
   26939/   15086 :                     
   26940/   15086 :                     loc_14E0A:				; XREF: sub_14EB4
   26941/   15086 : 1638 F768           		move.b	($FFFFF768).w,d3
   26942/   1508A : 0803 0000           		btst	#0,d3
   26943/   1508E : 6702                		beq.s	locret_14E16
   26944/   15090 : 1602                		move.b	d2,d3
   26945/   15092 :                     
   26946/   15092 :                     locret_14E16:
   26947/   15092 : 4E75                		rts	
   26948/   15094 :                     
   26949/   15094 :                     ; ---------------------------------------------------------------------------
   26950/   15094 :                     ; Subroutine allowing objects to interact with the floor
   26951/   15094 :                     ; ---------------------------------------------------------------------------
   26952/   15094 :                     
   26953/   15094 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26954/   15094 :                     
   26955/   15094 :                     
   26956/   15094 :                     ObjHitFloor:
   26957/   15094 : 3628 0008           		move.w	8(a0),d3
   26958/   15098 :                     
   26959/   15098 :                     ; End of function ObjHitFloor
   26960/   15098 :                     
   26961/   15098 :                     
   26962/   15098 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26963/   15098 :                     
   26964/   15098 :                     
   26965/   15098 :                     ObjHitFloor2:
   26966/   15098 : 3428 000C           		move.w	$C(a0),d2
   26967/   1509C : 7000                		moveq	#0,d0
   26968/   1509E : 1028 0016           		move.b	$16(a0),d0
   26969/   150A2 : 4880                		ext.w	d0
   26970/   150A4 : D440                		add.w	d0,d2
   26971/   150A6 : 49F8 F768           		lea	($FFFFF768).w,a4
   26972/   150AA : 18BC 0000           		move.b	#0,(a4)
   26973/   150AE : 367C 0010           		movea.w	#$10,a3
   26974/   150B2 : 3C3C 0000           		move.w	#0,d6
   26975/   150B6 : 7A0D                		moveq	#$D,d5
   26976/   150B8 : 6100 FB90           		bsr.w	FindFloor
   26977/   150BC : 1638 F768           		move.b	($FFFFF768).w,d3
   26978/   150C0 : 0803 0000           		btst	#0,d3
   26979/   150C4 : 6704                		beq.s	locret_14E4E
   26980/   150C6 : 163C 0000           		move.b	#0,d3
   26981/   150CA :                     
   26982/   150CA :                     locret_14E4E:
   26983/   150CA : 4E75                		rts	
   26984/   150CC :                     ; End of function ObjHitFloor2
   26985/   150CC :                     
   26986/   150CC :                     
   26987/   150CC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26988/   150CC :                     
   26989/   150CC :                     
   26990/   150CC :                     sub_14E50:				; XREF: sub_14D48
   26991/   150CC : 3428 000C           		move.w	$C(a0),d2
   26992/   150D0 : 3628 0008           		move.w	8(a0),d3
   26993/   150D4 : 7000                		moveq	#0,d0
   26994/   150D6 : 1028 0017           		move.b	$17(a0),d0
   26995/   150DA : 4880                		ext.w	d0
   26996/   150DC : 9440                		sub.w	d0,d2
   26997/   150DE : 1028 0016           		move.b	$16(a0),d0
   26998/   150E2 : 4880                		ext.w	d0
   26999/   150E4 : D640                		add.w	d0,d3
   27000/   150E6 : 49F8 F768           		lea	($FFFFF768).w,a4
   27001/   150EA : 367C 0010           		movea.w	#$10,a3
   27002/   150EE : 3C3C 0000           		move.w	#0,d6
   27003/   150F2 : 7A0E                		moveq	#$E,d5
   27004/   150F4 : 6100 FC92           		bsr.w	FindWall
   27005/   150F8 : 3F01                		move.w	d1,-(sp)
   27006/   150FA : 3428 000C           		move.w	$C(a0),d2
   27007/   150FE : 3628 0008           		move.w	8(a0),d3
   27008/   15102 : 7000                		moveq	#0,d0
   27009/   15104 : 1028 0017           		move.b	$17(a0),d0
   27010/   15108 : 4880                		ext.w	d0
   27011/   1510A : D440                		add.w	d0,d2
   27012/   1510C : 1028 0016           		move.b	$16(a0),d0
   27013/   15110 : 4880                		ext.w	d0
   27014/   15112 : D640                		add.w	d0,d3
   27015/   15114 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   27016/   15118 : 367C 0010           		movea.w	#$10,a3
   27017/   1511C : 3C3C 0000           		move.w	#0,d6
   27018/   15120 : 7A0E                		moveq	#$E,d5
   27019/   15122 : 6100 FC64           		bsr.w	FindWall
   27020/   15126 : 301F                		move.w	(sp)+,d0
   27021/   15128 : 143C 00C0           		move.b	#-$40,d2
   27022/   1512C : 6000 FF1E           		bra.w	loc_14DD0
   27023/   15130 :                     
   27024/   15130 :                     ; End of function sub_14E50
   27025/   15130 :                     
   27026/   15130 :                     
   27027/   15130 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   27028/   15130 :                     
   27029/   15130 :                     
   27030/   15130 :                     sub_14EB4:				; XREF: Sonic_Floor
   27031/   15130 : 3428 000C           		move.w	$C(a0),d2
   27032/   15134 : 3628 0008           		move.w	8(a0),d3
   27033/   15138 :                     
   27034/   15138 :                     loc_14EBC:
   27035/   15138 : 0643 000A           		addi.w	#$A,d3
   27036/   1513C : 49F8 F768           		lea	($FFFFF768).w,a4
   27037/   15140 : 367C 0010           		movea.w	#$10,a3
   27038/   15144 : 3C3C 0000           		move.w	#0,d6
   27039/   15148 : 7A0E                		moveq	#$E,d5
   27040/   1514A : 6100 FC3C           		bsr.w	FindWall
   27041/   1514E : 143C 00C0           		move.b	#-$40,d2
   27042/   15152 : 6000 FF32           		bra.w	loc_14E0A
   27043/   15156 :                     
   27044/   15156 :                     ; End of function sub_14EB4
   27045/   15156 :                     
   27046/   15156 :                     ; ---------------------------------------------------------------------------
   27047/   15156 :                     ; Subroutine to	detect when an object hits a wall to its right
   27048/   15156 :                     ; ---------------------------------------------------------------------------
   27049/   15156 :                     
   27050/   15156 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   27051/   15156 :                     
   27052/   15156 :                     
   27053/   15156 :                     ObjHitWallRight:
   27054/   15156 : D668 0008           		add.w	8(a0),d3
   27055/   1515A : 3428 000C           		move.w	$C(a0),d2
   27056/   1515E : 49F8 F768           		lea	($FFFFF768).w,a4
   27057/   15162 : 18BC 0000           		move.b	#0,(a4)
   27058/   15166 : 367C 0010           		movea.w	#$10,a3
   27059/   1516A : 3C3C 0000           		move.w	#0,d6
   27060/   1516E : 7A0E                		moveq	#$E,d5
   27061/   15170 : 6100 FC16           		bsr.w	FindWall
   27062/   15174 : 1638 F768           		move.b	($FFFFF768).w,d3
   27063/   15178 : 0803 0000           		btst	#0,d3
   27064/   1517C : 6704                		beq.s	locret_14F06
   27065/   1517E : 163C 00C0           		move.b	#-$40,d3
   27066/   15182 :                     
   27067/   15182 :                     locret_14F06:
   27068/   15182 : 4E75                		rts	
   27069/   15184 :                     
   27070/   15184 :                     ; End of function ObjHitWallRight
   27071/   15184 :                     
   27072/   15184 :                     ; ---------------------------------------------------------------------------
   27073/   15184 :                     ; Subroutine pralign 2ting	Sonic from running on walls and	ceilings when he
   27074/   15184 :                     ; touches them
   27075/   15184 :                     ; ---------------------------------------------------------------------------
   27076/   15184 :                     
   27077/   15184 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   27078/   15184 :                     
   27079/   15184 :                     
   27080/   15184 :                     Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
   27081/   15184 : 3428 000C           		move.w	$C(a0),d2
   27082/   15188 : 3628 0008           		move.w	8(a0),d3
   27083/   1518C : 7000                		moveq	#0,d0
   27084/   1518E : 1028 0016           		move.b	$16(a0),d0
   27085/   15192 : 4880                		ext.w	d0
   27086/   15194 : 9440                		sub.w	d0,d2
   27087/   15196 : 0A42 000F           		eori.w	#$F,d2
   27088/   1519A : 1028 0017           		move.b	$17(a0),d0
   27089/   1519E : 4880                		ext.w	d0
   27090/   151A0 : D640                		add.w	d0,d3
   27091/   151A2 : 49F8 F768           		lea	($FFFFF768).w,a4
   27092/   151A6 : 367C FFF0           		movea.w	#-$10,a3
   27093/   151AA : 3C3C 1000           		move.w	#$1000,d6
   27094/   151AE : 7A0E                		moveq	#$E,d5
   27095/   151B0 : 6100 FA98           		bsr.w	FindFloor
   27096/   151B4 : 3F01                		move.w	d1,-(sp)
   27097/   151B6 : 3428 000C           		move.w	$C(a0),d2
   27098/   151BA : 3628 0008           		move.w	8(a0),d3
   27099/   151BE : 7000                		moveq	#0,d0
   27100/   151C0 : 1028 0016           		move.b	$16(a0),d0
   27101/   151C4 : 4880                		ext.w	d0
   27102/   151C6 : 9440                		sub.w	d0,d2
   27103/   151C8 : 0A42 000F           		eori.w	#$F,d2
   27104/   151CC : 1028 0017           		move.b	$17(a0),d0
   27105/   151D0 : 4880                		ext.w	d0
   27106/   151D2 : 9640                		sub.w	d0,d3
   27107/   151D4 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   27108/   151D8 : 367C FFF0           		movea.w	#-$10,a3
   27109/   151DC : 3C3C 1000           		move.w	#$1000,d6
   27110/   151E0 : 7A0E                		moveq	#$E,d5
   27111/   151E2 : 6100 FA66           		bsr.w	FindFloor
   27112/   151E6 : 301F                		move.w	(sp)+,d0
   27113/   151E8 : 143C 0080           		move.b	#-$80,d2
   27114/   151EC : 6000 FE5E           		bra.w	loc_14DD0
   27115/   151F0 :                     ; End of function Sonic_DontRunOnWalls
   27116/   151F0 :                     
   27117/   151F0 :                     ; ===========================================================================
   27118/   151F0 : 3428 000C           		move.w	$C(a0),d2
   27119/   151F4 : 3628 0008           		move.w	8(a0),d3
   27120/   151F8 :                     
   27121/   151F8 :                     loc_14F7C:
   27122/   151F8 : 0442 000A           		subi.w	#$A,d2
   27123/   151FC : 0A42 000F           		eori.w	#$F,d2
   27124/   15200 : 49F8 F768           		lea	($FFFFF768).w,a4
   27125/   15204 : 367C FFF0           		movea.w	#-$10,a3
   27126/   15208 : 3C3C 1000           		move.w	#$1000,d6
   27127/   1520C : 7A0E                		moveq	#$E,d5
   27128/   1520E : 6100 FA3A           		bsr.w	FindFloor
   27129/   15212 : 143C 0080           		move.b	#-$80,d2
   27130/   15216 : 6000 FE6E           		bra.w	loc_14E0A
   27131/   1521A :                     
   27132/   1521A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   27133/   1521A :                     
   27134/   1521A :                     
   27135/   1521A :                     ObjHitCeiling:
   27136/   1521A : 3428 000C           		move.w	$C(a0),d2
   27137/   1521E : 3628 0008           		move.w	8(a0),d3
   27138/   15222 : 7000                		moveq	#0,d0
   27139/   15224 : 1028 0016           		move.b	$16(a0),d0
   27140/   15228 : 4880                		ext.w	d0
   27141/   1522A : 9440                		sub.w	d0,d2
   27142/   1522C : 0A42 000F           		eori.w	#$F,d2
   27143/   15230 : 49F8 F768           		lea	($FFFFF768).w,a4
   27144/   15234 : 367C FFF0           		movea.w	#-$10,a3
   27145/   15238 : 3C3C 1000           		move.w	#$1000,d6
   27146/   1523C : 7A0E                		moveq	#$E,d5
   27147/   1523E : 6100 FA0A           		bsr.w	FindFloor
   27148/   15242 : 1638 F768           		move.b	($FFFFF768).w,d3
   27149/   15246 : 0803 0000           		btst	#0,d3
   27150/   1524A : 6704                		beq.s	locret_14FD4
   27151/   1524C : 163C 0080           		move.b	#-$80,d3
   27152/   15250 :                     
   27153/   15250 :                     locret_14FD4:
   27154/   15250 : 4E75                		rts	
   27155/   15252 :                     ; End of function ObjHitCeiling
   27156/   15252 :                     
   27157/   15252 :                     ; ===========================================================================
   27158/   15252 :                     
   27159/   15252 :                     loc_14FD6:				; XREF: sub_14D48
   27160/   15252 : 3428 000C           		move.w	$C(a0),d2
   27161/   15256 : 3628 0008           		move.w	8(a0),d3
   27162/   1525A : 7000                		moveq	#0,d0
   27163/   1525C : 1028 0017           		move.b	$17(a0),d0
   27164/   15260 : 4880                		ext.w	d0
   27165/   15262 : 9440                		sub.w	d0,d2
   27166/   15264 : 1028 0016           		move.b	$16(a0),d0
   27167/   15268 : 4880                		ext.w	d0
   27168/   1526A : 9640                		sub.w	d0,d3
   27169/   1526C : 0A43 000F           		eori.w	#$F,d3
   27170/   15270 : 49F8 F768           		lea	($FFFFF768).w,a4
   27171/   15274 : 367C FFF0           		movea.w	#-$10,a3
   27172/   15278 : 3C3C 0800           		move.w	#$800,d6
   27173/   1527C : 7A0E                		moveq	#$E,d5
   27174/   1527E : 6100 FB08           		bsr.w	FindWall
   27175/   15282 : 3F01                		move.w	d1,-(sp)
   27176/   15284 : 3428 000C           		move.w	$C(a0),d2
   27177/   15288 : 3628 0008           		move.w	8(a0),d3
   27178/   1528C : 7000                		moveq	#0,d0
   27179/   1528E : 1028 0017           		move.b	$17(a0),d0
   27180/   15292 : 4880                		ext.w	d0
   27181/   15294 : D440                		add.w	d0,d2
   27182/   15296 : 1028 0016           		move.b	$16(a0),d0
   27183/   1529A : 4880                		ext.w	d0
   27184/   1529C : 9640                		sub.w	d0,d3
   27185/   1529E : 0A43 000F           		eori.w	#$F,d3
   27186/   152A2 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   27187/   152A6 : 367C FFF0           		movea.w	#-$10,a3
   27188/   152AA : 3C3C 0800           		move.w	#$800,d6
   27189/   152AE : 7A0E                		moveq	#$E,d5
   27190/   152B0 : 6100 FAD6           		bsr.w	FindWall
   27191/   152B4 : 301F                		move.w	(sp)+,d0
   27192/   152B6 : 143C 0040           		move.b	#$40,d2
   27193/   152BA : 6000 FD90           		bra.w	loc_14DD0
   27194/   152BE :                     
   27195/   152BE :                     ; ---------------------------------------------------------------------------
   27196/   152BE :                     ; Subroutine to	stop Sonic when	he jumps at a wall
   27197/   152BE :                     ; ---------------------------------------------------------------------------
   27198/   152BE :                     
   27199/   152BE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   27200/   152BE :                     
   27201/   152BE :                     
   27202/   152BE :                     Sonic_HitWall:				; XREF: Sonic_Floor
   27203/   152BE : 3428 000C           		move.w	$C(a0),d2
   27204/   152C2 : 3628 0008           		move.w	8(a0),d3
   27205/   152C6 :                     
   27206/   152C6 :                     loc_1504A:
   27207/   152C6 : 0443 000A           		subi.w	#$A,d3
   27208/   152CA : 0A43 000F           		eori.w	#$F,d3
   27209/   152CE : 49F8 F768           		lea	($FFFFF768).w,a4
   27210/   152D2 : 367C FFF0           		movea.w	#-$10,a3
   27211/   152D6 : 3C3C 0800           		move.w	#$800,d6
   27212/   152DA : 7A0E                		moveq	#$E,d5
   27213/   152DC : 6100 FAAA           		bsr.w	FindWall
   27214/   152E0 : 143C 0040           		move.b	#$40,d2
   27215/   152E4 : 6000 FDA0           		bra.w	loc_14E0A
   27216/   152E8 :                     ; End of function Sonic_HitWall
   27217/   152E8 :                     
   27218/   152E8 :                     ; ---------------------------------------------------------------------------
   27219/   152E8 :                     ; Subroutine to	detect when an object hits a wall to its left
   27220/   152E8 :                     ; ---------------------------------------------------------------------------
   27221/   152E8 :                     
   27222/   152E8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   27223/   152E8 :                     
   27224/   152E8 :                     
   27225/   152E8 :                     ObjHitWallLeft:
   27226/   152E8 : D668 0008           		add.w	8(a0),d3
   27227/   152EC : 3428 000C           		move.w	$C(a0),d2
   27228/   152F0 : 49F8 F768           		lea	($FFFFF768).w,a4
   27229/   152F4 : 18BC 0000           		move.b	#0,(a4)
   27230/   152F8 : 367C FFF0           		movea.w	#-$10,a3
   27231/   152FC : 3C3C 0800           		move.w	#$800,d6
   27232/   15300 : 7A0E                		moveq	#$E,d5
   27233/   15302 : 6100 FA84           		bsr.w	FindWall
   27234/   15306 : 1638 F768           		move.b	($FFFFF768).w,d3
   27235/   1530A : 0803 0000           		btst	#0,d3
   27236/   1530E : 6704                		beq.s	locret_15098
   27237/   15310 : 163C 0040           		move.b	#$40,d3
   27238/   15314 :                     
   27239/   15314 :                     locret_15098:
   27240/   15314 : 4E75                		rts	
   27241/   15316 :                     ; End of function ObjHitWallLeft
   27242/   15316 :                     
   27243/   15316 :                     ; ===========================================================================
   27244/   15316 :                     ; ---------------------------------------------------------------------------
   27245/   15316 :                     ; Object 66 - rotating disc that grabs Sonic (SBZ)
   27246/   15316 :                     ; ---------------------------------------------------------------------------
   27247/   15316 :                     
   27248/   15316 :                     Obj66:					; XREF: Obj_Index
   27249/   15316 : 7000                		moveq	#0,d0
   27250/   15318 : 1028 0024           		move.b	$24(a0),d0
   27251/   1531C : 323B 0006           		move.w	Obj66_Index(pc,d0.w),d1
   27252/   15320 : 4EFB 1002           		jmp	Obj66_Index(pc,d1.w)
   27253/   15324 :                     ; ===========================================================================
   27254/   15324 : 0008                Obj66_Index:	dc.w Obj66_Main-Obj66_Index
   27255/   15326 : 0078                		dc.w Obj66_Action-Obj66_Index
   27256/   15328 : 010C                		dc.w Obj66_Display-Obj66_Index
   27257/   1532A : 0110                		dc.w Obj66_Release-Obj66_Index
   27258/   1532C :                     ; ===========================================================================
   27259/   1532C :                     
   27260/   1532C :                     Obj66_Main:				; XREF: Obj66_Index
   27261/   1532C : 5428 0024           		addq.b	#2,$24(a0)
   27262/   15330 : 323C 0001           		move.w	#1,d1
   27263/   15334 : 2248                		movea.l	a0,a1
   27264/   15336 : 6028                		bra.s	Obj66_MakeItem
   27265/   15338 :                     ; ===========================================================================
   27266/   15338 :                     
   27267/   15338 :                     Obj66_Loop:
   27268/   15338 : 6100 885C           		bsr.w	SingleObjLoad
   27269/   1533C : 663C                		bne.s	loc_150FE
   27270/   1533E : (MACRO)             		_move.b	#$66,0(a1)
   27270/   1533E :  (MACRO-2)                          insn2op move.b, #$66,0(a1)
   27270/   1533E : 137C 0066 0001                              !move.b   #$66,1+0(a1)
   27270/   15343 :                                             !org    *-1
   27270/   15343 : 00                                          !dc.b   0
   27271/   15344 : 5829 0024           		addq.b	#4,$24(a1)
   27272/   15348 : 3368 0008 0008      		move.w	8(a0),8(a1)
   27273/   1534E : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   27274/   15354 : 137C 0003 0018      		move.b	#3,$18(a1)
   27275/   1535A : 137C 0010 001A      		move.b	#$10,$1A(a1)
   27276/   15360 :                     
   27277/   15360 :                     Obj66_MakeItem:				; XREF: Obj66_Main
   27278/   15360 : 237C 0001 550E 0004 		move.l	#Map_obj66,4(a1)
   27279/   15368 : 337C 4348 0002      		move.w	#$4348,2(a1)
   27280/   1536E : 0029 0004 0001      		ori.b	#4,1(a1)
   27281/   15374 : 137C 0038 0019      		move.b	#$38,$19(a1)
   27282/   1537A :                     
   27283/   1537A :                     loc_150FE:
   27284/   1537A : 51C9 FFBC           		dbf	d1,Obj66_Loop
   27285/   1537E :                     
   27286/   1537E : 117C 0030 0019      		move.b	#$30,$19(a0)
   27287/   15384 : 117C 0004 0018      		move.b	#4,$18(a0)
   27288/   1538A : 317C 003C 0030      		move.w	#$3C,$30(a0)
   27289/   15390 : 117C 0001 0034      		move.b	#1,$34(a0)
   27290/   15396 : 1168 0028 0038      		move.b	$28(a0),$38(a0)
   27291/   1539C :                     
   27292/   1539C :                     Obj66_Action:				; XREF: Obj66_Index
   27293/   1539C : 6100 00DE           		bsr.w	Obj66_ChkSwitch
   27294/   153A0 : 4A28 0001           		tst.b	1(a0)
   27295/   153A4 : 6A00 008A           		bpl.w	Obj66_Display
   27296/   153A8 : 323C 0030           		move.w	#$30,d1
   27297/   153AC : 3401                		move.w	d1,d2
   27298/   153AE : 3602                		move.w	d2,d3
   27299/   153B0 : 5243                		addq.w	#1,d3
   27300/   153B2 : 3828 0008           		move.w	8(a0),d4
   27301/   153B6 : 6100 A72E           		bsr.w	SolidObject
   27302/   153BA : 0828 0005 0022      		btst	#5,$22(a0)
   27303/   153C0 : 6700 006E           		beq.w	Obj66_Display
   27304/   153C4 : 43F8 D000           		lea	($FFFFD000).w,a1
   27305/   153C8 : 720E                		moveq	#$E,d1
   27306/   153CA : 3029 0008           		move.w	8(a1),d0
   27307/   153CE : B068 0008           		cmp.w	8(a0),d0
   27308/   153D2 : 6502                		bcs.s	Obj66_GrabSonic
   27309/   153D4 : 7207                		moveq	#7,d1
   27310/   153D6 :                     
   27311/   153D6 :                     Obj66_GrabSonic:
   27312/   153D6 : B228 001A           		cmp.b	$1A(a0),d1
   27313/   153DA : 6654                		bne.s	Obj66_Display
   27314/   153DC : 1141 0032           		move.b	d1,$32(a0)
   27315/   153E0 : 5828 0024           		addq.b	#4,$24(a0)
   27316/   153E4 : 11FC 0001 F7C8      		move.b	#1,($FFFFF7C8).w ; lock	controls
   27317/   153EA : 137C 0002 001C      		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
   27318/   153F0 : 337C 0800 0014      		move.w	#$800,$14(a1)
   27319/   153F6 : 337C 0000 0010      		move.w	#0,$10(a1)
   27320/   153FC : 337C 0000 0012      		move.w	#0,$12(a1)
   27321/   15402 : 08A8 0005 0022      		bclr	#5,$22(a0)
   27322/   15408 : 08A9 0005 0022      		bclr	#5,$22(a1)
   27323/   1540E : 08E9 0001 0022      		bset	#1,$22(a1)
   27324/   15414 : 3429 0008           		move.w	8(a1),d2
   27325/   15418 : 3629 000C           		move.w	$C(a1),d3
   27326/   1541C : 6100 00A6           		bsr.w	Obj66_ChgPos
   27327/   15420 : D569 0008           		add.w	d2,8(a1)
   27328/   15424 : D769 000C           		add.w	d3,$C(a1)
   27329/   15428 : E0E9 0008           		asr	8(a1)
   27330/   1542C : E0E9 000C           		asr	$C(a1)
   27331/   15430 :                     
   27332/   15430 :                     Obj66_Display:				; XREF: Obj66_Index
   27333/   15430 : 6000 A38A           		bra.w	MarkObjGone
   27334/   15434 :                     ; ===========================================================================
   27335/   15434 :                     
   27336/   15434 :                     Obj66_Release:				; XREF: Obj66_Index
   27337/   15434 : 1028 001A           		move.b	$1A(a0),d0
   27338/   15438 : 0C00 0004           		cmpi.b	#4,d0
   27339/   1543C : 6706                		beq.s	loc_151C8
   27340/   1543E : 0C00 0007           		cmpi.b	#7,d0
   27341/   15442 : 6630                		bne.s	loc_151F8
   27342/   15444 :                     
   27343/   15444 :                     loc_151C8:
   27344/   15444 : B028 0032           		cmp.b	$32(a0),d0
   27345/   15448 : 672A                		beq.s	loc_151F8
   27346/   1544A : 43F8 D000           		lea	($FFFFD000).w,a1
   27347/   1544E : 337C 0000 0010      		move.w	#0,$10(a1)
   27348/   15454 : 337C 0800 0012      		move.w	#$800,$12(a1)
   27349/   1545A : 0C00 0004           		cmpi.b	#4,d0
   27350/   1545E : 670C                		beq.s	loc_151F0
   27351/   15460 : 337C 0800 0010      		move.w	#$800,$10(a1)
   27352/   15466 : 337C 0800 0012      		move.w	#$800,$12(a1)
   27353/   1546C :                     
   27354/   1546C :                     loc_151F0:
   27355/   1546C : 4238 F7C8           		clr.b	($FFFFF7C8).w	; unlock controls
   27356/   15470 : 5928 0024           		subq.b	#4,$24(a0)
   27357/   15474 :                     
   27358/   15474 :                     loc_151F8:
   27359/   15474 : 6106                		bsr.s	Obj66_ChkSwitch
   27360/   15476 : 614C                		bsr.s	Obj66_ChgPos
   27361/   15478 : 6000 A342           		bra.w	MarkObjGone
   27362/   1547C :                     
   27363/   1547C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   27364/   1547C :                     
   27365/   1547C :                     
   27366/   1547C :                     Obj66_ChkSwitch:			; XREF: Obj66_Action
   27367/   1547C : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   27368/   15480 : 7000                		moveq	#0,d0
   27369/   15482 : 1028 0038           		move.b	$38(a0),d0
   27370/   15486 : 0832 0000 0000      		btst	#0,(a2,d0.w)	; is switch pressed?
   27371/   1548C : 6712                		beq.s	loc_15224	; if not, branch
   27372/   1548E : 4A28 0036           		tst.b	$36(a0)		; has switch previously	been pressed?
   27373/   15492 : 6610                		bne.s	Obj66_Animate	; if yes, branch
   27374/   15494 : 4428 0034           		neg.b	$34(a0)
   27375/   15498 : 117C 0001 0036      		move.b	#1,$36(a0)	; set to "previously pressed"
   27376/   1549E : 6004                		bra.s	Obj66_Animate
   27377/   154A0 :                     ; ===========================================================================
   27378/   154A0 :                     
   27379/   154A0 :                     loc_15224:
   27380/   154A0 : 4228 0036           		clr.b	$36(a0)		; set to "not yet pressed"
   27381/   154A4 :                     
   27382/   154A4 :                     Obj66_Animate:
   27383/   154A4 : 5328 001E           		subq.b	#1,$1E(a0)
   27384/   154A8 : 6A18                		bpl.s	locret_15246
   27385/   154AA : 117C 0007 001E      		move.b	#7,$1E(a0)
   27386/   154B0 : 1228 0034           		move.b	$34(a0),d1
   27387/   154B4 : 1028 001A           		move.b	$1A(a0),d0
   27388/   154B8 : D001                		add.b	d1,d0
   27389/   154BA : 0200 000F           		andi.b	#$F,d0
   27390/   154BE : 1140 001A           		move.b	d0,$1A(a0)
   27391/   154C2 :                     
   27392/   154C2 :                     locret_15246:
   27393/   154C2 : 4E75                		rts	
   27394/   154C4 :                     ; End of function Obj66_ChkSwitch
   27395/   154C4 :                     
   27396/   154C4 :                     
   27397/   154C4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   27398/   154C4 :                     
   27399/   154C4 :                     
   27400/   154C4 :                     Obj66_ChgPos:				; XREF: Obj66_GrabSonic
   27401/   154C4 : 43F8 D000           		lea	($FFFFD000).w,a1
   27402/   154C8 : 7000                		moveq	#0,d0
   27403/   154CA : 1028 001A           		move.b	$1A(a0),d0
   27404/   154CE : D040                		add.w	d0,d0
   27405/   154D0 : 45FB 001C           		lea	Obj66_PosData(pc,d0.w),a2
   27406/   154D4 : 101A                		move.b	(a2)+,d0
   27407/   154D6 : 4880                		ext.w	d0
   27408/   154D8 : D068 0008           		add.w	8(a0),d0
   27409/   154DC : 3340 0008           		move.w	d0,8(a1)
   27410/   154E0 : 101A                		move.b	(a2)+,d0
   27411/   154E2 : 4880                		ext.w	d0
   27412/   154E4 : D068 000C           		add.w	$C(a0),d0
   27413/   154E8 : 3340 000C           		move.w	d0,$C(a1)
   27414/   154EC : 4E75                		rts	
   27415/   154EE :                     ; End of function Obj66_ChgPos
   27416/   154EE :                     
   27417/   154EE :                     ; ===========================================================================
   27418/   154EE : E000 E20E           Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
   27419/   154F2 : E818 F21E           		dc.b  $E8, $18,	$F2, $1E
   27420/   154F6 : 0020 0E1E           		dc.b	0, $20,	 $E, $1E
   27421/   154FA : 1818 1E0E           		dc.b  $18, $18,	$1E,  $E
   27422/   154FE : 2000 1EF2           		dc.b  $20,   0,	$1E, $F2
   27423/   15502 : 18E8 0EE2           		dc.b  $18, $E8,	 $E, $E2
   27424/   15506 : 00E0 F2E2           		dc.b	0, $E0,	$F2, $E2
   27425/   1550A : E8E8 E2F2           		dc.b  $E8, $E8,	$E2, $F2
   27426/   1550E :                     ; ---------------------------------------------------------------------------
   27427/   1550E :                     ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
   27428/   1550E :                     ; ---------------------------------------------------------------------------
   27429/   1550E :                     Map_obj66:
   27430/   1550E :                     		include	"_maps/obj66.asm"
(1)    1/   1550E :                     ; ---------------------------------------------------------------------------
(1)    2/   1550E :                     ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
(1)    3/   1550E :                     ; ---------------------------------------------------------------------------
(1)    4/   1550E : 0022 0041           		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
(1)    5/   15512 : 0060 007F           		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
(1)    6/   15516 : 009E 00BD           		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
(1)    7/   1551A : 00DC 00FB           		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
(1)    8/   1551E : 011A 0139           		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
(1)    9/   15522 : 0158 0177           		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
(1)   10/   15526 : 0196 01B5           		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
(1)   11/   1552A : 01D4 01F3           		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
(1)   12/   1552E : 0212                		dc.w byte_154A4-Map_obj66
(1)   13/   15530 : 06                  byte_152B4:	dc.b 6
(1)   14/   15531 : E805 0022 D0        		dc.b $E8, 5, 0,	$22, $D0
(1)   15/   15536 : 0805 1022 D0        		dc.b 8,	5, $10,	$22, $D0
(1)   16/   1553B : E80A 0000 C8        		dc.b $E8, $A, 0, 0, $C8
(1)   17/   15540 : E80A 0800 E0        		dc.b $E8, $A, 8, 0, $E0
(1)   18/   15545 : 000A 1000 C8        		dc.b 0,	$A, $10, 0, $C8
(1)   19/   1554A : 000A 1800 E0        		dc.b 0,	$A, $18, 0, $E0
(1)   20/   1554F : 06                  byte_152D3:	dc.b 6
(1)   21/   15550 : F803 0026 D0        		dc.b $F8, 3, 0,	$26, $D0
(1)   22/   15555 : 1805 002A D8        		dc.b $18, 5, 0,	$2A, $D8
(1)   23/   1555A : F60A 0000 CA        		dc.b $F6, $A, 0, 0, $CA
(1)   24/   1555F : F60A 0800 E2        		dc.b $F6, $A, 8, 0, $E2
(1)   25/   15564 : 0E0A 1000 CA        		dc.b $E, $A, $10, 0, $CA
(1)   26/   15569 : 0E0A 1800 E2        		dc.b $E, $A, $18, 0, $E2
(1)   27/   1556E : 06                  byte_152F2:	dc.b 6
(1)   28/   1556F : 0006 002E D0        		dc.b 0,	6, 0, $2E, $D0
(1)   29/   15574 : 2009 0034 E8        		dc.b $20, 9, 0,	$34, $E8
(1)   30/   15579 : 000A 0000 D0        		dc.b 0,	$A, 0, 0, $D0
(1)   31/   1557E : 000A 0800 E8        		dc.b 0,	$A, 8, 0, $E8
(1)   32/   15583 : 180A 1000 D0        		dc.b $18, $A, $10, 0, $D0
(1)   33/   15588 : 180A 1800 E8        		dc.b $18, $A, $18, 0, $E8
(1)   34/   1558D : 06                  byte_15311:	dc.b 6
(1)   35/   1558E : 0807 003A D8        		dc.b 8,	7, 0, $3A, $D8
(1)   36/   15593 : 2808 0042 F0        		dc.b $28, 8, 0,	$42, $F0
(1)   37/   15598 : 060A 0000 DA        		dc.b 6,	$A, 0, 0, $DA
(1)   38/   1559D : 060A 0800 F2        		dc.b 6,	$A, 8, 0, $F2
(1)   39/   155A2 : 1E0A 1000 DA        		dc.b $1E, $A, $10, 0, $DA
(1)   40/   155A7 : 1E0A 1800 F2        		dc.b $1E, $A, $18, 0, $F2
(1)   41/   155AC : 06                  byte_15330:	dc.b 6
(1)   42/   155AD : 2005 0045 E8        		dc.b $20, 5, 0,	$45, $E8
(1)   43/   155B2 : 2005 0845 08        		dc.b $20, 5, 8,	$45, 8
(1)   44/   155B7 : 080A 0000 E8        		dc.b 8,	$A, 0, 0, $E8
(1)   45/   155BC : 080A 0800 00        		dc.b 8,	$A, 8, 0, 0
(1)   46/   155C1 : 200A 1000 E8        		dc.b $20, $A, $10, 0, $E8
(1)   47/   155C6 : 200A 1800 00        		dc.b $20, $A, $18, 0, 0
(1)   48/   155CB : 06                  byte_1534F:	dc.b 6
(1)   49/   155CC : 2808 0842 F8        		dc.b $28, 8, 8,	$42, $F8
(1)   50/   155D1 : 0807 083A 18        		dc.b 8,	7, 8, $3A, $18
(1)   51/   155D6 : 060A 0000 F6        		dc.b 6,	$A, 0, 0, $F6
(1)   52/   155DB : 060A 0800 0E        		dc.b 6,	$A, 8, 0, $E
(1)   53/   155E0 : 1E0A 1000 F6        		dc.b $1E, $A, $10, 0, $F6
(1)   54/   155E5 : 1E0A 1800 0E        		dc.b $1E, $A, $18, 0, $E
(1)   55/   155EA : 06                  byte_1536E:	dc.b 6
(1)   56/   155EB : 2009 0834 00        		dc.b $20, 9, 8,	$34, 0
(1)   57/   155F0 : 0006 082E 20        		dc.b 0,	6, 8, $2E, $20
(1)   58/   155F5 : 000A 0000 00        		dc.b 0,	$A, 0, 0, 0
(1)   59/   155FA : 000A 0800 18        		dc.b 0,	$A, 8, 0, $18
(1)   60/   155FF : 180A 1000 00        		dc.b $18, $A, $10, 0, 0
(1)   61/   15604 : 180A 1800 18        		dc.b $18, $A, $18, 0, $18
(1)   62/   15609 : 06                  byte_1538D:	dc.b 6
(1)   63/   1560A : 1805 082A 18        		dc.b $18, 5, 8,	$2A, $18
(1)   64/   1560F : F803 0826 28        		dc.b $F8, 3, 8,	$26, $28
(1)   65/   15614 : F60A 0000 06        		dc.b $F6, $A, 0, 0, 6
(1)   66/   15619 : F60A 0800 1E        		dc.b $F6, $A, 8, 0, $1E
(1)   67/   1561E : 0E0A 1000 06        		dc.b $E, $A, $10, 0, 6
(1)   68/   15623 : 0E0A 1800 1E        		dc.b $E, $A, $18, 0, $1E
(1)   69/   15628 : 06                  byte_153AC:	dc.b 6
(1)   70/   15629 : E805 0822 20        		dc.b $E8, 5, 8,	$22, $20
(1)   71/   1562E : 0805 1822 20        		dc.b 8,	5, $18,	$22, $20
(1)   72/   15633 : E80A 0000 08        		dc.b $E8, $A, 0, 0, 8
(1)   73/   15638 : E80A 0800 20        		dc.b $E8, $A, 8, 0, $20
(1)   74/   1563D : 000A 1000 08        		dc.b 0,	$A, $10, 0, 8
(1)   75/   15642 : 000A 1800 20        		dc.b 0,	$A, $18, 0, $20
(1)   76/   15647 : 06                  byte_153CB:	dc.b 6
(1)   77/   15648 : D805 182A 18        		dc.b $D8, 5, $18, $2A, $18
(1)   78/   1564D : E803 1826 28        		dc.b $E8, 3, $18, $26, $28
(1)   79/   15652 : DA0A 0000 06        		dc.b $DA, $A, 0, 0, 6
(1)   80/   15657 : DA0A 0800 1E        		dc.b $DA, $A, 8, 0, $1E
(1)   81/   1565C : F20A 1000 06        		dc.b $F2, $A, $10, 0, 6
(1)   82/   15661 : F20A 1800 1E        		dc.b $F2, $A, $18, 0, $1E
(1)   83/   15666 : 06                  byte_153EA:	dc.b 6
(1)   84/   15667 : D009 1834 00        		dc.b $D0, 9, $18, $34, 0
(1)   85/   1566C : E806 182E 20        		dc.b $E8, 6, $18, $2E, $20
(1)   86/   15671 : D00A 0000 00        		dc.b $D0, $A, 0, 0, 0
(1)   87/   15676 : D00A 0800 18        		dc.b $D0, $A, 8, 0, $18
(1)   88/   1567B : E80A 1000 00        		dc.b $E8, $A, $10, 0, 0
(1)   89/   15680 : E80A 1800 18        		dc.b $E8, $A, $18, 0, $18
(1)   90/   15685 : 06                  byte_15409:	dc.b 6
(1)   91/   15686 : D008 1842 F8        		dc.b $D0, 8, $18, $42, $F8
(1)   92/   1568B : D807 183A 18        		dc.b $D8, 7, $18, $3A, $18
(1)   93/   15690 : CA0A 0000 F6        		dc.b $CA, $A, 0, 0, $F6
(1)   94/   15695 : CA0A 0800 0E        		dc.b $CA, $A, 8, 0, $E
(1)   95/   1569A : E20A 1000 F6        		dc.b $E2, $A, $10, 0, $F6
(1)   96/   1569F : E20A 1800 0E        		dc.b $E2, $A, $18, 0, $E
(1)   97/   156A4 : 06                  byte_15428:	dc.b 6
(1)   98/   156A5 : D005 1045 E8        		dc.b $D0, 5, $10, $45, $E8
(1)   99/   156AA : D005 1845 08        		dc.b $D0, 5, $18, $45, 8
(1)  100/   156AF : C80A 0000 E8        		dc.b $C8, $A, 0, 0, $E8
(1)  101/   156B4 : C80A 0800 00        		dc.b $C8, $A, 8, 0, 0
(1)  102/   156B9 : E00A 1000 E8        		dc.b $E0, $A, $10, 0, $E8
(1)  103/   156BE : E00A 1800 00        		dc.b $E0, $A, $18, 0, 0
(1)  104/   156C3 : 06                  byte_15447:	dc.b 6
(1)  105/   156C4 : D807 103A D8        		dc.b $D8, 7, $10, $3A, $D8
(1)  106/   156C9 : D008 1042 F0        		dc.b $D0, 8, $10, $42, $F0
(1)  107/   156CE : CA0A 0000 DA        		dc.b $CA, $A, 0, 0, $DA
(1)  108/   156D3 : CA0A 0800 F2        		dc.b $CA, $A, 8, 0, $F2
(1)  109/   156D8 : E20A 1000 DA        		dc.b $E2, $A, $10, 0, $DA
(1)  110/   156DD : E20A 1800 F2        		dc.b $E2, $A, $18, 0, $F2
(1)  111/   156E2 : 06                  byte_15466:	dc.b 6
(1)  112/   156E3 : E806 102E D0        		dc.b $E8, 6, $10, $2E, $D0
(1)  113/   156E8 : D009 1034 E8        		dc.b $D0, 9, $10, $34, $E8
(1)  114/   156ED : D00A 0000 D0        		dc.b $D0, $A, 0, 0, $D0
(1)  115/   156F2 : D00A 0800 E8        		dc.b $D0, $A, 8, 0, $E8
(1)  116/   156F7 : E80A 1000 D0        		dc.b $E8, $A, $10, 0, $D0
(1)  117/   156FC : E80A 1800 E8        		dc.b $E8, $A, $18, 0, $E8
(1)  118/   15701 : 06                  byte_15485:	dc.b 6
(1)  119/   15702 : E803 1026 D0        		dc.b $E8, 3, $10, $26, $D0
(1)  120/   15707 : D805 102A D8        		dc.b $D8, 5, $10, $2A, $D8
(1)  121/   1570C : DA0A 0000 CA        		dc.b $DA, $A, 0, 0, $CA
(1)  122/   15711 : DA0A 0800 E2        		dc.b $DA, $A, 8, 0, $E2
(1)  123/   15716 : F20A 1000 CA        		dc.b $F2, $A, $10, 0, $CA
(1)  124/   1571B : F20A 1800 E2        		dc.b $F2, $A, $18, 0, $E2
(1)  125/   15720 : 0C                  byte_154A4:	dc.b $C
(1)  126/   15721 : C80D 0009 E0        		dc.b $C8, $D, 0, 9, $E0
(1)  127/   15726 : D00A 0011 D0        		dc.b $D0, $A, 0, $11, $D0
(1)  128/   1572B : E007 001A C8        		dc.b $E0, 7, 0,	$1A, $C8
(1)  129/   15730 : C80D 0809 00        		dc.b $C8, $D, 8, 9, 0
(1)  130/   15735 : D00A 0811 18        		dc.b $D0, $A, 8, $11, $18
(1)  131/   1573A : E007 081A 28        		dc.b $E0, 7, 8,	$1A, $28
(1)  132/   1573F : 0007 101A C8        		dc.b 0,	7, $10,	$1A, $C8
(1)  133/   15744 : 180A 1011 D0        		dc.b $18, $A, $10, $11,	$D0
(1)  134/   15749 : 280D 1009 E0        		dc.b $28, $D, $10, 9, $E0
(1)  135/   1574E : 280D 1809 00        		dc.b $28, $D, $18, 9, 0
(1)  136/   15753 : 180A 1811 18        		dc.b $18, $A, $18, $11,	$18
(1)  137/   15758 : 0007 181A 28        		dc.b 0,	7, $18,	$1A, $28
(1)  138/   1575D : (MACRO)             		align 2
(1)  138/   1575D :  (MACRO-2)                  cnop 0,2
(1)  138/   1575D :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)  138/   1575D : =$33                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)  138/   1575E :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   27431/   1575E :                     
   27432/   1575E :                     ; ===========================================================================
   27433/   1575E :                     ; ---------------------------------------------------------------------------
   27434/   1575E :                     ; Object 67 - disc that	you run	around (SBZ)
   27435/   1575E :                     ; ---------------------------------------------------------------------------
   27436/   1575E :                     
   27437/   1575E :                     Obj67:					; XREF: Obj_Index
   27438/   1575E : 7000                		moveq	#0,d0
   27439/   15760 : 1028 0024           		move.b	$24(a0),d0
   27440/   15764 : 323B 0006           		move.w	Obj67_Index(pc,d0.w),d1
   27441/   15768 : 4EFB 1002           		jmp	Obj67_Index(pc,d1.w)
   27442/   1576C :                     ; ===========================================================================
   27443/   1576C : 0004                Obj67_Index:	dc.w Obj67_Main-Obj67_Index
   27444/   1576E : 0074                		dc.w Obj67_Action-Obj67_Index
   27445/   15770 :                     ; ===========================================================================
   27446/   15770 :                     
   27447/   15770 :                     Obj67_Main:				; XREF: Obj67_Index
   27448/   15770 : 5428 0024           		addq.b	#2,$24(a0)
   27449/   15774 : 217C 0001 5902 0004 		move.l	#Map_obj67,4(a0)
   27450/   1577C : 317C C344 0002      		move.w	#$C344,2(a0)
   27451/   15782 : 117C 0004 0001      		move.b	#4,1(a0)
   27452/   15788 : 117C 0004 0018      		move.b	#4,$18(a0)
   27453/   1578E : 117C 0008 0019      		move.b	#8,$19(a0)
   27454/   15794 : 3168 0008 0032      		move.w	8(a0),$32(a0)
   27455/   1579A : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   27456/   157A0 : 117C 0018 0034      		move.b	#$18,$34(a0)
   27457/   157A6 : 117C 0048 0038      		move.b	#$48,$38(a0)
   27458/   157AC : 1228 0028           		move.b	$28(a0),d1	; get object type
   27459/   157B0 : 0201 000F           		andi.b	#$F,d1		; read only the	2nd digit
   27460/   157B4 : 670C                		beq.s	loc_15546
   27461/   157B6 : 117C 0010 0034      		move.b	#$10,$34(a0)
   27462/   157BC : 117C 0038 0038      		move.b	#$38,$38(a0)
   27463/   157C2 :                     
   27464/   157C2 :                     loc_15546:
   27465/   157C2 : 1228 0028           		move.b	$28(a0),d1	; get object type
   27466/   157C6 : 0201 00F0           		andi.b	#$F0,d1		; read only the	1st digit
   27467/   157CA : 4881                		ext.w	d1
   27468/   157CC : E741                		asl.w	#3,d1
   27469/   157CE : 3141 0036           		move.w	d1,$36(a0)
   27470/   157D2 : 1028 0022           		move.b	$22(a0),d0
   27471/   157D6 : E418                		ror.b	#2,d0
   27472/   157D8 : 0200 00C0           		andi.b	#-$40,d0
   27473/   157DC : 1140 0026           		move.b	d0,$26(a0)
   27474/   157E0 :                     
   27475/   157E0 :                     Obj67_Action:				; XREF: Obj67_Index
   27476/   157E0 : 6100 000A           		bsr.w	Obj67_MoveSonic
   27477/   157E4 : 6100 00BA           		bsr.w	Obj67_MoveSpot
   27478/   157E8 : 6000 00F0           		bra.w	Obj67_ChkDel
   27479/   157EC :                     ; ===========================================================================
   27480/   157EC :                     
   27481/   157EC :                     Obj67_MoveSonic:			; XREF: Obj67_Action
   27482/   157EC : 7400                		moveq	#0,d2
   27483/   157EE : 1428 0038           		move.b	$38(a0),d2
   27484/   157F2 : 3602                		move.w	d2,d3
   27485/   157F4 : D643                		add.w	d3,d3
   27486/   157F6 : 43F8 D000           		lea	($FFFFD000).w,a1
   27487/   157FA : 3029 0008           		move.w	8(a1),d0
   27488/   157FE : 9068 0032           		sub.w	$32(a0),d0
   27489/   15802 : D042                		add.w	d2,d0
   27490/   15804 : B043                		cmp.w	d3,d0
   27491/   15806 : 641C                		bcc.s	loc_155A8
   27492/   15808 : 3229 000C           		move.w	$C(a1),d1
   27493/   1580C : 9268 0030           		sub.w	$30(a0),d1
   27494/   15810 : D242                		add.w	d2,d1
   27495/   15812 : B243                		cmp.w	d3,d1
   27496/   15814 : 640E                		bcc.s	loc_155A8
   27497/   15816 : 0829 0001 0022      		btst	#1,$22(a1)
   27498/   1581C : 6716                		beq.s	loc_155B8
   27499/   1581E : 4228 003A           		clr.b	$3A(a0)
   27500/   15822 : 4E75                		rts	
   27501/   15824 :                     ; ===========================================================================
   27502/   15824 :                     
   27503/   15824 :                     loc_155A8:
   27504/   15824 : 4A28 003A           		tst.b	$3A(a0)
   27505/   15828 : 6708                		beq.s	locret_155B6
   27506/   1582A : 4229 0038           		clr.b	$38(a1)
   27507/   1582E : 4228 003A           		clr.b	$3A(a0)
   27508/   15832 :                     
   27509/   15832 :                     locret_155B6:
   27510/   15832 : 4E75                		rts	
   27511/   15834 :                     ; ===========================================================================
   27512/   15834 :                     
   27513/   15834 :                     loc_155B8:
   27514/   15834 : 4A28 003A           		tst.b	$3A(a0)
   27515/   15838 : 6624                		bne.s	loc_155E2
   27516/   1583A : 117C 0001 003A      		move.b	#1,$3A(a0)
   27517/   15840 : 0829 0002 0022      		btst	#2,$22(a1)
   27518/   15846 : 6604                		bne.s	loc_155D0
   27519/   15848 : 4229 001C           		clr.b	$1C(a1)
   27520/   1584C :                     
   27521/   1584C :                     loc_155D0:
   27522/   1584C : 08A9 0005 0022      		bclr	#5,$22(a1)
   27523/   15852 : 137C 0001 001D      		move.b	#1,$1D(a1)
   27524/   15858 : 137C 0001 0038      		move.b	#1,$38(a1)
   27525/   1585E :                     
   27526/   1585E :                     loc_155E2:
   27527/   1585E : 3029 0014           		move.w	$14(a1),d0
   27528/   15862 : 4A68 0036           		tst.w	$36(a0)
   27529/   15866 : 6A1C                		bpl.s	loc_15608
   27530/   15868 : 0C40 FC00           		cmpi.w	#-$400,d0
   27531/   1586C : 6F08                		ble.s	loc_155FA
   27532/   1586E : 337C FC00 0014      		move.w	#-$400,$14(a1)
   27533/   15874 : 4E75                		rts	
   27534/   15876 :                     ; ===========================================================================
   27535/   15876 :                     
   27536/   15876 :                     loc_155FA:
   27537/   15876 : 0C40 F100           		cmpi.w	#-$F00,d0
   27538/   1587A : 6C06                		bge.s	locret_15606
   27539/   1587C : 337C F100 0014      		move.w	#-$F00,$14(a1)
   27540/   15882 :                     
   27541/   15882 :                     locret_15606:
   27542/   15882 : 4E75                		rts	
   27543/   15884 :                     ; ===========================================================================
   27544/   15884 :                     
   27545/   15884 :                     loc_15608:
   27546/   15884 : 0C40 0400           		cmpi.w	#$400,d0
   27547/   15888 : 6C08                		bge.s	loc_15616
   27548/   1588A : 337C 0400 0014      		move.w	#$400,$14(a1)
   27549/   15890 : 4E75                		rts	
   27550/   15892 :                     ; ===========================================================================
   27551/   15892 :                     
   27552/   15892 :                     loc_15616:
   27553/   15892 : 0C40 0F00           		cmpi.w	#$F00,d0
   27554/   15896 : 6F06                		ble.s	locret_15622
   27555/   15898 : 337C 0F00 0014      		move.w	#$F00,$14(a1)
   27556/   1589E :                     
   27557/   1589E :                     locret_15622:
   27558/   1589E : 4E75                		rts	
   27559/   158A0 :                     ; ===========================================================================
   27560/   158A0 :                     
   27561/   158A0 :                     Obj67_MoveSpot:				; XREF: Obj67_Action
   27562/   158A0 : 3028 0036           		move.w	$36(a0),d0
   27563/   158A4 : D168 0026           		add.w	d0,$26(a0)
   27564/   158A8 : 1028 0026           		move.b	$26(a0),d0
   27565/   158AC : 4EB9 0000 29EA      		jsr	(CalcSine).l
   27566/   158B2 : 3428 0030           		move.w	$30(a0),d2
   27567/   158B6 : 3628 0032           		move.w	$32(a0),d3
   27568/   158BA : 7800                		moveq	#0,d4
   27569/   158BC : 1828 0034           		move.b	$34(a0),d4
   27570/   158C0 : E14C                		lsl.w	#8,d4
   27571/   158C2 : 2A04                		move.l	d4,d5
   27572/   158C4 : C9C0                		muls.w	d0,d4
   27573/   158C6 : 4844                		swap	d4
   27574/   158C8 : CBC1                		muls.w	d1,d5
   27575/   158CA : 4845                		swap	d5
   27576/   158CC : D842                		add.w	d2,d4
   27577/   158CE : DA43                		add.w	d3,d5
   27578/   158D0 : 3144 000C           		move.w	d4,$C(a0)
   27579/   158D4 : 3145 0008           		move.w	d5,8(a0)
   27580/   158D8 : 4E75                		rts	
   27581/   158DA :                     ; ===========================================================================
   27582/   158DA :                     
   27583/   158DA :                     Obj67_ChkDel:				; XREF: Obj67_Action
   27584/   158DA : 3028 0032           		move.w	$32(a0),d0
   27585/   158DE : 0240 FF80           		andi.w	#-$80,d0
   27586/   158E2 : 3238 F700           		move.w	($FFFFF700).w,d1
   27587/   158E6 : 0441 0080           		subi.w	#$80,d1
   27588/   158EA : 0241 FF80           		andi.w	#-$80,d1
   27589/   158EE : 9041                		sub.w	d1,d0
   27590/   158F0 : 0C40 0280           		cmpi.w	#$280,d0
   27591/   158F4 : 6206                		bhi.s	Obj67_Delete
   27592/   158F6 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   27593/   158FC :                     ; ===========================================================================
   27594/   158FC :                     
   27595/   158FC :                     Obj67_Delete:
   27596/   158FC : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   27597/   15902 :                     ; ===========================================================================
   27598/   15902 :                     ; ---------------------------------------------------------------------------
   27599/   15902 :                     ; Sprite mappings - disc that you run around (SBZ)
   27600/   15902 :                     ; (It"s just a small blob that moves around in a circle. The disc itself is
   27601/   15902 :                     ; part of the level tiles.)
   27602/   15902 :                     ; ---------------------------------------------------------------------------
   27603/   15902 :                     Map_obj67:
   27604/   15902 :                     		include	"_maps/obj67.asm"
(1)    1/   15902 :                     ; ---------------------------------------------------------------------------
(1)    2/   15902 :                     ; Sprite mappings - disc that you run around (SBZ)
(1)    3/   15902 :                     ; (It's just a small blob that moves around in a circle. The disc itself is
(1)    4/   15902 :                     ; part of the level tiles.)
(1)    5/   15902 :                     ; ---------------------------------------------------------------------------
(1)    6/   15902 : 0002                		dc.w byte_15688-Map_obj67
(1)    7/   15904 : 01                  byte_15688:	dc.b 1
(1)    8/   15905 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)    9/   1590A : (MACRO)             		align 2
(1)    9/   1590A :  (MACRO-2)                  cnop 0,2
(1)    9/   1590A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   27605/   1590A :                     
   27606/   1590A :                     ; ===========================================================================
   27607/   1590A :                     ; ---------------------------------------------------------------------------
   27608/   1590A :                     ; Object 68 - conveyor belts (SBZ)
   27609/   1590A :                     ; ---------------------------------------------------------------------------
   27610/   1590A :                     
   27611/   1590A :                     Obj68:					; XREF: Obj_Index
   27612/   1590A : 7000                		moveq	#0,d0
   27613/   1590C : 1028 0024           		move.b	$24(a0),d0
   27614/   15910 : 323B 0006           		move.w	Obj68_Index(pc,d0.w),d1
   27615/   15914 : 4EFB 1002           		jmp	Obj68_Index(pc,d1.w)
   27616/   15918 :                     ; ===========================================================================
   27617/   15918 : 0004                Obj68_Index:	dc.w Obj68_Main-Obj68_Index
   27618/   1591A : 002E                		dc.w Obj68_Action-Obj68_Index
   27619/   1591C :                     ; ===========================================================================
   27620/   1591C :                     
   27621/   1591C :                     Obj68_Main:				; XREF: Obj68_Index
   27622/   1591C : 5428 0024           		addq.b	#2,$24(a0)
   27623/   15920 : 117C 0080 0038      		move.b	#128,$38(a0)	; set width to 128 pixels
   27624/   15926 : 1228 0028           		move.b	$28(a0),d1	; get object type
   27625/   1592A : 0201 000F           		andi.b	#$F,d1		; read only the	2nd digit
   27626/   1592E : 6706                		beq.s	loc_156BA	; if zero, branch
   27627/   15930 : 117C 0038 0038      		move.b	#56,$38(a0)	; set width to 56 pixels
   27628/   15936 :                     
   27629/   15936 :                     loc_156BA:
   27630/   15936 : 1228 0028           		move.b	$28(a0),d1	; get object type
   27631/   1593A : 0201 00F0           		andi.b	#$F0,d1		; read only the	1st digit
   27632/   1593E : 4881                		ext.w	d1
   27633/   15940 : E841                		asr.w	#4,d1
   27634/   15942 : 3141 0036           		move.w	d1,$36(a0)	; set belt speed
   27635/   15946 :                     
   27636/   15946 :                     Obj68_Action:				; XREF: Obj68_Index
   27637/   15946 : 6124                		bsr.s	Obj68_MoveSonic
   27638/   15948 : 3028 0008           		move.w	8(a0),d0
   27639/   1594C : 0240 FF80           		andi.w	#$FF80,d0
   27640/   15950 : 3238 F700           		move.w	($FFFFF700).w,d1
   27641/   15954 : 0441 0080           		subi.w	#$80,d1
   27642/   15958 : 0241 FF80           		andi.w	#$FF80,d1
   27643/   1595C : 9041                		sub.w	d1,d0
   27644/   1595E : 0C40 0280           		cmpi.w	#$280,d0
   27645/   15962 : 6202                		bhi.s	Obj68_Delete
   27646/   15964 : 4E75                		rts	
   27647/   15966 :                     ; ===========================================================================
   27648/   15966 :                     
   27649/   15966 :                     Obj68_Delete:
   27650/   15966 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   27651/   1596C :                     ; ===========================================================================
   27652/   1596C :                     
   27653/   1596C :                     Obj68_MoveSonic:			; XREF: Obj68_Action
   27654/   1596C : 7400                		moveq	#0,d2
   27655/   1596E : 1428 0038           		move.b	$38(a0),d2
   27656/   15972 : 3602                		move.w	d2,d3
   27657/   15974 : D643                		add.w	d3,d3
   27658/   15976 : 43F8 D000           		lea	($FFFFD000).w,a1
   27659/   1597A : 3029 0008           		move.w	8(a1),d0
   27660/   1597E : 9068 0008           		sub.w	8(a0),d0
   27661/   15982 : D042                		add.w	d2,d0
   27662/   15984 : B043                		cmp.w	d3,d0
   27663/   15986 : 6422                		bcc.s	locret_1572E
   27664/   15988 : 3229 000C           		move.w	$C(a1),d1
   27665/   1598C : 9268 000C           		sub.w	$C(a0),d1
   27666/   15990 : 0641 0030           		addi.w	#$30,d1
   27667/   15994 : 0C41 0030           		cmpi.w	#$30,d1
   27668/   15998 : 6410                		bcc.s	locret_1572E
   27669/   1599A : 0829 0001 0022      		btst	#1,$22(a1)
   27670/   159A0 : 6608                		bne.s	locret_1572E
   27671/   159A2 : 3028 0036           		move.w	$36(a0),d0
   27672/   159A6 : D169 0008           		add.w	d0,8(a1)
   27673/   159AA :                     
   27674/   159AA :                     locret_1572E:
   27675/   159AA : 4E75                		rts	
   27676/   159AC :                     
   27677/   159AC :                     ; ===========================================================================
   27678/   159AC :                     ; ---------------------------------------------------------------------------
   27679/   159AC :                     ; Object 69 - spinning platforms and trapdoors (SBZ)
   27680/   159AC :                     ; ---------------------------------------------------------------------------
   27681/   159AC :                     
   27682/   159AC :                     Obj69:					; XREF: Obj_Index
   27683/   159AC : 7000                		moveq	#0,d0
   27684/   159AE : 1028 0024           		move.b	$24(a0),d0
   27685/   159B2 : 323B 0006           		move.w	Obj69_Index(pc,d0.w),d1
   27686/   159B6 : 4EFB 1002           		jmp	Obj69_Index(pc,d1.w)
   27687/   159BA :                     ; ===========================================================================
   27688/   159BA : 0006                Obj69_Index:	dc.w Obj69_Main-Obj69_Index
   27689/   159BC : 0084                		dc.w Obj69_Trapdoor-Obj69_Index
   27690/   159BE : 00F0                		dc.w Obj69_Spinner-Obj69_Index
   27691/   159C0 :                     ; ===========================================================================
   27692/   159C0 :                     
   27693/   159C0 :                     Obj69_Main:				; XREF: Obj69_Index
   27694/   159C0 : 5428 0024           		addq.b	#2,$24(a0)
   27695/   159C4 : 217C 0001 5B5C 0004 		move.l	#Map_obj69,4(a0)
   27696/   159CC : 317C 4492 0002      		move.w	#$4492,2(a0)
   27697/   159D2 : 0028 0004 0001      		ori.b	#4,1(a0)
   27698/   159D8 : 117C 0080 0019      		move.b	#$80,$19(a0)
   27699/   159DE : 7000                		moveq	#0,d0
   27700/   159E0 : 1028 0028           		move.b	$28(a0),d0
   27701/   159E4 : 0240 000F           		andi.w	#$F,d0
   27702/   159E8 : C0FC 003C           		mulu.w	#$3C,d0
   27703/   159EC : 3140 0032           		move.w	d0,$32(a0)
   27704/   159F0 : 4A28 0028           		tst.b	$28(a0)
   27705/   159F4 : 6A48                		bpl.s	Obj69_Trapdoor
   27706/   159F6 : 5428 0024           		addq.b	#2,$24(a0)
   27707/   159FA : 217C 0001 5BB6 0004 		move.l	#Map_obj69a,4(a0)
   27708/   15A02 : 317C 04DF 0002      		move.w	#$4DF,2(a0)
   27709/   15A08 : 117C 0010 0019      		move.b	#$10,$19(a0)
   27710/   15A0E : 117C 0002 001C      		move.b	#2,$1C(a0)
   27711/   15A14 : 7000                		moveq	#0,d0
   27712/   15A16 : 1028 0028           		move.b	$28(a0),d0	; get object type
   27713/   15A1A : 3200                		move.w	d0,d1
   27714/   15A1C : 0240 000F           		andi.w	#$F,d0		; read only the	2nd digit
   27715/   15A20 : C0FC 0006           		mulu.w	#6,d0		; multiply by 6
   27716/   15A24 : 3140 0030           		move.w	d0,$30(a0)	; set time delay
   27717/   15A28 : 3140 0032           		move.w	d0,$32(a0)
   27718/   15A2C : 0241 0070           		andi.w	#$70,d1
   27719/   15A30 : 0641 0010           		addi.w	#$10,d1
   27720/   15A34 : E549                		lsl.w	#2,d1
   27721/   15A36 : 5341                		subq.w	#1,d1
   27722/   15A38 : 3141 0036           		move.w	d1,$36(a0)
   27723/   15A3C : 606C                		bra.s	Obj69_Spinner
   27724/   15A3E :                     ; ===========================================================================
   27725/   15A3E :                     
   27726/   15A3E :                     Obj69_Trapdoor:				; XREF: Obj69_Index
   27727/   15A3E : 5368 0030           		subq.w	#1,$30(a0)
   27728/   15A42 : 6A1C                		bpl.s	Obj69_Animate
   27729/   15A44 : 3168 0032 0030      		move.w	$32(a0),$30(a0)
   27730/   15A4A : 0868 0000 001C      		bchg	#0,$1C(a0)
   27731/   15A50 : 4A28 0001           		tst.b	1(a0)
   27732/   15A54 : 6A0A                		bpl.s	Obj69_Animate
   27733/   15A56 : 303C 00BB           		move.w	#$BB,d0
   27734/   15A5A : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play door sound
   27735/   15A60 :                     
   27736/   15A60 :                     Obj69_Animate:
   27737/   15A60 : 43F9 0001 5B20      		lea	(Ani_obj69).l,a1
   27738/   15A66 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   27739/   15A6C : 4A28 001A           		tst.b	$1A(a0)		; is frame number 0 displayed?
   27740/   15A70 : 6618                		bne.s	Obj69_NotSolid	; if not, branch
   27741/   15A72 : 323C 004B           		move.w	#$4B,d1
   27742/   15A76 : 343C 000C           		move.w	#$C,d2
   27743/   15A7A : 3602                		move.w	d2,d3
   27744/   15A7C : 5243                		addq.w	#1,d3
   27745/   15A7E : 3828 0008           		move.w	8(a0),d4
   27746/   15A82 : 6100 A062           		bsr.w	SolidObject
   27747/   15A86 : 6000 9D34           		bra.w	MarkObjGone
   27748/   15A8A :                     ; ===========================================================================
   27749/   15A8A :                     
   27750/   15A8A :                     Obj69_NotSolid:
   27751/   15A8A : 0828 0003 0022      		btst	#3,$22(a0)
   27752/   15A90 : 6714                		beq.s	Obj69_Display
   27753/   15A92 : 43F8 D000           		lea	($FFFFD000).w,a1
   27754/   15A96 : 08A9 0003 0022      		bclr	#3,$22(a1)
   27755/   15A9C : 08A8 0003 0022      		bclr	#3,$22(a0)
   27756/   15AA2 : 4228 0025           		clr.b	$25(a0)
   27757/   15AA6 :                     
   27758/   15AA6 :                     Obj69_Display:
   27759/   15AA6 : 6000 9D14           		bra.w	MarkObjGone
   27760/   15AAA :                     ; ===========================================================================
   27761/   15AAA :                     
   27762/   15AAA :                     Obj69_Spinner:				; XREF: Obj69_Index
   27763/   15AAA : 3038 FE04           		move.w	($FFFFFE04).w,d0
   27764/   15AAE : C068 0036           		and.w	$36(a0),d0
   27765/   15AB2 : 6606                		bne.s	Obj69_Delay
   27766/   15AB4 : 117C 0001 0034      		move.b	#1,$34(a0)
   27767/   15ABA :                     
   27768/   15ABA :                     Obj69_Delay:
   27769/   15ABA : 4A28 0034           		tst.b	$34(a0)
   27770/   15ABE : 6716                		beq.s	Obj69_Animate2
   27771/   15AC0 : 5368 0030           		subq.w	#1,$30(a0)
   27772/   15AC4 : 6A10                		bpl.s	Obj69_Animate2
   27773/   15AC6 : 3168 0032 0030      		move.w	$32(a0),$30(a0)
   27774/   15ACC : 4228 0034           		clr.b	$34(a0)
   27775/   15AD0 : 0868 0000 001C      		bchg	#0,$1C(a0)
   27776/   15AD6 :                     
   27777/   15AD6 :                     Obj69_Animate2:
   27778/   15AD6 : 43F9 0001 5B20      		lea	(Ani_obj69).l,a1
   27779/   15ADC : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   27780/   15AE2 : 4A28 001A           		tst.b	$1A(a0)		; check	if frame number	0 is displayed
   27781/   15AE6 : 6618                		bne.s	Obj69_NotSolid2	; if not, branch
   27782/   15AE8 : 323C 001B           		move.w	#$1B,d1
   27783/   15AEC : 343C 0007           		move.w	#7,d2
   27784/   15AF0 : 3602                		move.w	d2,d3
   27785/   15AF2 : 5243                		addq.w	#1,d3
   27786/   15AF4 : 3828 0008           		move.w	8(a0),d4
   27787/   15AF8 : 6100 9FEC           		bsr.w	SolidObject
   27788/   15AFC : 6000 9CBE           		bra.w	MarkObjGone
   27789/   15B00 :                     ; ===========================================================================
   27790/   15B00 :                     
   27791/   15B00 :                     Obj69_NotSolid2:
   27792/   15B00 : 0828 0003 0022      		btst	#3,$22(a0)
   27793/   15B06 : 6714                		beq.s	Obj69_Display2
   27794/   15B08 : 43F8 D000           		lea	($FFFFD000).w,a1
   27795/   15B0C : 08A9 0003 0022      		bclr	#3,$22(a1)
   27796/   15B12 : 08A8 0003 0022      		bclr	#3,$22(a0)
   27797/   15B18 : 4228 0025           		clr.b	$25(a0)
   27798/   15B1C :                     
   27799/   15B1C :                     Obj69_Display2:
   27800/   15B1C : 6000 9C9E           		bra.w	MarkObjGone
   27801/   15B20 :                     ; ===========================================================================
   27802/   15B20 :                     Ani_obj69:
   27803/   15B20 :                     		include	"_anim/obj69.asm"
(1)    1/   15B20 :                     ; ---------------------------------------------------------------------------
(1)    2/   15B20 :                     ; Animation script - trapdoor (SBZ)
(1)    3/   15B20 :                     ; ---------------------------------------------------------------------------
(1)    4/   15B20 : 0008                		dc.w byte_158AC-Ani_obj69
(1)    5/   15B22 : 000E                		dc.w byte_158B2-Ani_obj69
(1)    6/   15B24 : 0014                		dc.w byte_158B8-Ani_obj69
(1)    7/   15B26 : 0028                		dc.w byte_158CC-Ani_obj69
(1)    8/   15B28 : 0300 0102 FE01      byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
(1)    9/   15B2E : 0302 0100 FE01      byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
(1)   10/   15B34 : 0100 0102 0304 4342 byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
                    4140 6162 63        
(1)   11/   15B41 : 6423 2221 00FE 01   		dc.b $64, $23, $22, $21, 0, $FE, 1
(1)   12/   15B48 : 0100 0102 0304 4342 byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
                    4140 6162 63        
(1)   13/   15B55 : 6423 2221 00FE 01   		dc.b $64, $23, $22, $21, 0, $FE, 1
(1)   14/   15B5C : (MACRO)             		align 2
(1)   14/   15B5C :  (MACRO-2)                  cnop 0,2
(1)   14/   15B5C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   27804/   15B5C :                     
   27805/   15B5C :                     ; ---------------------------------------------------------------------------
   27806/   15B5C :                     ; Sprite mappings - trapdoor (SBZ)
   27807/   15B5C :                     ; ---------------------------------------------------------------------------
   27808/   15B5C :                     Map_obj69:
   27809/   15B5C :                     		include	"_maps/obj69.asm"
(1)    1/   15B5C :                     ; ---------------------------------------------------------------------------
(1)    2/   15B5C :                     ; Sprite mappings - trapdoor (SBZ)
(1)    3/   15B5C :                     ; ---------------------------------------------------------------------------
(1)    4/   15B5C : 0006                		dc.w byte_158E6-Map_obj69
(1)    5/   15B5E : 001B                		dc.w byte_158FB-Map_obj69
(1)    6/   15B60 : 0044                		dc.w byte_15924-Map_obj69
(1)    7/   15B62 : 04                  byte_158E6:	dc.b 4
(1)    8/   15B63 : F40E 0000 C0        		dc.b $F4, $E, 0, 0, $C0
(1)    9/   15B68 : F40E 0800 E0        		dc.b $F4, $E, 8, 0, $E0
(1)   10/   15B6D : F40E 0000 00        		dc.b $F4, $E, 0, 0, 0
(1)   11/   15B72 : F40E 0800 20        		dc.b $F4, $E, 8, 0, $20
(1)   12/   15B77 : 08                  byte_158FB:	dc.b 8
(1)   13/   15B78 : F20F 000C B6        		dc.b $F2, $F, 0, $C, $B6
(1)   14/   15B7D : 1A0F 180C D6        		dc.b $1A, $F, $18, $C, $D6
(1)   15/   15B82 : 020A 001C D6        		dc.b 2,	$A, 0, $1C, $D6
(1)   16/   15B87 : 120A 181C BE        		dc.b $12, $A, $18, $1C,	$BE
(1)   17/   15B8C : F20F 080C 2A        		dc.b $F2, $F, 8, $C, $2A
(1)   18/   15B91 : 1A0F 100C 0A        		dc.b $1A, $F, $10, $C, $A
(1)   19/   15B96 : 020A 081C 12        		dc.b 2,	$A, 8, $1C, $12
(1)   20/   15B9B : 120A 101C 2A        		dc.b $12, $A, $10, $1C,	$2A
(1)   21/   15BA0 : 04                  byte_15924:	dc.b 4
(1)   22/   15BA1 : 000B 0025 B4        		dc.b 0,	$B, 0, $25, $B4
(1)   23/   15BA6 : 200B 1025 B4        		dc.b $20, $B, $10, $25,	$B4
(1)   24/   15BAB : 000B 0025 34        		dc.b 0,	$B, 0, $25, $34
(1)   25/   15BB0 : 200B 1025 34        		dc.b $20, $B, $10, $25,	$34
(1)   26/   15BB5 : (MACRO)             		align 2
(1)   26/   15BB5 :  (MACRO-2)                  cnop 0,2
(1)   26/   15BB5 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   26/   15BB5 : =$34                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   26/   15BB6 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   27810/   15BB6 :                     
   27811/   15BB6 :                     ; ---------------------------------------------------------------------------
   27812/   15BB6 :                     ; Sprite mappings - spinning platforms (SBZ)
   27813/   15BB6 :                     ; ---------------------------------------------------------------------------
   27814/   15BB6 :                     Map_obj69a:
   27815/   15BB6 :                     		include	"_maps/obj69a.asm"
(1)    1/   15BB6 :                     ; ---------------------------------------------------------------------------
(1)    2/   15BB6 :                     ; Sprite mappings - spinning platforms (SBZ)
(1)    3/   15BB6 :                     ; ---------------------------------------------------------------------------
(1)    4/   15BB6 : 000A 0015           		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
(1)    5/   15BBA : 0020 002B           		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
(1)    6/   15BBE : 0036                		dc.w byte_15970-Map_obj69a
(1)    7/   15BC0 : 02                  byte_15944:	dc.b 2
(1)    8/   15BC1 : F805 0000 F0        		dc.b $F8, 5, 0,	0, $F0
(1)    9/   15BC6 : F805 0800 00        		dc.b $F8, 5, 8,	0, 0
(1)   10/   15BCB : 02                  byte_1594F:	dc.b 2
(1)   11/   15BCC : F00D 0014 F0        		dc.b $F0, $D, 0, $14, $F0
(1)   12/   15BD1 : 000D 001C F0        		dc.b 0,	$D, 0, $1C, $F0
(1)   13/   15BD6 : 02                  byte_1595A:	dc.b 2
(1)   14/   15BD7 : F009 0004 F0        		dc.b $F0, 9, 0,	4, $F0
(1)   15/   15BDC : 0009 000A F8        		dc.b 0,	9, 0, $A, $F8
(1)   16/   15BE1 : 02                  byte_15965:	dc.b 2
(1)   17/   15BE2 : F009 0024 F0        		dc.b $F0, 9, 0,	$24, $F0
(1)   18/   15BE7 : 0009 002A F8        		dc.b 0,	9, 0, $2A, $F8
(1)   19/   15BEC : 02                  byte_15970:	dc.b 2
(1)   20/   15BED : F005 0010 F8        		dc.b $F0, 5, 0,	$10, $F8
(1)   21/   15BF2 : 0005 1010 F8        		dc.b 0,	5, $10,	$10, $F8
(1)   22/   15BF7 : (MACRO)             		align 2
(1)   22/   15BF7 :  (MACRO-2)                  cnop 0,2
(1)   22/   15BF7 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   22/   15BF7 : =$35                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   22/   15BF8 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   27816/   15BF8 :                     
   27817/   15BF8 :                     ; ===========================================================================
   27818/   15BF8 :                     ; ---------------------------------------------------------------------------
   27819/   15BF8 :                     ; Object 6A - ground saws and pizza cutters (SBZ)
   27820/   15BF8 :                     ; ---------------------------------------------------------------------------
   27821/   15BF8 :                     
   27822/   15BF8 :                     Obj6A:					; XREF: Obj_Index
   27823/   15BF8 : 7000                		moveq	#0,d0
   27824/   15BFA : 1028 0024           		move.b	$24(a0),d0
   27825/   15BFE : 323B 0006           		move.w	Obj6A_Index(pc,d0.w),d1
   27826/   15C02 : 4EFB 1002           		jmp	Obj6A_Index(pc,d1.w)
   27827/   15C06 :                     ; ===========================================================================
   27828/   15C06 : 0004                Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
   27829/   15C08 : 0042                		dc.w Obj6A_Action-Obj6A_Index
   27830/   15C0A :                     ; ===========================================================================
   27831/   15C0A :                     
   27832/   15C0A :                     Obj6A_Main:				; XREF: Obj6A_Index
   27833/   15C0A : 5428 0024           		addq.b	#2,$24(a0)
   27834/   15C0E : 217C 0001 5E14 0004 		move.l	#Map_obj6A,4(a0)
   27835/   15C16 : 317C 43B5 0002      		move.w	#$43B5,2(a0)
   27836/   15C1C : 117C 0004 0001      		move.b	#4,1(a0)
   27837/   15C22 : 117C 0004 0018      		move.b	#4,$18(a0)
   27838/   15C28 : 117C 0020 0019      		move.b	#$20,$19(a0)
   27839/   15C2E : 3168 0008 003A      		move.w	8(a0),$3A(a0)
   27840/   15C34 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   27841/   15C3A : 0C28 0003 0028      		cmpi.b	#3,$28(a0)
   27842/   15C40 : 6406                		bcc.s	Obj6A_Action
   27843/   15C42 : 117C 00A2 0020      		move.b	#$A2,$20(a0)
   27844/   15C48 :                     
   27845/   15C48 :                     Obj6A_Action:				; XREF: Obj6A_Index
   27846/   15C48 : 7000                		moveq	#0,d0
   27847/   15C4A : 1028 0028           		move.b	$28(a0),d0
   27848/   15C4E : 0240 0007           		andi.w	#7,d0
   27849/   15C52 : D040                		add.w	d0,d0
   27850/   15C54 : 323B 002E           		move.w	Obj6A_TypeIndex(pc,d0.w),d1
   27851/   15C58 : 4EBB 102A           		jsr	Obj6A_TypeIndex(pc,d1.w)
   27852/   15C5C : 3028 003A           		move.w	$3A(a0),d0
   27853/   15C60 : 0240 FF80           		andi.w	#$FF80,d0
   27854/   15C64 : 3238 F700           		move.w	($FFFFF700).w,d1
   27855/   15C68 : 0441 0080           		subi.w	#$80,d1
   27856/   15C6C : 0241 FF80           		andi.w	#$FF80,d1
   27857/   15C70 : 9041                		sub.w	d1,d0
   27858/   15C72 : 0C40 0280           		cmpi.w	#$280,d0
   27859/   15C76 : 6206                		bhi.s	Obj6A_Delete
   27860/   15C78 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   27861/   15C7E :                     ; ===========================================================================
   27862/   15C7E :                     
   27863/   15C7E :                     Obj6A_Delete:
   27864/   15C7E : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   27865/   15C84 :                     ; ===========================================================================
   27866/   15C84 : 000A 000C           Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
   27867/   15C88 : 005A 00AA           		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
   27868/   15C8C : 011E                		dc.w Obj6A_Type04-Obj6A_TypeIndex
   27869/   15C8E :                     ; ===========================================================================
   27870/   15C8E :                     
   27871/   15C8E :                     Obj6A_Type00:				; XREF: Obj6A_TypeIndex
   27872/   15C8E : 4E75                		rts	
   27873/   15C90 :                     ; ===========================================================================
   27874/   15C90 :                     
   27875/   15C90 :                     Obj6A_Type01:				; XREF: Obj6A_TypeIndex
   27876/   15C90 : 323C 0060           		move.w	#$60,d1
   27877/   15C94 : 7000                		moveq	#0,d0
   27878/   15C96 : 1038 FE6C           		move.b	($FFFFFE6C).w,d0
   27879/   15C9A : 0828 0000 0022      		btst	#0,$22(a0)
   27880/   15CA0 : 6704                		beq.s	Obj6A_Animate01
   27881/   15CA2 : 4440                		neg.w	d0
   27882/   15CA4 : D041                		add.w	d1,d0
   27883/   15CA6 :                     
   27884/   15CA6 :                     Obj6A_Animate01:
   27885/   15CA6 : 3228 003A           		move.w	$3A(a0),d1
   27886/   15CAA : 9240                		sub.w	d0,d1
   27887/   15CAC : 3141 0008           		move.w	d1,8(a0)	; move saw sideways
   27888/   15CB0 : 5328 001E           		subq.b	#1,$1E(a0)
   27889/   15CB4 : 6A0C                		bpl.s	loc_15A46
   27890/   15CB6 : 117C 0002 001E      		move.b	#2,$1E(a0)	; time between frame changes
   27891/   15CBC : 0868 0000 001A      		bchg	#0,$1A(a0)	; change frame
   27892/   15CC2 :                     
   27893/   15CC2 :                     loc_15A46:
   27894/   15CC2 : 4A28 0001           		tst.b	1(a0)
   27895/   15CC6 : 6A14                		bpl.s	locret_15A60
   27896/   15CC8 : 3038 FE04           		move.w	($FFFFFE04).w,d0
   27897/   15CCC : 0240 000F           		andi.w	#$F,d0
   27898/   15CD0 : 660A                		bne.s	locret_15A60
   27899/   15CD2 : 303C 00B0           		move.w	#$B0,d0
   27900/   15CD6 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play saw sound
   27901/   15CDC :                     
   27902/   15CDC :                     locret_15A60:
   27903/   15CDC : 4E75                		rts	
   27904/   15CDE :                     ; ===========================================================================
   27905/   15CDE :                     
   27906/   15CDE :                     Obj6A_Type02:				; XREF: Obj6A_TypeIndex
   27907/   15CDE : 323C 0030           		move.w	#$30,d1
   27908/   15CE2 : 7000                		moveq	#0,d0
   27909/   15CE4 : 1038 FE64           		move.b	($FFFFFE64).w,d0
   27910/   15CE8 : 0828 0000 0022      		btst	#0,$22(a0)
   27911/   15CEE : 6706                		beq.s	Obj6A_Animate02
   27912/   15CF0 : 4440                		neg.w	d0
   27913/   15CF2 : 0640 0080           		addi.w	#$80,d0
   27914/   15CF6 :                     
   27915/   15CF6 :                     Obj6A_Animate02:
   27916/   15CF6 : 3228 0038           		move.w	$38(a0),d1
   27917/   15CFA : 9240                		sub.w	d0,d1
   27918/   15CFC : 3141 000C           		move.w	d1,$C(a0)	; move saw vertically
   27919/   15D00 : 5328 001E           		subq.b	#1,$1E(a0)
   27920/   15D04 : 6A0C                		bpl.s	loc_15A96
   27921/   15D06 : 117C 0002 001E      		move.b	#2,$1E(a0)
   27922/   15D0C : 0868 0000 001A      		bchg	#0,$1A(a0)
   27923/   15D12 :                     
   27924/   15D12 :                     loc_15A96:
   27925/   15D12 : 4A28 0001           		tst.b	1(a0)
   27926/   15D16 : 6A14                		bpl.s	locret_15AB0
   27927/   15D18 : 1038 FE64           		move.b	($FFFFFE64).w,d0
   27928/   15D1C : 0C00 0018           		cmpi.b	#$18,d0
   27929/   15D20 : 660A                		bne.s	locret_15AB0
   27930/   15D22 : 303C 00B0           		move.w	#$B0,d0
   27931/   15D26 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play saw sound
   27932/   15D2C :                     
   27933/   15D2C :                     locret_15AB0:
   27934/   15D2C : 4E75                		rts	
   27935/   15D2E :                     ; ===========================================================================
   27936/   15D2E :                     
   27937/   15D2E :                     Obj6A_Type03:				; XREF: Obj6A_TypeIndex
   27938/   15D2E : 4A28 003D           		tst.b	$3D(a0)
   27939/   15D32 : 664E                		bne.s	Obj6A_Animate03
   27940/   15D34 : 3038 D008           		move.w	($FFFFD008).w,d0
   27941/   15D38 : 0440 00C0           		subi.w	#$C0,d0
   27942/   15D3C : 6540                		bcs.s	loc_15B02
   27943/   15D3E : 9068 0008           		sub.w	8(a0),d0
   27944/   15D42 : 653A                		bcs.s	loc_15B02
   27945/   15D44 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   27946/   15D48 : 0440 0080           		subi.w	#$80,d0
   27947/   15D4C : B068 000C           		cmp.w	$C(a0),d0
   27948/   15D50 : 642E                		bcc.s	locret_15B04
   27949/   15D52 : 0640 0100           		addi.w	#$100,d0
   27950/   15D56 : B068 000C           		cmp.w	$C(a0),d0
   27951/   15D5A : 6524                		bcs.s	locret_15B04
   27952/   15D5C : 117C 0001 003D      		move.b	#1,$3D(a0)
   27953/   15D62 : 317C 0600 0010      		move.w	#$600,$10(a0)	; move object to the right
   27954/   15D68 : 117C 00A2 0020      		move.b	#$A2,$20(a0)
   27955/   15D6E : 117C 0002 001A      		move.b	#2,$1A(a0)
   27956/   15D74 : 303C 00B0           		move.w	#$B0,d0
   27957/   15D78 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play saw sound
   27958/   15D7E :                     
   27959/   15D7E :                     loc_15B02:
   27960/   15D7E : 588F                		addq.l	#4,sp
   27961/   15D80 :                     
   27962/   15D80 :                     locret_15B04:
   27963/   15D80 : 4E75                		rts	
   27964/   15D82 :                     ; ===========================================================================
   27965/   15D82 :                     
   27966/   15D82 :                     Obj6A_Animate03:			; XREF: ROM:00015AB6j
   27967/   15D82 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   27968/   15D88 : 3168 0008 003A      		move.w	8(a0),$3A(a0)
   27969/   15D8E : 5328 001E           		subq.b	#1,$1E(a0)
   27970/   15D92 : 6A0C                		bpl.s	locret_15B24
   27971/   15D94 : 117C 0002 001E      		move.b	#2,$1E(a0)
   27972/   15D9A : 0868 0000 001A      		bchg	#0,$1A(a0)
   27973/   15DA0 :                     
   27974/   15DA0 :                     locret_15B24:
   27975/   15DA0 : 4E75                		rts	
   27976/   15DA2 :                     ; ===========================================================================
   27977/   15DA2 :                     
   27978/   15DA2 :                     Obj6A_Type04:				; XREF: Obj6A_TypeIndex
   27979/   15DA2 : 4A28 003D           		tst.b	$3D(a0)
   27980/   15DA6 : 664C                		bne.s	Obj6A_Animate04
   27981/   15DA8 : 3038 D008           		move.w	($FFFFD008).w,d0
   27982/   15DAC : 0640 00E0           		addi.w	#$E0,d0
   27983/   15DB0 : 9068 0008           		sub.w	8(a0),d0
   27984/   15DB4 : 643A                		bcc.s	loc_15B74
   27985/   15DB6 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   27986/   15DBA : 0440 0080           		subi.w	#$80,d0
   27987/   15DBE : B068 000C           		cmp.w	$C(a0),d0
   27988/   15DC2 : 642E                		bcc.s	locret_15B76
   27989/   15DC4 : 0640 0100           		addi.w	#$100,d0
   27990/   15DC8 : B068 000C           		cmp.w	$C(a0),d0
   27991/   15DCC : 6524                		bcs.s	locret_15B76
   27992/   15DCE : 117C 0001 003D      		move.b	#1,$3D(a0)
   27993/   15DD4 : 317C FA00 0010      		move.w	#-$600,$10(a0)	; move object to the left
   27994/   15DDA : 117C 00A2 0020      		move.b	#$A2,$20(a0)
   27995/   15DE0 : 117C 0002 001A      		move.b	#2,$1A(a0)
   27996/   15DE6 : 303C 00B0           		move.w	#$B0,d0
   27997/   15DEA : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play saw sound
   27998/   15DF0 :                     
   27999/   15DF0 :                     loc_15B74:
   28000/   15DF0 : 588F                		addq.l	#4,sp
   28001/   15DF2 :                     
   28002/   15DF2 :                     locret_15B76:
   28003/   15DF2 : 4E75                		rts	
   28004/   15DF4 :                     ; ===========================================================================
   28005/   15DF4 :                     
   28006/   15DF4 :                     Obj6A_Animate04:
   28007/   15DF4 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   28008/   15DFA : 3168 0008 003A      		move.w	8(a0),$3A(a0)
   28009/   15E00 : 5328 001E           		subq.b	#1,$1E(a0)
   28010/   15E04 : 6A0C                		bpl.s	locret_15B96
   28011/   15E06 : 117C 0002 001E      		move.b	#2,$1E(a0)
   28012/   15E0C : 0868 0000 001A      		bchg	#0,$1A(a0)
   28013/   15E12 :                     
   28014/   15E12 :                     locret_15B96:
   28015/   15E12 : 4E75                		rts	
   28016/   15E14 :                     ; ===========================================================================
   28017/   15E14 :                     ; ---------------------------------------------------------------------------
   28018/   15E14 :                     ; Sprite mappings - ground saws	and pizza cutters (SBZ)
   28019/   15E14 :                     ; ---------------------------------------------------------------------------
   28020/   15E14 :                     Map_obj6A:
   28021/   15E14 :                     		include	"_maps/obj6A.asm"
(1)    1/   15E14 :                     ; ---------------------------------------------------------------------------
(1)    2/   15E14 :                     ; Sprite mappings - ground saws	and pizza cutters (SBZ)
(1)    3/   15E14 :                     ; ---------------------------------------------------------------------------
(1)    4/   15E14 : 0008 002C           		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
(1)    5/   15E18 : 0050 0065           		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
(1)    6/   15E1C : 07                  byte_15BA0:	dc.b 7
(1)    7/   15E1D : C401 0020 FC        		dc.b $C4, 1, 0,	$20, $FC
(1)    8/   15E22 : D401 0020 FC        		dc.b $D4, 1, 0,	$20, $FC
(1)    9/   15E27 : E403 0020 FC        		dc.b $E4, 3, 0,	$20, $FC
(1)   10/   15E2C : E00F 0000 E0        		dc.b $E0, $F, 0, 0, $E0
(1)   11/   15E31 : E00F 0800 00        		dc.b $E0, $F, 8, 0, 0
(1)   12/   15E36 : 000F 1000 E0        		dc.b 0,	$F, $10, 0, $E0
(1)   13/   15E3B : 000F 1800 00        		dc.b 0,	$F, $18, 0, 0
(1)   14/   15E40 : 07                  byte_15BC4:	dc.b 7
(1)   15/   15E41 : C401 0020 FC        		dc.b $C4, 1, 0,	$20, $FC
(1)   16/   15E46 : D401 0020 FC        		dc.b $D4, 1, 0,	$20, $FC
(1)   17/   15E4B : E403 0020 FC        		dc.b $E4, 3, 0,	$20, $FC
(1)   18/   15E50 : E00F 0010 E0        		dc.b $E0, $F, 0, $10, $E0
(1)   19/   15E55 : E00F 0810 00        		dc.b $E0, $F, 8, $10, 0
(1)   20/   15E5A : 000F 1010 E0        		dc.b 0,	$F, $10, $10, $E0
(1)   21/   15E5F : 000F 1810 00        		dc.b 0,	$F, $18, $10, 0
(1)   22/   15E64 : 04                  byte_15BE8:	dc.b 4
(1)   23/   15E65 : E00F 0000 E0        		dc.b $E0, $F, 0, 0, $E0
(1)   24/   15E6A : E00F 0800 00        		dc.b $E0, $F, 8, 0, 0
(1)   25/   15E6F : 000F 1000 E0        		dc.b 0,	$F, $10, 0, $E0
(1)   26/   15E74 : 000F 1800 00        		dc.b 0,	$F, $18, 0, 0
(1)   27/   15E79 : 04                  byte_15BFD:	dc.b 4
(1)   28/   15E7A : E00F 0010 E0        		dc.b $E0, $F, 0, $10, $E0
(1)   29/   15E7F : E00F 0810 00        		dc.b $E0, $F, 8, $10, 0
(1)   30/   15E84 : 000F 1010 E0        		dc.b 0,	$F, $10, $10, $E0
(1)   31/   15E89 : 000F 1810 00        		dc.b 0,	$F, $18, $10, 0
(1)   32/   15E8E : (MACRO)             		align 2
(1)   32/   15E8E :  (MACRO-2)                  cnop 0,2
(1)   32/   15E8E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   28022/   15E8E :                     
   28023/   15E8E :                     ; ===========================================================================
   28024/   15E8E :                     ; ---------------------------------------------------------------------------
   28025/   15E8E :                     ; Object 6B - stomper (SBZ)
   28026/   15E8E :                     ; ---------------------------------------------------------------------------
   28027/   15E8E :                     
   28028/   15E8E :                     Obj6B:					; XREF: Obj_Index
   28029/   15E8E : 7000                		moveq	#0,d0
   28030/   15E90 : 1028 0024           		move.b	$24(a0),d0
   28031/   15E94 : 323B 0006           		move.w	Obj6B_Index(pc,d0.w),d1
   28032/   15E98 : 4EFB 1002           		jmp	Obj6B_Index(pc,d1.w)
   28033/   15E9C :                     ; ===========================================================================
   28034/   15E9C : 0018                Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
   28035/   15E9E : 00EA                		dc.w Obj6B_Action-Obj6B_Index
   28036/   15EA0 :                     
   28037/   15EA0 : 400C 8001           Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
   28038/   15EA4 : 1C20 3803           		dc.b  $1C, $20,	$38,   3
   28039/   15EA8 : 1C20 4004           		dc.b  $1C, $20,	$40,   4
   28040/   15EAC : 1C20 6004           		dc.b  $1C, $20,	$60,   4
   28041/   15EB0 : 8040 0005           		dc.b  $80, $40,	  0,   5
   28042/   15EB4 :                     ; ===========================================================================
   28043/   15EB4 :                     
   28044/   15EB4 :                     Obj6B_Main:				; XREF: Obj6B_Index
   28045/   15EB4 : 5428 0024           		addq.b	#2,$24(a0)
   28046/   15EB8 : 7000                		moveq	#0,d0
   28047/   15EBA : 1028 0028           		move.b	$28(a0),d0
   28048/   15EBE : E448                		lsr.w	#2,d0
   28049/   15EC0 : 0240 001C           		andi.w	#$1C,d0
   28050/   15EC4 : 47FB 00DA           		lea	Obj6B_Var(pc,d0.w),a3
   28051/   15EC8 : 115B 0019           		move.b	(a3)+,$19(a0)
   28052/   15ECC : 115B 0016           		move.b	(a3)+,$16(a0)
   28053/   15ED0 : E448                		lsr.w	#2,d0
   28054/   15ED2 : 1140 001A           		move.b	d0,$1A(a0)
   28055/   15ED6 : 217C 0001 61E4 0004 		move.l	#Map_obj6B,4(a0)
   28056/   15EDE : 317C 22C0 0002      		move.w	#$22C0,2(a0)
   28057/   15EE4 :                     ;		clr.w           ($FFFFFF90).w
   28058/   15EE4 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
   28059/   15EEA : 6648                		bne.s	Obj6B_SBZ12	; if not, branch
   28060/   15EEC : 08F8 0000 F7CB      		bset	#0,($FFFFF7CB).w
   28061/   15EF2 : 6718                		beq.s	Obj6B_SBZ3
   28062/   15EF4 :                     
   28063/   15EF4 :                     Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
   28064/   15EF4 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   28065/   15EF8 : 7000                		moveq	#0,d0
   28066/   15EFA : 1028 0023           		move.b	$23(a0),d0
   28067/   15EFE : 6706                		beq.s	Obj6B_Delete
   28068/   15F00 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   28069/   15F06 :                     
   28070/   15F06 :                     Obj6B_Delete:
   28071/   15F06 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   28072/   15F0C :                     ; ===========================================================================
   28073/   15F0C :                     
   28074/   15F0C :                     Obj6B_SBZ3:				; XREF: Obj6B_Main
   28075/   15F0C : 317C 41F0 0002      		move.w	#$41F0,2(a0)
   28076/   15F12 : 0C68 0A80 0008      		cmpi.w	#$A80,8(a0)
   28077/   15F18 : 661A                		bne.s	Obj6B_SBZ12
   28078/   15F1A : 45F8 FC00           		lea	($FFFFFC00).w,a2
   28079/   15F1E : 7000                		moveq	#0,d0
   28080/   15F20 : 1028 0023           		move.b	$23(a0),d0
   28081/   15F24 : 670E                		beq.s	Obj6B_SBZ12
   28082/   15F26 : 0832 0000 0002      		btst	#0,2(a2,d0.w)
   28083/   15F2C : 6706                		beq.s	Obj6B_SBZ12
   28084/   15F2E : 4238 F7CB           		clr.b	($FFFFF7CB).w
   28085/   15F32 : 60C0                		bra.s	Obj6B_ChkGone
   28086/   15F34 :                     ; ===========================================================================
   28087/   15F34 :                     
   28088/   15F34 :                     Obj6B_SBZ12:				; XREF: Obj6B_Main
   28089/   15F34 : 0028 0004 0001      		ori.b	#4,1(a0)
   28090/   15F3A : 117C 0004 0018      		move.b	#4,$18(a0)
   28091/   15F40 : 3168 0008 0034      		move.w	8(a0),$34(a0)
   28092/   15F46 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   28093/   15F4C : 7000                		moveq	#0,d0
   28094/   15F4E : 101B                		move.b	(a3)+,d0
   28095/   15F50 : 3140 003C           		move.w	d0,$3C(a0)
   28096/   15F54 : 7000                		moveq	#0,d0
   28097/   15F56 : 1028 0028           		move.b	$28(a0),d0
   28098/   15F5A : 6A2A                		bpl.s	Obj6B_Action
   28099/   15F5C : 0200 000F           		andi.b	#$F,d0
   28100/   15F60 : 1140 003E           		move.b	d0,$3E(a0)
   28101/   15F64 : 1153 0028           		move.b	(a3),$28(a0)
   28102/   15F68 : 0C13 0005           		cmpi.b	#5,(a3)
   28103/   15F6C : 6606                		bne.s	Obj6B_ChkGone2
   28104/   15F6E : 08E8 0004 0001      		bset	#4,1(a0)
   28105/   15F74 :                     
   28106/   15F74 :                     Obj6B_ChkGone2:
   28107/   15F74 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   28108/   15F78 : 7000                		moveq	#0,d0
   28109/   15F7A : 1028 0023           		move.b	$23(a0),d0
   28110/   15F7E : 6706                		beq.s	Obj6B_Action
   28111/   15F80 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   28112/   15F86 :                     
   28113/   15F86 :                     Obj6B_Action:				; XREF: Obj6B_Index
   28114/   15F86 : 3F28 0008           		move.w	8(a0),-(sp)
   28115/   15F8A : 7000                		moveq	#0,d0
   28116/   15F8C : 1028 0028           		move.b	$28(a0),d0
   28117/   15F90 : 0240 000F           		andi.w	#$F,d0
   28118/   15F94 : D040                		add.w	d0,d0
   28119/   15F96 : 323B 006C           		move.w	Obj6B_TypeIndex(pc,d0.w),d1
   28120/   15F9A : 4EBB 1068           		jsr	Obj6B_TypeIndex(pc,d1.w)
   28121/   15F9E : 381F                		move.w	(sp)+,d4
   28122/   15FA0 : 4A28 0001           		tst.b	1(a0)
   28123/   15FA4 : 6A18                		bpl.s	Obj6B_ChkDel
   28124/   15FA6 : 7200                		moveq	#0,d1
   28125/   15FA8 : 1228 0019           		move.b	$19(a0),d1
   28126/   15FAC : 0641 000B           		addi.w	#$B,d1
   28127/   15FB0 : 7400                		moveq	#0,d2
   28128/   15FB2 : 1428 0016           		move.b	$16(a0),d2
   28129/   15FB6 : 3602                		move.w	d2,d3
   28130/   15FB8 : 5243                		addq.w	#1,d3
   28131/   15FBA : 6100 9B2A           		bsr.w	SolidObject
   28132/   15FBE :                     
   28133/   15FBE :                     Obj6B_ChkDel:
   28134/   15FBE : 3028 0034           		move.w	$34(a0),d0
   28135/   15FC2 : 0240 FF80           		andi.w	#$FF80,d0
   28136/   15FC6 : 3238 F700           		move.w	($FFFFF700).w,d1
   28137/   15FCA : 0441 0080           		subi.w	#$80,d1
   28138/   15FCE : 0241 FF80           		andi.w	#$FF80,d1
   28139/   15FD2 : 9041                		sub.w	d1,d0
   28140/   15FD4 : 0C40 0280           		cmpi.w	#$280,d0
   28141/   15FD8 : 6206                		bhi.s	loc_15D64
   28142/   15FDA : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   28143/   15FE0 :                     ; ===========================================================================
   28144/   15FE0 :                     
   28145/   15FE0 :                     loc_15D64:
   28146/   15FE0 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
   28147/   15FE6 : 6616                		bne.s	Obj6B_Delete2
   28148/   15FE8 : 4238 F7CB           		clr.b	($FFFFF7CB).w
   28149/   15FEC : 45F8 FC00           		lea	($FFFFFC00).w,a2
   28150/   15FF0 : 7000                		moveq	#0,d0
   28151/   15FF2 : 1028 0023           		move.b	$23(a0),d0
   28152/   15FF6 : 6706                		beq.s	Obj6B_Delete2
   28153/   15FF8 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   28154/   15FFE :                     
   28155/   15FFE :                     Obj6B_Delete2:
   28156/   15FFE : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   28157/   16004 :                     ; ===========================================================================
   28158/   16004 : 000C 000E           Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
   28159/   16008 : 007A 00D0           		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
   28160/   1600C : 0124 0186           		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
   28161/   16010 :                     ; ===========================================================================
   28162/   16010 :                     
   28163/   16010 :                     Obj6B_Type00:				; XREF: Obj6B_TypeIndex
   28164/   16010 : 4E75                		rts	
   28165/   16012 :                     ; ===========================================================================
   28166/   16012 :                     
   28167/   16012 :                     Obj6B_Type01:				; XREF: Obj6B_TypeIndex
   28168/   16012 : 4A28 0038           		tst.b	$38(a0)
   28169/   16016 : 6618                		bne.s	loc_15DB4
   28170/   16018 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   28171/   1601C : 7000                		moveq	#0,d0
   28172/   1601E : 1028 003E           		move.b	$3E(a0),d0
   28173/   16022 : 0832 0000 0000      		btst	#0,(a2,d0.w)
   28174/   16028 : 6714                		beq.s	loc_15DC2
   28175/   1602A : 117C 0001 0038      		move.b	#1,$38(a0)
   28176/   16030 :                     
   28177/   16030 :                     loc_15DB4:
   28178/   16030 : 3028 003C           		move.w	$3C(a0),d0
   28179/   16034 : B068 003A           		cmp.w	$3A(a0),d0
   28180/   16038 : 6722                		beq.s	loc_15DE0
   28181/   1603A : 5468 003A           		addq.w	#2,$3A(a0)
   28182/   1603E :                     
   28183/   1603E :                     loc_15DC2:
   28184/   1603E : 3028 003A           		move.w	$3A(a0),d0
   28185/   16042 : 0828 0000 0022      		btst	#0,$22(a0)
   28186/   16048 : 6706                		beq.s	loc_15DD4
   28187/   1604A : 4440                		neg.w	d0
   28188/   1604C : 0640 0080           		addi.w	#$80,d0
   28189/   16050 :                     
   28190/   16050 :                     loc_15DD4:
   28191/   16050 : 3228 0034           		move.w	$34(a0),d1
   28192/   16054 : 9240                		sub.w	d0,d1
   28193/   16056 : 3141 0008           		move.w	d1,8(a0)
   28194/   1605A : 4E75                		rts	
   28195/   1605C :                     ; ===========================================================================
   28196/   1605C :                     
   28197/   1605C :                     loc_15DE0:
   28198/   1605C : 5228 0028           		addq.b	#1,$28(a0)
   28199/   16060 : 317C 00B4 0036      		move.w	#$B4,$36(a0)
   28200/   16066 : 4228 0038           		clr.b	$38(a0)
   28201/   1606A : 45F8 FC00           		lea	($FFFFFC00).w,a2
   28202/   1606E : 7000                		moveq	#0,d0
   28203/   16070 : 1028 0023           		move.b	$23(a0),d0
   28204/   16074 : 67C8                		beq.s	loc_15DC2
   28205/   16076 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   28206/   1607C : 60C0                		bra.s	loc_15DC2
   28207/   1607E :                     ; ===========================================================================
   28208/   1607E :                     
   28209/   1607E :                     Obj6B_Type02:				; XREF: Obj6B_TypeIndex
   28210/   1607E : 4A28 0038           		tst.b	$38(a0)
   28211/   16082 : 660C                		bne.s	loc_15E14
   28212/   16084 : 5368 0036           		subq.w	#1,$36(a0)
   28213/   16088 : 6610                		bne.s	loc_15E1E
   28214/   1608A : 117C 0001 0038      		move.b	#1,$38(a0)
   28215/   16090 :                     
   28216/   16090 :                     loc_15E14:
   28217/   16090 : 4A68 003A           		tst.w	$3A(a0)
   28218/   16094 : 6722                		beq.s	loc_15E3C
   28219/   16096 : 5568 003A           		subq.w	#2,$3A(a0)
   28220/   1609A :                     
   28221/   1609A :                     loc_15E1E:
   28222/   1609A : 3028 003A           		move.w	$3A(a0),d0
   28223/   1609E : 0828 0000 0022      		btst	#0,$22(a0)
   28224/   160A4 : 6706                		beq.s	loc_15E30
   28225/   160A6 : 4440                		neg.w	d0
   28226/   160A8 : 0640 0080           		addi.w	#$80,d0
   28227/   160AC :                     
   28228/   160AC :                     loc_15E30:
   28229/   160AC : 3228 0034           		move.w	$34(a0),d1
   28230/   160B0 : 9240                		sub.w	d0,d1
   28231/   160B2 : 3141 0008           		move.w	d1,8(a0)
   28232/   160B6 : 4E75                		rts	
   28233/   160B8 :                     ; ===========================================================================
   28234/   160B8 :                     
   28235/   160B8 :                     loc_15E3C:
   28236/   160B8 : 5328 0028           		subq.b	#1,$28(a0)
   28237/   160BC : 4228 0038           		clr.b	$38(a0)
   28238/   160C0 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   28239/   160C4 : 7000                		moveq	#0,d0
   28240/   160C6 : 1028 0023           		move.b	$23(a0),d0
   28241/   160CA : 67CE                		beq.s	loc_15E1E
   28242/   160CC : 08B2 0000 0002      		bclr	#0,2(a2,d0.w)
   28243/   160D2 : 60C6                		bra.s	loc_15E1E
   28244/   160D4 :                     ; ===========================================================================
   28245/   160D4 :                     
   28246/   160D4 :                     Obj6B_Type03:				; XREF: Obj6B_TypeIndex
   28247/   160D4 : 4A28 0038           		tst.b	$38(a0)
   28248/   160D8 : 661E                		bne.s	loc_15E7C
   28249/   160DA : 4A68 003A           		tst.w	$3A(a0)
   28250/   160DE : 6706                		beq.s	loc_15E6A
   28251/   160E0 : 5368 003A           		subq.w	#1,$3A(a0)
   28252/   160E4 : 6024                		bra.s	loc_15E8E
   28253/   160E6 :                     ; ===========================================================================
   28254/   160E6 :                     
   28255/   160E6 :                     loc_15E6A:
   28256/   160E6 : 5368 0036           		subq.w	#1,$36(a0)
   28257/   160EA : 6A1E                		bpl.s	loc_15E8E
   28258/   160EC : 317C 003C 0036      		move.w	#$3C,$36(a0)
   28259/   160F2 : 117C 0001 0038      		move.b	#1,$38(a0)
   28260/   160F8 :                     
   28261/   160F8 :                     loc_15E7C:
   28262/   160F8 : 5068 003A           		addq.w	#8,$3A(a0)
   28263/   160FC : 3028 003A           		move.w	$3A(a0),d0
   28264/   16100 : B068 003C           		cmp.w	$3C(a0),d0
   28265/   16104 : 6604                		bne.s	loc_15E8E
   28266/   16106 : 4228 0038           		clr.b	$38(a0)
   28267/   1610A :                     
   28268/   1610A :                     loc_15E8E:
   28269/   1610A : 3028 003A           		move.w	$3A(a0),d0
   28270/   1610E : 0828 0000 0022      		btst	#0,$22(a0)
   28271/   16114 : 6706                		beq.s	loc_15EA0
   28272/   16116 : 4440                		neg.w	d0
   28273/   16118 : 0640 0038           		addi.w	#$38,d0
   28274/   1611C :                     
   28275/   1611C :                     loc_15EA0:
   28276/   1611C : 3228 0030           		move.w	$30(a0),d1
   28277/   16120 : D240                		add.w	d0,d1
   28278/   16122 : 3141 000C           		move.w	d1,$C(a0)
   28279/   16126 : 4E75                		rts	
   28280/   16128 :                     ; ===========================================================================
   28281/   16128 :                     
   28282/   16128 :                     Obj6B_Type04:				; XREF: Obj6B_TypeIndex
   28283/   16128 : 4A28 0038           		tst.b	$38(a0)
   28284/   1612C : 661E                		bne.s	loc_15ED0
   28285/   1612E : 4A68 003A           		tst.w	$3A(a0)
   28286/   16132 : 6706                		beq.s	loc_15EBE
   28287/   16134 : 5168 003A           		subq.w	#8,$3A(a0)
   28288/   16138 : 6032                		bra.s	loc_15EF0
   28289/   1613A :                     ; ===========================================================================
   28290/   1613A :                     
   28291/   1613A :                     loc_15EBE:
   28292/   1613A : 5368 0036           		subq.w	#1,$36(a0)
   28293/   1613E : 6A2C                		bpl.s	loc_15EF0
   28294/   16140 : 317C 003C 0036      		move.w	#$3C,$36(a0)
   28295/   16146 : 117C 0001 0038      		move.b	#1,$38(a0)
   28296/   1614C :                     
   28297/   1614C :                     loc_15ED0:
   28298/   1614C : 3028 003A           		move.w	$3A(a0),d0
   28299/   16150 : B068 003C           		cmp.w	$3C(a0),d0
   28300/   16154 : 6706                		beq.s	loc_15EE0
   28301/   16156 : 5068 003A           		addq.w	#8,$3A(a0)
   28302/   1615A : 6010                		bra.s	loc_15EF0
   28303/   1615C :                     ; ===========================================================================
   28304/   1615C :                     
   28305/   1615C :                     loc_15EE0:
   28306/   1615C : 5368 0036           		subq.w	#1,$36(a0)
   28307/   16160 : 6A0A                		bpl.s	loc_15EF0
   28308/   16162 : 317C 003C 0036      		move.w	#$3C,$36(a0)
   28309/   16168 : 4228 0038           		clr.b	$38(a0)
   28310/   1616C :                     
   28311/   1616C :                     loc_15EF0:
   28312/   1616C : 3028 003A           		move.w	$3A(a0),d0
   28313/   16170 : 0828 0000 0022      		btst	#0,$22(a0)
   28314/   16176 : 6706                		beq.s	loc_15F02
   28315/   16178 : 4440                		neg.w	d0
   28316/   1617A : 0640 0038           		addi.w	#$38,d0
   28317/   1617E :                     
   28318/   1617E :                     loc_15F02:
   28319/   1617E : 3228 0030           		move.w	$30(a0),d1
   28320/   16182 : D240                		add.w	d0,d1
   28321/   16184 : 3141 000C           		move.w	d1,$C(a0)
   28322/   16188 : 4E75                		rts	
   28323/   1618A :                     ; ===========================================================================
   28324/   1618A :                     
   28325/   1618A :                     Obj6B_Type05:				; XREF: Obj6B_TypeIndex
   28326/   1618A : 4A28 0038           		tst.b	$38(a0)
   28327/   1618E : 662A                		bne.s	loc_15F3E
   28328/   16190 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   28329/   16194 : 7000                		moveq	#0,d0
   28330/   16196 : 1028 003E           		move.b	$3E(a0),d0
   28331/   1619A : 0832 0000 0000      		btst	#0,(a2,d0.w)
   28332/   161A0 : 6736                		beq.s	locret_15F5C
   28333/   161A2 : 117C 0001 0038      		move.b	#1,$38(a0)
   28334/   161A8 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   28335/   161AC : 7000                		moveq	#0,d0
   28336/   161AE : 1028 0023           		move.b	$23(a0),d0
   28337/   161B2 : 6706                		beq.s	loc_15F3E
   28338/   161B4 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   28339/   161BA :                     
   28340/   161BA :                     loc_15F3E:
   28341/   161BA : 04A8 0001 0000 0008 		subi.l	#$10000,8(a0)
   28342/   161C2 : 06A8 0000 8000 000C 		addi.l	#$8000,$C(a0)
   28343/   161CA : 3168 0008 0034      		move.w	8(a0),$34(a0)
   28344/   161D0 : 0C68 0980 0008      		cmpi.w	#$980,8(a0)
   28345/   161D6 : 6702                		beq.s	loc_15F5E
   28346/   161D8 :                     
   28347/   161D8 :                     locret_15F5C:
   28348/   161D8 : 4E75                		rts	
   28349/   161DA :                     ; ===========================================================================
   28350/   161DA :                     
   28351/   161DA :                     loc_15F5E:
   28352/   161DA : 4228 0028           		clr.b	$28(a0)
   28353/   161DE : 4228 0038           		clr.b	$38(a0)
   28354/   161E2 : 4E75                		rts	
   28355/   161E4 :                     ; ===========================================================================
   28356/   161E4 :                     ; ---------------------------------------------------------------------------
   28357/   161E4 :                     ; Sprite mappings - stomper and	platforms (SBZ)
   28358/   161E4 :                     ; ---------------------------------------------------------------------------
   28359/   161E4 :                     Map_obj6B:
   28360/   161E4 :                     		include	"_maps/obj6B.asm"
(1)    1/   161E4 :                     ; ---------------------------------------------------------------------------
(1)    2/   161E4 :                     ; Sprite mappings - stomper and	platforms (SBZ)
(1)    3/   161E4 :                     ; ---------------------------------------------------------------------------
(1)    4/   161E4 : 000A 001F           		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
(1)    5/   161E8 : 001F 001F           		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
(1)    6/   161EC : 0048                		dc.w byte_15FB0-Map_obj6B
(1)    7/   161EE : 04                  byte_15F72:	dc.b 4
(1)    8/   161EF : F40E 21AF C0        		dc.b $F4, $E, $21, $AF,	$C0
(1)    9/   161F4 : F40E 21B2 E0        		dc.b $F4, $E, $21, $B2,	$E0
(1)   10/   161F9 : F40E 21B2 00        		dc.b $F4, $E, $21, $B2,	0
(1)   11/   161FE : F40E 29AF 20        		dc.b $F4, $E, $29, $AF,	$20
(1)   12/   16203 : 08                  byte_15F87:	dc.b 8
(1)   13/   16204 : E00C 000C E4        		dc.b $E0, $C, 0, $C, $E4
(1)   14/   16209 : E008 0010 04        		dc.b $E0, 8, 0,	$10, 4
(1)   15/   1620E : E80E 2013 E4        		dc.b $E8, $E, $20, $13,	$E4
(1)   16/   16213 : E80A 201F 04        		dc.b $E8, $A, $20, $1F,	4
(1)   17/   16218 : 000E 2013 E4        		dc.b 0,	$E, $20, $13, $E4
(1)   18/   1621D : 000A 201F 04        		dc.b 0,	$A, $20, $1F, 4
(1)   19/   16222 : 180C 000C E4        		dc.b $18, $C, 0, $C, $E4
(1)   20/   16227 : 1808 0010 04        		dc.b $18, 8, 0,	$10, 4
(1)   21/   1622C : 0E                  byte_15FB0:	dc.b $E
(1)   22/   1622D : C00F 0000 80        		dc.b $C0, $F, 0, 0, $80
(1)   23/   16232 : C00F 0010 A0        		dc.b $C0, $F, 0, $10, $A0
(1)   24/   16237 : C00F 0020 C0        		dc.b $C0, $F, 0, $20, $C0
(1)   25/   1623C : C00F 0010 E0        		dc.b $C0, $F, 0, $10, $E0
(1)   26/   16241 : C00F 0020 00        		dc.b $C0, $F, 0, $20, 0
(1)   27/   16246 : C00F 0010 20        		dc.b $C0, $F, 0, $10, $20
(1)   28/   1624B : C00F 0030 40        		dc.b $C0, $F, 0, $30, $40
(1)   29/   16250 : C00D 0040 60        		dc.b $C0, $D, 0, $40, $60
(1)   30/   16255 : E00F 0048 80        		dc.b $E0, $F, 0, $48, $80
(1)   31/   1625A : E00F 0048 C0        		dc.b $E0, $F, 0, $48, $C0
(1)   32/   1625F : E00F 0058 00        		dc.b $E0, $F, 0, $58, 0
(1)   33/   16264 : 000F 0048 80        		dc.b 0,	$F, 0, $48, $80
(1)   34/   16269 : 000F 0058 C0        		dc.b 0,	$F, 0, $58, $C0
(1)   35/   1626E : 200F 0058 80        		dc.b $20, $F, 0, $58, $80
(1)   36/   16273 : (MACRO)             		align 2
(1)   36/   16273 :  (MACRO-2)                  cnop 0,2
(1)   36/   16273 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   36/   16273 : =$36                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   36/   16274 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   28361/   16274 :                     
   28362/   16274 :                     ; ===========================================================================
   28363/   16274 :                     ; ---------------------------------------------------------------------------
   28364/   16274 :                     ; Object 6C - vanishing	platforms (SBZ)
   28365/   16274 :                     ; ---------------------------------------------------------------------------
   28366/   16274 :                     
   28367/   16274 :                     Obj6C:					; XREF: Obj_Index
   28368/   16274 : 7000                		moveq	#0,d0
   28369/   16276 : 1028 0024           		move.b	$24(a0),d0
   28370/   1627A : 323B 0006           		move.w	Obj6C_Index(pc,d0.w),d1
   28371/   1627E : 4EFB 1002           		jmp	Obj6C_Index(pc,d1.w)
   28372/   16282 :                     ; ===========================================================================
   28373/   16282 : 0008                Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
   28374/   16284 : 0086                		dc.w Obj6C_Vanish-Obj6C_Index
   28375/   16286 : 0086                		dc.w Obj6C_Vanish-Obj6C_Index
   28376/   16288 : 0062                		dc.w loc_16068-Obj6C_Index
   28377/   1628A :                     ; ===========================================================================
   28378/   1628A :                     
   28379/   1628A :                     Obj6C_Main:				; XREF: Obj6C_Index
   28380/   1628A : 5C28 0024           		addq.b	#6,$24(a0)
   28381/   1628E : 217C 0001 63A6 0004 		move.l	#Map_obj6C,4(a0)
   28382/   16296 : 317C 44C3 0002      		move.w	#$44C3,2(a0)
   28383/   1629C : 0028 0004 0001      		ori.b	#4,1(a0)
   28384/   162A2 : 117C 0010 0019      		move.b	#$10,$19(a0)
   28385/   162A8 : 117C 0004 0018      		move.b	#4,$18(a0)
   28386/   162AE : 7000                		moveq	#0,d0
   28387/   162B0 : 1028 0028           		move.b	$28(a0),d0	; get object type
   28388/   162B4 : 0240 000F           		andi.w	#$F,d0		; read only the	2nd digit
   28389/   162B8 : 5240                		addq.w	#1,d0		; add 1
   28390/   162BA : EF48                		lsl.w	#7,d0		; multiply by $80
   28391/   162BC : 3200                		move.w	d0,d1
   28392/   162BE : 5340                		subq.w	#1,d0
   28393/   162C0 : 3140 0030           		move.w	d0,$30(a0)
   28394/   162C4 : 3140 0032           		move.w	d0,$32(a0)
   28395/   162C8 : 7000                		moveq	#0,d0
   28396/   162CA : 1028 0028           		move.b	$28(a0),d0	; get object type
   28397/   162CE : 0240 00F0           		andi.w	#$F0,d0		; read only the	1st digit
   28398/   162D2 : 0641 0080           		addi.w	#$80,d1
   28399/   162D6 : C0C1                		mulu.w	d1,d0
   28400/   162D8 : E088                		lsr.l	#8,d0
   28401/   162DA : 3140 0036           		move.w	d0,$36(a0)
   28402/   162DE : 5341                		subq.w	#1,d1
   28403/   162E0 : 3141 0038           		move.w	d1,$38(a0)
   28404/   162E4 :                     
   28405/   162E4 :                     loc_16068:				; XREF: Obj6C_Index
   28406/   162E4 : 3038 FE04           		move.w	($FFFFFE04).w,d0
   28407/   162E8 : 9068 0036           		sub.w	$36(a0),d0
   28408/   162EC : C068 0038           		and.w	$38(a0),d0
   28409/   162F0 : 6606                		bne.s	Obj6C_Animate
   28410/   162F2 : 5928 0024           		subq.b	#4,$24(a0)
   28411/   162F6 : 6010                		bra.s	Obj6C_Vanish
   28412/   162F8 :                     ; ===========================================================================
   28413/   162F8 :                     
   28414/   162F8 :                     Obj6C_Animate:
   28415/   162F8 : 43F9 0001 6392      		lea	(Ani_obj6C).l,a1
   28416/   162FE : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   28417/   16304 : 6000 94B6           		bra.w	MarkObjGone
   28418/   16308 :                     ; ===========================================================================
   28419/   16308 :                     
   28420/   16308 :                     Obj6C_Vanish:				; XREF: Obj6C_Index
   28421/   16308 : 5368 0030           		subq.w	#1,$30(a0)
   28422/   1630C : 6A18                		bpl.s	loc_160AA
   28423/   1630E : 317C 007F 0030      		move.w	#127,$30(a0)
   28424/   16314 : 4A28 001C           		tst.b	$1C(a0)
   28425/   16318 : 6706                		beq.s	loc_160A4
   28426/   1631A : 3168 0032 0030      		move.w	$32(a0),$30(a0)
   28427/   16320 :                     
   28428/   16320 :                     loc_160A4:
   28429/   16320 : 0868 0000 001C      		bchg	#0,$1C(a0)
   28430/   16326 :                     
   28431/   16326 :                     loc_160AA:
   28432/   16326 : 43F9 0001 6392      		lea	(Ani_obj6C).l,a1
   28433/   1632C : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   28434/   16332 : 0828 0001 001A      		btst	#1,$1A(a0)	; has platform vanished?
   28435/   16338 : 6632                		bne.s	Obj6C_NotSolid	; if yes, branch
   28436/   1633A : 0C28 0002 0024      		cmpi.b	#2,$24(a0)
   28437/   16340 : 6610                		bne.s	loc_160D6
   28438/   16342 : 7200                		moveq	#0,d1
   28439/   16344 : 1228 0019           		move.b	$19(a0),d1
   28440/   16348 : 4EB9 0000 7458      		jsr	(PlatformObject).l
   28441/   1634E : 6000 946C           		bra.w	MarkObjGone
   28442/   16352 :                     ; ===========================================================================
   28443/   16352 :                     
   28444/   16352 :                     loc_160D6:
   28445/   16352 : 7200                		moveq	#0,d1
   28446/   16354 : 1228 0019           		move.b	$19(a0),d1
   28447/   16358 : 4EB9 0000 75CC      		jsr	(ExitPlatform).l
   28448/   1635E : 3428 0008           		move.w	8(a0),d2
   28449/   16362 : 4EB9 0000 7B3A      		jsr	(MvSonicOnPtfm2).l
   28450/   16368 : 6000 9452           		bra.w	MarkObjGone
   28451/   1636C :                     ; ===========================================================================
   28452/   1636C :                     
   28453/   1636C :                     Obj6C_NotSolid:				; XREF: Obj6C_Vanish
   28454/   1636C : 0828 0003 0022      		btst	#3,$22(a0)
   28455/   16372 : 671A                		beq.s	Obj6C_Display
   28456/   16374 : 43F8 D000           		lea	($FFFFD000).w,a1
   28457/   16378 : 08A9 0003 0022      		bclr	#3,$22(a1)
   28458/   1637E : 08A8 0003 0022      		bclr	#3,$22(a0)
   28459/   16384 : 117C 0002 0024      		move.b	#2,$24(a0)
   28460/   1638A : 4228 0025           		clr.b	$25(a0)
   28461/   1638E :                     
   28462/   1638E :                     Obj6C_Display:
   28463/   1638E : 6000 942C           		bra.w	MarkObjGone
   28464/   16392 :                     ; ===========================================================================
   28465/   16392 :                     Ani_obj6C:
   28466/   16392 :                     		include	"_anim/obj6C.asm"
(1)    1/   16392 :                     ; ---------------------------------------------------------------------------
(1)    2/   16392 :                     ; Animation script - vanishing platforms (SBZ)
(1)    3/   16392 :                     ; ---------------------------------------------------------------------------
(1)    4/   16392 : 0004                		dc.w byte_1611A-Ani_obj6C
(1)    5/   16394 : 000C                		dc.w byte_16122-Ani_obj6C
(1)    6/   16396 : 0700 0102 03FE 0100 byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
(1)    7/   1639E : 0703 0201 00FE 0100 byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
(1)    8/   163A6 : (MACRO)             		align 2
(1)    8/   163A6 :  (MACRO-2)                  cnop 0,2
(1)    8/   163A6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   28467/   163A6 :                     
   28468/   163A6 :                     ; ---------------------------------------------------------------------------
   28469/   163A6 :                     ; Sprite mappings - vanishing platforms	(SBZ)
   28470/   163A6 :                     ; ---------------------------------------------------------------------------
   28471/   163A6 :                     Map_obj6C:
   28472/   163A6 :                     		include	"_maps/obj6C.asm"
(1)    1/   163A6 :                     ; ---------------------------------------------------------------------------
(1)    2/   163A6 :                     ; Sprite mappings - vanishing platforms	(SBZ)
(1)    3/   163A6 :                     ; ---------------------------------------------------------------------------
(1)    4/   163A6 : 0008 000E           		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
(1)    5/   163AA : 0014 001A           		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
(1)    6/   163AE : 01                  byte_16132:	dc.b 1
(1)    7/   163AF : F80F 0000 F0        		dc.b $F8, $F, 0, 0, $F0
(1)    8/   163B4 : 01                  byte_16138:	dc.b 1
(1)    9/   163B5 : F807 0010 F8        		dc.b $F8, 7, 0,	$10, $F8
(1)   10/   163BA : 01                  byte_1613E:	dc.b 1
(1)   11/   163BB : F803 0018 FC        		dc.b $F8, 3, 0,	$18, $FC
(1)   12/   163C0 : 00                  byte_16144:	dc.b 0
(1)   13/   163C1 : (MACRO)             		align 2
(1)   13/   163C1 :  (MACRO-2)                  cnop 0,2
(1)   13/   163C1 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   13/   163C1 : =$37                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   13/   163C2 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   28473/   163C2 :                     
   28474/   163C2 :                     ; ===========================================================================
   28475/   163C2 :                     ; ---------------------------------------------------------------------------
   28476/   163C2 :                     ; Object 6E - electrocution orbs (SBZ)
   28477/   163C2 :                     ; ---------------------------------------------------------------------------
   28478/   163C2 :                     
   28479/   163C2 :                     Obj6E:					; XREF: Obj_Index
   28480/   163C2 : 7000                		moveq	#0,d0
   28481/   163C4 : 1028 0024           		move.b	$24(a0),d0
   28482/   163C8 : 323B 0006           		move.w	Obj6E_Index(pc,d0.w),d1
   28483/   163CC : 4EFB 1002           		jmp	Obj6E_Index(pc,d1.w)
   28484/   163D0 :                     ; ===========================================================================
   28485/   163D0 : 0004                Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
   28486/   163D2 : 0030                		dc.w Obj6E_Shock-Obj6E_Index
   28487/   163D4 :                     ; ===========================================================================
   28488/   163D4 :                     
   28489/   163D4 :                     Obj6E_Main:				; XREF: Obj6E_Index
   28490/   163D4 : 5428 0024           		addq.b	#2,$24(a0)
   28491/   163D8 : 217C 0001 645C 0004 		move.l	#Map_obj6E,4(a0)
   28492/   163E0 : 317C 047E 0002      		move.w	#$47E,2(a0)
   28493/   163E6 : 0028 0004 0001      		ori.b	#4,1(a0)
   28494/   163EC : 117C 0028 0019      		move.b	#$28,$19(a0)
   28495/   163F2 : 7000                		moveq	#0,d0
   28496/   163F4 : 1028 0028           		move.b	$28(a0),d0	; read object type
   28497/   163F8 : E948                		lsl.w	#4,d0		; multiply by $10
   28498/   163FA : 5340                		subq.w	#1,d0
   28499/   163FC : 3140 0034           		move.w	d0,$34(a0)
   28500/   16400 :                     
   28501/   16400 :                     Obj6E_Shock:				; XREF: Obj6E_Index
   28502/   16400 : 3038 FE04           		move.w	($FFFFFE04).w,d0
   28503/   16404 : C068 0034           		and.w	$34(a0),d0
   28504/   16408 : 6616                		bne.s	Obj6E_Animate
   28505/   1640A : 117C 0001 001C      		move.b	#1,$1C(a0)	; run "shocking" animation
   28506/   16410 : 4A28 0001           		tst.b	1(a0)
   28507/   16414 : 6A0A                		bpl.s	Obj6E_Animate
   28508/   16416 : 303C 00B1           		move.w	#$B1,d0
   28509/   1641A : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play electricity sound
   28510/   16420 :                     
   28511/   16420 :                     Obj6E_Animate:
   28512/   16420 : 43F9 0001 6444      		lea	(Ani_obj6E).l,a1
   28513/   16426 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   28514/   1642C : 117C 0000 0020      		move.b	#0,$20(a0)
   28515/   16432 : 0C28 0004 001A      		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
   28516/   16438 : 6606                		bne.s	Obj6E_Display	; if not, branch
   28517/   1643A : 117C 00A4 0020      		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
   28518/   16440 :                     
   28519/   16440 :                     Obj6E_Display:
   28520/   16440 : 6000 937A           		bra.w	MarkObjGone
   28521/   16444 :                     ; ===========================================================================
   28522/   16444 :                     Ani_obj6E:
   28523/   16444 :                     		include	"_anim/obj6E.asm"
(1)    1/   16444 :                     ; ---------------------------------------------------------------------------
(1)    2/   16444 :                     ; Animation script - electrocution orbs (SBZ)
(1)    3/   16444 :                     ; ---------------------------------------------------------------------------
(1)    4/   16444 : 0004                		dc.w byte_161CC-Ani_obj6E
(1)    5/   16446 : 0008                		dc.w byte_161D0-Ani_obj6E
(1)    6/   16448 : 0700 FF00           byte_161CC:	dc.b 7,	0, $FF,	0
(1)    7/   1644C : 0001 0101 0203 0304 byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
                    0404 0505 0500 FD00 
(1)    8/   1645C : (MACRO)             		align 2
(1)    8/   1645C :  (MACRO-2)                  cnop 0,2
(1)    8/   1645C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   28524/   1645C :                     
   28525/   1645C :                     ; ---------------------------------------------------------------------------
   28526/   1645C :                     ; Sprite mappings - electrocution orbs (SBZ)
   28527/   1645C :                     ; ---------------------------------------------------------------------------
   28528/   1645C :                     Map_obj6E:
   28529/   1645C :                     		include	"_maps/obj6E.asm"
(1)    1/   1645C :                     ; ---------------------------------------------------------------------------
(1)    2/   1645C :                     ; Sprite mappings - electrocution orbs (SBZ)
(1)    3/   1645C :                     ; ---------------------------------------------------------------------------
(1)    4/   1645C : 000C 0017           		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
(1)    5/   16460 : 0027 0041           		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
(1)    6/   16464 : 0056 0075           		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
(1)    7/   16468 : 02                  byte_161EC:	dc.b 2
(1)    8/   16469 : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)    9/   1646E : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   10/   16473 : 03                  byte_161F7:	dc.b 3
(1)   11/   16474 : F805 0008 F8        		dc.b $F8, 5, 0,	8, $F8
(1)   12/   16479 : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)   13/   1647E : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   14/   16483 : 05                  byte_16207:	dc.b 5
(1)   15/   16484 : F805 0008 F8        		dc.b $F8, 5, 0,	8, $F8
(1)   16/   16489 : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)   17/   1648E : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   18/   16493 : F60D 000C 08        		dc.b $F6, $D, 0, $C, 8
(1)   19/   16498 : F60D 080C DC        		dc.b $F6, $D, 8, $C, $DC
(1)   20/   1649D : 04                  byte_16221:	dc.b 4
(1)   21/   1649E : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)   22/   164A3 : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   23/   164A8 : F60D 000C 08        		dc.b $F6, $D, 0, $C, 8
(1)   24/   164AD : F60D 080C DC        		dc.b $F6, $D, 8, $C, $DC
(1)   25/   164B2 : 06                  byte_16236:	dc.b 6
(1)   26/   164B3 : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)   27/   164B8 : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   28/   164BD : F60D 100C 08        		dc.b $F6, $D, $10, $C, 8
(1)   29/   164C2 : F60D 180C DC        		dc.b $F6, $D, $18, $C, $DC
(1)   30/   164C7 : F60D 000C 24        		dc.b $F6, $D, 0, $C, $24
(1)   31/   164CC : F60D 080C C0        		dc.b $F6, $D, 8, $C, $C0
(1)   32/   164D1 : 04                  byte_16255:	dc.b 4
(1)   33/   164D2 : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)   34/   164D7 : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   35/   164DC : F60D 100C 24        		dc.b $F6, $D, $10, $C, $24
(1)   36/   164E1 : F60D 180C C0        		dc.b $F6, $D, $18, $C, $C0
(1)   37/   164E6 : (MACRO)             		align 2
(1)   37/   164E6 :  (MACRO-2)                  cnop 0,2
(1)   37/   164E6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   28530/   164E6 :                     
   28531/   164E6 :                     ; ===========================================================================
   28532/   164E6 :                     ; ---------------------------------------------------------------------------
   28533/   164E6 :                     ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
   28534/   164E6 :                     ; ---------------------------------------------------------------------------
   28535/   164E6 :                     
   28536/   164E6 :                     Obj6F:					; XREF: Obj_Index
   28537/   164E6 : 7000                		moveq	#0,d0
   28538/   164E8 : 1028 0024           		move.b	$24(a0),d0
   28539/   164EC : 323B 0050           		move.w	Obj6F_Index(pc,d0.w),d1
   28540/   164F0 : 4EBB 104C           		jsr	Obj6F_Index(pc,d1.w)
   28541/   164F4 : 3028 0030           		move.w	$30(a0),d0
   28542/   164F8 : 0240 FF80           		andi.w	#$FF80,d0
   28543/   164FC : 3238 F700           		move.w	($FFFFF700).w,d1
   28544/   16500 : 0441 0080           		subi.w	#$80,d1
   28545/   16504 : 0241 FF80           		andi.w	#$FF80,d1
   28546/   16508 : 9041                		sub.w	d1,d0
   28547/   1650A : 0C40 0280           		cmpi.w	#$280,d0
   28548/   1650E : 6206                		bhi.s	loc_1629A
   28549/   16510 :                     
   28550/   16510 :                     Obj6F_Display:
   28551/   16510 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   28552/   16516 :                     ; ===========================================================================
   28553/   16516 :                     
   28554/   16516 :                     loc_1629A:
   28555/   16516 : 0C38 0002 FE11      		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
   28556/   1651C : 6606                		bne.s	Obj6F_Act1or2	; if not, branch
   28557/   1651E : 0C40 FF80           		cmpi.w	#-$80,d0
   28558/   16522 : 64EC                		bcc.s	Obj6F_Display
   28559/   16524 :                     
   28560/   16524 :                     Obj6F_Act1or2:
   28561/   16524 : 1028 002F           		move.b	$2F(a0),d0
   28562/   16528 : 6A0E                		bpl.s	Obj6F_Delete
   28563/   1652A : 0240 007F           		andi.w	#$7F,d0
   28564/   1652E : 45F8 F7C1           		lea	($FFFFF7C1).w,a2
   28565/   16532 : 08B2 0000 0000      		bclr	#0,(a2,d0.w)
   28566/   16538 :                     
   28567/   16538 :                     Obj6F_Delete:
   28568/   16538 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   28569/   1653E :                     ; ===========================================================================
   28570/   1653E : 0004                Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
   28571/   16540 : 0116                		dc.w loc_163D8-Obj6F_Index
   28572/   16542 :                     ; ===========================================================================
   28573/   16542 :                     
   28574/   16542 :                     Obj6F_Main:				; XREF: Obj6F_Index
   28575/   16542 : 1028 0028           		move.b	$28(a0),d0
   28576/   16546 : 6B00 00B4           		bmi.w	loc_16380
   28577/   1654A : 5428 0024           		addq.b	#2,$24(a0)
   28578/   1654E : 217C 0001 5BB6 0004 		move.l	#Map_obj69a,4(a0)
   28579/   16556 : 317C 04DF 0002      		move.w	#$4DF,2(a0)
   28580/   1655C : 117C 0010 0019      		move.b	#$10,$19(a0)
   28581/   16562 : 0028 0004 0001      		ori.b	#4,1(a0)
   28582/   16568 : 117C 0004 0018      		move.b	#4,$18(a0)
   28583/   1656E : 7000                		moveq	#0,d0
   28584/   16570 : 1028 0028           		move.b	$28(a0),d0
   28585/   16574 : 3200                		move.w	d0,d1
   28586/   16576 : E648                		lsr.w	#3,d0
   28587/   16578 : 0240 001E           		andi.w	#$1E,d0
   28588/   1657C : 45FA 01A4           		lea	off_164A6(pc),a2
   28589/   16580 : D4F2 0000           		adda.w	(a2,d0.w),a2
   28590/   16584 : 315A 0038           		move.w	(a2)+,$38(a0)
   28591/   16588 : 315A 0030           		move.w	(a2)+,$30(a0)
   28592/   1658C : 214A 003C           		move.l	a2,$3C(a0)
   28593/   16590 : 0241 000F           		andi.w	#$F,d1
   28594/   16594 : E549                		lsl.w	#2,d1
   28595/   16596 : 1141 0038           		move.b	d1,$38(a0)
   28596/   1659A : 117C 0004 003A      		move.b	#4,$3A(a0)
   28597/   165A0 : 4A38 F7C0           		tst.b	($FFFFF7C0).w
   28598/   165A4 : 672C                		beq.s	loc_16356
   28599/   165A6 : 117C 0001 003B      		move.b	#1,$3B(a0)
   28600/   165AC : 4428 003A           		neg.b	$3A(a0)
   28601/   165B0 : 7200                		moveq	#0,d1
   28602/   165B2 : 1228 0038           		move.b	$38(a0),d1
   28603/   165B6 : D228 003A           		add.b	$3A(a0),d1
   28604/   165BA : B228 0039           		cmp.b	$39(a0),d1
   28605/   165BE : 650E                		bcs.s	loc_16352
   28606/   165C0 : 1001                		move.b	d1,d0
   28607/   165C2 : 7200                		moveq	#0,d1
   28608/   165C4 : 4A00                		tst.b	d0
   28609/   165C6 : 6A06                		bpl.s	loc_16352
   28610/   165C8 : 1228 0039           		move.b	$39(a0),d1
   28611/   165CC : 5901                		subq.b	#4,d1
   28612/   165CE :                     
   28613/   165CE :                     loc_16352:
   28614/   165CE : 1141 0038           		move.b	d1,$38(a0)
   28615/   165D2 :                     
   28616/   165D2 :                     loc_16356:
   28617/   165D2 : 3172 1000 0034      		move.w	(a2,d1.w),$34(a0)
   28618/   165D8 : 3172 1002 0036      		move.w	2(a2,d1.w),$36(a0)
   28619/   165DE : 4A41                		tst.w	d1
   28620/   165E0 : 6606                		bne.s	loc_1636C
   28621/   165E2 : 117C 0001 001C      		move.b	#1,$1C(a0)
   28622/   165E8 :                     
   28623/   165E8 :                     loc_1636C:
   28624/   165E8 : 0C41 0008           		cmpi.w	#8,d1
   28625/   165EC : 6606                		bne.s	loc_16378
   28626/   165EE : 117C 0000 001C      		move.b	#0,$1C(a0)
   28627/   165F4 :                     
   28628/   165F4 :                     loc_16378:
   28629/   165F4 : 6100 C08A           		bsr.w	Obj63_ChangeDir
   28630/   165F8 : 6000 005A           		bra.w	loc_163D8
   28631/   165FC :                     ; ===========================================================================
   28632/   165FC :                     
   28633/   165FC :                     loc_16380:				; XREF: Obj6F_Main
   28634/   165FC : 1140 002F           		move.b	d0,$2F(a0)
   28635/   16600 : 0240 007F           		andi.w	#$7F,d0
   28636/   16604 : 45F8 F7C1           		lea	($FFFFF7C1).w,a2
   28637/   16608 : 08F2 0000 0000      		bset	#0,(a2,d0.w)
   28638/   1660E : 6706                		beq.s	loc_1639A
   28639/   16610 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   28640/   16616 :                     ; ===========================================================================
   28641/   16616 :                     
   28642/   16616 :                     loc_1639A:
   28643/   16616 : D040                		add.w	d0,d0
   28644/   16618 : 0240 001E           		andi.w	#$1E,d0
   28645/   1661C : 0640 0080           		addi.w	#$80,d0
   28646/   16620 : 45F9 0006 BE70      		lea	(ObjPos_Index).l,a2
   28647/   16626 : D4F2 0000           		adda.w	(a2,d0.w),a2
   28648/   1662A : 321A                		move.w	(a2)+,d1
   28649/   1662C : 2248                		movea.l	a0,a1
   28650/   1662E : 6008                		bra.s	Obj6F_LoadPform
   28651/   16630 :                     ; ===========================================================================
   28652/   16630 :                     
   28653/   16630 :                     Obj6F_Loop:
   28654/   16630 : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   28655/   16636 : 6614                		bne.s	loc_163D0
   28656/   16638 :                     
   28657/   16638 :                     Obj6F_LoadPform:			; XREF: loc_1639A
   28658/   16638 : (MACRO)             		_move.b	#$6F,0(a1)
   28658/   16638 :  (MACRO-2)                          insn2op move.b, #$6F,0(a1)
   28658/   16638 : 137C 006F 0001                              !move.b   #$6F,1+0(a1)
   28658/   1663D :                                             !org    *-1
   28658/   1663D : 00                                          !dc.b   0
   28659/   1663E : 335A 0008           		move.w	(a2)+,8(a1)
   28660/   16642 : 335A 000C           		move.w	(a2)+,$C(a1)
   28661/   16646 : 301A                		move.w	(a2)+,d0
   28662/   16648 : 1340 0028           		move.b	d0,$28(a1)
   28663/   1664C :                     
   28664/   1664C :                     loc_163D0:
   28665/   1664C : 51C9 FFE2           		dbf	d1,Obj6F_Loop
   28666/   16650 :                     
   28667/   16650 : 588F                		addq.l	#4,sp
   28668/   16652 : 4E75                		rts	
   28669/   16654 :                     ; ===========================================================================
   28670/   16654 :                     
   28671/   16654 :                     loc_163D8:				; XREF: Obj6F_Index
   28672/   16654 : 43F9 0001 6706      		lea	(Ani_obj6F).l,a1
   28673/   1665A : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   28674/   16660 : 4A28 001A           		tst.b	$1A(a0)
   28675/   16664 : 661A                		bne.s	loc_16404
   28676/   16666 : 3F28 0008           		move.w	8(a0),-(sp)
   28677/   1666A : 6100 0034           		bsr.w	loc_16424
   28678/   1666E : 323C 001B           		move.w	#$1B,d1
   28679/   16672 : 343C 0007           		move.w	#7,d2
   28680/   16676 : 3602                		move.w	d2,d3
   28681/   16678 : 5243                		addq.w	#1,d3
   28682/   1667A : 381F                		move.w	(sp)+,d4
   28683/   1667C : 6000 9468           		bra.w	SolidObject
   28684/   16680 :                     ; ===========================================================================
   28685/   16680 :                     
   28686/   16680 :                     loc_16404:
   28687/   16680 : 0828 0003 0022      		btst	#3,$22(a0)
   28688/   16686 : 6714                		beq.s	loc_16420
   28689/   16688 : 43F8 D000           		lea	($FFFFD000).w,a1
   28690/   1668C : 08A9 0003 0022      		bclr	#3,$22(a1)
   28691/   16692 : 08A8 0003 0022      		bclr	#3,$22(a0)
   28692/   16698 : 4228 0025           		clr.b	$25(a0)
   28693/   1669C :                     
   28694/   1669C :                     loc_16420:
   28695/   1669C : 6000 0002           		bra.w	*+4
   28696/   166A0 :                     
   28697/   166A0 :                     loc_16424:
   28698/   166A0 : 3028 0008           		move.w	8(a0),d0
   28699/   166A4 : B068 0034           		cmp.w	$34(a0),d0
   28700/   166A8 : 6656                		bne.s	loc_16484
   28701/   166AA : 3028 000C           		move.w	$C(a0),d0
   28702/   166AE : B068 0036           		cmp.w	$36(a0),d0
   28703/   166B2 : 664C                		bne.s	loc_16484
   28704/   166B4 : 7200                		moveq	#0,d1
   28705/   166B6 : 1228 0038           		move.b	$38(a0),d1
   28706/   166BA : D228 003A           		add.b	$3A(a0),d1
   28707/   166BE : B228 0039           		cmp.b	$39(a0),d1
   28708/   166C2 : 650E                		bcs.s	loc_16456
   28709/   166C4 : 1001                		move.b	d1,d0
   28710/   166C6 : 7200                		moveq	#0,d1
   28711/   166C8 : 4A00                		tst.b	d0
   28712/   166CA : 6A06                		bpl.s	loc_16456
   28713/   166CC : 1228 0039           		move.b	$39(a0),d1
   28714/   166D0 : 5901                		subq.b	#4,d1
   28715/   166D2 :                     
   28716/   166D2 :                     loc_16456:
   28717/   166D2 : 1141 0038           		move.b	d1,$38(a0)
   28718/   166D6 : 2268 003C           		movea.l	$3C(a0),a1
   28719/   166DA : 3171 1000 0034      		move.w	(a1,d1.w),$34(a0)
   28720/   166E0 : 3171 1002 0036      		move.w	2(a1,d1.w),$36(a0)
   28721/   166E6 : 4A41                		tst.w	d1
   28722/   166E8 : 6606                		bne.s	loc_16474
   28723/   166EA : 117C 0001 001C      		move.b	#1,$1C(a0)
   28724/   166F0 :                     
   28725/   166F0 :                     loc_16474:
   28726/   166F0 : 0C41 0008           		cmpi.w	#8,d1
   28727/   166F4 : 6606                		bne.s	loc_16480
   28728/   166F6 : 117C 0000 001C      		move.b	#0,$1C(a0)
   28729/   166FC :                     
   28730/   166FC :                     loc_16480:
   28731/   166FC : 6100 BF82           		bsr.w	Obj63_ChangeDir
   28732/   16700 :                     
   28733/   16700 :                     loc_16484:
   28734/   16700 : 4EF9 0000 D6E8      		jmp	(SpeedToPos).l
   28735/   16706 :                     ; ===========================================================================
   28736/   16706 :                     Ani_obj6F:
   28737/   16706 :                     		include	"_anim/obj6F.asm"
(1)    1/   16706 :                     ; ---------------------------------------------------------------------------
(1)    2/   16706 :                     ; Animation script - platform on conveyor belt (SBZ)
(1)    3/   16706 :                     ; ---------------------------------------------------------------------------
(1)    4/   16706 : 0004                		dc.w byte_1648E-Ani_obj6F
(1)    5/   16708 : 0018                		dc.w byte_164A2-Ani_obj6F
(1)    6/   1670A : 0000 0102 0304 4342 byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
                    4140 6162 63        
(1)    7/   16717 : 6423 2221 00FF 00   		dc.b $64, $23, $22, $21, 0, $FF, 0
(1)    8/   1671E : 0F00 FF             byte_164A2:	dc.b $F, 0, $FF
(1)    9/   16721 : (MACRO)             		align 2
(1)    9/   16721 :  (MACRO-2)                  cnop 0,2
(1)    9/   16721 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)    9/   16721 : =$38                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)    9/   16722 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   28738/   16722 :                     
   28739/   16722 : 000C 0020 0034      off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
   28740/   16728 : 0048 005C 0070      		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
   28741/   1672E : 0010 0E80 0E14 0370 word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
                    0EEF 0302 0EEF 0340 
                    0E14 03AE           
   28742/   16742 : 0010 0F80 0F14 02E0 word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
                    0FEF 0272 0FEF 02B0 
                    0F14 031E           
   28743/   16756 : 0010 1080 1014 0270 word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
                    10EF 0202 10EF 0240 
                    1014 02AE           
   28744/   1676A : 0010 0F80 0F14 0570 word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
                    0FEF 0502 0FEF 0540 
                    0F14 05AE           
   28745/   1677E : 0010 1B80 1B14 0670 word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
                    1BEF 0602 1BEF 0640 
                    1B14 06AE           
   28746/   16792 : 0010 1C80 1C14 05E0 word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
                    1CEF 0572 1CEF 05B0 
                    1C14 061E           
   28747/   167A6 :                     ; ===========================================================================
   28748/   167A6 :                     ; ---------------------------------------------------------------------------
   28749/   167A6 :                     ; Object 70 - large girder block (SBZ)
   28750/   167A6 :                     ; ---------------------------------------------------------------------------
   28751/   167A6 :                     
   28752/   167A6 :                     Obj70:					; XREF: Obj_Index
   28753/   167A6 : 7000                		moveq	#0,d0
   28754/   167A8 : 1028 0024           		move.b	$24(a0),d0
   28755/   167AC : 323B 0006           		move.w	Obj70_Index(pc,d0.w),d1
   28756/   167B0 : 4EFB 1002           		jmp	Obj70_Index(pc,d1.w)
   28757/   167B4 :                     ; ===========================================================================
   28758/   167B4 : 0004                Obj70_Index:	dc.w Obj70_Main-Obj70_Index
   28759/   167B6 : 003E                		dc.w Obj70_Action-Obj70_Index
   28760/   167B8 :                     ; ===========================================================================
   28761/   167B8 :                     
   28762/   167B8 :                     Obj70_Main:				; XREF: Obj70_Index
   28763/   167B8 : 5428 0024           		addq.b	#2,$24(a0)
   28764/   167BC : 217C 0001 68A4 0004 		move.l	#Map_obj70,4(a0)
   28765/   167C4 : 317C 42F0 0002      		move.w	#$42F0,2(a0)
   28766/   167CA : 0028 0004 0001      		ori.b	#4,1(a0)
   28767/   167D0 : 117C 0004 0018      		move.b	#4,$18(a0)
   28768/   167D6 : 117C 0060 0019      		move.b	#$60,$19(a0)
   28769/   167DC : 117C 0018 0016      		move.b	#$18,$16(a0)
   28770/   167E2 : 3168 0008 0032      		move.w	8(a0),$32(a0)
   28771/   167E8 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   28772/   167EE : 6100 006A           		bsr.w	Obj70_Move2
   28773/   167F2 :                     
   28774/   167F2 :                     Obj70_Action:				; XREF: Obj70_Index
   28775/   167F2 : 3F28 0008           		move.w	8(a0),-(sp)
   28776/   167F6 : 4A68 003A           		tst.w	$3A(a0)
   28777/   167FA : 6706                		beq.s	Obj70_Move
   28778/   167FC : 5368 003A           		subq.w	#1,$3A(a0)
   28779/   16800 : 6610                		bne.s	Obj70_Solid
   28780/   16802 :                     
   28781/   16802 :                     Obj70_Move:
   28782/   16802 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   28783/   16808 : 5368 0034           		subq.w	#1,$34(a0)	; subtract 1 from movement duration
   28784/   1680C : 6604                		bne.s	Obj70_Solid	; if time remains, branch
   28785/   1680E : 6100 004A           		bsr.w	Obj70_Move2	; if time is zero, branch
   28786/   16812 :                     
   28787/   16812 :                     Obj70_Solid:
   28788/   16812 : 381F                		move.w	(sp)+,d4
   28789/   16814 : 4A28 0001           		tst.b	1(a0)
   28790/   16818 : 6A18                		bpl.s	Obj70_ChkDel
   28791/   1681A : 7200                		moveq	#0,d1
   28792/   1681C : 1228 0019           		move.b	$19(a0),d1
   28793/   16820 : 0641 000B           		addi.w	#$B,d1
   28794/   16824 : 7400                		moveq	#0,d2
   28795/   16826 : 1428 0016           		move.b	$16(a0),d2
   28796/   1682A : 3602                		move.w	d2,d3
   28797/   1682C : 5243                		addq.w	#1,d3
   28798/   1682E : 6100 92B6           		bsr.w	SolidObject
   28799/   16832 :                     
   28800/   16832 :                     Obj70_ChkDel:
   28801/   16832 : 3028 0032           		move.w	$32(a0),d0
   28802/   16836 : 0240 FF80           		andi.w	#$FF80,d0
   28803/   1683A : 3238 F700           		move.w	($FFFFF700).w,d1
   28804/   1683E : 0441 0080           		subi.w	#$80,d1
   28805/   16842 : 0241 FF80           		andi.w	#$FF80,d1
   28806/   16846 : 9041                		sub.w	d1,d0
   28807/   16848 : 0C40 0280           		cmpi.w	#$280,d0
   28808/   1684C : 6206                		bhi.s	Obj70_Delete
   28809/   1684E : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   28810/   16854 :                     ; ===========================================================================
   28811/   16854 :                     
   28812/   16854 :                     Obj70_Delete:
   28813/   16854 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   28814/   1685A :                     ; ===========================================================================
   28815/   1685A :                     
   28816/   1685A :                     Obj70_Move2:				; XREF: Obj70_Main
   28817/   1685A : 1028 0038           		move.b	$38(a0),d0
   28818/   1685E : 0240 0018           		andi.w	#$18,d0
   28819/   16862 : 43F9 0001 6884      		lea	(Obj70_MoveData).l,a1
   28820/   16868 : 43F1 0000           		lea	(a1,d0.w),a1
   28821/   1686C : 3159 0010           		move.w	(a1)+,$10(a0)
   28822/   16870 : 3159 0012           		move.w	(a1)+,$12(a0)
   28823/   16874 : 3159 0034           		move.w	(a1)+,$34(a0)
   28824/   16878 : 5028 0038           		addq.b	#8,$38(a0)	; use next movedata set
   28825/   1687C : 317C 0007 003A      		move.w	#7,$3A(a0)
   28826/   16882 : 4E75                		rts	
   28827/   16884 :                     ; ===========================================================================
   28828/   16884 : 0100 0000 0060 0000 Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
   28829/   1688C : 0000 0100 0030 0000 		dc.w	  0,  $100,   $30,     0
   28830/   16894 : FF00 FFC0 0060 0000 		dc.w  $FF00, $FFC0,   $60,     0
   28831/   1689C : 0000 FF00 0018 0000 		dc.w	  0, $FF00,   $18,     0
   28832/   168A4 :                     ; ---------------------------------------------------------------------------
   28833/   168A4 :                     ; Sprite mappings - large girder block (SBZ)
   28834/   168A4 :                     ; ---------------------------------------------------------------------------
   28835/   168A4 :                     Map_obj70:
   28836/   168A4 :                     		include	"_maps/obj70.asm"
(1)    1/   168A4 :                     ; ---------------------------------------------------------------------------
(1)    2/   168A4 :                     ; Sprite mappings - large girder block (SBZ)
(1)    3/   168A4 :                     ; ---------------------------------------------------------------------------
(1)    4/   168A4 : 0002                		dc.w byte_1662A-Map_obj70
(1)    5/   168A6 : 0C                  byte_1662A:	dc.b $C
(1)    6/   168A7 : E80E 0000 A0        		dc.b $E8, $E, 0, 0, $A0
(1)    7/   168AC : 000E 1000 A0        		dc.b 0,	$E, $10, 0, $A0
(1)    8/   168B1 : E80E 0006 C0        		dc.b $E8, $E, 0, 6, $C0
(1)    9/   168B6 : 000E 1006 C0        		dc.b 0,	$E, $10, 6, $C0
(1)   10/   168BB : E80E 0006 E0        		dc.b $E8, $E, 0, 6, $E0
(1)   11/   168C0 : 000E 1006 E0        		dc.b 0,	$E, $10, 6, $E0
(1)   12/   168C5 : E80E 0006 00        		dc.b $E8, $E, 0, 6, 0
(1)   13/   168CA : 000E 1006 00        		dc.b 0,	$E, $10, 6, 0
(1)   14/   168CF : E80E 0006 20        		dc.b $E8, $E, 0, 6, $20
(1)   15/   168D4 : 000E 1006 20        		dc.b 0,	$E, $10, 6, $20
(1)   16/   168D9 : E80E 0006 40        		dc.b $E8, $E, 0, 6, $40
(1)   17/   168DE : 000E 1006 40        		dc.b 0,	$E, $10, 6, $40
(1)   18/   168E3 : (MACRO)             		align 2
(1)   18/   168E3 :  (MACRO-2)                  cnop 0,2
(1)   18/   168E3 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   18/   168E3 : =$39                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   18/   168E4 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   28837/   168E4 :                     
   28838/   168E4 :                     ; ===========================================================================
   28839/   168E4 :                     ; ---------------------------------------------------------------------------
   28840/   168E4 :                     ; Object 72 - teleporter (SBZ)
   28841/   168E4 :                     ; ---------------------------------------------------------------------------
   28842/   168E4 :                     
   28843/   168E4 :                     Obj72:					; XREF: Obj_Index
   28844/   168E4 : 7000                		moveq	#0,d0
   28845/   168E6 : 1028 0024           		move.b	$24(a0),d0
   28846/   168EA : 323B 002A           		move.w	Obj72_Index(pc,d0.w),d1
   28847/   168EE : 4EBB 1026           		jsr	Obj72_Index(pc,d1.w)
   28848/   168F2 : 3028 0008           		move.w	8(a0),d0
   28849/   168F6 : 0240 FF80           		andi.w	#$FF80,d0
   28850/   168FA : 3238 F700           		move.w	($FFFFF700).w,d1
   28851/   168FE : 0441 0080           		subi.w	#$80,d1
   28852/   16902 : 0241 FF80           		andi.w	#$FF80,d1
   28853/   16906 : 9041                		sub.w	d1,d0
   28854/   16908 : 0C40 0280           		cmpi.w	#$280,d0
   28855/   1690C : 6202                		bhi.s	Obj72_Delete
   28856/   1690E : 4E75                		rts	
   28857/   16910 :                     ; ===========================================================================
   28858/   16910 :                     
   28859/   16910 :                     Obj72_Delete:
   28860/   16910 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   28861/   16916 :                     ; ===========================================================================
   28862/   16916 : 0008                Obj72_Index:	dc.w Obj72_Main-Obj72_Index
   28863/   16918 : 002E                		dc.w loc_166C8-Obj72_Index
   28864/   1691A : 00C4                		dc.w loc_1675E-Obj72_Index
   28865/   1691C : 00FE                		dc.w loc_16798-Obj72_Index
   28866/   1691E :                     ; ===========================================================================
   28867/   1691E :                     
   28868/   1691E :                     Obj72_Main:				; XREF: Obj72_Index
   28869/   1691E : 5428 0024           		addq.b	#2,$24(a0)
   28870/   16922 : 1028 0028           		move.b	$28(a0),d0
   28871/   16926 : D040                		add.w	d0,d0
   28872/   16928 : 0240 001E           		andi.w	#$1E,d0
   28873/   1692C : 45FA 01FA           		lea	Obj72_Data(pc),a2
   28874/   16930 : D4F2 0000           		adda.w	(a2,d0.w),a2
   28875/   16934 : 315A 003A           		move.w	(a2)+,$3A(a0)
   28876/   16938 : 214A 003C           		move.l	a2,$3C(a0)
   28877/   1693C : 315A 0036           		move.w	(a2)+,$36(a0)
   28878/   16940 : 315A 0038           		move.w	(a2)+,$38(a0)
   28879/   16944 :                     
   28880/   16944 :                     loc_166C8:				; XREF: Obj72_Index
   28881/   16944 : 43F8 D000           		lea	($FFFFD000).w,a1
   28882/   16948 : 3029 0008           		move.w	8(a1),d0
   28883/   1694C : 9068 0008           		sub.w	8(a0),d0
   28884/   16950 : 0828 0000 0022      		btst	#0,$22(a0)
   28885/   16956 : 6704                		beq.s	loc_166E0
   28886/   16958 : 0640 000F           		addi.w	#$F,d0
   28887/   1695C :                     
   28888/   1695C :                     loc_166E0:
   28889/   1695C : 0C40 0010           		cmpi.w	#$10,d0
   28890/   16960 : 6476                		bcc.s	locret_1675C
   28891/   16962 : 3229 000C           		move.w	$C(a1),d1
   28892/   16966 : 9268 000C           		sub.w	$C(a0),d1
   28893/   1696A : 0641 0020           		addi.w	#$20,d1
   28894/   1696E : 0C41 0040           		cmpi.w	#$40,d1
   28895/   16972 : 6464                		bcc.s	locret_1675C
   28896/   16974 : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   28897/   16978 : 665E                		bne.s	locret_1675C
   28898/   1697A : 0C28 0007 0028      		cmpi.b	#7,$28(a0)
   28899/   16980 : 6608                		bne.s	loc_1670E
   28900/   16982 : 0C78 0032 FE20      		cmpi.w	#50,($FFFFFE20).w
   28901/   16988 : 654E                		bcs.s	locret_1675C
   28902/   1698A :                     
   28903/   1698A :                     loc_1670E:
   28904/   1698A : 5428 0024           		addq.b	#2,$24(a0)
   28905/   1698E : 11FC 0081 F7C8      		move.b	#$81,($FFFFF7C8).w ; lock controls
   28906/   16994 : 137C 0002 001C      		move.b	#2,$1C(a1)	; use Sonic"s rolling animation
   28907/   1699A : 337C 0800 0014      		move.w	#$800,$14(a1)
   28908/   169A0 : 337C 0000 0010      		move.w	#0,$10(a1)
   28909/   169A6 : 337C 0000 0012      		move.w	#0,$12(a1)
   28910/   169AC : 08A8 0005 0022      		bclr	#5,$22(a0)
   28911/   169B2 : 08A9 0005 0022      		bclr	#5,$22(a1)
   28912/   169B8 : 08E9 0001 0022      		bset	#1,$22(a1)
   28913/   169BE : 3368 0008 0008      		move.w	8(a0),8(a1)
   28914/   169C4 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   28915/   169CA : 4228 0032           		clr.b	$32(a0)
   28916/   169CE : 303C 00BE           		move.w	#$BE,d0
   28917/   169D2 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
   28918/   169D8 :                     
   28919/   169D8 :                     locret_1675C:
   28920/   169D8 : 4E75                		rts	
   28921/   169DA :                     ; ===========================================================================
   28922/   169DA :                     
   28923/   169DA :                     loc_1675E:				; XREF: Obj72_Index
   28924/   169DA : 43F8 D000           		lea	($FFFFD000).w,a1
   28925/   169DE : 1028 0032           		move.b	$32(a0),d0
   28926/   169E2 : 5428 0032           		addq.b	#2,$32(a0)
   28927/   169E6 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   28928/   169EC : EA40                		asr.w	#5,d0
   28929/   169EE : 3428 000C           		move.w	$C(a0),d2
   28930/   169F2 : 9440                		sub.w	d0,d2
   28931/   169F4 : 3342 000C           		move.w	d2,$C(a1)
   28932/   169F8 : 0C28 0080 0032      		cmpi.b	#$80,$32(a0)
   28933/   169FE : 6612                		bne.s	locret_16796
   28934/   16A00 : 6100 0096           		bsr.w	sub_1681C
   28935/   16A04 : 5428 0024           		addq.b	#2,$24(a0)
   28936/   16A08 : 303C 00BC           		move.w	#$BC,d0
   28937/   16A0C : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play teleport sound
   28938/   16A12 :                     
   28939/   16A12 :                     locret_16796:
   28940/   16A12 : 4E75                		rts	
   28941/   16A14 :                     ; ===========================================================================
   28942/   16A14 :                     
   28943/   16A14 :                     loc_16798:				; XREF: Obj72_Index
   28944/   16A14 : 588F                		addq.l	#4,sp
   28945/   16A16 : 43F8 D000           		lea	($FFFFD000).w,a1
   28946/   16A1A : 5328 002E           		subq.b	#1,$2E(a0)
   28947/   16A1E : 6A36                		bpl.s	loc_167DA
   28948/   16A20 : 3368 0036 0008      		move.w	$36(a0),8(a1)
   28949/   16A26 : 3368 0038 000C      		move.w	$38(a0),$C(a1)
   28950/   16A2C : 7200                		moveq	#0,d1
   28951/   16A2E : 1228 003A           		move.b	$3A(a0),d1
   28952/   16A32 : 5801                		addq.b	#4,d1
   28953/   16A34 : B228 003B           		cmp.b	$3B(a0),d1
   28954/   16A38 : 6504                		bcs.s	loc_167C2
   28955/   16A3A : 7200                		moveq	#0,d1
   28956/   16A3C : 603E                		bra.s	loc_16800
   28957/   16A3E :                     ; ===========================================================================
   28958/   16A3E :                     
   28959/   16A3E :                     loc_167C2:
   28960/   16A3E : 1141 003A           		move.b	d1,$3A(a0)
   28961/   16A42 : 2468 003C           		movea.l	$3C(a0),a2
   28962/   16A46 : 3172 1000 0036      		move.w	(a2,d1.w),$36(a0)
   28963/   16A4C : 3172 1002 0038      		move.w	2(a2,d1.w),$38(a0)
   28964/   16A52 : 6000 0044           		bra.w	sub_1681C
   28965/   16A56 :                     ; ===========================================================================
   28966/   16A56 :                     
   28967/   16A56 :                     loc_167DA:
   28968/   16A56 : 2429 0008           		move.l	8(a1),d2
   28969/   16A5A : 2629 000C           		move.l	$C(a1),d3
   28970/   16A5E : 3029 0010           		move.w	$10(a1),d0
   28971/   16A62 : 48C0                		ext.l	d0
   28972/   16A64 : E180                		asl.l	#8,d0
   28973/   16A66 : D480                		add.l	d0,d2
   28974/   16A68 : 3029 0012           		move.w	$12(a1),d0
   28975/   16A6C : 48C0                		ext.l	d0
   28976/   16A6E : E180                		asl.l	#8,d0
   28977/   16A70 : D680                		add.l	d0,d3
   28978/   16A72 : 2342 0008           		move.l	d2,8(a1)
   28979/   16A76 : 2343 000C           		move.l	d3,$C(a1)
   28980/   16A7A : 4E75                		rts	
   28981/   16A7C :                     ; ===========================================================================
   28982/   16A7C :                     
   28983/   16A7C :                     loc_16800:
   28984/   16A7C : 0269 07FF 000C      		andi.w	#$7FF,$C(a1)
   28985/   16A82 : 4228 0024           		clr.b	$24(a0)
   28986/   16A86 : 4238 F7C8           		clr.b	($FFFFF7C8).w
   28987/   16A8A : 337C 0000 0010      		move.w	#0,$10(a1)
   28988/   16A90 : 337C 0200 0012      		move.w	#$200,$12(a1)
   28989/   16A96 : 4E75                		rts	
   28990/   16A98 :                     
   28991/   16A98 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   28992/   16A98 :                     
   28993/   16A98 :                     
   28994/   16A98 :                     sub_1681C:
   28995/   16A98 : 7000                		moveq	#0,d0
   28996/   16A9A : 343C 1000           		move.w	#$1000,d2
   28997/   16A9E : 3028 0036           		move.w	$36(a0),d0
   28998/   16AA2 : 9069 0008           		sub.w	8(a1),d0
   28999/   16AA6 : 6C04                		bge.s	loc_16830
   29000/   16AA8 : 4440                		neg.w	d0
   29001/   16AAA : 4442                		neg.w	d2
   29002/   16AAC :                     
   29003/   16AAC :                     loc_16830:
   29004/   16AAC : 7200                		moveq	#0,d1
   29005/   16AAE : 363C 1000           		move.w	#$1000,d3
   29006/   16AB2 : 3228 0038           		move.w	$38(a0),d1
   29007/   16AB6 : 9269 000C           		sub.w	$C(a1),d1
   29008/   16ABA : 6C04                		bge.s	loc_16844
   29009/   16ABC : 4441                		neg.w	d1
   29010/   16ABE : 4443                		neg.w	d3
   29011/   16AC0 :                     
   29012/   16AC0 :                     loc_16844:
   29013/   16AC0 : B240                		cmp.w	d0,d1
   29014/   16AC2 : 6532                		bcs.s	loc_1687A
   29015/   16AC4 : 7200                		moveq	#0,d1
   29016/   16AC6 : 3228 0038           		move.w	$38(a0),d1
   29017/   16ACA : 9269 000C           		sub.w	$C(a1),d1
   29018/   16ACE : 4841                		swap	d1
   29019/   16AD0 : 83C3                		divs.w	d3,d1
   29020/   16AD2 : 7000                		moveq	#0,d0
   29021/   16AD4 : 3028 0036           		move.w	$36(a0),d0
   29022/   16AD8 : 9069 0008           		sub.w	8(a1),d0
   29023/   16ADC : 6704                		beq.s	loc_16866
   29024/   16ADE : 4840                		swap	d0
   29025/   16AE0 : 81C1                		divs.w	d1,d0
   29026/   16AE2 :                     
   29027/   16AE2 :                     loc_16866:
   29028/   16AE2 : 3340 0010           		move.w	d0,$10(a1)
   29029/   16AE6 : 3343 0012           		move.w	d3,$12(a1)
   29030/   16AEA : 4A41                		tst.w	d1
   29031/   16AEC : 6A02                		bpl.s	loc_16874
   29032/   16AEE : 4441                		neg.w	d1
   29033/   16AF0 :                     
   29034/   16AF0 :                     loc_16874:
   29035/   16AF0 : 3141 002E           		move.w	d1,$2E(a0)
   29036/   16AF4 : 4E75                		rts	
   29037/   16AF6 :                     ; ===========================================================================
   29038/   16AF6 :                     
   29039/   16AF6 :                     loc_1687A:
   29040/   16AF6 : 7000                		moveq	#0,d0
   29041/   16AF8 : 3028 0036           		move.w	$36(a0),d0
   29042/   16AFC : 9069 0008           		sub.w	8(a1),d0
   29043/   16B00 : 4840                		swap	d0
   29044/   16B02 : 81C2                		divs.w	d2,d0
   29045/   16B04 : 7200                		moveq	#0,d1
   29046/   16B06 : 3228 0038           		move.w	$38(a0),d1
   29047/   16B0A : 9269 000C           		sub.w	$C(a1),d1
   29048/   16B0E : 6704                		beq.s	loc_16898
   29049/   16B10 : 4841                		swap	d1
   29050/   16B12 : 83C0                		divs.w	d0,d1
   29051/   16B14 :                     
   29052/   16B14 :                     loc_16898:
   29053/   16B14 : 3341 0012           		move.w	d1,$12(a1)
   29054/   16B18 : 3342 0010           		move.w	d2,$10(a1)
   29055/   16B1C : 4A40                		tst.w	d0
   29056/   16B1E : 6A02                		bpl.s	loc_168A6
   29057/   16B20 : 4440                		neg.w	d0
   29058/   16B22 :                     
   29059/   16B22 :                     loc_168A6:
   29060/   16B22 : 3140 002E           		move.w	d0,$2E(a0)
   29061/   16B26 : 4E75                		rts	
   29062/   16B28 :                     ; End of function sub_1681C
   29063/   16B28 :                     
   29064/   16B28 :                     ; ===========================================================================
   29065/   16B28 : 0010 0016 001C      Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
   29066/   16B2E : 003A 0040 005E      		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
   29067/   16B34 : 0064 0082           		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
   29068/   16B38 : 0004 0794 098C      word_168BC:	dc.w 4,	$794, $98C
   29069/   16B3E : 0004 0094 038C      word_168C2:	dc.w 4,	$94, $38C
   29070/   16B44 : 001C 0794 02E8      word_168C8:	dc.w $1C, $794,	$2E8
   29071/   16B4A : 07A4 02C0 07D0      		dc.w $7A4, $2C0, $7D0
   29072/   16B50 : 02AC 0858 02AC      		dc.w $2AC, $858, $2AC
   29073/   16B56 : 0884 0298 0894      		dc.w $884, $298, $894
   29074/   16B5C : 0270 0894 0190      		dc.w $270, $894, $190
   29075/   16B62 : 0004 0894 0690      word_168E6:	dc.w 4,	$894, $690
   29076/   16B68 : 001C 1194 0470      word_168EC:	dc.w $1C, $1194, $470
   29077/   16B6E : 1184 0498 1158      		dc.w $1184, $498, $1158
   29078/   16B74 : 04AC 0FD0 04AC      		dc.w $4AC, $FD0, $4AC
   29079/   16B7A : 0FA4 04C0 0F94      		dc.w $FA4, $4C0, $F94
   29080/   16B80 : 04E8 0F94 0590      		dc.w $4E8, $F94, $590
   29081/   16B86 : 0004 1294 0490      word_1690A:	dc.w 4,	$1294, $490
   29082/   16B8C : 001C 1594 FFE8      word_16910:	dc.w $1C, $1594, $FFE8
   29083/   16B92 : 1584 FFC0 1560      		dc.w $1584, $FFC0, $1560
   29084/   16B98 : FFAC 14D0 FFAC      		dc.w $FFAC, $14D0, $FFAC
   29085/   16B9E : 14A4 FF98 1494      		dc.w $14A4, $FF98, $1494
   29086/   16BA4 : FF70 1494 FD90      		dc.w $FF70, $1494, $FD90
   29087/   16BAA : 0004 0894 0090      word_1692E:	dc.w 4,	$894, $90
   29088/   16BB0 :                     ; ===========================================================================
   29089/   16BB0 :                     ; ---------------------------------------------------------------------------
   29090/   16BB0 :                     ; Object 78 - Caterkiller enemy	(MZ, SBZ)
   29091/   16BB0 :                     ; ---------------------------------------------------------------------------
   29092/   16BB0 :                     
   29093/   16BB0 :                     Obj78:					; XREF: Obj_Index
   29094/   16BB0 : 7000                		moveq	#0,d0
   29095/   16BB2 : 1028 0024           		move.b	$24(a0),d0
   29096/   16BB6 : 323B 0006           		move.w	Obj78_Index(pc,d0.w),d1
   29097/   16BBA : 4EFB 1002           		jmp	Obj78_Index(pc,d1.w)
   29098/   16BBE :                     ; ===========================================================================
   29099/   16BBE : 0010                Obj78_Index:	dc.w Obj78_Main-Obj78_Index
   29100/   16BC0 : 00FE                		dc.w Obj78_Action-Obj78_Index
   29101/   16BC2 : 0288                		dc.w Obj78_BodySeg1-Obj78_Index
   29102/   16BC4 : 0256                		dc.w Obj78_BodySeg2-Obj78_Index
   29103/   16BC6 : 0288                		dc.w Obj78_BodySeg1-Obj78_Index
   29104/   16BC8 : 0182                		dc.w Obj78_Delete-Obj78_Index
   29105/   16BCA : 037E                		dc.w loc_16CC0-Obj78_Index
   29106/   16BCC :                     ; ===========================================================================
   29107/   16BCC :                     
   29108/   16BCC :                     locret_16950:
   29109/   16BCC : 4E75                		rts	
   29110/   16BCE :                     ; ===========================================================================
   29111/   16BCE :                     
   29112/   16BCE :                     Obj78_Main:				; XREF: Obj78_Index
   29113/   16BCE : 117C 0007 0016      		move.b	#7,$16(a0)
   29114/   16BD4 : 117C 0008 0017      		move.b	#8,$17(a0)
   29115/   16BDA : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   29116/   16BE0 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   29117/   16BE6 : 4A41                		tst.w	d1
   29118/   16BE8 : 6AE2                		bpl.s	locret_16950
   29119/   16BEA : D368 000C           		add.w	d1,$C(a0)
   29120/   16BEE : 4268 0012           		clr.w	$12(a0)
   29121/   16BF2 : 5428 0024           		addq.b	#2,$24(a0)
   29122/   16BF6 : 217C 0001 6FEA 0004 		move.l	#Map_obj78,4(a0)
   29123/   16BFE : 317C 22B0 0002      		move.w	#$22B0,2(a0)
   29124/   16C04 : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
   29125/   16C0A : 6706                		beq.s	loc_16996
   29126/   16C0C : 317C 24FF 0002      		move.w	#$24FF,2(a0)	; MZ specific code
   29127/   16C12 :                     
   29128/   16C12 :                     loc_16996:
   29129/   16C12 : 0228 0003 0001      		andi.b	#3,1(a0)
   29130/   16C18 : 0028 0004 0001      		ori.b	#4,1(a0)
   29131/   16C1E : 1168 0001 0022      		move.b	1(a0),$22(a0)
   29132/   16C24 : 117C 0004 0018      		move.b	#4,$18(a0)
   29133/   16C2A : 117C 0008 0019      		move.b	#8,$19(a0)
   29134/   16C30 : 117C 000B 0020      		move.b	#$B,$20(a0)
   29135/   16C36 : 3428 0008           		move.w	8(a0),d2
   29136/   16C3A : 7A0C                		moveq	#$C,d5
   29137/   16C3C : 0828 0000 0022      		btst	#0,$22(a0)
   29138/   16C42 : 6702                		beq.s	loc_169CA
   29139/   16C44 : 4445                		neg.w	d5
   29140/   16C46 :                     
   29141/   16C46 :                     loc_169CA:
   29142/   16C46 : 1C3C 0004           		move.b	#4,d6
   29143/   16C4A : 7600                		moveq	#0,d3
   29144/   16C4C : 7804                		moveq	#4,d4
   29145/   16C4E : 2448                		movea.l	a0,a2
   29146/   16C50 : 7202                		moveq	#2,d1
   29147/   16C52 :                     
   29148/   16C52 :                     Obj78_LoadBody:
   29149/   16C52 : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   29150/   16C58 : 6654                		bne.s	Obj78_QuitLoad
   29151/   16C5A : (MACRO)             		_move.b	#$78,0(a1)	; load body segment object
   29151/   16C5A :  (MACRO-2)                          insn2op move.b, #$78,0(a1)
   29151/   16C5A : 137C 0078 0001                              !move.b   #$78,1+0(a1)
   29151/   16C5F :                                             !org    *-1
   29151/   16C5F : 00                                          !dc.b   0
   29152/   16C60 : 1346 0024           		move.b	d6,$24(a1)
   29153/   16C64 : 5406                		addq.b	#2,d6
   29154/   16C66 : 2368 0004 0004      		move.l	4(a0),4(a1)
   29155/   16C6C : 3368 0002 0002      		move.w	2(a0),2(a1)
   29156/   16C72 : 137C 0005 0018      		move.b	#5,$18(a1)
   29157/   16C78 : 137C 0008 0019      		move.b	#8,$19(a1)
   29158/   16C7E : 137C 00CB 0020      		move.b	#$CB,$20(a1)
   29159/   16C84 : D445                		add.w	d5,d2
   29160/   16C86 : 3342 0008           		move.w	d2,8(a1)
   29161/   16C8A : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   29162/   16C90 : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   29163/   16C96 : 1368 0022 0001      		move.b	$22(a0),1(a1)
   29164/   16C9C : 137C 0008 001A      		move.b	#8,$1A(a1)
   29165/   16CA2 : 234A 003C           		move.l	a2,$3C(a1)
   29166/   16CA6 : 1344 003C           		move.b	d4,$3C(a1)
   29167/   16CAA : 5804                		addq.b	#4,d4
   29168/   16CAC : 2449                		movea.l	a1,a2
   29169/   16CAE :                     
   29170/   16CAE :                     Obj78_QuitLoad:
   29171/   16CAE : 51C9 FFA2           		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
   29172/   16CB2 :                     
   29173/   16CB2 : 117C 0007 002A      		move.b	#7,$2A(a0)
   29174/   16CB8 : 4228 003C           		clr.b	$3C(a0)
   29175/   16CBC :                     
   29176/   16CBC :                     Obj78_Action:				; XREF: Obj78_Index
   29177/   16CBC : 4A28 0022           		tst.b	$22(a0)
   29178/   16CC0 : 6B00 0250           		bmi.w	loc_16C96
   29179/   16CC4 : 7000                		moveq	#0,d0
   29180/   16CC6 : 1028 0025           		move.b	$25(a0),d0
   29181/   16CCA : 323B 007A           		move.w	Obj78_Index2(pc,d0.w),d1
   29182/   16CCE : 4EBB 1076           		jsr	Obj78_Index2(pc,d1.w)
   29183/   16CD2 : 1228 002B           		move.b	$2B(a0),d1
   29184/   16CD6 : 6A2A                		bpl.s	Obj78_Display
   29185/   16CD8 : 43F9 0001 6F6A      		lea	(Ani_obj78).l,a1
   29186/   16CDE : 1028 0026           		move.b	$26(a0),d0
   29187/   16CE2 : 0240 007F           		andi.w	#$7F,d0
   29188/   16CE6 : 5828 0026           		addq.b	#4,$26(a0)
   29189/   16CEA : 1031 0000           		move.b	(a1,d0.w),d0
   29190/   16CEE : 6A08                		bpl.s	Obj78_AniHead
   29191/   16CF0 : 08A8 0007 002B      		bclr	#7,$2B(a0)
   29192/   16CF6 : 600A                		bra.s	Obj78_Display
   29193/   16CF8 :                     ; ===========================================================================
   29194/   16CF8 :                     
   29195/   16CF8 :                     Obj78_AniHead:
   29196/   16CF8 : 0201 0010           		andi.b	#$10,d1
   29197/   16CFC : D001                		add.b	d1,d0
   29198/   16CFE : 1140 001A           		move.b	d0,$1A(a0)
   29199/   16D02 :                     
   29200/   16D02 :                     Obj78_Display:
   29201/   16D02 : 3028 0008           		move.w	8(a0),d0
   29202/   16D06 : 0240 FF80           		andi.w	#$FF80,d0
   29203/   16D0A : 3238 F700           		move.w	($FFFFF700).w,d1
   29204/   16D0E : 0441 0080           		subi.w	#$80,d1
   29205/   16D12 : 0241 FF80           		andi.w	#$FF80,d1
   29206/   16D16 : 9041                		sub.w	d1,d0
   29207/   16D18 : 0C40 0280           		cmpi.w	#$280,d0
   29208/   16D1C : 6200 0008           		bhi.w	Obj78_ChkGone
   29209/   16D20 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   29210/   16D26 :                     ; ===========================================================================
   29211/   16D26 :                     
   29212/   16D26 :                     Obj78_ChkGone:
   29213/   16D26 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   29214/   16D2A : 7000                		moveq	#0,d0
   29215/   16D2C : 1028 0023           		move.b	$23(a0),d0
   29216/   16D30 : 6706                		beq.s	loc_16ABC
   29217/   16D32 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   29218/   16D38 :                     
   29219/   16D38 :                     loc_16ABC:
   29220/   16D38 : 117C 000A 0024      		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
   29221/   16D3E : 4E75                		rts	
   29222/   16D40 :                     ; ===========================================================================
   29223/   16D40 :                     
   29224/   16D40 :                     Obj78_Delete:				; XREF: Obj78_Index
   29225/   16D40 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   29226/   16D46 :                     ; ===========================================================================
   29227/   16D46 : 0004                Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
   29228/   16D48 : 0038                		dc.w loc_16B02-Obj78_Index2
   29229/   16D4A :                     ; ===========================================================================
   29230/   16D4A :                     
   29231/   16D4A :                     Obj78_Move:				; XREF: Obj78_Index2
   29232/   16D4A : 5328 002A           		subq.b	#1,$2A(a0)
   29233/   16D4E : 6B02                		bmi.s	Obj78_Move2
   29234/   16D50 : 4E75                		rts	
   29235/   16D52 :                     ; ===========================================================================
   29236/   16D52 :                     
   29237/   16D52 :                     Obj78_Move2:
   29238/   16D52 : 5428 0025           		addq.b	#2,$25(a0)
   29239/   16D56 : 117C 0010 002A      		move.b	#$10,$2A(a0)
   29240/   16D5C : 317C FF40 0010      		move.w	#-$C0,$10(a0)
   29241/   16D62 : 317C 0040 0014      		move.w	#$40,$14(a0)
   29242/   16D68 : 0868 0004 002B      		bchg	#4,$2B(a0)
   29243/   16D6E : 6608                		bne.s	loc_16AFC
   29244/   16D70 : 4268 0010           		clr.w	$10(a0)
   29245/   16D74 : 4468 0014           		neg.w	$14(a0)
   29246/   16D78 :                     
   29247/   16D78 :                     loc_16AFC:
   29248/   16D78 : 08E8 0007 002B      		bset	#7,$2B(a0)
   29249/   16D7E :                     
   29250/   16D7E :                     loc_16B02:				; XREF: Obj78_Index2
   29251/   16D7E : 5328 002A           		subq.b	#1,$2A(a0)
   29252/   16D82 : 6B56                		bmi.s	loc_16B5E
   29253/   16D84 : 2F28 0008           		move.l	8(a0),-(sp)
   29254/   16D88 : 2428 0008           		move.l	8(a0),d2
   29255/   16D8C : 3028 0010           		move.w	$10(a0),d0
   29256/   16D90 : 0828 0000 0022      		btst	#0,$22(a0)
   29257/   16D96 : 6702                		beq.s	loc_16B1E
   29258/   16D98 : 4440                		neg.w	d0
   29259/   16D9A :                     
   29260/   16D9A :                     loc_16B1E:
   29261/   16D9A : 48C0                		ext.l	d0
   29262/   16D9C : E180                		asl.l	#8,d0
   29263/   16D9E : D480                		add.l	d0,d2
   29264/   16DA0 : 2142 0008           		move.l	d2,8(a0)
   29265/   16DA4 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   29266/   16DAA : 241F                		move.l	(sp)+,d2
   29267/   16DAC : 0C41 FFF8           		cmpi.w	#-8,d1
   29268/   16DB0 : 6D3A                		blt.s	loc_16B70
   29269/   16DB2 : 0C41 000C           		cmpi.w	#$C,d1
   29270/   16DB6 : 6C34                		bge.s	loc_16B70
   29271/   16DB8 : D368 000C           		add.w	d1,$C(a0)
   29272/   16DBC : 4842                		swap	d2
   29273/   16DBE : B468 0008           		cmp.w	8(a0),d2
   29274/   16DC2 : 6714                		beq.s	locret_16B5C
   29275/   16DC4 : 7000                		moveq	#0,d0
   29276/   16DC6 : 1028 003C           		move.b	$3C(a0),d0
   29277/   16DCA : 5228 003C           		addq.b	#1,$3C(a0)
   29278/   16DCE : 0228 000F 003C      		andi.b	#$F,$3C(a0)
   29279/   16DD4 : 1181 002C           		move.b	d1,$2C(a0,d0.w)
   29280/   16DD8 :                     
   29281/   16DD8 :                     locret_16B5C:
   29282/   16DD8 : 4E75                		rts	
   29283/   16DDA :                     ; ===========================================================================
   29284/   16DDA :                     
   29285/   16DDA :                     loc_16B5E:
   29286/   16DDA : 5528 0025           		subq.b	#2,$25(a0)
   29287/   16DDE : 117C 0007 002A      		move.b	#7,$2A(a0)
   29288/   16DE4 : 317C 0000 0010      		move.w	#0,$10(a0)
   29289/   16DEA : 4E75                		rts	
   29290/   16DEC :                     ; ===========================================================================
   29291/   16DEC :                     
   29292/   16DEC :                     loc_16B70:
   29293/   16DEC : 2142 0008           		move.l	d2,8(a0)
   29294/   16DF0 : 0868 0000 0022      		bchg	#0,$22(a0)
   29295/   16DF6 : 1168 0022 0001      		move.b	$22(a0),1(a0)
   29296/   16DFC : 7000                		moveq	#0,d0
   29297/   16DFE : 1028 003C           		move.b	$3C(a0),d0
   29298/   16E02 : 11BC 0080 002C      		move.b	#$80,$2C(a0,d0.w)
   29299/   16E08 : 5228 003C           		addq.b	#1,$3C(a0)
   29300/   16E0C : 0228 000F 003C      		andi.b	#$F,$3C(a0)
   29301/   16E12 : 4E75                		rts	
   29302/   16E14 :                     ; ===========================================================================
   29303/   16E14 :                     
   29304/   16E14 :                     Obj78_BodySeg2:				; XREF: Obj78_Index
   29305/   16E14 : 2268 003C           		movea.l	$3C(a0),a1
   29306/   16E18 : 1169 002B 002B      		move.b	$2B(a1),$2B(a0)
   29307/   16E1E : 6A26                		bpl.s	Obj78_BodySeg1
   29308/   16E20 : 43F9 0001 6F6A      		lea	(Ani_obj78).l,a1
   29309/   16E26 : 1028 0026           		move.b	$26(a0),d0
   29310/   16E2A : 0240 007F           		andi.w	#$7F,d0
   29311/   16E2E : 5828 0026           		addq.b	#4,$26(a0)
   29312/   16E32 : 4A31 0004           		tst.b	4(a1,d0.w)
   29313/   16E36 : 6A04                		bpl.s	Obj78_AniBody
   29314/   16E38 : 5828 0026           		addq.b	#4,$26(a0)
   29315/   16E3C :                     
   29316/   16E3C :                     Obj78_AniBody:
   29317/   16E3C : 1031 0000           		move.b	(a1,d0.w),d0
   29318/   16E40 : 5000                		addq.b	#8,d0
   29319/   16E42 : 1140 001A           		move.b	d0,$1A(a0)
   29320/   16E46 :                     
   29321/   16E46 :                     Obj78_BodySeg1:				; XREF: Obj78_Index
   29322/   16E46 : 2268 003C           		movea.l	$3C(a0),a1
   29323/   16E4A : 4A28 0022           		tst.b	$22(a0)
   29324/   16E4E : 6B00 00BC           		bmi.w	loc_16C90
   29325/   16E52 : 1169 002B 002B      		move.b	$2B(a1),$2B(a0)
   29326/   16E58 : 1169 0025 0025      		move.b	$25(a1),$25(a0)
   29327/   16E5E : 6700 0080           		beq.w	loc_16C64
   29328/   16E62 : 3169 0014 0014      		move.w	$14(a1),$14(a0)
   29329/   16E68 : 3029 0010           		move.w	$10(a1),d0
   29330/   16E6C : D069 0014           		add.w	$14(a1),d0
   29331/   16E70 : 3140 0010           		move.w	d0,$10(a0)
   29332/   16E74 : 2428 0008           		move.l	8(a0),d2
   29333/   16E78 : 2602                		move.l	d2,d3
   29334/   16E7A : 3028 0010           		move.w	$10(a0),d0
   29335/   16E7E : 0828 0000 0022      		btst	#0,$22(a0)
   29336/   16E84 : 6702                		beq.s	loc_16C0C
   29337/   16E86 : 4440                		neg.w	d0
   29338/   16E88 :                     
   29339/   16E88 :                     loc_16C0C:
   29340/   16E88 : 48C0                		ext.l	d0
   29341/   16E8A : E180                		asl.l	#8,d0
   29342/   16E8C : D480                		add.l	d0,d2
   29343/   16E8E : 2142 0008           		move.l	d2,8(a0)
   29344/   16E92 : 4843                		swap	d3
   29345/   16E94 : B668 0008           		cmp.w	8(a0),d3
   29346/   16E98 : 6746                		beq.s	loc_16C64
   29347/   16E9A : 7000                		moveq	#0,d0
   29348/   16E9C : 1028 003C           		move.b	$3C(a0),d0
   29349/   16EA0 : 1231 002C           		move.b	$2C(a1,d0.w),d1
   29350/   16EA4 : 0C01 0080           		cmpi.b	#-$80,d1
   29351/   16EA8 : 6622                		bne.s	loc_16C50
   29352/   16EAA : 4843                		swap	d3
   29353/   16EAC : 2143 0008           		move.l	d3,8(a0)
   29354/   16EB0 : 1181 002C           		move.b	d1,$2C(a0,d0.w)
   29355/   16EB4 : 0868 0000 0022      		bchg	#0,$22(a0)
   29356/   16EBA : 1168 0022 0001      		move.b	$22(a0),1(a0)
   29357/   16EC0 : 5228 003C           		addq.b	#1,$3C(a0)
   29358/   16EC4 : 0228 000F 003C      		andi.b	#$F,$3C(a0)
   29359/   16ECA : 6014                		bra.s	loc_16C64
   29360/   16ECC :                     ; ===========================================================================
   29361/   16ECC :                     
   29362/   16ECC :                     loc_16C50:
   29363/   16ECC : 4881                		ext.w	d1
   29364/   16ECE : D368 000C           		add.w	d1,$C(a0)
   29365/   16ED2 : 5228 003C           		addq.b	#1,$3C(a0)
   29366/   16ED6 : 0228 000F 003C      		andi.b	#$F,$3C(a0)
   29367/   16EDC : 1181 002C           		move.b	d1,$2C(a0,d0.w)
   29368/   16EE0 :                     
   29369/   16EE0 :                     loc_16C64:
   29370/   16EE0 : 0C29 000C 0024      		cmpi.b	#$C,$24(a1)
   29371/   16EE6 : 6724                		beq.s	loc_16C90
   29372/   16EE8 : (MACRO)             		_cmpi.b	#$27,0(a1)
   29372/   16EE8 :  (MACRO-2)                          insn2op cmpi.b, #$27,0(a1)
   29372/   16EE8 : 0C29 0027 0001                              !cmpi.b   #$27,1+0(a1)
   29372/   16EED :                                             !org    *-1
   29372/   16EED : 00                                          !dc.b   0
   29373/   16EEE : 6708                		beq.s	loc_16C7C
   29374/   16EF0 : 0C29 000A 0024      		cmpi.b	#$A,$24(a1)
   29375/   16EF6 : 6606                		bne.s	loc_16C82
   29376/   16EF8 :                     
   29377/   16EF8 :                     loc_16C7C:
   29378/   16EF8 : 117C 000A 0024      		move.b	#$A,$24(a0)
   29379/   16EFE :                     
   29380/   16EFE :                     loc_16C82:
   29381/   16EFE : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   29382/   16F04 :                     
   29383/   16F04 :                     ; ===========================================================================
   29384/   16F04 : FE00 FE80 0180 0200 Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
   29385/   16F0C :                     ; ===========================================================================
   29386/   16F0C :                     
   29387/   16F0C :                     loc_16C90:
   29388/   16F0C : 08E9 0007 0022      		bset	#7,$22(a1)
   29389/   16F12 :                     
   29390/   16F12 :                     loc_16C96:
   29391/   16F12 : 7000                		moveq	#0,d0
   29392/   16F14 : 1028 0024           		move.b	$24(a0),d0
   29393/   16F18 : 303B 00E8           		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
   29394/   16F1C : 0828 0000 0022      		btst	#0,$22(a0)
   29395/   16F22 : 6702                		beq.s	loc_16CAA
   29396/   16F24 : 4440                		neg.w	d0
   29397/   16F26 :                     
   29398/   16F26 :                     loc_16CAA:
   29399/   16F26 : 3140 0010           		move.w	d0,$10(a0)
   29400/   16F2A : 317C FC00 0012      		move.w	#-$400,$12(a0)
   29401/   16F30 : 117C 000C 0024      		move.b	#$C,$24(a0)
   29402/   16F36 : 0228 00F8 001A      		andi.b	#-8,$1A(a0)
   29403/   16F3C :                     
   29404/   16F3C :                     loc_16CC0:				; XREF: Obj78_Index
   29405/   16F3C : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   29406/   16F42 : 4A68 0012           		tst.w	$12(a0)
   29407/   16F46 : 6B14                		bmi.s	loc_16CE0
   29408/   16F48 : 4EB9 0001 5094      		jsr	(ObjHitFloor).l
   29409/   16F4E : 4A41                		tst.w	d1
   29410/   16F50 : 6A0A                		bpl.s	loc_16CE0
   29411/   16F52 : D368 000C           		add.w	d1,$C(a0)
   29412/   16F56 : 317C FC00 0012      		move.w	#-$400,$12(a0)
   29413/   16F5C :                     
   29414/   16F5C :                     loc_16CE0:
   29415/   16F5C : 4A28 0001           		tst.b	1(a0)
   29416/   16F60 : 6A00 FDC4           		bpl.w	Obj78_ChkGone
   29417/   16F64 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   29418/   16F6A :                     ; ===========================================================================
   29419/   16F6A :                     Ani_obj78:
   29420/   16F6A :                     		include	"_anim/obj78.asm"
(1)    1/   16F6A :                     ; ---------------------------------------------------------------------------
(1)    2/   16F6A :                     ; Animation script - Caterkiller enemy (uses non-standard format)
(1)    3/   16F6A :                     ; ---------------------------------------------------------------------------
(1)    4/   16F6A : 0000 0000 0000 0000 	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
                    0000 0000 0000 0001 
(1)    5/   16F7A : 0101 0101 0101 0202 	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
                    0202 0203 0303 0303 
(1)    6/   16F8A : 0404 0404 0404 0505 	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
                    0505 0506 0606 0606 
(1)    7/   16F9A : 0606 0707 0707 0707 	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
                    0707 0707 FF07 07FF 
(1)    8/   16FAA : 0707 0707 0707 0707 	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
                    0707 0707 0707 0706 
(1)    9/   16FBA : 0606 0606 0606 0505 	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
                    0505 0504 0404 0404 
(1)   10/   16FCA : 0403 0303 0303 0202 	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
                    0202 0201 0101 0101 
(1)   11/   16FDA : 0101 0000 0000 0000 	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
                    0000 0000 FF00 00FF 
(1)   12/   16FEA : (MACRO)             	align 2
(1)   12/   16FEA :  (MACRO-2)                  cnop 0,2
(1)   12/   16FEA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   29421/   16FEA :                     
   29422/   16FEA :                     ; ---------------------------------------------------------------------------
   29423/   16FEA :                     ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
   29424/   16FEA :                     ; ---------------------------------------------------------------------------
   29425/   16FEA :                     Map_obj78:
   29426/   16FEA :                     		include	"_maps/obj78.asm"
(1)    1/   16FEA :                     ; ---------------------------------------------------------------------------
(1)    2/   16FEA :                     ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
(1)    3/   16FEA :                     ; ---------------------------------------------------------------------------
(1)    4/   16FEA : 0030 0036           		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
(1)    5/   16FEE : 003C 0042           		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
(1)    6/   16FF2 : 0048 004E           		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
(1)    7/   16FF6 : 0054 005A           		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
(1)    8/   16FFA : 0060 0066           		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
(1)    9/   16FFE : 006C 0072           		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
(1)   10/   17002 : 0078 007E           		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
(1)   11/   17006 : 0084 008A           		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
(1)   12/   1700A : 0090 0096           		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
(1)   13/   1700E : 009C 00A2           		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
(1)   14/   17012 : 00A8 00AE           		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
(1)   15/   17016 : 00B4 00BA           		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
(1)   16/   1701A : 01                  byte_16D9E:	dc.b 1
(1)   17/   1701B : F206 0000 F8        		dc.b $F2, 6, 0,	0, $F8
(1)   18/   17020 : 01                  byte_16DA4:	dc.b 1
(1)   19/   17021 : F106 0000 F8        		dc.b $F1, 6, 0,	0, $F8
(1)   20/   17026 : 01                  byte_16DAA:	dc.b 1
(1)   21/   17027 : F006 0000 F8        		dc.b $F0, 6, 0,	0, $F8
(1)   22/   1702C : 01                  byte_16DB0:	dc.b 1
(1)   23/   1702D : EF06 0000 F8        		dc.b $EF, 6, 0,	0, $F8
(1)   24/   17032 : 01                  byte_16DB6:	dc.b 1
(1)   25/   17033 : EE06 0000 F8        		dc.b $EE, 6, 0,	0, $F8
(1)   26/   17038 : 01                  byte_16DBC:	dc.b 1
(1)   27/   17039 : ED06 0000 F8        		dc.b $ED, 6, 0,	0, $F8
(1)   28/   1703E : 01                  byte_16DC2:	dc.b 1
(1)   29/   1703F : EC06 0000 F8        		dc.b $EC, 6, 0,	0, $F8
(1)   30/   17044 : 01                  byte_16DC8:	dc.b 1
(1)   31/   17045 : EB06 0000 F8        		dc.b $EB, 6, 0,	0, $F8
(1)   32/   1704A : 01                  byte_16DCE:	dc.b 1
(1)   33/   1704B : F805 000C F8        		dc.b $F8, 5, 0,	$C, $F8
(1)   34/   17050 : 01                  byte_16DD4:	dc.b 1
(1)   35/   17051 : F705 000C F8        		dc.b $F7, 5, 0,	$C, $F8
(1)   36/   17056 : 01                  byte_16DDA:	dc.b 1
(1)   37/   17057 : F605 000C F8        		dc.b $F6, 5, 0,	$C, $F8
(1)   38/   1705C : 01                  byte_16DE0:	dc.b 1
(1)   39/   1705D : F505 000C F8        		dc.b $F5, 5, 0,	$C, $F8
(1)   40/   17062 : 01                  byte_16DE6:	dc.b 1
(1)   41/   17063 : F405 000C F8        		dc.b $F4, 5, 0,	$C, $F8
(1)   42/   17068 : 01                  byte_16DEC:	dc.b 1
(1)   43/   17069 : F305 000C F8        		dc.b $F3, 5, 0,	$C, $F8
(1)   44/   1706E : 01                  byte_16DF2:	dc.b 1
(1)   45/   1706F : F205 000C F8        		dc.b $F2, 5, 0,	$C, $F8
(1)   46/   17074 : 01                  byte_16DF8:	dc.b 1
(1)   47/   17075 : F105 000C F8        		dc.b $F1, 5, 0,	$C, $F8
(1)   48/   1707A : 01                  byte_16DFE:	dc.b 1
(1)   49/   1707B : F206 0006 F8        		dc.b $F2, 6, 0,	6, $F8
(1)   50/   17080 : 01                  byte_16E04:	dc.b 1
(1)   51/   17081 : F106 0006 F8        		dc.b $F1, 6, 0,	6, $F8
(1)   52/   17086 : 01                  byte_16E0A:	dc.b 1
(1)   53/   17087 : F006 0006 F8        		dc.b $F0, 6, 0,	6, $F8
(1)   54/   1708C : 01                  byte_16E10:	dc.b 1
(1)   55/   1708D : EF06 0006 F8        		dc.b $EF, 6, 0,	6, $F8
(1)   56/   17092 : 01                  byte_16E16:	dc.b 1
(1)   57/   17093 : EE06 0006 F8        		dc.b $EE, 6, 0,	6, $F8
(1)   58/   17098 : 01                  byte_16E1C:	dc.b 1
(1)   59/   17099 : ED06 0006 F8        		dc.b $ED, 6, 0,	6, $F8
(1)   60/   1709E : 01                  byte_16E22:	dc.b 1
(1)   61/   1709F : EC06 0006 F8        		dc.b $EC, 6, 0,	6, $F8
(1)   62/   170A4 : 01                  byte_16E28:	dc.b 1
(1)   63/   170A5 : EB06 0006 F8        		dc.b $EB, 6, 0,	6, $F8
(1)   64/   170AA : (MACRO)             		align 2
(1)   64/   170AA :  (MACRO-2)                  cnop 0,2
(1)   64/   170AA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   29427/   170AA :                     
   29428/   170AA :                     ; ===========================================================================
   29429/   170AA :                     ; ---------------------------------------------------------------------------
   29430/   170AA :                     ; Object 79 - lamppost
   29431/   170AA :                     ; ---------------------------------------------------------------------------
   29432/   170AA :                     
   29433/   170AA :                     Obj79:					; XREF: Obj_Index
   29434/   170AA : 7000                		moveq	#0,d0
   29435/   170AC : 1028 0024           		move.b	$24(a0),d0
   29436/   170B0 : 323B 000C           		move.w	Obj79_Index(pc,d0.w),d1
   29437/   170B4 : 4EBB 1008           		jsr	Obj79_Index(pc,d1.w)
   29438/   170B8 : 4EF9 0000 F7BC      		jmp	(MarkObjGone).l
   29439/   170BE :                     ; ===========================================================================
   29440/   170BE : 0008                Obj79_Index:	dc.w Obj79_Main-Obj79_Index
   29441/   170C0 : 006C                		dc.w Obj79_BlueLamp-Obj79_Index
   29442/   170C2 : 0150                		dc.w Obj79_AfterHit-Obj79_Index
   29443/   170C4 : 0152                		dc.w Obj79_Twirl-Obj79_Index
   29444/   170C6 :                     ; ===========================================================================
   29445/   170C6 :                     
   29446/   170C6 :                     Obj79_Main:				; XREF: Obj79_Index
   29447/   170C6 : 5428 0024           		addq.b	#2,$24(a0)
   29448/   170CA : 217C 0001 7374 0004 		move.l	#Map_obj79,4(a0)
   29449/   170D2 : 317C 07A0 0002      		move.w	#$7A0,2(a0)
   29450/   170D8 : 117C 0004 0001      		move.b	#4,1(a0)
   29451/   170DE : 117C 0008 0019      		move.b	#8,$19(a0)
   29452/   170E4 : 117C 0005 0018      		move.b	#5,$18(a0)
   29453/   170EA : 45F8 FC00           		lea	($FFFFFC00).w,a2
   29454/   170EE : 7000                		moveq	#0,d0
   29455/   170F0 : 1028 0023           		move.b	$23(a0),d0
   29456/   170F4 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   29457/   170FA : 0832 0000 0002      		btst	#0,2(a2,d0.w)
   29458/   17100 : 6614                		bne.s	Obj79_RedLamp
   29459/   17102 : 1238 FE30           		move.b	($FFFFFE30).w,d1
   29460/   17106 : 0201 007F           		andi.b	#$7F,d1
   29461/   1710A : 1428 0028           		move.b	$28(a0),d2	; get lamppost number
   29462/   1710E : 0202 007F           		andi.b	#$7F,d2
   29463/   17112 : B202                		cmp.b	d2,d1		; is lamppost number higher than the number hit?
   29464/   17114 : 6514                		bcs.s	Obj79_BlueLamp	; if yes, branch
   29465/   17116 :                     
   29466/   17116 :                     Obj79_RedLamp:
   29467/   17116 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   29468/   1711C : 117C 0004 0024      		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
   29469/   17122 : 117C 0003 001A      		move.b	#3,$1A(a0)	; use red lamppost frame
   29470/   17128 : 4E75                		rts	
   29471/   1712A :                     ; ===========================================================================
   29472/   1712A :                     
   29473/   1712A :                     Obj79_BlueLamp:				; XREF: Obj79_Index
   29474/   1712A : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	being used?
   29475/   1712E : 6600 00DC           		bne.w	locret_16F90	; if yes, branch
   29476/   17132 : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   29477/   17136 : 6B00 00D4           		bmi.w	locret_16F90
   29478/   1713A : 1238 FE30           		move.b	($FFFFFE30).w,d1
   29479/   1713E : 0201 007F           		andi.b	#$7F,d1
   29480/   17142 : 1428 0028           		move.b	$28(a0),d2
   29481/   17146 : 0202 007F           		andi.b	#$7F,d2
   29482/   1714A : B202                		cmp.b	d2,d1
   29483/   1714C : 6520                		bcs.s	Obj79_HitLamp
   29484/   1714E : 45F8 FC00           		lea	($FFFFFC00).w,a2
   29485/   17152 : 7000                		moveq	#0,d0
   29486/   17154 : 1028 0023           		move.b	$23(a0),d0
   29487/   17158 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   29488/   1715E : 117C 0004 0024      		move.b	#4,$24(a0)
   29489/   17164 : 117C 0003 001A      		move.b	#3,$1A(a0)
   29490/   1716A : 6000 00A0           		bra.w	locret_16F90
   29491/   1716E :                     ; ===========================================================================
   29492/   1716E :                     
   29493/   1716E :                     Obj79_HitLamp:
   29494/   1716E : 3038 D008           		move.w	($FFFFD008).w,d0
   29495/   17172 : 9068 0008           		sub.w	8(a0),d0
   29496/   17176 : 5040                		addq.w	#8,d0
   29497/   17178 : 0C40 0010           		cmpi.w	#$10,d0
   29498/   1717C : 6400 008E           		bcc.w	locret_16F90
   29499/   17180 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   29500/   17184 : 9068 000C           		sub.w	$C(a0),d0
   29501/   17188 : 0640 0040           		addi.w	#$40,d0
   29502/   1718C : 0C40 0068           		cmpi.w	#$68,d0
   29503/   17190 : 647A                		bcc.s	locret_16F90
   29504/   17192 : 303C 00A1           		move.w	#$A1,d0
   29505/   17196 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play lamppost sound
   29506/   1719C : 5428 0024           		addq.b	#2,$24(a0)
   29507/   171A0 : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   29508/   171A6 : 664A                		bne.s	loc_16F76
   29509/   171A8 : (MACRO)             		_move.b	#$79,0(a1)	; load twirling	lamp object
   29509/   171A8 :  (MACRO-2)                          insn2op move.b, #$79,0(a1)
   29509/   171A8 : 137C 0079 0001                              !move.b   #$79,1+0(a1)
   29509/   171AD :                                             !org    *-1
   29509/   171AD : 00                                          !dc.b   0
   29510/   171AE : 137C 0006 0024      		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
   29511/   171B4 : 3368 0008 0030      		move.w	8(a0),$30(a1)
   29512/   171BA : 3368 000C 0032      		move.w	$C(a0),$32(a1)
   29513/   171C0 : 0469 0018 0032      		subi.w	#$18,$32(a1)
   29514/   171C6 : 237C 0001 7374 0004 		move.l	#Map_obj79,4(a1)
   29515/   171CE : 337C 07A0 0002      		move.w	#$7A0,2(a1)
   29516/   171D4 : 137C 0004 0001      		move.b	#4,1(a1)
   29517/   171DA : 137C 0008 0019      		move.b	#8,$19(a1)
   29518/   171E0 : 137C 0004 0018      		move.b	#4,$18(a1)
   29519/   171E6 : 137C 0002 001A      		move.b	#2,$1A(a1)
   29520/   171EC : 337C 0020 0036      		move.w	#$20,$36(a1)
   29521/   171F2 :                     
   29522/   171F2 :                     loc_16F76:
   29523/   171F2 : 117C 0001 001A      		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
   29524/   171F8 : 6100 0054           		bsr.w	Obj79_StoreInfo
   29525/   171FC : 45F8 FC00           		lea	($FFFFFC00).w,a2
   29526/   17200 : 7000                		moveq	#0,d0
   29527/   17202 : 1028 0023           		move.b	$23(a0),d0
   29528/   17206 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   29529/   1720C :                     
   29530/   1720C :                     locret_16F90:
   29531/   1720C : 4E75                		rts	
   29532/   1720E :                     ; ===========================================================================
   29533/   1720E :                     
   29534/   1720E :                     Obj79_AfterHit:				; XREF: Obj79_Index
   29535/   1720E : 4E75                		rts	
   29536/   17210 :                     ; ===========================================================================
   29537/   17210 :                     
   29538/   17210 :                     Obj79_Twirl:				; XREF: Obj79_Index
   29539/   17210 : 5368 0036           		subq.w	#1,$36(a0)
   29540/   17214 : 6A06                		bpl.s	loc_16FA0
   29541/   17216 : 117C 0004 0024      		move.b	#4,$24(a0)
   29542/   1721C :                     
   29543/   1721C :                     loc_16FA0:
   29544/   1721C : 1028 0026           		move.b	$26(a0),d0
   29545/   17220 : 0428 0010 0026      		subi.b	#$10,$26(a0)
   29546/   17226 : 0400 0040           		subi.b	#$40,d0
   29547/   1722A : 4EB9 0000 29EA      		jsr	(CalcSine).l
   29548/   17230 : C3FC 0C00           		muls.w	#$C00,d1
   29549/   17234 : 4841                		swap	d1
   29550/   17236 : D268 0030           		add.w	$30(a0),d1
   29551/   1723A : 3141 0008           		move.w	d1,8(a0)
   29552/   1723E : C1FC 0C00           		muls.w	#$C00,d0
   29553/   17242 : 4840                		swap	d0
   29554/   17244 : D068 0032           		add.w	$32(a0),d0
   29555/   17248 : 3140 000C           		move.w	d0,$C(a0)
   29556/   1724C : 4E75                		rts	
   29557/   1724E :                     ; ===========================================================================
   29558/   1724E :                     ; ---------------------------------------------------------------------------
   29559/   1724E :                     ; Subroutine to	store information when you hit a lamppost
   29560/   1724E :                     ; ---------------------------------------------------------------------------
   29561/   1724E :                     
   29562/   1724E :                     Obj79_StoreInfo:			; XREF: Obj79_HitLamp
   29563/   1724E : 11E8 0028 FE30      		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
   29564/   17254 : 11F8 FE30 FE31      		move.b	($FFFFFE30).w,($FFFFFE31).w
   29565/   1725A : 31E8 0008 FE32      		move.w	8(a0),($FFFFFE32).w		; x-position
   29566/   17260 : 31E8 000C FE34      		move.w	$C(a0),($FFFFFE34).w		; y-position
   29567/   17266 : 31F8 FE20 FE36      		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
   29568/   1726C : 11F8 FE1B FE54      		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
   29569/   17272 : 21F8 FE22 FE38      		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
   29570/   17278 : 11F8 F742 FE3C      		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
   29571/   1727E : 31F8 F72E FE3E      		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
   29572/   17284 : 31F8 F700 FE40      		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
   29573/   1728A : 31F8 F704 FE42      		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
   29574/   17290 : 31F8 F708 FE44      		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
   29575/   17296 : 31F8 F70C FE46      		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
   29576/   1729C : 31F8 F710 FE48      		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
   29577/   172A2 : 31F8 F714 FE4A      		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
   29578/   172A8 : 31F8 F718 FE4C      		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
   29579/   172AE : 31F8 F71C FE4E      		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
   29580/   172B4 : 31F8 F648 FE50      		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
   29581/   172BA : 11F8 F64D FE52      		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
   29582/   172C0 : 11F8 F64E FE53      		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
   29583/   172C6 : 4E75                		rts	
   29584/   172C8 :                     
   29585/   172C8 :                     ; ---------------------------------------------------------------------------
   29586/   172C8 :                     ; Subroutine to	load stored info when you start	a level	from a lamppost
   29587/   172C8 :                     ; ---------------------------------------------------------------------------
   29588/   172C8 :                     
   29589/   172C8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   29590/   172C8 :                     
   29591/   172C8 :                     
   29592/   172C8 :                     Obj79_LoadInfo:				; XREF: LevelSizeLoad
   29593/   172C8 : 11F8 FE31 FE30      		move.b	($FFFFFE31).w,($FFFFFE30).w
   29594/   172CE : 31F8 FE32 D008      		move.w	($FFFFFE32).w,($FFFFD008).w
   29595/   172D4 : 31F8 FE34 D00C      		move.w	($FFFFFE34).w,($FFFFD00C).w
   29596/   172DA : 31F8 FE36 FE20      		move.w	($FFFFFE36).w,($FFFFFE20).w
   29597/   172E0 : 11F8 FE54 FE1B      		move.b	($FFFFFE54).w,($FFFFFE1B).w
   29598/   172E6 : 4278 FE20           		clr.w	($FFFFFE20).w
   29599/   172EA : 4238 FE1B           		clr.b	($FFFFFE1B).w
   29600/   172EE : 21F8 FE38 FE22      		move.l	($FFFFFE38).w,($FFFFFE22).w
   29601/   172F4 : 11FC 003B FE25      		move.b	#59,($FFFFFE25).w
   29602/   172FA : 5338 FE24           		subq.b	#1,($FFFFFE24).w
   29603/   172FE : 11F8 FE3C F742      		move.b	($FFFFFE3C).w,($FFFFF742).w
   29604/   17304 : 11F8 FE52 F64D      		move.b	($FFFFFE52).w,($FFFFF64D).w
   29605/   1730A : 31F8 FE3E F72E      		move.w	($FFFFFE3E).w,($FFFFF72E).w
   29606/   17310 : 31F8 FE3E F726      		move.w	($FFFFFE3E).w,($FFFFF726).w
   29607/   17316 : 31F8 FE40 F700      		move.w	($FFFFFE40).w,($FFFFF700).w
   29608/   1731C : 31F8 FE42 F704      		move.w	($FFFFFE42).w,($FFFFF704).w
   29609/   17322 : 31F8 FE44 F708      		move.w	($FFFFFE44).w,($FFFFF708).w
   29610/   17328 : 31F8 FE46 F70C      		move.w	($FFFFFE46).w,($FFFFF70C).w
   29611/   1732E : 31F8 FE48 F710      		move.w	($FFFFFE48).w,($FFFFF710).w
   29612/   17334 : 31F8 FE4A F714      		move.w	($FFFFFE4A).w,($FFFFF714).w
   29613/   1733A : 31F8 FE4C F718      		move.w	($FFFFFE4C).w,($FFFFF718).w
   29614/   17340 : 31F8 FE4E F71C      		move.w	($FFFFFE4E).w,($FFFFF71C).w
   29615/   17346 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
   29616/   1734C : 6612                		bne.s	loc_170E4
   29617/   1734E : 31F8 FE50 F648      		move.w	($FFFFFE50).w,($FFFFF648).w
   29618/   17354 : 11F8 FE52 F64D      		move.b	($FFFFFE52).w,($FFFFF64D).w
   29619/   1735A : 11F8 FE53 F64E      		move.b	($FFFFFE53).w,($FFFFF64E).w
   29620/   17360 :                     
   29621/   17360 :                     loc_170E4:
   29622/   17360 : 4A38 FE30           		tst.b	($FFFFFE30).w
   29623/   17364 : 6A0C                		bpl.s	locret_170F6
   29624/   17366 : 3038 FE32           		move.w	($FFFFFE32).w,d0
   29625/   1736A : 0440 00A0           		subi.w	#$A0,d0
   29626/   1736E : 31C0 F728           		move.w	d0,($FFFFF728).w
   29627/   17372 :                     
   29628/   17372 :                     locret_170F6:
   29629/   17372 : 4E75                		rts	
   29630/   17374 :                     ; End of function Obj79_LoadInfo
   29631/   17374 :                     
   29632/   17374 :                     ; ===========================================================================
   29633/   17374 :                     ; ---------------------------------------------------------------------------
   29634/   17374 :                     ; Sprite mappings - lamppost
   29635/   17374 :                     ; ---------------------------------------------------------------------------
   29636/   17374 :                     Map_obj79:
   29637/   17374 :                     		include	"_maps/obj79.asm"
(1)    1/   17374 :                     ; ---------------------------------------------------------------------------
(1)    2/   17374 :                     ; Sprite mappings - lamppost
(1)    3/   17374 :                     ; ---------------------------------------------------------------------------
(1)    4/   17374 : 0008 0027           		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
(1)    5/   17378 : 003C 0047           		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
(1)    6/   1737C : 06                  byte_17100:	dc.b 6
(1)    7/   1737D : E401 0000 F8        		dc.b $E4, 1, 0,	0, $F8
(1)    8/   17382 : E401 0800 00        		dc.b $E4, 1, 8,	0, 0
(1)    9/   17387 : F403 2002 F8        		dc.b $F4, 3, $20, 2, $F8
(1)   10/   1738C : F403 2802 00        		dc.b $F4, 3, $28, 2, 0
(1)   11/   17391 : D401 0006 F8        		dc.b $D4, 1, 0,	6, $F8
(1)   12/   17396 : D401 0806 00        		dc.b $D4, 1, 8,	6, 0
(1)   13/   1739B : 04                  byte_1711F:	dc.b 4
(1)   14/   1739C : E401 0000 F8        		dc.b $E4, 1, 0,	0, $F8
(1)   15/   173A1 : E401 0800 00        		dc.b $E4, 1, 8,	0, 0
(1)   16/   173A6 : F403 2002 F8        		dc.b $F4, 3, $20, 2, $F8
(1)   17/   173AB : F403 2802 00        		dc.b $F4, 3, $28, 2, 0
(1)   18/   173B0 : 02                  byte_17134:	dc.b 2
(1)   19/   173B1 : F801 0008 F8        		dc.b $F8, 1, 0,	8, $F8
(1)   20/   173B6 : F801 0808 00        		dc.b $F8, 1, 8,	8, 0
(1)   21/   173BB : 06                  byte_1713F:	dc.b 6
(1)   22/   173BC : E401 0000 F8        		dc.b $E4, 1, 0,	0, $F8
(1)   23/   173C1 : E401 0800 00        		dc.b $E4, 1, 8,	0, 0
(1)   24/   173C6 : F403 2002 F8        		dc.b $F4, 3, $20, 2, $F8
(1)   25/   173CB : F403 2802 00        		dc.b $F4, 3, $28, 2, 0
(1)   26/   173D0 : D401 0008 F8        		dc.b $D4, 1, 0,	8, $F8
(1)   27/   173D5 : D401 0808 00        		dc.b $D4, 1, 8,	8, 0
(1)   28/   173DA : (MACRO)             		align 2
(1)   28/   173DA :  (MACRO-2)                  cnop 0,2
(1)   28/   173DA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   29638/   173DA :                     
   29639/   173DA :                     ; ===========================================================================
   29640/   173DA :                     ; ---------------------------------------------------------------------------
   29641/   173DA :                     ; Object 7D - hidden points at the end of a level
   29642/   173DA :                     ; ---------------------------------------------------------------------------
   29643/   173DA :                     
   29644/   173DA :                     Obj7D:					; XREF: Obj_Index
   29645/   173DA : 7000                		moveq	#0,d0
   29646/   173DC : 1028 0024           		move.b	$24(a0),d0
   29647/   173E0 : 323B 0006           		move.w	Obj7D_Index(pc,d0.w),d1
   29648/   173E4 : 4EFB 1002           		jmp	Obj7D_Index(pc,d1.w)
   29649/   173E8 :                     ; ===========================================================================
   29650/   173E8 : 0004                Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
   29651/   173EA : 00AE                		dc.w Obj7D_DelayDel-Obj7D_Index
   29652/   173EC :                     ; ===========================================================================
   29653/   173EC :                     
   29654/   173EC :                     Obj7D_Main:				; XREF: Obj7D_Index
   29655/   173EC : 7410                		moveq	#$10,d2
   29656/   173EE : 3602                		move.w	d2,d3
   29657/   173F0 : D643                		add.w	d3,d3
   29658/   173F2 : 43F8 D000           		lea	($FFFFD000).w,a1
   29659/   173F6 : 3029 0008           		move.w	8(a1),d0
   29660/   173FA : 9068 0008           		sub.w	8(a0),d0
   29661/   173FE : D042                		add.w	d2,d0
   29662/   17400 : B043                		cmp.w	d3,d0
   29663/   17402 : 6466                		bcc.s	Obj7D_ChkDel
   29664/   17404 : 3229 000C           		move.w	$C(a1),d1
   29665/   17408 : 9268 000C           		sub.w	$C(a0),d1
   29666/   1740C : D242                		add.w	d2,d1
   29667/   1740E : B243                		cmp.w	d3,d1
   29668/   17410 : 6458                		bcc.s	Obj7D_ChkDel
   29669/   17412 : 4A78 FE08           		tst.w	($FFFFFE08).w
   29670/   17416 : 6652                		bne.s	Obj7D_ChkDel
   29671/   17418 : 4A38 F7CD           		tst.b	($FFFFF7CD).w
   29672/   1741C : 664C                		bne.s	Obj7D_ChkDel
   29673/   1741E : 5428 0024           		addq.b	#2,$24(a0)
   29674/   17422 : 217C 0001 74C4 0004 		move.l	#Map_obj7D,4(a0)
   29675/   1742A : 317C 84B6 0002      		move.w	#$84B6,2(a0)
   29676/   17430 : 0028 0004 0001      		ori.b	#4,1(a0)
   29677/   17436 : 117C 0000 0018      		move.b	#0,$18(a0)
   29678/   1743C : 117C 0010 0019      		move.b	#$10,$19(a0)
   29679/   17442 : 1168 0028 001A      		move.b	$28(a0),$1A(a0)
   29680/   17448 : 317C 0077 0030      		move.w	#119,$30(a0)	; set display time to 2	seconds
   29681/   1744E : 303C 00C9           		move.w	#$C9,d0
   29682/   17452 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play bonus sound
   29683/   17458 : 7000                		moveq	#0,d0
   29684/   1745A : 1028 0028           		move.b	$28(a0),d0
   29685/   1745E : D040                		add.w	d0,d0
   29686/   17460 : 303B 002C           		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
   29687/   17464 : 4EB9 0001 C922      		jsr	(AddPoints).l
   29688/   1746A :                     
   29689/   1746A :                     Obj7D_ChkDel:
   29690/   1746A : 3028 0008           		move.w	8(a0),d0
   29691/   1746E : 0240 FF80           		andi.w	#$FF80,d0
   29692/   17472 : 3238 F700           		move.w	($FFFFF700).w,d1
   29693/   17476 : 0441 0080           		subi.w	#$80,d1
   29694/   1747A : 0241 FF80           		andi.w	#$FF80,d1
   29695/   1747E : 9041                		sub.w	d1,d0
   29696/   17480 : 0C40 0280           		cmpi.w	#$280,d0
   29697/   17484 : 6202                		bhi.s	Obj7D_Delete
   29698/   17486 : 4E75                		rts	
   29699/   17488 :                     ; ===========================================================================
   29700/   17488 :                     
   29701/   17488 :                     Obj7D_Delete:
   29702/   17488 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   29703/   1748E :                     ; ===========================================================================
   29704/   1748E : 0000                Obj7D_Points:	dc.w 0			; Bonus	points array
   29705/   17490 : 03E8                		dc.w 1000
   29706/   17492 : 0064                		dc.w 100
   29707/   17494 : 0001                		dc.w 1
   29708/   17496 :                     ; ===========================================================================
   29709/   17496 :                     
   29710/   17496 :                     Obj7D_DelayDel:				; XREF: Obj7D_Index
   29711/   17496 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from display time
   29712/   1749A : 6B22                		bmi.s	Obj7D_Delete2	; if time is zero, branch
   29713/   1749C : 3028 0008           		move.w	8(a0),d0
   29714/   174A0 : 0240 FF80           		andi.w	#-$80,d0
   29715/   174A4 : 3238 F700           		move.w	($FFFFF700).w,d1
   29716/   174A8 : 0441 0080           		subi.w	#$80,d1
   29717/   174AC : 0241 FF80           		andi.w	#-$80,d1
   29718/   174B0 : 9041                		sub.w	d1,d0
   29719/   174B2 : 0C40 0280           		cmpi.w	#$280,d0
   29720/   174B6 : 6206                		bhi.s	Obj7D_Delete2
   29721/   174B8 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   29722/   174BE :                     ; ===========================================================================
   29723/   174BE :                     
   29724/   174BE :                     Obj7D_Delete2:
   29725/   174BE : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   29726/   174C4 :                     ; ===========================================================================
   29727/   174C4 :                     ; ---------------------------------------------------------------------------
   29728/   174C4 :                     ; Sprite mappings - hidden points at the end of	a level
   29729/   174C4 :                     ; ---------------------------------------------------------------------------
   29730/   174C4 :                     Map_obj7D:
   29731/   174C4 :                     		include	"_maps/obj7D.asm"
(1)    1/   174C4 :                     ; ---------------------------------------------------------------------------
(1)    2/   174C4 :                     ; Sprite mappings - hidden points at the end of	a level
(1)    3/   174C4 :                     ; ---------------------------------------------------------------------------
(1)    4/   174C4 : 0008 0009           		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
(1)    5/   174C8 : 000F 0015           		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
(1)    6/   174CC : 00                  byte_17250:	dc.b 0
(1)    7/   174CD : 01                  byte_17251:	dc.b 1
(1)    8/   174CE : F40E 0000 F0        		dc.b $F4, $E, 0, 0, $F0
(1)    9/   174D3 : 01                  byte_17257:	dc.b 1
(1)   10/   174D4 : F40E 000C F0        		dc.b $F4, $E, 0, $C, $F0
(1)   11/   174D9 : 01                  byte_1725D:	dc.b 1
(1)   12/   174DA : F40E 0018 F0        		dc.b $F4, $E, 0, $18, $F0
(1)   13/   174DF : (MACRO)             		align 2
(1)   13/   174DF :  (MACRO-2)                  cnop 0,2
(1)   13/   174DF :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   13/   174DF : =$3A                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   13/   174E0 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   29732/   174E0 :                     
   29733/   174E0 :                     ; ===========================================================================
   29734/   174E0 :                     ; ---------------------------------------------------------------------------
   29735/   174E0 :                     ; Object 8A - "SONIC TEAM PRESENTS" and	credits
   29736/   174E0 :                     ; ---------------------------------------------------------------------------
   29737/   174E0 :                     
   29738/   174E0 :                     Obj8A:					; XREF: Obj_Index
   29739/   174E0 : 7000                		moveq	#0,d0
   29740/   174E2 : 1028 0024           		move.b	$24(a0),d0
   29741/   174E6 : 323B 0006           		move.w	Obj8A_Index(pc,d0.w),d1
   29742/   174EA : 4EFB 1002           		jmp	Obj8A_Index(pc,d1.w)
   29743/   174EE :                     ; ===========================================================================
   29744/   174EE : 0004                Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
   29745/   174F0 : 006A                		dc.w Obj8A_Display-Obj8A_Index
   29746/   174F2 :                     ; ===========================================================================
   29747/   174F2 :                     
   29748/   174F2 :                     Obj8A_Main:				; XREF: Obj8A_Index
   29749/   174F2 : 5428 0024           		addq.b	#2,$24(a0)
   29750/   174F6 : 317C 0120 0008      		move.w	#$120,8(a0)
   29751/   174FC : 317C 00F0 000A      		move.w	#$F0,$A(a0)
   29752/   17502 : 217C 0001 755E 0004 		move.l	#Map_obj8A,4(a0)
   29753/   1750A : 317C 05A0 0002      		move.w	#$5A0,2(a0)
   29754/   17510 : 3038 FFF4           		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
   29755/   17514 : 1140 001A           		move.b	d0,$1A(a0)	; display appropriate sprite
   29756/   17518 : 117C 0000 0001      		move.b	#0,1(a0)
   29757/   1751E : 117C 0000 0018      		move.b	#0,$18(a0)
   29758/   17524 : 0C38 0004 F600      		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
   29759/   1752A : 662C                		bne.s	Obj8A_Display	; if not, branch
   29760/   1752C : 317C 00A6 0002      		move.w	#$A6,2(a0)
   29761/   17532 : 117C 000A 001A      		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
   29762/   17538 : 4A38 FFE3           		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
   29763/   1753C : 671A                		beq.s	Obj8A_Display	; if not, branch
   29764/   1753E : 0C38 0072 F604      		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
   29765/   17544 : 6612                		bne.s	Obj8A_Display	; if not, branch
   29766/   17546 : 31FC 0EEE FBC0      		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
   29767/   1754C : 31FC 0880 FBC2      		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
   29768/   17552 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   29769/   17558 :                     ; ===========================================================================
   29770/   17558 :                     
   29771/   17558 :                     Obj8A_Display:				; XREF: Obj8A_Index
   29772/   17558 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   29773/   1755E :                     ; ===========================================================================
   29774/   1755E :                     ; ---------------------------------------------------------------------------
   29775/   1755E :                     ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
   29776/   1755E :                     ; ---------------------------------------------------------------------------
   29777/   1755E :                     Map_obj8A:
   29778/   1755E :                     		include	"_maps/obj8A.asm"
(1)    1/   1755E :                     ; ---------------------------------------------------------------------------
(1)    2/   1755E :                     ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
(1)    3/   1755E :                     ; ---------------------------------------------------------------------------
(1)    4/   1755E : 0016 005D           		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
(1)    5/   17562 : 00AE 00E1           		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
(1)    6/   17566 : 015A 01BF           		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
(1)    7/   1756A : 0242 02B6           		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
(1)    8/   1756E : 0352 039E           		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
(1)    9/   17572 : 03C7                		dc.w byte_176A9-Map_obj8A
(1)   10/   17574 : 0E                  byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
(1)   11/   17575 : F805 002E 88        		dc.b $F8, 5, 0,	$2E, $88
(1)   12/   1757A : F805 0026 98        		dc.b $F8, 5, 0,	$26, $98
(1)   13/   1757F : F805 001A A8        		dc.b $F8, 5, 0,	$1A, $A8
(1)   14/   17584 : F801 0046 B8        		dc.b $F8, 1, 0,	$46, $B8
(1)   15/   17589 : F805 001E C0        		dc.b $F8, 5, 0,	$1E, $C0
(1)   16/   1758E : F805 003E D8        		dc.b $F8, 5, 0,	$3E, $D8
(1)   17/   17593 : F805 000E E8        		dc.b $F8, 5, 0,	$E, $E8
(1)   18/   17598 : F805 0004 F8        		dc.b $F8, 5, 0,	4, $F8
(1)   19/   1759D : F809 0008 08        		dc.b $F8, 9, 0,	8, 8
(1)   20/   175A2 : F805 002E 28        		dc.b $F8, 5, 0,	$2E, $28
(1)   21/   175A7 : F805 003E 38        		dc.b $F8, 5, 0,	$3E, $38
(1)   22/   175AC : F805 0004 48        		dc.b $F8, 5, 0,	4, $48
(1)   23/   175B1 : F805 005C 58        		dc.b $F8, 5, 0,	$5C, $58
(1)   24/   175B6 : F805 005C 68        		dc.b $F8, 5, 0,	$5C, $68
(1)   25/   175BB : 10                  byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
(1)   26/   175BC : D805 0000 80        		dc.b $D8, 5, 0,	0, $80
(1)   27/   175C1 : D805 0004 90        		dc.b $D8, 5, 0,	4, $90
(1)   28/   175C6 : D809 0008 A0        		dc.b $D8, 9, 0,	8, $A0
(1)   29/   175CB : D805 000E B4        		dc.b $D8, 5, 0,	$E, $B4
(1)   30/   175D0 : D805 0012 D0        		dc.b $D8, 5, 0,	$12, $D0
(1)   31/   175D5 : D805 0016 E0        		dc.b $D8, 5, 0,	$16, $E0
(1)   32/   175DA : D805 0004 F0        		dc.b $D8, 5, 0,	4, $F0
(1)   33/   175DF : D805 001A 00        		dc.b $D8, 5, 0,	$1A, 0
(1)   34/   175E4 : 0805 001E C8        		dc.b 8,	5, 0, $1E, $C8
(1)   35/   175E9 : 0805 0004 D8        		dc.b 8,	5, 0, 4, $D8
(1)   36/   175EE : 0805 0022 E8        		dc.b 8,	5, 0, $22, $E8
(1)   37/   175F3 : 0805 0026 F8        		dc.b 8,	5, 0, $26, $F8
(1)   38/   175F8 : 0805 0016 08        		dc.b 8,	5, 0, $16, 8
(1)   39/   175FD : 0805 002A 20        		dc.b 8,	5, 0, $2A, $20
(1)   40/   17602 : 0805 0004 30        		dc.b 8,	5, 0, 4, $30
(1)   41/   17607 : 0805 002E 44        		dc.b 8,	5, 0, $2E, $44
(1)   42/   1760C : 0A                  byte_17390:	dc.b $A			 ; PROGRAM YU 2
(1)   43/   1760D : D805 0012 80        		dc.b $D8, 5, 0,	$12, $80
(1)   44/   17612 : D805 0022 90        		dc.b $D8, 5, 0,	$22, $90
(1)   45/   17617 : D805 0026 A0        		dc.b $D8, 5, 0,	$26, $A0
(1)   46/   1761C : D805 0000 B0        		dc.b $D8, 5, 0,	0, $B0
(1)   47/   17621 : D805 0022 C0        		dc.b $D8, 5, 0,	$22, $C0
(1)   48/   17626 : D805 0004 D0        		dc.b $D8, 5, 0,	4, $D0
(1)   49/   1762B : D809 0008 E0        		dc.b $D8, 9, 0,	8, $E0
(1)   50/   17630 : 0805 002A E8        		dc.b 8,	5, 0, $2A, $E8
(1)   51/   17635 : 0805 0032 F8        		dc.b 8,	5, 0, $32, $F8
(1)   52/   1763A : 0805 0036 08        		dc.b 8,	5, 0, $36, 8
(1)   53/   1763F : 18                  byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
(1)   54/   17640 : D805 001E 88        		dc.b $D8, 5, 0,	$1E, $88
(1)   55/   17645 : D805 003A 98        		dc.b $D8, 5, 0,	$3A, $98
(1)   56/   1764A : D805 0004 A8        		dc.b $D8, 5, 0,	4, $A8
(1)   57/   1764F : D805 0022 B8        		dc.b $D8, 5, 0,	$22, $B8
(1)   58/   17654 : D805 0004 C8        		dc.b $D8, 5, 0,	4, $C8
(1)   59/   17659 : D805 001E D8        		dc.b $D8, 5, 0,	$1E, $D8
(1)   60/   1765E : D805 003E E8        		dc.b $D8, 5, 0,	$3E, $E8
(1)   61/   17663 : D805 000E F8        		dc.b $D8, 5, 0,	$E, $F8
(1)   62/   17668 : D805 0022 08        		dc.b $D8, 5, 0,	$22, 8
(1)   63/   1766D : D805 0042 20        		dc.b $D8, 5, 0,	$42, $20
(1)   64/   17672 : D805 000E 30        		dc.b $D8, 5, 0,	$E, $30
(1)   65/   17677 : D805 002E 40        		dc.b $D8, 5, 0,	$2E, $40
(1)   66/   1767C : D801 0046 50        		dc.b $D8, 1, 0,	$46, $50
(1)   67/   17681 : D805 0000 58        		dc.b $D8, 5, 0,	0, $58
(1)   68/   17686 : D805 001A 68        		dc.b $D8, 5, 0,	$1A, $68
(1)   69/   1768B : 0805 0048 C0        		dc.b 8,	5, 0, $48, $C0
(1)   70/   17690 : 0801 0046 D0        		dc.b 8,	1, 0, $46, $D0
(1)   71/   17695 : 0805 0000 D8        		dc.b 8,	5, 0, 0, $D8
(1)   72/   1769A : 0801 0046 E8        		dc.b 8,	1, 0, $46, $E8
(1)   73/   1769F : 0805 002E F0        		dc.b 8,	5, 0, $2E, $F0
(1)   74/   176A4 : 0805 0016 00        		dc.b 8,	5, 0, $16, 0
(1)   75/   176A9 : 0805 0004 10        		dc.b 8,	5, 0, 4, $10
(1)   76/   176AE : 0805 001A 20        		dc.b 8,	5, 0, $1A, $20
(1)   77/   176B3 : 0805 0042 30        		dc.b 8,	5, 0, $42, $30
(1)   78/   176B8 : 14                  byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
(1)   79/   176B9 : D005 0042 A0        		dc.b $D0, 5, 0,	$42, $A0
(1)   80/   176BE : D005 000E B0        		dc.b $D0, 5, 0,	$E, $B0
(1)   81/   176C3 : D005 002E C0        		dc.b $D0, 5, 0,	$2E, $C0
(1)   82/   176C8 : D001 0046 D0        		dc.b $D0, 1, 0,	$46, $D0
(1)   83/   176CD : D005 0000 D8        		dc.b $D0, 5, 0,	0, $D8
(1)   84/   176D2 : D005 001A E8        		dc.b $D0, 5, 0,	$1A, $E8
(1)   85/   176D7 : 0005 004C E8        		dc.b 0,	5, 0, $4C, $E8
(1)   86/   176DC : 0001 0046 F8        		dc.b 0,	1, 0, $46, $F8
(1)   87/   176E1 : 0005 001A 04        		dc.b 0,	5, 0, $1A, 4
(1)   88/   176E6 : 0005 002A 14        		dc.b 0,	5, 0, $2A, $14
(1)   89/   176EB : 0005 0004 24        		dc.b 0,	5, 0, 4, $24
(1)   90/   176F0 : 2005 0012 D0        		dc.b $20, 5, 0,	$12, $D0
(1)   91/   176F5 : 2005 003A E0        		dc.b $20, 5, 0,	$3A, $E0
(1)   92/   176FA : 2005 000E F0        		dc.b $20, 5, 0,	$E, $F0
(1)   93/   176FF : 2005 001A 00        		dc.b $20, 5, 0,	$1A, 0
(1)   94/   17704 : 2001 0046 10        		dc.b $20, 1, 0,	$46, $10
(1)   95/   17709 : 2005 0050 18        		dc.b $20, 5, 0,	$50, $18
(1)   96/   1770E : 2005 0022 30        		dc.b $20, 5, 0,	$22, $30
(1)   97/   17713 : 2001 0046 40        		dc.b $20, 1, 0,	$46, $40
(1)   98/   17718 : 2005 000E 48        		dc.b $20, 5, 0,	$E, $48
(1)   99/   1771D : 1A                  byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
(1)  100/   1771E : D805 002E 98        		dc.b $D8, 5, 0,	$2E, $98
(1)  101/   17723 : D805 0026 A8        		dc.b $D8, 5, 0,	$26, $A8
(1)  102/   17728 : D805 0032 B8        		dc.b $D8, 5, 0,	$32, $B8
(1)  103/   1772D : D805 001A C8        		dc.b $D8, 5, 0,	$1A, $C8
(1)  104/   17732 : D805 0054 D8        		dc.b $D8, 5, 0,	$54, $D8
(1)  105/   17737 : D805 0012 F8        		dc.b $D8, 5, 0,	$12, $F8
(1)  106/   1773C : D805 0022 08        		dc.b $D8, 5, 0,	$22, 8
(1)  107/   17741 : D805 0026 18        		dc.b $D8, 5, 0,	$26, $18
(1)  108/   17746 : D805 0042 28        		dc.b $D8, 5, 0,	$42, $28
(1)  109/   1774B : D805 0032 38        		dc.b $D8, 5, 0,	$32, $38
(1)  110/   17750 : D805 001E 48        		dc.b $D8, 5, 0,	$1E, $48
(1)  111/   17755 : D805 000E 58        		dc.b $D8, 5, 0,	$E, $58
(1)  112/   1775A : 0809 0008 88        		dc.b 8,	9, 0, 8, $88
(1)  113/   1775F : 0805 0004 9C        		dc.b 8,	5, 0, 4, $9C
(1)  114/   17764 : 0805 002E AC        		dc.b 8,	5, 0, $2E, $AC
(1)  115/   17769 : 0805 0004 BC        		dc.b 8,	5, 0, 4, $BC
(1)  116/   1776E : 0805 003E CC        		dc.b 8,	5, 0, $3E, $CC
(1)  117/   17773 : 0805 0026 DC        		dc.b 8,	5, 0, $26, $DC
(1)  118/   17778 : 0805 001A F8        		dc.b 8,	5, 0, $1A, $F8
(1)  119/   1777D : 0805 0004 08        		dc.b 8,	5, 0, 4, 8
(1)  120/   17782 : 0805 0058 18        		dc.b 8,	5, 0, $58, $18
(1)  121/   17787 : 0805 0004 28        		dc.b 8,	5, 0, 4, $28
(1)  122/   1778C : 0809 0008 38        		dc.b 8,	9, 0, 8, $38
(1)  123/   17791 : 0805 0032 4C        		dc.b 8,	5, 0, $32, $4C
(1)  124/   17796 : 0805 0022 5C        		dc.b 8,	5, 0, $22, $5C
(1)  125/   1779B : 0805 0004 6C        		dc.b 8,	5, 0, 4, $6C
(1)  126/   177A0 : 17                  byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
(1)  127/   177A1 : D005 002E 98        		dc.b $D0, 5, 0,	$2E, $98
(1)  128/   177A6 : D005 0026 A8        		dc.b $D0, 5, 0,	$26, $A8
(1)  129/   177AB : D005 0032 B8        		dc.b $D0, 5, 0,	$32, $B8
(1)  130/   177B0 : D005 001A C8        		dc.b $D0, 5, 0,	$1A, $C8
(1)  131/   177B5 : D005 0054 D8        		dc.b $D0, 5, 0,	$54, $D8
(1)  132/   177BA : D005 0012 F8        		dc.b $D0, 5, 0,	$12, $F8
(1)  133/   177BF : D005 0022 08        		dc.b $D0, 5, 0,	$22, 8
(1)  134/   177C4 : D005 0026 18        		dc.b $D0, 5, 0,	$26, $18
(1)  135/   177C9 : D005 0000 28        		dc.b $D0, 5, 0,	0, $28
(1)  136/   177CE : D005 0022 38        		dc.b $D0, 5, 0,	$22, $38
(1)  137/   177D3 : D005 0004 48        		dc.b $D0, 5, 0,	4, $48
(1)  138/   177D8 : D009 0008 58        		dc.b $D0, 9, 0,	8, $58
(1)  139/   177DD : 0005 004C D0        		dc.b 0,	5, 0, $4C, $D0
(1)  140/   177E2 : 0001 0046 E0        		dc.b 0,	1, 0, $46, $E0
(1)  141/   177E7 : 0009 0008 E8        		dc.b 0,	9, 0, 8, $E8
(1)  142/   177EC : 0001 0046 FC        		dc.b 0,	1, 0, $46, $FC
(1)  143/   177F1 : 0005 003E 04        		dc.b 0,	5, 0, $3E, 4
(1)  144/   177F6 : 0005 0004 14        		dc.b 0,	5, 0, 4, $14
(1)  145/   177FB : 2009 0008 D0        		dc.b $20, 9, 0,	8, $D0
(1)  146/   17800 : 2005 0004 E4        		dc.b $20, 5, 0,	4, $E4
(1)  147/   17805 : 2005 001E F4        		dc.b $20, 5, 0,	$1E, $F4
(1)  148/   1780A : 2005 0058 04        		dc.b $20, 5, 0,	$58, 4
(1)  149/   1780F : 2005 002A 14        		dc.b $20, 5, 0,	$2A, $14
(1)  150/   17814 : 1F                  byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
(1)  151/   17815 : D805 002E 80        		dc.b $D8, 5, 0,	$2E, $80
(1)  152/   1781A : D805 0012 90        		dc.b $D8, 5, 0,	$12, $90
(1)  153/   1781F : D805 000E A0        		dc.b $D8, 5, 0,	$E, $A0
(1)  154/   17824 : D805 001E B0        		dc.b $D8, 5, 0,	$1E, $B0
(1)  155/   17829 : D801 0046 C0        		dc.b $D8, 1, 0,	$46, $C0
(1)  156/   1782E : D805 0004 C8        		dc.b $D8, 5, 0,	4, $C8
(1)  157/   17833 : D805 0016 D8        		dc.b $D8, 5, 0,	$16, $D8
(1)  158/   17838 : D805 003E F8        		dc.b $D8, 5, 0,	$3E, $F8
(1)  159/   1783D : D805 003A 08        		dc.b $D8, 5, 0,	$3A, 8
(1)  160/   17842 : D805 0004 18        		dc.b $D8, 5, 0,	4, $18
(1)  161/   17847 : D805 001A 28        		dc.b $D8, 5, 0,	$1A, $28
(1)  162/   1784C : D805 0058 38        		dc.b $D8, 5, 0,	$58, $38
(1)  163/   17851 : D805 002E 48        		dc.b $D8, 5, 0,	$2E, $48
(1)  164/   17856 : 0005 005C B0        		dc.b 0,	5, 0, $5C, $B0
(1)  165/   1785B : 0005 0032 C0        		dc.b 0,	5, 0, $32, $C0
(1)  166/   17860 : 0005 004C D0        		dc.b 0,	5, 0, $4C, $D0
(1)  167/   17865 : 0001 0046 E0        		dc.b 0,	1, 0, $46, $E0
(1)  168/   1786A : 0005 0026 E8        		dc.b 0,	5, 0, $26, $E8
(1)  169/   1786F : 0009 0008 00        		dc.b 0,	9, 0, 8, 0
(1)  170/   17874 : 0001 0046 14        		dc.b 0,	1, 0, $46, $14
(1)  171/   17879 : 0005 001A 1C        		dc.b 0,	5, 0, $1A, $1C
(1)  172/   1787E : 0005 000E 2C        		dc.b 0,	5, 0, $E, $2C
(1)  173/   17883 : 0005 0000 3C        		dc.b 0,	5, 0, 0, $3C
(1)  174/   17888 : 0001 0046 4C        		dc.b 0,	1, 0, $46, $4C
(1)  175/   1788D : 0005 002E 54        		dc.b 0,	5, 0, $2E, $54
(1)  176/   17892 : 0005 003A 64        		dc.b 0,	5, 0, $3A, $64
(1)  177/   17897 : 0001 0046 74        		dc.b 0,	1, 0, $46, $74
(1)  178/   1789C : 2005 0012 F8        		dc.b $20, 5, 0,	$12, $F8
(1)  179/   178A1 : 2005 0004 08        		dc.b $20, 5, 0,	4, 8
(1)  180/   178A6 : 2005 0012 18        		dc.b $20, 5, 0,	$12, $18
(1)  181/   178AB : 2005 0004 28        		dc.b $20, 5, 0,	4, $28
(1)  182/   178B0 : 0F                  byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
(1)  183/   178B1 : F805 0012 80        		dc.b $F8, 5, 0,	$12, $80
(1)  184/   178B6 : F805 0022 90        		dc.b $F8, 5, 0,	$22, $90
(1)  185/   178BB : F805 000E A0        		dc.b $F8, 5, 0,	$E, $A0
(1)  186/   178C0 : F805 002E B0        		dc.b $F8, 5, 0,	$2E, $B0
(1)  187/   178C5 : F805 000E C0        		dc.b $F8, 5, 0,	$E, $C0
(1)  188/   178CA : F805 001A D0        		dc.b $F8, 5, 0,	$1A, $D0
(1)  189/   178CF : F805 003E E0        		dc.b $F8, 5, 0,	$3E, $E0
(1)  190/   178D4 : F805 000E F0        		dc.b $F8, 5, 0,	$E, $F0
(1)  191/   178D9 : F805 0042 00        		dc.b $F8, 5, 0,	$42, 0
(1)  192/   178DE : F805 0048 18        		dc.b $F8, 5, 0,	$48, $18
(1)  193/   178E3 : F805 002A 28        		dc.b $F8, 5, 0,	$2A, $28
(1)  194/   178E8 : F805 002E 40        		dc.b $F8, 5, 0,	$2E, $40
(1)  195/   178ED : F805 000E 50        		dc.b $F8, 5, 0,	$E, $50
(1)  196/   178F2 : F805 0000 60        		dc.b $F8, 5, 0,	0, $60
(1)  197/   178F7 : F805 0004 70        		dc.b $F8, 5, 0,	4, $70
(1)  198/   178FC : 08                  byte_17680:	dc.b 8			 ; TRY AGAIN
(1)  199/   178FD : 3005 003E C0        		dc.b $30, 5, 0,	$3E, $C0
(1)  200/   17902 : 3005 0022 D0        		dc.b $30, 5, 0,	$22, $D0
(1)  201/   17907 : 3005 002A E0        		dc.b $30, 5, 0,	$2A, $E0
(1)  202/   1790C : 3005 0004 F8        		dc.b $30, 5, 0,	4, $F8
(1)  203/   17911 : 3005 0000 08        		dc.b $30, 5, 0,	0, 8
(1)  204/   17916 : 3005 0004 18        		dc.b $30, 5, 0,	4, $18
(1)  205/   1791B : 3001 0046 28        		dc.b $30, 1, 0,	$46, $28
(1)  206/   17920 : 3005 001A 30        		dc.b $30, 5, 0,	$1A, $30
(1)  207/   17925 : 15                  byte_176A9:	dc.b $15	;  SONIC TEAM PRESENTS | SIO AGES TEAMPRESENTS
(1)  208/   17926 : E805 002E 94        		dc.b $E8, 5, 0, $2E, $94	; S
(1)  209/   1792B : E801 0046 A4        		dc.b $E8, 1, 0, $46, $A4	; I
(1)  210/   17930 : E805 0026 AC        		dc.b $E8, 5, 0, $26, $AC	; O
(1)  211/   17935 : E800 0060 0C        		dc.b $E8, 0, 0, $60, $C   	 ; Space
(1)  212/   1793A : E805 0004 CC        		dc.b $E8, 5, 0, 4, $CC		; A
(1)  213/   1793F : E805 0000 DC        		dc.b $E8, 5, 0, 0, $DC		; G
(1)  214/   17944 : E805 000E EC        		dc.b $E8, 5, 0, $0E, $EC	; E
(1)  215/   17949 : E805 002E FC        		dc.b $E8, 5, 0, $2E, $FC	; S
(1)  216/   1794E : E800 0060 0C        		dc.b $E8, 0, 0, $60, $C   	 ; Space
(1)  217/   17953 : E805 003E 1C        		dc.b $E8, 5, 0, $3E, $1C	; T
(1)  218/   17958 : E805 000E 2C        		dc.b $E8, 5, 0, $0E, $2C	; E
(1)  219/   1795D : E805 0004 3C        		dc.b $E8, 5, 0, 4, $3C		; A
(1)  220/   17962 : E809 0008 4C        		dc.b $E8, 9, 0, 8, $4C		; M
(1)  221/   17967 :                     
(1)  222/   17967 : 0005 0012 C0        		dc.b 0,	5, 0, $12, $C0	; P
(1)  223/   1796C : 0005 0022 D0        		dc.b 0,	5, 0, $22, $D0	; R
(1)  224/   17971 : 0005 000E E0        		dc.b 0,	5, 0, $E, $E0	; E
(1)  225/   17976 : 0005 002E F0        		dc.b 0,	5, 0, $2E, $F0	; S
(1)  226/   1797B : 0005 000E 00        		dc.b 0,	5, 0, $E, 0	; E
(1)  227/   17980 : 0005 001A 10        		dc.b 0,	5, 0, $1A, $10	; N
(1)  228/   17985 : 0005 003E 20        		dc.b 0,	5, 0, $3E, $20	; T
(1)  229/   1798A : 0005 002E 30        		dc.b 0,	5, 0, $2E, $30	; S
(1)  230/   1798F : (MACRO)             		even
(1)  230/   1798F : =$3B                paddingSoFar            set paddingSoFar+1
(1)  230/   1798F : 00                                          dc.b 0 ;ds.b 1 
   29779/   17990 :                     
   29780/   17990 :                     ; ===========================================================================
   29781/   17990 :                     ; ---------------------------------------------------------------------------
   29782/   17990 :                     ; Object 3D - Eggman (GHZ)
   29783/   17990 :                     ; ---------------------------------------------------------------------------
   29784/   17990 :                     
   29785/   17990 :                     Obj3D:					; XREF: Obj_Index
   29786/   17990 : 7000                		moveq	#0,d0
   29787/   17992 : 1028 0024           		move.b	$24(a0),d0
   29788/   17996 : 323B 0006           		move.w	Obj3D_Index(pc,d0.w),d1
   29789/   1799A : 4EFB 1002           		jmp	Obj3D_Index(pc,d1.w)
   29790/   1799E :                     ; ===========================================================================
   29791/   1799E : 000E                Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
   29792/   179A0 : 007C                		dc.w Obj3D_ShipMain-Obj3D_Index
   29793/   179A2 : 0316                		dc.w Obj3D_FaceMain-Obj3D_Index
   29794/   179A4 : 0368                		dc.w Obj3D_FlameMain-Obj3D_Index
   29795/   179A6 :                     
   29796/   179A6 : 0200                Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
   29797/   179A8 : 0401                		dc.b 4,	1
   29798/   179AA : 0607                		dc.b 6,	7
   29799/   179AC :                     ; ===========================================================================
   29800/   179AC :                     
   29801/   179AC :                     Obj3D_Main:				; XREF: Obj3D_Index
   29802/   179AC : 45F9 0001 79A6      		lea	(Obj3D_ObjData).l,a2
   29803/   179B2 : 2248                		movea.l	a0,a1
   29804/   179B4 : 7202                		moveq	#2,d1
   29805/   179B6 : 6008                		bra.s	Obj3D_LoadBoss
   29806/   179B8 :                     ; ===========================================================================
   29807/   179B8 :                     
   29808/   179B8 :                     Obj3D_Loop:
   29809/   179B8 : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   29810/   179BE : 6642                		bne.s	loc_17772
   29811/   179C0 :                     
   29812/   179C0 :                     Obj3D_LoadBoss:				; XREF: Obj3D_Main
   29813/   179C0 : 135A 0024           		move.b	(a2)+,$24(a1)
   29814/   179C4 : (MACRO)             		_move.b	#$3D,0(a1)
   29814/   179C4 :  (MACRO-2)                          insn2op move.b, #$3D,0(a1)
   29814/   179C4 : 137C 003D 0001                              !move.b   #$3D,1+0(a1)
   29814/   179C9 :                                             !org    *-1
   29814/   179C9 : 00                                          !dc.b   0
   29815/   179CA : 3368 0008 0008      		move.w	8(a0),8(a1)
   29816/   179D0 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   29817/   179D6 : 237C 0001 7F9C 0004 		move.l	#Map_Eggman,4(a1)
   29818/   179DE : 337C 0400 0002      		move.w	#$400,2(a1)
   29819/   179E4 : 137C 0004 0001      		move.b	#4,1(a1)
   29820/   179EA : 137C 0020 0019      		move.b	#$20,$19(a1)
   29821/   179F0 : 137C 0003 0018      		move.b	#3,$18(a1)
   29822/   179F6 : 135A 001C           		move.b	(a2)+,$1C(a1)
   29823/   179FA : 2348 0034           		move.l	a0,$34(a1)
   29824/   179FE : 51C9 FFB8           		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
   29825/   17A02 :                     
   29826/   17A02 :                     loc_17772:
   29827/   17A02 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   29828/   17A08 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   29829/   17A0E : 117C 000F 0020      		move.b	#$F,$20(a0)
   29830/   17A14 : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   29831/   17A1A :                     
   29832/   17A1A :                     Obj3D_ShipMain:				; XREF: Obj3D_Index
   29833/   17A1A : 7000                		moveq	#0,d0
   29834/   17A1C : 1028 0025           		move.b	$25(a0),d0
   29835/   17A20 : 323B 002A           		move.w	Obj3D_ShipIndex(pc,d0.w),d1
   29836/   17A24 : 4EBB 1026           		jsr	Obj3D_ShipIndex(pc,d1.w)
   29837/   17A28 : 43F9 0001 7F4C      		lea	(Ani_Eggman).l,a1
   29838/   17A2E : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   29839/   17A34 : 1028 0022           		move.b	$22(a0),d0
   29840/   17A38 : 0200 0003           		andi.b	#3,d0
   29841/   17A3C : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   29842/   17A42 : 8128 0001           		or.b	d0,1(a0)
   29843/   17A46 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   29844/   17A4C :                     ; ===========================================================================
   29845/   17A4C : 000E                Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
   29846/   17A4E : 010E                		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
   29847/   17A50 : 015E                		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
   29848/   17A52 : 0198                		dc.w loc_17954-Obj3D_ShipIndex
   29849/   17A54 : 01BE                		dc.w loc_1797A-Obj3D_ShipIndex
   29850/   17A56 : 01F0                		dc.w loc_179AC-Obj3D_ShipIndex
   29851/   17A58 : 023A                		dc.w loc_179F6-Obj3D_ShipIndex
   29852/   17A5A :                     ; ===========================================================================
   29853/   17A5A :                     
   29854/   17A5A :                     Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
   29855/   17A5A : 317C 0100 0012      		move.w	#$100,$12(a0)	; move ship down
   29856/   17A60 : 6100 00D2           		bsr.w	BossMove
   29857/   17A64 : 0C68 0338 0038      		cmpi.w	#$338,$38(a0)
   29858/   17A6A : 660A                		bne.s	loc_177E6
   29859/   17A6C : 317C 0000 0012      		move.w	#0,$12(a0)	; stop ship
   29860/   17A72 : 5428 0025           		addq.b	#2,$25(a0)	; goto next routine
   29861/   17A76 :                     
   29862/   17A76 :                     loc_177E6:
   29863/   17A76 : 1028 003F           		move.b	$3F(a0),d0
   29864/   17A7A : 4EB9 0000 29EA      		jsr	(CalcSine).l
   29865/   17A80 : EC40                		asr.w	#6,d0
   29866/   17A82 : D068 0038           		add.w	$38(a0),d0
   29867/   17A86 : 3140 000C           		move.w	d0,$C(a0)
   29868/   17A8A : 3168 0030 0008      		move.w	$30(a0),8(a0)
   29869/   17A90 : 5428 003F           		addq.b	#2,$3F(a0)
   29870/   17A94 : 0C28 0008 0025      		cmpi.b	#8,$25(a0)
   29871/   17A9A : 643E                		bcc.s	locret_1784A
   29872/   17A9C : 4A28 0022           		tst.b	$22(a0)
   29873/   17AA0 : 6B3A                		bmi.s	loc_1784C
   29874/   17AA2 : 4A28 0020           		tst.b	$20(a0)
   29875/   17AA6 : 6632                		bne.s	locret_1784A
   29876/   17AA8 : 4A28 003E           		tst.b	$3E(a0)
   29877/   17AAC : 6610                		bne.s	Obj3D_ShipFlash
   29878/   17AAE : 117C 0020 003E      		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
   29879/   17AB4 : 303C 00AC           		move.w	#$AC,d0
   29880/   17AB8 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play boss damage sound
   29881/   17ABE :                     
   29882/   17ABE :                     Obj3D_ShipFlash:
   29883/   17ABE : 43F8 FB22           		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
   29884/   17AC2 : 7000                		moveq	#0,d0		; move 0 (black) to d0
   29885/   17AC4 : 4A51                		tst.w	(a1)
   29886/   17AC6 : 6604                		bne.s	loc_1783C
   29887/   17AC8 : 303C 0EEE           		move.w	#$EEE,d0	; move 0EEE (white) to d0
   29888/   17ACC :                     
   29889/   17ACC :                     loc_1783C:
   29890/   17ACC : 3280                		move.w	d0,(a1)		; load colour stored in	d0
   29891/   17ACE : 5328 003E           		subq.b	#1,$3E(a0)
   29892/   17AD2 : 6606                		bne.s	locret_1784A
   29893/   17AD4 : 117C 000F 0020      		move.b	#$F,$20(a0)
   29894/   17ADA :                     
   29895/   17ADA :                     locret_1784A:
   29896/   17ADA : 4E75                		rts	
   29897/   17ADC :                     ; ===========================================================================
   29898/   17ADC :                     
   29899/   17ADC :                     loc_1784C:				; XREF: loc_177E6
   29900/   17ADC : 7064                		moveq	#100,d0
   29901/   17ADE : 6100 4E42           		bsr.w	AddPoints
   29902/   17AE2 : 117C 0008 0025      		move.b	#8,$25(a0)
   29903/   17AE8 : 317C 00B3 003C      		move.w	#$B3,$3C(a0)
   29904/   17AEE : 4E75                		rts	
   29905/   17AF0 :                     
   29906/   17AF0 :                     ; ---------------------------------------------------------------------------
   29907/   17AF0 :                     ; Defeated boss	subroutine
   29908/   17AF0 :                     ; ---------------------------------------------------------------------------
   29909/   17AF0 :                     
   29910/   17AF0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   29911/   17AF0 :                     
   29912/   17AF0 :                     
   29913/   17AF0 :                     BossDefeated:
   29914/   17AF0 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   29915/   17AF4 : 0200 0007           		andi.b	#7,d0
   29916/   17AF8 : 6638                		bne.s	locret_178A2
   29917/   17AFA : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   29918/   17B00 : 6630                		bne.s	locret_178A2
   29919/   17B02 : (MACRO)             		_move.b	#$3F,0(a1)	; load explosion object
   29919/   17B02 :  (MACRO-2)                          insn2op move.b, #$3F,0(a1)
   29919/   17B02 : 137C 003F 0001                              !move.b   #$3F,1+0(a1)
   29919/   17B07 :                                             !org    *-1
   29919/   17B07 : 00                                          !dc.b   0
   29920/   17B08 : 3368 0008 0008      		move.w	8(a0),8(a1)
   29921/   17B0E : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   29922/   17B14 : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   29923/   17B1A : 3200                		move.w	d0,d1
   29924/   17B1C : 7200                		moveq	#0,d1
   29925/   17B1E : 1200                		move.b	d0,d1
   29926/   17B20 : E409                		lsr.b	#2,d1
   29927/   17B22 : 0441 0020           		subi.w	#$20,d1
   29928/   17B26 : D369 0008           		add.w	d1,8(a1)
   29929/   17B2A : E048                		lsr.w	#8,d0
   29930/   17B2C : E608                		lsr.b	#3,d0
   29931/   17B2E : D169 000C           		add.w	d0,$C(a1)
   29932/   17B32 :                     
   29933/   17B32 :                     locret_178A2:
   29934/   17B32 : 4E75                		rts	
   29935/   17B34 :                     ; End of function BossDefeated
   29936/   17B34 :                     
   29937/   17B34 :                     ; ---------------------------------------------------------------------------
   29938/   17B34 :                     ; Subroutine to	move a boss
   29939/   17B34 :                     ; ---------------------------------------------------------------------------
   29940/   17B34 :                     
   29941/   17B34 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   29942/   17B34 :                     
   29943/   17B34 :                     
   29944/   17B34 :                     BossMove:
   29945/   17B34 : 2428 0030           		move.l	$30(a0),d2
   29946/   17B38 : 2628 0038           		move.l	$38(a0),d3
   29947/   17B3C : 3028 0010           		move.w	$10(a0),d0
   29948/   17B40 : 48C0                		ext.l	d0
   29949/   17B42 : E180                		asl.l	#8,d0
   29950/   17B44 : D480                		add.l	d0,d2
   29951/   17B46 : 3028 0012           		move.w	$12(a0),d0
   29952/   17B4A : 48C0                		ext.l	d0
   29953/   17B4C : E180                		asl.l	#8,d0
   29954/   17B4E : D680                		add.l	d0,d3
   29955/   17B50 : 2142 0030           		move.l	d2,$30(a0)
   29956/   17B54 : 2143 0038           		move.l	d3,$38(a0)
   29957/   17B58 : 4E75                		rts	
   29958/   17B5A :                     ; End of function BossMove
   29959/   17B5A :                     
   29960/   17B5A :                     ; ===========================================================================
   29961/   17B5A :                     
   29962/   17B5A :                     Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
   29963/   17B5A : 317C FF00 0010      		move.w	#-$100,$10(a0)
   29964/   17B60 : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   29965/   17B66 : 6100 FFCC           		bsr.w	BossMove
   29966/   17B6A : 0C68 2A00 0030      		cmpi.w	#$2A00,$30(a0)
   29967/   17B70 : 6634                		bne.s	loc_17916
   29968/   17B72 : 317C 0000 0010      		move.w	#0,$10(a0)
   29969/   17B78 : 317C 0000 0012      		move.w	#0,$12(a0)
   29970/   17B7E : 5428 0025           		addq.b	#2,$25(a0)
   29971/   17B82 : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   29972/   17B88 : 6616                		bne.s	loc_17910
   29973/   17B8A : (MACRO)             		_move.b	#$48,0(a1)	; load swinging	ball object
   29973/   17B8A :  (MACRO-2)                          insn2op move.b, #$48,0(a1)
   29973/   17B8A : 137C 0048 0001                              !move.b   #$48,1+0(a1)
   29973/   17B8F :                                             !org    *-1
   29973/   17B8F : 00                                          !dc.b   0
   29974/   17B90 : 3368 0030 0008      		move.w	$30(a0),8(a1)
   29975/   17B96 : 3368 0038 000C      		move.w	$38(a0),$C(a1)
   29976/   17B9C : 2348 0034           		move.l	a0,$34(a1)
   29977/   17BA0 :                     
   29978/   17BA0 :                     loc_17910:
   29979/   17BA0 : 317C 0077 003C      		move.w	#$77,$3C(a0)
   29980/   17BA6 :                     
   29981/   17BA6 :                     loc_17916:
   29982/   17BA6 : 6000 FECE           		bra.w	loc_177E6
   29983/   17BAA :                     ; ===========================================================================
   29984/   17BAA :                     
   29985/   17BAA :                     Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
   29986/   17BAA : 5368 003C           		subq.w	#1,$3C(a0)
   29987/   17BAE : 6A24                		bpl.s	Obj3D_Reverse
   29988/   17BB0 : 5428 0025           		addq.b	#2,$25(a0)
   29989/   17BB4 : 317C 003F 003C      		move.w	#$3F,$3C(a0)
   29990/   17BBA : 317C 0100 0010      		move.w	#$100,$10(a0)	; move the ship	sideways
   29991/   17BC0 : 0C68 2A00 0030      		cmpi.w	#$2A00,$30(a0)
   29992/   17BC6 : 660C                		bne.s	Obj3D_Reverse
   29993/   17BC8 : 317C 007F 003C      		move.w	#$7F,$3C(a0)
   29994/   17BCE : 317C 0040 0010      		move.w	#$40,$10(a0)
   29995/   17BD4 :                     
   29996/   17BD4 :                     Obj3D_Reverse:
   29997/   17BD4 : 0828 0000 0022      		btst	#0,$22(a0)
   29998/   17BDA : 6604                		bne.s	loc_17950
   29999/   17BDC : 4468 0010           		neg.w	$10(a0)		; reverse direction of the ship
   30000/   17BE0 :                     
   30001/   17BE0 :                     loc_17950:
   30002/   17BE0 : 6000 FE94           		bra.w	loc_177E6
   30003/   17BE4 :                     ; ===========================================================================
   30004/   17BE4 :                     
   30005/   17BE4 :                     loc_17954:				; XREF: Obj3D_ShipIndex
   30006/   17BE4 : 5368 003C           		subq.w	#1,$3C(a0)
   30007/   17BE8 : 6B06                		bmi.s	loc_17960
   30008/   17BEA : 6100 FF48           		bsr.w	BossMove
   30009/   17BEE : 6016                		bra.s	loc_17976
   30010/   17BF0 :                     ; ===========================================================================
   30011/   17BF0 :                     
   30012/   17BF0 :                     loc_17960:
   30013/   17BF0 : 0868 0000 0022      		bchg	#0,$22(a0)
   30014/   17BF6 : 317C 003F 003C      		move.w	#$3F,$3C(a0)
   30015/   17BFC : 5528 0025           		subq.b	#2,$25(a0)
   30016/   17C00 : 317C 0000 0010      		move.w	#0,$10(a0)
   30017/   17C06 :                     
   30018/   17C06 :                     loc_17976:
   30019/   17C06 : 6000 FE6E           		bra.w	loc_177E6
   30020/   17C0A :                     ; ===========================================================================
   30021/   17C0A :                     
   30022/   17C0A :                     loc_1797A:				; XREF: Obj3D_ShipIndex
   30023/   17C0A : 5368 003C           		subq.w	#1,$3C(a0)
   30024/   17C0E : 6B04                		bmi.s	loc_17984
   30025/   17C10 : 6000 FEDE           		bra.w	BossDefeated
   30026/   17C14 :                     ; ===========================================================================
   30027/   17C14 :                     
   30028/   17C14 :                     loc_17984:
   30029/   17C14 : 08E8 0000 0022      		bset	#0,$22(a0)
   30030/   17C1A : 08A8 0007 0022      		bclr	#7,$22(a0)
   30031/   17C20 : 4268 0010           		clr.w	$10(a0)
   30032/   17C24 : 5428 0025           		addq.b	#2,$25(a0)
   30033/   17C28 : 317C FFDA 003C      		move.w	#-$26,$3C(a0)
   30034/   17C2E : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   30035/   17C32 : 6606                		bne.s	locret_179AA
   30036/   17C34 : 11FC 0001 F7A7      		move.b	#1,($FFFFF7A7).w
   30037/   17C3A :                     
   30038/   17C3A :                     locret_179AA:
   30039/   17C3A : 4E75                		rts	
   30040/   17C3C :                     ; ===========================================================================
   30041/   17C3C :                     
   30042/   17C3C :                     loc_179AC:				; XREF: Obj3D_ShipIndex
   30043/   17C3C : 5268 003C           		addq.w	#1,$3C(a0)
   30044/   17C40 : 670A                		beq.s	loc_179BC
   30045/   17C42 : 6A0E                		bpl.s	loc_179C2
   30046/   17C44 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   30047/   17C4A : 6032                		bra.s	loc_179EE
   30048/   17C4C :                     ; ===========================================================================
   30049/   17C4C :                     
   30050/   17C4C :                     loc_179BC:
   30051/   17C4C : 4268 0012           		clr.w	$12(a0)
   30052/   17C50 : 602C                		bra.s	loc_179EE
   30053/   17C52 :                     ; ===========================================================================
   30054/   17C52 :                     
   30055/   17C52 :                     loc_179C2:
   30056/   17C52 : 0C68 0030 003C      		cmpi.w	#$30,$3C(a0)
   30057/   17C58 : 6510                		bcs.s	loc_179DA
   30058/   17C5A : 6714                		beq.s	loc_179E0
   30059/   17C5C : 0C68 0038 003C      		cmpi.w	#$38,$3C(a0)
   30060/   17C62 : 651A                		bcs.s	loc_179EE
   30061/   17C64 : 5428 0025           		addq.b	#2,$25(a0)
   30062/   17C68 : 6014                		bra.s	loc_179EE
   30063/   17C6A :                     ; ===========================================================================
   30064/   17C6A :                     
   30065/   17C6A :                     loc_179DA:
   30066/   17C6A : 5168 0012           		subq.w	#8,$12(a0)
   30067/   17C6E : 600E                		bra.s	loc_179EE
   30068/   17C70 :                     ; ===========================================================================
   30069/   17C70 :                     
   30070/   17C70 :                     loc_179E0:
   30071/   17C70 : 4268 0012           		clr.w	$12(a0)
   30072/   17C74 : 303C 0081           		move.w	#$81,d0
   30073/   17C78 : 4EB9 0000 1396      		jsr	(PlaySound).l	; play GHZ music
   30074/   17C7E :                     
   30075/   17C7E :                     loc_179EE:
   30076/   17C7E : 6100 FEB4           		bsr.w	BossMove
   30077/   17C82 : 6000 FDF2           		bra.w	loc_177E6
   30078/   17C86 :                     ; ===========================================================================
   30079/   17C86 :                     
   30080/   17C86 :                     loc_179F6:				; XREF: Obj3D_ShipIndex
   30081/   17C86 : 317C 0400 0010      		move.w	#$400,$10(a0)
   30082/   17C8C : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   30083/   17C92 : 0C78 2AC0 F72A      		cmpi.w	#$2AC0,($FFFFF72A).w
   30084/   17C98 : 6706                		beq.s	loc_17A10
   30085/   17C9A : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   30086/   17C9E : 6006                		bra.s	loc_17A16
   30087/   17CA0 :                     ; ===========================================================================
   30088/   17CA0 :                     
   30089/   17CA0 :                     loc_17A10:
   30090/   17CA0 : 4A28 0001           		tst.b	1(a0)
   30091/   17CA4 : 6A08                		bpl.s	Obj3D_ShipDel
   30092/   17CA6 :                     
   30093/   17CA6 :                     loc_17A16:
   30094/   17CA6 : 6100 FE8C           		bsr.w	BossMove
   30095/   17CAA : 6000 FDCA           		bra.w	loc_177E6
   30096/   17CAE :                     ; ===========================================================================
   30097/   17CAE :                     
   30098/   17CAE :                     Obj3D_ShipDel:
   30099/   17CAE : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   30100/   17CB4 :                     ; ===========================================================================
   30101/   17CB4 :                     
   30102/   17CB4 :                     Obj3D_FaceMain:				; XREF: Obj3D_Index
   30103/   17CB4 : 7000                		moveq	#0,d0
   30104/   17CB6 : 7201                		moveq	#1,d1
   30105/   17CB8 : 2268 0034           		movea.l	$34(a0),a1
   30106/   17CBC : 1029 0025           		move.b	$25(a1),d0
   30107/   17CC0 : 5900                		subq.b	#4,d0
   30108/   17CC2 : 660A                		bne.s	loc_17A3E
   30109/   17CC4 : 0C69 2A00 0030      		cmpi.w	#$2A00,$30(a1)
   30110/   17CCA : 660A                		bne.s	loc_17A46
   30111/   17CCC : 7204                		moveq	#4,d1
   30112/   17CCE :                     
   30113/   17CCE :                     loc_17A3E:
   30114/   17CCE : 5D00                		subq.b	#6,d0
   30115/   17CD0 : 6B04                		bmi.s	loc_17A46
   30116/   17CD2 : 720A                		moveq	#$A,d1
   30117/   17CD4 : 6014                		bra.s	loc_17A5A
   30118/   17CD6 :                     ; ===========================================================================
   30119/   17CD6 :                     
   30120/   17CD6 :                     loc_17A46:
   30121/   17CD6 : 4A29 0020           		tst.b	$20(a1)
   30122/   17CDA : 6604                		bne.s	loc_17A50
   30123/   17CDC : 7205                		moveq	#5,d1
   30124/   17CDE : 600A                		bra.s	loc_17A5A
   30125/   17CE0 :                     ; ===========================================================================
   30126/   17CE0 :                     
   30127/   17CE0 :                     loc_17A50:
   30128/   17CE0 : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   30129/   17CE6 : 6502                		bcs.s	loc_17A5A
   30130/   17CE8 : 7204                		moveq	#4,d1
   30131/   17CEA :                     
   30132/   17CEA :                     loc_17A5A:
   30133/   17CEA : 1141 001C           		move.b	d1,$1C(a0)
   30134/   17CEE : 5500                		subq.b	#2,d0
   30135/   17CF0 : 660C                		bne.s	Obj3D_FaceDisp
   30136/   17CF2 : 117C 0006 001C      		move.b	#6,$1C(a0)
   30137/   17CF8 : 4A28 0001           		tst.b	1(a0)
   30138/   17CFC : 6A02                		bpl.s	Obj3D_FaceDel
   30139/   17CFE :                     
   30140/   17CFE :                     Obj3D_FaceDisp:
   30141/   17CFE : 603A                		bra.s	Obj3D_Display
   30142/   17D00 :                     ; ===========================================================================
   30143/   17D00 :                     
   30144/   17D00 :                     Obj3D_FaceDel:
   30145/   17D00 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   30146/   17D06 :                     ; ===========================================================================
   30147/   17D06 :                     
   30148/   17D06 :                     Obj3D_FlameMain:			; XREF: Obj3D_Index
   30149/   17D06 : 117C 0007 001C      		move.b	#7,$1C(a0)
   30150/   17D0C : 2268 0034           		movea.l	$34(a0),a1
   30151/   17D10 : 0C29 000C 0025      		cmpi.b	#$C,$25(a1)
   30152/   17D16 : 660E                		bne.s	loc_17A96
   30153/   17D18 : 117C 000B 001C      		move.b	#$B,$1C(a0)
   30154/   17D1E : 4A28 0001           		tst.b	1(a0)
   30155/   17D22 : 6A10                		bpl.s	Obj3D_FlameDel
   30156/   17D24 : 600C                		bra.s	Obj3D_FlameDisp
   30157/   17D26 :                     ; ===========================================================================
   30158/   17D26 :                     
   30159/   17D26 :                     loc_17A96:
   30160/   17D26 : 3029 0010           		move.w	$10(a1),d0
   30161/   17D2A : 6706                		beq.s	Obj3D_FlameDisp
   30162/   17D2C : 117C 0008 001C      		move.b	#8,$1C(a0)
   30163/   17D32 :                     
   30164/   17D32 :                     Obj3D_FlameDisp:
   30165/   17D32 : 6006                		bra.s	Obj3D_Display
   30166/   17D34 :                     ; ===========================================================================
   30167/   17D34 :                     
   30168/   17D34 :                     Obj3D_FlameDel:
   30169/   17D34 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   30170/   17D3A :                     ; ===========================================================================
   30171/   17D3A :                     
   30172/   17D3A :                     Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
   30173/   17D3A : 2268 0034           		movea.l	$34(a0),a1
   30174/   17D3E : 3169 0008 0008      		move.w	8(a1),8(a0)
   30175/   17D44 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   30176/   17D4A : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   30177/   17D50 : 43F9 0001 7F4C      		lea	(Ani_Eggman).l,a1
   30178/   17D56 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   30179/   17D5C : 1028 0022           		move.b	$22(a0),d0
   30180/   17D60 : 0200 0003           		andi.b	#3,d0
   30181/   17D64 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   30182/   17D6A : 8128 0001           		or.b	d0,1(a0)
   30183/   17D6E : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   30184/   17D74 :                     ; ===========================================================================
   30185/   17D74 :                     ; ---------------------------------------------------------------------------
   30186/   17D74 :                     ; Object 48 - ball on a	chain that Eggman swings (GHZ)
   30187/   17D74 :                     ; ---------------------------------------------------------------------------
   30188/   17D74 :                     
   30189/   17D74 :                     Obj48:					; XREF: Obj_Index
   30190/   17D74 : 7000                		moveq	#0,d0
   30191/   17D76 : 1028 0024           		move.b	$24(a0),d0
   30192/   17D7A : 323B 0006           		move.w	Obj48_Index(pc,d0.w),d1
   30193/   17D7E : 4EFB 1002           		jmp	Obj48_Index(pc,d1.w)
   30194/   17D82 :                     ; ===========================================================================
   30195/   17D82 : 000A                Obj48_Index:	dc.w Obj48_Main-Obj48_Index
   30196/   17D84 : 00C6                		dc.w Obj48_Base-Obj48_Index
   30197/   17D86 : 0128                		dc.w Obj48_Display2-Obj48_Index
   30198/   17D88 : 0176                		dc.w loc_17C68-Obj48_Index
   30199/   17D8A : 0192                		dc.w Obj48_ChkVanish-Obj48_Index
   30200/   17D8C :                     ; ===========================================================================
   30201/   17D8C :                     
   30202/   17D8C :                     Obj48_Main:				; XREF: Obj48_Index
   30203/   17D8C : 5428 0024           		addq.b	#2,$24(a0)
   30204/   17D90 : 317C 4080 0026      		move.w	#$4080,$26(a0)
   30205/   17D96 : 317C FE00 003E      		move.w	#-$200,$3E(a0)
   30206/   17D9C : 217C 0001 8064 0004 		move.l	#Map_BossItems,4(a0)
   30207/   17DA4 : 317C 046C 0002      		move.w	#$46C,2(a0)
   30208/   17DAA : 45E8 0028           		lea	$28(a0),a2
   30209/   17DAE : 14FC 0000           		move.b	#0,(a2)+
   30210/   17DB2 : 7205                		moveq	#5,d1
   30211/   17DB4 : 2248                		movea.l	a0,a1
   30212/   17DB6 : 6038                		bra.s	loc_17B60
   30213/   17DB8 :                     ; ===========================================================================
   30214/   17DB8 :                     
   30215/   17DB8 :                     Obj48_MakeLinks:
   30216/   17DB8 : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   30217/   17DBE : 665A                		bne.s	Obj48_MakeBall
   30218/   17DC0 : 3368 0008 0008      		move.w	8(a0),8(a1)
   30219/   17DC6 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   30220/   17DCC : (MACRO)             		_move.b	#$48,0(a1)	; load chain link object
   30220/   17DCC :  (MACRO-2)                          insn2op move.b, #$48,0(a1)
   30220/   17DCC : 137C 0048 0001                              !move.b   #$48,1+0(a1)
   30220/   17DD1 :                                             !org    *-1
   30220/   17DD1 : 00                                          !dc.b   0
   30221/   17DD2 : 137C 0006 0024      		move.b	#6,$24(a1)
   30222/   17DD8 : 237C 0000 7C54 0004 		move.l	#Map_obj15,4(a1)
   30223/   17DE0 : 337C 0380 0002      		move.w	#$380,2(a1)
   30224/   17DE6 : 137C 0001 001A      		move.b	#1,$1A(a1)
   30225/   17DEC : 5228 0028           		addq.b	#1,$28(a0)
   30226/   17DF0 :                     
   30227/   17DF0 :                     loc_17B60:				; XREF: Obj48_Main
   30228/   17DF0 : 3A09                		move.w	a1,d5
   30229/   17DF2 : 0445 D000           		subi.w	#$D000,d5
   30230/   17DF6 : EC4D                		lsr.w	#6,d5
   30231/   17DF8 : 0245 007F           		andi.w	#$7F,d5
   30232/   17DFC : 14C5                		move.b	d5,(a2)+
   30233/   17DFE : 137C 0004 0001      		move.b	#4,1(a1)
   30234/   17E04 : 137C 0008 0019      		move.b	#8,$19(a1)
   30235/   17E0A : 137C 0006 0018      		move.b	#6,$18(a1)
   30236/   17E10 : 2368 0034 0034      		move.l	$34(a0),$34(a1)
   30237/   17E16 : 51C9 FFA0           		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
   30238/   17E1A :                     
   30239/   17E1A :                     Obj48_MakeBall:
   30240/   17E1A : 137C 0008 0024      		move.b	#8,$24(a1)
   30241/   17E20 : 237C 0000 81B6 0004 		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
   30242/   17E28 : 337C 43AA 0002      		move.w	#$43AA,2(a1)	; use different	graphics
   30243/   17E2E : 137C 0001 001A      		move.b	#1,$1A(a1)
   30244/   17E34 : 137C 0005 0018      		move.b	#5,$18(a1)
   30245/   17E3A : 137C 0081 0020      		move.b	#$81,$20(a1)	; make object hurt Sonic
   30246/   17E40 : 4E75                		rts	
   30247/   17E42 :                     ; ===========================================================================
   30248/   17E42 :                     
   30249/   17E42 : 0010 2030 4060      Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
   30250/   17E48 :                     
   30251/   17E48 :                     ; ===========================================================================
   30252/   17E48 :                     
   30253/   17E48 :                     Obj48_Base:				; XREF: Obj48_Index
   30254/   17E48 : 47F9 0001 7E42      		lea	(Obj48_PosData).l,a3
   30255/   17E4E : 45E8 0028           		lea	$28(a0),a2
   30256/   17E52 : 7C00                		moveq	#0,d6
   30257/   17E54 : 1C1A                		move.b	(a2)+,d6
   30258/   17E56 :                     
   30259/   17E56 :                     loc_17BC6:
   30260/   17E56 : 7800                		moveq	#0,d4
   30261/   17E58 : 181A                		move.b	(a2)+,d4
   30262/   17E5A : ED4C                		lsl.w	#6,d4
   30263/   17E5C : 0684 00FF D000      		addi.l	#$FFD000,d4
   30264/   17E62 : 2244                		movea.l	d4,a1
   30265/   17E64 : 101B                		move.b	(a3)+,d0
   30266/   17E66 : B029 003C           		cmp.b	$3C(a1),d0
   30267/   17E6A : 6704                		beq.s	loc_17BE0
   30268/   17E6C : 5229 003C           		addq.b	#1,$3C(a1)
   30269/   17E70 :                     
   30270/   17E70 :                     loc_17BE0:
   30271/   17E70 : 51CE FFE4           		dbf	d6,loc_17BC6
   30272/   17E74 :                     
   30273/   17E74 : B029 003C           		cmp.b	$3C(a1),d0
   30274/   17E78 : 6610                		bne.s	loc_17BFA
   30275/   17E7A : 2268 0034           		movea.l	$34(a0),a1
   30276/   17E7E : 0C29 0006 0025      		cmpi.b	#6,$25(a1)
   30277/   17E84 : 6604                		bne.s	loc_17BFA
   30278/   17E86 : 5428 0024           		addq.b	#2,$24(a0)
   30279/   17E8A :                     
   30280/   17E8A :                     loc_17BFA:
   30281/   17E8A : 0C68 0020 0032      		cmpi.w	#$20,$32(a0)
   30282/   17E90 : 6704                		beq.s	Obj48_Display
   30283/   17E92 : 5268 0032           		addq.w	#1,$32(a0)
   30284/   17E96 :                     
   30285/   17E96 :                     Obj48_Display:
   30286/   17E96 : 6100 0022           		bsr.w	sub_17C2A
   30287/   17E9A : 1028 0026           		move.b	$26(a0),d0
   30288/   17E9E : 4EB9 0000 7BC6      		jsr	(Obj15_Move2).l
   30289/   17EA4 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   30290/   17EAA :                     ; ===========================================================================
   30291/   17EAA :                     
   30292/   17EAA :                     Obj48_Display2:				; XREF: Obj48_Index
   30293/   17EAA : 6100 000E           		bsr.w	sub_17C2A
   30294/   17EAE : 4EB9 0000 7B86      		jsr	(Obj48_Move).l
   30295/   17EB4 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   30296/   17EBA :                     
   30297/   17EBA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   30298/   17EBA :                     
   30299/   17EBA :                     
   30300/   17EBA :                     sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
   30301/   17EBA : 2268 0034           		movea.l	$34(a0),a1
   30302/   17EBE : 0628 0020 001B      		addi.b	#$20,$1B(a0)
   30303/   17EC4 : 6406                		bcc.s	loc_17C3C
   30304/   17EC6 : 0868 0000 001A      		bchg	#0,$1A(a0)
   30305/   17ECC :                     
   30306/   17ECC :                     loc_17C3C:
   30307/   17ECC : 3169 0008 003A      		move.w	8(a1),$3A(a0)
   30308/   17ED2 : 3029 000C           		move.w	$C(a1),d0
   30309/   17ED6 : D068 0032           		add.w	$32(a0),d0
   30310/   17EDA : 3140 0038           		move.w	d0,$38(a0)
   30311/   17EDE : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   30312/   17EE4 : 4A29 0022           		tst.b	$22(a1)
   30313/   17EE8 : 6A0C                		bpl.s	locret_17C66
   30314/   17EEA : (MACRO)             		_move.b	#$3F,0(a0)
   30314/   17EEA :  (MACRO-2)                          insn2op move.b, #$3F,0(a0)
   30314/   17EEA : 117C 003F 0001                              !move.b   #$3F,1+0(a0)
   30314/   17EEF :                                             !org    *-1
   30314/   17EEF : 00                                          !dc.b   0
   30315/   17EF0 : 117C 0000 0024      		move.b	#0,$24(a0)
   30316/   17EF6 :                     
   30317/   17EF6 :                     locret_17C66:
   30318/   17EF6 : 4E75                		rts	
   30319/   17EF8 :                     ; End of function sub_17C2A
   30320/   17EF8 :                     
   30321/   17EF8 :                     ; ===========================================================================
   30322/   17EF8 :                     
   30323/   17EF8 :                     loc_17C68:				; XREF: Obj48_Index
   30324/   17EF8 : 2268 0034           		movea.l	$34(a0),a1
   30325/   17EFC : 4A29 0022           		tst.b	$22(a1)
   30326/   17F00 : 6A0C                		bpl.s	Obj48_Display3
   30327/   17F02 : (MACRO)             		_move.b	#$3F,0(a0)
   30327/   17F02 :  (MACRO-2)                          insn2op move.b, #$3F,0(a0)
   30327/   17F02 : 117C 003F 0001                              !move.b   #$3F,1+0(a0)
   30327/   17F07 :                                             !org    *-1
   30327/   17F07 : 00                                          !dc.b   0
   30328/   17F08 : 117C 0000 0024      		move.b	#0,$24(a0)
   30329/   17F0E :                     
   30330/   17F0E :                     Obj48_Display3:
   30331/   17F0E : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   30332/   17F14 :                     ; ===========================================================================
   30333/   17F14 :                     
   30334/   17F14 :                     Obj48_ChkVanish:			; XREF: Obj48_Index
   30335/   17F14 : 7000                		moveq	#0,d0
   30336/   17F16 : 4A28 001A           		tst.b	$1A(a0)
   30337/   17F1A : 6602                		bne.s	Obj48_Vanish
   30338/   17F1C : 5200                		addq.b	#1,d0
   30339/   17F1E :                     
   30340/   17F1E :                     Obj48_Vanish:
   30341/   17F1E : 1140 001A           		move.b	d0,$1A(a0)
   30342/   17F22 : 2268 0034           		movea.l	$34(a0),a1
   30343/   17F26 : 4A29 0022           		tst.b	$22(a1)
   30344/   17F2A : 6A1A                		bpl.s	Obj48_Display4
   30345/   17F2C : 117C 0000 0020      		move.b	#0,$20(a0)
   30346/   17F32 : 6100 FBBC           		bsr.w	BossDefeated
   30347/   17F36 : 5328 003C           		subq.b	#1,$3C(a0)
   30348/   17F3A : 6A0A                		bpl.s	Obj48_Display4
   30349/   17F3C : 10BC 003F           		move.b	#$3F,(a0)
   30350/   17F40 : 117C 0000 0024      		move.b	#0,$24(a0)
   30351/   17F46 :                     
   30352/   17F46 :                     Obj48_Display4:
   30353/   17F46 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   30354/   17F4C :                     ; ===========================================================================
   30355/   17F4C :                     Ani_Eggman:
   30356/   17F4C :                     		include	"_anim/Eggman.asm"
(1)    1/   17F4C :                     ; ---------------------------------------------------------------------------
(1)    2/   17F4C :                     ; Animation script - Eggman (bosses)
(1)    3/   17F4C :                     ; ---------------------------------------------------------------------------
(1)    4/   17F4C : 0018                		dc.w byte_17CD4-Ani_Eggman
(1)    5/   17F4E : 001C                		dc.w byte_17CD8-Ani_Eggman
(1)    6/   17F50 : 0020                		dc.w byte_17CDC-Ani_Eggman
(1)    7/   17F52 : 0024                		dc.w byte_17CE0-Ani_Eggman
(1)    8/   17F54 : 0028                		dc.w byte_17CE4-Ani_Eggman
(1)    9/   17F56 : 002C                		dc.w byte_17CE8-Ani_Eggman
(1)   10/   17F58 : 0030                		dc.w byte_17CEC-Ani_Eggman
(1)   11/   17F5A : 0034                		dc.w byte_17CF0-Ani_Eggman
(1)   12/   17F5C : 0038                		dc.w byte_17CF4-Ani_Eggman
(1)   13/   17F5E : 003C                		dc.w byte_17CF8-Ani_Eggman
(1)   14/   17F60 : 0040                		dc.w byte_17CFC-Ani_Eggman
(1)   15/   17F62 : 0044                		dc.w byte_17D00-Ani_Eggman
(1)   16/   17F64 : 0F00 FF00           byte_17CD4:	dc.b $F, 0, $FF, 0
(1)   17/   17F68 : 0501 02FF           byte_17CD8:	dc.b 5,	1, 2, $FF
(1)   18/   17F6C : 0301 02FF           byte_17CDC:	dc.b 3,	1, 2, $FF
(1)   19/   17F70 : 0101 02FF           byte_17CE0:	dc.b 1,	1, 2, $FF
(1)   20/   17F74 : 0403 04FF           byte_17CE4:	dc.b 4,	3, 4, $FF
(1)   21/   17F78 : 1F05 01FF           byte_17CE8:	dc.b $1F, 5, 1,	$FF
(1)   22/   17F7C : 0306 01FF           byte_17CEC:	dc.b 3,	6, 1, $FF
(1)   23/   17F80 : 0F0A FF00           byte_17CF0:	dc.b $F, $A, $FF, 0
(1)   24/   17F84 : 0308 09FF           byte_17CF4:	dc.b 3,	8, 9, $FF
(1)   25/   17F88 : 0108 09FF           byte_17CF8:	dc.b 1,	8, 9, $FF
(1)   26/   17F8C : 0F07 FF00           byte_17CFC:	dc.b $F, 7, $FF, 0
(1)   27/   17F90 : 0209 080B 0C0B 0C09 byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
                    08FE 0200           
(1)   28/   17F9C : (MACRO)             		align 2
(1)   28/   17F9C :  (MACRO-2)                  cnop 0,2
(1)   28/   17F9C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   30357/   17F9C :                     
   30358/   17F9C :                     ; ---------------------------------------------------------------------------
   30359/   17F9C :                     ; Sprite mappings - Eggman (boss levels)
   30360/   17F9C :                     ; ---------------------------------------------------------------------------
   30361/   17F9C :                     Map_Eggman:
   30362/   17F9C :                     		include	"_maps/Eggman.asm"
(1)    1/   17F9C :                     ; ---------------------------------------------------------------------------
(1)    2/   17F9C :                     ; Sprite mappings - Eggman (boss levels)
(1)    3/   17F9C :                     ; ---------------------------------------------------------------------------
(1)    4/   17F9C : 001A 0039           		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
(1)    5/   17FA0 : 0044 004F           		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
(1)    6/   17FA4 : 005F 006F           		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
(1)    7/   17FA8 : 007F 008F           		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
(1)    8/   17FAC : 00A4 00AA           		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
(1)    9/   17FB0 : 00B0 00B1           		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
(1)   10/   17FB4 : 00BC                		dc.w byte_17DC8-Map_Eggman
(1)   11/   17FB6 : 06                  byte_17D26:	dc.b 6
(1)   12/   17FB7 : EC01 000A E4        		dc.b $EC, 1, 0,	$A, $E4
(1)   13/   17FBC : EC05 000C 0C        		dc.b $EC, 5, 0,	$C, $C
(1)   14/   17FC1 : FC0E 2010 E4        		dc.b $FC, $E, $20, $10,	$E4
(1)   15/   17FC6 : FC0E 201C 04        		dc.b $FC, $E, $20, $1C,	4
(1)   16/   17FCB : 140C 2028 EC        		dc.b $14, $C, $20, $28,	$EC
(1)   17/   17FD0 : 1400 202C 0C        		dc.b $14, 0, $20, $2C, $C
(1)   18/   17FD5 : 02                  byte_17D45:	dc.b 2
(1)   19/   17FD6 : E404 0000 F4        		dc.b $E4, 4, 0,	0, $F4
(1)   20/   17FDB : EC0D 0002 EC        		dc.b $EC, $D, 0, 2, $EC
(1)   21/   17FE0 : 02                  byte_17D50:	dc.b 2
(1)   22/   17FE1 : E404 0000 F4        		dc.b $E4, 4, 0,	0, $F4
(1)   23/   17FE6 : EC0D 0035 EC        		dc.b $EC, $D, 0, $35, $EC
(1)   24/   17FEB : 03                  byte_17D5B:	dc.b 3
(1)   25/   17FEC : E408 003D F4        		dc.b $E4, 8, 0,	$3D, $F4
(1)   26/   17FF1 : EC09 0040 EC        		dc.b $EC, 9, 0,	$40, $EC
(1)   27/   17FF6 : EC05 0046 04        		dc.b $EC, 5, 0,	$46, 4
(1)   28/   17FFB : 03                  byte_17D6B:	dc.b 3
(1)   29/   17FFC : E408 004A F4        		dc.b $E4, 8, 0,	$4A, $F4
(1)   30/   18001 : EC09 004D EC        		dc.b $EC, 9, 0,	$4D, $EC
(1)   31/   18006 : EC05 0053 04        		dc.b $EC, 5, 0,	$53, 4
(1)   32/   1800B : 03                  byte_17D7B:	dc.b 3
(1)   33/   1800C : E408 0057 F4        		dc.b $E4, 8, 0,	$57, $F4
(1)   34/   18011 : EC09 005A EC        		dc.b $EC, 9, 0,	$5A, $EC
(1)   35/   18016 : EC05 0060 04        		dc.b $EC, 5, 0,	$60, 4
(1)   36/   1801B : 03                  byte_17D8B:	dc.b 3
(1)   37/   1801C : E404 0064 04        		dc.b $E4, 4, 0,	$64, 4
(1)   38/   18021 : E404 0000 F4        		dc.b $E4, 4, 0,	0, $F4
(1)   39/   18026 : EC0D 0035 EC        		dc.b $EC, $D, 0, $35, $EC
(1)   40/   1802B : 04                  byte_17D9B:	dc.b 4
(1)   41/   1802C : E409 0066 F4        		dc.b $E4, 9, 0,	$66, $F4
(1)   42/   18031 : E408 0057 F4        		dc.b $E4, 8, 0,	$57, $F4
(1)   43/   18036 : EC09 005A EC        		dc.b $EC, 9, 0,	$5A, $EC
(1)   44/   1803B : EC05 0060 04        		dc.b $EC, 5, 0,	$60, 4
(1)   45/   18040 : 01                  byte_17DB0:	dc.b 1
(1)   46/   18041 : 0405 002D 22        		dc.b 4,	5, 0, $2D, $22
(1)   47/   18046 : 01                  byte_17DB6:	dc.b 1
(1)   48/   18047 : 0405 0031 22        		dc.b 4,	5, 0, $31, $22
(1)   49/   1804C : 00                  byte_17DBC:	dc.b 0
(1)   50/   1804D : 02                  byte_17DBD:	dc.b 2
(1)   51/   1804E : 0008 012A 22        		dc.b 0,	8, 1, $2A, $22
(1)   52/   18053 : 0808 112A 22        		dc.b 8,	8, $11,	$2A, $22
(1)   53/   18058 : 02                  byte_17DC8:	dc.b 2
(1)   54/   18059 : F80B 012D 22        		dc.b $F8, $B, 1, $2D, $22
(1)   55/   1805E : 0001 0139 3A        		dc.b 0,	1, 1, $39, $3A
(1)   56/   18063 : (MACRO)             		align 2
(1)   56/   18063 :  (MACRO-2)                  cnop 0,2
(1)   56/   18063 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   56/   18063 : =$3C                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   56/   18064 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   30363/   18064 :                     
   30364/   18064 :                     ; ---------------------------------------------------------------------------
   30365/   18064 :                     ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
   30366/   18064 :                     ; ---------------------------------------------------------------------------
   30367/   18064 :                     Map_BossItems:
   30368/   18064 :                     		include	"_maps/Boss items.asm"
(1)    1/   18064 :                     ; ---------------------------------------------------------------------------
(1)    2/   18064 :                     ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
(1)    3/   18064 :                     ; ---------------------------------------------------------------------------
(1)    4/   18064 : 0010 0016           		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
(1)    5/   18068 : 0022 0028           		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
(1)    6/   1806C : 002E 0034           		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
(1)    7/   18070 : 004A 0056           		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
(1)    8/   18074 : 01                  byte_17DE4:	dc.b 1
(1)    9/   18075 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   10/   1807A : 02                  byte_17DEA:	dc.b 2
(1)   11/   1807B : FC04 0004 F8        		dc.b $FC, 4, 0,	4, $F8
(1)   12/   18080 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   13/   18085 : 00                  		dc.b 0
(1)   14/   18086 : 01                  byte_17DF6:	dc.b 1
(1)   15/   18087 : FC00 0006 FC        		dc.b $FC, 0, 0,	6, $FC
(1)   16/   1808C : 01                  byte_17DFC:	dc.b 1
(1)   17/   1808D : 1409 0007 F4        		dc.b $14, 9, 0,	7, $F4
(1)   18/   18092 : 01                  byte_17E02:	dc.b 1
(1)   19/   18093 : 1405 000D F8        		dc.b $14, 5, 0,	$D, $F8
(1)   20/   18098 : 04                  byte_17E08:	dc.b 4
(1)   21/   18099 : F004 0011 F8        		dc.b $F0, 4, 0,	$11, $F8
(1)   22/   1809E : F801 0013 F8        		dc.b $F8, 1, 0,	$13, $F8
(1)   23/   180A3 : F801 0813 00        		dc.b $F8, 1, 8,	$13, 0
(1)   24/   180A8 : 0804 0015 F8        		dc.b 8,	4, 0, $15, $F8
(1)   25/   180AD : 00                  		dc.b 0
(1)   26/   180AE : 02                  byte_17E1E:	dc.b 2
(1)   27/   180AF : 0005 0017 00        		dc.b 0,	5, 0, $17, 0
(1)   28/   180B4 : 0000 001B 10        		dc.b 0,	0, 0, $1B, $10
(1)   29/   180B9 : 00                  		dc.b 0
(1)   30/   180BA : 02                  byte_17E2A:	dc.b 2
(1)   31/   180BB : 1804 001C 00        		dc.b $18, 4, 0,	$1C, 0
(1)   32/   180C0 : 000B 001E 10        		dc.b 0,	$B, 0, $1E, $10
(1)   33/   180C5 : (MACRO)             		align 2
(1)   33/   180C5 :  (MACRO-2)                  cnop 0,2
(1)   33/   180C5 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   33/   180C5 : =$3D                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   33/   180C6 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   30369/   180C6 :                     
   30370/   180C6 :                     ; ===========================================================================
   30371/   180C6 :                     ; ---------------------------------------------------------------------------
   30372/   180C6 :                     ; Object 77 - Eggman (LZ)
   30373/   180C6 :                     ; ---------------------------------------------------------------------------
   30374/   180C6 :                     
   30375/   180C6 :                     Obj77:					; XREF: Obj_Index
   30376/   180C6 : 7000                		moveq	#0,d0
   30377/   180C8 : 1028 0024           		move.b	$24(a0),d0
   30378/   180CC : 323B 0006           		move.w	Obj77_Index(pc,d0.w),d1
   30379/   180D0 : 4EFB 1002           		jmp	Obj77_Index(pc,d1.w)
   30380/   180D4 :                     ; ===========================================================================
   30381/   180D4 : 000E                Obj77_Index:	dc.w Obj77_Main-Obj77_Index
   30382/   180D6 : 0096                		dc.w Obj77_ShipMain-Obj77_Index
   30383/   180D8 : 032C                		dc.w Obj77_FaceMain-Obj77_Index
   30384/   180DA : 037A                		dc.w Obj77_FlameMain-Obj77_Index
   30385/   180DC :                     
   30386/   180DC : 0200                Obj77_ObjData:	dc.b 2,	0		; routine number, animation
   30387/   180DE : 0401                		dc.b 4,	1
   30388/   180E0 : 0607                		dc.b 6,	7
   30389/   180E2 :                     ; ===========================================================================
   30390/   180E2 :                     
   30391/   180E2 :                     Obj77_Main:				; XREF: Obj77_Index
   30392/   180E2 : 317C 1E10 0008      		move.w	#$1E10,8(a0)
   30393/   180E8 : 317C 05C0 000C      		move.w	#$5C0,$C(a0)
   30394/   180EE : 3168 0008 0030      		move.w	8(a0),$30(a0)
   30395/   180F4 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   30396/   180FA : 117C 000F 0020      		move.b	#$F,$20(a0)
   30397/   18100 : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   30398/   18106 : 117C 0004 0018      		move.b	#4,$18(a0)
   30399/   1810C : 45FA FFCE           		lea	Obj77_ObjData(pc),a2
   30400/   18110 : 2248                		movea.l	a0,a1
   30401/   18112 : 7202                		moveq	#2,d1
   30402/   18114 : 601A                		bra.s	Obj77_LoadBoss
   30403/   18116 :                     ; ===========================================================================
   30404/   18116 :                     
   30405/   18116 :                     Obj77_Loop:
   30406/   18116 : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   30407/   1811C : 664C                		bne.s	Obj77_ShipMain
   30408/   1811E : (MACRO)             		_move.b	#$77,0(a1)
   30408/   1811E :  (MACRO-2)                          insn2op move.b, #$77,0(a1)
   30408/   1811E : 137C 0077 0001                              !move.b   #$77,1+0(a1)
   30408/   18123 :                                             !org    *-1
   30408/   18123 : 00                                          !dc.b   0
   30409/   18124 : 3368 0008 0008      		move.w	8(a0),8(a1)
   30410/   1812A : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   30411/   18130 :                     
   30412/   18130 :                     Obj77_LoadBoss:				; XREF: Obj77_Main
   30413/   18130 : 08A8 0000 0022      		bclr	#0,$22(a0)
   30414/   18136 : 4229 0025           		clr.b	$25(a1)
   30415/   1813A : 135A 0024           		move.b	(a2)+,$24(a1)
   30416/   1813E : 135A 001C           		move.b	(a2)+,$1C(a1)
   30417/   18142 : 1368 0018 0018      		move.b	$18(a0),$18(a1)
   30418/   18148 : 237C 0001 7F9C 0004 		move.l	#Map_Eggman,4(a1)
   30419/   18150 : 337C 0400 0002      		move.w	#$400,2(a1)
   30420/   18156 : 137C 0004 0001      		move.b	#4,1(a1)
   30421/   1815C : 137C 0020 0019      		move.b	#$20,$19(a1)
   30422/   18162 : 2348 0034           		move.l	a0,$34(a1)
   30423/   18166 : 51C9 FFAE           		dbf	d1,Obj77_Loop
   30424/   1816A :                     
   30425/   1816A :                     Obj77_ShipMain:
   30426/   1816A : 43F8 D000           		lea	($FFFFD000).w,a1
   30427/   1816E : 7000                		moveq	#0,d0
   30428/   18170 : 1028 0025           		move.b	$25(a0),d0
   30429/   18174 : 323B 0028           		move.w	Obj77_ShipIndex(pc,d0.w),d1
   30430/   18178 : 4EBB 1024           		jsr	Obj77_ShipIndex(pc,d1.w)
   30431/   1817C : 43F9 0001 7F4C      		lea	(Ani_Eggman).l,a1
   30432/   18182 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   30433/   18188 : 7003                		moveq	#3,d0
   30434/   1818A : C028 0022           		and.b	$22(a0),d0
   30435/   1818E : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   30436/   18194 : 8128 0001           		or.b	d0,1(a0)
   30437/   18198 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   30438/   1819E :                     ; ===========================================================================
   30439/   1819E : 0010 0092           Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
   30440/   181A2 : 00D2 0110           		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
   30441/   181A6 : 01AE 01E8           		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
   30442/   181AA : 021C 0244           		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
   30443/   181AE :                     ; ===========================================================================
   30444/   181AE :                     
   30445/   181AE :                     loc_17F1E:				; XREF: Obj77_ShipIndex
   30446/   181AE : 3029 0008           		move.w	8(a1),d0
   30447/   181B2 : 0C40 1DA0           		cmpi.w	#$1DA0,d0
   30448/   181B6 : 6510                		bcs.s	loc_17F38
   30449/   181B8 : 317C FE80 0012      		move.w	#-$180,$12(a0)
   30450/   181BE : 317C 0060 0010      		move.w	#$60,$10(a0)
   30451/   181C4 : 5428 0025           		addq.b	#2,$25(a0)
   30452/   181C8 :                     
   30453/   181C8 :                     loc_17F38:
   30454/   181C8 : 6100 F96A           		bsr.w	BossMove
   30455/   181CC : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   30456/   181D2 : 3168 0030 0008      		move.w	$30(a0),8(a0)
   30457/   181D8 :                     
   30458/   181D8 :                     loc_17F48:
   30459/   181D8 : 4A28 003D           		tst.b	$3D(a0)
   30460/   181DC : 6640                		bne.s	loc_17F8E
   30461/   181DE : 4A28 0022           		tst.b	$22(a0)
   30462/   181E2 : 6B3E                		bmi.s	loc_17F92
   30463/   181E4 : 4A28 0020           		tst.b	$20(a0)
   30464/   181E8 : 6632                		bne.s	locret_17F8C
   30465/   181EA : 4A28 003E           		tst.b	$3E(a0)
   30466/   181EE : 6610                		bne.s	loc_17F70
   30467/   181F0 : 117C 0020 003E      		move.b	#$20,$3E(a0)
   30468/   181F6 : 303C 00AC           		move.w	#$AC,d0
   30469/   181FA : 4EB9 0000 139C      		jsr	(PlaySound_Special).l
   30470/   18200 :                     
   30471/   18200 :                     loc_17F70:
   30472/   18200 : 43F8 FB22           		lea	($FFFFFB22).w,a1
   30473/   18204 : 7000                		moveq	#0,d0
   30474/   18206 : 4A51                		tst.w	(a1)
   30475/   18208 : 6604                		bne.s	loc_17F7E
   30476/   1820A : 303C 0EEE           		move.w	#$EEE,d0
   30477/   1820E :                     
   30478/   1820E :                     loc_17F7E:
   30479/   1820E : 3280                		move.w	d0,(a1)
   30480/   18210 : 5328 003E           		subq.b	#1,$3E(a0)
   30481/   18214 : 6606                		bne.s	locret_17F8C
   30482/   18216 : 117C 000F 0020      		move.b	#$F,$20(a0)
   30483/   1821C :                     
   30484/   1821C :                     locret_17F8C:
   30485/   1821C : 4E75                		rts	
   30486/   1821E :                     ; ===========================================================================
   30487/   1821E :                     
   30488/   1821E :                     loc_17F8E:				; XREF: loc_17F48
   30489/   1821E : 6000 F8D0           		bra.w	BossDefeated
   30490/   18222 :                     ; ===========================================================================
   30491/   18222 :                     
   30492/   18222 :                     loc_17F92:				; XREF: loc_17F48
   30493/   18222 : 7064                		moveq	#100,d0
   30494/   18224 : 6100 46FC           		bsr.w	AddPoints
   30495/   18228 : 117C 00FF 003D      		move.b	#-1,$3D(a0)
   30496/   1822E : 4E75                		rts	
   30497/   18230 :                     ; ===========================================================================
   30498/   18230 :                     
   30499/   18230 :                     loc_17FA0:				; XREF: Obj77_ShipIndex
   30500/   18230 : 70FE                		moveq	#-2,d0
   30501/   18232 : 0C68 1E48 0030      		cmpi.w	#$1E48,$30(a0)
   30502/   18238 : 650C                		bcs.s	loc_17FB6
   30503/   1823A : 317C 1E48 0030      		move.w	#$1E48,$30(a0)
   30504/   18240 : 4268 0010           		clr.w	$10(a0)
   30505/   18244 : 5240                		addq.w	#1,d0
   30506/   18246 :                     
   30507/   18246 :                     loc_17FB6:
   30508/   18246 : 0C68 0500 0038      		cmpi.w	#$500,$38(a0)
   30509/   1824C : 6E0C                		bgt.s	loc_17FCA
   30510/   1824E : 317C 0500 0038      		move.w	#$500,$38(a0)
   30511/   18254 : 4268 0012           		clr.w	$12(a0)
   30512/   18258 : 5240                		addq.w	#1,d0
   30513/   1825A :                     
   30514/   1825A :                     loc_17FCA:
   30515/   1825A : 6610                		bne.s	loc_17FDC
   30516/   1825C : 317C 0140 0010      		move.w	#$140,$10(a0)
   30517/   18262 : 317C FE00 0012      		move.w	#-$200,$12(a0)
   30518/   18268 : 5428 0025           		addq.b	#2,$25(a0)
   30519/   1826C :                     
   30520/   1826C :                     loc_17FDC:
   30521/   1826C : 6000 FF5A           		bra.w	loc_17F38
   30522/   18270 :                     ; ===========================================================================
   30523/   18270 :                     
   30524/   18270 :                     loc_17FE0:				; XREF: Obj77_ShipIndex
   30525/   18270 : 70FE                		moveq	#-2,d0
   30526/   18272 : 0C68 1E70 0030      		cmpi.w	#$1E70,$30(a0)
   30527/   18278 : 650C                		bcs.s	loc_17FF6
   30528/   1827A : 317C 1E70 0030      		move.w	#$1E70,$30(a0)
   30529/   18280 : 4268 0010           		clr.w	$10(a0)
   30530/   18284 : 5240                		addq.w	#1,d0
   30531/   18286 :                     
   30532/   18286 :                     loc_17FF6:
   30533/   18286 : 0C68 04C0 0038      		cmpi.w	#$4C0,$38(a0)
   30534/   1828C : 6E0C                		bgt.s	loc_1800A
   30535/   1828E : 317C 04C0 0038      		move.w	#$4C0,$38(a0)
   30536/   18294 : 4268 0012           		clr.w	$12(a0)
   30537/   18298 : 5240                		addq.w	#1,d0
   30538/   1829A :                     
   30539/   1829A :                     loc_1800A:
   30540/   1829A : 660E                		bne.s	loc_1801A
   30541/   1829C : 317C FE80 0012      		move.w	#-$180,$12(a0)
   30542/   182A2 : 5428 0025           		addq.b	#2,$25(a0)
   30543/   182A6 : 4228 003F           		clr.b	$3F(a0)
   30544/   182AA :                     
   30545/   182AA :                     loc_1801A:
   30546/   182AA : 6000 FF1C           		bra.w	loc_17F38
   30547/   182AE :                     ; ===========================================================================
   30548/   182AE :                     
   30549/   182AE :                     loc_1801E:				; XREF: Obj77_ShipIndex
   30550/   182AE : 0C68 0100 0038      		cmpi.w	#$100,$38(a0)
   30551/   182B4 : 6E28                		bgt.s	loc_1804E
   30552/   182B6 : 317C 0100 0038      		move.w	#$100,$38(a0)
   30553/   182BC : 317C 0140 0010      		move.w	#$140,$10(a0)
   30554/   182C2 : 317C FF80 0012      		move.w	#-$80,$12(a0)
   30555/   182C8 : 4A28 003D           		tst.b	$3D(a0)
   30556/   182CC : 6708                		beq.s	loc_18046
   30557/   182CE : E1E8 0010           		asl	$10(a0)
   30558/   182D2 : E1E8 0012           		asl	$12(a0)
   30559/   182D6 :                     
   30560/   182D6 :                     loc_18046:
   30561/   182D6 : 5428 0025           		addq.b	#2,$25(a0)
   30562/   182DA : 6000 FEEC           		bra.w	loc_17F38
   30563/   182DE :                     ; ===========================================================================
   30564/   182DE :                     
   30565/   182DE :                     loc_1804E:
   30566/   182DE : 08E8 0000 0022      		bset	#0,$22(a0)
   30567/   182E4 : 5428 003F           		addq.b	#2,$3F(a0)
   30568/   182E8 : 1028 003F           		move.b	$3F(a0),d0
   30569/   182EC : 4EB9 0000 29EA      		jsr	(CalcSine).l
   30570/   182F2 : 4A41                		tst.w	d1
   30571/   182F4 : 6A06                		bpl.s	loc_1806C
   30572/   182F6 : 08A8 0000 0022      		bclr	#0,$22(a0)
   30573/   182FC :                     
   30574/   182FC :                     loc_1806C:
   30575/   182FC : E840                		asr.w	#4,d0
   30576/   182FE : 4840                		swap	d0
   30577/   18300 : 4240                		clr.w	d0
   30578/   18302 : D0A8 0030           		add.l	$30(a0),d0
   30579/   18306 : 4840                		swap	d0
   30580/   18308 : 3140 0008           		move.w	d0,8(a0)
   30581/   1830C : 3028 0012           		move.w	$12(a0),d0
   30582/   18310 : 3238 D00C           		move.w	($FFFFD00C).w,d1
   30583/   18314 : 9268 000C           		sub.w	$C(a0),d1
   30584/   18318 : 6518                		bcs.s	loc_180A2
   30585/   1831A : 0441 0048           		subi.w	#$48,d1
   30586/   1831E : 6512                		bcs.s	loc_180A2
   30587/   18320 : E240                		asr.w	#1,d0
   30588/   18322 : 0441 0028           		subi.w	#$28,d1
   30589/   18326 : 650A                		bcs.s	loc_180A2
   30590/   18328 : E240                		asr.w	#1,d0
   30591/   1832A : 0441 0028           		subi.w	#$28,d1
   30592/   1832E : 6502                		bcs.s	loc_180A2
   30593/   18330 : 7000                		moveq	#0,d0
   30594/   18332 :                     
   30595/   18332 :                     loc_180A2:
   30596/   18332 : 48C0                		ext.l	d0
   30597/   18334 : E180                		asl.l	#8,d0
   30598/   18336 : 4A28 003D           		tst.b	$3D(a0)
   30599/   1833A : 6702                		beq.s	loc_180AE
   30600/   1833C : D080                		add.l	d0,d0
   30601/   1833E :                     
   30602/   1833E :                     loc_180AE:
   30603/   1833E : D1A8 0038           		add.l	d0,$38(a0)
   30604/   18342 : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   30605/   18348 : 6000 FE8E           		bra.w	loc_17F48
   30606/   1834C :                     ; ===========================================================================
   30607/   1834C :                     
   30608/   1834C :                     loc_180BC:				; XREF: Obj77_ShipIndex
   30609/   1834C : 70FE                		moveq	#-2,d0
   30610/   1834E : 0C68 1F4C 0030      		cmpi.w	#$1F4C,$30(a0)
   30611/   18354 : 650C                		bcs.s	loc_180D2
   30612/   18356 : 317C 1F4C 0030      		move.w	#$1F4C,$30(a0)
   30613/   1835C : 4268 0010           		clr.w	$10(a0)
   30614/   18360 : 5240                		addq.w	#1,d0
   30615/   18362 :                     
   30616/   18362 :                     loc_180D2:
   30617/   18362 : 0C68 00C0 0038      		cmpi.w	#$C0,$38(a0)
   30618/   18368 : 6E0C                		bgt.s	loc_180E6
   30619/   1836A : 317C 00C0 0038      		move.w	#$C0,$38(a0)
   30620/   18370 : 4268 0012           		clr.w	$12(a0)
   30621/   18374 : 5240                		addq.w	#1,d0
   30622/   18376 :                     
   30623/   18376 :                     loc_180E6:
   30624/   18376 : 660A                		bne.s	loc_180F2
   30625/   18378 : 5428 0025           		addq.b	#2,$25(a0)
   30626/   1837C : 08A8 0000 0022      		bclr	#0,$22(a0)
   30627/   18382 :                     
   30628/   18382 :                     loc_180F2:
   30629/   18382 : 6000 FE44           		bra.w	loc_17F38
   30630/   18386 :                     ; ===========================================================================
   30631/   18386 :                     
   30632/   18386 :                     loc_180F6:				; XREF: Obj77_ShipIndex
   30633/   18386 : 4A28 003D           		tst.b	$3D(a0)
   30634/   1838A : 6616                		bne.s	loc_18112
   30635/   1838C : 0C69 1EC8 0008      		cmpi.w	#$1EC8,8(a1)
   30636/   18392 : 6D22                		blt.s	loc_18126
   30637/   18394 : 0C69 00F0 000C      		cmpi.w	#$F0,$C(a1)
   30638/   1839A : 6E1A                		bgt.s	loc_18126
   30639/   1839C : 117C 0032 003C      		move.b	#$32,$3C(a0)
   30640/   183A2 :                     
   30641/   183A2 :                     loc_18112:
   30642/   183A2 : 303C 0082           		move.w	#$82,d0
   30643/   183A6 : 4EB9 0000 1396      		jsr	(PlaySound).l	; play LZ music
   30644/   183AC : 08E8 0000 0022      		bset	#0,$22(a0)
   30645/   183B2 : 5428 0025           		addq.b	#2,$25(a0)
   30646/   183B6 :                     
   30647/   183B6 :                     loc_18126:
   30648/   183B6 : 6000 FE10           		bra.w	loc_17F38
   30649/   183BA :                     ; ===========================================================================
   30650/   183BA :                     
   30651/   183BA :                     loc_1812A:				; XREF: Obj77_ShipIndex
   30652/   183BA : 4A28 003D           		tst.b	$3D(a0)
   30653/   183BE : 6606                		bne.s	loc_18136
   30654/   183C0 : 5328 003C           		subq.b	#1,$3C(a0)
   30655/   183C4 : 6618                		bne.s	loc_1814E
   30656/   183C6 :                     
   30657/   183C6 :                     loc_18136:
   30658/   183C6 : 4228 003C           		clr.b	$3C(a0)
   30659/   183CA : 317C 0400 0010      		move.w	#$400,$10(a0)
   30660/   183D0 : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   30661/   183D6 : 4228 003D           		clr.b	$3D(a0)
   30662/   183DA : 5428 0025           		addq.b	#2,$25(a0)
   30663/   183DE :                     
   30664/   183DE :                     loc_1814E:
   30665/   183DE : 6000 FDE8           		bra.w	loc_17F38
   30666/   183E2 :                     ; ===========================================================================
   30667/   183E2 :                     
   30668/   183E2 :                     loc_18152:				; XREF: Obj77_ShipIndex
   30669/   183E2 : 0C78 2030 F72A      		cmpi.w	#$2030,($FFFFF72A).w
   30670/   183E8 : 6406                		bcc.s	loc_18160
   30671/   183EA : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   30672/   183EE : 6006                		bra.s	loc_18166
   30673/   183F0 :                     ; ===========================================================================
   30674/   183F0 :                     
   30675/   183F0 :                     loc_18160:
   30676/   183F0 : 4A28 0001           		tst.b	1(a0)
   30677/   183F4 : 6A04                		bpl.s	Obj77_ShipDel
   30678/   183F6 :                     
   30679/   183F6 :                     loc_18166:
   30680/   183F6 : 6000 FDD0           		bra.w	loc_17F38
   30681/   183FA :                     ; ===========================================================================
   30682/   183FA :                     
   30683/   183FA :                     Obj77_ShipDel:
   30684/   183FA : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   30685/   18400 :                     ; ===========================================================================
   30686/   18400 :                     
   30687/   18400 :                     Obj77_FaceMain:				; XREF: Obj77_Index
   30688/   18400 : 2268 0034           		movea.l	$34(a0),a1
   30689/   18404 : 1011                		move.b	(a1),d0
   30690/   18406 : B010                		cmp.b	(a0),d0
   30691/   18408 : 663E                		bne.s	Obj77_FaceDel
   30692/   1840A : 7000                		moveq	#0,d0
   30693/   1840C : 1029 0025           		move.b	$25(a1),d0
   30694/   18410 : 7201                		moveq	#1,d1
   30695/   18412 : 4A28 003D           		tst.b	$3D(a0)
   30696/   18416 : 6704                		beq.s	loc_1818C
   30697/   18418 : 720A                		moveq	#$A,d1
   30698/   1841A : 6014                		bra.s	loc_181A0
   30699/   1841C :                     ; ===========================================================================
   30700/   1841C :                     
   30701/   1841C :                     loc_1818C:
   30702/   1841C : 4A29 0020           		tst.b	$20(a1)
   30703/   18420 : 6604                		bne.s	loc_18196
   30704/   18422 : 7205                		moveq	#5,d1
   30705/   18424 : 600A                		bra.s	loc_181A0
   30706/   18426 :                     ; ===========================================================================
   30707/   18426 :                     
   30708/   18426 :                     loc_18196:
   30709/   18426 : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   30710/   1842C : 6502                		bcs.s	loc_181A0
   30711/   1842E : 7204                		moveq	#4,d1
   30712/   18430 :                     
   30713/   18430 :                     loc_181A0:
   30714/   18430 : 1141 001C           		move.b	d1,$1C(a0)
   30715/   18434 : 0C00 000E           		cmpi.b	#$E,d0
   30716/   18438 : 660C                		bne.s	loc_181B6
   30717/   1843A : 117C 0006 001C      		move.b	#6,$1C(a0)
   30718/   18440 : 4A28 0001           		tst.b	1(a0)
   30719/   18444 : 6A02                		bpl.s	Obj77_FaceDel
   30720/   18446 :                     
   30721/   18446 :                     loc_181B6:
   30722/   18446 : 6040                		bra.s	Obj77_Display
   30723/   18448 :                     ; ===========================================================================
   30724/   18448 :                     
   30725/   18448 :                     Obj77_FaceDel:
   30726/   18448 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   30727/   1844E :                     ; ===========================================================================
   30728/   1844E :                     
   30729/   1844E :                     Obj77_FlameMain:			; XREF: Obj77_Index
   30730/   1844E : 117C 0007 001C      		move.b	#7,$1C(a0)
   30731/   18454 : 2268 0034           		movea.l	$34(a0),a1
   30732/   18458 : 1011                		move.b	(a1),d0
   30733/   1845A : B010                		cmp.b	(a0),d0
   30734/   1845C : 6624                		bne.s	Obj77_FlameDel
   30735/   1845E : 0C29 000E 0025      		cmpi.b	#$E,$25(a1)
   30736/   18464 : 661A                		bne.s	loc_181F0
   30737/   18466 : 117C 000B 001C      		move.b	#$B,$1C(a0)
   30738/   1846C : 4A28 0001           		tst.b	1(a0)
   30739/   18470 : 6A10                		bpl.s	Obj77_FlameDel
   30740/   18472 : 600C                		bra.s	loc_181F0
   30741/   18474 :                     ; ===========================================================================
   30742/   18474 : 4A69 0010           		tst.w	$10(a1)
   30743/   18478 : 6706                		beq.s	loc_181F0
   30744/   1847A : 117C 0008 001C      		move.b	#8,$1C(a0)
   30745/   18480 :                     
   30746/   18480 :                     loc_181F0:
   30747/   18480 : 6006                		bra.s	Obj77_Display
   30748/   18482 :                     ; ===========================================================================
   30749/   18482 :                     
   30750/   18482 :                     Obj77_FlameDel:				; XREF: Obj77_FlameMain
   30751/   18482 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   30752/   18488 :                     ; ===========================================================================
   30753/   18488 :                     
   30754/   18488 :                     Obj77_Display:
   30755/   18488 : 43F9 0001 7F4C      		lea	(Ani_Eggman).l,a1
   30756/   1848E : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   30757/   18494 : 2268 0034           		movea.l	$34(a0),a1
   30758/   18498 : 3169 0008 0008      		move.w	8(a1),8(a0)
   30759/   1849E : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   30760/   184A4 : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   30761/   184AA : 7003                		moveq	#3,d0
   30762/   184AC : C028 0022           		and.b	$22(a0),d0
   30763/   184B0 : 0228 00FC 0001      		andi.b	#-4,1(a0)
   30764/   184B6 : 8128 0001           		or.b	d0,1(a0)
   30765/   184BA : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   30766/   184C0 :                     ; ===========================================================================
   30767/   184C0 :                     ; ---------------------------------------------------------------------------
   30768/   184C0 :                     ; Object 73 - Eggman (MZ)
   30769/   184C0 :                     ; ---------------------------------------------------------------------------
   30770/   184C0 :                     
   30771/   184C0 :                     Obj73:					; XREF: Obj_Index
   30772/   184C0 : 7000                		moveq	#0,d0
   30773/   184C2 : 1028 0024           		move.b	$24(a0),d0
   30774/   184C6 : 323B 0006           		move.w	Obj73_Index(pc,d0.w),d1
   30775/   184CA : 4EFB 1002           		jmp	Obj73_Index(pc,d1.w)
   30776/   184CE :                     ; ===========================================================================
   30777/   184CE : 0016                Obj73_Index:	dc.w Obj73_Main-Obj73_Index
   30778/   184D0 : 008A                		dc.w Obj73_ShipMain-Obj73_Index
   30779/   184D2 : 0372                		dc.w Obj73_FaceMain-Obj73_Index
   30780/   184D4 : 03CC                		dc.w Obj73_FlameMain-Obj73_Index
   30781/   184D6 : 0438                		dc.w Obj73_TubeMain-Obj73_Index
   30782/   184D8 :                     
   30783/   184D8 : 0200 04             Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
   30784/   184DB : 0401 04             		dc.b 4,	1, 4
   30785/   184DE : 0607 04             		dc.b 6,	7, 4
   30786/   184E1 : 0800 03             		dc.b 8,	0, 3
   30787/   184E4 :                     ; ===========================================================================
   30788/   184E4 :                     
   30789/   184E4 :                     Obj73_Main:				; XREF: Obj73_Index
   30790/   184E4 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   30791/   184EA : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   30792/   184F0 : 117C 000F 0020      		move.b	#$F,$20(a0)
   30793/   184F6 : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   30794/   184FC : 45FA FFDA           		lea	Obj73_ObjData(pc),a2
   30795/   18500 : 2248                		movea.l	a0,a1
   30796/   18502 : 7203                		moveq	#3,d1
   30797/   18504 : 601A                		bra.s	Obj73_LoadBoss
   30798/   18506 :                     ; ===========================================================================
   30799/   18506 :                     
   30800/   18506 :                     Obj73_Loop:
   30801/   18506 : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   30802/   1850C : 664A                		bne.s	Obj73_ShipMain
   30803/   1850E : (MACRO)             		_move.b	#$73,0(a1)
   30803/   1850E :  (MACRO-2)                          insn2op move.b, #$73,0(a1)
   30803/   1850E : 137C 0073 0001                              !move.b   #$73,1+0(a1)
   30803/   18513 :                                             !org    *-1
   30803/   18513 : 00                                          !dc.b   0
   30804/   18514 : 3368 0008 0008      		move.w	8(a0),8(a1)
   30805/   1851A : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   30806/   18520 :                     
   30807/   18520 :                     Obj73_LoadBoss:				; XREF: Obj73_Main
   30808/   18520 : 08A8 0000 0022      		bclr	#0,$22(a0)
   30809/   18526 : 4229 0025           		clr.b	$25(a1)
   30810/   1852A : 135A 0024           		move.b	(a2)+,$24(a1)
   30811/   1852E : 135A 001C           		move.b	(a2)+,$1C(a1)
   30812/   18532 : 135A 0018           		move.b	(a2)+,$18(a1)
   30813/   18536 : 237C 0001 7F9C 0004 		move.l	#Map_Eggman,4(a1)
   30814/   1853E : 337C 0400 0002      		move.w	#$400,2(a1)
   30815/   18544 : 137C 0004 0001      		move.b	#4,1(a1)
   30816/   1854A : 137C 0020 0019      		move.b	#$20,$19(a1)
   30817/   18550 : 2348 0034           		move.l	a0,$34(a1)
   30818/   18554 : 51C9 FFB0           		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
   30819/   18558 :                     
   30820/   18558 :                     Obj73_ShipMain:
   30821/   18558 : 7000                		moveq	#0,d0
   30822/   1855A : 1028 0025           		move.b	$25(a0),d0
   30823/   1855E : 323B 0028           		move.w	Obj73_ShipIndex(pc,d0.w),d1
   30824/   18562 : 4EBB 1024           		jsr	Obj73_ShipIndex(pc,d1.w)
   30825/   18566 : 43F9 0001 7F4C      		lea	(Ani_Eggman).l,a1
   30826/   1856C : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   30827/   18572 : 7003                		moveq	#3,d0
   30828/   18574 : C028 0022           		and.b	$22(a0),d0
   30829/   18578 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   30830/   1857E : 8128 0001           		or.b	d0,1(a0)
   30831/   18582 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   30832/   18588 :                     ; ===========================================================================
   30833/   18588 : 000A                Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
   30834/   1858A : 00B2                		dc.w loc_183AA-Obj73_ShipIndex
   30835/   1858C : 01FE                		dc.w loc_184F6-Obj73_ShipIndex
   30836/   1858E : 0234                		dc.w loc_1852C-Obj73_ShipIndex
   30837/   18590 : 028A                		dc.w loc_18582-Obj73_ShipIndex
   30838/   18592 :                     ; ===========================================================================
   30839/   18592 :                     
   30840/   18592 :                     loc_18302:				; XREF: Obj73_ShipIndex
   30841/   18592 : 1028 003F           		move.b	$3F(a0),d0
   30842/   18596 : 5428 003F           		addq.b	#2,$3F(a0)
   30843/   1859A : 4EB9 0000 29EA      		jsr	(CalcSine).l
   30844/   185A0 : E440                		asr.w	#2,d0
   30845/   185A2 : 3140 0012           		move.w	d0,$12(a0)
   30846/   185A6 : 317C FF00 0010      		move.w	#-$100,$10(a0)
   30847/   185AC : 6100 F586           		bsr.w	BossMove
   30848/   185B0 : 0C68 1910 0030      		cmpi.w	#$1910,$30(a0)
   30849/   185B6 : 660C                		bne.s	loc_18334
   30850/   185B8 : 5428 0025           		addq.b	#2,$25(a0)
   30851/   185BC : 4228 0028           		clr.b	$28(a0)
   30852/   185C0 : 42A8 0010           		clr.l	$10(a0)
   30853/   185C4 :                     
   30854/   185C4 :                     loc_18334:
   30855/   185C4 : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   30856/   185CA : 1140 0034           		move.b	d0,$34(a0)
   30857/   185CE :                     
   30858/   185CE :                     loc_1833E:
   30859/   185CE : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   30860/   185D4 : 3168 0030 0008      		move.w	$30(a0),8(a0)
   30861/   185DA : 0C28 0004 0025      		cmpi.b	#4,$25(a0)
   30862/   185E0 : 643E                		bcc.s	locret_18390
   30863/   185E2 : 4A28 0022           		tst.b	$22(a0)
   30864/   185E6 : 6B3A                		bmi.s	loc_18392
   30865/   185E8 : 4A28 0020           		tst.b	$20(a0)
   30866/   185EC : 6632                		bne.s	locret_18390
   30867/   185EE : 4A28 003E           		tst.b	$3E(a0)
   30868/   185F2 : 6610                		bne.s	loc_18374
   30869/   185F4 : 117C 0028 003E      		move.b	#$28,$3E(a0)
   30870/   185FA : 303C 00AC           		move.w	#$AC,d0
   30871/   185FE : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play boss damage sound
   30872/   18604 :                     
   30873/   18604 :                     loc_18374:
   30874/   18604 : 43F8 FB22           		lea	($FFFFFB22).w,a1
   30875/   18608 : 7000                		moveq	#0,d0
   30876/   1860A : 4A51                		tst.w	(a1)
   30877/   1860C : 6604                		bne.s	loc_18382
   30878/   1860E : 303C 0EEE           		move.w	#$EEE,d0
   30879/   18612 :                     
   30880/   18612 :                     loc_18382:
   30881/   18612 : 3280                		move.w	d0,(a1)
   30882/   18614 : 5328 003E           		subq.b	#1,$3E(a0)
   30883/   18618 : 6606                		bne.s	locret_18390
   30884/   1861A : 117C 000F 0020      		move.b	#$F,$20(a0)
   30885/   18620 :                     
   30886/   18620 :                     locret_18390:
   30887/   18620 : 4E75                		rts	
   30888/   18622 :                     ; ===========================================================================
   30889/   18622 :                     
   30890/   18622 :                     loc_18392:				; XREF: loc_1833E
   30891/   18622 : 7064                		moveq	#100,d0
   30892/   18624 : 6100 42FC           		bsr.w	AddPoints
   30893/   18628 : 117C 0004 0025      		move.b	#4,$25(a0)
   30894/   1862E : 317C 00B4 003C      		move.w	#$B4,$3C(a0)
   30895/   18634 : 4268 0010           		clr.w	$10(a0)
   30896/   18638 : 4E75                		rts	
   30897/   1863A :                     ; ===========================================================================
   30898/   1863A :                     
   30899/   1863A :                     loc_183AA:				; XREF: Obj73_ShipIndex
   30900/   1863A : 7000                		moveq	#0,d0
   30901/   1863C : 1028 0028           		move.b	$28(a0),d0
   30902/   18640 : 303B 0010           		move.w	off_183C2(pc,d0.w),d0
   30903/   18644 : 4EBB 000C           		jsr	off_183C2(pc,d0.w)
   30904/   18648 : 0228 0006 0028      		andi.b	#6,$28(a0)
   30905/   1864E : 6000 FF7E           		bra.w	loc_1833E
   30906/   18652 :                     ; ===========================================================================
   30907/   18652 : 0008                off_183C2:	dc.w loc_183CA-off_183C2
   30908/   18654 : 00DC                		dc.w Obj73_MakeLava2-off_183C2
   30909/   18656 : 0008                		dc.w loc_183CA-off_183C2
   30910/   18658 : 00DC                		dc.w Obj73_MakeLava2-off_183C2
   30911/   1865A :                     ; ===========================================================================
   30912/   1865A :                     
   30913/   1865A :                     loc_183CA:				; XREF: off_183C2
   30914/   1865A : 4A68 0010           		tst.w	$10(a0)
   30915/   1865E : 662E                		bne.s	loc_183FE
   30916/   18660 : 7040                		moveq	#$40,d0
   30917/   18662 : 0C68 022C 0038      		cmpi.w	#$22C,$38(a0)
   30918/   18668 : 670C                		beq.s	loc_183E6
   30919/   1866A : 6502                		bcs.s	loc_183DE
   30920/   1866C : 4440                		neg.w	d0
   30921/   1866E :                     
   30922/   1866E :                     loc_183DE:
   30923/   1866E : 3140 0012           		move.w	d0,$12(a0)
   30924/   18672 : 6000 F4C0           		bra.w	BossMove
   30925/   18676 :                     ; ===========================================================================
   30926/   18676 :                     
   30927/   18676 :                     loc_183E6:
   30928/   18676 : 317C 0200 0010      		move.w	#$200,$10(a0)
   30929/   1867C : 317C 0100 0012      		move.w	#$100,$12(a0)
   30930/   18682 : 0828 0000 0022      		btst	#0,$22(a0)
   30931/   18688 : 6604                		bne.s	loc_183FE
   30932/   1868A : 4468 0010           		neg.w	$10(a0)
   30933/   1868E :                     
   30934/   1868E :                     loc_183FE:
   30935/   1868E : 0C28 0018 003E      		cmpi.b	#$18,$3E(a0)
   30936/   18694 : 6408                		bcc.s	Obj73_MakeLava
   30937/   18696 : 6100 F49C           		bsr.w	BossMove
   30938/   1869A : 5968 0012           		subq.w	#4,$12(a0)
   30939/   1869E :                     
   30940/   1869E :                     Obj73_MakeLava:
   30941/   1869E : 5328 0034           		subq.b	#1,$34(a0)
   30942/   186A2 : 6448                		bcc.s	loc_1845C
   30943/   186A4 : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   30944/   186AA : 662E                		bne.s	loc_1844A
   30945/   186AC : (MACRO)             		_move.b	#$14,0(a1)	; load lava ball object
   30945/   186AC :  (MACRO-2)                          insn2op move.b, #$14,0(a1)
   30945/   186AC : 137C 0014 0001                              !move.b   #$14,1+0(a1)
   30945/   186B1 :                                             !org    *-1
   30945/   186B1 : 00                                          !dc.b   0
   30946/   186B2 : 337C 02E8 000C      		move.w	#$2E8,$C(a1)	; set Y	position
   30947/   186B8 : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   30948/   186BE : 0280 0000 FFFF      		andi.l	#$FFFF,d0
   30949/   186C4 : 80FC 0050           		divu.w	#$50,d0
   30950/   186C8 : 4840                		swap	d0
   30951/   186CA : 0640 1878           		addi.w	#$1878,d0
   30952/   186CE : 3340 0008           		move.w	d0,8(a1)
   30953/   186D2 : EE09                		lsr.b	#7,d1
   30954/   186D4 : 337C 00FF 0028      		move.w	#$FF,$28(a1)
   30955/   186DA :                     
   30956/   186DA :                     loc_1844A:
   30957/   186DA : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   30958/   186E0 : 0200 001F           		andi.b	#$1F,d0
   30959/   186E4 : 0600 0040           		addi.b	#$40,d0
   30960/   186E8 : 1140 0034           		move.b	d0,$34(a0)
   30961/   186EC :                     
   30962/   186EC :                     loc_1845C:
   30963/   186EC : 0828 0000 0022      		btst	#0,$22(a0)
   30964/   186F2 : 6710                		beq.s	loc_18474
   30965/   186F4 : 0C68 1910 0030      		cmpi.w	#$1910,$30(a0)
   30966/   186FA : 6D30                		blt.s	locret_1849C
   30967/   186FC : 317C 1910 0030      		move.w	#$1910,$30(a0)
   30968/   18702 : 600E                		bra.s	loc_18482
   30969/   18704 :                     ; ===========================================================================
   30970/   18704 :                     
   30971/   18704 :                     loc_18474:
   30972/   18704 : 0C68 1830 0030      		cmpi.w	#$1830,$30(a0)
   30973/   1870A : 6E20                		bgt.s	locret_1849C
   30974/   1870C : 317C 1830 0030      		move.w	#$1830,$30(a0)
   30975/   18712 :                     
   30976/   18712 :                     loc_18482:
   30977/   18712 : 4268 0010           		clr.w	$10(a0)
   30978/   18716 : 317C FE80 0012      		move.w	#-$180,$12(a0)
   30979/   1871C : 0C68 022C 0038      		cmpi.w	#$22C,$38(a0)
   30980/   18722 : 6404                		bcc.s	loc_18498
   30981/   18724 : 4468 0012           		neg.w	$12(a0)
   30982/   18728 :                     
   30983/   18728 :                     loc_18498:
   30984/   18728 : 5428 0028           		addq.b	#2,$28(a0)
   30985/   1872C :                     
   30986/   1872C :                     locret_1849C:
   30987/   1872C : 4E75                		rts	
   30988/   1872E :                     ; ===========================================================================
   30989/   1872E :                     
   30990/   1872E :                     Obj73_MakeLava2:			; XREF: off_183C2
   30991/   1872E : 6100 F404           		bsr.w	BossMove
   30992/   18732 : 3028 0038           		move.w	$38(a0),d0
   30993/   18736 : 0440 022C           		subi.w	#$22C,d0
   30994/   1873A : 6E48                		bgt.s	locret_184F4
   30995/   1873C : 303C 022C           		move.w	#$22C,d0
   30996/   18740 : 4A68 0012           		tst.w	$12(a0)
   30997/   18744 : 6734                		beq.s	loc_184EA
   30998/   18746 : 4268 0012           		clr.w	$12(a0)
   30999/   1874A : 317C 0050 003C      		move.w	#$50,$3C(a0)
   31000/   18750 : 0868 0000 0022      		bchg	#0,$22(a0)
   31001/   18756 : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   31002/   1875C : 661C                		bne.s	loc_184EA
   31003/   1875E : 3368 0030 0008      		move.w	$30(a0),8(a1)
   31004/   18764 : 3368 0038 000C      		move.w	$38(a0),$C(a1)
   31005/   1876A : 0669 0018 000C      		addi.w	#$18,$C(a1)
   31006/   18770 : 12BC 0074           		move.b	#$74,(a1)	; load lava ball object
   31007/   18774 : 137C 0001 0028      		move.b	#1,$28(a1)
   31008/   1877A :                     
   31009/   1877A :                     loc_184EA:
   31010/   1877A : 5368 003C           		subq.w	#1,$3C(a0)
   31011/   1877E : 6604                		bne.s	locret_184F4
   31012/   18780 : 5428 0028           		addq.b	#2,$28(a0)
   31013/   18784 :                     
   31014/   18784 :                     locret_184F4:
   31015/   18784 : 4E75                		rts	
   31016/   18786 :                     ; ===========================================================================
   31017/   18786 :                     
   31018/   18786 :                     loc_184F6:				; XREF: Obj73_ShipIndex
   31019/   18786 : 5368 003C           		subq.w	#1,$3C(a0)
   31020/   1878A : 6B04                		bmi.s	loc_18500
   31021/   1878C : 6000 F362           		bra.w	BossDefeated
   31022/   18790 :                     ; ===========================================================================
   31023/   18790 :                     
   31024/   18790 :                     loc_18500:
   31025/   18790 : 08E8 0000 0022      		bset	#0,$22(a0)
   31026/   18796 : 08A8 0007 0022      		bclr	#7,$22(a0)
   31027/   1879C : 4268 0010           		clr.w	$10(a0)
   31028/   187A0 : 5428 0025           		addq.b	#2,$25(a0)
   31029/   187A4 : 317C FFDA 003C      		move.w	#-$26,$3C(a0)
   31030/   187AA : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   31031/   187AE : 660A                		bne.s	locret_1852A
   31032/   187B0 : 11FC 0001 F7A7      		move.b	#1,($FFFFF7A7).w
   31033/   187B6 : 4268 0012           		clr.w	$12(a0)
   31034/   187BA :                     
   31035/   187BA :                     locret_1852A:
   31036/   187BA : 4E75                		rts	
   31037/   187BC :                     ; ===========================================================================
   31038/   187BC :                     
   31039/   187BC :                     loc_1852C:				; XREF: Obj73_ShipIndex
   31040/   187BC : 5268 003C           		addq.w	#1,$3C(a0)
   31041/   187C0 : 6712                		beq.s	loc_18544
   31042/   187C2 : 6A1A                		bpl.s	loc_1854E
   31043/   187C4 : 0C68 0270 0038      		cmpi.w	#$270,$38(a0)
   31044/   187CA : 6408                		bcc.s	loc_18544
   31045/   187CC : 0668 0018 0012      		addi.w	#$18,$12(a0)
   31046/   187D2 : 6036                		bra.s	loc_1857A
   31047/   187D4 :                     ; ===========================================================================
   31048/   187D4 :                     
   31049/   187D4 :                     loc_18544:
   31050/   187D4 : 4268 0012           		clr.w	$12(a0)
   31051/   187D8 : 4268 003C           		clr.w	$3C(a0)
   31052/   187DC : 602C                		bra.s	loc_1857A
   31053/   187DE :                     ; ===========================================================================
   31054/   187DE :                     
   31055/   187DE :                     loc_1854E:
   31056/   187DE : 0C68 0030 003C      		cmpi.w	#$30,$3C(a0)
   31057/   187E4 : 6510                		bcs.s	loc_18566
   31058/   187E6 : 6714                		beq.s	loc_1856C
   31059/   187E8 : 0C68 0038 003C      		cmpi.w	#$38,$3C(a0)
   31060/   187EE : 651A                		bcs.s	loc_1857A
   31061/   187F0 : 5428 0025           		addq.b	#2,$25(a0)
   31062/   187F4 : 6014                		bra.s	loc_1857A
   31063/   187F6 :                     ; ===========================================================================
   31064/   187F6 :                     
   31065/   187F6 :                     loc_18566:
   31066/   187F6 : 5168 0012           		subq.w	#8,$12(a0)
   31067/   187FA : 600E                		bra.s	loc_1857A
   31068/   187FC :                     ; ===========================================================================
   31069/   187FC :                     
   31070/   187FC :                     loc_1856C:
   31071/   187FC : 4268 0012           		clr.w	$12(a0)
   31072/   18800 : 303C 0083           		move.w	#$83,d0
   31073/   18804 : 4EB9 0000 1396      		jsr	(PlaySound).l	; play MZ music
   31074/   1880A :                     
   31075/   1880A :                     loc_1857A:
   31076/   1880A : 6100 F328           		bsr.w	BossMove
   31077/   1880E : 6000 FDBE           		bra.w	loc_1833E
   31078/   18812 :                     ; ===========================================================================
   31079/   18812 :                     
   31080/   18812 :                     loc_18582:				; XREF: Obj73_ShipIndex
   31081/   18812 : 317C 0500 0010      		move.w	#$500,$10(a0)
   31082/   18818 : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   31083/   1881E : 0C78 1960 F72A      		cmpi.w	#$1960,($FFFFF72A).w
   31084/   18824 : 6406                		bcc.s	loc_1859C
   31085/   18826 : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   31086/   1882A : 6006                		bra.s	loc_185A2
   31087/   1882C :                     ; ===========================================================================
   31088/   1882C :                     
   31089/   1882C :                     loc_1859C:
   31090/   1882C : 4A28 0001           		tst.b	1(a0)
   31091/   18830 : 6A08                		bpl.s	Obj73_ShipDel
   31092/   18832 :                     
   31093/   18832 :                     loc_185A2:
   31094/   18832 : 6100 F300           		bsr.w	BossMove
   31095/   18836 : 6000 FD96           		bra.w	loc_1833E
   31096/   1883A :                     ; ===========================================================================
   31097/   1883A :                     
   31098/   1883A :                     Obj73_ShipDel:
   31099/   1883A : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   31100/   18840 :                     ; ===========================================================================
   31101/   18840 :                     
   31102/   18840 :                     Obj73_FaceMain:				; XREF: Obj73_Index
   31103/   18840 : 7000                		moveq	#0,d0
   31104/   18842 : 7201                		moveq	#1,d1
   31105/   18844 : 2268 0034           		movea.l	$34(a0),a1
   31106/   18848 : 1029 0025           		move.b	$25(a1),d0
   31107/   1884C : 5540                		subq.w	#2,d0
   31108/   1884E : 6612                		bne.s	loc_185D2
   31109/   18850 : 0829 0001 0028      		btst	#1,$28(a1)
   31110/   18856 : 6712                		beq.s	loc_185DA
   31111/   18858 : 4A69 0012           		tst.w	$12(a1)
   31112/   1885C : 660C                		bne.s	loc_185DA
   31113/   1885E : 7204                		moveq	#4,d1
   31114/   18860 : 601C                		bra.s	loc_185EE
   31115/   18862 :                     ; ===========================================================================
   31116/   18862 :                     
   31117/   18862 :                     loc_185D2:
   31118/   18862 : 5500                		subq.b	#2,d0
   31119/   18864 : 6B04                		bmi.s	loc_185DA
   31120/   18866 : 720A                		moveq	#$A,d1
   31121/   18868 : 6014                		bra.s	loc_185EE
   31122/   1886A :                     ; ===========================================================================
   31123/   1886A :                     
   31124/   1886A :                     loc_185DA:
   31125/   1886A : 4A29 0020           		tst.b	$20(a1)
   31126/   1886E : 6604                		bne.s	loc_185E4
   31127/   18870 : 7205                		moveq	#5,d1
   31128/   18872 : 600A                		bra.s	loc_185EE
   31129/   18874 :                     ; ===========================================================================
   31130/   18874 :                     
   31131/   18874 :                     loc_185E4:
   31132/   18874 : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   31133/   1887A : 6502                		bcs.s	loc_185EE
   31134/   1887C : 7204                		moveq	#4,d1
   31135/   1887E :                     
   31136/   1887E :                     loc_185EE:
   31137/   1887E : 1141 001C           		move.b	d1,$1C(a0)
   31138/   18882 : 5900                		subq.b	#4,d0
   31139/   18884 : 660C                		bne.s	loc_18602
   31140/   18886 : 117C 0006 001C      		move.b	#6,$1C(a0)
   31141/   1888C : 4A28 0001           		tst.b	1(a0)
   31142/   18890 : 6A02                		bpl.s	Obj73_FaceDel
   31143/   18892 :                     
   31144/   18892 :                     loc_18602:
   31145/   18892 : 603A                		bra.s	Obj73_Display
   31146/   18894 :                     ; ===========================================================================
   31147/   18894 :                     
   31148/   18894 :                     Obj73_FaceDel:
   31149/   18894 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   31150/   1889A :                     ; ===========================================================================
   31151/   1889A :                     
   31152/   1889A :                     Obj73_FlameMain:			; XREF: Obj73_Index
   31153/   1889A : 117C 0007 001C      		move.b	#7,$1C(a0)
   31154/   188A0 : 2268 0034           		movea.l	$34(a0),a1
   31155/   188A4 : 0C29 0008 0025      		cmpi.b	#8,$25(a1)
   31156/   188AA : 6D0E                		blt.s	loc_1862A
   31157/   188AC : 117C 000B 001C      		move.b	#$B,$1C(a0)
   31158/   188B2 : 4A28 0001           		tst.b	1(a0)
   31159/   188B6 : 6A10                		bpl.s	Obj73_FlameDel
   31160/   188B8 : 600C                		bra.s	loc_18636
   31161/   188BA :                     ; ===========================================================================
   31162/   188BA :                     
   31163/   188BA :                     loc_1862A:
   31164/   188BA : 4A69 0010           		tst.w	$10(a1)
   31165/   188BE : 6706                		beq.s	loc_18636
   31166/   188C0 : 117C 0008 001C      		move.b	#8,$1C(a0)
   31167/   188C6 :                     
   31168/   188C6 :                     loc_18636:
   31169/   188C6 : 6006                		bra.s	Obj73_Display
   31170/   188C8 :                     ; ===========================================================================
   31171/   188C8 :                     
   31172/   188C8 :                     Obj73_FlameDel:				; XREF: Obj73_FlameMain
   31173/   188C8 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   31174/   188CE :                     ; ===========================================================================
   31175/   188CE :                     
   31176/   188CE :                     Obj73_Display:
   31177/   188CE : 43F9 0001 7F4C      		lea	(Ani_Eggman).l,a1
   31178/   188D4 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   31179/   188DA :                     
   31180/   188DA :                     loc_1864A:
   31181/   188DA : 2268 0034           		movea.l	$34(a0),a1
   31182/   188DE : 3169 0008 0008      		move.w	8(a1),8(a0)
   31183/   188E4 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   31184/   188EA : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   31185/   188F0 : 7003                		moveq	#3,d0
   31186/   188F2 : C028 0022           		and.b	$22(a0),d0
   31187/   188F6 : 0228 00FC 0001      		andi.b	#-4,1(a0)
   31188/   188FC : 8128 0001           		or.b	d0,1(a0)
   31189/   18900 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   31190/   18906 :                     ; ===========================================================================
   31191/   18906 :                     
   31192/   18906 :                     Obj73_TubeMain:				; XREF: Obj73_Index
   31193/   18906 : 2268 0034           		movea.l	$34(a0),a1
   31194/   1890A : 0C29 0008 0025      		cmpi.b	#8,$25(a1)
   31195/   18910 : 6606                		bne.s	loc_18688
   31196/   18912 : 4A28 0001           		tst.b	1(a0)
   31197/   18916 : 6A16                		bpl.s	Obj73_TubeDel
   31198/   18918 :                     
   31199/   18918 :                     loc_18688:
   31200/   18918 : 217C 0001 8064 0004 		move.l	#Map_BossItems,4(a0)
   31201/   18920 : 317C 246C 0002      		move.w	#$246C,2(a0)
   31202/   18926 : 117C 0004 001A      		move.b	#4,$1A(a0)
   31203/   1892C : 60AC                		bra.s	loc_1864A
   31204/   1892E :                     ; ===========================================================================
   31205/   1892E :                     
   31206/   1892E :                     Obj73_TubeDel:
   31207/   1892E : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   31208/   18934 :                     ; ===========================================================================
   31209/   18934 :                     ; ---------------------------------------------------------------------------
   31210/   18934 :                     ; Object 74 - lava that	Eggman drops (MZ)
   31211/   18934 :                     ; ---------------------------------------------------------------------------
   31212/   18934 :                     
   31213/   18934 :                     Obj74:					; XREF: Obj_Index
   31214/   18934 : 7000                		moveq	#0,d0
   31215/   18936 : 1028 0024           		move.b	$24(a0),d0
   31216/   1893A : 303B 000C           		move.w	Obj74_Index(pc,d0.w),d0
   31217/   1893E : 4EBB 0008           		jsr	Obj74_Index(pc,d0.w)
   31218/   18942 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   31219/   18948 :                     ; ===========================================================================
   31220/   18948 : 0008                Obj74_Index:	dc.w Obj74_Main-Obj74_Index
   31221/   1894A : 0062                		dc.w Obj74_Action-Obj74_Index
   31222/   1894C : 01CE                		dc.w loc_18886-Obj74_Index
   31223/   1894E : 01F4                		dc.w Obj74_Delete3-Obj74_Index
   31224/   18950 :                     ; ===========================================================================
   31225/   18950 :                     
   31226/   18950 :                     Obj74_Main:				; XREF: Obj74_Index
   31227/   18950 : 117C 0008 0016      		move.b	#8,$16(a0)
   31228/   18956 : 117C 0008 0017      		move.b	#8,$17(a0)
   31229/   1895C : 217C 0000 B458 0004 		move.l	#Map_obj14,4(a0)
   31230/   18964 : 317C 0345 0002      		move.w	#$345,2(a0)
   31231/   1896A : 117C 0004 0001      		move.b	#4,1(a0)
   31232/   18970 : 117C 0005 0018      		move.b	#5,$18(a0)
   31233/   18976 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   31234/   1897C : 117C 0008 0019      		move.b	#8,$19(a0)
   31235/   18982 : 5428 0024           		addq.b	#2,$24(a0)
   31236/   18986 : 4A28 0028           		tst.b	$28(a0)
   31237/   1898A : 660E                		bne.s	loc_1870A
   31238/   1898C : 117C 008B 0020      		move.b	#$8B,$20(a0)
   31239/   18992 : 5428 0024           		addq.b	#2,$24(a0)
   31240/   18996 : 6000 017E           		bra.w	loc_18886
   31241/   1899A :                     ; ===========================================================================
   31242/   1899A :                     
   31243/   1899A :                     loc_1870A:
   31244/   1899A : 117C 001E 0029      		move.b	#$1E,$29(a0)
   31245/   189A0 : 303C 00AE           		move.w	#$AE,d0
   31246/   189A4 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play lava sound
   31247/   189AA :                     
   31248/   189AA :                     Obj74_Action:				; XREF: Obj74_Index
   31249/   189AA : 7000                		moveq	#0,d0
   31250/   189AC : 1028 0025           		move.b	$25(a0),d0
   31251/   189B0 : 303B 0028           		move.w	Obj74_Index2(pc,d0.w),d0
   31252/   189B4 : 4EBB 0024           		jsr	Obj74_Index2(pc,d0.w)
   31253/   189B8 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   31254/   189BE : 43F9 0000 E5CE      		lea	(Ani_obj14).l,a1
   31255/   189C4 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   31256/   189CA : 0C68 02E8 000C      		cmpi.w	#$2E8,$C(a0)
   31257/   189D0 : 6202                		bhi.s	Obj74_Delete
   31258/   189D2 : 4E75                		rts	
   31259/   189D4 :                     ; ===========================================================================
   31260/   189D4 :                     
   31261/   189D4 :                     Obj74_Delete:
   31262/   189D4 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   31263/   189DA :                     ; ===========================================================================
   31264/   189DA : 0008                Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
   31265/   189DC : 0038                		dc.w Obj74_MakeFlame-Obj74_Index2
   31266/   189DE : 00A6                		dc.w Obj74_Duplicate-Obj74_Index2
   31267/   189E0 : 00E8                		dc.w Obj74_FallEdge-Obj74_Index2
   31268/   189E2 :                     ; ===========================================================================
   31269/   189E2 :                     
   31270/   189E2 :                     Obj74_Drop:				; XREF: Obj74_Index2
   31271/   189E2 : 08E8 0001 0022      		bset	#1,$22(a0)
   31272/   189E8 : 5328 0029           		subq.b	#1,$29(a0)
   31273/   189EC : 6A22                		bpl.s	locret_18780
   31274/   189EE : 117C 008B 0020      		move.b	#$8B,$20(a0)
   31275/   189F4 : 4228 0028           		clr.b	$28(a0)
   31276/   189F8 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   31277/   189FE : 08A8 0001 0022      		bclr	#1,$22(a0)
   31278/   18A04 : 6100 C68E           		bsr.w	ObjHitFloor
   31279/   18A08 : 4A41                		tst.w	d1
   31280/   18A0A : 6A04                		bpl.s	locret_18780
   31281/   18A0C : 5428 0025           		addq.b	#2,$25(a0)
   31282/   18A10 :                     
   31283/   18A10 :                     locret_18780:
   31284/   18A10 : 4E75                		rts	
   31285/   18A12 :                     ; ===========================================================================
   31286/   18A12 :                     
   31287/   18A12 :                     Obj74_MakeFlame:			; XREF: Obj74_Index2
   31288/   18A12 : 5568 000C           		subq.w	#2,$C(a0)
   31289/   18A16 : 08E8 0007 0002      		bset	#7,2(a0)
   31290/   18A1C : 317C 00A0 0010      		move.w	#$A0,$10(a0)
   31291/   18A22 : 4268 0012           		clr.w	$12(a0)
   31292/   18A26 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   31293/   18A2C : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   31294/   18A32 : 117C 0003 0029      		move.b	#3,$29(a0)
   31295/   18A38 : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   31296/   18A3E : 661A                		bne.s	loc_187CA
   31297/   18A40 : 47D1                		lea	(a1),a3
   31298/   18A42 : 45D0                		lea	(a0),a2
   31299/   18A44 : 7003                		moveq	#3,d0
   31300/   18A46 :                     
   31301/   18A46 :                     Obj74_Loop:
   31302/   18A46 : 26DA                		move.l	(a2)+,(a3)+
   31303/   18A48 : 26DA                		move.l	(a2)+,(a3)+
   31304/   18A4A : 26DA                		move.l	(a2)+,(a3)+
   31305/   18A4C : 26DA                		move.l	(a2)+,(a3)+
   31306/   18A4E : 51C8 FFF6           		dbf	d0,Obj74_Loop
   31307/   18A52 :                     
   31308/   18A52 : 4469 0010           		neg.w	$10(a1)
   31309/   18A56 : 5429 0025           		addq.b	#2,$25(a1)
   31310/   18A5A :                     
   31311/   18A5A :                     loc_187CA:
   31312/   18A5A : 5428 0025           		addq.b	#2,$25(a0)
   31313/   18A5E : 4E75                		rts	
   31314/   18A60 :                     
   31315/   18A60 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   31316/   18A60 :                     
   31317/   18A60 :                     
   31318/   18A60 :                     Obj74_Duplicate2:			; XREF: Obj74_Duplicate
   31319/   18A60 : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   31320/   18A66 : 6616                		bne.s	locret_187EE
   31321/   18A68 : 3368 0008 0008      		move.w	8(a0),8(a1)
   31322/   18A6E : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   31323/   18A74 : 12BC 0074           		move.b	#$74,(a1)
   31324/   18A78 : 337C 0067 0028      		move.w	#$67,$28(a1)
   31325/   18A7E :                     
   31326/   18A7E :                     locret_187EE:
   31327/   18A7E : 4E75                		rts	
   31328/   18A80 :                     ; End of function Obj74_Duplicate2
   31329/   18A80 :                     
   31330/   18A80 :                     ; ===========================================================================
   31331/   18A80 :                     
   31332/   18A80 :                     Obj74_Duplicate:			; XREF: Obj74_Index2
   31333/   18A80 : 6100 C612           		bsr.w	ObjHitFloor
   31334/   18A84 : 4A41                		tst.w	d1
   31335/   18A86 : 6A2E                		bpl.s	loc_18826
   31336/   18A88 : 3028 0008           		move.w	8(a0),d0
   31337/   18A8C : 0C40 1940           		cmpi.w	#$1940,d0
   31338/   18A90 : 6E2A                		bgt.s	loc_1882C
   31339/   18A92 : 3228 0030           		move.w	$30(a0),d1
   31340/   18A96 : B240                		cmp.w	d0,d1
   31341/   18A98 : 6714                		beq.s	loc_1881E
   31342/   18A9A : 0240 0010           		andi.w	#$10,d0
   31343/   18A9E : 0241 0010           		andi.w	#$10,d1
   31344/   18AA2 : B240                		cmp.w	d0,d1
   31345/   18AA4 : 6708                		beq.s	loc_1881E
   31346/   18AA6 : 61B8                		bsr.s	Obj74_Duplicate2
   31347/   18AA8 : 3168 0008 0032      		move.w	8(a0),$32(a0)
   31348/   18AAE :                     
   31349/   18AAE :                     loc_1881E:
   31350/   18AAE : 3168 0008 0030      		move.w	8(a0),$30(a0)
   31351/   18AB4 : 4E75                		rts	
   31352/   18AB6 :                     ; ===========================================================================
   31353/   18AB6 :                     
   31354/   18AB6 :                     loc_18826:
   31355/   18AB6 : 5428 0025           		addq.b	#2,$25(a0)
   31356/   18ABA : 4E75                		rts	
   31357/   18ABC :                     ; ===========================================================================
   31358/   18ABC :                     
   31359/   18ABC :                     loc_1882C:
   31360/   18ABC : 5428 0024           		addq.b	#2,$24(a0)
   31361/   18AC0 : 4E75                		rts	
   31362/   18AC2 :                     ; ===========================================================================
   31363/   18AC2 :                     
   31364/   18AC2 :                     Obj74_FallEdge:				; XREF: Obj74_Index2
   31365/   18AC2 : 08A8 0001 0022      		bclr	#1,$22(a0)
   31366/   18AC8 : 0668 0024 0012      		addi.w	#$24,$12(a0)	; make flame fall
   31367/   18ACE : 3028 0008           		move.w	8(a0),d0
   31368/   18AD2 : 9068 0032           		sub.w	$32(a0),d0
   31369/   18AD6 : 6A02                		bpl.s	loc_1884A
   31370/   18AD8 : 4440                		neg.w	d0
   31371/   18ADA :                     
   31372/   18ADA :                     loc_1884A:
   31373/   18ADA : 0C40 0012           		cmpi.w	#$12,d0
   31374/   18ADE : 6606                		bne.s	loc_18856
   31375/   18AE0 : 08A8 0007 0002      		bclr	#7,2(a0)
   31376/   18AE6 :                     
   31377/   18AE6 :                     loc_18856:
   31378/   18AE6 : 6100 C5AC           		bsr.w	ObjHitFloor
   31379/   18AEA : 4A41                		tst.w	d1
   31380/   18AEC : 6A20                		bpl.s	locret_1887E
   31381/   18AEE : 5328 0029           		subq.b	#1,$29(a0)
   31382/   18AF2 : 671C                		beq.s	Obj74_Delete2
   31383/   18AF4 : 4268 0012           		clr.w	$12(a0)
   31384/   18AF8 : 3168 0032 0008      		move.w	$32(a0),8(a0)
   31385/   18AFE : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   31386/   18B04 : 08E8 0007 0002      		bset	#7,2(a0)
   31387/   18B0A : 5528 0025           		subq.b	#2,$25(a0)
   31388/   18B0E :                     
   31389/   18B0E :                     locret_1887E:
   31390/   18B0E : 4E75                		rts	
   31391/   18B10 :                     ; ===========================================================================
   31392/   18B10 :                     
   31393/   18B10 :                     Obj74_Delete2:
   31394/   18B10 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   31395/   18B16 :                     ; ===========================================================================
   31396/   18B16 :                     
   31397/   18B16 :                     loc_18886:				; XREF: Obj74_Index
   31398/   18B16 : 08E8 0007 0002      		bset	#7,2(a0)
   31399/   18B1C : 5328 0029           		subq.b	#1,$29(a0)
   31400/   18B20 : 660E                		bne.s	Obj74_Animate
   31401/   18B22 : 117C 0001 001C      		move.b	#1,$1C(a0)
   31402/   18B28 : 5968 000C           		subq.w	#4,$C(a0)
   31403/   18B2C : 4228 0020           		clr.b	$20(a0)
   31404/   18B30 :                     
   31405/   18B30 :                     Obj74_Animate:
   31406/   18B30 : 43F9 0000 E5CE      		lea	(Ani_obj14).l,a1
   31407/   18B36 : 4EF9 0000 A734      		jmp	(AnimateSprite).l
   31408/   18B3C :                     ; ===========================================================================
   31409/   18B3C :                     
   31410/   18B3C :                     Obj74_Delete3:				; XREF: Obj74_Index
   31411/   18B3C : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   31412/   18B42 :                     ; ===========================================================================
   31413/   18B42 :                     
   31414/   18B42 :                     Obj7A_Delete:
   31415/   18B42 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   31416/   18B48 :                     ; ===========================================================================
   31417/   18B48 :                     ; ---------------------------------------------------------------------------
   31418/   18B48 :                     ; Object 7A - Eggman (SLZ)
   31419/   18B48 :                     ; ---------------------------------------------------------------------------
   31420/   18B48 :                     
   31421/   18B48 :                     Obj7A:					; XREF: Obj_Index
   31422/   18B48 : 7000                		moveq	#0,d0
   31423/   18B4A : 1028 0024           		move.b	$24(a0),d0
   31424/   18B4E : 323B 0006           		move.w	Obj7A_Index(pc,d0.w),d1
   31425/   18B52 : 4EFB 1002           		jmp	Obj7A_Index(pc,d1.w)
   31426/   18B56 :                     ; ===========================================================================
   31427/   18B56 : 0016                Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
   31428/   18B58 : 00B6                		dc.w Obj7A_ShipMain-Obj7A_Index
   31429/   18B5A : 032A                		dc.w Obj7A_FaceMain-Obj7A_Index
   31430/   18B5C : 036E                		dc.w Obj7A_FlameMain-Obj7A_Index
   31431/   18B5E : 03DE                		dc.w Obj7A_TubeMain-Obj7A_Index
   31432/   18B60 :                     
   31433/   18B60 : 0200 04             Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
   31434/   18B63 : 0401 04             		dc.b 4,	1, 4
   31435/   18B66 : 0607 04             		dc.b 6,	7, 4
   31436/   18B69 : 0800 03             		dc.b 8,	0, 3
   31437/   18B6C :                     ; ===========================================================================
   31438/   18B6C :                     
   31439/   18B6C :                     Obj7A_Main:				; XREF: Obj7A_Index
   31440/   18B6C : 317C 2188 0008      		move.w	#$2188,8(a0)
   31441/   18B72 : 317C 0228 000C      		move.w	#$228,$C(a0)
   31442/   18B78 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   31443/   18B7E : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   31444/   18B84 : 117C 000F 0020      		move.b	#$F,$20(a0)
   31445/   18B8A : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   31446/   18B90 : 45FA FFCE           		lea	Obj7A_ObjData(pc),a2
   31447/   18B94 : 2248                		movea.l	a0,a1
   31448/   18B96 : 7203                		moveq	#3,d1
   31449/   18B98 : 601A                		bra.s	Obj7A_LoadBoss
   31450/   18B9A :                     ; ===========================================================================
   31451/   18B9A :                     
   31452/   18B9A :                     Obj7A_Loop:
   31453/   18B9A : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   31454/   18BA0 : 664A                		bne.s	loc_1895C
   31455/   18BA2 : (MACRO)             		_move.b	#$7A,0(a1)
   31455/   18BA2 :  (MACRO-2)                          insn2op move.b, #$7A,0(a1)
   31455/   18BA2 : 137C 007A 0001                              !move.b   #$7A,1+0(a1)
   31455/   18BA7 :                                             !org    *-1
   31455/   18BA7 : 00                                          !dc.b   0
   31456/   18BA8 : 3368 0008 0008      		move.w	8(a0),8(a1)
   31457/   18BAE : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   31458/   18BB4 :                     
   31459/   18BB4 :                     Obj7A_LoadBoss:				; XREF: Obj7A_Main
   31460/   18BB4 : 08A8 0000 0022      		bclr	#0,$22(a0)
   31461/   18BBA : 4229 0025           		clr.b	$25(a1)
   31462/   18BBE : 135A 0024           		move.b	(a2)+,$24(a1)
   31463/   18BC2 : 135A 001C           		move.b	(a2)+,$1C(a1)
   31464/   18BC6 : 135A 0018           		move.b	(a2)+,$18(a1)
   31465/   18BCA : 237C 0001 7F9C 0004 		move.l	#Map_Eggman,4(a1)
   31466/   18BD2 : 337C 0400 0002      		move.w	#$400,2(a1)
   31467/   18BD8 : 137C 0004 0001      		move.b	#4,1(a1)
   31468/   18BDE : 137C 0020 0019      		move.b	#$20,$19(a1)
   31469/   18BE4 : 2348 0034           		move.l	a0,$34(a1)
   31470/   18BE8 : 51C9 FFB0           		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
   31471/   18BEC :                     
   31472/   18BEC :                     loc_1895C:
   31473/   18BEC : 43F8 D040           		lea	($FFFFD040).w,a1
   31474/   18BF0 : 45E8 002A           		lea	$2A(a0),a2
   31475/   18BF4 : 705E                		moveq	#$5E,d0
   31476/   18BF6 : 723E                		moveq	#$3E,d1
   31477/   18BF8 :                     
   31478/   18BF8 :                     loc_18968:
   31479/   18BF8 : B011                		cmp.b	(a1),d0
   31480/   18BFA : 6608                		bne.s	loc_18974
   31481/   18BFC : 4A29 0028           		tst.b	$28(a1)
   31482/   18C00 : 6702                		beq.s	loc_18974
   31483/   18C02 : 34C9                		move.w	a1,(a2)+
   31484/   18C04 :                     
   31485/   18C04 :                     loc_18974:
   31486/   18C04 : D2FC 0040           		adda.w	#$40,a1
   31487/   18C08 : 51C9 FFEE           		dbf	d1,loc_18968
   31488/   18C0C :                     
   31489/   18C0C :                     Obj7A_ShipMain:				; XREF: Obj7A_Index
   31490/   18C0C : 7000                		moveq	#0,d0
   31491/   18C0E : 1028 0025           		move.b	$25(a0),d0
   31492/   18C12 : 303B 0028           		move.w	Obj7A_ShipIndex(pc,d0.w),d0
   31493/   18C16 : 4EBB 0024           		jsr	Obj7A_ShipIndex(pc,d0.w)
   31494/   18C1A : 43F9 0001 7F4C      		lea	(Ani_Eggman).l,a1
   31495/   18C20 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   31496/   18C26 : 7003                		moveq	#3,d0
   31497/   18C28 : C028 0022           		and.b	$22(a0),d0
   31498/   18C2C : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   31499/   18C32 : 8128 0001           		or.b	d0,1(a0)
   31500/   18C36 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   31501/   18C3C :                     ; ===========================================================================
   31502/   18C3C : 000C                Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
   31503/   18C3E : 00B2                		dc.w loc_18A5E-Obj7A_ShipIndex
   31504/   18C40 : 0126                		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
   31505/   18C42 : 019C                		dc.w loc_18B48-Obj7A_ShipIndex
   31506/   18C44 : 01D4                		dc.w loc_18B80-Obj7A_ShipIndex
   31507/   18C46 : 021A                		dc.w loc_18BC6-Obj7A_ShipIndex
   31508/   18C48 :                     ; ===========================================================================
   31509/   18C48 :                     
   31510/   18C48 :                     loc_189B8:				; XREF: Obj7A_ShipIndex
   31511/   18C48 : 317C FF00 0010      		move.w	#-$100,$10(a0)
   31512/   18C4E : 0C68 2120 0030      		cmpi.w	#$2120,$30(a0)
   31513/   18C54 : 6404                		bcc.s	loc_189CA
   31514/   18C56 : 5428 0025           		addq.b	#2,$25(a0)
   31515/   18C5A :                     
   31516/   18C5A :                     loc_189CA:
   31517/   18C5A : 6100 EED8           		bsr.w	BossMove
   31518/   18C5E : 1028 003F           		move.b	$3F(a0),d0
   31519/   18C62 : 5428 003F           		addq.b	#2,$3F(a0)
   31520/   18C66 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   31521/   18C6C : EC40                		asr.w	#6,d0
   31522/   18C6E : D068 0038           		add.w	$38(a0),d0
   31523/   18C72 : 3140 000C           		move.w	d0,$C(a0)
   31524/   18C76 : 3168 0030 0008      		move.w	$30(a0),8(a0)
   31525/   18C7C : 6010                		bra.s	loc_189FE
   31526/   18C7E :                     ; ===========================================================================
   31527/   18C7E :                     
   31528/   18C7E :                     loc_189EE:
   31529/   18C7E : 6100 EEB4           		bsr.w	BossMove
   31530/   18C82 : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   31531/   18C88 : 3168 0030 0008      		move.w	$30(a0),8(a0)
   31532/   18C8E :                     
   31533/   18C8E :                     loc_189FE:
   31534/   18C8E : 0C28 0006 0025      		cmpi.b	#6,$25(a0)
   31535/   18C94 : 643E                		bcc.s	locret_18A44
   31536/   18C96 : 4A28 0022           		tst.b	$22(a0)
   31537/   18C9A : 6B3A                		bmi.s	loc_18A46
   31538/   18C9C : 4A28 0020           		tst.b	$20(a0)
   31539/   18CA0 : 6632                		bne.s	locret_18A44
   31540/   18CA2 : 4A28 003E           		tst.b	$3E(a0)
   31541/   18CA6 : 6610                		bne.s	loc_18A28
   31542/   18CA8 : 117C 0020 003E      		move.b	#$20,$3E(a0)
   31543/   18CAE : 303C 00AC           		move.w	#$AC,d0
   31544/   18CB2 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play boss damage sound
   31545/   18CB8 :                     
   31546/   18CB8 :                     loc_18A28:
   31547/   18CB8 : 43F8 FB22           		lea	($FFFFFB22).w,a1
   31548/   18CBC : 7000                		moveq	#0,d0
   31549/   18CBE : 4A51                		tst.w	(a1)
   31550/   18CC0 : 6604                		bne.s	loc_18A36
   31551/   18CC2 : 303C 0EEE           		move.w	#$EEE,d0
   31552/   18CC6 :                     
   31553/   18CC6 :                     loc_18A36:
   31554/   18CC6 : 3280                		move.w	d0,(a1)
   31555/   18CC8 : 5328 003E           		subq.b	#1,$3E(a0)
   31556/   18CCC : 6606                		bne.s	locret_18A44
   31557/   18CCE : 117C 000F 0020      		move.b	#$F,$20(a0)
   31558/   18CD4 :                     
   31559/   18CD4 :                     locret_18A44:
   31560/   18CD4 : 4E75                		rts	
   31561/   18CD6 :                     ; ===========================================================================
   31562/   18CD6 :                     
   31563/   18CD6 :                     loc_18A46:
   31564/   18CD6 : 7064                		moveq	#100,d0
   31565/   18CD8 : 6100 3C48           		bsr.w	AddPoints
   31566/   18CDC : 117C 0006 0025      		move.b	#6,$25(a0)
   31567/   18CE2 : 117C 0078 003C      		move.b	#$78,$3C(a0)
   31568/   18CE8 : 4268 0010           		clr.w	$10(a0)
   31569/   18CEC : 4E75                		rts	
   31570/   18CEE :                     ; ===========================================================================
   31571/   18CEE :                     
   31572/   18CEE :                     loc_18A5E:				; XREF: Obj7A_ShipIndex
   31573/   18CEE : 3028 0030           		move.w	$30(a0),d0
   31574/   18CF2 : 317C 0200 0010      		move.w	#$200,$10(a0)
   31575/   18CF8 : 0828 0000 0022      		btst	#0,$22(a0)
   31576/   18CFE : 660C                		bne.s	loc_18A7C
   31577/   18D00 : 4468 0010           		neg.w	$10(a0)
   31578/   18D04 : 0C40 2008           		cmpi.w	#$2008,d0
   31579/   18D08 : 6E0E                		bgt.s	loc_18A88
   31580/   18D0A : 6006                		bra.s	loc_18A82
   31581/   18D0C :                     ; ===========================================================================
   31582/   18D0C :                     
   31583/   18D0C :                     loc_18A7C:
   31584/   18D0C : 0C40 2138           		cmpi.w	#$2138,d0
   31585/   18D10 : 6D06                		blt.s	loc_18A88
   31586/   18D12 :                     
   31587/   18D12 :                     loc_18A82:
   31588/   18D12 : 0868 0000 0022      		bchg	#0,$22(a0)
   31589/   18D18 :                     
   31590/   18D18 :                     loc_18A88:
   31591/   18D18 : 3028 0008           		move.w	8(a0),d0
   31592/   18D1C : 72FF                		moveq	#-1,d1
   31593/   18D1E : 7402                		moveq	#2,d2
   31594/   18D20 : 45E8 002A           		lea	$2A(a0),a2
   31595/   18D24 : 7828                		moveq	#$28,d4
   31596/   18D26 : 4A68 0010           		tst.w	$10(a0)
   31597/   18D2A : 6A02                		bpl.s	loc_18A9E
   31598/   18D2C : 4444                		neg.w	d4
   31599/   18D2E :                     
   31600/   18D2E :                     loc_18A9E:
   31601/   18D2E : 321A                		move.w	(a2)+,d1
   31602/   18D30 : 2641                		movea.l	d1,a3
   31603/   18D32 : 082B 0003 0022      		btst	#3,$22(a3)
   31604/   18D38 : 660A                		bne.s	loc_18AB4
   31605/   18D3A : 362B 0008           		move.w	8(a3),d3
   31606/   18D3E : D644                		add.w	d4,d3
   31607/   18D40 : 9640                		sub.w	d0,d3
   31608/   18D42 : 670C                		beq.s	loc_18AC0
   31609/   18D44 :                     
   31610/   18D44 :                     loc_18AB4:
   31611/   18D44 : 51CA FFE8           		dbf	d2,loc_18A9E
   31612/   18D48 :                     
   31613/   18D48 : 1142 0028           		move.b	d2,$28(a0)
   31614/   18D4C : 6000 FF0C           		bra.w	loc_189CA
   31615/   18D50 :                     ; ===========================================================================
   31616/   18D50 :                     
   31617/   18D50 :                     loc_18AC0:
   31618/   18D50 : 1142 0028           		move.b	d2,$28(a0)
   31619/   18D54 : 5428 0025           		addq.b	#2,$25(a0)
   31620/   18D58 : 117C 0028 003C      		move.b	#$28,$3C(a0)
   31621/   18D5E : 6000 FEFA           		bra.w	loc_189CA
   31622/   18D62 :                     ; ===========================================================================
   31623/   18D62 :                     
   31624/   18D62 :                     Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
   31625/   18D62 : 0C28 0028 003C      		cmpi.b	#$28,$3C(a0)
   31626/   18D68 : 665C                		bne.s	loc_18B36
   31627/   18D6A : 70FF                		moveq	#-1,d0
   31628/   18D6C : 1028 0028           		move.b	$28(a0),d0
   31629/   18D70 : 4880                		ext.w	d0
   31630/   18D72 : 6B5C                		bmi.s	loc_18B40
   31631/   18D74 : 5540                		subq.w	#2,d0
   31632/   18D76 : 4440                		neg.w	d0
   31633/   18D78 : D040                		add.w	d0,d0
   31634/   18D7A : 43E8 002A           		lea	$2A(a0),a1
   31635/   18D7E : 3031 0000           		move.w	(a1,d0.w),d0
   31636/   18D82 : 2440                		movea.l	d0,a2
   31637/   18D84 : 43F8 D040           		lea	($FFFFD040).w,a1
   31638/   18D88 : 723E                		moveq	#$3E,d1
   31639/   18D8A :                     
   31640/   18D8A :                     loc_18AFA:
   31641/   18D8A : B0A9 003C           		cmp.l	$3C(a1),d0
   31642/   18D8E : 6740                		beq.s	loc_18B40
   31643/   18D90 : D2FC 0040           		adda.w	#$40,a1
   31644/   18D94 : 51C9 FFF4           		dbf	d1,loc_18AFA
   31645/   18D98 :                     
   31646/   18D98 : 2F08                		move.l	a0,-(sp)
   31647/   18D9A : 41D2                		lea	(a2),a0
   31648/   18D9C : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   31649/   18DA2 : 205F                		movea.l	(sp)+,a0
   31650/   18DA4 : 662A                		bne.s	loc_18B40
   31651/   18DA6 : 12BC 007B           		move.b	#$7B,(a1)	; load spiked ball object
   31652/   18DAA : 3368 0008 0008      		move.w	8(a0),8(a1)
   31653/   18DB0 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   31654/   18DB6 : 0669 0020 000C      		addi.w	#$20,$C(a1)
   31655/   18DBC : 136A 0022 0022      		move.b	$22(a2),$22(a1)
   31656/   18DC2 : 234A 003C           		move.l	a2,$3C(a1)
   31657/   18DC6 :                     
   31658/   18DC6 :                     loc_18B36:
   31659/   18DC6 : 5328 003C           		subq.b	#1,$3C(a0)
   31660/   18DCA : 6704                		beq.s	loc_18B40
   31661/   18DCC : 6000 FEC0           		bra.w	loc_189FE
   31662/   18DD0 :                     ; ===========================================================================
   31663/   18DD0 :                     
   31664/   18DD0 :                     loc_18B40:
   31665/   18DD0 : 5528 0025           		subq.b	#2,$25(a0)
   31666/   18DD4 : 6000 FE84           		bra.w	loc_189CA
   31667/   18DD8 :                     ; ===========================================================================
   31668/   18DD8 :                     
   31669/   18DD8 :                     loc_18B48:				; XREF: Obj7A_ShipIndex
   31670/   18DD8 : 5328 003C           		subq.b	#1,$3C(a0)
   31671/   18DDC : 6B04                		bmi.s	loc_18B52
   31672/   18DDE : 6000 ED10           		bra.w	BossDefeated
   31673/   18DE2 :                     ; ===========================================================================
   31674/   18DE2 :                     
   31675/   18DE2 :                     loc_18B52:
   31676/   18DE2 : 5428 0025           		addq.b	#2,$25(a0)
   31677/   18DE6 : 4268 0012           		clr.w	$12(a0)
   31678/   18DEA : 08E8 0000 0022      		bset	#0,$22(a0)
   31679/   18DF0 : 08A8 0007 0022      		bclr	#7,$22(a0)
   31680/   18DF6 : 4268 0010           		clr.w	$10(a0)
   31681/   18DFA : 117C 00E8 003C      		move.b	#-$18,$3C(a0)
   31682/   18E00 : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   31683/   18E04 : 6606                		bne.s	loc_18B7C
   31684/   18E06 : 11FC 0001 F7A7      		move.b	#1,($FFFFF7A7).w
   31685/   18E0C :                     
   31686/   18E0C :                     loc_18B7C:
   31687/   18E0C : 6000 FE80           		bra.w	loc_189FE
   31688/   18E10 :                     ; ===========================================================================
   31689/   18E10 :                     
   31690/   18E10 :                     loc_18B80:				; XREF: Obj7A_ShipIndex
   31691/   18E10 : 5228 003C           		addq.b	#1,$3C(a0)
   31692/   18E14 : 670A                		beq.s	loc_18B90
   31693/   18E16 : 6A0E                		bpl.s	loc_18B96
   31694/   18E18 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   31695/   18E1E : 6032                		bra.s	loc_18BC2
   31696/   18E20 :                     ; ===========================================================================
   31697/   18E20 :                     
   31698/   18E20 :                     loc_18B90:
   31699/   18E20 : 4268 0012           		clr.w	$12(a0)
   31700/   18E24 : 602C                		bra.s	loc_18BC2
   31701/   18E26 :                     ; ===========================================================================
   31702/   18E26 :                     
   31703/   18E26 :                     loc_18B96:
   31704/   18E26 : 0C28 0020 003C      		cmpi.b	#$20,$3C(a0)
   31705/   18E2C : 6510                		bcs.s	loc_18BAE
   31706/   18E2E : 6714                		beq.s	loc_18BB4
   31707/   18E30 : 0C28 002A 003C      		cmpi.b	#$2A,$3C(a0)
   31708/   18E36 : 651A                		bcs.s	loc_18BC2
   31709/   18E38 : 5428 0025           		addq.b	#2,$25(a0)
   31710/   18E3C : 6014                		bra.s	loc_18BC2
   31711/   18E3E :                     ; ===========================================================================
   31712/   18E3E :                     
   31713/   18E3E :                     loc_18BAE:
   31714/   18E3E : 5168 0012           		subq.w	#8,$12(a0)
   31715/   18E42 : 600E                		bra.s	loc_18BC2
   31716/   18E44 :                     ; ===========================================================================
   31717/   18E44 :                     
   31718/   18E44 :                     loc_18BB4:
   31719/   18E44 : 4268 0012           		clr.w	$12(a0)
   31720/   18E48 : 303C 0084           		move.w	#$84,d0
   31721/   18E4C : 4EB9 0000 1396      		jsr	(PlaySound).l	; play SLZ music
   31722/   18E52 :                     
   31723/   18E52 :                     loc_18BC2:
   31724/   18E52 : 6000 FE2A           		bra.w	loc_189EE
   31725/   18E56 :                     ; ===========================================================================
   31726/   18E56 :                     
   31727/   18E56 :                     loc_18BC6:				; XREF: Obj7A_ShipIndex
   31728/   18E56 : 317C 0400 0010      		move.w	#$400,$10(a0)
   31729/   18E5C : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   31730/   18E62 : 0C78 2160 F72A      		cmpi.w	#$2160,($FFFFF72A).w
   31731/   18E68 : 6406                		bcc.s	loc_18BE0
   31732/   18E6A : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   31733/   18E6E : 6008                		bra.s	loc_18BE8
   31734/   18E70 :                     ; ===========================================================================
   31735/   18E70 :                     
   31736/   18E70 :                     loc_18BE0:
   31737/   18E70 : 4A28 0001           		tst.b	1(a0)
   31738/   18E74 : 6A00 FCCC           		bpl.w	Obj7A_Delete
   31739/   18E78 :                     
   31740/   18E78 :                     loc_18BE8:
   31741/   18E78 : 6100 ECBA           		bsr.w	BossMove
   31742/   18E7C : 6000 FDDC           		bra.w	loc_189CA
   31743/   18E80 :                     ; ===========================================================================
   31744/   18E80 :                     
   31745/   18E80 :                     Obj7A_FaceMain:				; XREF: Obj7A_Index
   31746/   18E80 : 7000                		moveq	#0,d0
   31747/   18E82 : 7201                		moveq	#1,d1
   31748/   18E84 : 2268 0034           		movea.l	$34(a0),a1
   31749/   18E88 : 1029 0025           		move.b	$25(a1),d0
   31750/   18E8C : 0C00 0006           		cmpi.b	#6,d0
   31751/   18E90 : 6B04                		bmi.s	loc_18C06
   31752/   18E92 : 720A                		moveq	#$A,d1
   31753/   18E94 : 6014                		bra.s	loc_18C1A
   31754/   18E96 :                     ; ===========================================================================
   31755/   18E96 :                     
   31756/   18E96 :                     loc_18C06:
   31757/   18E96 : 4A29 0020           		tst.b	$20(a1)
   31758/   18E9A : 6604                		bne.s	loc_18C10
   31759/   18E9C : 7205                		moveq	#5,d1
   31760/   18E9E : 600A                		bra.s	loc_18C1A
   31761/   18EA0 :                     ; ===========================================================================
   31762/   18EA0 :                     
   31763/   18EA0 :                     loc_18C10:
   31764/   18EA0 : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   31765/   18EA6 : 6502                		bcs.s	loc_18C1A
   31766/   18EA8 : 7204                		moveq	#4,d1
   31767/   18EAA :                     
   31768/   18EAA :                     loc_18C1A:
   31769/   18EAA : 1141 001C           		move.b	d1,$1C(a0)
   31770/   18EAE : 0C00 000A           		cmpi.b	#$A,d0
   31771/   18EB2 : 660E                		bne.s	loc_18C32
   31772/   18EB4 : 117C 0006 001C      		move.b	#6,$1C(a0)
   31773/   18EBA : 4A28 0001           		tst.b	1(a0)
   31774/   18EBE : 6A00 FC82           		bpl.w	Obj7A_Delete
   31775/   18EC2 :                     
   31776/   18EC2 :                     loc_18C32:
   31777/   18EC2 : 6038                		bra.s	loc_18C6C
   31778/   18EC4 :                     ; ===========================================================================
   31779/   18EC4 :                     
   31780/   18EC4 :                     Obj7A_FlameMain:			; XREF: Obj7A_Index
   31781/   18EC4 : 117C 0008 001C      		move.b	#8,$1C(a0)
   31782/   18ECA : 2268 0034           		movea.l	$34(a0),a1
   31783/   18ECE : 0C29 000A 0025      		cmpi.b	#$A,$25(a1)
   31784/   18ED4 : 6610                		bne.s	loc_18C56
   31785/   18ED6 : 4A28 0001           		tst.b	1(a0)
   31786/   18EDA : 6A00 FC66           		bpl.w	Obj7A_Delete
   31787/   18EDE : 117C 000B 001C      		move.b	#$B,$1C(a0)
   31788/   18EE4 : 6016                		bra.s	loc_18C6C
   31789/   18EE6 :                     ; ===========================================================================
   31790/   18EE6 :                     
   31791/   18EE6 :                     loc_18C56:
   31792/   18EE6 : 0C29 0008 0025      		cmpi.b	#8,$25(a1)
   31793/   18EEC : 6E0E                		bgt.s	loc_18C6C
   31794/   18EEE : 0C29 0004 0025      		cmpi.b	#4,$25(a1)
   31795/   18EF4 : 6D06                		blt.s	loc_18C6C
   31796/   18EF6 : 117C 0007 001C      		move.b	#7,$1C(a0)
   31797/   18EFC :                     
   31798/   18EFC :                     loc_18C6C:
   31799/   18EFC : 43F9 0001 7F4C      		lea	(Ani_Eggman).l,a1
   31800/   18F02 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   31801/   18F08 :                     
   31802/   18F08 :                     loc_18C78:
   31803/   18F08 : 2268 0034           		movea.l	$34(a0),a1
   31804/   18F0C : 3169 0008 0008      		move.w	8(a1),8(a0)
   31805/   18F12 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   31806/   18F18 : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   31807/   18F1E : 7003                		moveq	#3,d0
   31808/   18F20 : C028 0022           		and.b	$22(a0),d0
   31809/   18F24 : 0228 00FC 0001      		andi.b	#-4,1(a0)
   31810/   18F2A : 8128 0001           		or.b	d0,1(a0)
   31811/   18F2E : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   31812/   18F34 :                     ; ===========================================================================
   31813/   18F34 :                     
   31814/   18F34 :                     Obj7A_TubeMain:				; XREF: Obj7A_Index
   31815/   18F34 : 2268 0034           		movea.l	$34(a0),a1
   31816/   18F38 : 0C29 000A 0025      		cmpi.b	#$A,$25(a1)
   31817/   18F3E : 6608                		bne.s	loc_18CB8
   31818/   18F40 : 4A28 0001           		tst.b	1(a0)
   31819/   18F44 : 6A00 FBFC           		bpl.w	Obj7A_Delete
   31820/   18F48 :                     
   31821/   18F48 :                     loc_18CB8:
   31822/   18F48 : 217C 0001 8064 0004 		move.l	#Map_BossItems,4(a0)
   31823/   18F50 : 317C 246C 0002      		move.w	#$246C,2(a0)
   31824/   18F56 : 117C 0003 001A      		move.b	#3,$1A(a0)
   31825/   18F5C : 60AA                		bra.s	loc_18C78
   31826/   18F5E :                     ; ===========================================================================
   31827/   18F5E :                     ; ---------------------------------------------------------------------------
   31828/   18F5E :                     ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
   31829/   18F5E :                     ; ---------------------------------------------------------------------------
   31830/   18F5E :                     
   31831/   18F5E :                     Obj7B:					; XREF: Obj_Index
   31832/   18F5E : 7000                		moveq	#0,d0
   31833/   18F60 : 1028 0024           		move.b	$24(a0),d0
   31834/   18F64 : 303B 002E           		move.w	Obj7B_Index(pc,d0.w),d0
   31835/   18F68 : 4EBB 002A           		jsr	Obj7B_Index(pc,d0.w)
   31836/   18F6C : 3028 0030           		move.w	$30(a0),d0
   31837/   18F70 : 0240 FF80           		andi.w	#$FF80,d0
   31838/   18F74 : 3238 F700           		move.w	($FFFFF700).w,d1
   31839/   18F78 : 0441 0080           		subi.w	#$80,d1
   31840/   18F7C : 0241 FF80           		andi.w	#$FF80,d1
   31841/   18F80 : 9041                		sub.w	d1,d0
   31842/   18F82 : 6B00 FBBE           		bmi.w	Obj7A_Delete
   31843/   18F86 : 0C40 0280           		cmpi.w	#$280,d0
   31844/   18F8A : 6200 FBB6           		bhi.w	Obj7A_Delete
   31845/   18F8E : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   31846/   18F94 :                     ; ===========================================================================
   31847/   18F94 : 000C                Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
   31848/   18F96 : 0068                		dc.w Obj7B_Fall-Obj7B_Index
   31849/   18F98 : 00C2                		dc.w loc_18DC6-Obj7B_Index
   31850/   18F9A : 01A6                		dc.w loc_18EAA-Obj7B_Index
   31851/   18F9C : 0326                		dc.w Obj7B_Explode-Obj7B_Index
   31852/   18F9E : 03AC                		dc.w Obj7B_MoveFrag-Obj7B_Index
   31853/   18FA0 :                     ; ===========================================================================
   31854/   18FA0 :                     
   31855/   18FA0 :                     Obj7B_Main:				; XREF: Obj7B_Index
   31856/   18FA0 : 217C 0001 1AF6 0004 		move.l	#Map_obj5Ea,4(a0)
   31857/   18FA8 : 317C 0518 0002      		move.w	#$518,2(a0)
   31858/   18FAE : 117C 0001 001A      		move.b	#1,$1A(a0)
   31859/   18FB4 : 0028 0004 0001      		ori.b	#4,1(a0)
   31860/   18FBA : 117C 0004 0018      		move.b	#4,$18(a0)
   31861/   18FC0 : 117C 008B 0020      		move.b	#$8B,$20(a0)
   31862/   18FC6 : 117C 000C 0019      		move.b	#$C,$19(a0)
   31863/   18FCC : 2268 003C           		movea.l	$3C(a0),a1
   31864/   18FD0 : 3169 0008 0030      		move.w	8(a1),$30(a0)
   31865/   18FD6 : 3169 000C 0034      		move.w	$C(a1),$34(a0)
   31866/   18FDC : 08E8 0000 0022      		bset	#0,$22(a0)
   31867/   18FE2 : 3028 0008           		move.w	8(a0),d0
   31868/   18FE6 : B069 0008           		cmp.w	8(a1),d0
   31869/   18FEA : 6E0C                		bgt.s	loc_18D68
   31870/   18FEC : 08A8 0000 0022      		bclr	#0,$22(a0)
   31871/   18FF2 : 117C 0002 003A      		move.b	#2,$3A(a0)
   31872/   18FF8 :                     
   31873/   18FF8 :                     loc_18D68:
   31874/   18FF8 : 5428 0024           		addq.b	#2,$24(a0)
   31875/   18FFC :                     
   31876/   18FFC :                     Obj7B_Fall:				; XREF: Obj7B_Index
   31877/   18FFC : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   31878/   19002 : 2268 003C           		movea.l	$3C(a0),a1
   31879/   19006 : 45F9 0001 92A8      		lea	(word_19018).l,a2
   31880/   1900C : 7000                		moveq	#0,d0
   31881/   1900E : 1029 001A           		move.b	$1A(a1),d0
   31882/   19012 : 3228 0008           		move.w	8(a0),d1
   31883/   19016 : 9268 0030           		sub.w	$30(a0),d1
   31884/   1901A : 6402                		bcc.s	loc_18D8E
   31885/   1901C : 5440                		addq.w	#2,d0
   31886/   1901E :                     
   31887/   1901E :                     loc_18D8E:
   31888/   1901E : D040                		add.w	d0,d0
   31889/   19020 : 3228 0034           		move.w	$34(a0),d1
   31890/   19024 : D272 0000           		add.w	(a2,d0.w),d1
   31891/   19028 : B268 000C           		cmp.w	$C(a0),d1
   31892/   1902C : 6E26                		bgt.s	locret_18DC4
   31893/   1902E : 2268 003C           		movea.l	$3C(a0),a1
   31894/   19032 : 7202                		moveq	#2,d1
   31895/   19034 : 0828 0000 0022      		btst	#0,$22(a0)
   31896/   1903A : 6702                		beq.s	loc_18DAE
   31897/   1903C : 7200                		moveq	#0,d1
   31898/   1903E :                     
   31899/   1903E :                     loc_18DAE:
   31900/   1903E : 317C 00F0 0028      		move.w	#$F0,$28(a0)
   31901/   19044 : 117C 000A 001F      		move.b	#10,$1F(a0)	; set frame duration to	10 frames
   31902/   1904A : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)
   31903/   19050 : 6000 01E0           		bra.w	loc_18FA2
   31904/   19054 :                     ; ===========================================================================
   31905/   19054 :                     
   31906/   19054 :                     locret_18DC4:
   31907/   19054 : 4E75                		rts	
   31908/   19056 :                     ; ===========================================================================
   31909/   19056 :                     
   31910/   19056 :                     loc_18DC6:				; XREF: Obj7B_Index
   31911/   19056 : 2268 003C           		movea.l	$3C(a0),a1
   31912/   1905A : 7000                		moveq	#0,d0
   31913/   1905C : 1028 003A           		move.b	$3A(a0),d0
   31914/   19060 : 9029 003A           		sub.b	$3A(a1),d0
   31915/   19064 : 6754                		beq.s	loc_18E2A
   31916/   19066 : 6402                		bcc.s	loc_18DDA
   31917/   19068 : 4400                		neg.b	d0
   31918/   1906A :                     
   31919/   1906A :                     loc_18DDA:
   31920/   1906A : 323C F7E8           		move.w	#-$818,d1
   31921/   1906E : 343C FEEC           		move.w	#-$114,d2
   31922/   19072 : 0C00 0001           		cmpi.b	#1,d0
   31923/   19076 : 6718                		beq.s	loc_18E00
   31924/   19078 : 323C F6A0           		move.w	#-$960,d1
   31925/   1907C : 343C FF0C           		move.w	#-$F4,d2
   31926/   19080 : 0C69 09C0 0038      		cmpi.w	#$9C0,$38(a1)
   31927/   19086 : 6D08                		blt.s	loc_18E00
   31928/   19088 : 323C F5E0           		move.w	#-$A20,d1
   31929/   1908C : 343C FF80           		move.w	#-$80,d2
   31930/   19090 :                     
   31931/   19090 :                     loc_18E00:
   31932/   19090 : 3141 0012           		move.w	d1,$12(a0)
   31933/   19094 : 3142 0010           		move.w	d2,$10(a0)
   31934/   19098 : 3028 0008           		move.w	8(a0),d0
   31935/   1909C : 9068 0030           		sub.w	$30(a0),d0
   31936/   190A0 : 6404                		bcc.s	loc_18E16
   31937/   190A2 : 4468 0010           		neg.w	$10(a0)
   31938/   190A6 :                     
   31939/   190A6 :                     loc_18E16:
   31940/   190A6 : 117C 0001 001A      		move.b	#1,$1A(a0)
   31941/   190AC : 317C 0020 0028      		move.w	#$20,$28(a0)
   31942/   190B2 : 5428 0024           		addq.b	#2,$24(a0)
   31943/   190B6 : 6000 0082           		bra.w	loc_18EAA
   31944/   190BA :                     ; ===========================================================================
   31945/   190BA :                     
   31946/   190BA :                     loc_18E2A:				; XREF: loc_18DC6
   31947/   190BA : 45F9 0001 92A8      		lea	(word_19018).l,a2
   31948/   190C0 : 7000                		moveq	#0,d0
   31949/   190C2 : 1029 001A           		move.b	$1A(a1),d0
   31950/   190C6 : 343C 0028           		move.w	#$28,d2
   31951/   190CA : 3228 0008           		move.w	8(a0),d1
   31952/   190CE : 9268 0030           		sub.w	$30(a0),d1
   31953/   190D2 : 6404                		bcc.s	loc_18E48
   31954/   190D4 : 4442                		neg.w	d2
   31955/   190D6 : 5440                		addq.w	#2,d0
   31956/   190D8 :                     
   31957/   190D8 :                     loc_18E48:
   31958/   190D8 : D040                		add.w	d0,d0
   31959/   190DA : 3228 0034           		move.w	$34(a0),d1
   31960/   190DE : D272 0000           		add.w	(a2,d0.w),d1
   31961/   190E2 : 3141 000C           		move.w	d1,$C(a0)
   31962/   190E6 : D468 0030           		add.w	$30(a0),d2
   31963/   190EA : 3142 0008           		move.w	d2,8(a0)
   31964/   190EE : 4268 000E           		clr.w	$E(a0)
   31965/   190F2 : 4268 000A           		clr.w	$A(a0)
   31966/   190F6 : 5368 0028           		subq.w	#1,$28(a0)
   31967/   190FA : 660E                		bne.s	loc_18E7A
   31968/   190FC : 317C 0020 0028      		move.w	#$20,$28(a0)
   31969/   19102 : 117C 0008 0024      		move.b	#8,$24(a0)
   31970/   19108 : 4E75                		rts	
   31971/   1910A :                     ; ===========================================================================
   31972/   1910A :                     
   31973/   1910A :                     loc_18E7A:
   31974/   1910A : 0C68 0078 0028      		cmpi.w	#$78,$28(a0)
   31975/   19110 : 6606                		bne.s	loc_18E88
   31976/   19112 : 117C 0005 001F      		move.b	#5,$1F(a0)
   31977/   19118 :                     
   31978/   19118 :                     loc_18E88:
   31979/   19118 : 0C68 003C 0028      		cmpi.w	#$3C,$28(a0)
   31980/   1911E : 6606                		bne.s	loc_18E96
   31981/   19120 : 117C 0002 001F      		move.b	#2,$1F(a0)
   31982/   19126 :                     
   31983/   19126 :                     loc_18E96:
   31984/   19126 : 5328 001E           		subq.b	#1,$1E(a0)
   31985/   1912A : 6E0C                		bgt.s	locret_18EA8
   31986/   1912C : 0868 0000 001A      		bchg	#0,$1A(a0)
   31987/   19132 : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)
   31988/   19138 :                     
   31989/   19138 :                     locret_18EA8:
   31990/   19138 : 4E75                		rts	
   31991/   1913A :                     ; ===========================================================================
   31992/   1913A :                     
   31993/   1913A :                     loc_18EAA:				; XREF: Obj7B_Index
   31994/   1913A : 43F8 D040           		lea	($FFFFD040).w,a1
   31995/   1913E : 707A                		moveq	#$7A,d0
   31996/   19140 : 7240                		moveq	#$40,d1
   31997/   19142 : 743E                		moveq	#$3E,d2
   31998/   19144 :                     
   31999/   19144 :                     loc_18EB4:
   32000/   19144 : B011                		cmp.b	(a1),d0
   32001/   19146 : 6708                		beq.s	loc_18EC0
   32002/   19148 : D2C1                		adda.w	d1,a1
   32003/   1914A : 51CA FFF8           		dbf	d2,loc_18EB4
   32004/   1914E :                     
   32005/   1914E : 6078                		bra.s	loc_18F38
   32006/   19150 :                     ; ===========================================================================
   32007/   19150 :                     
   32008/   19150 :                     loc_18EC0:
   32009/   19150 : 3029 0008           		move.w	8(a1),d0
   32010/   19154 : 3229 000C           		move.w	$C(a1),d1
   32011/   19158 : 3428 0008           		move.w	8(a0),d2
   32012/   1915C : 3628 000C           		move.w	$C(a0),d3
   32013/   19160 : 45FA 0150           		lea	byte_19022(pc),a2
   32014/   19164 : 47FA 0150           		lea	byte_19026(pc),a3
   32015/   19168 : 181A                		move.b	(a2)+,d4
   32016/   1916A : 4884                		ext.w	d4
   32017/   1916C : D044                		add.w	d4,d0
   32018/   1916E : 181B                		move.b	(a3)+,d4
   32019/   19170 : 4884                		ext.w	d4
   32020/   19172 : D444                		add.w	d4,d2
   32021/   19174 : B440                		cmp.w	d0,d2
   32022/   19176 : 6550                		bcs.s	loc_18F38
   32023/   19178 : 181A                		move.b	(a2)+,d4
   32024/   1917A : 4884                		ext.w	d4
   32025/   1917C : D044                		add.w	d4,d0
   32026/   1917E : 181B                		move.b	(a3)+,d4
   32027/   19180 : 4884                		ext.w	d4
   32028/   19182 : D444                		add.w	d4,d2
   32029/   19184 : B042                		cmp.w	d2,d0
   32030/   19186 : 6540                		bcs.s	loc_18F38
   32031/   19188 : 181A                		move.b	(a2)+,d4
   32032/   1918A : 4884                		ext.w	d4
   32033/   1918C : D244                		add.w	d4,d1
   32034/   1918E : 181B                		move.b	(a3)+,d4
   32035/   19190 : 4884                		ext.w	d4
   32036/   19192 : D644                		add.w	d4,d3
   32037/   19194 : B641                		cmp.w	d1,d3
   32038/   19196 : 6530                		bcs.s	loc_18F38
   32039/   19198 : 181A                		move.b	(a2)+,d4
   32040/   1919A : 4884                		ext.w	d4
   32041/   1919C : D244                		add.w	d4,d1
   32042/   1919E : 181B                		move.b	(a3)+,d4
   32043/   191A0 : 4884                		ext.w	d4
   32044/   191A2 : D644                		add.w	d4,d3
   32045/   191A4 : B243                		cmp.w	d3,d1
   32046/   191A6 : 6520                		bcs.s	loc_18F38
   32047/   191A8 : 5428 0024           		addq.b	#2,$24(a0)
   32048/   191AC : 4268 0028           		clr.w	$28(a0)
   32049/   191B0 : 4229 0020           		clr.b	$20(a1)
   32050/   191B4 : 5329 0021           		subq.b	#1,$21(a1)
   32051/   191B8 : 660E                		bne.s	loc_18F38
   32052/   191BA : 08E9 0007 0022      		bset	#7,$22(a1)
   32053/   191C0 : 4268 0010           		clr.w	$10(a0)
   32054/   191C4 : 4268 0012           		clr.w	$12(a0)
   32055/   191C8 :                     
   32056/   191C8 :                     loc_18F38:
   32057/   191C8 : 4A68 0012           		tst.w	$12(a0)
   32058/   191CC : 6A1E                		bpl.s	loc_18F5C
   32059/   191CE : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   32060/   191D4 : 3028 0034           		move.w	$34(a0),d0
   32061/   191D8 : 0440 002F           		subi.w	#$2F,d0
   32062/   191DC : B068 000C           		cmp.w	$C(a0),d0
   32063/   191E0 : 6E06                		bgt.s	loc_18F58
   32064/   191E2 : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   32065/   191E8 :                     
   32066/   191E8 :                     loc_18F58:
   32067/   191E8 : 6000 FF20           		bra.w	loc_18E7A
   32068/   191EC :                     ; ===========================================================================
   32069/   191EC :                     
   32070/   191EC :                     loc_18F5C:
   32071/   191EC : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   32072/   191F2 : 2268 003C           		movea.l	$3C(a0),a1
   32073/   191F6 : 45F9 0001 92A8      		lea	(word_19018).l,a2
   32074/   191FC : 7000                		moveq	#0,d0
   32075/   191FE : 1029 001A           		move.b	$1A(a1),d0
   32076/   19202 : 3228 0008           		move.w	8(a0),d1
   32077/   19206 : 9268 0030           		sub.w	$30(a0),d1
   32078/   1920A : 6402                		bcc.s	loc_18F7E
   32079/   1920C : 5440                		addq.w	#2,d0
   32080/   1920E :                     
   32081/   1920E :                     loc_18F7E:
   32082/   1920E : D040                		add.w	d0,d0
   32083/   19210 : 3228 0034           		move.w	$34(a0),d1
   32084/   19214 : D272 0000           		add.w	(a2,d0.w),d1
   32085/   19218 : B268 000C           		cmp.w	$C(a0),d1
   32086/   1921C : 6ECA                		bgt.s	loc_18F58
   32087/   1921E : 2268 003C           		movea.l	$3C(a0),a1
   32088/   19222 : 7202                		moveq	#2,d1
   32089/   19224 : 4A68 0010           		tst.w	$10(a0)
   32090/   19228 : 6B02                		bmi.s	loc_18F9C
   32091/   1922A : 7200                		moveq	#0,d1
   32092/   1922C :                     
   32093/   1922C :                     loc_18F9C:
   32094/   1922C : 317C 0000 0028      		move.w	#0,$28(a0)
   32095/   19232 :                     
   32096/   19232 :                     loc_18FA2:
   32097/   19232 : 1341 003A           		move.b	d1,$3A(a1)
   32098/   19236 : 1141 003A           		move.b	d1,$3A(a0)
   32099/   1923A : B229 001A           		cmp.b	$1A(a1),d1
   32100/   1923E : 6758                		beq.s	loc_19008
   32101/   19240 : 08A9 0003 0022      		bclr	#3,$22(a1)
   32102/   19246 : 6750                		beq.s	loc_19008
   32103/   19248 : 4229 0025           		clr.b	$25(a1)
   32104/   1924C : 137C 0002 0024      		move.b	#2,$24(a1)
   32105/   19252 : 45F8 D000           		lea	($FFFFD000).w,a2
   32106/   19256 : 3568 0012 0012      		move.w	$12(a0),$12(a2)
   32107/   1925C : 446A 0012           		neg.w	$12(a2)
   32108/   19260 : 0C29 0001 001A      		cmpi.b	#1,$1A(a1)
   32109/   19266 : 6604                		bne.s	loc_18FDC
   32110/   19268 : E0EA 0012           		asr	$12(a2)
   32111/   1926C :                     
   32112/   1926C :                     loc_18FDC:
   32113/   1926C : 08EA 0001 0022      		bset	#1,$22(a2)
   32114/   19272 : 08AA 0003 0022      		bclr	#3,$22(a2)
   32115/   19278 : 422A 003C           		clr.b	$3C(a2)
   32116/   1927C : 2F08                		move.l	a0,-(sp)
   32117/   1927E : 41D2                		lea	(a2),a0
   32118/   19280 : 4EB9 0001 34CC      		jsr	(Obj01_ChkRoll).l
   32119/   19286 : 205F                		movea.l	(sp)+,a0
   32120/   19288 : 157C 0002 0024      		move.b	#2,$24(a2)
   32121/   1928E : 303C 00CC           		move.w	#$CC,d0
   32122/   19292 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play "spring" sound
   32123/   19298 :                     
   32124/   19298 :                     loc_19008:
   32125/   19298 : 4268 0010           		clr.w	$10(a0)
   32126/   1929C : 4268 0012           		clr.w	$12(a0)
   32127/   192A0 : 5428 0024           		addq.b	#2,$24(a0)
   32128/   192A4 : 6000 FE64           		bra.w	loc_18E7A
   32129/   192A8 :                     ; ===========================================================================
   32130/   192A8 : FFF8 FFE4 FFD1 FFE4 word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
                    FFF8                
   32131/   192B2 : (MACRO)             		align 2
   32131/   192B2 :  (MACRO-2)                  cnop 0,2
   32131/   192B2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   32132/   192B2 : E830 E830           byte_19022:	dc.b $E8, $30, $E8, $30
   32133/   192B6 : (MACRO)             		align 2
   32133/   192B6 :  (MACRO-2)                  cnop 0,2
   32133/   192B6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   32134/   192B6 : 08F0 08F0           byte_19026:	dc.b 8,	$F0, 8,	$F0
   32135/   192BA : (MACRO)             		align 2
   32135/   192BA :  (MACRO-2)                  cnop 0,2
   32135/   192BA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   32136/   192BA :                     ; ===========================================================================
   32137/   192BA :                     
   32138/   192BA :                     Obj7B_Explode:				; XREF: Obj7B_Index
   32139/   192BA : 10BC 003F           		move.b	#$3F,(a0)
   32140/   192BE : 4228 0024           		clr.b	$24(a0)
   32141/   192C2 : 0C68 0020 0028      		cmpi.w	#$20,$28(a0)
   32142/   192C8 : 6702                		beq.s	Obj7B_MakeFrag
   32143/   192CA : 4E75                		rts	
   32144/   192CC :                     ; ===========================================================================
   32145/   192CC :                     
   32146/   192CC :                     Obj7B_MakeFrag:
   32147/   192CC : 3168 0034 000C      		move.w	$34(a0),$C(a0)
   32148/   192D2 : 7203                		moveq	#3,d1
   32149/   192D4 : 45FA 005A           		lea	Obj7B_FragSpeed(pc),a2
   32150/   192D8 :                     
   32151/   192D8 :                     Obj7B_Loop:
   32152/   192D8 : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   32153/   192DE : 664A                		bne.s	loc_1909A
   32154/   192E0 : 12BC 007B           		move.b	#$7B,(a1)	; load shrapnel	object
   32155/   192E4 : 137C 000A 0024      		move.b	#$A,$24(a1)
   32156/   192EA : 237C 0001 936E 0004 		move.l	#Map_obj7B,4(a1)
   32157/   192F2 : 137C 0003 0018      		move.b	#3,$18(a1)
   32158/   192F8 : 337C 0518 0002      		move.w	#$518,2(a1)
   32159/   192FE : 3368 0008 0008      		move.w	8(a0),8(a1)
   32160/   19304 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   32161/   1930A : 335A 0010           		move.w	(a2)+,$10(a1)
   32162/   1930E : 335A 0012           		move.w	(a2)+,$12(a1)
   32163/   19312 : 137C 0098 0020      		move.b	#$98,$20(a1)
   32164/   19318 : 0029 0004 0001      		ori.b	#4,1(a1)
   32165/   1931E : 08E9 0007 0001      		bset	#7,1(a1)
   32166/   19324 : 137C 000C 0019      		move.b	#$C,$19(a1)
   32167/   1932A :                     
   32168/   1932A :                     loc_1909A:
   32169/   1932A : 51C9 FFAC           		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
   32170/   1932E :                     
   32171/   1932E : 4E75                		rts	
   32172/   19330 :                     ; ===========================================================================
   32173/   19330 : FF00 FCC0           Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
   32174/   19334 : FF60 FDC0           		dc.w $FF60, $FDC0
   32175/   19338 : 0100 FCC0           		dc.w $100, $FCC0
   32176/   1933C : 00A0 FDC0           		dc.w $A0, $FDC0
   32177/   19340 :                     ; ===========================================================================
   32178/   19340 :                     
   32179/   19340 :                     Obj7B_MoveFrag:				; XREF: Obj7B_Index
   32180/   19340 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   32181/   19346 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   32182/   1934C : 3168 000C 0034      		move.w	$C(a0),$34(a0)
   32183/   19352 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   32184/   19358 : 7004                		moveq	#4,d0
   32185/   1935A : C078 FE0E           		and.w	($FFFFFE0E).w,d0
   32186/   1935E : E448                		lsr.w	#2,d0
   32187/   19360 : 1140 001A           		move.b	d0,$1A(a0)
   32188/   19364 : 4A28 0001           		tst.b	1(a0)
   32189/   19368 : 6A00 F7D8           		bpl.w	Obj7A_Delete
   32190/   1936C : 4E75                		rts	
   32191/   1936E :                     ; ===========================================================================
   32192/   1936E :                     ; ---------------------------------------------------------------------------
   32193/   1936E :                     ; Sprite mappings - exploding spikeys that the SLZ boss	drops
   32194/   1936E :                     ; ---------------------------------------------------------------------------
   32195/   1936E :                     Map_obj7B:
   32196/   1936E :                     		include	"_maps/obj7B.asm"
(1)    1/   1936E :                     ; ---------------------------------------------------------------------------
(1)    2/   1936E :                     ; Sprite mappings - exploding spikeys that the SLZ boss	drops
(1)    3/   1936E :                     ; ---------------------------------------------------------------------------
(1)    4/   1936E : 0004                		dc.w byte_190E2-Map_obj7B
(1)    5/   19370 : 000A                		dc.w byte_190E8-Map_obj7B
(1)    6/   19372 : 01                  byte_190E2:	dc.b 1
(1)    7/   19373 : FC00 0027 FC        		dc.b $FC, 0, 0,	$27, $FC
(1)    8/   19378 : 01                  byte_190E8:	dc.b 1
(1)    9/   19379 : FC00 0028 FC        		dc.b $FC, 0, 0,	$28, $FC
(1)   10/   1937E : (MACRO)             		align 2
(1)   10/   1937E :  (MACRO-2)                  cnop 0,2
(1)   10/   1937E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   32197/   1937E :                     
   32198/   1937E :                     ; ===========================================================================
   32199/   1937E :                     ; ---------------------------------------------------------------------------
   32200/   1937E :                     ; Object 75 - Eggman (SYZ)
   32201/   1937E :                     ; ---------------------------------------------------------------------------
   32202/   1937E :                     
   32203/   1937E :                     Obj75:					; XREF: Obj_Index
   32204/   1937E : 7000                		moveq	#0,d0
   32205/   19380 : 1028 0024           		move.b	$24(a0),d0
   32206/   19384 : 323B 0006           		move.w	Obj75_Index(pc,d0.w),d1
   32207/   19388 : 4EFB 1002           		jmp	Obj75_Index(pc,d1.w)
   32208/   1938C :                     ; ===========================================================================
   32209/   1938C : 0016                Obj75_Index:	dc.w Obj75_Main-Obj75_Index
   32210/   1938E : 0094                		dc.w Obj75_ShipMain-Obj75_Index
   32211/   19390 : 0424                		dc.w Obj75_FaceMain-Obj75_Index
   32212/   19392 : 048E                		dc.w Obj75_FlameMain-Obj75_Index
   32213/   19394 : 04FA                		dc.w Obj75_SpikeMain-Obj75_Index
   32214/   19396 :                     
   32215/   19396 : 0200 05             Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
   32216/   19399 : 0401 05             		dc.b 4,	1, 5
   32217/   1939C : 0607 05             		dc.b 6,	7, 5
   32218/   1939F : 0800 05             		dc.b 8,	0, 5
   32219/   193A2 :                     ; ===========================================================================
   32220/   193A2 :                     
   32221/   193A2 :                     Obj75_Main:				; XREF: Obj75_Index
   32222/   193A2 : 317C 2DB0 0008      		move.w	#$2DB0,8(a0)
   32223/   193A8 : 317C 04DA 000C      		move.w	#$4DA,$C(a0)
   32224/   193AE : 3168 0008 0030      		move.w	8(a0),$30(a0)
   32225/   193B4 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   32226/   193BA : 117C 000F 0020      		move.b	#$F,$20(a0)
   32227/   193C0 : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   32228/   193C6 : 45FA FFCE           		lea	Obj75_ObjData(pc),a2
   32229/   193CA : 2248                		movea.l	a0,a1
   32230/   193CC : 7203                		moveq	#3,d1
   32231/   193CE : 6018                		bra.s	Obj75_LoadBoss
   32232/   193D0 :                     ; ===========================================================================
   32233/   193D0 :                     
   32234/   193D0 :                     Obj75_Loop:
   32235/   193D0 : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   32236/   193D6 : 6648                		bne.s	Obj75_ShipMain
   32237/   193D8 : 12BC 0075           		move.b	#$75,(a1)
   32238/   193DC : 3368 0008 0008      		move.w	8(a0),8(a1)
   32239/   193E2 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   32240/   193E8 :                     
   32241/   193E8 :                     Obj75_LoadBoss:				; XREF: Obj75_Main
   32242/   193E8 : 08A8 0000 0022      		bclr	#0,$22(a0)
   32243/   193EE : 4229 0025           		clr.b	$25(a1)
   32244/   193F2 : 135A 0024           		move.b	(a2)+,$24(a1)
   32245/   193F6 : 135A 001C           		move.b	(a2)+,$1C(a1)
   32246/   193FA : 135A 0018           		move.b	(a2)+,$18(a1)
   32247/   193FE : 237C 0001 7F9C 0004 		move.l	#Map_Eggman,4(a1)
   32248/   19406 : 337C 0400 0002      		move.w	#$400,2(a1)
   32249/   1940C : 137C 0004 0001      		move.b	#4,1(a1)
   32250/   19412 : 137C 0020 0019      		move.b	#$20,$19(a1)
   32251/   19418 : 2348 0034           		move.l	a0,$34(a1)
   32252/   1941C : 51C9 FFB2           		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
   32253/   19420 :                     
   32254/   19420 :                     Obj75_ShipMain:				; XREF: Obj75_Index
   32255/   19420 : 7000                		moveq	#0,d0
   32256/   19422 : 1028 0025           		move.b	$25(a0),d0
   32257/   19426 : 323B 0028           		move.w	Obj75_ShipIndex(pc,d0.w),d1
   32258/   1942A : 4EBB 1024           		jsr	Obj75_ShipIndex(pc,d1.w)
   32259/   1942E : 43F9 0001 7F4C      		lea	(Ani_Eggman).l,a1
   32260/   19434 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   32261/   1943A : 7003                		moveq	#3,d0
   32262/   1943C : C028 0022           		and.b	$22(a0),d0
   32263/   19440 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   32264/   19446 : 8128 0001           		or.b	d0,1(a0)
   32265/   1944A : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   32266/   19450 :                     ; ===========================================================================
   32267/   19450 : 000C 00B0           Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
   32268/   19454 : 012C 02B4           		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
   32269/   19458 : 02EC 0332           		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
   32270/   1945C :                     ; ===========================================================================
   32271/   1945C :                     
   32272/   1945C :                     loc_191CC:				; XREF: Obj75_ShipIndex
   32273/   1945C : 317C FF00 0010      		move.w	#-$100,$10(a0)
   32274/   19462 : 0C68 2D38 0030      		cmpi.w	#$2D38,$30(a0)
   32275/   19468 : 6404                		bcc.s	loc_191DE
   32276/   1946A : 5428 0025           		addq.b	#2,$25(a0)
   32277/   1946E :                     
   32278/   1946E :                     loc_191DE:
   32279/   1946E : 1028 003F           		move.b	$3F(a0),d0
   32280/   19472 : 5428 003F           		addq.b	#2,$3F(a0)
   32281/   19476 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   32282/   1947C : E440                		asr.w	#2,d0
   32283/   1947E : 3140 0012           		move.w	d0,$12(a0)
   32284/   19482 :                     
   32285/   19482 :                     loc_191F2:
   32286/   19482 : 6100 E6B0           		bsr.w	BossMove
   32287/   19486 : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   32288/   1948C : 3168 0030 0008      		move.w	$30(a0),8(a0)
   32289/   19492 :                     
   32290/   19492 :                     loc_19202:
   32291/   19492 : 3028 0008           		move.w	8(a0),d0
   32292/   19496 : 0440 2C00           		subi.w	#$2C00,d0
   32293/   1949A : EA48                		lsr.w	#5,d0
   32294/   1949C : 1140 0034           		move.b	d0,$34(a0)
   32295/   194A0 : 0C28 0006 0025      		cmpi.b	#6,$25(a0)
   32296/   194A6 : 643E                		bcc.s	locret_19256
   32297/   194A8 : 4A28 0022           		tst.b	$22(a0)
   32298/   194AC : 6B3A                		bmi.s	loc_19258
   32299/   194AE : 4A28 0020           		tst.b	$20(a0)
   32300/   194B2 : 6632                		bne.s	locret_19256
   32301/   194B4 : 4A28 003E           		tst.b	$3E(a0)
   32302/   194B8 : 6610                		bne.s	loc_1923A
   32303/   194BA : 117C 0020 003E      		move.b	#$20,$3E(a0)
   32304/   194C0 : 303C 00AC           		move.w	#$AC,d0
   32305/   194C4 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play boss damage sound
   32306/   194CA :                     
   32307/   194CA :                     loc_1923A:
   32308/   194CA : 43F8 FB22           		lea	($FFFFFB22).w,a1
   32309/   194CE : 7000                		moveq	#0,d0
   32310/   194D0 : 4A51                		tst.w	(a1)
   32311/   194D2 : 6604                		bne.s	loc_19248
   32312/   194D4 : 303C 0EEE           		move.w	#$EEE,d0
   32313/   194D8 :                     
   32314/   194D8 :                     loc_19248:
   32315/   194D8 : 3280                		move.w	d0,(a1)
   32316/   194DA : 5328 003E           		subq.b	#1,$3E(a0)
   32317/   194DE : 6606                		bne.s	locret_19256
   32318/   194E0 : 117C 000F 0020      		move.b	#$F,$20(a0)
   32319/   194E6 :                     
   32320/   194E6 :                     locret_19256:
   32321/   194E6 : 4E75                		rts	
   32322/   194E8 :                     ; ===========================================================================
   32323/   194E8 :                     
   32324/   194E8 :                     loc_19258:				; XREF: loc_19202
   32325/   194E8 : 7064                		moveq	#100,d0
   32326/   194EA : 6100 3436           		bsr.w	AddPoints
   32327/   194EE : 117C 0006 0025      		move.b	#6,$25(a0)
   32328/   194F4 : 317C 00B4 003C      		move.w	#$B4,$3C(a0)
   32329/   194FA : 4268 0010           		clr.w	$10(a0)
   32330/   194FE : 4E75                		rts	
   32331/   19500 :                     ; ===========================================================================
   32332/   19500 :                     
   32333/   19500 :                     loc_19270:				; XREF: Obj75_ShipIndex
   32334/   19500 : 3028 0030           		move.w	$30(a0),d0
   32335/   19504 : 317C 0140 0010      		move.w	#$140,$10(a0)
   32336/   1950A : 0828 0000 0022      		btst	#0,$22(a0)
   32337/   19510 : 660C                		bne.s	loc_1928E
   32338/   19512 : 4468 0010           		neg.w	$10(a0)
   32339/   19516 : 0C40 2C08           		cmpi.w	#$2C08,d0
   32340/   1951A : 6E12                		bgt.s	loc_1929E
   32341/   1951C : 6006                		bra.s	loc_19294
   32342/   1951E :                     ; ===========================================================================
   32343/   1951E :                     
   32344/   1951E :                     loc_1928E:
   32345/   1951E : 0C40 2D38           		cmpi.w	#$2D38,d0
   32346/   19522 : 6D0A                		blt.s	loc_1929E
   32347/   19524 :                     
   32348/   19524 :                     loc_19294:
   32349/   19524 : 0868 0000 0022      		bchg	#0,$22(a0)
   32350/   1952A : 4228 003D           		clr.b	$3D(a0)
   32351/   1952E :                     
   32352/   1952E :                     loc_1929E:
   32353/   1952E : 0440 2C10           		subi.w	#$2C10,d0
   32354/   19532 : 0240 001F           		andi.w	#$1F,d0
   32355/   19536 : 0440 001F           		subi.w	#$1F,d0
   32356/   1953A : 6A02                		bpl.s	loc_192AE
   32357/   1953C : 4440                		neg.w	d0
   32358/   1953E :                     
   32359/   1953E :                     loc_192AE:
   32360/   1953E : 5340                		subq.w	#1,d0
   32361/   19540 : 6E36                		bgt.s	loc_192E8
   32362/   19542 : 4A28 003D           		tst.b	$3D(a0)
   32363/   19546 : 6630                		bne.s	loc_192E8
   32364/   19548 : 3238 D008           		move.w	($FFFFD008).w,d1
   32365/   1954C : 0441 2C00           		subi.w	#$2C00,d1
   32366/   19550 : EA41                		asr.w	#5,d1
   32367/   19552 : B228 0034           		cmp.b	$34(a0),d1
   32368/   19556 : 6620                		bne.s	loc_192E8
   32369/   19558 : 7000                		moveq	#0,d0
   32370/   1955A : 1028 0034           		move.b	$34(a0),d0
   32371/   1955E : EB40                		asl.w	#5,d0
   32372/   19560 : 0640 2C10           		addi.w	#$2C10,d0
   32373/   19564 : 3140 0030           		move.w	d0,$30(a0)
   32374/   19568 : 6100 0170           		bsr.w	Obj75_FindBlocks
   32375/   1956C : 5428 0025           		addq.b	#2,$25(a0)
   32376/   19570 : 4268 0028           		clr.w	$28(a0)
   32377/   19574 : 4268 0010           		clr.w	$10(a0)
   32378/   19578 :                     
   32379/   19578 :                     loc_192E8:
   32380/   19578 : 6000 FEF4           		bra.w	loc_191DE
   32381/   1957C :                     ; ===========================================================================
   32382/   1957C :                     
   32383/   1957C :                     loc_192EC:				; XREF: Obj75_ShipIndex
   32384/   1957C : 7000                		moveq	#0,d0
   32385/   1957E : 1028 0028           		move.b	$28(a0),d0
   32386/   19582 : 303B 0006           		move.w	off_192FA(pc,d0.w),d0
   32387/   19586 : 4EFB 0002           		jmp	off_192FA(pc,d0.w)
   32388/   1958A :                     ; ===========================================================================
   32389/   1958A : 0008                off_192FA:	dc.w loc_19302-off_192FA
   32390/   1958C : 004E                		dc.w loc_19348-off_192FA
   32391/   1958E : 0094                		dc.w loc_1938E-off_192FA
   32392/   19590 : 00D6                		dc.w loc_193D0-off_192FA
   32393/   19592 :                     ; ===========================================================================
   32394/   19592 :                     
   32395/   19592 :                     loc_19302:				; XREF: off_192FA
   32396/   19592 : 317C 0180 0012      		move.w	#$180,$12(a0)
   32397/   19598 : 3028 0038           		move.w	$38(a0),d0
   32398/   1959C : 0C40 0556           		cmpi.w	#$556,d0
   32399/   195A0 : 6532                		bcs.s	loc_19344
   32400/   195A2 : 317C 0556 0038      		move.w	#$556,$38(a0)
   32401/   195A8 : 4268 003C           		clr.w	$3C(a0)
   32402/   195AC : 70FF                		moveq	#-1,d0
   32403/   195AE : 3028 0036           		move.w	$36(a0),d0
   32404/   195B2 : 6718                		beq.s	loc_1933C
   32405/   195B4 : 2240                		movea.l	d0,a1
   32406/   195B6 : 137C 00FF 0029      		move.b	#-1,$29(a1)
   32407/   195BC : 117C 00FF 0029      		move.b	#-1,$29(a0)
   32408/   195C2 : 2348 0034           		move.l	a0,$34(a1)
   32409/   195C6 : 317C 0032 003C      		move.w	#$32,$3C(a0)
   32410/   195CC :                     
   32411/   195CC :                     loc_1933C:
   32412/   195CC : 4268 0012           		clr.w	$12(a0)
   32413/   195D0 : 5428 0028           		addq.b	#2,$28(a0)
   32414/   195D4 :                     
   32415/   195D4 :                     loc_19344:
   32416/   195D4 : 6000 FEAC           		bra.w	loc_191F2
   32417/   195D8 :                     ; ===========================================================================
   32418/   195D8 :                     
   32419/   195D8 :                     loc_19348:				; XREF: off_192FA
   32420/   195D8 : 5368 003C           		subq.w	#1,$3C(a0)
   32421/   195DC : 6A18                		bpl.s	loc_19366
   32422/   195DE : 5428 0028           		addq.b	#2,$28(a0)
   32423/   195E2 : 317C F800 0012      		move.w	#-$800,$12(a0)
   32424/   195E8 : 4A68 0036           		tst.w	$36(a0)
   32425/   195EC : 6604                		bne.s	loc_19362
   32426/   195EE : E0E8 0012           		asr	$12(a0)
   32427/   195F2 :                     
   32428/   195F2 :                     loc_19362:
   32429/   195F2 : 7000                		moveq	#0,d0
   32430/   195F4 : 6016                		bra.s	loc_1937C
   32431/   195F6 :                     ; ===========================================================================
   32432/   195F6 :                     
   32433/   195F6 :                     loc_19366:
   32434/   195F6 : 7000                		moveq	#0,d0
   32435/   195F8 : 0C68 001E 003C      		cmpi.w	#$1E,$3C(a0)
   32436/   195FE : 6E0C                		bgt.s	loc_1937C
   32437/   19600 : 7002                		moveq	#2,d0
   32438/   19602 : 0828 0001 003D      		btst	#1,$3D(a0)
   32439/   19608 : 6702                		beq.s	loc_1937C
   32440/   1960A : 4440                		neg.w	d0
   32441/   1960C :                     
   32442/   1960C :                     loc_1937C:
   32443/   1960C : D068 0038           		add.w	$38(a0),d0
   32444/   19610 : 3140 000C           		move.w	d0,$C(a0)
   32445/   19614 : 3168 0030 0008      		move.w	$30(a0),8(a0)
   32446/   1961A : 6000 FE76           		bra.w	loc_19202
   32447/   1961E :                     ; ===========================================================================
   32448/   1961E :                     
   32449/   1961E :                     loc_1938E:				; XREF: off_192FA
   32450/   1961E : 303C 04DA           		move.w	#$4DA,d0
   32451/   19622 : 4A68 0036           		tst.w	$36(a0)
   32452/   19626 : 6704                		beq.s	loc_1939C
   32453/   19628 : 0440 0018           		subi.w	#$18,d0
   32454/   1962C :                     
   32455/   1962C :                     loc_1939C:
   32456/   1962C : B068 0038           		cmp.w	$38(a0),d0
   32457/   19630 : 6D1C                		blt.s	loc_193BE
   32458/   19632 : 317C 0008 003C      		move.w	#8,$3C(a0)
   32459/   19638 : 4A68 0036           		tst.w	$36(a0)
   32460/   1963C : 6706                		beq.s	loc_193B4
   32461/   1963E : 317C 002D 003C      		move.w	#$2D,$3C(a0)
   32462/   19644 :                     
   32463/   19644 :                     loc_193B4:
   32464/   19644 : 5428 0028           		addq.b	#2,$28(a0)
   32465/   19648 : 4268 0012           		clr.w	$12(a0)
   32466/   1964C : 600E                		bra.s	loc_193CC
   32467/   1964E :                     ; ===========================================================================
   32468/   1964E :                     
   32469/   1964E :                     loc_193BE:
   32470/   1964E : 0C68 FFC0 0012      		cmpi.w	#-$40,$12(a0)
   32471/   19654 : 6C06                		bge.s	loc_193CC
   32472/   19656 : 0668 000C 0012      		addi.w	#$C,$12(a0)
   32473/   1965C :                     
   32474/   1965C :                     loc_193CC:
   32475/   1965C : 6000 FE24           		bra.w	loc_191F2
   32476/   19660 :                     ; ===========================================================================
   32477/   19660 :                     
   32478/   19660 :                     loc_193D0:				; XREF: off_192FA
   32479/   19660 : 5368 003C           		subq.w	#1,$3C(a0)
   32480/   19664 : 6E30                		bgt.s	loc_19406
   32481/   19666 : 6B16                		bmi.s	loc_193EE
   32482/   19668 : 70FF                		moveq	#-1,d0
   32483/   1966A : 3028 0036           		move.w	$36(a0),d0
   32484/   1966E : 6708                		beq.s	loc_193E8
   32485/   19670 : 2240                		movea.l	d0,a1
   32486/   19672 : 137C 000A 0029      		move.b	#$A,$29(a1)
   32487/   19678 :                     
   32488/   19678 :                     loc_193E8:
   32489/   19678 : 4268 0036           		clr.w	$36(a0)
   32490/   1967C : 6018                		bra.s	loc_19406
   32491/   1967E :                     ; ===========================================================================
   32492/   1967E :                     
   32493/   1967E :                     loc_193EE:
   32494/   1967E : 0C68 FFE2 003C      		cmpi.w	#-$1E,$3C(a0)
   32495/   19684 : 6610                		bne.s	loc_19406
   32496/   19686 : 4228 0029           		clr.b	$29(a0)
   32497/   1968A : 5528 0025           		subq.b	#2,$25(a0)
   32498/   1968E : 117C 00FF 003D      		move.b	#-1,$3D(a0)
   32499/   19694 : 6040                		bra.s	loc_19446
   32500/   19696 :                     ; ===========================================================================
   32501/   19696 :                     
   32502/   19696 :                     loc_19406:
   32503/   19696 : 7001                		moveq	#1,d0
   32504/   19698 : 4A68 0036           		tst.w	$36(a0)
   32505/   1969C : 6702                		beq.s	loc_19410
   32506/   1969E : 7002                		moveq	#2,d0
   32507/   196A0 :                     
   32508/   196A0 :                     loc_19410:
   32509/   196A0 : 0C68 04DA 0038      		cmpi.w	#$4DA,$38(a0)
   32510/   196A6 : 670C                		beq.s	loc_19424
   32511/   196A8 : 6D02                		blt.s	loc_1941C
   32512/   196AA : 4440                		neg.w	d0
   32513/   196AC :                     
   32514/   196AC :                     loc_1941C:
   32515/   196AC : 4A68 0036           		tst.w	$36(a0)
   32516/   196B0 : D168 0038           		add.w	d0,$38(a0)
   32517/   196B4 :                     
   32518/   196B4 :                     loc_19424:
   32519/   196B4 : 7000                		moveq	#0,d0
   32520/   196B6 : 4A68 0036           		tst.w	$36(a0)
   32521/   196BA : 670C                		beq.s	loc_19438
   32522/   196BC : 7002                		moveq	#2,d0
   32523/   196BE : 0828 0000 003D      		btst	#0,$3D(a0)
   32524/   196C4 : 6702                		beq.s	loc_19438
   32525/   196C6 : 4440                		neg.w	d0
   32526/   196C8 :                     
   32527/   196C8 :                     loc_19438:
   32528/   196C8 : D068 0038           		add.w	$38(a0),d0
   32529/   196CC : 3140 000C           		move.w	d0,$C(a0)
   32530/   196D0 : 3168 0030 0008      		move.w	$30(a0),8(a0)
   32531/   196D6 :                     
   32532/   196D6 :                     loc_19446:
   32533/   196D6 : 6000 FDBA           		bra.w	loc_19202
   32534/   196DA :                     
   32535/   196DA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   32536/   196DA :                     
   32537/   196DA :                     
   32538/   196DA :                     Obj75_FindBlocks:			; XREF: loc_192AE
   32539/   196DA : 4268 0036           		clr.w	$36(a0)
   32540/   196DE : 43F8 D040           		lea	($FFFFD040).w,a1
   32541/   196E2 : 703E                		moveq	#$3E,d0
   32542/   196E4 : 7276                		moveq	#$76,d1
   32543/   196E6 : 1428 0034           		move.b	$34(a0),d2
   32544/   196EA :                     
   32545/   196EA :                     Obj75_FindLoop:
   32546/   196EA : B211                		cmp.b	(a1),d1		; is object a SYZ boss block?
   32547/   196EC : 660C                		bne.s	loc_1946A	; if not, branch
   32548/   196EE : B429 0028           		cmp.b	$28(a1),d2
   32549/   196F2 : 6606                		bne.s	loc_1946A
   32550/   196F4 : 3149 0036           		move.w	a1,$36(a0)
   32551/   196F8 : 6008                		bra.s	locret_19472
   32552/   196FA :                     ; ===========================================================================
   32553/   196FA :                     
   32554/   196FA :                     loc_1946A:
   32555/   196FA : 43E9 0040           		lea	$40(a1),a1	; next object RAM entry
   32556/   196FE : 51C8 FFEA           		dbf	d0,Obj75_FindLoop
   32557/   19702 :                     
   32558/   19702 :                     locret_19472:
   32559/   19702 : 4E75                		rts	
   32560/   19704 :                     ; End of function Obj75_FindBlocks
   32561/   19704 :                     
   32562/   19704 :                     ; ===========================================================================
   32563/   19704 :                     
   32564/   19704 :                     loc_19474:				; XREF: Obj75_ShipIndex
   32565/   19704 : 5368 003C           		subq.w	#1,$3C(a0)
   32566/   19708 : 6B04                		bmi.s	loc_1947E
   32567/   1970A : 6000 E3E4           		bra.w	BossDefeated
   32568/   1970E :                     ; ===========================================================================
   32569/   1970E :                     
   32570/   1970E :                     loc_1947E:
   32571/   1970E : 5428 0025           		addq.b	#2,$25(a0)
   32572/   19712 : 4268 0012           		clr.w	$12(a0)
   32573/   19716 : 08E8 0000 0022      		bset	#0,$22(a0)
   32574/   1971C : 08A8 0007 0022      		bclr	#7,$22(a0)
   32575/   19722 : 4268 0010           		clr.w	$10(a0)
   32576/   19726 : 317C FFFF 003C      		move.w	#-1,$3C(a0)
   32577/   1972C : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   32578/   19730 : 6606                		bne.s	loc_194A8
   32579/   19732 : 11FC 0001 F7A7      		move.b	#1,($FFFFF7A7).w
   32580/   19738 :                     
   32581/   19738 :                     loc_194A8:
   32582/   19738 : 6000 FD58           		bra.w	loc_19202
   32583/   1973C :                     ; ===========================================================================
   32584/   1973C :                     
   32585/   1973C :                     loc_194AC:				; XREF: Obj75_ShipIndex
   32586/   1973C : 5268 003C           		addq.w	#1,$3C(a0)
   32587/   19740 : 670A                		beq.s	loc_194BC
   32588/   19742 : 6A0E                		bpl.s	loc_194C2
   32589/   19744 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   32590/   1974A : 6032                		bra.s	loc_194EE
   32591/   1974C :                     ; ===========================================================================
   32592/   1974C :                     
   32593/   1974C :                     loc_194BC:
   32594/   1974C : 4268 0012           		clr.w	$12(a0)
   32595/   19750 : 602C                		bra.s	loc_194EE
   32596/   19752 :                     ; ===========================================================================
   32597/   19752 :                     
   32598/   19752 :                     loc_194C2:
   32599/   19752 : 0C68 0020 003C      		cmpi.w	#$20,$3C(a0)
   32600/   19758 : 6510                		bcs.s	loc_194DA
   32601/   1975A : 6714                		beq.s	loc_194E0
   32602/   1975C : 0C68 002A 003C      		cmpi.w	#$2A,$3C(a0)
   32603/   19762 : 651A                		bcs.s	loc_194EE
   32604/   19764 : 5428 0025           		addq.b	#2,$25(a0)
   32605/   19768 : 6014                		bra.s	loc_194EE
   32606/   1976A :                     ; ===========================================================================
   32607/   1976A :                     
   32608/   1976A :                     loc_194DA:
   32609/   1976A : 5168 0012           		subq.w	#8,$12(a0)
   32610/   1976E : 600E                		bra.s	loc_194EE
   32611/   19770 :                     ; ===========================================================================
   32612/   19770 :                     
   32613/   19770 :                     loc_194E0:
   32614/   19770 : 4268 0012           		clr.w	$12(a0)
   32615/   19774 : 303C 0085           		move.w	#$85,d0
   32616/   19778 : 4EB9 0000 1396      		jsr	(PlaySound).l	; play SYZ music
   32617/   1977E :                     
   32618/   1977E :                     loc_194EE:
   32619/   1977E : 6000 FD02           		bra.w	loc_191F2
   32620/   19782 :                     ; ===========================================================================
   32621/   19782 :                     
   32622/   19782 :                     loc_194F2:				; XREF: Obj75_ShipIndex
   32623/   19782 : 317C 0400 0010      		move.w	#$400,$10(a0)
   32624/   19788 : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   32625/   1978E : 0C78 2D40 F72A      		cmpi.w	#$2D40,($FFFFF72A).w
   32626/   19794 : 6406                		bcc.s	loc_1950C
   32627/   19796 : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   32628/   1979A : 6006                		bra.s	loc_19512
   32629/   1979C :                     ; ===========================================================================
   32630/   1979C :                     
   32631/   1979C :                     loc_1950C:
   32632/   1979C : 4A28 0001           		tst.b	1(a0)
   32633/   197A0 : 6A08                		bpl.s	Obj75_ShipDelete
   32634/   197A2 :                     
   32635/   197A2 :                     loc_19512:
   32636/   197A2 : 6100 E390           		bsr.w	BossMove
   32637/   197A6 : 6000 FCC6           		bra.w	loc_191DE
   32638/   197AA :                     ; ===========================================================================
   32639/   197AA :                     
   32640/   197AA :                     Obj75_ShipDelete:
   32641/   197AA : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   32642/   197B0 :                     ; ===========================================================================
   32643/   197B0 :                     
   32644/   197B0 :                     Obj75_FaceMain:				; XREF: Obj75_Index
   32645/   197B0 : 7201                		moveq	#1,d1
   32646/   197B2 : 2268 0034           		movea.l	$34(a0),a1
   32647/   197B6 : 7000                		moveq	#0,d0
   32648/   197B8 : 1029 0025           		move.b	$25(a1),d0
   32649/   197BC : 303B 0018           		move.w	off_19546(pc,d0.w),d0
   32650/   197C0 : 4EBB 0014           		jsr	off_19546(pc,d0.w)
   32651/   197C4 : 1141 001C           		move.b	d1,$1C(a0)
   32652/   197C8 : 1010                		move.b	(a0),d0
   32653/   197CA : B011                		cmp.b	(a1),d0
   32654/   197CC : 6602                		bne.s	Obj75_FaceDelete
   32655/   197CE : 607E                		bra.s	loc_195BE
   32656/   197D0 :                     ; ===========================================================================
   32657/   197D0 :                     
   32658/   197D0 :                     Obj75_FaceDelete:
   32659/   197D0 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   32660/   197D6 :                     ; ===========================================================================
   32661/   197D6 : 002E 002E           off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
   32662/   197DA : 0014 000C           		dc.w loc_1955A-off_19546, loc_19552-off_19546
   32663/   197DE : 000C 0010           		dc.w loc_19552-off_19546, loc_19556-off_19546
   32664/   197E2 :                     ; ===========================================================================
   32665/   197E2 :                     
   32666/   197E2 :                     loc_19552:				; XREF: off_19546
   32667/   197E2 : 720A                		moveq	#$A,d1
   32668/   197E4 : 4E75                		rts	
   32669/   197E6 :                     ; ===========================================================================
   32670/   197E6 :                     
   32671/   197E6 :                     loc_19556:				; XREF: off_19546
   32672/   197E6 : 7206                		moveq	#6,d1
   32673/   197E8 : 4E75                		rts	
   32674/   197EA :                     ; ===========================================================================
   32675/   197EA :                     
   32676/   197EA :                     loc_1955A:				; XREF: off_19546
   32677/   197EA : 7000                		moveq	#0,d0
   32678/   197EC : 1029 0028           		move.b	$28(a1),d0
   32679/   197F0 : 303B 0006           		move.w	off_19568(pc,d0.w),d0
   32680/   197F4 : 4EFB 0002           		jmp	off_19568(pc,d0.w)
   32681/   197F8 :                     ; ===========================================================================
   32682/   197F8 : 0008 000A           off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
   32683/   197FC : 0008 0008           		dc.w loc_19570-off_19568, loc_19570-off_19568
   32684/   19800 :                     ; ===========================================================================
   32685/   19800 :                     
   32686/   19800 :                     loc_19570:				; XREF: off_19568
   32687/   19800 : 6002                		bra.s	loc_19574
   32688/   19802 :                     ; ===========================================================================
   32689/   19802 :                     
   32690/   19802 :                     loc_19572:				; XREF: off_19568
   32691/   19802 : 7206                		moveq	#6,d1
   32692/   19804 :                     
   32693/   19804 :                     loc_19574:				; XREF: off_19546
   32694/   19804 : 4A29 0020           		tst.b	$20(a1)
   32695/   19808 : 6604                		bne.s	loc_1957E
   32696/   1980A : 7205                		moveq	#5,d1
   32697/   1980C : 4E75                		rts	
   32698/   1980E :                     ; ===========================================================================
   32699/   1980E :                     
   32700/   1980E :                     loc_1957E:
   32701/   1980E : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   32702/   19814 : 6502                		bcs.s	locret_19588
   32703/   19816 : 7204                		moveq	#4,d1
   32704/   19818 :                     
   32705/   19818 :                     locret_19588:
   32706/   19818 : 4E75                		rts	
   32707/   1981A :                     ; ===========================================================================
   32708/   1981A :                     
   32709/   1981A :                     Obj75_FlameMain:			; XREF: Obj75_Index
   32710/   1981A : 117C 0007 001C      		move.b	#7,$1C(a0)
   32711/   19820 : 2268 0034           		movea.l	$34(a0),a1
   32712/   19824 : 0C29 000A 0025      		cmpi.b	#$A,$25(a1)
   32713/   1982A : 660E                		bne.s	loc_195AA
   32714/   1982C : 117C 000B 001C      		move.b	#$B,$1C(a0)
   32715/   19832 : 4A28 0001           		tst.b	1(a0)
   32716/   19836 : 6A10                		bpl.s	Obj75_FlameDelete
   32717/   19838 : 600C                		bra.s	loc_195B6
   32718/   1983A :                     ; ===========================================================================
   32719/   1983A :                     
   32720/   1983A :                     loc_195AA:
   32721/   1983A : 4A69 0010           		tst.w	$10(a1)
   32722/   1983E : 6706                		beq.s	loc_195B6
   32723/   19840 : 117C 0008 001C      		move.b	#8,$1C(a0)
   32724/   19846 :                     
   32725/   19846 :                     loc_195B6:
   32726/   19846 : 6006                		bra.s	loc_195BE
   32727/   19848 :                     ; ===========================================================================
   32728/   19848 :                     
   32729/   19848 :                     Obj75_FlameDelete:
   32730/   19848 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   32731/   1984E :                     ; ===========================================================================
   32732/   1984E :                     
   32733/   1984E :                     loc_195BE:
   32734/   1984E : 43F9 0001 7F4C      		lea	(Ani_Eggman).l,a1
   32735/   19854 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   32736/   1985A : 2268 0034           		movea.l	$34(a0),a1
   32737/   1985E : 3169 0008 0008      		move.w	8(a1),8(a0)
   32738/   19864 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   32739/   1986A :                     
   32740/   1986A :                     loc_195DA:
   32741/   1986A : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   32742/   19870 : 7003                		moveq	#3,d0
   32743/   19872 : C028 0022           		and.b	$22(a0),d0
   32744/   19876 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   32745/   1987C : 8128 0001           		or.b	d0,1(a0)
   32746/   19880 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   32747/   19886 :                     ; ===========================================================================
   32748/   19886 :                     
   32749/   19886 :                     Obj75_SpikeMain:			; XREF: Obj75_Index
   32750/   19886 : 217C 0001 8064 0004 		move.l	#Map_BossItems,4(a0)
   32751/   1988E : 317C 246C 0002      		move.w	#$246C,2(a0)
   32752/   19894 : 117C 0005 001A      		move.b	#5,$1A(a0)
   32753/   1989A : 2268 0034           		movea.l	$34(a0),a1
   32754/   1989E : 0C29 000A 0025      		cmpi.b	#$A,$25(a1)
   32755/   198A4 : 6606                		bne.s	loc_1961C
   32756/   198A6 : 4A28 0001           		tst.b	1(a0)
   32757/   198AA : 6A70                		bpl.s	Obj75_SpikeDelete
   32758/   198AC :                     
   32759/   198AC :                     loc_1961C:
   32760/   198AC : 3169 0008 0008      		move.w	8(a1),8(a0)
   32761/   198B2 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   32762/   198B8 : 3028 003C           		move.w	$3C(a0),d0
   32763/   198BC : 0C29 0004 0025      		cmpi.b	#4,$25(a1)
   32764/   198C2 : 661E                		bne.s	loc_19652
   32765/   198C4 : 0C29 0006 0028      		cmpi.b	#6,$28(a1)
   32766/   198CA : 6710                		beq.s	loc_1964C
   32767/   198CC : 4A29 0028           		tst.b	$28(a1)
   32768/   198D0 : 6616                		bne.s	loc_19658
   32769/   198D2 : 0C40 0094           		cmpi.w	#$94,d0
   32770/   198D6 : 6C10                		bge.s	loc_19658
   32771/   198D8 : 5E40                		addq.w	#7,d0
   32772/   198DA : 600C                		bra.s	loc_19658
   32773/   198DC :                     ; ===========================================================================
   32774/   198DC :                     
   32775/   198DC :                     loc_1964C:
   32776/   198DC : 4A69 003C           		tst.w	$3C(a1)
   32777/   198E0 : 6A06                		bpl.s	loc_19658
   32778/   198E2 :                     
   32779/   198E2 :                     loc_19652:
   32780/   198E2 : 4A40                		tst.w	d0
   32781/   198E4 : 6F02                		ble.s	loc_19658
   32782/   198E6 : 5B40                		subq.w	#5,d0
   32783/   198E8 :                     
   32784/   198E8 :                     loc_19658:
   32785/   198E8 : 3140 003C           		move.w	d0,$3C(a0)
   32786/   198EC : E440                		asr.w	#2,d0
   32787/   198EE : D168 000C           		add.w	d0,$C(a0)
   32788/   198F2 : 117C 0008 0019      		move.b	#8,$19(a0)
   32789/   198F8 : 117C 000C 0016      		move.b	#$C,$16(a0)
   32790/   198FE : 4228 0020           		clr.b	$20(a0)
   32791/   19902 : 2268 0034           		movea.l	$34(a0),a1
   32792/   19906 : 4A29 0020           		tst.b	$20(a1)
   32793/   1990A : 670C                		beq.s	loc_19688
   32794/   1990C : 4A29 0029           		tst.b	$29(a1)
   32795/   19910 : 6606                		bne.s	loc_19688
   32796/   19912 : 117C 0084 0020      		move.b	#$84,$20(a0)
   32797/   19918 :                     
   32798/   19918 :                     loc_19688:
   32799/   19918 : 6000 FF50           		bra.w	loc_195DA
   32800/   1991C :                     ; ===========================================================================
   32801/   1991C :                     
   32802/   1991C :                     Obj75_SpikeDelete:
   32803/   1991C : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   32804/   19922 :                     ; ===========================================================================
   32805/   19922 :                     ; ---------------------------------------------------------------------------
   32806/   19922 :                     ; Object 76 - blocks that Eggman picks up (SYZ)
   32807/   19922 :                     ; ---------------------------------------------------------------------------
   32808/   19922 :                     
   32809/   19922 :                     Obj76:					; XREF: Obj_Index
   32810/   19922 : 7000                		moveq	#0,d0
   32811/   19924 : 1028 0024           		move.b	$24(a0),d0
   32812/   19928 : 323B 0006           		move.w	Obj76_Index(pc,d0.w),d1
   32813/   1992C : 4EFB 1002           		jmp	Obj76_Index(pc,d1.w)
   32814/   19930 :                     ; ===========================================================================
   32815/   19930 : 0006                Obj76_Index:	dc.w Obj76_Main-Obj76_Index
   32816/   19932 : 0064                		dc.w Obj76_Action-Obj76_Index
   32817/   19934 : 00C2                		dc.w loc_19762-Obj76_Index
   32818/   19936 :                     ; ===========================================================================
   32819/   19936 :                     
   32820/   19936 :                     Obj76_Main:				; XREF: Obj76_Index
   32821/   19936 : 7800                		moveq	#0,d4
   32822/   19938 : 3A3C 2C10           		move.w	#$2C10,d5
   32823/   1993C : 7C09                		moveq	#9,d6
   32824/   1993E : 43D0                		lea	(a0),a1
   32825/   19940 : 6008                		bra.s	Obj76_MakeBlock
   32826/   19942 :                     ; ===========================================================================
   32827/   19942 :                     
   32828/   19942 :                     Obj76_Loop:
   32829/   19942 : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   32830/   19948 : 6648                		bne.s	Obj76_ExitLoop
   32831/   1994A :                     
   32832/   1994A :                     Obj76_MakeBlock:			; XREF: Obj76_Main
   32833/   1994A : 12BC 0076           		move.b	#$76,(a1)
   32834/   1994E : 237C 0001 9A8E 0004 		move.l	#Map_obj76,4(a1)
   32835/   19956 : 337C 4000 0002      		move.w	#$4000,2(a1)
   32836/   1995C : 137C 0004 0001      		move.b	#4,1(a1)
   32837/   19962 : 137C 0010 0019      		move.b	#$10,$19(a1)
   32838/   19968 : 137C 0010 0016      		move.b	#$10,$16(a1)
   32839/   1996E : 137C 0003 0018      		move.b	#3,$18(a1)
   32840/   19974 : 3345 0008           		move.w	d5,8(a1)	; set x-position
   32841/   19978 : 337C 0582 000C      		move.w	#$582,$C(a1)
   32842/   1997E : 3344 0028           		move.w	d4,$28(a1)
   32843/   19982 : 0644 0101           		addi.w	#$101,d4
   32844/   19986 : 0645 0020           		addi.w	#$20,d5		; add $20 to next x-position
   32845/   1998A : 5429 0024           		addq.b	#2,$24(a1)
   32846/   1998E : 51CE FFB2           		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
   32847/   19992 :                     
   32848/   19992 :                     Obj76_ExitLoop:
   32849/   19992 : 4E75                		rts	
   32850/   19994 :                     ; ===========================================================================
   32851/   19994 :                     
   32852/   19994 :                     Obj76_Action:				; XREF: Obj76_Index
   32853/   19994 : 1028 0029           		move.b	$29(a0),d0
   32854/   19998 : B028 0028           		cmp.b	$28(a0),d0
   32855/   1999C : 6738                		beq.s	Obj76_Solid
   32856/   1999E : 4A00                		tst.b	d0
   32857/   199A0 : 6B06                		bmi.s	loc_19718
   32858/   199A2 :                     
   32859/   199A2 :                     loc_19712:
   32860/   199A2 : 6100 0066           		bsr.w	Obj76_Break
   32861/   199A6 : 6044                		bra.s	Obj76_Display
   32862/   199A8 :                     ; ===========================================================================
   32863/   199A8 :                     
   32864/   199A8 :                     loc_19718:
   32865/   199A8 : 2268 0034           		movea.l	$34(a0),a1
   32866/   199AC : 4A29 0021           		tst.b	$21(a1)
   32867/   199B0 : 67F0                		beq.s	loc_19712
   32868/   199B2 : 3169 0008 0008      		move.w	8(a1),8(a0)
   32869/   199B8 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   32870/   199BE : 0668 002C 000C      		addi.w	#$2C,$C(a0)
   32871/   199C4 : B2C8                		cmpa.w	a0,a1
   32872/   199C6 : 6524                		bcs.s	Obj76_Display
   32873/   199C8 : 3029 0012           		move.w	$12(a1),d0
   32874/   199CC : 48C0                		ext.l	d0
   32875/   199CE : E080                		asr.l	#8,d0
   32876/   199D0 : D168 000C           		add.w	d0,$C(a0)
   32877/   199D4 : 6016                		bra.s	Obj76_Display
   32878/   199D6 :                     ; ===========================================================================
   32879/   199D6 :                     
   32880/   199D6 :                     Obj76_Solid:				; XREF: Obj76_Action
   32881/   199D6 : 323C 001B           		move.w	#$1B,d1
   32882/   199DA : 343C 0010           		move.w	#$10,d2
   32883/   199DE : 363C 0011           		move.w	#$11,d3
   32884/   199E2 : 3828 0008           		move.w	8(a0),d4
   32885/   199E6 : 4EB9 0000 FAE6      		jsr	(SolidObject).l
   32886/   199EC :                     
   32887/   199EC :                     Obj76_Display:				; XREF: Obj76_Action
   32888/   199EC : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   32889/   199F2 :                     ; ===========================================================================
   32890/   199F2 :                     
   32891/   199F2 :                     loc_19762:				; XREF: Obj76_Index
   32892/   199F2 : 4A28 0001           		tst.b	1(a0)
   32893/   199F6 : 6A0C                		bpl.s	Obj76_Delete
   32894/   199F8 : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   32895/   199FE : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   32896/   19A04 :                     ; ===========================================================================
   32897/   19A04 :                     
   32898/   19A04 :                     Obj76_Delete:
   32899/   19A04 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   32900/   19A0A :                     
   32901/   19A0A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   32902/   19A0A :                     
   32903/   19A0A :                     
   32904/   19A0A :                     Obj76_Break:				; XREF: Obj76_Action
   32905/   19A0A : 49FA 0062           		lea	Obj76_FragSpeed(pc),a4
   32906/   19A0E : 4BFA 006E           		lea	Obj76_FragPos(pc),a5
   32907/   19A12 : 7801                		moveq	#1,d4
   32908/   19A14 : 7203                		moveq	#3,d1
   32909/   19A16 : 7438                		moveq	#$38,d2
   32910/   19A18 : 5428 0024           		addq.b	#2,$24(a0)
   32911/   19A1C : 117C 0008 0019      		move.b	#8,$19(a0)
   32912/   19A22 : 117C 0008 0016      		move.b	#8,$16(a0)
   32913/   19A28 : 43D0                		lea	(a0),a1
   32914/   19A2A : 6008                		bra.s	Obj76_MakeFrag
   32915/   19A2C :                     ; ===========================================================================
   32916/   19A2C :                     
   32917/   19A2C :                     Obj76_LoopFrag:
   32918/   19A2C : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   32919/   19A32 : 6630                		bne.s	loc_197D4
   32920/   19A34 :                     
   32921/   19A34 :                     Obj76_MakeFrag:
   32922/   19A34 : 45D0                		lea	(a0),a2
   32923/   19A36 : 47D1                		lea	(a1),a3
   32924/   19A38 : 7603                		moveq	#3,d3
   32925/   19A3A :                     
   32926/   19A3A :                     loc_197AA:
   32927/   19A3A : 26DA                		move.l	(a2)+,(a3)+
   32928/   19A3C : 26DA                		move.l	(a2)+,(a3)+
   32929/   19A3E : 26DA                		move.l	(a2)+,(a3)+
   32930/   19A40 : 26DA                		move.l	(a2)+,(a3)+
   32931/   19A42 : 51CB FFF6           		dbf	d3,loc_197AA
   32932/   19A46 :                     
   32933/   19A46 : 335C 0010           		move.w	(a4)+,$10(a1)
   32934/   19A4A : 335C 0012           		move.w	(a4)+,$12(a1)
   32935/   19A4E : 361D                		move.w	(a5)+,d3
   32936/   19A50 : D769 0008           		add.w	d3,8(a1)
   32937/   19A54 : 361D                		move.w	(a5)+,d3
   32938/   19A56 : D769 000C           		add.w	d3,$C(a1)
   32939/   19A5A : 1344 001A           		move.b	d4,$1A(a1)
   32940/   19A5E : 5244                		addq.w	#1,d4
   32941/   19A60 : 51C9 FFCA           		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
   32942/   19A64 :                     
   32943/   19A64 :                     loc_197D4:
   32944/   19A64 : 303C 00CB           		move.w	#$CB,d0
   32945/   19A68 : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play smashing sound
   32946/   19A6E :                     ; End of function Obj76_Break
   32947/   19A6E :                     
   32948/   19A6E :                     ; ===========================================================================
   32949/   19A6E : FE80 FE00           Obj76_FragSpeed:dc.w $FE80, $FE00
   32950/   19A72 : 0180 FE00           		dc.w $180, $FE00
   32951/   19A76 : FF00 FF00           		dc.w $FF00, $FF00
   32952/   19A7A : 0100 FF00           		dc.w $100, $FF00
   32953/   19A7E : FFF8 FFF8           Obj76_FragPos:	dc.w $FFF8, $FFF8
   32954/   19A82 : 0010 0000           		dc.w $10, 0
   32955/   19A86 : 0000 0010           		dc.w 0,	$10
   32956/   19A8A : 0010 0010           		dc.w $10, $10
   32957/   19A8E :                     ; ---------------------------------------------------------------------------
   32958/   19A8E :                     ; Sprite mappings - blocks that	Eggman picks up (SYZ)
   32959/   19A8E :                     ; ---------------------------------------------------------------------------
   32960/   19A8E :                     Map_obj76:
   32961/   19A8E :                     		include	"_maps/obj76.asm"
(1)    1/   19A8E :                     ; ---------------------------------------------------------------------------
(1)    2/   19A8E :                     ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
(1)    3/   19A8E :                     ; ---------------------------------------------------------------------------
(1)    4/   19A8E : 000A 0016           		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
(1)    5/   19A92 : 001C 0022           		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
(1)    6/   19A96 : 0028                		dc.w byte_19826-Map_obj76
(1)    7/   19A98 : 02                  byte_19808:	dc.b 2
(1)    8/   19A99 : F00D 0071 F0        		dc.b $F0, $D, 0, $71, $F0
(1)    9/   19A9E : 000D 0079 F0        		dc.b 0,	$D, 0, $79, $F0
(1)   10/   19AA3 : 00                  		dc.b 0
(1)   11/   19AA4 : 01                  byte_19814:	dc.b 1
(1)   12/   19AA5 : F805 0071 F8        		dc.b $F8, 5, 0,	$71, $F8
(1)   13/   19AAA : 01                  byte_1981A:	dc.b 1
(1)   14/   19AAB : F805 0075 F8        		dc.b $F8, 5, 0,	$75, $F8
(1)   15/   19AB0 : 01                  byte_19820:	dc.b 1
(1)   16/   19AB1 : F805 0079 F8        		dc.b $F8, 5, 0,	$79, $F8
(1)   17/   19AB6 : 01                  byte_19826:	dc.b 1
(1)   18/   19AB7 : F805 007D F8        		dc.b $F8, 5, 0,	$7D, $F8
(1)   19/   19ABC : (MACRO)             		align 2
(1)   19/   19ABC :  (MACRO-2)                  cnop 0,2
(1)   19/   19ABC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   32962/   19ABC :                     
   32963/   19ABC :                     ; ===========================================================================
   32964/   19ABC :                     
   32965/   19ABC :                     loc_1982C:				; XREF: loc_19C62; loc_19C80
   32966/   19ABC : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   32967/   19AC2 :                     ; ===========================================================================
   32968/   19AC2 :                     ; ---------------------------------------------------------------------------
   32969/   19AC2 :                     ; Object 82 - Eggman (SBZ2)
   32970/   19AC2 :                     ; ---------------------------------------------------------------------------
   32971/   19AC2 :                     
   32972/   19AC2 :                     Obj82:					; XREF: Obj_Index
   32973/   19AC2 : 7000                		moveq	#0,d0
   32974/   19AC4 : 1028 0024           		move.b	$24(a0),d0
   32975/   19AC8 : 323B 0006           		move.w	Obj82_Index(pc,d0.w),d1
   32976/   19ACC : 4EFB 1002           		jmp	Obj82_Index(pc,d1.w)
   32977/   19AD0 :                     ; ===========================================================================
   32978/   19AD0 : 000C                Obj82_Index:	dc.w Obj82_Main-Obj82_Index
   32979/   19AD2 : 00B0                		dc.w Obj82_Eggman-Obj82_Index
   32980/   19AD4 : 0194                		dc.w Obj82_Switch-Obj82_Index
   32981/   19AD6 :                     
   32982/   19AD6 : 0200 03             Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
   32983/   19AD9 : 0400 03             		dc.b 4,	0, 3
   32984/   19ADC :                     ; ===========================================================================
   32985/   19ADC :                     
   32986/   19ADC :                     Obj82_Main:				; XREF: Obj82_Index
   32987/   19ADC : 45FA FFF8           		lea	Obj82_ObjData(pc),a2
   32988/   19AE0 : 317C 2160 0008      		move.w	#$2160,8(a0)
   32989/   19AE6 : 317C 05A4 000C      		move.w	#$5A4,$C(a0)
   32990/   19AEC : 117C 000F 0020      		move.b	#$F,$20(a0)
   32991/   19AF2 : 117C 0010 0021      		move.b	#$10,$21(a0)
   32992/   19AF8 : 08A8 0000 0022      		bclr	#0,$22(a0)
   32993/   19AFE : 4228 0025           		clr.b	$25(a0)
   32994/   19B02 : 115A 0024           		move.b	(a2)+,$24(a0)
   32995/   19B06 : 115A 001C           		move.b	(a2)+,$1C(a0)
   32996/   19B0A : 115A 0018           		move.b	(a2)+,$18(a0)
   32997/   19B0E : 217C 0001 9CC4 0004 		move.l	#Map_obj82,4(a0)
   32998/   19B16 : 317C 0400 0002      		move.w	#$400,2(a0)
   32999/   19B1C : 117C 0004 0001      		move.b	#4,1(a0)
   33000/   19B22 : 08E8 0007 0001      		bset	#7,1(a0)
   33001/   19B28 : 117C 0020 0019      		move.b	#$20,$19(a0)
   33002/   19B2E : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   33003/   19B34 : 664A                		bne.s	Obj82_Eggman
   33004/   19B36 : 2348 0034           		move.l	a0,$34(a1)
   33005/   19B3A : 12BC 0082           		move.b	#$82,(a1)	; load switch object
   33006/   19B3E : 337C 2130 0008      		move.w	#$2130,8(a1)
   33007/   19B44 : 337C 05BC 000C      		move.w	#$5BC,$C(a1)
   33008/   19B4A : 4228 0025           		clr.b	$25(a0)
   33009/   19B4E : 135A 0024           		move.b	(a2)+,$24(a1)
   33010/   19B52 : 135A 001C           		move.b	(a2)+,$1C(a1)
   33011/   19B56 : 135A 0018           		move.b	(a2)+,$18(a1)
   33012/   19B5A : 237C 0000 BF8E 0004 		move.l	#Map_obj32,4(a1)
   33013/   19B62 : 337C 04A4 0002      		move.w	#$4A4,2(a1)
   33014/   19B68 : 137C 0004 0001      		move.b	#4,1(a1)
   33015/   19B6E : 08E9 0007 0001      		bset	#7,1(a1)
   33016/   19B74 : 137C 0010 0019      		move.b	#$10,$19(a1)
   33017/   19B7A : 137C 0000 001A      		move.b	#0,$1A(a1)
   33018/   19B80 :                     
   33019/   19B80 :                     Obj82_Eggman:				; XREF: Obj82_Index
   33020/   19B80 : 7000                		moveq	#0,d0
   33021/   19B82 : 1028 0025           		move.b	$25(a0),d0
   33022/   19B86 : 323B 0016           		move.w	Obj82_EggIndex(pc,d0.w),d1
   33023/   19B8A : 4EBB 1012           		jsr	Obj82_EggIndex(pc,d1.w)
   33024/   19B8E : 43FA 0102           		lea	Ani_obj82(pc),a1
   33025/   19B92 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   33026/   19B98 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   33027/   19B9E :                     ; ===========================================================================
   33028/   19B9E : 0008                Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
   33029/   19BA0 : 002C                		dc.w Obj82_PreLeap-Obj82_EggIndex
   33030/   19BA2 : 0048                		dc.w Obj82_Leap-Obj82_EggIndex
   33031/   19BA4 : 0026                		dc.w loc_19934-Obj82_EggIndex
   33032/   19BA6 :                     ; ===========================================================================
   33033/   19BA6 :                     
   33034/   19BA6 :                     Obj82_ChkSonic:				; XREF: Obj82_EggIndex
   33035/   19BA6 : 3028 0008           		move.w	8(a0),d0
   33036/   19BAA : 9078 D008           		sub.w	($FFFFD008).w,d0
   33037/   19BAE : 0C40 0080           		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
   33038/   19BB2 : 6410                		bcc.s	loc_19934	; if not, branch
   33039/   19BB4 : 5428 0025           		addq.b	#2,$25(a0)
   33040/   19BB8 : 317C 00B4 003C      		move.w	#180,$3C(a0)	; set delay to 3 seconds
   33041/   19BBE : 117C 0001 001C      		move.b	#1,$1C(a0)
   33042/   19BC4 :                     
   33043/   19BC4 :                     loc_19934:				; XREF: Obj82_EggIndex
   33044/   19BC4 : 4EF9 0000 D6E8      		jmp	(SpeedToPos).l
   33045/   19BCA :                     ; ===========================================================================
   33046/   19BCA :                     
   33047/   19BCA :                     Obj82_PreLeap:				; XREF: Obj82_EggIndex
   33048/   19BCA : 5368 003C           		subq.w	#1,$3C(a0)	; subtract 1 from time delay
   33049/   19BCE : 6614                		bne.s	loc_19954	; if time remains, branch
   33050/   19BD0 : 5428 0025           		addq.b	#2,$25(a0)
   33051/   19BD4 : 117C 0002 001C      		move.b	#2,$1C(a0)
   33052/   19BDA : 5868 000C           		addq.w	#4,$C(a0)
   33053/   19BDE : 317C 000F 003C      		move.w	#15,$3C(a0)
   33054/   19BE4 :                     
   33055/   19BE4 :                     loc_19954:
   33056/   19BE4 : 60DE                		bra.s	loc_19934
   33057/   19BE6 :                     ; ===========================================================================
   33058/   19BE6 :                     
   33059/   19BE6 :                     Obj82_Leap:				; XREF: Obj82_EggIndex
   33060/   19BE6 : 5368 003C           		subq.w	#1,$3C(a0)
   33061/   19BEA : 6E74                		bgt.s	loc_199D0
   33062/   19BEC : 660C                		bne.s	loc_1996A
   33063/   19BEE : 317C FF04 0010      		move.w	#-$FC,$10(a0)	; make Eggman leap
   33064/   19BF4 : 317C FC40 0012      		move.w	#-$3C0,$12(a0)
   33065/   19BFA :                     
   33066/   19BFA :                     loc_1996A:
   33067/   19BFA : 0C68 2132 0008      		cmpi.w	#$2132,8(a0)
   33068/   19C00 : 6E04                		bgt.s	loc_19976
   33069/   19C02 : 4268 0010           		clr.w	$10(a0)
   33070/   19C06 :                     
   33071/   19C06 :                     loc_19976:
   33072/   19C06 : 0668 0024 0012      		addi.w	#$24,$12(a0)
   33073/   19C0C : 4A68 0012           		tst.w	$12(a0)
   33074/   19C10 : 6B20                		bmi.s	Obj82_FindBlocks
   33075/   19C12 : 0C68 0595 000C      		cmpi.w	#$595,$C(a0)
   33076/   19C18 : 6518                		bcs.s	Obj82_FindBlocks
   33077/   19C1A : 317C 5357 0028      		move.w	#$5357,$28(a0)
   33078/   19C20 : 0C68 059B 000C      		cmpi.w	#$59B,$C(a0)
   33079/   19C26 : 650A                		bcs.s	Obj82_FindBlocks
   33080/   19C28 : 317C 059B 000C      		move.w	#$59B,$C(a0)
   33081/   19C2E : 4268 0012           		clr.w	$12(a0)
   33082/   19C32 :                     
   33083/   19C32 :                     Obj82_FindBlocks:
   33084/   19C32 : 3028 0010           		move.w	$10(a0),d0
   33085/   19C36 : 8068 0012           		or.w	$12(a0),d0
   33086/   19C3A : 6624                		bne.s	loc_199D0
   33087/   19C3C : 43F8 D000           		lea	($FFFFD000).w,a1 ; start at the	first object RAM
   33088/   19C40 : 703E                		moveq	#$3E,d0
   33089/   19C42 : 7240                		moveq	#$40,d1
   33090/   19C44 :                     
   33091/   19C44 :                     Obj82_FindLoop:	
   33092/   19C44 : D2C1                		adda.w	d1,a1		; jump to next object RAM
   33093/   19C46 : 0C11 0083           		cmpi.b	#$83,(a1)	; is object a block? (object $83)
   33094/   19C4A : 57C8 FFF8           		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
   33095/   19C4E :                     
   33096/   19C4E : 6610                		bne.s	loc_199D0
   33097/   19C50 : 337C 474F 0028      		move.w	#$474F,$28(a1)	; set block to disintegrate
   33098/   19C56 : 5428 0025           		addq.b	#2,$25(a0)
   33099/   19C5A : 117C 0001 001C      		move.b	#1,$1C(a0)
   33100/   19C60 :                     
   33101/   19C60 :                     loc_199D0:
   33102/   19C60 : 6000 FF62           		bra.w	loc_19934
   33103/   19C64 :                     ; ===========================================================================
   33104/   19C64 :                     
   33105/   19C64 :                     Obj82_Switch:				; XREF: Obj82_Index
   33106/   19C64 : 7000                		moveq	#0,d0
   33107/   19C66 : 1028 0025           		move.b	$25(a0),d0
   33108/   19C6A : 303B 0006           		move.w	Obj82_SwIndex(pc,d0.w),d0
   33109/   19C6E : 4EFB 0002           		jmp	Obj82_SwIndex(pc,d0.w)
   33110/   19C72 :                     ; ===========================================================================
   33111/   19C72 : 0004                Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
   33112/   19C74 : 001A                		dc.w Obj82_SwDisplay-Obj82_SwIndex
   33113/   19C76 :                     ; ===========================================================================
   33114/   19C76 :                     
   33115/   19C76 :                     loc_199E6:				; XREF: Obj82_SwIndex
   33116/   19C76 : 2268 0034           		movea.l	$34(a0),a1
   33117/   19C7A : 0C69 5357 0028      		cmpi.w	#$5357,$28(a1)
   33118/   19C80 : 660A                		bne.s	Obj82_SwDisplay
   33119/   19C82 : 117C 0001 001A      		move.b	#1,$1A(a0)
   33120/   19C88 : 5428 0025           		addq.b	#2,$25(a0)
   33121/   19C8C :                     
   33122/   19C8C :                     Obj82_SwDisplay:			; XREF: Obj82_SwIndex
   33123/   19C8C : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   33124/   19C92 :                     ; ===========================================================================
   33125/   19C92 :                     Ani_obj82:
   33126/   19C92 :                     		include	"_anim/obj82.asm"
(1)    1/   19C92 :                     ; ---------------------------------------------------------------------------
(1)    2/   19C92 :                     ; Animation script - Eggman (SBZ2)
(1)    3/   19C92 :                     ; ---------------------------------------------------------------------------
(1)    4/   19C92 : 000E                		dc.w byte_19A10-Ani_obj82
(1)    5/   19C94 : 0012                		dc.w byte_19A14-Ani_obj82
(1)    6/   19C96 : 0016                		dc.w byte_19A18-Ani_obj82
(1)    7/   19C98 : 001E                		dc.w byte_19A20-Ani_obj82
(1)    8/   19C9A : 0022                		dc.w byte_19A24-Ani_obj82
(1)    9/   19C9C : 0028                		dc.w byte_19A2A-Ani_obj82
(1)   10/   19C9E : 002E                		dc.w byte_19A30-Ani_obj82
(1)   11/   19CA0 : 7E00 FF00           byte_19A10:	dc.b $7E, 0, $FF, 0
(1)   12/   19CA4 : 0601 02FF           byte_19A14:	dc.b 6,	1, 2, $FF
(1)   13/   19CA8 : 0E03 0404 0000 00FF byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
(1)   14/   19CB0 : 0005 09FF           byte_19A20:	dc.b 0,	5, 9, $FF
(1)   15/   19CB4 : 0607 0408 04FF      byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
(1)   16/   19CBA : 0F04 0303 FF00      byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
(1)   17/   19CC0 : 7E06 FF00           byte_19A30:	dc.b $7E, 6, $FF, 0
(1)   18/   19CC4 : (MACRO)             		align 2
(1)   18/   19CC4 :  (MACRO-2)                  cnop 0,2
(1)   18/   19CC4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   33127/   19CC4 :                     
   33128/   19CC4 :                     ; ---------------------------------------------------------------------------
   33129/   19CC4 :                     ; Sprite mappings - Eggman (SBZ2)
   33130/   19CC4 :                     ; ---------------------------------------------------------------------------
   33131/   19CC4 :                     Map_obj82:
   33132/   19CC4 :                     		include	"_maps/obj82.asm"
(1)    1/   19CC4 :                     ; ---------------------------------------------------------------------------
(1)    2/   19CC4 :                     ; Sprite mappings - Eggman (SBZ2)
(1)    3/   19CC4 :                     ; ---------------------------------------------------------------------------
(1)    4/   19CC4 : 0016 0026           		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
(1)    5/   19CC8 : 003C 0052           		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
(1)    6/   19CCC : 0068 007E           		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
(1)    7/   19CD0 : 0094 00B8           		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
(1)    8/   19CD4 : 00D2 00F2           		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
(1)    9/   19CD8 : 011B                		dc.w byte_19B4F-Map_obj82
(1)   10/   19CDA : 03                  byte_19A4A:	dc.b 3
(1)   11/   19CDB : FC00 008F E8        		dc.b $FC, 0, 0,	$8F, $E8
(1)   12/   19CE0 : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   13/   19CE5 : 000F 006F F0        		dc.b 0,	$F, 0, $6F, $F0
(1)   14/   19CEA : 04                  byte_19A5A:	dc.b 4
(1)   15/   19CEB : E80D 000E F0        		dc.b $E8, $D, 0, $E, $F0
(1)   16/   19CF0 : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   17/   19CF5 : 000F 006F F0        		dc.b 0,	$F, 0, $6F, $F0
(1)   18/   19CFA : FC00 008F E8        		dc.b $FC, 0, 0,	$8F, $E8
(1)   19/   19CFF : 00                  		dc.b 0
(1)   20/   19D00 : 04                  byte_19A70:	dc.b 4
(1)   21/   19D01 : E90D 000E F0        		dc.b $E9, $D, 0, $E, $F0
(1)   22/   19D06 : E90E 0000 F0        		dc.b $E9, $E, 0, 0, $F0
(1)   23/   19D0B : 010F 007F F0        		dc.b 1,	$F, 0, $7F, $F0
(1)   24/   19D10 : FD00 008F E8        		dc.b $FD, 0, 0,	$8F, $E8
(1)   25/   19D15 : 00                  		dc.b 0
(1)   26/   19D16 : 04                  byte_19A86:	dc.b 4
(1)   27/   19D17 : F40F 0820 F0        		dc.b $F4, $F, 8, $20, $F0
(1)   28/   19D1C : F504 0830 10        		dc.b $F5, 4, 8,	$30, $10
(1)   29/   19D21 : 0809 084E F0        		dc.b 8,	9, 8, $4E, $F0
(1)   30/   19D26 : EC0E 0000 F0        		dc.b $EC, $E, 0, 0, $F0
(1)   31/   19D2B : 00                  		dc.b 0
(1)   32/   19D2C : 04                  byte_19A9C:	dc.b 4
(1)   33/   19D2D : F00F 0820 F0        		dc.b $F0, $F, 8, $20, $F0
(1)   34/   19D32 : F104 0830 10        		dc.b $F1, 4, 8,	$30, $10
(1)   35/   19D37 : 0806 083E F8        		dc.b 8,	6, 8, $3E, $F8
(1)   36/   19D3C : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   37/   19D41 : 00                  		dc.b 0
(1)   38/   19D42 : 04                  byte_19AB2:	dc.b 4
(1)   39/   19D43 : E80D 0016 EC        		dc.b $E8, $D, 0, $16, $EC
(1)   40/   19D48 : E801 001E 0C        		dc.b $E8, 1, 0,	$1E, $C
(1)   41/   19D4D : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   42/   19D52 : 000F 006F F0        		dc.b 0,	$F, 0, $6F, $F0
(1)   43/   19D57 : 00                  		dc.b 0
(1)   44/   19D58 : 07                  byte_19AC8:	dc.b 7
(1)   45/   19D59 : E80D 0016 EC        		dc.b $E8, $D, 0, $16, $EC
(1)   46/   19D5E : E801 001E 0C        		dc.b $E8, 1, 0,	$1E, $C
(1)   47/   19D63 : 0409 0834 00        		dc.b 4,	9, 8, $34, 0
(1)   48/   19D68 : 0405 083A E8        		dc.b 4,	5, 8, $3A, $E8
(1)   49/   19D6D : F00F 0820 F0        		dc.b $F0, $F, 8, $20, $F0
(1)   50/   19D72 : F104 0854 10        		dc.b $F1, 4, 8,	$54, $10
(1)   51/   19D77 : F104 0054 E0        		dc.b $F1, 4, 0,	$54, $E0
(1)   52/   19D7C : 05                  byte_19AEC:	dc.b 5
(1)   53/   19D7D : F00F 0820 F0        		dc.b $F0, $F, 8, $20, $F0
(1)   54/   19D82 : F104 0830 10        		dc.b $F1, 4, 8,	$30, $10
(1)   55/   19D87 : 0409 0834 00        		dc.b 4,	9, 8, $34, 0
(1)   56/   19D8C : 0405 083A E8        		dc.b 4,	5, 8, $3A, $E8
(1)   57/   19D91 : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   58/   19D96 : 06                  byte_19B06:	dc.b 6
(1)   59/   19D97 : EE0F 0820 F0        		dc.b $EE, $F, 8, $20, $F0
(1)   60/   19D9C : EF04 0830 10        		dc.b $EF, 4, 8,	$30, $10
(1)   61/   19DA1 : 0905 0844 00        		dc.b 9,	5, 8, $44, 0
(1)   62/   19DA6 : 0301 0848 F8        		dc.b 3,	1, 8, $48, $F8
(1)   63/   19DAB : 0B05 084A E8        		dc.b $B, 5, 8, $4A, $E8
(1)   64/   19DB0 : E60E 0000 F0        		dc.b $E6, $E, 0, 0, $F0
(1)   65/   19DB5 : 00                  		dc.b 0
(1)   66/   19DB6 : 08                  byte_19B26:	dc.b 8
(1)   67/   19DB7 : E80D 0016 EC        		dc.b $E8, $D, 0, $16, $EC
(1)   68/   19DBC : E801 001E 0C        		dc.b $E8, 1, 0,	$1E, $C
(1)   69/   19DC1 : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   70/   19DC6 : 000F 006F F0        		dc.b 0,	$F, 0, $6F, $F0
(1)   71/   19DCB : E00D 3EF0 F0        		dc.b $E0, $D, $3E, $F0,	$F0
(1)   72/   19DD0 : F00D 3EF0 F0        		dc.b $F0, $D, $3E, $F0,	$F0
(1)   73/   19DD5 : 000D 3EF0 F0        		dc.b 0,	$D, $3E, $F0, $F0
(1)   74/   19DDA : 100D 3EF0 F0        		dc.b $10, $D, $3E, $F0,	$F0
(1)   75/   19DDF : 03                  byte_19B4F:	dc.b 3
(1)   76/   19DE0 : EC0D 0056 E4        		dc.b $EC, $D, 0, $56, $E4
(1)   77/   19DE5 : F408 005E 04        		dc.b $F4, 8, 0,	$5E, 4
(1)   78/   19DEA : EC0D 0061 FC        		dc.b $EC, $D, 0, $61, $FC
(1)   79/   19DEF : (MACRO)             		align 2
(1)   79/   19DEF :  (MACRO-2)                  cnop 0,2
(1)   79/   19DEF :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   79/   19DEF : =$3E                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   79/   19DF0 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   33133/   19DF0 :                     
   33134/   19DF0 :                     ; ===========================================================================
   33135/   19DF0 :                     ; ---------------------------------------------------------------------------
   33136/   19DF0 :                     ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
   33137/   19DF0 :                     ; ---------------------------------------------------------------------------
   33138/   19DF0 :                     
   33139/   19DF0 :                     Obj83:					; XREF: Obj_Index
   33140/   19DF0 : 7000                		moveq	#0,d0
   33141/   19DF2 : 1028 0024           		move.b	$24(a0),d0
   33142/   19DF6 : 323B 0006           		move.w	Obj83_Index(pc,d0.w),d1
   33143/   19DFA : 4EFB 1002           		jmp	Obj83_Index(pc,d1.w)
   33144/   19DFE :                     ; ===========================================================================
   33145/   19DFE : 000C                Obj83_Index:	dc.w Obj83_Main-Obj83_Index
   33146/   19E00 : 008E                		dc.w Obj83_ChkBreak-Obj83_Index
   33147/   19E02 : 00C8                		dc.w loc_19C36-Obj83_Index
   33148/   19E04 : 00F4                		dc.w loc_19C62-Obj83_Index
   33149/   19E06 : 0104                		dc.w loc_19C72-Obj83_Index
   33150/   19E08 : 0112                		dc.w loc_19C80-Obj83_Index
   33151/   19E0A :                     ; ===========================================================================
   33152/   19E0A :                     
   33153/   19E0A :                     Obj83_Main:				; XREF: Obj83_Index
   33154/   19E0A : 317C 2080 0008      		move.w	#$2080,8(a0)
   33155/   19E10 : 317C 05D0 000C      		move.w	#$5D0,$C(a0)
   33156/   19E16 : 117C 0080 0019      		move.b	#$80,$19(a0)
   33157/   19E1C : 117C 0010 0016      		move.b	#$10,$16(a0)
   33158/   19E22 : 117C 0004 0001      		move.b	#4,1(a0)
   33159/   19E28 : 08E8 0007 0001      		bset	#7,1(a0)
   33160/   19E2E : 7800                		moveq	#0,d4
   33161/   19E30 : 3A3C 2010           		move.w	#$2010,d5
   33162/   19E34 : 7C07                		moveq	#7,d6
   33163/   19E36 : 45E8 0030           		lea	$30(a0),a2
   33164/   19E3A :                     
   33165/   19E3A :                     Obj83_MakeBlock:
   33166/   19E3A : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   33167/   19E40 : 6644                		bne.s	Obj83_ExitMake
   33168/   19E42 : 34C9                		move.w	a1,(a2)+
   33169/   19E44 : 12BC 0083           		move.b	#$83,(a1)	; load block object
   33170/   19E48 : 237C 0001 9FA2 0004 		move.l	#Map_obj83,4(a1)
   33171/   19E50 : 337C 4518 0002      		move.w	#$4518,2(a1)
   33172/   19E56 : 137C 0004 0001      		move.b	#4,1(a1)
   33173/   19E5C : 137C 0010 0019      		move.b	#$10,$19(a1)
   33174/   19E62 : 137C 0010 0016      		move.b	#$10,$16(a1)
   33175/   19E68 : 137C 0003 0018      		move.b	#3,$18(a1)
   33176/   19E6E : 3345 0008           		move.w	d5,8(a1)	; set X	position
   33177/   19E72 : 337C 05D0 000C      		move.w	#$5D0,$C(a1)
   33178/   19E78 : 0645 0020           		addi.w	#$20,d5		; add $20 for next X position
   33179/   19E7C : 137C 0008 0024      		move.b	#8,$24(a1)
   33180/   19E82 : 51CE FFB6           		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
   33181/   19E86 :                     
   33182/   19E86 :                     Obj83_ExitMake:
   33183/   19E86 : 5428 0024           		addq.b	#2,$24(a0)
   33184/   19E8A : 4E75                		rts	
   33185/   19E8C :                     ; ===========================================================================
   33186/   19E8C :                     
   33187/   19E8C :                     Obj83_ChkBreak:				; XREF: Obj83_Index
   33188/   19E8C : 0C68 474F 0028      		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
   33189/   19E92 : 6608                		bne.s	Obj83_Solid	; if not, branch
   33190/   19E94 : 4228 001A           		clr.b	$1A(a0)
   33191/   19E98 : 5428 0024           		addq.b	#2,$24(a0)	; next subroutine
   33192/   19E9C :                     
   33193/   19E9C :                     Obj83_Solid:
   33194/   19E9C : 7000                		moveq	#0,d0
   33195/   19E9E : 1028 001A           		move.b	$1A(a0),d0
   33196/   19EA2 : 4400                		neg.b	d0
   33197/   19EA4 : 4880                		ext.w	d0
   33198/   19EA6 : 5040                		addq.w	#8,d0
   33199/   19EA8 : E940                		asl.w	#4,d0
   33200/   19EAA : 383C 2100           		move.w	#$2100,d4
   33201/   19EAE : 9840                		sub.w	d0,d4
   33202/   19EB0 : 1140 0019           		move.b	d0,$19(a0)
   33203/   19EB4 : 3144 0008           		move.w	d4,8(a0)
   33204/   19EB8 : 720B                		moveq	#$B,d1
   33205/   19EBA : D240                		add.w	d0,d1
   33206/   19EBC : 7410                		moveq	#$10,d2
   33207/   19EBE : 7611                		moveq	#$11,d3
   33208/   19EC0 : 4EF9 0000 FAE6      		jmp	(SolidObject).l
   33209/   19EC6 :                     ; ===========================================================================
   33210/   19EC6 :                     
   33211/   19EC6 :                     loc_19C36:				; XREF: Obj83_Index
   33212/   19EC6 : 0428 000E 001E      		subi.b	#$E,$1E(a0)
   33213/   19ECC : 6422                		bcc.s	Obj83_Solid2
   33214/   19ECE : 70FF                		moveq	#-1,d0
   33215/   19ED0 : 1028 001A           		move.b	$1A(a0),d0
   33216/   19ED4 : 4880                		ext.w	d0
   33217/   19ED6 : D040                		add.w	d0,d0
   33218/   19ED8 : 3030 0030           		move.w	$30(a0,d0.w),d0
   33219/   19EDC : 2240                		movea.l	d0,a1
   33220/   19EDE : 337C 474F 0028      		move.w	#$474F,$28(a1)
   33221/   19EE4 : 5228 001A           		addq.b	#1,$1A(a0)
   33222/   19EE8 : 0C28 0008 001A      		cmpi.b	#8,$1A(a0)
   33223/   19EEE : 6702                		beq.s	loc_19C62
   33224/   19EF0 :                     
   33225/   19EF0 :                     Obj83_Solid2:
   33226/   19EF0 : 60AA                		bra.s	Obj83_Solid
   33227/   19EF2 :                     ; ===========================================================================
   33228/   19EF2 :                     
   33229/   19EF2 :                     loc_19C62:				; XREF: Obj83_Index
   33230/   19EF2 : 08A8 0003 0022      		bclr	#3,$22(a0)
   33231/   19EF8 : 08B8 0003 D022      		bclr	#3,($FFFFD022).w
   33232/   19EFE : 6000 FBBC           		bra.w	loc_1982C
   33233/   19F02 :                     ; ===========================================================================
   33234/   19F02 :                     
   33235/   19F02 :                     loc_19C72:				; XREF: Obj83_Index
   33236/   19F02 : 0C68 474F 0028      		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
   33237/   19F08 : 671A                		beq.s	Obj83_Break	; if yes, branch
   33238/   19F0A : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   33239/   19F10 :                     ; ===========================================================================
   33240/   19F10 :                     
   33241/   19F10 :                     loc_19C80:				; XREF: Obj83_Index
   33242/   19F10 : 4A28 0001           		tst.b	1(a0)
   33243/   19F14 : 6A00 FBA6           		bpl.w	loc_1982C
   33244/   19F18 : 4EB9 0000 D6BC      		jsr	(ObjectFall).l
   33245/   19F1E : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   33246/   19F24 :                     ; ===========================================================================
   33247/   19F24 :                     
   33248/   19F24 :                     Obj83_Break:				; XREF: loc_19C72
   33249/   19F24 : 49FA 0064           		lea	Obj83_FragSpeed(pc),a4
   33250/   19F28 : 4BFA 0068           		lea	Obj83_FragPos(pc),a5
   33251/   19F2C : 7801                		moveq	#1,d4
   33252/   19F2E : 7203                		moveq	#3,d1
   33253/   19F30 : 7438                		moveq	#$38,d2
   33254/   19F32 : 5428 0024           		addq.b	#2,$24(a0)
   33255/   19F36 : 117C 0008 0019      		move.b	#8,$19(a0)
   33256/   19F3C : 117C 0008 0016      		move.b	#8,$16(a0)
   33257/   19F42 : 43D0                		lea	(a0),a1
   33258/   19F44 : 6008                		bra.s	Obj83_MakeFrag
   33259/   19F46 :                     ; ===========================================================================
   33260/   19F46 :                     
   33261/   19F46 :                     Obj83_LoopFrag:
   33262/   19F46 : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   33263/   19F4C : 662C                		bne.s	Obj83_BreakSnd
   33264/   19F4E :                     
   33265/   19F4E :                     Obj83_MakeFrag:				; XREF: Obj83_Break
   33266/   19F4E : 45D0                		lea	(a0),a2
   33267/   19F50 : 47D1                		lea	(a1),a3
   33268/   19F52 : 7603                		moveq	#3,d3
   33269/   19F54 :                     
   33270/   19F54 :                     loc_19CC4:
   33271/   19F54 : 26DA                		move.l	(a2)+,(a3)+
   33272/   19F56 : 26DA                		move.l	(a2)+,(a3)+
   33273/   19F58 : 26DA                		move.l	(a2)+,(a3)+
   33274/   19F5A : 26DA                		move.l	(a2)+,(a3)+
   33275/   19F5C : 51CB FFF6           		dbf	d3,loc_19CC4
   33276/   19F60 :                     
   33277/   19F60 : 335C 0012           		move.w	(a4)+,$12(a1)
   33278/   19F64 : 361D                		move.w	(a5)+,d3
   33279/   19F66 : D769 0008           		add.w	d3,8(a1)
   33280/   19F6A : 361D                		move.w	(a5)+,d3
   33281/   19F6C : D769 000C           		add.w	d3,$C(a1)
   33282/   19F70 : 1344 001A           		move.b	d4,$1A(a1)
   33283/   19F74 : 5244                		addq.w	#1,d4
   33284/   19F76 : 51C9 FFCE           		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
   33285/   19F7A :                     
   33286/   19F7A :                     Obj83_BreakSnd:
   33287/   19F7A : 303C 00CB           		move.w	#$CB,d0
   33288/   19F7E : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play smashing sound
   33289/   19F84 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   33290/   19F8A :                     ; ===========================================================================
   33291/   19F8A : 0080 0000           Obj83_FragSpeed:dc.w $80, 0
   33292/   19F8E : 0120 00C0           		dc.w $120, $C0
   33293/   19F92 : FFF8 FFF8           Obj83_FragPos:	dc.w $FFF8, $FFF8
   33294/   19F96 : 0010 0000           		dc.w $10, 0
   33295/   19F9A : 0000 0010           		dc.w 0,	$10
   33296/   19F9E : 0010 0010           		dc.w $10, $10
   33297/   19FA2 :                     ; ---------------------------------------------------------------------------
   33298/   19FA2 :                     ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
   33299/   19FA2 :                     ; ---------------------------------------------------------------------------
   33300/   19FA2 :                     Map_obj83:
   33301/   19FA2 :                     		include	"_maps/obj83.asm"
(1)    1/   19FA2 :                     ; ---------------------------------------------------------------------------
(1)    2/   19FA2 :                     ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
(1)    3/   19FA2 :                     ; ---------------------------------------------------------------------------
(1)    4/   19FA2 : 000A 0010           		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
(1)    5/   19FA6 : 001C 0028           		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
(1)    6/   19FAA : 0034                		dc.w byte_19D46-Map_obj83
(1)    7/   19FAC : 01                  byte_19D1C:	dc.b 1
(1)    8/   19FAD : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)    9/   19FB2 : 02                  byte_19D22:	dc.b 2
(1)   10/   19FB3 : F801 0000 F8        		dc.b $F8, 1, 0,	0, $F8
(1)   11/   19FB8 : F801 0004 00        		dc.b $F8, 1, 0,	4, 0
(1)   12/   19FBD : 00                  		dc.b 0
(1)   13/   19FBE : 02                  byte_19D2E:	dc.b 2
(1)   14/   19FBF : F801 0008 F8        		dc.b $F8, 1, 0,	8, $F8
(1)   15/   19FC4 : F801 000C 00        		dc.b $F8, 1, 0,	$C, 0
(1)   16/   19FC9 : 00                  		dc.b 0
(1)   17/   19FCA : 02                  byte_19D3A:	dc.b 2
(1)   18/   19FCB : F801 0002 F8        		dc.b $F8, 1, 0,	2, $F8
(1)   19/   19FD0 : F801 0006 00        		dc.b $F8, 1, 0,	6, 0
(1)   20/   19FD5 : 00                  		dc.b 0
(1)   21/   19FD6 : 02                  byte_19D46:	dc.b 2
(1)   22/   19FD7 : F801 000A F8        		dc.b $F8, 1, 0,	$A, $F8
(1)   23/   19FDC : F801 000E 00        		dc.b $F8, 1, 0,	$E, 0
(1)   24/   19FE1 : (MACRO)             		align 2
(1)   24/   19FE1 :  (MACRO-2)                  cnop 0,2
(1)   24/   19FE1 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   24/   19FE1 : =$3F                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   24/   19FE2 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   33302/   19FE2 :                     
   33303/   19FE2 :                     ; ===========================================================================
   33304/   19FE2 :                     ; ---------------------------------------------------------------------------
   33305/   19FE2 :                     ; Object 85 - Eggman (FZ)
   33306/   19FE2 :                     ; ---------------------------------------------------------------------------
   33307/   19FE2 :                     
   33308/   19FE2 :                     Obj85_Delete:
   33309/   19FE2 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   33310/   19FE8 :                     ; ===========================================================================
   33311/   19FE8 :                     
   33312/   19FE8 :                     Obj85:					; XREF: Obj_Index
   33313/   19FE8 : 7000                		moveq	#0,d0
   33314/   19FEA : 1028 0024           		move.b	$24(a0),d0
   33315/   19FEE : 303B 0006           		move.w	Obj85_Index(pc,d0.w),d0
   33316/   19FF2 : 4EFB 0002           		jmp	Obj85_Index(pc,d0.w)
   33317/   19FF6 :                     ; ===========================================================================
   33318/   19FF6 : 0068                Obj85_Index:	dc.w Obj85_Main-Obj85_Index
   33319/   19FF8 : 0106                		dc.w Obj85_Eggman-Obj85_Index
   33320/   19FFA : 0628                		dc.w loc_1A38E-Obj85_Index
   33321/   19FFC : 05E0                		dc.w loc_1A346-Obj85_Index
   33322/   19FFE : 0560                		dc.w loc_1A2C6-Obj85_Index
   33323/   1A000 : 0646                		dc.w loc_1A3AC-Obj85_Index
   33324/   1A002 : 04FE                		dc.w loc_1A264-Obj85_Index
   33325/   1A004 :                     
   33326/   1A004 : 0100 0100 0470      Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
   33327/   1A00A : 0001 9CC4           		dc.l Map_obj82		; mappings pointer
   33328/   1A00E : 25B0 0590 0300      		dc.w $25B0, $590, $300
   33329/   1A014 : 0001 A906           		dc.l Map_obj84
   33330/   1A018 : 26E0 0596 03A0      		dc.w $26E0, $596, $3A0
   33331/   1A01E : 0001 A6AC           		dc.l Map_FZBoss
   33332/   1A022 : 26E0 0596 0470      		dc.w $26E0, $596, $470
   33333/   1A028 : 0001 9CC4           		dc.l Map_obj82
   33334/   1A02C : 26E0 0596 0400      		dc.w $26E0, $596, $400
   33335/   1A032 : 0001 7F9C           		dc.l Map_Eggman
   33336/   1A036 : 26E0 0596 0400      		dc.w $26E0, $596, $400
   33337/   1A03C : 0001 7F9C           		dc.l Map_Eggman
   33338/   1A040 :                     
   33339/   1A040 : 0200 0420 19        Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
   33340/   1A045 : 0400 0112 08        		dc.b 4,	0, 1, $12, 8
   33341/   1A04A : 0600 0300 00        		dc.b 6,	0, 3, 0, 0
   33342/   1A04F : 0800 0300 00        		dc.b 8,	0, 3, 0, 0
   33343/   1A054 : 0A00 0320 20        		dc.b $A, 0, 3, $20, $20
   33344/   1A059 : 0C00 0300 00        		dc.b $C, 0, 3, 0, 0
   33345/   1A05E :                     ; ===========================================================================
   33346/   1A05E :                     
   33347/   1A05E :                     Obj85_Main:				; XREF: Obj85_Index
   33348/   1A05E : 45FA FFA4           		lea	Obj85_ObjData(pc),a2
   33349/   1A062 : 47FA FFDC           		lea	Obj85_ObjData2(pc),a3
   33350/   1A066 : 2248                		movea.l	a0,a1
   33351/   1A068 : 7205                		moveq	#5,d1
   33352/   1A06A : 6008                		bra.s	Obj85_LoadBoss
   33353/   1A06C :                     ; ===========================================================================
   33354/   1A06C :                     
   33355/   1A06C :                     Obj85_Loop:
   33356/   1A06C : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   33357/   1A072 : 663C                		bne.s	loc_19E20
   33358/   1A074 :                     
   33359/   1A074 :                     Obj85_LoadBoss:				; XREF: Obj85_Main
   33360/   1A074 : 12BC 0085           		move.b	#$85,(a1)
   33361/   1A078 : 335A 0008           		move.w	(a2)+,8(a1)
   33362/   1A07C : 335A 000C           		move.w	(a2)+,$C(a1)
   33363/   1A080 : 335A 0002           		move.w	(a2)+,2(a1)
   33364/   1A084 : 235A 0004           		move.l	(a2)+,4(a1)
   33365/   1A088 : 135B 0024           		move.b	(a3)+,$24(a1)
   33366/   1A08C : 135B 001C           		move.b	(a3)+,$1C(a1)
   33367/   1A090 : 135B 0018           		move.b	(a3)+,$18(a1)
   33368/   1A094 : 135B 0017           		move.b	(a3)+,$17(a1)
   33369/   1A098 : 135B 0016           		move.b	(a3)+,$16(a1)
   33370/   1A09C : 137C 0004 0001      		move.b	#4,1(a1)
   33371/   1A0A2 : 08E8 0007 0001      		bset	#7,1(a0)
   33372/   1A0A8 : 2348 0034           		move.l	a0,$34(a1)
   33373/   1A0AC : 51C9 FFBE           		dbf	d1,Obj85_Loop
   33374/   1A0B0 :                     
   33375/   1A0B0 :                     loc_19E20:
   33376/   1A0B0 : 45E8 0036           		lea	$36(a0),a2
   33377/   1A0B4 : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   33378/   1A0BA : 662E                		bne.s	loc_19E5A
   33379/   1A0BC : 12BC 0086           		move.b	#$86,(a1)	; load energy ball object
   33380/   1A0C0 : 3489                		move.w	a1,(a2)
   33381/   1A0C2 : 2348 0034           		move.l	a0,$34(a1)
   33382/   1A0C6 : 45E8 0038           		lea	$38(a0),a2
   33383/   1A0CA : 7400                		moveq	#0,d2
   33384/   1A0CC : 7203                		moveq	#3,d1
   33385/   1A0CE :                     
   33386/   1A0CE :                     loc_19E3E:
   33387/   1A0CE : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   33388/   1A0D4 : 6614                		bne.s	loc_19E5A
   33389/   1A0D6 : 34C9                		move.w	a1,(a2)+
   33390/   1A0D8 : 12BC 0084           		move.b	#$84,(a1)	; load crushing	cylinder object
   33391/   1A0DC : 2348 0034           		move.l	a0,$34(a1)
   33392/   1A0E0 : 1342 0028           		move.b	d2,$28(a1)
   33393/   1A0E4 : 5442                		addq.w	#2,d2
   33394/   1A0E6 : 51C9 FFE6           		dbf	d1,loc_19E3E
   33395/   1A0EA :                     
   33396/   1A0EA :                     loc_19E5A:
   33397/   1A0EA : 317C 0000 0034      		move.w	#0,$34(a0)
   33398/   1A0F0 : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   33399/   1A0F6 : 317C FFFF 0030      		move.w	#-1,$30(a0)
   33400/   1A0FC :                     
   33401/   1A0FC :                     Obj85_Eggman:				; XREF: Obj85_Index
   33402/   1A0FC : 7000                		moveq	#0,d0
   33403/   1A0FE : 1028 0034           		move.b	$34(a0),d0
   33404/   1A102 : 303B 000C           		move.w	off_19E80(pc,d0.w),d0
   33405/   1A106 : 4EBB 0008           		jsr	off_19E80(pc,d0.w)
   33406/   1A10A : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   33407/   1A110 :                     ; ===========================================================================
   33408/   1A110 : 0010 0028           off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
   33409/   1A114 : 0166 01AA           		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
   33410/   1A118 : 01F4 0292           		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
   33411/   1A11C : 0312 0354           		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
   33412/   1A120 :                     ; ===========================================================================
   33413/   1A120 :                     
   33414/   1A120 :                     loc_19E90:				; XREF: off_19E80
   33415/   1A120 : 4AB8 F680           		tst.l	($FFFFF680).w
   33416/   1A124 : 660C                		bne.s	loc_19EA2
   33417/   1A126 : 0C78 2450 F700      		cmpi.w	#$2450,($FFFFF700).w
   33418/   1A12C : 6504                		bcs.s	loc_19EA2
   33419/   1A12E : 5428 0034           		addq.b	#2,$34(a0)
   33420/   1A132 :                     
   33421/   1A132 :                     loc_19EA2:
   33422/   1A132 : 52B8 F636           		addq.l	#1,($FFFFF636).w
   33423/   1A136 : 4E75                		rts	
   33424/   1A138 :                     ; ===========================================================================
   33425/   1A138 :                     
   33426/   1A138 :                     loc_19EA8:				; XREF: off_19E80
   33427/   1A138 : 4A68 0030           		tst.w	$30(a0)
   33428/   1A13C : 6A62                		bpl.s	loc_19F10
   33429/   1A13E : 4268 0030           		clr.w	$30(a0)
   33430/   1A142 : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   33431/   1A148 : 0240 000C           		andi.w	#$C,d0
   33432/   1A14C : 3200                		move.w	d0,d1
   33433/   1A14E : 5441                		addq.w	#2,d1
   33434/   1A150 : 4A80                		tst.l	d0
   33435/   1A152 : 6A02                		bpl.s	loc_19EC6
   33436/   1A154 : C340                		exg	d1,d0
   33437/   1A156 :                     
   33438/   1A156 :                     loc_19EC6:
   33439/   1A156 : 43FA 010E           		lea	word_19FD6(pc),a1
   33440/   1A15A : 3031 0000           		move.w	(a1,d0.w),d0
   33441/   1A15E : 3231 1000           		move.w	(a1,d1.w),d1
   33442/   1A162 : 3140 0030           		move.w	d0,$30(a0)
   33443/   1A166 : 74FF                		moveq	#-1,d2
   33444/   1A168 : 3430 0038           		move.w	$38(a0,d0.w),d2
   33445/   1A16C : 2242                		movea.l	d2,a1
   33446/   1A16E : 137C 00FF 0029      		move.b	#-1,$29(a1)
   33447/   1A174 : 337C FFFF 0030      		move.w	#-1,$30(a1)
   33448/   1A17A : 3430 1038           		move.w	$38(a0,d1.w),d2
   33449/   1A17E : 2242                		movea.l	d2,a1
   33450/   1A180 : 137C 0001 0029      		move.b	#1,$29(a1)
   33451/   1A186 : 337C 0000 0030      		move.w	#0,$30(a1)
   33452/   1A18C : 317C 0001 0032      		move.w	#1,$32(a0)
   33453/   1A192 : 4228 0035           		clr.b	$35(a0)
   33454/   1A196 : 303C 00B7           		move.w	#$B7,d0
   33455/   1A19A : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play rumbling sound
   33456/   1A1A0 :                     
   33457/   1A1A0 :                     loc_19F10:
   33458/   1A1A0 : 4A68 0032           		tst.w	$32(a0)
   33459/   1A1A4 : 6B00 0090           		bmi.w	loc_19FA6
   33460/   1A1A8 : 08A8 0000 0022      		bclr	#0,$22(a0)
   33461/   1A1AE : 3038 D008           		move.w	($FFFFD008).w,d0
   33462/   1A1B2 : 9068 0008           		sub.w	8(a0),d0
   33463/   1A1B6 : 6506                		bcs.s	loc_19F2E
   33464/   1A1B8 : 08E8 0000 0022      		bset	#0,$22(a0)
   33465/   1A1BE :                     
   33466/   1A1BE :                     loc_19F2E:
   33467/   1A1BE : 323C 002B           		move.w	#$2B,d1
   33468/   1A1C2 : 343C 0014           		move.w	#$14,d2
   33469/   1A1C6 : 363C 0014           		move.w	#$14,d3
   33470/   1A1CA : 3828 0008           		move.w	8(a0),d4
   33471/   1A1CE : 4EB9 0000 FAE6      		jsr	(SolidObject).l
   33472/   1A1D4 : 4A44                		tst.w	d4
   33473/   1A1D6 : 6E08                		bgt.s	loc_19F50
   33474/   1A1D8 :                     
   33475/   1A1D8 :                     loc_19F48:
   33476/   1A1D8 : 4A28 0035           		tst.b	$35(a0)
   33477/   1A1DC : 663A                		bne.s	loc_19F88
   33478/   1A1DE : 6046                		bra.s	loc_19F96
   33479/   1A1E0 :                     ; ===========================================================================
   33480/   1A1E0 :                     
   33481/   1A1E0 :                     loc_19F50:
   33482/   1A1E0 : 5E78 F636           		addq.w	#7,($FFFFF636).w
   33483/   1A1E4 : 0C38 0002 D01C      		cmpi.b	#2,($FFFFD01C).w
   33484/   1A1EA : 66EC                		bne.s	loc_19F48
   33485/   1A1EC : 303C 0300           		move.w	#$300,d0
   33486/   1A1F0 : 0828 0000 0022      		btst	#0,$22(a0)
   33487/   1A1F6 : 6602                		bne.s	loc_19F6A
   33488/   1A1F8 : 4440                		neg.w	d0
   33489/   1A1FA :                     
   33490/   1A1FA :                     loc_19F6A:
   33491/   1A1FA : 31C0 D010           		move.w	d0,($FFFFD010).w
   33492/   1A1FE : 4A28 0035           		tst.b	$35(a0)
   33493/   1A202 : 6614                		bne.s	loc_19F88
   33494/   1A204 : 5328 0021           		subq.b	#1,$21(a0)
   33495/   1A208 : 117C 0064 0035      		move.b	#$64,$35(a0)
   33496/   1A20E : 303C 00AC           		move.w	#$AC,d0
   33497/   1A212 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play boss damage sound
   33498/   1A218 :                     
   33499/   1A218 :                     loc_19F88:
   33500/   1A218 : 5328 0035           		subq.b	#1,$35(a0)
   33501/   1A21C : 6708                		beq.s	loc_19F96
   33502/   1A21E : 117C 0003 001C      		move.b	#3,$1C(a0)
   33503/   1A224 : 6006                		bra.s	loc_19F9C
   33504/   1A226 :                     ; ===========================================================================
   33505/   1A226 :                     
   33506/   1A226 :                     loc_19F96:
   33507/   1A226 : 117C 0001 001C      		move.b	#1,$1C(a0)
   33508/   1A22C :                     
   33509/   1A22C :                     loc_19F9C:
   33510/   1A22C : 43FA FA64           		lea	Ani_obj82(pc),a1
   33511/   1A230 : 4EF9 0000 A734      		jmp	(AnimateSprite).l
   33512/   1A236 :                     ; ===========================================================================
   33513/   1A236 :                     
   33514/   1A236 :                     loc_19FA6:
   33515/   1A236 : 4A28 0021           		tst.b	$21(a0)
   33516/   1A23A : 6710                		beq.s	loc_19FBC
   33517/   1A23C : 5428 0034           		addq.b	#2,$34(a0)
   33518/   1A240 : 317C FFFF 0030      		move.w	#-1,$30(a0)
   33519/   1A246 : 4268 0032           		clr.w	$32(a0)
   33520/   1A24A : 4E75                		rts	
   33521/   1A24C :                     ; ===========================================================================
   33522/   1A24C :                     
   33523/   1A24C :                     loc_19FBC:
   33524/   1A24C : 117C 0006 0034      		move.b	#6,$34(a0)
   33525/   1A252 : 317C 25C0 0008      		move.w	#$25C0,8(a0)
   33526/   1A258 : 317C 053C 000C      		move.w	#$53C,$C(a0)
   33527/   1A25E : 117C 0014 0016      		move.b	#$14,$16(a0)
   33528/   1A264 : 4E75                		rts	
   33529/   1A266 :                     ; ===========================================================================
   33530/   1A266 : 0000 0002 0002 0004 word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
                    0004 0006 0006 0000 
   33531/   1A276 :                     ; ===========================================================================
   33532/   1A276 :                     
   33533/   1A276 :                     loc_19FE6:				; XREF: off_19E80
   33534/   1A276 : 70FF                		moveq	#-1,d0
   33535/   1A278 : 3028 0036           		move.w	$36(a0),d0
   33536/   1A27C : 2240                		movea.l	d0,a1
   33537/   1A27E : 4A68 0030           		tst.w	$30(a0)
   33538/   1A282 : 6A0C                		bpl.s	loc_1A000
   33539/   1A284 : 4268 0030           		clr.w	$30(a0)
   33540/   1A288 : 137C 00FF 0029      		move.b	#-1,$29(a1)
   33541/   1A28E : 6120                		bsr.s	loc_1A020
   33542/   1A290 :                     
   33543/   1A290 :                     loc_1A000:
   33544/   1A290 : 700F                		moveq	#$F,d0
   33545/   1A292 : C078 FE0E           		and.w	($FFFFFE0E).w,d0
   33546/   1A296 : 6602                		bne.s	loc_1A00A
   33547/   1A298 : 6116                		bsr.s	loc_1A020
   33548/   1A29A :                     
   33549/   1A29A :                     loc_1A00A:
   33550/   1A29A : 4A68 0032           		tst.w	$32(a0)
   33551/   1A29E : 670E                		beq.s	locret_1A01E
   33552/   1A2A0 : 5528 0034           		subq.b	#2,$34(a0)
   33553/   1A2A4 : 317C FFFF 0030      		move.w	#-1,$30(a0)
   33554/   1A2AA : 4268 0032           		clr.w	$32(a0)
   33555/   1A2AE :                     
   33556/   1A2AE :                     locret_1A01E:
   33557/   1A2AE : 4E75                		rts	
   33558/   1A2B0 :                     ; ===========================================================================
   33559/   1A2B0 :                     
   33560/   1A2B0 :                     loc_1A020:
   33561/   1A2B0 : 303C 00B1           		move.w	#$B1,d0
   33562/   1A2B4 : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play electricity sound
   33563/   1A2BA :                     ; ===========================================================================
   33564/   1A2BA :                     
   33565/   1A2BA :                     loc_1A02A:				; XREF: off_19E80
   33566/   1A2BA : 117C 0030 0017      		move.b	#$30,$17(a0)
   33567/   1A2C0 : 08E8 0000 0022      		bset	#0,$22(a0)
   33568/   1A2C6 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   33569/   1A2CC : 117C 0006 001A      		move.b	#6,$1A(a0)
   33570/   1A2D2 : 0668 0010 0012      		addi.w	#$10,$12(a0)
   33571/   1A2D8 : 0C68 059C 000C      		cmpi.w	#$59C,$C(a0)
   33572/   1A2DE : 6520                		bcs.s	loc_1A070
   33573/   1A2E0 : 317C 059C 000C      		move.w	#$59C,$C(a0)
   33574/   1A2E6 : 5428 0034           		addq.b	#2,$34(a0)
   33575/   1A2EA : 117C 0020 0017      		move.b	#$20,$17(a0)
   33576/   1A2F0 : 317C 0100 0010      		move.w	#$100,$10(a0)
   33577/   1A2F6 : 317C FF00 0012      		move.w	#-$100,$12(a0)
   33578/   1A2FC : 5438 F742           		addq.b	#2,($FFFFF742).w
   33579/   1A300 :                     
   33580/   1A300 :                     loc_1A070:
   33581/   1A300 : 6000 00F4           		bra.w	loc_1A166
   33582/   1A304 :                     ; ===========================================================================
   33583/   1A304 :                     
   33584/   1A304 :                     loc_1A074:				; XREF: off_19E80
   33585/   1A304 : 08E8 0000 0022      		bset	#0,$22(a0)
   33586/   1A30A : 117C 0004 001C      		move.b	#4,$1C(a0)
   33587/   1A310 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   33588/   1A316 : 0668 0010 0012      		addi.w	#$10,$12(a0)
   33589/   1A31C : 0C68 05A3 000C      		cmpi.w	#$5A3,$C(a0)
   33590/   1A322 : 6506                		bcs.s	loc_1A09A
   33591/   1A324 : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   33592/   1A32A :                     
   33593/   1A32A :                     loc_1A09A:
   33594/   1A32A : 317C 0400 0010      		move.w	#$400,$10(a0)
   33595/   1A330 : 3028 0008           		move.w	8(a0),d0
   33596/   1A334 : 9078 D008           		sub.w	($FFFFD008).w,d0
   33597/   1A338 : 6A0A                		bpl.s	loc_1A0B4
   33598/   1A33A : 317C 0500 0010      		move.w	#$500,$10(a0)
   33599/   1A340 : 6000 0040           		bra.w	loc_1A0F2
   33600/   1A344 :                     ; ===========================================================================
   33601/   1A344 :                     
   33602/   1A344 :                     loc_1A0B4:
   33603/   1A344 : 0440 0070           		subi.w	#$70,d0
   33604/   1A348 : 6538                		bcs.s	loc_1A0F2
   33605/   1A34A : 0468 0100 0010      		subi.w	#$100,$10(a0)
   33606/   1A350 : 5140                		subq.w	#8,d0
   33607/   1A352 : 652E                		bcs.s	loc_1A0F2
   33608/   1A354 : 0468 0100 0010      		subi.w	#$100,$10(a0)
   33609/   1A35A : 5140                		subq.w	#8,d0
   33610/   1A35C : 6524                		bcs.s	loc_1A0F2
   33611/   1A35E : 0468 0080 0010      		subi.w	#$80,$10(a0)
   33612/   1A364 : 5140                		subq.w	#8,d0
   33613/   1A366 : 651A                		bcs.s	loc_1A0F2
   33614/   1A368 : 0468 0080 0010      		subi.w	#$80,$10(a0)
   33615/   1A36E : 5140                		subq.w	#8,d0
   33616/   1A370 : 6510                		bcs.s	loc_1A0F2
   33617/   1A372 : 0468 0080 0010      		subi.w	#$80,$10(a0)
   33618/   1A378 : 0440 0038           		subi.w	#$38,d0
   33619/   1A37C : 6504                		bcs.s	loc_1A0F2
   33620/   1A37E : 4268 0010           		clr.w	$10(a0)
   33621/   1A382 :                     
   33622/   1A382 :                     loc_1A0F2:
   33623/   1A382 : 0C68 26A0 0008      		cmpi.w	#$26A0,8(a0)
   33624/   1A388 : 6516                		bcs.s	loc_1A110
   33625/   1A38A : 317C 26A0 0008      		move.w	#$26A0,8(a0)
   33626/   1A390 : 317C 0240 0010      		move.w	#$240,$10(a0)
   33627/   1A396 : 317C FB40 0012      		move.w	#-$4C0,$12(a0)
   33628/   1A39C : 5428 0034           		addq.b	#2,$34(a0)
   33629/   1A3A0 :                     
   33630/   1A3A0 :                     loc_1A110:
   33631/   1A3A0 : 604A                		bra.s	loc_1A15C
   33632/   1A3A2 :                     ; ===========================================================================
   33633/   1A3A2 :                     
   33634/   1A3A2 :                     loc_1A112:				; XREF: off_19E80
   33635/   1A3A2 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   33636/   1A3A8 : 0C68 26E0 0008      		cmpi.w	#$26E0,8(a0)
   33637/   1A3AE : 6504                		bcs.s	loc_1A124
   33638/   1A3B0 : 4268 0010           		clr.w	$10(a0)
   33639/   1A3B4 :                     
   33640/   1A3B4 :                     loc_1A124:
   33641/   1A3B4 : 0668 0034 0012      		addi.w	#$34,$12(a0)
   33642/   1A3BA : 4A68 0012           		tst.w	$12(a0)
   33643/   1A3BE : 6B12                		bmi.s	loc_1A142
   33644/   1A3C0 : 0C68 0592 000C      		cmpi.w	#$592,$C(a0)
   33645/   1A3C6 : 650A                		bcs.s	loc_1A142
   33646/   1A3C8 : 317C 0592 000C      		move.w	#$592,$C(a0)
   33647/   1A3CE : 4268 0012           		clr.w	$12(a0)
   33648/   1A3D2 :                     
   33649/   1A3D2 :                     loc_1A142:
   33650/   1A3D2 : 3028 0010           		move.w	$10(a0),d0
   33651/   1A3D6 : 8068 0012           		or.w	$12(a0),d0
   33652/   1A3DA : 6610                		bne.s	loc_1A15C
   33653/   1A3DC : 5428 0034           		addq.b	#2,$34(a0)
   33654/   1A3E0 : 317C FE80 0012      		move.w	#-$180,$12(a0)
   33655/   1A3E6 : 117C 0001 0021      		move.b	#1,$21(a0)
   33656/   1A3EC :                     
   33657/   1A3EC :                     loc_1A15C:
   33658/   1A3EC : 43FA F8A4           		lea	Ani_obj82(pc),a1
   33659/   1A3F0 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   33660/   1A3F6 :                     
   33661/   1A3F6 :                     loc_1A166:
   33662/   1A3F6 : 0C78 2700 F72A      		cmpi.w	#$2700,($FFFFF72A).w
   33663/   1A3FC : 6C04                		bge.s	loc_1A172
   33664/   1A3FE : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   33665/   1A402 :                     
   33666/   1A402 :                     loc_1A172:
   33667/   1A402 : 0C28 000C 0034      		cmpi.b	#$C,$34(a0)
   33668/   1A408 : 6C16                		bge.s	locret_1A190
   33669/   1A40A : 323C 001B           		move.w	#$1B,d1
   33670/   1A40E : 343C 0070           		move.w	#$70,d2
   33671/   1A412 : 363C 0071           		move.w	#$71,d3
   33672/   1A416 : 3828 0008           		move.w	8(a0),d4
   33673/   1A41A : 4EF9 0000 FAE6      		jmp	(SolidObject).l
   33674/   1A420 :                     ; ===========================================================================
   33675/   1A420 :                     
   33676/   1A420 :                     locret_1A190:
   33677/   1A420 : 4E75                		rts	
   33678/   1A422 :                     ; ===========================================================================
   33679/   1A422 :                     
   33680/   1A422 :                     loc_1A192:				; XREF: off_19E80
   33681/   1A422 : 217C 0001 7F9C 0004 		move.l	#Map_Eggman,4(a0)
   33682/   1A42A : 317C 0400 0002      		move.w	#$400,2(a0)
   33683/   1A430 : 117C 0000 001C      		move.b	#0,$1C(a0)
   33684/   1A436 : 08E8 0000 0022      		bset	#0,$22(a0)
   33685/   1A43C : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   33686/   1A442 : 0C68 0544 000C      		cmpi.w	#$544,$C(a0)
   33687/   1A448 : 6416                		bcc.s	loc_1A1D0
   33688/   1A44A : 317C 0180 0010      		move.w	#$180,$10(a0)
   33689/   1A450 : 317C FFE8 0012      		move.w	#-$18,$12(a0)
   33690/   1A456 : 117C 000F 0020      		move.b	#$F,$20(a0)
   33691/   1A45C : 5428 0034           		addq.b	#2,$34(a0)
   33692/   1A460 :                     
   33693/   1A460 :                     loc_1A1D0:
   33694/   1A460 : 6000 FF8A           		bra.w	loc_1A15C
   33695/   1A464 :                     ; ===========================================================================
   33696/   1A464 :                     
   33697/   1A464 :                     loc_1A1D4:				; XREF: off_19E80
   33698/   1A464 : 08E8 0000 0022      		bset	#0,$22(a0)
   33699/   1A46A : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   33700/   1A470 : 4A68 0030           		tst.w	$30(a0)
   33701/   1A474 : 6616                		bne.s	loc_1A1FC
   33702/   1A476 : 4A28 0020           		tst.b	$20(a0)
   33703/   1A47A : 662A                		bne.s	loc_1A216
   33704/   1A47C : 317C 001E 0030      		move.w	#$1E,$30(a0)
   33705/   1A482 : 303C 00AC           		move.w	#$AC,d0
   33706/   1A486 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play boss damage sound
   33707/   1A48C :                     
   33708/   1A48C :                     loc_1A1FC:
   33709/   1A48C : 5368 0030           		subq.w	#1,$30(a0)
   33710/   1A490 : 6614                		bne.s	loc_1A216
   33711/   1A492 : 4A28 0022           		tst.b	$22(a0)
   33712/   1A496 : 6A08                		bpl.s	loc_1A210
   33713/   1A498 : 317C 0060 0012      		move.w	#$60,$12(a0)
   33714/   1A49E : 6006                		bra.s	loc_1A216
   33715/   1A4A0 :                     ; ===========================================================================
   33716/   1A4A0 :                     
   33717/   1A4A0 :                     loc_1A210:
   33718/   1A4A0 : 117C 000F 0020      		move.b	#$F,$20(a0)
   33719/   1A4A6 :                     
   33720/   1A4A6 :                     loc_1A216:
   33721/   1A4A6 : 0C78 2790 D008      		cmpi.w	#$2790,($FFFFD008).w
   33722/   1A4AC : 6D1C                		blt.s	loc_1A23A
   33723/   1A4AE : 11FC 0001 F7CC      		move.b	#1,($FFFFF7CC).w
   33724/   1A4B4 : 31FC 0000 F602      		move.w	#0,($FFFFF602).w
   33725/   1A4BA : 4278 D014           		clr.w	($FFFFD014).w
   33726/   1A4BE : 4A68 0012           		tst.w	$12(a0)
   33727/   1A4C2 : 6A14                		bpl.s	loc_1A248
   33728/   1A4C4 : 31FC 0100 F602      		move.w	#$100,($FFFFF602).w
   33729/   1A4CA :                     
   33730/   1A4CA :                     loc_1A23A:
   33731/   1A4CA : 0C78 27E0 D008      		cmpi.w	#$27E0,($FFFFD008).w
   33732/   1A4D0 : 6D06                		blt.s	loc_1A248
   33733/   1A4D2 : 31FC 27E0 D008      		move.w	#$27E0,($FFFFD008).w
   33734/   1A4D8 :                     
   33735/   1A4D8 :                     loc_1A248:
   33736/   1A4D8 : 0C68 2900 0008      		cmpi.w	#$2900,8(a0)
   33737/   1A4DE : 6510                		bcs.s	loc_1A260
   33738/   1A4E0 : 4A28 0001           		tst.b	1(a0)
   33739/   1A4E4 : 6B0A                		bmi.s	loc_1A260
   33740/   1A4E6 : 11FC 0018 F600      		move.b	#$18,($FFFFF600).w
   33741/   1A4EC : 6000 FAF4           		bra.w	Obj85_Delete
   33742/   1A4F0 :                     ; ===========================================================================
   33743/   1A4F0 :                     
   33744/   1A4F0 :                     loc_1A260:
   33745/   1A4F0 : 6000 FEFA           		bra.w	loc_1A15C
   33746/   1A4F4 :                     ; ===========================================================================
   33747/   1A4F4 :                     
   33748/   1A4F4 :                     loc_1A264:				; XREF: Obj85_Index
   33749/   1A4F4 : 2268 0034           		movea.l	$34(a0),a1
   33750/   1A4F8 : 1011                		move.b	(a1),d0
   33751/   1A4FA : B010                		cmp.b	(a0),d0
   33752/   1A4FC : 6600 FAE4           		bne.w	Obj85_Delete
   33753/   1A500 : 117C 0007 001C      		move.b	#7,$1C(a0)
   33754/   1A506 : 0C29 000C 0034      		cmpi.b	#$C,$34(a1)
   33755/   1A50C : 6C02                		bge.s	loc_1A280
   33756/   1A50E : 6026                		bra.s	loc_1A2A6
   33757/   1A510 :                     ; ===========================================================================
   33758/   1A510 :                     
   33759/   1A510 :                     loc_1A280:
   33760/   1A510 : 4A69 0010           		tst.w	$10(a1)
   33761/   1A514 : 6706                		beq.s	loc_1A28C
   33762/   1A516 : 117C 000B 001C      		move.b	#$B,$1C(a0)
   33763/   1A51C :                     
   33764/   1A51C :                     loc_1A28C:
   33765/   1A51C : 43FA DA2E           		lea	Ani_Eggman(pc),a1
   33766/   1A520 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   33767/   1A526 :                     
   33768/   1A526 :                     loc_1A296:
   33769/   1A526 : 2268 0034           		movea.l	$34(a0),a1
   33770/   1A52A : 3169 0008 0008      		move.w	8(a1),8(a0)
   33771/   1A530 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   33772/   1A536 :                     
   33773/   1A536 :                     loc_1A2A6:
   33774/   1A536 : 2268 0034           		movea.l	$34(a0),a1
   33775/   1A53A : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   33776/   1A540 : 7003                		moveq	#3,d0
   33777/   1A542 : C028 0022           		and.b	$22(a0),d0
   33778/   1A546 : 0228 00FC 0001      		andi.b	#-4,1(a0)
   33779/   1A54C : 8128 0001           		or.b	d0,1(a0)
   33780/   1A550 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   33781/   1A556 :                     ; ===========================================================================
   33782/   1A556 :                     
   33783/   1A556 :                     loc_1A2C6:				; XREF: Obj85_Index
   33784/   1A556 : 2268 0034           		movea.l	$34(a0),a1
   33785/   1A55A : 1011                		move.b	(a1),d0
   33786/   1A55C : B010                		cmp.b	(a0),d0
   33787/   1A55E : 6600 FA82           		bne.w	Obj85_Delete
   33788/   1A562 : 0CA9 0001 7F9C 0004 		cmpi.l	#Map_Eggman,4(a1)
   33789/   1A56A : 6708                		beq.s	loc_1A2E4
   33790/   1A56C : 117C 000A 001A      		move.b	#$A,$1A(a0)
   33791/   1A572 : 60C2                		bra.s	loc_1A2A6
   33792/   1A574 :                     ; ===========================================================================
   33793/   1A574 :                     
   33794/   1A574 :                     loc_1A2E4:
   33795/   1A574 : 117C 0001 001C      		move.b	#1,$1C(a0)
   33796/   1A57A : 4A29 0021           		tst.b	$21(a1)
   33797/   1A57E : 6F22                		ble.s	loc_1A312
   33798/   1A580 : 117C 0006 001C      		move.b	#6,$1C(a0)
   33799/   1A586 : 217C 0001 7F9C 0004 		move.l	#Map_Eggman,4(a0)
   33800/   1A58E : 317C 0400 0002      		move.w	#$400,2(a0)
   33801/   1A594 : 43FA D9B6           		lea	Ani_Eggman(pc),a1
   33802/   1A598 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   33803/   1A59E : 6000 FF86           		bra.w	loc_1A296
   33804/   1A5A2 :                     ; ===========================================================================
   33805/   1A5A2 :                     
   33806/   1A5A2 :                     loc_1A312:
   33807/   1A5A2 : 4A28 0001           		tst.b	1(a0)
   33808/   1A5A6 : 6A00 FA3A           		bpl.w	Obj85_Delete
   33809/   1A5AA : 6100 D544           		bsr.w	BossDefeated
   33810/   1A5AE : 117C 0002 0018      		move.b	#2,$18(a0)
   33811/   1A5B4 : 117C 0000 001C      		move.b	#0,$1C(a0)
   33812/   1A5BA : 217C 0001 A66A 0004 		move.l	#Map_Eggman2,4(a0)
   33813/   1A5C2 : 317C 03A0 0002      		move.w	#$3A0,2(a0)
   33814/   1A5C8 : 43FA 009A           		lea	Ani_obj85(pc),a1
   33815/   1A5CC : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   33816/   1A5D2 : 6000 FF52           		bra.w	loc_1A296
   33817/   1A5D6 :                     ; ===========================================================================
   33818/   1A5D6 :                     
   33819/   1A5D6 :                     loc_1A346:				; XREF: Obj85_Index
   33820/   1A5D6 : 08E8 0000 0022      		bset	#0,$22(a0)
   33821/   1A5DC : 2268 0034           		movea.l	$34(a0),a1
   33822/   1A5E0 : 0CA9 0001 7F9C 0004 		cmpi.l	#Map_Eggman,4(a1)
   33823/   1A5E8 : 6704                		beq.s	loc_1A35E
   33824/   1A5EA : 6000 FF4A           		bra.w	loc_1A2A6
   33825/   1A5EE :                     ; ===========================================================================
   33826/   1A5EE :                     
   33827/   1A5EE :                     loc_1A35E:
   33828/   1A5EE : 3169 0008 0008      		move.w	8(a1),8(a0)
   33829/   1A5F4 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   33830/   1A5FA : 4A28 001E           		tst.b	$1E(a0)
   33831/   1A5FE : 6606                		bne.s	loc_1A376
   33832/   1A600 : 117C 0014 001E      		move.b	#$14,$1E(a0)
   33833/   1A606 :                     
   33834/   1A606 :                     loc_1A376:
   33835/   1A606 : 5328 001E           		subq.b	#1,$1E(a0)
   33836/   1A60A : 6E0E                		bgt.s	loc_1A38A
   33837/   1A60C : 5228 001A           		addq.b	#1,$1A(a0)
   33838/   1A610 : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)
   33839/   1A616 : 6E00 F9CA           		bgt.w	Obj85_Delete
   33840/   1A61A :                     
   33841/   1A61A :                     loc_1A38A:
   33842/   1A61A : 6000 FF0A           		bra.w	loc_1A296
   33843/   1A61E :                     ; ===========================================================================
   33844/   1A61E :                     
   33845/   1A61E :                     loc_1A38E:				; XREF: Obj85_Index
   33846/   1A61E : 117C 000B 001A      		move.b	#$B,$1A(a0)
   33847/   1A624 : 3038 D008           		move.w	($FFFFD008).w,d0
   33848/   1A628 : 9068 0008           		sub.w	8(a0),d0
   33849/   1A62C : 6508                		bcs.s	loc_1A3A6
   33850/   1A62E : 4A28 0001           		tst.b	1(a0)
   33851/   1A632 : 6A00 F9AE           		bpl.w	Obj85_Delete
   33852/   1A636 :                     
   33853/   1A636 :                     loc_1A3A6:
   33854/   1A636 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   33855/   1A63C :                     ; ===========================================================================
   33856/   1A63C :                     
   33857/   1A63C :                     loc_1A3AC:				; XREF: Obj85_Index
   33858/   1A63C : 117C 0000 001A      		move.b	#0,$1A(a0)
   33859/   1A642 : 08E8 0000 0022      		bset	#0,$22(a0)
   33860/   1A648 : 2268 0034           		movea.l	$34(a0),a1
   33861/   1A64C : 0C29 000C 0034      		cmpi.b	#$C,$34(a1)
   33862/   1A652 : 660C                		bne.s	loc_1A3D0
   33863/   1A654 : 0CA9 0001 7F9C 0004 		cmpi.l	#Map_Eggman,4(a1)
   33864/   1A65C : 6700 F984           		beq.w	Obj85_Delete
   33865/   1A660 :                     
   33866/   1A660 :                     loc_1A3D0:
   33867/   1A660 : 6000 FED4           		bra.w	loc_1A2A6
   33868/   1A664 :                     ; ===========================================================================
   33869/   1A664 :                     Ani_obj85:
   33870/   1A664 :                     		include	"_anim/obj85.asm"
(1)    1/   1A664 :                     ; ---------------------------------------------------------------------------
(1)    2/   1A664 :                     ; Animation script - Eggman (FZ)
(1)    3/   1A664 :                     ; ---------------------------------------------------------------------------
(1)    4/   1A664 : 0002                		dc.w byte_1A3D6-Ani_obj85
(1)    5/   1A666 : 0300 01FF           byte_1A3D6:	dc.b 3,	0, 1, $FF
(1)    6/   1A66A : (MACRO)             		align 2
(1)    6/   1A66A :  (MACRO-2)                  cnop 0,2
(1)    6/   1A66A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   33871/   1A66A :                     
   33872/   1A66A :                     Map_Eggman2:
   33873/   1A66A :                     		include	"_maps/Eggman2.asm"
(1)    1/   1A66A :                     ; ---------------------------------------------------------------------------
(1)    2/   1A66A :                     ; Sprite mappings - Eggman (FZ)
(1)    3/   1A66A :                     ; ---------------------------------------------------------------------------
(1)    4/   1A66A : 0004                		dc.w byte_1A3DE-Map_Eggman2
(1)    5/   1A66C : 0023                		dc.w byte_1A3FD-Map_Eggman2
(1)    6/   1A66E : 06                  byte_1A3DE:	dc.b 6
(1)    7/   1A66F : E408 0020 F4        		dc.b $E4, 8, 0,	$20, $F4
(1)    8/   1A674 : EC0D 0023 E4        		dc.b $EC, $D, 0, $23, $E4
(1)    9/   1A679 : EC09 002B 04        		dc.b $EC, 9, 0,	$2B, 4
(1)   10/   1A67E : FC05 203A E4        		dc.b $FC, 5, $20, $3A, $E4
(1)   11/   1A683 : FC0E 203E 04        		dc.b $FC, $E, $20, $3E,	4
(1)   12/   1A688 : 1404 204A 04        		dc.b $14, 4, $20, $4A, 4
(1)   13/   1A68D : 06                  byte_1A3FD:	dc.b 6
(1)   14/   1A68E : E40A 0031 F4        		dc.b $E4, $A, 0, $31, $F4
(1)   15/   1A693 : EC05 0023 E4        		dc.b $EC, 5, 0,	$23, $E4
(1)   16/   1A698 : EC09 002B 04        		dc.b $EC, 9, 0,	$2B, 4
(1)   17/   1A69D : FC05 203A E4        		dc.b $FC, 5, $20, $3A, $E4
(1)   18/   1A6A2 : FC0E 203E 04        		dc.b $FC, $E, $20, $3E,	4
(1)   19/   1A6A7 : 1404 204A 04        		dc.b $14, 4, $20, $4A, 4
(1)   20/   1A6AC : (MACRO)             		align 2
(1)   20/   1A6AC :  (MACRO-2)                  cnop 0,2
(1)   20/   1A6AC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   33874/   1A6AC :                     
   33875/   1A6AC :                     Map_FZBoss:
   33876/   1A6AC :                     		include	"_maps/FZ boss.asm"
(1)    1/   1A6AC :                     ; ---------------------------------------------------------------------------
(1)    2/   1A6AC :                     ; Sprite mappings - boss (FZ)
(1)    3/   1A6AC :                     ; ---------------------------------------------------------------------------
(1)    4/   1A6AC : 0006                		dc.w byte_1A422-Map_FZBoss
(1)    5/   1A6AE : 0011                		dc.w byte_1A42D-Map_FZBoss
(1)    6/   1A6B0 : 0021                		dc.w byte_1A43D-Map_FZBoss
(1)    7/   1A6B2 : 02                  byte_1A422:	dc.b 2
(1)    8/   1A6B3 : 140E 2800 F4        		dc.b $14, $E, $28, 0, $F4
(1)    9/   1A6B8 : 2400 280C EC        		dc.b $24, 0, $28, $C, $EC
(1)   10/   1A6BD : 03                  byte_1A42D:	dc.b 3
(1)   11/   1A6BE : 0C05 280D 0C        		dc.b $C, 5, $28, $D, $C
(1)   12/   1A6C3 : 1C00 2811 0C        		dc.b $1C, 0, $28, $11, $C
(1)   13/   1A6C8 : 140D 2812 EC        		dc.b $14, $D, $28, $12,	$EC
(1)   14/   1A6CD : 02                  byte_1A43D:	dc.b 2
(1)   15/   1A6CE : 0C01 281A 0C        		dc.b $C, 1, $28, $1A, $C
(1)   16/   1A6D3 : 140C 281C EC        		dc.b $14, $C, $28, $1C,	$EC
(1)   17/   1A6D8 : (MACRO)             		align 2
(1)   17/   1A6D8 :  (MACRO-2)                  cnop 0,2
(1)   17/   1A6D8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   33877/   1A6D8 :                     
   33878/   1A6D8 :                     ; ===========================================================================
   33879/   1A6D8 :                     
   33880/   1A6D8 :                     Obj84_Delete:
   33881/   1A6D8 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   33882/   1A6DE :                     ; ===========================================================================
   33883/   1A6DE :                     ; ---------------------------------------------------------------------------
   33884/   1A6DE :                     ; Object 84 - cylinder Eggman	hides in (FZ)
   33885/   1A6DE :                     ; ---------------------------------------------------------------------------
   33886/   1A6DE :                     
   33887/   1A6DE :                     Obj84:					; XREF: Obj_Index
   33888/   1A6DE : 7000                		moveq	#0,d0
   33889/   1A6E0 : 1028 0024           		move.b	$24(a0),d0
   33890/   1A6E4 : 303B 0006           		move.w	Obj84_Index(pc,d0.w),d0
   33891/   1A6E8 : 4EFB 0002           		jmp	Obj84_Index(pc,d0.w)
   33892/   1A6EC :                     ; ===========================================================================
   33893/   1A6EC : 0016                Obj84_Index:	dc.w Obj84_Main-Obj84_Index
   33894/   1A6EE : 0072                		dc.w loc_1A4CE-Obj84_Index
   33895/   1A6F0 : 0122                		dc.w loc_1A57E-Obj84_Index
   33896/   1A6F2 :                     
   33897/   1A6F2 : 24D0 0620           Obj84_PosData:	dc.w $24D0, $620
   33898/   1A6F6 : 2550 0620           		dc.w $2550, $620
   33899/   1A6FA : 2490 04C0           		dc.w $2490, $4C0
   33900/   1A6FE : 2510 04C0           		dc.w $2510, $4C0
   33901/   1A702 :                     ; ===========================================================================
   33902/   1A702 :                     
   33903/   1A702 :                     Obj84_Main:				; XREF: Obj84_Index
   33904/   1A702 : 43FA FFEE           		lea	Obj84_PosData(pc),a1
   33905/   1A706 : 7000                		moveq	#0,d0
   33906/   1A708 : 1028 0028           		move.b	$28(a0),d0
   33907/   1A70C : D040                		add.w	d0,d0
   33908/   1A70E : D2C0                		adda.w	d0,a1
   33909/   1A710 : 117C 0004 0001      		move.b	#4,1(a0)
   33910/   1A716 : 08E8 0007 0001      		bset	#7,1(a0)
   33911/   1A71C : 08E8 0004 0001      		bset	#4,1(a0)
   33912/   1A722 : 317C 0300 0002      		move.w	#$300,2(a0)
   33913/   1A728 : 217C 0001 A906 0004 		move.l	#Map_obj84,4(a0)
   33914/   1A730 : 3159 0008           		move.w	(a1)+,8(a0)
   33915/   1A734 : 3151 000C           		move.w	(a1),$C(a0)
   33916/   1A738 : 3159 0038           		move.w	(a1)+,$38(a0)
   33917/   1A73C : 117C 0020 0016      		move.b	#$20,$16(a0)
   33918/   1A742 : 117C 0060 0017      		move.b	#$60,$17(a0)
   33919/   1A748 : 117C 0020 0019      		move.b	#$20,$19(a0)
   33920/   1A74E : 117C 0060 0016      		move.b	#$60,$16(a0)
   33921/   1A754 : 117C 0003 0018      		move.b	#3,$18(a0)
   33922/   1A75A : 5428 0024           		addq.b	#2,$24(a0)
   33923/   1A75E :                     
   33924/   1A75E :                     loc_1A4CE:				; XREF: Obj84_Index
   33925/   1A75E : 0C28 0002 0028      		cmpi.b	#2,$28(a0)
   33926/   1A764 : 6F06                		ble.s	loc_1A4DC
   33927/   1A766 : 08E8 0001 0001      		bset	#1,1(a0)
   33928/   1A76C :                     
   33929/   1A76C :                     loc_1A4DC:
   33930/   1A76C : 42A8 003C           		clr.l	$3C(a0)
   33931/   1A770 : 4A28 0029           		tst.b	$29(a0)
   33932/   1A774 : 6704                		beq.s	loc_1A4EA
   33933/   1A776 : 5428 0024           		addq.b	#2,$24(a0)
   33934/   1A77A :                     
   33935/   1A77A :                     loc_1A4EA:
   33936/   1A77A : 2028 003C           		move.l	$3C(a0),d0
   33937/   1A77E : 2228 0038           		move.l	$38(a0),d1
   33938/   1A782 : D280                		add.l	d0,d1
   33939/   1A784 : 4841                		swap	d1
   33940/   1A786 : 3141 000C           		move.w	d1,$C(a0)
   33941/   1A78A : 0C28 0004 0024      		cmpi.b	#4,$24(a0)
   33942/   1A790 : 6622                		bne.s	loc_1A524
   33943/   1A792 : 4A68 0030           		tst.w	$30(a0)
   33944/   1A796 : 6A1C                		bpl.s	loc_1A524
   33945/   1A798 : 70F6                		moveq	#-$A,d0
   33946/   1A79A : 0C28 0002 0028      		cmpi.b	#2,$28(a0)
   33947/   1A7A0 : 6F02                		ble.s	loc_1A514
   33948/   1A7A2 : 700E                		moveq	#$E,d0
   33949/   1A7A4 :                     
   33950/   1A7A4 :                     loc_1A514:
   33951/   1A7A4 : D240                		add.w	d0,d1
   33952/   1A7A6 : 2268 0034           		movea.l	$34(a0),a1
   33953/   1A7AA : 3341 000C           		move.w	d1,$C(a1)
   33954/   1A7AE : 3368 0008 0008      		move.w	8(a0),8(a1)
   33955/   1A7B4 :                     
   33956/   1A7B4 :                     loc_1A524:
   33957/   1A7B4 : 323C 002B           		move.w	#$2B,d1
   33958/   1A7B8 : 343C 0060           		move.w	#$60,d2
   33959/   1A7BC : 363C 0061           		move.w	#$61,d3
   33960/   1A7C0 : 3828 0008           		move.w	8(a0),d4
   33961/   1A7C4 : 4EB9 0000 FAE6      		jsr	(SolidObject).l
   33962/   1A7CA : 7000                		moveq	#0,d0
   33963/   1A7CC : 3228 003C           		move.w	$3C(a0),d1
   33964/   1A7D0 : 6A0E                		bpl.s	loc_1A550
   33965/   1A7D2 : 4441                		neg.w	d1
   33966/   1A7D4 : 5141                		subq.w	#8,d1
   33967/   1A7D6 : 6514                		bcs.s	loc_1A55C
   33968/   1A7D8 : 5200                		addq.b	#1,d0
   33969/   1A7DA : E841                		asr.w	#4,d1
   33970/   1A7DC : D041                		add.w	d1,d0
   33971/   1A7DE : 600C                		bra.s	loc_1A55C
   33972/   1A7E0 :                     ; ===========================================================================
   33973/   1A7E0 :                     
   33974/   1A7E0 :                     loc_1A550:
   33975/   1A7E0 : 0441 0027           		subi.w	#$27,d1
   33976/   1A7E4 : 6506                		bcs.s	loc_1A55C
   33977/   1A7E6 : 5200                		addq.b	#1,d0
   33978/   1A7E8 : E841                		asr.w	#4,d1
   33979/   1A7EA : D041                		add.w	d1,d0
   33980/   1A7EC :                     
   33981/   1A7EC :                     loc_1A55C:
   33982/   1A7EC : 1140 001A           		move.b	d0,$1A(a0)
   33983/   1A7F0 : 3038 D008           		move.w	($FFFFD008).w,d0
   33984/   1A7F4 : 9068 0008           		sub.w	8(a0),d0
   33985/   1A7F8 : 6B0E                		bmi.s	loc_1A578
   33986/   1A7FA : 0440 0140           		subi.w	#$140,d0
   33987/   1A7FE : 6B08                		bmi.s	loc_1A578
   33988/   1A800 : 4A28 0001           		tst.b	1(a0)
   33989/   1A804 : 6A00 FED2           		bpl.w	Obj84_Delete
   33990/   1A808 :                     
   33991/   1A808 :                     loc_1A578:
   33992/   1A808 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   33993/   1A80E :                     ; ===========================================================================
   33994/   1A80E :                     
   33995/   1A80E :                     loc_1A57E:				; XREF: Obj84_Index
   33996/   1A80E : 7000                		moveq	#0,d0
   33997/   1A810 : 1028 0028           		move.b	$28(a0),d0
   33998/   1A814 : 303B 000A           		move.w	off_1A590(pc,d0.w),d0
   33999/   1A818 : 4EBB 0006           		jsr	off_1A590(pc,d0.w)
   34000/   1A81C : 6000 FF5C           		bra.w	loc_1A4EA
   34001/   1A820 :                     ; ===========================================================================
   34002/   1A820 : 0008                off_1A590:	dc.w loc_1A598-off_1A590
   34003/   1A822 : 0008                		dc.w loc_1A598-off_1A590
   34004/   1A824 : 0074                		dc.w loc_1A604-off_1A590
   34005/   1A826 : 0074                		dc.w loc_1A604-off_1A590
   34006/   1A828 :                     ; ===========================================================================
   34007/   1A828 :                     
   34008/   1A828 :                     loc_1A598:				; XREF: off_1A590
   34009/   1A828 : 4A28 0029           		tst.b	$29(a0)
   34010/   1A82C : 6636                		bne.s	loc_1A5D4
   34011/   1A82E : 2268 0034           		movea.l	$34(a0),a1
   34012/   1A832 : 4A29 0021           		tst.b	$21(a1)
   34013/   1A836 : 660C                		bne.s	loc_1A5B4
   34014/   1A838 : 6100 D2B6           		bsr.w	BossDefeated
   34015/   1A83C : 04A8 0001 0000 003C 		subi.l	#$10000,$3C(a0)
   34016/   1A844 :                     
   34017/   1A844 :                     loc_1A5B4:
   34018/   1A844 : 06A8 0002 0000 003C 		addi.l	#$20000,$3C(a0)
   34019/   1A84C : 6444                		bcc.s	locret_1A602
   34020/   1A84E : 42A8 003C           		clr.l	$3C(a0)
   34021/   1A852 : 2268 0034           		movea.l	$34(a0),a1
   34022/   1A856 : 5369 0032           		subq.w	#1,$32(a1)
   34023/   1A85A : 4269 0030           		clr.w	$30(a1)
   34024/   1A85E : 5528 0024           		subq.b	#2,$24(a0)
   34025/   1A862 : 4E75                		rts	
   34026/   1A864 :                     ; ===========================================================================
   34027/   1A864 :                     
   34028/   1A864 :                     loc_1A5D4:
   34029/   1A864 : 0C68 FFF0 003C      		cmpi.w	#-$10,$3C(a0)
   34030/   1A86A : 6C08                		bge.s	loc_1A5E4
   34031/   1A86C : 04A8 0002 8000 003C 		subi.l	#$28000,$3C(a0)
   34032/   1A874 :                     
   34033/   1A874 :                     loc_1A5E4:
   34034/   1A874 : 04A8 0000 8000 003C 		subi.l	#$8000,$3C(a0)
   34035/   1A87C : 0C68 FF60 003C      		cmpi.w	#-$A0,$3C(a0)
   34036/   1A882 : 6E0E                		bgt.s	locret_1A602
   34037/   1A884 : 4268 003E           		clr.w	$3E(a0)
   34038/   1A888 : 317C FF60 003C      		move.w	#-$A0,$3C(a0)
   34039/   1A88E : 4228 0029           		clr.b	$29(a0)
   34040/   1A892 :                     
   34041/   1A892 :                     locret_1A602:
   34042/   1A892 : 4E75                		rts	
   34043/   1A894 :                     ; ===========================================================================
   34044/   1A894 :                     
   34045/   1A894 :                     loc_1A604:				; XREF: off_1A590
   34046/   1A894 : 08E8 0001 0001      		bset	#1,1(a0)
   34047/   1A89A : 4A28 0029           		tst.b	$29(a0)
   34048/   1A89E : 6636                		bne.s	loc_1A646
   34049/   1A8A0 : 2268 0034           		movea.l	$34(a0),a1
   34050/   1A8A4 : 4A29 0021           		tst.b	$21(a1)
   34051/   1A8A8 : 660C                		bne.s	loc_1A626
   34052/   1A8AA : 6100 D244           		bsr.w	BossDefeated
   34053/   1A8AE : 06A8 0001 0000 003C 		addi.l	#$10000,$3C(a0)
   34054/   1A8B6 :                     
   34055/   1A8B6 :                     loc_1A626:
   34056/   1A8B6 : 04A8 0002 0000 003C 		subi.l	#$20000,$3C(a0)
   34057/   1A8BE : 6444                		bcc.s	locret_1A674
   34058/   1A8C0 : 42A8 003C           		clr.l	$3C(a0)
   34059/   1A8C4 : 2268 0034           		movea.l	$34(a0),a1
   34060/   1A8C8 : 5369 0032           		subq.w	#1,$32(a1)
   34061/   1A8CC : 4269 0030           		clr.w	$30(a1)
   34062/   1A8D0 : 5528 0024           		subq.b	#2,$24(a0)
   34063/   1A8D4 : 4E75                		rts	
   34064/   1A8D6 :                     ; ===========================================================================
   34065/   1A8D6 :                     
   34066/   1A8D6 :                     loc_1A646:
   34067/   1A8D6 : 0C68 0010 003C      		cmpi.w	#$10,$3C(a0)
   34068/   1A8DC : 6D08                		blt.s	loc_1A656
   34069/   1A8DE : 06A8 0002 8000 003C 		addi.l	#$28000,$3C(a0)
   34070/   1A8E6 :                     
   34071/   1A8E6 :                     loc_1A656:
   34072/   1A8E6 : 06A8 0000 8000 003C 		addi.l	#$8000,$3C(a0)
   34073/   1A8EE : 0C68 00A0 003C      		cmpi.w	#$A0,$3C(a0)
   34074/   1A8F4 : 6D0E                		blt.s	locret_1A674
   34075/   1A8F6 : 4268 003E           		clr.w	$3E(a0)
   34076/   1A8FA : 317C 00A0 003C      		move.w	#$A0,$3C(a0)
   34077/   1A900 : 4228 0029           		clr.b	$29(a0)
   34078/   1A904 :                     
   34079/   1A904 :                     locret_1A674:
   34080/   1A904 : 4E75                		rts	
   34081/   1A906 :                     ; ===========================================================================
   34082/   1A906 :                     ; ---------------------------------------------------------------------------
   34083/   1A906 :                     ; Sprite mappings - cylinders Eggman hides in (FZ)
   34084/   1A906 :                     ; ---------------------------------------------------------------------------
   34085/   1A906 :                     Map_obj84:
   34086/   1A906 :                     		include	"_maps/obj84.asm"
(1)    1/   1A906 :                     ; ---------------------------------------------------------------------------
(1)    2/   1A906 :                     ; Sprite mappings - cylinders Eggman hides in (FZ)
(1)    3/   1A906 :                     ; ---------------------------------------------------------------------------
(1)    4/   1A906 : 0018 0037           		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
(1)    5/   1A90A : 0060 0093           		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
(1)    6/   1A90E : 00D0 0112           		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
(1)    7/   1A912 : 0112 0112           		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
(1)    8/   1A916 : 0112 0112           		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
(1)    9/   1A91A : 0112 0159           		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
(1)   10/   1A91E : 06                  byte_1A68E:	dc.b 6
(1)   11/   1A91F : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   12/   1A924 : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   13/   1A929 : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   14/   1A92E : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   15/   1A933 : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   16/   1A938 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   17/   1A93D : 08                  byte_1A6AD:	dc.b 8
(1)   18/   1A93E : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   19/   1A943 : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   20/   1A948 : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   21/   1A94D : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   22/   1A952 : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   23/   1A957 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   24/   1A95C : D80F 4020 E0        		dc.b $D8, $F, $40, $20,	$E0
(1)   25/   1A961 : D80F 4820 00        		dc.b $D8, $F, $48, $20,	0
(1)   26/   1A966 : 0A                  byte_1A6D6:	dc.b $A
(1)   27/   1A967 : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   28/   1A96C : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   29/   1A971 : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   30/   1A976 : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   31/   1A97B : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   32/   1A980 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   33/   1A985 : D80F 4020 E0        		dc.b $D8, $F, $40, $20,	$E0
(1)   34/   1A98A : D80F 4820 00        		dc.b $D8, $F, $48, $20,	0
(1)   35/   1A98F : F80F 4030 E0        		dc.b $F8, $F, $40, $30,	$E0
(1)   36/   1A994 : F80F 4830 00        		dc.b $F8, $F, $48, $30,	0
(1)   37/   1A999 : 0C                  byte_1A709:	dc.b $C
(1)   38/   1A99A : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   39/   1A99F : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   40/   1A9A4 : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   41/   1A9A9 : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   42/   1A9AE : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   43/   1A9B3 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   44/   1A9B8 : D80F 4020 E0        		dc.b $D8, $F, $40, $20,	$E0
(1)   45/   1A9BD : D80F 4820 00        		dc.b $D8, $F, $48, $20,	0
(1)   46/   1A9C2 : F80F 4030 E0        		dc.b $F8, $F, $40, $30,	$E0
(1)   47/   1A9C7 : F80F 4830 00        		dc.b $F8, $F, $48, $30,	0
(1)   48/   1A9CC : 180F 4040 E0        		dc.b $18, $F, $40, $40,	$E0
(1)   49/   1A9D1 : 180F 4840 00        		dc.b $18, $F, $48, $40,	0
(1)   50/   1A9D6 : 0D                  byte_1A746:	dc.b $D
(1)   51/   1A9D7 : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   52/   1A9DC : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   53/   1A9E1 : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   54/   1A9E6 : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   55/   1A9EB : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   56/   1A9F0 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   57/   1A9F5 : D80F 4020 E0        		dc.b $D8, $F, $40, $20,	$E0
(1)   58/   1A9FA : D80F 4820 00        		dc.b $D8, $F, $48, $20,	0
(1)   59/   1A9FF : F80F 4030 E0        		dc.b $F8, $F, $40, $30,	$E0
(1)   60/   1AA04 : F80F 4830 00        		dc.b $F8, $F, $48, $30,	0
(1)   61/   1AA09 : 180F 4040 E0        		dc.b $18, $F, $40, $40,	$E0
(1)   62/   1AA0E : 180F 4840 00        		dc.b $18, $F, $48, $40,	0
(1)   63/   1AA13 : 380F 4050 F0        		dc.b $38, $F, $40, $50,	$F0
(1)   64/   1AA18 : 0E                  byte_1A788:	dc.b $E
(1)   65/   1AA19 : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   66/   1AA1E : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   67/   1AA23 : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   68/   1AA28 : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   69/   1AA2D : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   70/   1AA32 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   71/   1AA37 : D80F 4020 E0        		dc.b $D8, $F, $40, $20,	$E0
(1)   72/   1AA3C : D80F 4820 00        		dc.b $D8, $F, $48, $20,	0
(1)   73/   1AA41 : F80F 4030 E0        		dc.b $F8, $F, $40, $30,	$E0
(1)   74/   1AA46 : F80F 4830 00        		dc.b $F8, $F, $48, $30,	0
(1)   75/   1AA4B : 180F 4040 E0        		dc.b $18, $F, $40, $40,	$E0
(1)   76/   1AA50 : 180F 4840 00        		dc.b $18, $F, $48, $40,	0
(1)   77/   1AA55 : 380F 4050 F0        		dc.b $38, $F, $40, $50,	$F0
(1)   78/   1AA5A : 580F 4050 F0        		dc.b $58, $F, $40, $50,	$F0
(1)   79/   1AA5F : 02                  byte_1A7CF:	dc.b 2
(1)   80/   1AA60 : F804 0068 F0        		dc.b $F8, 4, 0,	$68, $F0
(1)   81/   1AA65 : 000C 006A F0        		dc.b 0,	$C, 0, $6A, $F0
(1)   82/   1AA6A : (MACRO)             		align 2
(1)   82/   1AA6A :  (MACRO-2)                  cnop 0,2
(1)   82/   1AA6A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   34087/   1AA6A :                     
   34088/   1AA6A :                     ; ===========================================================================
   34089/   1AA6A :                     ; ---------------------------------------------------------------------------
   34090/   1AA6A :                     ; Object 86 - energy balls (FZ)
   34091/   1AA6A :                     ; ---------------------------------------------------------------------------
   34092/   1AA6A :                     
   34093/   1AA6A :                     Obj86:					; XREF: Obj_Index
   34094/   1AA6A : 7000                		moveq	#0,d0
   34095/   1AA6C : 1028 0024           		move.b	$24(a0),d0
   34096/   1AA70 : 303B 0006           		move.w	Obj86_Index(pc,d0.w),d0
   34097/   1AA74 : 4EFB 0002           		jmp	Obj86_Index(pc,d0.w)
   34098/   1AA78 :                     ; ===========================================================================
   34099/   1AA78 : 000A                Obj86_Index:	dc.w Obj86_Main-Obj86_Index
   34100/   1AA7A : 004C                		dc.w Obj86_Generator-Obj86_Index
   34101/   1AA7C : 00C2                		dc.w Obj86_MakeBalls-Obj86_Index
   34102/   1AA7E : 017A                		dc.w loc_1A962-Obj86_Index
   34103/   1AA80 : 019A                		dc.w loc_1A982-Obj86_Index
   34104/   1AA82 :                     ; ===========================================================================
   34105/   1AA82 :                     
   34106/   1AA82 :                     Obj86_Main:				; XREF: Obj86_Index
   34107/   1AA82 : 317C 2588 0008      		move.w	#$2588,8(a0)
   34108/   1AA88 : 317C 053C 000C      		move.w	#$53C,$C(a0)
   34109/   1AA8E : 317C 0300 0002      		move.w	#$300,2(a0)
   34110/   1AA94 : 217C 0001 ACE6 0004 		move.l	#Map_obj86,4(a0)
   34111/   1AA9C : 117C 0000 001C      		move.b	#0,$1C(a0)
   34112/   1AAA2 : 117C 0003 0018      		move.b	#3,$18(a0)
   34113/   1AAA8 : 117C 0008 0017      		move.b	#8,$17(a0)
   34114/   1AAAE : 117C 0008 0016      		move.b	#8,$16(a0)
   34115/   1AAB4 : 117C 0004 0001      		move.b	#4,1(a0)
   34116/   1AABA : 08E8 0007 0001      		bset	#7,1(a0)
   34117/   1AAC0 : 5428 0024           		addq.b	#2,$24(a0)
   34118/   1AAC4 :                     
   34119/   1AAC4 :                     Obj86_Generator:			; XREF: Obj86_Index
   34120/   1AAC4 : 2268 0034           		movea.l	$34(a0),a1
   34121/   1AAC8 : 0C29 0006 0034      		cmpi.b	#6,$34(a1)
   34122/   1AACE : 6610                		bne.s	loc_1A850
   34123/   1AAD0 : 10BC 003F           		move.b	#$3F,(a0)
   34124/   1AAD4 : 117C 0000 0024      		move.b	#0,$24(a0)
   34125/   1AADA : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   34126/   1AAE0 :                     ; ===========================================================================
   34127/   1AAE0 :                     
   34128/   1AAE0 :                     loc_1A850:
   34129/   1AAE0 : 117C 0000 001C      		move.b	#0,$1C(a0)
   34130/   1AAE6 : 4A28 0029           		tst.b	$29(a0)
   34131/   1AAEA : 6710                		beq.s	loc_1A86C
   34132/   1AAEC : 5428 0024           		addq.b	#2,$24(a0)
   34133/   1AAF0 : 117C 0001 001C      		move.b	#1,$1C(a0)
   34134/   1AAF6 : 117C 003E 0028      		move.b	#$3E,$28(a0)
   34135/   1AAFC :                     
   34136/   1AAFC :                     loc_1A86C:
   34137/   1AAFC : 323C 0013           		move.w	#$13,d1
   34138/   1AB00 : 343C 0008           		move.w	#8,d2
   34139/   1AB04 : 363C 0011           		move.w	#$11,d3
   34140/   1AB08 : 3828 0008           		move.w	8(a0),d4
   34141/   1AB0C : 4EB9 0000 FAE6      		jsr	(SolidObject).l
   34142/   1AB12 : 3038 D008           		move.w	($FFFFD008).w,d0
   34143/   1AB16 : 9068 0008           		sub.w	8(a0),d0
   34144/   1AB1A : 6B0E                		bmi.s	loc_1A89A
   34145/   1AB1C : 0440 0140           		subi.w	#$140,d0
   34146/   1AB20 : 6B08                		bmi.s	loc_1A89A
   34147/   1AB22 : 4A28 0001           		tst.b	1(a0)
   34148/   1AB26 : 6A00 FBB0           		bpl.w	Obj84_Delete
   34149/   1AB2A :                     
   34150/   1AB2A :                     loc_1A89A:
   34151/   1AB2A : 43FA 01A4           		lea	Ani_obj86(pc),a1
   34152/   1AB2E : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   34153/   1AB34 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   34154/   1AB3A :                     ; ===========================================================================
   34155/   1AB3A :                     
   34156/   1AB3A :                     Obj86_MakeBalls:			; XREF: Obj86_Index
   34157/   1AB3A : 4A28 0029           		tst.b	$29(a0)
   34158/   1AB3E : 6700 00A4           		beq.w	loc_1A954
   34159/   1AB42 : 4228 0029           		clr.b	$29(a0)
   34160/   1AB46 : D068 0030           		add.w	$30(a0),d0
   34161/   1AB4A : 0240 001E           		andi.w	#$1E,d0
   34162/   1AB4E : D4C0                		adda.w	d0,a2
   34163/   1AB50 : 5868 0030           		addq.w	#4,$30(a0)
   34164/   1AB54 : 4268 0032           		clr.w	$32(a0)
   34165/   1AB58 : 7403                		moveq	#3,d2
   34166/   1AB5A :                     
   34167/   1AB5A :                     Obj86_Loop:
   34168/   1AB5A : 4EB9 0000 DBAC      		jsr	(SingleObjLoad2).l
   34169/   1AB60 : 6600 0082           		bne.w	loc_1A954
   34170/   1AB64 : 12BC 0086           		move.b	#$86,(a1)
   34171/   1AB68 : 3368 0008 0008      		move.w	8(a0),8(a1)
   34172/   1AB6E : 337C 053C 000C      		move.w	#$53C,$C(a1)
   34173/   1AB74 : 137C 0008 0024      		move.b	#8,$24(a1)
   34174/   1AB7A : 337C 2300 0002      		move.w	#$2300,2(a1)
   34175/   1AB80 : 237C 0001 AD36 0004 		move.l	#Map_obj86a,4(a1)
   34176/   1AB88 : 137C 000C 0016      		move.b	#$C,$16(a1)
   34177/   1AB8E : 137C 000C 0017      		move.b	#$C,$17(a1)
   34178/   1AB94 : 137C 0000 0020      		move.b	#0,$20(a1)
   34179/   1AB9A : 137C 0003 0018      		move.b	#3,$18(a1)
   34180/   1ABA0 : 337C 003E 0028      		move.w	#$3E,$28(a1)
   34181/   1ABA6 : 137C 0004 0001      		move.b	#4,1(a1)
   34182/   1ABAC : 08E9 0007 0001      		bset	#7,1(a1)
   34183/   1ABB2 : 2348 0034           		move.l	a0,$34(a1)
   34184/   1ABB6 : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   34185/   1ABBC : 3228 0032           		move.w	$32(a0),d1
   34186/   1ABC0 : C3FC FFB1           		muls.w	#-$4F,d1
   34187/   1ABC4 : 0641 2578           		addi.w	#$2578,d1
   34188/   1ABC8 : 0240 001F           		andi.w	#$1F,d0
   34189/   1ABCC : 0440 0010           		subi.w	#$10,d0
   34190/   1ABD0 : D041                		add.w	d1,d0
   34191/   1ABD2 : 3340 0030           		move.w	d0,$30(a1)
   34192/   1ABD6 : 5268 0032           		addq.w	#1,$32(a0)
   34193/   1ABDA : 3168 0032 0038      		move.w	$32(a0),$38(a0)
   34194/   1ABE0 : 51CA FF78           		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
   34195/   1ABE4 :                     
   34196/   1ABE4 :                     loc_1A954:
   34197/   1ABE4 : 4A68 0032           		tst.w	$32(a0)
   34198/   1ABE8 : 6604                		bne.s	loc_1A95E
   34199/   1ABEA : 5428 0024           		addq.b	#2,$24(a0)
   34200/   1ABEE :                     
   34201/   1ABEE :                     loc_1A95E:
   34202/   1ABEE : 6000 FF0C           		bra.w	loc_1A86C
   34203/   1ABF2 :                     ; ===========================================================================
   34204/   1ABF2 :                     
   34205/   1ABF2 :                     loc_1A962:				; XREF: Obj86_Index
   34206/   1ABF2 : 117C 0002 001C      		move.b	#2,$1C(a0)
   34207/   1ABF8 : 4A68 0038           		tst.w	$38(a0)
   34208/   1ABFC : 6610                		bne.s	loc_1A97E
   34209/   1ABFE : 117C 0002 0024      		move.b	#2,$24(a0)
   34210/   1AC04 : 2268 0034           		movea.l	$34(a0),a1
   34211/   1AC08 : 337C FFFF 0032      		move.w	#-1,$32(a1)
   34212/   1AC0E :                     
   34213/   1AC0E :                     loc_1A97E:
   34214/   1AC0E : 6000 FEEC           		bra.w	loc_1A86C
   34215/   1AC12 :                     ; ===========================================================================
   34216/   1AC12 :                     
   34217/   1AC12 :                     loc_1A982:				; XREF: Obj86_Index
   34218/   1AC12 : 7000                		moveq	#0,d0
   34219/   1AC14 : 1028 0025           		move.b	$25(a0),d0
   34220/   1AC18 : 303B 0016           		move.w	Obj86_Index2(pc,d0.w),d0
   34221/   1AC1C : 4EBB 0012           		jsr	Obj86_Index2(pc,d0.w)
   34222/   1AC20 : 43FA 00E4           		lea	Ani_obj86a(pc),a1
   34223/   1AC24 : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   34224/   1AC2A : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   34225/   1AC30 :                     ; ===========================================================================
   34226/   1AC30 : 0006                Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
   34227/   1AC32 : 0020                		dc.w loc_1A9C0-Obj86_Index2
   34228/   1AC34 : 007E                		dc.w loc_1AA1E-Obj86_Index2
   34229/   1AC36 :                     ; ===========================================================================
   34230/   1AC36 :                     
   34231/   1AC36 :                     loc_1A9A6:				; XREF: Obj86_Index2
   34232/   1AC36 : 3028 0030           		move.w	$30(a0),d0
   34233/   1AC3A : 9068 0008           		sub.w	8(a0),d0
   34234/   1AC3E : E940                		asl.w	#4,d0
   34235/   1AC40 : 3140 0010           		move.w	d0,$10(a0)
   34236/   1AC44 : 317C 00B4 0028      		move.w	#$B4,$28(a0)
   34237/   1AC4A : 5428 0025           		addq.b	#2,$25(a0)
   34238/   1AC4E : 4E75                		rts	
   34239/   1AC50 :                     ; ===========================================================================
   34240/   1AC50 :                     
   34241/   1AC50 :                     loc_1A9C0:				; XREF: Obj86_Index2
   34242/   1AC50 : 4A68 0010           		tst.w	$10(a0)
   34243/   1AC54 : 6720                		beq.s	loc_1A9E6
   34244/   1AC56 : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   34245/   1AC5C : 3028 0008           		move.w	8(a0),d0
   34246/   1AC60 : 9068 0030           		sub.w	$30(a0),d0
   34247/   1AC64 : 6410                		bcc.s	loc_1A9E6
   34248/   1AC66 : 4268 0010           		clr.w	$10(a0)
   34249/   1AC6A : D168 0008           		add.w	d0,8(a0)
   34250/   1AC6E : 2268 0034           		movea.l	$34(a0),a1
   34251/   1AC72 : 5369 0032           		subq.w	#1,$32(a1)
   34252/   1AC76 :                     
   34253/   1AC76 :                     loc_1A9E6:
   34254/   1AC76 : 117C 0000 001C      		move.b	#0,$1C(a0)
   34255/   1AC7C : 5368 0028           		subq.w	#1,$28(a0)
   34256/   1AC80 : 662A                		bne.s	locret_1AA1C
   34257/   1AC82 : 5428 0025           		addq.b	#2,$25(a0)
   34258/   1AC86 : 117C 0001 001C      		move.b	#1,$1C(a0)
   34259/   1AC8C : 117C 009A 0020      		move.b	#$9A,$20(a0)
   34260/   1AC92 : 317C 00B4 0028      		move.w	#$B4,$28(a0)
   34261/   1AC98 : 7000                		moveq	#0,d0
   34262/   1AC9A : 3038 D008           		move.w	($FFFFD008).w,d0
   34263/   1AC9E : 9068 0008           		sub.w	8(a0),d0
   34264/   1ACA2 : 3140 0010           		move.w	d0,$10(a0)
   34265/   1ACA6 : 317C 0140 0012      		move.w	#$140,$12(a0)
   34266/   1ACAC :                     
   34267/   1ACAC :                     locret_1AA1C:
   34268/   1ACAC : 4E75                		rts	
   34269/   1ACAE :                     ; ===========================================================================
   34270/   1ACAE :                     
   34271/   1ACAE :                     loc_1AA1E:				; XREF: Obj86_Index2
   34272/   1ACAE : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   34273/   1ACB4 : 0C68 05E0 000C      		cmpi.w	#$5E0,$C(a0)
   34274/   1ACBA : 6408                		bcc.s	loc_1AA34
   34275/   1ACBC : 5368 0028           		subq.w	#1,$28(a0)
   34276/   1ACC0 : 6702                		beq.s	loc_1AA34
   34277/   1ACC2 : 4E75                		rts	
   34278/   1ACC4 :                     ; ===========================================================================
   34279/   1ACC4 :                     
   34280/   1ACC4 :                     loc_1AA34:
   34281/   1ACC4 : 2268 0034           		movea.l	$34(a0),a1
   34282/   1ACC8 : 5369 0038           		subq.w	#1,$38(a1)
   34283/   1ACCC : 6000 FA0A           		bra.w	Obj84_Delete
   34284/   1ACD0 :                     ; ===========================================================================
   34285/   1ACD0 :                     Ani_obj86:
   34286/   1ACD0 :                     		include	"_anim/obj86.asm"
(1)    1/   1ACD0 :                     ; ---------------------------------------------------------------------------
(1)    2/   1ACD0 :                     ; Animation script - energy ball launcher (FZ)
(1)    3/   1ACD0 :                     ; ---------------------------------------------------------------------------
(1)    4/   1ACD0 : 0006                		dc.w byte_1AA46-Ani_obj86
(1)    5/   1ACD2 : 000A                		dc.w byte_1AA4A-Ani_obj86
(1)    6/   1ACD4 : 0010                		dc.w byte_1AA50-Ani_obj86
(1)    7/   1ACD6 : 7E00 FF00           byte_1AA46:	dc.b $7E, 0, $FF, 0
(1)    8/   1ACDA : 0100 0200 03FF      byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
(1)    9/   1ACE0 : 0101 0201 03FF      byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
(1)   10/   1ACE6 : (MACRO)             		align 2
(1)   10/   1ACE6 :  (MACRO-2)                  cnop 0,2
(1)   10/   1ACE6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   34287/   1ACE6 :                     
   34288/   1ACE6 :                     ; ---------------------------------------------------------------------------
   34289/   1ACE6 :                     ; Sprite mappings - energy ball	launcher (FZ)
   34290/   1ACE6 :                     ; ---------------------------------------------------------------------------
   34291/   1ACE6 :                     Map_obj86:
   34292/   1ACE6 :                     		include	"_maps/obj86.asm"
(1)    1/   1ACE6 :                     ; ---------------------------------------------------------------------------
(1)    2/   1ACE6 :                     ; Sprite mappings - energy ball	launcher (FZ)
(1)    3/   1ACE6 :                     ; ---------------------------------------------------------------------------
(1)    4/   1ACE6 : 0008 000E           		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
(1)    5/   1ACEA : 0014 001A           		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
(1)    6/   1ACEE : 01                  byte_1AA5E:	dc.b 1
(1)    7/   1ACEF : F805 006E F8        		dc.b $F8, 5, 0,	$6E, $F8
(1)    8/   1ACF4 : 01                  byte_1AA64:	dc.b 1
(1)    9/   1ACF5 : F805 0076 F8        		dc.b $F8, 5, 0,	$76, $F8
(1)   10/   1ACFA : 01                  byte_1AA6A:	dc.b 1
(1)   11/   1ACFB : F805 0072 F8        		dc.b $F8, 5, 0,	$72, $F8
(1)   12/   1AD00 : 01                  byte_1AA70:	dc.b 1
(1)   13/   1AD01 : F805 1072 F8        		dc.b $F8, 5, $10, $72, $F8
(1)   14/   1AD06 : (MACRO)             		align 2
(1)   14/   1AD06 :  (MACRO-2)                  cnop 0,2
(1)   14/   1AD06 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   34293/   1AD06 :                     
   34294/   1AD06 :                     Ani_obj86a:
   34295/   1AD06 :                     		include	"_anim/obj86a.asm"
(1)    1/   1AD06 :                     ; ---------------------------------------------------------------------------
(1)    2/   1AD06 :                     ; Animation script - energy balls (FZ)
(1)    3/   1AD06 :                     ; ---------------------------------------------------------------------------
(1)    4/   1AD06 : 0004                		dc.w byte_1AA7A-Ani_obj86a
(1)    5/   1AD08 : 0026                		dc.w byte_1AA9C-Ani_obj86a
(1)    6/   1AD0A : 0100 0A08 0A01 0A09 byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
                    0A06 0A07 0A00 0A   
(1)    7/   1AD19 : 080A 010A 090A 060A 		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
                    070A 020A 030A 04   
(1)    8/   1AD28 : 0A05 FF00           		dc.b $A, 5, $FF, 0
(1)    9/   1AD2C : 0006 0501 0507 0501 byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
                    05FF                
(1)   10/   1AD36 : (MACRO)             		align 2
(1)   10/   1AD36 :  (MACRO-2)                  cnop 0,2
(1)   10/   1AD36 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   34296/   1AD36 :                     
   34297/   1AD36 :                     ; ---------------------------------------------------------------------------
   34298/   1AD36 :                     ; Sprite mappings - energy balls (FZ)
   34299/   1AD36 :                     ; ---------------------------------------------------------------------------
   34300/   1AD36 :                     Map_obj86a:
   34301/   1AD36 :                     		include	"_maps/obj86a.asm"
(1)    1/   1AD36 :                     ; ---------------------------------------------------------------------------
(1)    2/   1AD36 :                     ; Sprite mappings - energy balls (FZ)
(1)    3/   1AD36 :                     ; ---------------------------------------------------------------------------
(1)    4/   1AD36 : 0016 0021           		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
(1)    5/   1AD3A : 002C 0037           		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
(1)    6/   1AD3E : 0042 004D           		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
(1)    7/   1AD42 : 0058 005E           		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
(1)    8/   1AD46 : 0064 006F           		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
(1)    9/   1AD4A : 007A                		dc.w byte_1AB20-Map_obj86a
(1)   10/   1AD4C : 02                  byte_1AABC:	dc.b 2
(1)   11/   1AD4D : F00D 007A F0        		dc.b $F0, $D, 0, $7A, $F0
(1)   12/   1AD52 : 000D 187A F0        		dc.b 0,	$D, $18, $7A, $F0
(1)   13/   1AD57 : 02                  byte_1AAC7:	dc.b 2
(1)   14/   1AD58 : F406 0082 F4        		dc.b $F4, 6, 0,	$82, $F4
(1)   15/   1AD5D : F402 1882 04        		dc.b $F4, 2, $18, $82, 4
(1)   16/   1AD62 : 02                  byte_1AAD2:	dc.b 2
(1)   17/   1AD63 : F804 0088 F8        		dc.b $F8, 4, 0,	$88, $F8
(1)   18/   1AD68 : 0004 1088 F8        		dc.b 0,	4, $10,	$88, $F8
(1)   19/   1AD6D : 02                  byte_1AADD:	dc.b 2
(1)   20/   1AD6E : F804 008A F8        		dc.b $F8, 4, 0,	$8A, $F8
(1)   21/   1AD73 : 0004 108A F8        		dc.b 0,	4, $10,	$8A, $F8
(1)   22/   1AD78 : 02                  byte_1AAE8:	dc.b 2
(1)   23/   1AD79 : F804 008C F8        		dc.b $F8, 4, 0,	$8C, $F8
(1)   24/   1AD7E : 0004 108C F8        		dc.b 0,	4, $10,	$8C, $F8
(1)   25/   1AD83 : 02                  byte_1AAF3:	dc.b 2
(1)   26/   1AD84 : F406 008E F4        		dc.b $F4, 6, 0,	$8E, $F4
(1)   27/   1AD89 : F402 188E 04        		dc.b $F4, 2, $18, $8E, 4
(1)   28/   1AD8E : 01                  byte_1AAFE:	dc.b 1
(1)   29/   1AD8F : F805 0094 F8        		dc.b $F8, 5, 0,	$94, $F8
(1)   30/   1AD94 : 01                  byte_1AB04:	dc.b 1
(1)   31/   1AD95 : F805 0098 F8        		dc.b $F8, 5, 0,	$98, $F8
(1)   32/   1AD9A : 02                  byte_1AB0A:	dc.b 2
(1)   33/   1AD9B : F00D 087A F0        		dc.b $F0, $D, 8, $7A, $F0
(1)   34/   1ADA0 : 000D 107A F0        		dc.b 0,	$D, $10, $7A, $F0
(1)   35/   1ADA5 : 02                  byte_1AB15:	dc.b 2
(1)   36/   1ADA6 : F406 1082 F4        		dc.b $F4, 6, $10, $82, $F4
(1)   37/   1ADAB : F402 0882 04        		dc.b $F4, 2, 8,	$82, 4
(1)   38/   1ADB0 : 00                  byte_1AB20:	dc.b 0
(1)   39/   1ADB1 : (MACRO)             		align 2
(1)   39/   1ADB1 :  (MACRO-2)                  cnop 0,2
(1)   39/   1ADB1 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   39/   1ADB1 : =$40                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   39/   1ADB2 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   34302/   1ADB2 :                     
   34303/   1ADB2 :                     ; ===========================================================================
   34304/   1ADB2 :                     ; ---------------------------------------------------------------------------
   34305/   1ADB2 :                     ; Object 3E - prison capsule
   34306/   1ADB2 :                     ; ---------------------------------------------------------------------------
   34307/   1ADB2 :                     
   34308/   1ADB2 :                     Obj3E:					; XREF: Obj_Index
   34309/   1ADB2 : 7000                		moveq	#0,d0
   34310/   1ADB4 : 1028 0024           		move.b	$24(a0),d0
   34311/   1ADB8 : 323B 002E           		move.w	Obj3E_Index(pc,d0.w),d1
   34312/   1ADBC : 4EBB 102A           		jsr	Obj3E_Index(pc,d1.w)
   34313/   1ADC0 : 3028 0008           		move.w	8(a0),d0
   34314/   1ADC4 : 0240 FF80           		andi.w	#$FF80,d0
   34315/   1ADC8 : 3238 F700           		move.w	($FFFFF700).w,d1
   34316/   1ADCC : 0441 0080           		subi.w	#$80,d1
   34317/   1ADD0 : 0241 FF80           		andi.w	#$FF80,d1
   34318/   1ADD4 : 9041                		sub.w	d1,d0
   34319/   1ADD6 : 0C40 0280           		cmpi.w	#$280,d0
   34320/   1ADDA : 6206                		bhi.s	Obj3E_Delete
   34321/   1ADDC : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   34322/   1ADE2 :                     ; ===========================================================================
   34323/   1ADE2 :                     
   34324/   1ADE2 :                     Obj3E_Delete:
   34325/   1ADE2 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   34326/   1ADE8 :                     ; ===========================================================================
   34327/   1ADE8 : 0020                Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
   34328/   1ADEA : 006A                		dc.w Obj3E_BodyMain-Obj3E_Index
   34329/   1ADEC : 00A6                		dc.w Obj3E_Switched-Obj3E_Index
   34330/   1ADEE : 010A                		dc.w Obj3E_Explosion-Obj3E_Index
   34331/   1ADF0 : 010A                		dc.w Obj3E_Explosion-Obj3E_Index
   34332/   1ADF2 : 010A                		dc.w Obj3E_Explosion-Obj3E_Index
   34333/   1ADF4 : 01A2                		dc.w Obj3E_Animals-Obj3E_Index
   34334/   1ADF6 : 01F2                		dc.w Obj3E_EndAct-Obj3E_Index
   34335/   1ADF8 :                     
   34336/   1ADF8 : 0220 0400           Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
   34337/   1ADFC : 040C 0501           		dc.b 4,	$C, 5, 1
   34338/   1AE00 : 0610 0403           		dc.b 6,	$10, 4,	3
   34339/   1AE04 : 0810 0305           		dc.b 8,	$10, 3,	5
   34340/   1AE08 :                     ; ===========================================================================
   34341/   1AE08 :                     
   34342/   1AE08 :                     Obj3E_Main:				; XREF: Obj3E_Index
   34343/   1AE08 : 217C 0001 B004 0004 		move.l	#Map_obj3E,4(a0)
   34344/   1AE10 : 317C 049D 0002      		move.w	#$49D,2(a0)
   34345/   1AE16 : 117C 0004 0001      		move.b	#4,1(a0)
   34346/   1AE1C : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   34347/   1AE22 : 7000                		moveq	#0,d0
   34348/   1AE24 : 1028 0028           		move.b	$28(a0),d0
   34349/   1AE28 : E548                		lsl.w	#2,d0
   34350/   1AE2A : 43FB 00CC           		lea	Obj3E_Var(pc,d0.w),a1
   34351/   1AE2E : 1159 0024           		move.b	(a1)+,$24(a0)
   34352/   1AE32 : 1159 0019           		move.b	(a1)+,$19(a0)
   34353/   1AE36 : 1159 0018           		move.b	(a1)+,$18(a0)
   34354/   1AE3A : 1159 001A           		move.b	(a1)+,$1A(a0)
   34355/   1AE3E : 0C40 0008           		cmpi.w	#8,d0		; is object type number	02?
   34356/   1AE42 : 660C                		bne.s	Obj3E_Not02	; if not, branch
   34357/   1AE44 : 117C 0006 0020      		move.b	#6,$20(a0)
   34358/   1AE4A : 117C 0008 0021      		move.b	#8,$21(a0)
   34359/   1AE50 :                     
   34360/   1AE50 :                     Obj3E_Not02:
   34361/   1AE50 : 4E75                		rts	
   34362/   1AE52 :                     ; ===========================================================================
   34363/   1AE52 :                     
   34364/   1AE52 :                     Obj3E_BodyMain:				; XREF: Obj3E_Index
   34365/   1AE52 : 0C38 0002 F7A7      		cmpi.b	#2,($FFFFF7A7).w
   34366/   1AE58 : 6716                		beq.s	Obj3E_ChkOpened
   34367/   1AE5A : 323C 002B           		move.w	#$2B,d1
   34368/   1AE5E : 343C 0018           		move.w	#$18,d2
   34369/   1AE62 : 363C 0018           		move.w	#$18,d3
   34370/   1AE66 : 3828 0008           		move.w	8(a0),d4
   34371/   1AE6A : 4EF9 0000 FAE6      		jmp	(SolidObject).l
   34372/   1AE70 :                     ; ===========================================================================
   34373/   1AE70 :                     
   34374/   1AE70 :                     Obj3E_ChkOpened:
   34375/   1AE70 : 4A28 0025           		tst.b	$25(a0)		; has the prison been opened?
   34376/   1AE74 : 6710                		beq.s	Obj3E_DoOpen	; if yes, branch
   34377/   1AE76 : 4228 0025           		clr.b	$25(a0)
   34378/   1AE7A : 08B8 0003 D022      		bclr	#3,($FFFFD022).w
   34379/   1AE80 : 08F8 0001 D022      		bset	#1,($FFFFD022).w
   34380/   1AE86 :                     
   34381/   1AE86 :                     Obj3E_DoOpen:
   34382/   1AE86 : 117C 0002 001A      		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
   34383/   1AE8C : 4E75                		rts	
   34384/   1AE8E :                     ; ===========================================================================
   34385/   1AE8E :                     
   34386/   1AE8E :                     Obj3E_Switched:				; XREF: Obj3E_Index
   34387/   1AE8E : 323C 0017           		move.w	#$17,d1
   34388/   1AE92 : 343C 0008           		move.w	#8,d2
   34389/   1AE96 : 363C 0008           		move.w	#8,d3
   34390/   1AE9A : 3828 0008           		move.w	8(a0),d4
   34391/   1AE9E : 4EB9 0000 FAE6      		jsr	(SolidObject).l
   34392/   1AEA4 : 43F9 0001 AFFC      		lea	(Ani_obj3E).l,a1
   34393/   1AEAA : 4EB9 0000 A734      		jsr	(AnimateSprite).l
   34394/   1AEB0 : 3168 0030 000C      		move.w	$30(a0),$C(a0)
   34395/   1AEB6 : 4A28 0025           		tst.b	$25(a0)
   34396/   1AEBA : 6734                		beq.s	locret_1AC60
   34397/   1AEBC : 5068 000C           		addq.w	#8,$C(a0)
   34398/   1AEC0 : 117C 000A 0024      		move.b	#$A,$24(a0)
   34399/   1AEC6 : 317C 003C 001E      		move.w	#$3C,$1E(a0)
   34400/   1AECC : 4238 FE1E           		clr.b	($FFFFFE1E).w	; stop time counter
   34401/   1AED0 : 4238 F7AA           		clr.b	($FFFFF7AA).w	; lock screen position
   34402/   1AED4 : 11FC 0001 F7CC      		move.b	#1,($FFFFF7CC).w ; lock	controls
   34403/   1AEDA : 31FC 0800 F602      		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
   34404/   1AEE0 : 4228 0025           		clr.b	$25(a0)
   34405/   1AEE4 : 08B8 0003 D022      		bclr	#3,($FFFFD022).w
   34406/   1AEEA : 08F8 0001 D022      		bset	#1,($FFFFD022).w
   34407/   1AEF0 :                     
   34408/   1AEF0 :                     locret_1AC60:
   34409/   1AEF0 : 4E75                		rts	
   34410/   1AEF2 :                     ; ===========================================================================
   34411/   1AEF2 :                     
   34412/   1AEF2 :                     Obj3E_Explosion:			; XREF: Obj3E_Index
   34413/   1AEF2 : 7007                		moveq	#7,d0
   34414/   1AEF4 : C038 FE0F           		and.b	($FFFFFE0F).w,d0
   34415/   1AEF8 : 6636                		bne.s	loc_1ACA0
   34416/   1AEFA : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   34417/   1AF00 : 662E                		bne.s	loc_1ACA0
   34418/   1AF02 : (MACRO)             		_move.b	#$3F,0(a1)	; load explosion object
   34418/   1AF02 :  (MACRO-2)                          insn2op move.b, #$3F,0(a1)
   34418/   1AF02 : 137C 003F 0001                              !move.b   #$3F,1+0(a1)
   34418/   1AF07 :                                             !org    *-1
   34418/   1AF07 : 00                                          !dc.b   0
   34419/   1AF08 : 3368 0008 0008      		move.w	8(a0),8(a1)
   34420/   1AF0E : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   34421/   1AF14 : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   34422/   1AF1A : 7200                		moveq	#0,d1
   34423/   1AF1C : 1200                		move.b	d0,d1
   34424/   1AF1E : E409                		lsr.b	#2,d1
   34425/   1AF20 : 0441 0020           		subi.w	#$20,d1
   34426/   1AF24 : D369 0008           		add.w	d1,8(a1)
   34427/   1AF28 : E048                		lsr.w	#8,d0
   34428/   1AF2A : E608                		lsr.b	#3,d0
   34429/   1AF2C : D169 000C           		add.w	d0,$C(a1)
   34430/   1AF30 :                     
   34431/   1AF30 :                     loc_1ACA0:
   34432/   1AF30 : 5368 001E           		subq.w	#1,$1E(a0)
   34433/   1AF34 : 6702                		beq.s	Obj3E_MakeAnimal
   34434/   1AF36 : 4E75                		rts	
   34435/   1AF38 :                     ; ===========================================================================
   34436/   1AF38 :                     
   34437/   1AF38 :                     Obj3E_MakeAnimal:
   34438/   1AF38 : 11FC 0002 F7A7      		move.b	#2,($FFFFF7A7).w
   34439/   1AF3E : 117C 000C 0024      		move.b	#$C,$24(a0)	; replace explosions with animals
   34440/   1AF44 : 117C 0006 001A      		move.b	#6,$1A(a0)
   34441/   1AF4A : 317C 0096 001E      		move.w	#$96,$1E(a0)
   34442/   1AF50 : 0668 0020 000C      		addi.w	#$20,$C(a0)
   34443/   1AF56 : 7C07                		moveq	#7,d6
   34444/   1AF58 : 3A3C 009A           		move.w	#$9A,d5
   34445/   1AF5C : 78E4                		moveq	#-$1C,d4
   34446/   1AF5E :                     
   34447/   1AF5E :                     Obj3E_Loop:
   34448/   1AF5E : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   34449/   1AF64 : 6622                		bne.s	locret_1ACF8
   34450/   1AF66 : (MACRO)             		_move.b	#$28,0(a1)	; load animal object
   34450/   1AF66 :  (MACRO-2)                          insn2op move.b, #$28,0(a1)
   34450/   1AF66 : 137C 0028 0001                              !move.b   #$28,1+0(a1)
   34450/   1AF6B :                                             !org    *-1
   34450/   1AF6B : 00                                          !dc.b   0
   34451/   1AF6C : 3368 0008 0008      		move.w	8(a0),8(a1)
   34452/   1AF72 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   34453/   1AF78 : D969 0008           		add.w	d4,8(a1)
   34454/   1AF7C : 5E44                		addq.w	#7,d4
   34455/   1AF7E : 3345 0036           		move.w	d5,$36(a1)
   34456/   1AF82 : 5145                		subq.w	#8,d5
   34457/   1AF84 : 51CE FFD8           		dbf	d6,Obj3E_Loop	; repeat 7 more	times
   34458/   1AF88 :                     
   34459/   1AF88 :                     locret_1ACF8:
   34460/   1AF88 : 4E75                		rts	
   34461/   1AF8A :                     ; ===========================================================================
   34462/   1AF8A :                     
   34463/   1AF8A :                     Obj3E_Animals:				; XREF: Obj3E_Index
   34464/   1AF8A : 7007                		moveq	#7,d0
   34465/   1AF8C : C038 FE0F           		and.b	($FFFFFE0F).w,d0
   34466/   1AF90 : 6636                		bne.s	loc_1AD38
   34467/   1AF92 : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   34468/   1AF98 : 662E                		bne.s	loc_1AD38
   34469/   1AF9A : (MACRO)             		_move.b	#$28,0(a1)	; load animal object
   34469/   1AF9A :  (MACRO-2)                          insn2op move.b, #$28,0(a1)
   34469/   1AF9A : 137C 0028 0001                              !move.b   #$28,1+0(a1)
   34469/   1AF9F :                                             !org    *-1
   34469/   1AF9F : 00                                          !dc.b   0
   34470/   1AFA0 : 3368 0008 0008      		move.w	8(a0),8(a1)
   34471/   1AFA6 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   34472/   1AFAC : 4EB9 0000 29C4      		jsr	(RandomNumber).l
   34473/   1AFB2 : 0240 001F           		andi.w	#$1F,d0
   34474/   1AFB6 : 5D40                		subq.w	#6,d0
   34475/   1AFB8 : 4A41                		tst.w	d1
   34476/   1AFBA : 6A02                		bpl.s	loc_1AD2E
   34477/   1AFBC : 4440                		neg.w	d0
   34478/   1AFBE :                     
   34479/   1AFBE :                     loc_1AD2E:
   34480/   1AFBE : D169 0008           		add.w	d0,8(a1)
   34481/   1AFC2 : 337C 000C 0036      		move.w	#$C,$36(a1)
   34482/   1AFC8 :                     
   34483/   1AFC8 :                     loc_1AD38:
   34484/   1AFC8 : 5368 001E           		subq.w	#1,$1E(a0)
   34485/   1AFCC : 660A                		bne.s	locret_1AD48
   34486/   1AFCE : 5428 0024           		addq.b	#2,$24(a0)
   34487/   1AFD2 : 317C 00B4 001E      		move.w	#180,$1E(a0)
   34488/   1AFD8 :                     
   34489/   1AFD8 :                     locret_1AD48:
   34490/   1AFD8 : 4E75                		rts	
   34491/   1AFDA :                     ; ===========================================================================
   34492/   1AFDA :                     
   34493/   1AFDA :                     Obj3E_EndAct:				; XREF: Obj3E_Index
   34494/   1AFDA : 703E                		moveq	#$3E,d0
   34495/   1AFDC : 7228                		moveq	#$28,d1
   34496/   1AFDE : 7440                		moveq	#$40,d2
   34497/   1AFE0 : 43F8 D040           		lea	($FFFFD040).w,a1 ; load	object RAM
   34498/   1AFE4 :                     
   34499/   1AFE4 :                     Obj3E_FindObj28:
   34500/   1AFE4 : B211                		cmp.b	(a1),d1		; is object $28	(animal) loaded?
   34501/   1AFE6 : 6712                		beq.s	Obj3E_Obj28Found ; if yes, branch
   34502/   1AFE8 : D2C2                		adda.w	d2,a1		; next object RAM
   34503/   1AFEA : 51C8 FFF8           		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
   34504/   1AFEE :                     
   34505/   1AFEE : 4EB9 0000 ED94      		jsr	(GotThroughAct).l
   34506/   1AFF4 : 4EF9 0000 D74A      		jmp	(DeleteObject).l
   34507/   1AFFA :                     ; ===========================================================================
   34508/   1AFFA :                     
   34509/   1AFFA :                     Obj3E_Obj28Found:
   34510/   1AFFA : 4E75                		rts	
   34511/   1AFFC :                     ; ===========================================================================
   34512/   1AFFC :                     Ani_obj3E:
   34513/   1AFFC :                     		include	"_anim/obj3E.asm"
(1)    1/   1AFFC :                     ; ---------------------------------------------------------------------------
(1)    2/   1AFFC :                     ; Animation script - prison capsule
(1)    3/   1AFFC :                     ; ---------------------------------------------------------------------------
(1)    4/   1AFFC : 0004                		dc.w byte_1AD70-Ani_obj3E
(1)    5/   1AFFE : 0004                		dc.w byte_1AD70-Ani_obj3E
(1)    6/   1B000 : 0201 03FF           byte_1AD70:	dc.b 2,	1, 3, $FF
(1)    7/   1B004 : (MACRO)             		align 2
(1)    7/   1B004 :  (MACRO-2)                  cnop 0,2
(1)    7/   1B004 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   34514/   1B004 :                     
   34515/   1B004 :                     ; ---------------------------------------------------------------------------
   34516/   1B004 :                     ; Sprite mappings - prison capsule
   34517/   1B004 :                     ; ---------------------------------------------------------------------------
   34518/   1B004 :                     Map_obj3E:
   34519/   1B004 :                     		include	"_maps/obj3E.asm"
(1)    1/   1B004 :                     ; ---------------------------------------------------------------------------
(1)    2/   1B004 :                     ; Sprite mappings - prison capsule
(1)    3/   1B004 :                     ; ---------------------------------------------------------------------------
(1)    4/   1B004 : 000E 0032           		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
(1)    5/   1B008 : 0038 0057           		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
(1)    6/   1B00C : 005D 0068           		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
(1)    7/   1B010 : 006E                		dc.w byte_1ADE2-Map_obj3E
(1)    8/   1B012 : 07                  byte_1AD82:	dc.b 7
(1)    9/   1B013 : E00C 2000 F0        		dc.b $E0, $C, $20, 0, $F0
(1)   10/   1B018 : E80D 2004 E0        		dc.b $E8, $D, $20, 4, $E0
(1)   11/   1B01D : E80D 200C 00        		dc.b $E8, $D, $20, $C, 0
(1)   12/   1B022 : F80E 2014 E0        		dc.b $F8, $E, $20, $14,	$E0
(1)   13/   1B027 : F80E 2020 00        		dc.b $F8, $E, $20, $20,	0
(1)   14/   1B02C : 100D 202C E0        		dc.b $10, $D, $20, $2C,	$E0
(1)   15/   1B031 : 100D 2034 00        		dc.b $10, $D, $20, $34,	0
(1)   16/   1B036 : 01                  byte_1ADA6:	dc.b 1
(1)   17/   1B037 : F809 003C F4        		dc.b $F8, 9, 0,	$3C, $F4
(1)   18/   1B03C : 06                  byte_1ADAC:	dc.b 6
(1)   19/   1B03D : 0008 2042 E0        		dc.b 0,	8, $20,	$42, $E0
(1)   20/   1B042 : 080C 2045 E0        		dc.b 8,	$C, $20, $45, $E0
(1)   21/   1B047 : 0004 2049 10        		dc.b 0,	4, $20,	$49, $10
(1)   22/   1B04C : 080C 204B 00        		dc.b 8,	$C, $20, $4B, 0
(1)   23/   1B051 : 100D 202C E0        		dc.b $10, $D, $20, $2C,	$E0
(1)   24/   1B056 : 100D 2034 00        		dc.b $10, $D, $20, $34,	0
(1)   25/   1B05B : 01                  byte_1ADCB:	dc.b 1
(1)   26/   1B05C : F809 004F F4        		dc.b $F8, 9, 0,	$4F, $F4
(1)   27/   1B061 : 02                  byte_1ADD1:	dc.b 2
(1)   28/   1B062 : E80E 2055 F0        		dc.b $E8, $E, $20, $55,	$F0
(1)   29/   1B067 : 000E 2061 F0        		dc.b 0,	$E, $20, $61, $F0
(1)   30/   1B06C : 01                  byte_1ADDC:	dc.b 1
(1)   31/   1B06D : F007 206D F8        		dc.b $F0, 7, $20, $6D, $F8
(1)   32/   1B072 : 00                  byte_1ADE2:	dc.b 0
(1)   33/   1B073 : (MACRO)             		align 2
(1)   33/   1B073 :  (MACRO-2)                  cnop 0,2
(1)   33/   1B073 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   33/   1B073 : =$41                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   33/   1B074 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   34520/   1B074 :                     
   34521/   1B074 :                     ; ---------------------------------------------------------------------------
   34522/   1B074 :                     ; Object touch response	subroutine - $20(a0) in	the object RAM
   34523/   1B074 :                     ; ---------------------------------------------------------------------------
   34524/   1B074 :                     
   34525/   1B074 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34526/   1B074 :                     
   34527/   1B074 :                     
   34528/   1B074 :                     TouchResponse:				; XREF: Obj01
   34529/   1B074 : 4E71                		nop	
   34530/   1B076 : 3428 0008           		move.w	8(a0),d2	; load Sonic"s x-axis value
   34531/   1B07A : 3628 000C           		move.w	$C(a0),d3	; load Sonic"s y-axis value
   34532/   1B07E : 5142                		subq.w	#8,d2
   34533/   1B080 : 7A00                		moveq	#0,d5
   34534/   1B082 : 1A28 0016           		move.b	$16(a0),d5	; load Sonic"s height
   34535/   1B086 : 5705                		subq.b	#3,d5
   34536/   1B088 : 9645                		sub.w	d5,d3
   34537/   1B08A : 0C28 0039 001A      		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
   34538/   1B090 : 6606                		bne.s	Touch_NoDuck	; if not, branch
   34539/   1B092 : 0643 000C           		addi.w	#$C,d3
   34540/   1B096 : 7A0A                		moveq	#$A,d5
   34541/   1B098 :                     
   34542/   1B098 :                     Touch_NoDuck:
   34543/   1B098 : 383C 0010           		move.w	#$10,d4
   34544/   1B09C : DA45                		add.w	d5,d5
   34545/   1B09E : 43F8 D800           		lea	($FFFFD800).w,a1 ; begin checking the object RAM
   34546/   1B0A2 : 3C3C 005F           		move.w	#$5F,d6
   34547/   1B0A6 :                     
   34548/   1B0A6 :                     Touch_Loop:
   34549/   1B0A6 : 4A29 0001           		tst.b	1(a1)
   34550/   1B0AA : 6A06                		bpl.s	Touch_NextObj
   34551/   1B0AC : 1029 0020           		move.b	$20(a1),d0	; load touch response number
   34552/   1B0B0 : 6654                		bne.s	Touch_Height	; if touch response is not 0, branch
   34553/   1B0B2 :                     
   34554/   1B0B2 :                     Touch_NextObj:
   34555/   1B0B2 : 43E9 0040           		lea	$40(a1),a1	; next object RAM
   34556/   1B0B6 : 51CE FFEE           		dbf	d6,Touch_Loop	; repeat $5F more times
   34557/   1B0BA :                     
   34558/   1B0BA : 7000                		moveq	#0,d0
   34559/   1B0BC : 4E75                		rts	
   34560/   1B0BE :                     ; ===========================================================================
   34561/   1B0BE : 1414                Touch_Sizes:	dc.b  $14, $14		; width, height
   34562/   1B0C0 : 0C14                		dc.b   $C, $14
   34563/   1B0C2 : 140C                		dc.b  $14,  $C
   34564/   1B0C4 : 0410                		dc.b	4, $10
   34565/   1B0C6 : 0C12                		dc.b   $C, $12
   34566/   1B0C8 : 1010                		dc.b  $10, $10
   34567/   1B0CA : 0606                		dc.b	6,   6
   34568/   1B0CC : 180C                		dc.b  $18,  $C
   34569/   1B0CE : 0C10                		dc.b   $C, $10
   34570/   1B0D0 : 100C                		dc.b  $10,  $C
   34571/   1B0D2 : 0808                		dc.b	8,   8
   34572/   1B0D4 : 1410                		dc.b  $14, $10
   34573/   1B0D6 : 1408                		dc.b  $14,   8
   34574/   1B0D8 : 0E0E                		dc.b   $E,  $E
   34575/   1B0DA : 1818                		dc.b  $18, $18
   34576/   1B0DC : 2810                		dc.b  $28, $10
   34577/   1B0DE : 1018                		dc.b  $10, $18
   34578/   1B0E0 : 0810                		dc.b	8, $10
   34579/   1B0E2 : 2070                		dc.b  $20, $70
   34580/   1B0E4 : 4020                		dc.b  $40, $20
   34581/   1B0E6 : 8020                		dc.b  $80, $20
   34582/   1B0E8 : 2020                		dc.b  $20, $20
   34583/   1B0EA : 0808                		dc.b	8,   8
   34584/   1B0EC : 0404                		dc.b	4,   4
   34585/   1B0EE : 2008                		dc.b  $20,   8
   34586/   1B0F0 : 0C0C                		dc.b   $C,  $C
   34587/   1B0F2 : 0804                		dc.b	8,   4
   34588/   1B0F4 : 1804                		dc.b  $18,   4
   34589/   1B0F6 : 2804                		dc.b  $28,   4
   34590/   1B0F8 : 0408                		dc.b	4,   8
   34591/   1B0FA : 0418                		dc.b	4, $18
   34592/   1B0FC : 0428                		dc.b	4, $28
   34593/   1B0FE : 0420                		dc.b	4, $20
   34594/   1B100 : 1818                		dc.b  $18, $18
   34595/   1B102 : 0C18                		dc.b   $C, $18
   34596/   1B104 : 4808                		dc.b  $48,   8
   34597/   1B106 :                     ; ===========================================================================
   34598/   1B106 :                     
   34599/   1B106 :                     Touch_Height:				; XREF: TouchResponse
   34600/   1B106 : 0240 003F           		andi.w	#$3F,d0
   34601/   1B10A : D040                		add.w	d0,d0
   34602/   1B10C : 45FB 00AE           		lea	Touch_Sizes-2(pc,d0.w),a2
   34603/   1B110 : 7200                		moveq	#0,d1
   34604/   1B112 : 121A                		move.b	(a2)+,d1
   34605/   1B114 : 3029 0008           		move.w	8(a1),d0
   34606/   1B118 : 9041                		sub.w	d1,d0
   34607/   1B11A : 9042                		sub.w	d2,d0
   34608/   1B11C : 640A                		bcc.s	loc_1AE98
   34609/   1B11E : D241                		add.w	d1,d1
   34610/   1B120 : D041                		add.w	d1,d0
   34611/   1B122 : 650A                		bcs.s	Touch_Width
   34612/   1B124 : 6000 FF8C           		bra.w	Touch_NextObj
   34613/   1B128 :                     ; ===========================================================================
   34614/   1B128 :                     
   34615/   1B128 :                     loc_1AE98:
   34616/   1B128 : B044                		cmp.w	d4,d0
   34617/   1B12A : 6200 FF86           		bhi.w	Touch_NextObj
   34618/   1B12E :                     
   34619/   1B12E :                     Touch_Width:
   34620/   1B12E : 7200                		moveq	#0,d1
   34621/   1B130 : 121A                		move.b	(a2)+,d1
   34622/   1B132 : 3029 000C           		move.w	$C(a1),d0
   34623/   1B136 : 9041                		sub.w	d1,d0
   34624/   1B138 : 9043                		sub.w	d3,d0
   34625/   1B13A : 640A                		bcc.s	loc_1AEB6
   34626/   1B13C : D241                		add.w	d1,d1
   34627/   1B13E : D240                		add.w	d0,d1
   34628/   1B140 : 650A                		bcs.s	Touch_ChkValue
   34629/   1B142 : 6000 FF6E           		bra.w	Touch_NextObj
   34630/   1B146 :                     ; ===========================================================================
   34631/   1B146 :                     
   34632/   1B146 :                     loc_1AEB6:
   34633/   1B146 : B045                		cmp.w	d5,d0
   34634/   1B148 : 6200 FF68           		bhi.w	Touch_NextObj
   34635/   1B14C :                     
   34636/   1B14C :                     Touch_ChkValue:
   34637/   1B14C : 1229 0020           		move.b	$20(a1),d1	; load touch response number
   34638/   1B150 : 0201 00C0           		andi.b	#$C0,d1		; is touch response $40	or higher?
   34639/   1B154 : 6700 006A           		beq.w	Touch_Enemy	; if not, branch
   34640/   1B158 : 0C01 00C0           		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
   34641/   1B15C : 6700 022C           		beq.w	Touch_Special	; if yes, branch
   34642/   1B160 : 4A01                		tst.b	d1		; is touch response $80-$BF ?
   34643/   1B162 : 6B00 0116           		bmi.w	Touch_ChkHurt	; if yes, branch
   34644/   1B166 :                     
   34645/   1B166 :                     ; touch	response is $40-$7F
   34646/   1B166 :                     
   34647/   1B166 : 1029 0020           		move.b	$20(a1),d0
   34648/   1B16A : 0200 003F           		andi.b	#$3F,d0
   34649/   1B16E : 0C00 0006           		cmpi.b	#6,d0		; is touch response $46	?
   34650/   1B172 : 6710                		beq.s	Touch_Monitor	; if yes, branch
   34651/   1B174 : 0C68 005A 0030      		cmpi.w	#$5A,$30(a0)
   34652/   1B17A : 6400 0006           		bcc.w	locret_1AEF2
   34653/   1B17E : 5429 0024           		addq.b	#2,$24(a1)	; advance the object"s routine counter
   34654/   1B182 :                     
   34655/   1B182 :                     locret_1AEF2:
   34656/   1B182 : 4E75                		rts	
   34657/   1B184 :                     ; ===========================================================================
   34658/   1B184 :                     
   34659/   1B184 :                     Touch_Monitor:
   34660/   1B184 : 4A68 0012           		tst.w	$12(a0)		; is Sonic moving upwards?
   34661/   1B188 : 6A24                		bpl.s	loc_1AF1E	; if not, branch
   34662/   1B18A : 3028 000C           		move.w	$C(a0),d0
   34663/   1B18E : 0440 0010           		subi.w	#$10,d0
   34664/   1B192 : B069 000C           		cmp.w	$C(a1),d0
   34665/   1B196 : 6526                		bcs.s	locret_1AF2E
   34666/   1B198 : 4468 0012           		neg.w	$12(a0)		; reverse Sonic"s y-motion
   34667/   1B19C : 337C FE80 0012      		move.w	#-$180,$12(a1)
   34668/   1B1A2 : 4A29 0025           		tst.b	$25(a1)
   34669/   1B1A6 : 6616                		bne.s	locret_1AF2E
   34670/   1B1A8 : 5829 0025           		addq.b	#4,$25(a1)	; advance the monitor"s routine counter
   34671/   1B1AC : 4E75                		rts	
   34672/   1B1AE :                     ; ===========================================================================
   34673/   1B1AE :                     
   34674/   1B1AE :                     loc_1AF1E:
   34675/   1B1AE : 0C28 0002 001C      		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
   34676/   1B1B4 : 6608                		bne.s	locret_1AF2E
   34677/   1B1B6 : 4468 0012           		neg.w	$12(a0)		; reverse Sonic"s y-motion
   34678/   1B1BA : 5429 0024           		addq.b	#2,$24(a1)	; advance the monitor"s routine counter
   34679/   1B1BE :                     
   34680/   1B1BE :                     locret_1AF2E:
   34681/   1B1BE : 4E75                		rts	
   34682/   1B1C0 :                     ; ===========================================================================
   34683/   1B1C0 :                     Touch_Enemy:				; XREF: Touch_ChkValue
   34684/   1B1C0 : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; is Sonic invincible?
   34685/   1B1C4 : 6614                		bne.s	loc_1AF40	; if yes, branch
   34686/   1B1C6 : 0C28 001F 001C      		cmpi.b	#$1F,$1C(a0)	; is Sonic Spin Dashing?
   34687/   1B1CC : 6700 000C           		beq.w	loc_1AF40	; if yes, branch
   34688/   1B1D0 : 0C28 0002 001C      		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
   34689/   1B1D6 : 6600 00A2           		bne.w	Touch_ChkHurt	; if not, branch
   34690/   1B1DA :                     
   34691/   1B1DA :                     loc_1AF40:
   34692/   1B1DA : 4A29 0021           		tst.b	$21(a1)
   34693/   1B1DE : 6724                		beq.s	Touch_KillEnemy
   34694/   1B1E0 : 4468 0010           		neg.w	$10(a0)
   34695/   1B1E4 : 4468 0012           		neg.w	$12(a0)
   34696/   1B1E8 : E0E8 0010           		asr	$10(a0)
   34697/   1B1EC : E0E8 0012           		asr	$12(a0)
   34698/   1B1F0 : 137C 0000 0020      		move.b	#0,$20(a1)
   34699/   1B1F6 : 5329 0021           		subq.b	#1,$21(a1)
   34700/   1B1FA : 6606                		bne.s	locret_1AF68
   34701/   1B1FC : 08E9 0007 0022      		bset	#7,$22(a1)
   34702/   1B202 :                     
   34703/   1B202 :                     locret_1AF68:
   34704/   1B202 : 4E75                		rts	
   34705/   1B204 :                     ; ===========================================================================
   34706/   1B204 :                     
   34707/   1B204 :                     Touch_KillEnemy:
   34708/   1B204 : 08E9 0007 0022      		bset	#7,$22(a1)
   34709/   1B20A : 7000                		moveq	#0,d0
   34710/   1B20C : 3038 F7D0           		move.w	($FFFFF7D0).w,d0
   34711/   1B210 : 5478 F7D0           		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
   34712/   1B214 : 0C40 0006           		cmpi.w	#6,d0
   34713/   1B218 : 6502                		bcs.s	loc_1AF82
   34714/   1B21A : 7006                		moveq	#6,d0
   34715/   1B21C :                     
   34716/   1B21C :                     loc_1AF82:
   34717/   1B21C : 3340 003E           		move.w	d0,$3E(a1)
   34718/   1B220 : 303B 004A           		move.w	Enemy_Points(pc,d0.w),d0
   34719/   1B224 : 0C78 0020 F7D0      		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
   34720/   1B22A : 650A                		bcs.s	loc_1AF9C	; if not, branch
   34721/   1B22C : 303C 03E8           		move.w	#1000,d0	; fix bonus to 10000
   34722/   1B230 : 337C 000A 003E      		move.w	#$A,$3E(a1)
   34723/   1B236 :                     
   34724/   1B236 :                     loc_1AF9C:
   34725/   1B236 : 6100 16EA           		bsr.w	AddPoints
   34726/   1B23A : (MACRO)             		_move.b	#$27,0(a1)	; change object	to points
   34726/   1B23A :  (MACRO-2)                          insn2op move.b, #$27,0(a1)
   34726/   1B23A : 137C 0027 0001                              !move.b   #$27,1+0(a1)
   34726/   1B23F :                                             !org    *-1
   34726/   1B23F : 00                                          !dc.b   0
   34727/   1B240 : 137C 0000 0024      		move.b	#0,$24(a1)
   34728/   1B246 : 4A68 0012           		tst.w	$12(a0)
   34729/   1B24A : 6B10                		bmi.s	loc_1AFC2
   34730/   1B24C : 3028 000C           		move.w	$C(a0),d0
   34731/   1B250 : B069 000C           		cmp.w	$C(a1),d0
   34732/   1B254 : 640E                		bcc.s	loc_1AFCA
   34733/   1B256 : 4468 0012           		neg.w	$12(a0)
   34734/   1B25A : 4E75                		rts	
   34735/   1B25C :                     ; ===========================================================================
   34736/   1B25C :                     
   34737/   1B25C :                     loc_1AFC2:
   34738/   1B25C : 0668 0100 0012      		addi.w	#$100,$12(a0)
   34739/   1B262 : 4E75                		rts	
   34740/   1B264 :                     ; ===========================================================================
   34741/   1B264 :                     
   34742/   1B264 :                     loc_1AFCA:
   34743/   1B264 : 0468 0100 0012      		subi.w	#$100,$12(a0)
   34744/   1B26A : 4E75                		rts	
   34745/   1B26C :                     ; ===========================================================================
   34746/   1B26C : 000A 0014 0032 0064 Enemy_Points:	dc.w 10, 20, 50, 100
   34747/   1B274 :                     ; ===========================================================================
   34748/   1B274 :                     
   34749/   1B274 :                     loc_1AFDA:				; XREF: Touch_CatKiller
   34750/   1B274 : 08E9 0007 0022      		bset	#7,$22(a1)
   34751/   1B27A :                     
   34752/   1B27A :                     Touch_ChkHurt:				; XREF: Touch_ChkValue
   34753/   1B27A : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; is Sonic invincible?
   34754/   1B27E : 6704                		beq.s	Touch_Hurt	; if not, branch
   34755/   1B280 :                     
   34756/   1B280 :                     loc_1AFE6:				; XREF: Touch_Hurt
   34757/   1B280 : 70FF                		moveq	#-1,d0
   34758/   1B282 : 4E75                		rts	
   34759/   1B284 :                     ; ===========================================================================
   34760/   1B284 :                     
   34761/   1B284 :                     Touch_Hurt:				; XREF: Touch_ChkHurt
   34762/   1B284 : 4E71                		nop	
   34763/   1B286 : 4A68 0030           		tst.w	$30(a0)
   34764/   1B28A : 66F4                		bne.s	loc_1AFE6
   34765/   1B28C : 2449                		movea.l	a1,a2
   34766/   1B28E :                     
   34767/   1B28E :                     ; End of function TouchResponse
   34768/   1B28E :                     ; continue straight to HurtSonic
   34769/   1B28E :                     
   34770/   1B28E :                     ; ---------------------------------------------------------------------------
   34771/   1B28E :                     ; Hurting Sonic	subroutine
   34772/   1B28E :                     ; ---------------------------------------------------------------------------
   34773/   1B28E :                     
   34774/   1B28E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34775/   1B28E :                     
   34776/   1B28E :                     
   34777/   1B28E :                     HurtSonic:
   34778/   1B28E : 4A38 FE2C           		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
   34779/   1B292 : 6622                		bne.s	Hurt_Shield	; if yes, branch
   34780/   1B294 : 4A78 FE20           		tst.w	($FFFFFE20).w	; does Sonic have any rings?
   34781/   1B298 : 6700 0090           		beq.w	Hurt_NoRings	; if not, branch
   34782/   1B29C : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   34783/   1B2A2 : 6612                		bne.s	Hurt_Shield
   34784/   1B2A4 : (MACRO)             		_move.b	#$37,0(a1)	; load bouncing	multi rings object
   34784/   1B2A4 :  (MACRO-2)                          insn2op move.b, #$37,0(a1)
   34784/   1B2A4 : 137C 0037 0001                              !move.b   #$37,1+0(a1)
   34784/   1B2A9 :                                             !org    *-1
   34784/   1B2A9 : 00                                          !dc.b   0
   34785/   1B2AA : 3368 0008 0008      		move.w	8(a0),8(a1)
   34786/   1B2B0 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   34787/   1B2B6 :                     
   34788/   1B2B6 :                     Hurt_Shield:
   34789/   1B2B6 : 11FC 0000 FE2C      		move.b	#0,($FFFFFE2C).w ; remove shield
   34790/   1B2BC : 117C 0004 0024      		move.b	#4,$24(a0)
   34791/   1B2C2 : 6100 874A           		bsr.w	Sonic_ResetOnFloor
   34792/   1B2C6 : 08E8 0001 0022      		bset	#1,$22(a0)
   34793/   1B2CC : 317C FC00 0012      		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
   34794/   1B2D2 : 317C FE00 0010      		move.w	#-$200,$10(a0)
   34795/   1B2D8 : 0828 0006 0022      		btst	#6,$22(a0)
   34796/   1B2DE : 670C                		beq.s	Hurt_Reverse
   34797/   1B2E0 : 317C FE00 0012      		move.w	#-$200,$12(a0)
   34798/   1B2E6 : 317C FF00 0010      		move.w	#-$100,$10(a0)
   34799/   1B2EC :                     
   34800/   1B2EC :                     Hurt_Reverse:
   34801/   1B2EC : 3028 0008           		move.w	8(a0),d0
   34802/   1B2F0 : B06A 0008           		cmp.w	8(a2),d0
   34803/   1B2F4 : 6504                		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
   34804/   1B2F6 : 4468 0010           		neg.w	$10(a0)		; if Sonic is right of the object, reverse
   34805/   1B2FA :                     
   34806/   1B2FA :                     Hurt_ChkSpikes:
   34807/   1B2FA : 317C 0000 0014      		move.w	#0,$14(a0)
   34808/   1B300 : 117C 001A 001C      		move.b	#$1A,$1C(a0)
   34809/   1B306 : 317C 0078 0030      		move.w	#$78,$30(a0)
   34810/   1B30C : 303C 00A3           		move.w	#$A3,d0		; load normal damage sound
   34811/   1B310 : 0C12 0036           		cmpi.b	#$36,(a2)	; was damage caused by spikes?
   34812/   1B314 : 660A                		bne.s	Hurt_Sound	; if not, branch
   34813/   1B316 : 0C12 0016           		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
   34814/   1B31A : 6604                		bne.s	Hurt_Sound	; if not, branch
   34815/   1B31C : 303C 00A6           		move.w	#$A6,d0		; load spikes damage sound
   34816/   1B320 :                     
   34817/   1B320 :                     Hurt_Sound:
   34818/   1B320 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l
   34819/   1B326 : 70FF                		moveq	#-1,d0
   34820/   1B328 : 4E75                		rts	
   34821/   1B32A :                     ; ===========================================================================
   34822/   1B32A :                     
   34823/   1B32A :                     Hurt_NoRings:
   34824/   1B32A : 4A78 FFFA           		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
   34825/   1B32E : 6600 FF86           		bne.w	Hurt_Shield	; if yes, branch
   34826/   1B332 :                     ; End of function HurtSonic
   34827/   1B332 :                     
   34828/   1B332 :                     ; ---------------------------------------------------------------------------
   34829/   1B332 :                     ; Subroutine to	kill Sonic
   34830/   1B332 :                     ; ---------------------------------------------------------------------------
   34831/   1B332 :                     
   34832/   1B332 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34833/   1B332 :                     
   34834/   1B332 :                     
   34835/   1B332 :                     KillSonic:
   34836/   1B332 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	active?
   34837/   1B336 : 664E                		bne.s	Kill_NoDeath	; if yes, branch
   34838/   1B338 : 11FC 0000 FE2D      		move.b	#0,($FFFFFE2D).w ; remove invincibility
   34839/   1B33E : 117C 0006 0024      		move.b	#6,$24(a0)
   34840/   1B344 : 6100 86C8           		bsr.w	Sonic_ResetOnFloor
   34841/   1B348 : 08E8 0001 0022      		bset	#1,$22(a0)
   34842/   1B34E : 317C F900 0012      		move.w	#-$700,$12(a0)
   34843/   1B354 : 317C 0000 0010      		move.w	#0,$10(a0)
   34844/   1B35A : 317C 0000 0014      		move.w	#0,$14(a0)
   34845/   1B360 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   34846/   1B366 : 117C 0018 001C      		move.b	#$18,$1C(a0)
   34847/   1B36C : 08E8 0007 0002      		bset	#7,2(a0)
   34848/   1B372 : 303C 00A3           		move.w	#$A3,d0		; play normal death sound
   34849/   1B376 : 0C12 0036           		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
   34850/   1B37A : 6604                		bne.s	Kill_Sound
   34851/   1B37C : 303C 00A6           		move.w	#$A6,d0		; play spikes death sound
   34852/   1B380 :                     
   34853/   1B380 :                     Kill_Sound:
   34854/   1B380 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l
   34855/   1B386 :                     
   34856/   1B386 :                     Kill_NoDeath:
   34857/   1B386 : 70FF                		moveq	#-1,d0
   34858/   1B388 : 4E75                		rts	
   34859/   1B38A :                     ; End of function KillSonic
   34860/   1B38A :                     
   34861/   1B38A :                     
   34862/   1B38A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34863/   1B38A :                     
   34864/   1B38A :                     
   34865/   1B38A :                     Touch_Special:				; XREF: Touch_ChkValue
   34866/   1B38A : 1229 0020           		move.b	$20(a1),d1
   34867/   1B38E : 0201 003F           		andi.b	#$3F,d1
   34868/   1B392 : 0C01 000B           		cmpi.b	#$B,d1		; is touch response $CB	?
   34869/   1B396 : 6714                		beq.s	Touch_CatKiller	; if yes, branch
   34870/   1B398 : 0C01 000C           		cmpi.b	#$C,d1		; is touch response $CC	?
   34871/   1B39C : 6712                		beq.s	Touch_Yadrin	; if yes, branch
   34872/   1B39E : 0C01 0017           		cmpi.b	#$17,d1		; is touch response $D7	?
   34873/   1B3A2 : 673E                		beq.s	Touch_D7orE1	; if yes, branch
   34874/   1B3A4 : 0C01 0021           		cmpi.b	#$21,d1		; is touch response $E1	?
   34875/   1B3A8 : 6738                		beq.s	Touch_D7orE1	; if yes, branch
   34876/   1B3AA : 4E75                		rts	
   34877/   1B3AC :                     ; ===========================================================================
   34878/   1B3AC :                     
   34879/   1B3AC :                     Touch_CatKiller:			; XREF: Touch_Special
   34880/   1B3AC : 6000 FEC6           		bra.w	loc_1AFDA
   34881/   1B3B0 :                     ; ===========================================================================
   34882/   1B3B0 :                     
   34883/   1B3B0 :                     Touch_Yadrin:				; XREF: Touch_Special
   34884/   1B3B0 : 9A40                		sub.w	d0,d5
   34885/   1B3B2 : 0C45 0008           		cmpi.w	#8,d5
   34886/   1B3B6 : 6426                		bcc.s	loc_1B144
   34887/   1B3B8 : 3029 0008           		move.w	8(a1),d0
   34888/   1B3BC : 5940                		subq.w	#4,d0
   34889/   1B3BE : 0829 0000 0022      		btst	#0,$22(a1)
   34890/   1B3C4 : 6704                		beq.s	loc_1B130
   34891/   1B3C6 : 0440 0010           		subi.w	#$10,d0
   34892/   1B3CA :                     
   34893/   1B3CA :                     loc_1B130:
   34894/   1B3CA : 9042                		sub.w	d2,d0
   34895/   1B3CC : 6408                		bcc.s	loc_1B13C
   34896/   1B3CE : 0640 0018           		addi.w	#$18,d0
   34897/   1B3D2 : 6506                		bcs.s	loc_1B140
   34898/   1B3D4 : 6008                		bra.s	loc_1B144
   34899/   1B3D6 :                     ; ===========================================================================
   34900/   1B3D6 :                     
   34901/   1B3D6 :                     loc_1B13C:
   34902/   1B3D6 : B044                		cmp.w	d4,d0
   34903/   1B3D8 : 6204                		bhi.s	loc_1B144
   34904/   1B3DA :                     
   34905/   1B3DA :                     loc_1B140:
   34906/   1B3DA : 6000 FE9E           		bra.w	Touch_ChkHurt
   34907/   1B3DE :                     ; ===========================================================================
   34908/   1B3DE :                     
   34909/   1B3DE :                     loc_1B144:
   34910/   1B3DE : 6000 FDE0           		bra.w	Touch_Enemy
   34911/   1B3E2 :                     ; ===========================================================================
   34912/   1B3E2 :                     
   34913/   1B3E2 :                     Touch_D7orE1:				; XREF: Touch_Special
   34914/   1B3E2 : 5229 0021           		addq.b	#1,$21(a1)
   34915/   1B3E6 : 4E75                		rts	
   34916/   1B3E8 :                     ; End of function Touch_Special
   34917/   1B3E8 :                     
   34918/   1B3E8 :                     ; ---------------------------------------------------------------------------
   34919/   1B3E8 :                     ; Subroutine to	show the special stage layout
   34920/   1B3E8 :                     ; ---------------------------------------------------------------------------
   34921/   1B3E8 :                     
   34922/   1B3E8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34923/   1B3E8 :                     
   34924/   1B3E8 :                     
   34925/   1B3E8 :                     SS_ShowLayout:				; XREF: SpecialStage
   34926/   1B3E8 : 6100 0140           		bsr.w	SS_AniWallsRings
   34927/   1B3EC : 6100 037C           		bsr.w	SS_AniItems
   34928/   1B3F0 : 3F05                		move.w	d5,-(sp)
   34929/   1B3F2 : 43F8 8000           		lea	($FFFF8000).w,a1
   34930/   1B3F6 : 1038 F780           		move.b	($FFFFF780).w,d0
   34931/   1B3FA : 0200 00FC           		andi.b	#$FC,d0
   34932/   1B3FE : 4EB9 0000 29EA      		jsr	(CalcSine).l
   34933/   1B404 : 3800                		move.w	d0,d4
   34934/   1B406 : 3A01                		move.w	d1,d5
   34935/   1B408 : C9FC 0018           		muls.w	#$18,d4
   34936/   1B40C : CBFC 0018           		muls.w	#$18,d5
   34937/   1B410 : 7400                		moveq	#0,d2
   34938/   1B412 : 3438 F700           		move.w	($FFFFF700).w,d2
   34939/   1B416 : 84FC 0018           		divu.w	#$18,d2
   34940/   1B41A : 4842                		swap	d2
   34941/   1B41C : 4442                		neg.w	d2
   34942/   1B41E : 0642 FF4C           		addi.w	#-$B4,d2
   34943/   1B422 : 7600                		moveq	#0,d3
   34944/   1B424 : 3638 F704           		move.w	($FFFFF704).w,d3
   34945/   1B428 : 86FC 0018           		divu.w	#$18,d3
   34946/   1B42C : 4843                		swap	d3
   34947/   1B42E : 4443                		neg.w	d3
   34948/   1B430 : 0643 FF4C           		addi.w	#-$B4,d3
   34949/   1B434 : 3E3C 000F           		move.w	#$F,d7
   34950/   1B438 :                     
   34951/   1B438 :                     loc_1B19E:
   34952/   1B438 : 48A7 E000           		movem.w	d0-d2,-(sp)
   34953/   1B43C : 48A7 C000           		movem.w	d0-d1,-(sp)
   34954/   1B440 : 4440                		neg.w	d0
   34955/   1B442 : C3C2                		muls.w	d2,d1
   34956/   1B444 : C1C3                		muls.w	d3,d0
   34957/   1B446 : 2C00                		move.l	d0,d6
   34958/   1B448 : DC81                		add.l	d1,d6
   34959/   1B44A : 4C9F 0003           		movem.w	(sp)+,d0-d1
   34960/   1B44E : C1C2                		muls.w	d2,d0
   34961/   1B450 : C3C3                		muls.w	d3,d1
   34962/   1B452 : D280                		add.l	d0,d1
   34963/   1B454 : 2406                		move.l	d6,d2
   34964/   1B456 : 3C3C 000F           		move.w	#$F,d6
   34965/   1B45A :                     
   34966/   1B45A :                     loc_1B1C0:
   34967/   1B45A : 2002                		move.l	d2,d0
   34968/   1B45C : E080                		asr.l	#8,d0
   34969/   1B45E : 32C0                		move.w	d0,(a1)+
   34970/   1B460 : 2001                		move.l	d1,d0
   34971/   1B462 : E080                		asr.l	#8,d0
   34972/   1B464 : 32C0                		move.w	d0,(a1)+
   34973/   1B466 : D485                		add.l	d5,d2
   34974/   1B468 : D284                		add.l	d4,d1
   34975/   1B46A : 51CE FFEE           		dbf	d6,loc_1B1C0
   34976/   1B46E :                     
   34977/   1B46E : 4C9F 0007           		movem.w	(sp)+,d0-d2
   34978/   1B472 : 0643 0018           		addi.w	#$18,d3
   34979/   1B476 : 51CF FFC0           		dbf	d7,loc_1B19E
   34980/   1B47A :                     
   34981/   1B47A : 3A1F                		move.w	(sp)+,d5
   34982/   1B47C : 41F9 00FF 0000      		lea	($FF0000).l,a0
   34983/   1B482 : 7000                		moveq	#0,d0
   34984/   1B484 : 3038 F704           		move.w	($FFFFF704).w,d0
   34985/   1B488 : 80FC 0018           		divu.w	#$18,d0
   34986/   1B48C : C0FC 0080           		mulu.w	#$80,d0
   34987/   1B490 : D1C0                		adda.l	d0,a0
   34988/   1B492 : 7000                		moveq	#0,d0
   34989/   1B494 : 3038 F700           		move.w	($FFFFF700).w,d0
   34990/   1B498 : 80FC 0018           		divu.w	#$18,d0
   34991/   1B49C : D0C0                		adda.w	d0,a0
   34992/   1B49E : 49F8 8000           		lea	($FFFF8000).w,a4
   34993/   1B4A2 : 3E3C 000F           		move.w	#$F,d7
   34994/   1B4A6 :                     
   34995/   1B4A6 :                     loc_1B20C:
   34996/   1B4A6 : 3C3C 000F           		move.w	#$F,d6
   34997/   1B4AA :                     
   34998/   1B4AA :                     loc_1B210:
   34999/   1B4AA : 7000                		moveq	#0,d0
   35000/   1B4AC : 1018                		move.b	(a0)+,d0
   35001/   1B4AE : 6752                		beq.s	loc_1B268
   35002/   1B4B0 : 0C00 004E           		cmpi.b	#$4E,d0
   35003/   1B4B4 : 624C                		bhi.s	loc_1B268
   35004/   1B4B6 : 3614                		move.w	(a4),d3
   35005/   1B4B8 : 0643 0120           		addi.w	#$120,d3
   35006/   1B4BC : 0C43 0070           		cmpi.w	#$70,d3
   35007/   1B4C0 : 6540                		bcs.s	loc_1B268
   35008/   1B4C2 : 0C43 01D0           		cmpi.w	#$1D0,d3
   35009/   1B4C6 : 643A                		bcc.s	loc_1B268
   35010/   1B4C8 : 342C 0002           		move.w	2(a4),d2
   35011/   1B4CC : 0642 00F0           		addi.w	#$F0,d2
   35012/   1B4D0 : 0C42 0070           		cmpi.w	#$70,d2
   35013/   1B4D4 : 652C                		bcs.s	loc_1B268
   35014/   1B4D6 : 0C42 0170           		cmpi.w	#$170,d2
   35015/   1B4DA : 6426                		bcc.s	loc_1B268
   35016/   1B4DC : 4BF9 00FF 4000      		lea	($FF4000).l,a5
   35017/   1B4E2 : E748                		lsl.w	#3,d0
   35018/   1B4E4 : 4BF5 0000           		lea	(a5,d0.w),a5
   35019/   1B4E8 : 225D                		movea.l	(a5)+,a1
   35020/   1B4EA : 321D                		move.w	(a5)+,d1
   35021/   1B4EC : D241                		add.w	d1,d1
   35022/   1B4EE : D2F1 1000           		adda.w	(a1,d1.w),a1
   35023/   1B4F2 : 365D                		movea.w	(a5)+,a3
   35024/   1B4F4 : 7200                		moveq	#0,d1
   35025/   1B4F6 : 1219                		move.b	(a1)+,d1
   35026/   1B4F8 : 5301                		subq.b	#1,d1
   35027/   1B4FA : 6B06                		bmi.s	loc_1B268
   35028/   1B4FC : 4EB9 0000 D86C      		jsr	(sub_D762).l
   35029/   1B502 :                     
   35030/   1B502 :                     loc_1B268:
   35031/   1B502 : 584C                		addq.w	#4,a4
   35032/   1B504 : 51CE FFA4           		dbf	d6,loc_1B210
   35033/   1B508 :                     
   35034/   1B508 : 41E8 0070           		lea	$70(a0),a0
   35035/   1B50C : 51CF FF98           		dbf	d7,loc_1B20C
   35036/   1B510 :                     
   35037/   1B510 : 11C5 F62C           		move.b	d5,($FFFFF62C).w
   35038/   1B514 : 0C05 0050           		cmpi.b	#$50,d5
   35039/   1B518 : 6708                		beq.s	loc_1B288
   35040/   1B51A : 24BC 0000 0000      		move.l	#0,(a2)
   35041/   1B520 : 4E75                		rts	
   35042/   1B522 :                     ; ===========================================================================
   35043/   1B522 :                     
   35044/   1B522 :                     loc_1B288:
   35045/   1B522 : 157C 0000 FFFB      		move.b	#0,-5(a2)
   35046/   1B528 : 4E75                		rts	
   35047/   1B52A :                     ; End of function SS_ShowLayout
   35048/   1B52A :                     
   35049/   1B52A :                     ; ---------------------------------------------------------------------------
   35050/   1B52A :                     ; Subroutine to	animate	walls and rings	in the special stage
   35051/   1B52A :                     ; ---------------------------------------------------------------------------
   35052/   1B52A :                     
   35053/   1B52A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35054/   1B52A :                     
   35055/   1B52A :                     
   35056/   1B52A :                     SS_AniWallsRings:			; XREF: SS_ShowLayout
   35057/   1B52A : 43F9 00FF 400C      		lea	($FF400C).l,a1
   35058/   1B530 : 7000                		moveq	#0,d0
   35059/   1B532 : 1038 F780           		move.b	($FFFFF780).w,d0
   35060/   1B536 : E408                		lsr.b	#2,d0
   35061/   1B538 : 0240 000F           		andi.w	#$F,d0
   35062/   1B53C : 7223                		moveq	#$23,d1
   35063/   1B53E :                     
   35064/   1B53E :                     loc_1B2A4:
   35065/   1B53E : 3280                		move.w	d0,(a1)
   35066/   1B540 : 5049                		addq.w	#8,a1
   35067/   1B542 : 51C9 FFFA           		dbf	d1,loc_1B2A4
   35068/   1B546 :                     
   35069/   1B546 : 43F9 00FF 4005      		lea	($FF4005).l,a1
   35070/   1B54C : 5338 FEC2           		subq.b	#1,($FFFFFEC2).w
   35071/   1B550 : 6A10                		bpl.s	loc_1B2C8
   35072/   1B552 : 11FC 0007 FEC2      		move.b	#7,($FFFFFEC2).w
   35073/   1B558 : 5238 FEC3           		addq.b	#1,($FFFFFEC3).w
   35074/   1B55C : 0238 0003 FEC3      		andi.b	#3,($FFFFFEC3).w
   35075/   1B562 :                     
   35076/   1B562 :                     loc_1B2C8:
   35077/   1B562 : 1378 FEC3 01D0      		move.b	($FFFFFEC3).w,$1D0(a1)
   35078/   1B568 : 5338 FEC4           		subq.b	#1,($FFFFFEC4).w
   35079/   1B56C : 6A10                		bpl.s	loc_1B2E4
   35080/   1B56E : 11FC 0007 FEC4      		move.b	#7,($FFFFFEC4).w
   35081/   1B574 : 5238 FEC5           		addq.b	#1,($FFFFFEC5).w
   35082/   1B578 : 0238 0001 FEC5      		andi.b	#1,($FFFFFEC5).w
   35083/   1B57E :                     
   35084/   1B57E :                     loc_1B2E4:
   35085/   1B57E : 1038 FEC5           		move.b	($FFFFFEC5).w,d0
   35086/   1B582 : 1340 0138           		move.b	d0,$138(a1)
   35087/   1B586 : 1340 0160           		move.b	d0,$160(a1)
   35088/   1B58A : 1340 0148           		move.b	d0,$148(a1)
   35089/   1B58E : 1340 0150           		move.b	d0,$150(a1)
   35090/   1B592 : 1340 01D8           		move.b	d0,$1D8(a1)
   35091/   1B596 : 1340 01E0           		move.b	d0,$1E0(a1)
   35092/   1B59A : 1340 01E8           		move.b	d0,$1E8(a1)
   35093/   1B59E : 1340 01F0           		move.b	d0,$1F0(a1)
   35094/   1B5A2 : 1340 01F8           		move.b	d0,$1F8(a1)
   35095/   1B5A6 : 1340 0200           		move.b	d0,$200(a1)
   35096/   1B5AA : 5338 FEC6           		subq.b	#1,($FFFFFEC6).w
   35097/   1B5AE : 6A10                		bpl.s	loc_1B326
   35098/   1B5B0 : 11FC 0004 FEC6      		move.b	#4,($FFFFFEC6).w
   35099/   1B5B6 : 5238 FEC7           		addq.b	#1,($FFFFFEC7).w
   35100/   1B5BA : 0238 0003 FEC7      		andi.b	#3,($FFFFFEC7).w
   35101/   1B5C0 :                     
   35102/   1B5C0 :                     loc_1B326:
   35103/   1B5C0 : 1038 FEC7           		move.b	($FFFFFEC7).w,d0
   35104/   1B5C4 : 1340 0168           		move.b	d0,$168(a1)
   35105/   1B5C8 : 1340 0170           		move.b	d0,$170(a1)
   35106/   1B5CC : 1340 0178           		move.b	d0,$178(a1)
   35107/   1B5D0 : 1340 0180           		move.b	d0,$180(a1)
   35108/   1B5D4 : 5338 FEC0           		subq.b	#1,($FFFFFEC0).w
   35109/   1B5D8 : 6A10                		bpl.s	loc_1B350
   35110/   1B5DA : 11FC 0007 FEC0      		move.b	#7,($FFFFFEC0).w
   35111/   1B5E0 : 5338 FEC1           		subq.b	#1,($FFFFFEC1).w
   35112/   1B5E4 : 0238 0007 FEC1      		andi.b	#7,($FFFFFEC1).w
   35113/   1B5EA :                     
   35114/   1B5EA :                     loc_1B350:
   35115/   1B5EA : 43F9 00FF 4016      		lea	($FF4016).l,a1
   35116/   1B5F0 : 41F9 0001 B6D4      		lea	(SS_WaRiVramSet).l,a0
   35117/   1B5F6 : 7000                		moveq	#0,d0
   35118/   1B5F8 : 1038 FEC1           		move.b	($FFFFFEC1).w,d0
   35119/   1B5FC : D040                		add.w	d0,d0
   35120/   1B5FE : 41F0 0000           		lea	(a0,d0.w),a0
   35121/   1B602 : 3290                		move.w	(a0),(a1)
   35122/   1B604 : 3368 0002 0008      		move.w	2(a0),8(a1)
   35123/   1B60A : 3368 0004 0010      		move.w	4(a0),$10(a1)
   35124/   1B610 : 3368 0006 0018      		move.w	6(a0),$18(a1)
   35125/   1B616 : 3368 0008 0020      		move.w	8(a0),$20(a1)
   35126/   1B61C : 3368 000A 0028      		move.w	$A(a0),$28(a1)
   35127/   1B622 : 3368 000C 0030      		move.w	$C(a0),$30(a1)
   35128/   1B628 : 3368 000E 0038      		move.w	$E(a0),$38(a1)
   35129/   1B62E : D0FC 0020           		adda.w	#$20,a0
   35130/   1B632 : D2FC 0048           		adda.w	#$48,a1
   35131/   1B636 : 3290                		move.w	(a0),(a1)
   35132/   1B638 : 3368 0002 0008      		move.w	2(a0),8(a1)
   35133/   1B63E : 3368 0004 0010      		move.w	4(a0),$10(a1)
   35134/   1B644 : 3368 0006 0018      		move.w	6(a0),$18(a1)
   35135/   1B64A : 3368 0008 0020      		move.w	8(a0),$20(a1)
   35136/   1B650 : 3368 000A 0028      		move.w	$A(a0),$28(a1)
   35137/   1B656 : 3368 000C 0030      		move.w	$C(a0),$30(a1)
   35138/   1B65C : 3368 000E 0038      		move.w	$E(a0),$38(a1)
   35139/   1B662 : D0FC 0020           		adda.w	#$20,a0
   35140/   1B666 : D2FC 0048           		adda.w	#$48,a1
   35141/   1B66A : 3290                		move.w	(a0),(a1)
   35142/   1B66C : 3368 0002 0008      		move.w	2(a0),8(a1)
   35143/   1B672 : 3368 0004 0010      		move.w	4(a0),$10(a1)
   35144/   1B678 : 3368 0006 0018      		move.w	6(a0),$18(a1)
   35145/   1B67E : 3368 0008 0020      		move.w	8(a0),$20(a1)
   35146/   1B684 : 3368 000A 0028      		move.w	$A(a0),$28(a1)
   35147/   1B68A : 3368 000C 0030      		move.w	$C(a0),$30(a1)
   35148/   1B690 : 3368 000E 0038      		move.w	$E(a0),$38(a1)
   35149/   1B696 : D0FC 0020           		adda.w	#$20,a0
   35150/   1B69A : D2FC 0048           		adda.w	#$48,a1
   35151/   1B69E : 3290                		move.w	(a0),(a1)
   35152/   1B6A0 : 3368 0002 0008      		move.w	2(a0),8(a1)
   35153/   1B6A6 : 3368 0004 0010      		move.w	4(a0),$10(a1)
   35154/   1B6AC : 3368 0006 0018      		move.w	6(a0),$18(a1)
   35155/   1B6B2 : 3368 0008 0020      		move.w	8(a0),$20(a1)
   35156/   1B6B8 : 3368 000A 0028      		move.w	$A(a0),$28(a1)
   35157/   1B6BE : 3368 000C 0030      		move.w	$C(a0),$30(a1)
   35158/   1B6C4 : 3368 000E 0038      		move.w	$E(a0),$38(a1)
   35159/   1B6CA : D0FC 0020           		adda.w	#$20,a0
   35160/   1B6CE : D2FC 0048           		adda.w	#$48,a1
   35161/   1B6D2 : 4E75                		rts	
   35162/   1B6D4 :                     ; End of function SS_AniWallsRings
   35163/   1B6D4 :                     
   35164/   1B6D4 :                     ; ===========================================================================
   35165/   1B6D4 : 0142 6142 0142 0142 SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
                    0142 0142 0142 6142 
   35166/   1B6E4 : 0142 6142 0142 0142 		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
                    0142 0142 0142 6142 
   35167/   1B6F4 : 2142 0142 2142 2142 		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
                    2142 2142 2142 0142 
   35168/   1B704 : 2142 0142 2142 2142 		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
                    2142 2142 2142 0142 
   35169/   1B714 : 4142 2142 4142 4142 		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
                    4142 4142 4142 2142 
   35170/   1B724 : 4142 2142 4142 4142 		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
                    4142 4142 4142 2142 
   35171/   1B734 : 6142 4142 6142 6142 		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
                    6142 6142 6142 4142 
   35172/   1B744 : 6142 4142 6142 6142 		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
                    6142 6142 6142 4142 
   35173/   1B754 :                     ; ---------------------------------------------------------------------------
   35174/   1B754 :                     ; Subroutine to	remove items when you collect them in the special stage
   35175/   1B754 :                     ; ---------------------------------------------------------------------------
   35176/   1B754 :                     
   35177/   1B754 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35178/   1B754 :                     
   35179/   1B754 :                     
   35180/   1B754 :                     SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
   35181/   1B754 : 45F9 00FF 4400      		lea	($FF4400).l,a2
   35182/   1B75A : 303C 001F           		move.w	#$1F,d0
   35183/   1B75E :                     
   35184/   1B75E :                     loc_1B4C4:
   35185/   1B75E : 4A12                		tst.b	(a2)
   35186/   1B760 : 6706                		beq.s	locret_1B4CE
   35187/   1B762 : 504A                		addq.w	#8,a2
   35188/   1B764 : 51C8 FFF8           		dbf	d0,loc_1B4C4
   35189/   1B768 :                     
   35190/   1B768 :                     locret_1B4CE:
   35191/   1B768 : 4E75                		rts	
   35192/   1B76A :                     ; End of function SS_RemoveCollectedItem
   35193/   1B76A :                     
   35194/   1B76A :                     ; ---------------------------------------------------------------------------
   35195/   1B76A :                     ; Subroutine to	animate	special	stage items when you touch them
   35196/   1B76A :                     ; ---------------------------------------------------------------------------
   35197/   1B76A :                     
   35198/   1B76A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35199/   1B76A :                     
   35200/   1B76A :                     
   35201/   1B76A :                     SS_AniItems:				; XREF: SS_ShowLayout
   35202/   1B76A : 41F9 00FF 4400      		lea	($FF4400).l,a0
   35203/   1B770 : 3E3C 001F           		move.w	#$1F,d7
   35204/   1B774 :                     
   35205/   1B774 :                     loc_1B4DA:
   35206/   1B774 : 7000                		moveq	#0,d0
   35207/   1B776 : 1010                		move.b	(a0),d0
   35208/   1B778 : 6708                		beq.s	loc_1B4E8
   35209/   1B77A : E548                		lsl.w	#2,d0
   35210/   1B77C : 227B 0008           		movea.l	SS_AniIndex-4(pc,d0.w),a1
   35211/   1B780 : 4E91                		jsr	(a1)
   35212/   1B782 :                     
   35213/   1B782 :                     loc_1B4E8:
   35214/   1B782 : 5048                		addq.w	#8,a0
   35215/   1B784 :                     
   35216/   1B784 :                     loc_1B4EA:
   35217/   1B784 : 51CF FFEE           		dbf	d7,loc_1B4DA
   35218/   1B788 :                     
   35219/   1B788 : 4E75                		rts	
   35220/   1B78A :                     ; End of function SS_AniItems
   35221/   1B78A :                     
   35222/   1B78A :                     ; ===========================================================================
   35223/   1B78A : 0001 B7A2           SS_AniIndex:	dc.l SS_AniRingSparks
   35224/   1B78E : 0001 B7D2           		dc.l SS_AniBumper
   35225/   1B792 : 0001 B808           		dc.l SS_Ani1Up
   35226/   1B796 : 0001 B838           		dc.l SS_AniReverse
   35227/   1B79A : 0001 B86E           		dc.l SS_AniEmeraldSparks
   35228/   1B79E : 0001 B8AE           		dc.l SS_AniGlassBlock
   35229/   1B7A2 :                     ; ===========================================================================
   35230/   1B7A2 :                     
   35231/   1B7A2 :                     SS_AniRingSparks:			; XREF: SS_AniIndex
   35232/   1B7A2 : 5328 0002           		subq.b	#1,2(a0)
   35233/   1B7A6 : 6A22                		bpl.s	locret_1B530
   35234/   1B7A8 : 117C 0005 0002      		move.b	#5,2(a0)
   35235/   1B7AE : 7000                		moveq	#0,d0
   35236/   1B7B0 : 1028 0003           		move.b	3(a0),d0
   35237/   1B7B4 : 5228 0003           		addq.b	#1,3(a0)
   35238/   1B7B8 : 2268 0004           		movea.l	4(a0),a1
   35239/   1B7BC : 103B 000E           		move.b	SS_AniRingData(pc,d0.w),d0
   35240/   1B7C0 : 1280                		move.b	d0,(a1)
   35241/   1B7C2 : 6606                		bne.s	locret_1B530
   35242/   1B7C4 : 4290                		clr.l	(a0)
   35243/   1B7C6 : 42A8 0004           		clr.l	4(a0)
   35244/   1B7CA :                     
   35245/   1B7CA :                     locret_1B530:
   35246/   1B7CA : 4E75                		rts	
   35247/   1B7CC :                     ; ===========================================================================
   35248/   1B7CC : 4243 4445 0000      SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
   35249/   1B7D2 :                     ; ===========================================================================
   35250/   1B7D2 :                     
   35251/   1B7D2 :                     SS_AniBumper:				; XREF: SS_AniIndex
   35252/   1B7D2 : 5328 0002           		subq.b	#1,2(a0)
   35253/   1B7D6 : 6A28                		bpl.s	locret_1B566
   35254/   1B7D8 : 117C 0007 0002      		move.b	#7,2(a0)
   35255/   1B7DE : 7000                		moveq	#0,d0
   35256/   1B7E0 : 1028 0003           		move.b	3(a0),d0
   35257/   1B7E4 : 5228 0003           		addq.b	#1,3(a0)
   35258/   1B7E8 : 2268 0004           		movea.l	4(a0),a1
   35259/   1B7EC : 103B 0014           		move.b	SS_AniBumpData(pc,d0.w),d0
   35260/   1B7F0 : 660C                		bne.s	loc_1B564
   35261/   1B7F2 : 4290                		clr.l	(a0)
   35262/   1B7F4 : 42A8 0004           		clr.l	4(a0)
   35263/   1B7F8 : 12BC 0025           		move.b	#$25,(a1)
   35264/   1B7FC : 4E75                		rts	
   35265/   1B7FE :                     ; ===========================================================================
   35266/   1B7FE :                     
   35267/   1B7FE :                     loc_1B564:
   35268/   1B7FE : 1280                		move.b	d0,(a1)
   35269/   1B800 :                     
   35270/   1B800 :                     locret_1B566:
   35271/   1B800 : 4E75                		rts	
   35272/   1B802 :                     ; ===========================================================================
   35273/   1B802 : 3233 3233 0000      SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
   35274/   1B808 :                     ; ===========================================================================
   35275/   1B808 :                     
   35276/   1B808 :                     SS_Ani1Up:				; XREF: SS_AniIndex
   35277/   1B808 : 5328 0002           		subq.b	#1,2(a0)
   35278/   1B80C : 6A22                		bpl.s	locret_1B596
   35279/   1B80E : 117C 0005 0002      		move.b	#5,2(a0)
   35280/   1B814 : 7000                		moveq	#0,d0
   35281/   1B816 : 1028 0003           		move.b	3(a0),d0
   35282/   1B81A : 5228 0003           		addq.b	#1,3(a0)
   35283/   1B81E : 2268 0004           		movea.l	4(a0),a1
   35284/   1B822 : 103B 000E           		move.b	SS_Ani1UpData(pc,d0.w),d0
   35285/   1B826 : 1280                		move.b	d0,(a1)
   35286/   1B828 : 6606                		bne.s	locret_1B596
   35287/   1B82A : 4290                		clr.l	(a0)
   35288/   1B82C : 42A8 0004           		clr.l	4(a0)
   35289/   1B830 :                     
   35290/   1B830 :                     locret_1B596:
   35291/   1B830 : 4E75                		rts	
   35292/   1B832 :                     ; ===========================================================================
   35293/   1B832 : 4647 4849 0000      SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
   35294/   1B838 :                     ; ===========================================================================
   35295/   1B838 :                     
   35296/   1B838 :                     SS_AniReverse:				; XREF: SS_AniIndex
   35297/   1B838 : 5328 0002           		subq.b	#1,2(a0)
   35298/   1B83C : 6A28                		bpl.s	locret_1B5CC
   35299/   1B83E : 117C 0007 0002      		move.b	#7,2(a0)
   35300/   1B844 : 7000                		moveq	#0,d0
   35301/   1B846 : 1028 0003           		move.b	3(a0),d0
   35302/   1B84A : 5228 0003           		addq.b	#1,3(a0)
   35303/   1B84E : 2268 0004           		movea.l	4(a0),a1
   35304/   1B852 : 103B 0014           		move.b	SS_AniRevData(pc,d0.w),d0
   35305/   1B856 : 660C                		bne.s	loc_1B5CA
   35306/   1B858 : 4290                		clr.l	(a0)
   35307/   1B85A : 42A8 0004           		clr.l	4(a0)
   35308/   1B85E : 12BC 002B           		move.b	#$2B,(a1)
   35309/   1B862 : 4E75                		rts	
   35310/   1B864 :                     ; ===========================================================================
   35311/   1B864 :                     
   35312/   1B864 :                     loc_1B5CA:
   35313/   1B864 : 1280                		move.b	d0,(a1)
   35314/   1B866 :                     
   35315/   1B866 :                     locret_1B5CC:
   35316/   1B866 : 4E75                		rts	
   35317/   1B868 :                     ; ===========================================================================
   35318/   1B868 : 2B31 2B31 0000      SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
   35319/   1B86E :                     ; ===========================================================================
   35320/   1B86E :                     
   35321/   1B86E :                     SS_AniEmeraldSparks:			; XREF: SS_AniIndex
   35322/   1B86E : 5328 0002           		subq.b	#1,2(a0)
   35323/   1B872 : 6A32                		bpl.s	locret_1B60C
   35324/   1B874 : 117C 0005 0002      		move.b	#5,2(a0)
   35325/   1B87A : 7000                		moveq	#0,d0
   35326/   1B87C : 1028 0003           		move.b	3(a0),d0
   35327/   1B880 : 5228 0003           		addq.b	#1,3(a0)
   35328/   1B884 : 2268 0004           		movea.l	4(a0),a1
   35329/   1B888 : 103B 001E           		move.b	SS_AniEmerData(pc,d0.w),d0
   35330/   1B88C : 1280                		move.b	d0,(a1)
   35331/   1B88E : 6616                		bne.s	locret_1B60C
   35332/   1B890 : 4290                		clr.l	(a0)
   35333/   1B892 : 42A8 0004           		clr.l	4(a0)
   35334/   1B896 : 11FC 0004 D024      		move.b	#4,($FFFFD024).w
   35335/   1B89C : 303C 00A8           		move.w	#$A8,d0
   35336/   1B8A0 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
   35337/   1B8A6 :                     
   35338/   1B8A6 :                     locret_1B60C:
   35339/   1B8A6 : 4E75                		rts	
   35340/   1B8A8 :                     ; ===========================================================================
   35341/   1B8A8 : 4647 4849 0000      SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
   35342/   1B8AE :                     ; ===========================================================================
   35343/   1B8AE :                     
   35344/   1B8AE :                     SS_AniGlassBlock:			; XREF: SS_AniIndex
   35345/   1B8AE : 5328 0002           		subq.b	#1,2(a0)
   35346/   1B8B2 : 6A26                		bpl.s	locret_1B640
   35347/   1B8B4 : 117C 0001 0002      		move.b	#1,2(a0)
   35348/   1B8BA : 7000                		moveq	#0,d0
   35349/   1B8BC : 1028 0003           		move.b	3(a0),d0
   35350/   1B8C0 : 5228 0003           		addq.b	#1,3(a0)
   35351/   1B8C4 : 2268 0004           		movea.l	4(a0),a1
   35352/   1B8C8 : 103B 0012           		move.b	SS_AniGlassData(pc,d0.w),d0
   35353/   1B8CC : 1280                		move.b	d0,(a1)
   35354/   1B8CE : 660A                		bne.s	locret_1B640
   35355/   1B8D0 : 12A8 0004           		move.b	4(a0),(a1)
   35356/   1B8D4 : 4290                		clr.l	(a0)
   35357/   1B8D6 : 42A8 0004           		clr.l	4(a0)
   35358/   1B8DA :                     
   35359/   1B8DA :                     locret_1B640:
   35360/   1B8DA : 4E75                		rts	
   35361/   1B8DC :                     ; ===========================================================================
   35362/   1B8DC : 4B4C 4D4E 4B4C 4D4E SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
                    0000                
   35363/   1B8E6 :                     ; ---------------------------------------------------------------------------
   35364/   1B8E6 :                     ; Special stage	layout pointers
   35365/   1B8E6 :                     ; ---------------------------------------------------------------------------
   35366/   1B8E6 :                     SS_LayoutIndex:
   35367/   1B8E6 :                     		include	"_inc/Special stage layout pointers.asm"
(1)    1/   1B8E6 :                     ; ---------------------------------------------------------------------------
(1)    2/   1B8E6 :                     ; Special stage	layout pointers
(1)    3/   1B8E6 :                     ; ---------------------------------------------------------------------------
(1)    4/   1B8E6 : 0006 6292           	dc.l SS_1
(1)    5/   1B8EA : 0006 650C           	dc.l SS_2
(1)    6/   1B8EE : 0006 691E           	dc.l SS_3
(1)    7/   1B8F2 : 0006 6C7A           	dc.l SS_4
(1)    8/   1B8F6 : 0006 7154           	dc.l SS_5
(1)    9/   1B8FA : 0006 7626           	dc.l SS_6
(1)   10/   1B8FE : (MACRO)             	align 2
(1)   10/   1B8FE :  (MACRO-2)                  cnop 0,2
(1)   10/   1B8FE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   35368/   1B8FE :                     
   35369/   1B8FE :                     ; ---------------------------------------------------------------------------
   35370/   1B8FE :                     ; Special stage	start locations
   35371/   1B8FE :                     ; ---------------------------------------------------------------------------
   35372/   1B8FE :                     SS_StartLoc:	binclude	misc/sloc_ss.bin
   35373/   1B916 : (MACRO)             		align 2
   35373/   1B916 :  (MACRO-2)                  cnop 0,2
   35373/   1B916 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   35374/   1B916 :                     
   35375/   1B916 :                     ; ---------------------------------------------------------------------------
   35376/   1B916 :                     ; Subroutine to	load special stage layout
   35377/   1B916 :                     ; ---------------------------------------------------------------------------
   35378/   1B916 :                     
   35379/   1B916 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35380/   1B916 :                     
   35381/   1B916 :                     
   35382/   1B916 :                     SS_Load:				; XREF: SpecialStage
   35383/   1B916 : 7000                		moveq	#0,d0
   35384/   1B918 : 1038 FE16           		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
   35385/   1B91C : 5238 FE16           		addq.b	#1,($FFFFFE16).w
   35386/   1B920 : 0C38 0006 FE16      		cmpi.b	#6,($FFFFFE16).w
   35387/   1B926 : 6506                		bcs.s	SS_ChkEmldNum
   35388/   1B928 : 11FC 0000 FE16      		move.b	#0,($FFFFFE16).w ; reset if higher than	6
   35389/   1B92E :                     
   35390/   1B92E :                     SS_ChkEmldNum:
   35391/   1B92E : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
   35392/   1B934 : 671A                		beq.s	SS_LoadData	; if yes, branch
   35393/   1B936 : 7200                		moveq	#0,d1
   35394/   1B938 : 1238 FE57           		move.b	($FFFFFE57).w,d1
   35395/   1B93C : 5301                		subq.b	#1,d1
   35396/   1B93E : 6510                		bcs.s	SS_LoadData
   35397/   1B940 : 47F8 FE58           		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
   35398/   1B944 :                     
   35399/   1B944 :                     SS_ChkEmldLoop:	
   35400/   1B944 : B033 1000           		cmp.b	(a3,d1.w),d0
   35401/   1B948 : 6602                		bne.s	SS_ChkEmldRepeat
   35402/   1B94A : 60CA                		bra.s	SS_Load
   35403/   1B94C :                     ; ===========================================================================
   35404/   1B94C :                     
   35405/   1B94C :                     SS_ChkEmldRepeat:
   35406/   1B94C : 51C9 FFF6           		dbf	d1,SS_ChkEmldLoop
   35407/   1B950 :                     
   35408/   1B950 :                     SS_LoadData:
   35409/   1B950 : E548                		lsl.w	#2,d0
   35410/   1B952 : 43FB 00AA           		lea	SS_StartLoc(pc,d0.w),a1
   35411/   1B956 : 31D9 D008           		move.w	(a1)+,($FFFFD008).w
   35412/   1B95A : 31D9 D00C           		move.w	(a1)+,($FFFFD00C).w
   35413/   1B95E : 207B 0086           		movea.l	SS_LayoutIndex(pc,d0.w),a0
   35414/   1B962 : 43F9 00FF 4000      		lea	($FF4000).l,a1
   35415/   1B968 : 303C 0000           		move.w	#0,d0
   35416/   1B96C : 4EB9 0000 171E      		jsr	(EniDec).l
   35417/   1B972 : 43F9 00FF 0000      		lea	($FF0000).l,a1
   35418/   1B978 : 303C 0FFF           		move.w	#$FFF,d0
   35419/   1B97C :                     
   35420/   1B97C :                     SS_ClrRAM3:
   35421/   1B97C : 4299                		clr.l	(a1)+
   35422/   1B97E : 51C8 FFFC           		dbf	d0,SS_ClrRAM3
   35423/   1B982 :                     
   35424/   1B982 : 43F9 00FF 1020      		lea	($FF1020).l,a1
   35425/   1B988 : 41F9 00FF 4000      		lea	($FF4000).l,a0
   35426/   1B98E : 723F                		moveq	#$3F,d1
   35427/   1B990 :                     
   35428/   1B990 :                     loc_1B6F6:
   35429/   1B990 : 743F                		moveq	#$3F,d2
   35430/   1B992 :                     
   35431/   1B992 :                     loc_1B6F8:
   35432/   1B992 : 12D8                		move.b	(a0)+,(a1)+
   35433/   1B994 : 51CA FFFC           		dbf	d2,loc_1B6F8
   35434/   1B998 :                     
   35435/   1B998 : 43E9 0040           		lea	$40(a1),a1
   35436/   1B99C : 51C9 FFF2           		dbf	d1,loc_1B6F6
   35437/   1B9A0 :                     
   35438/   1B9A0 : 43F9 00FF 4008      		lea	($FF4008).l,a1
   35439/   1B9A6 : 41F9 0001 B9D2      		lea	(SS_MapIndex).l,a0
   35440/   1B9AC : 724D                		moveq	#$4D,d1
   35441/   1B9AE :                     
   35442/   1B9AE :                     loc_1B714:
   35443/   1B9AE : 22D8                		move.l	(a0)+,(a1)+
   35444/   1B9B0 : 32FC 0000           		move.w	#0,(a1)+
   35445/   1B9B4 : 1368 FFFC FFFF      		move.b	-4(a0),-1(a1)
   35446/   1B9BA : 32D8                		move.w	(a0)+,(a1)+
   35447/   1B9BC : 51C9 FFF0           		dbf	d1,loc_1B714
   35448/   1B9C0 :                     
   35449/   1B9C0 : 43F9 00FF 4400      		lea	($FF4400).l,a1
   35450/   1B9C6 : 323C 003F           		move.w	#$3F,d1
   35451/   1B9CA :                     
   35452/   1B9CA :                     loc_1B730:
   35453/   1B9CA :                     
   35454/   1B9CA : 4299                		clr.l	(a1)+
   35455/   1B9CC : 51C9 FFFC           		dbf	d1,loc_1B730
   35456/   1B9D0 :                     
   35457/   1B9D0 : 4E75                		rts	
   35458/   1B9D2 :                     ; End of function SS_Load
   35459/   1B9D2 :                     
   35460/   1B9D2 :                     ; ===========================================================================
   35461/   1B9D2 :                     ; ---------------------------------------------------------------------------
   35462/   1B9D2 :                     ; Special stage	mappings and VRAM pointers
   35463/   1B9D2 :                     ; ---------------------------------------------------------------------------
   35464/   1B9D2 :                     SS_MapIndex:
   35465/   1B9D2 :                     		include	"_inc/Special stage mappings and VRAM pointers.asm"
(1)    1/   1B9D2 :                     ; ---------------------------------------------------------------------------
(1)    2/   1B9D2 :                     ; Special stage	mappings and VRAM pointers
(1)    3/   1B9D2 :                     ; ---------------------------------------------------------------------------
(1)    4/   1B9D2 : 0002 D35E           	dc.l Map_SSWalls	; address of mappings
(1)    5/   1B9D6 : 0142                	dc.w $142		; VRAM setting
(1)    6/   1B9D8 : 0002 D35E           	dc.l Map_SSWalls
(1)    7/   1B9DC : 0142                	dc.w $142
(1)    8/   1B9DE : 0002 D35E           	dc.l Map_SSWalls
(1)    9/   1B9E2 : 0142                	dc.w $142
(1)   10/   1B9E4 : 0002 D35E           	dc.l Map_SSWalls
(1)   11/   1B9E8 : 0142                	dc.w $142
(1)   12/   1B9EA : 0002 D35E           	dc.l Map_SSWalls
(1)   13/   1B9EE : 0142                	dc.w $142
(1)   14/   1B9F0 : 0002 D35E           	dc.l Map_SSWalls
(1)   15/   1B9F4 : 0142                	dc.w $142
(1)   16/   1B9F6 : 0002 D35E           	dc.l Map_SSWalls
(1)   17/   1B9FA : 0142                	dc.w $142
(1)   18/   1B9FC : 0002 D35E           	dc.l Map_SSWalls
(1)   19/   1BA00 : 0142                	dc.w $142
(1)   20/   1BA02 : 0002 D35E           	dc.l Map_SSWalls
(1)   21/   1BA06 : 0142                	dc.w $142
(1)   22/   1BA08 : 0002 D35E           	dc.l Map_SSWalls
(1)   23/   1BA0C : 2142                	dc.w $2142
(1)   24/   1BA0E : 0002 D35E           	dc.l Map_SSWalls
(1)   25/   1BA12 : 2142                	dc.w $2142
(1)   26/   1BA14 : 0002 D35E           	dc.l Map_SSWalls
(1)   27/   1BA18 : 2142                	dc.w $2142
(1)   28/   1BA1A : 0002 D35E           	dc.l Map_SSWalls
(1)   29/   1BA1E : 2142                	dc.w $2142
(1)   30/   1BA20 : 0002 D35E           	dc.l Map_SSWalls
(1)   31/   1BA24 : 2142                	dc.w $2142
(1)   32/   1BA26 : 0002 D35E           	dc.l Map_SSWalls
(1)   33/   1BA2A : 2142                	dc.w $2142
(1)   34/   1BA2C : 0002 D35E           	dc.l Map_SSWalls
(1)   35/   1BA30 : 2142                	dc.w $2142
(1)   36/   1BA32 : 0002 D35E           	dc.l Map_SSWalls
(1)   37/   1BA36 : 2142                	dc.w $2142
(1)   38/   1BA38 : 0002 D35E           	dc.l Map_SSWalls
(1)   39/   1BA3C : 2142                	dc.w $2142
(1)   40/   1BA3E : 0002 D35E           	dc.l Map_SSWalls
(1)   41/   1BA42 : 4142                	dc.w $4142
(1)   42/   1BA44 : 0002 D35E           	dc.l Map_SSWalls
(1)   43/   1BA48 : 4142                	dc.w $4142
(1)   44/   1BA4A : 0002 D35E           	dc.l Map_SSWalls
(1)   45/   1BA4E : 4142                	dc.w $4142
(1)   46/   1BA50 : 0002 D35E           	dc.l Map_SSWalls
(1)   47/   1BA54 : 4142                	dc.w $4142
(1)   48/   1BA56 : 0002 D35E           	dc.l Map_SSWalls
(1)   49/   1BA5A : 4142                	dc.w $4142
(1)   50/   1BA5C : 0002 D35E           	dc.l Map_SSWalls
(1)   51/   1BA60 : 4142                	dc.w $4142
(1)   52/   1BA62 : 0002 D35E           	dc.l Map_SSWalls
(1)   53/   1BA66 : 4142                	dc.w $4142
(1)   54/   1BA68 : 0002 D35E           	dc.l Map_SSWalls
(1)   55/   1BA6C : 4142                	dc.w $4142
(1)   56/   1BA6E : 0002 D35E           	dc.l Map_SSWalls
(1)   57/   1BA72 : 4142                	dc.w $4142
(1)   58/   1BA74 : 0002 D35E           	dc.l Map_SSWalls
(1)   59/   1BA78 : 6142                	dc.w $6142
(1)   60/   1BA7A : 0002 D35E           	dc.l Map_SSWalls
(1)   61/   1BA7E : 6142                	dc.w $6142
(1)   62/   1BA80 : 0002 D35E           	dc.l Map_SSWalls
(1)   63/   1BA84 : 6142                	dc.w $6142
(1)   64/   1BA86 : 0002 D35E           	dc.l Map_SSWalls
(1)   65/   1BA8A : 6142                	dc.w $6142
(1)   66/   1BA8C : 0002 D35E           	dc.l Map_SSWalls
(1)   67/   1BA90 : 6142                	dc.w $6142
(1)   68/   1BA92 : 0002 D35E           	dc.l Map_SSWalls
(1)   69/   1BA96 : 6142                	dc.w $6142
(1)   70/   1BA98 : 0002 D35E           	dc.l Map_SSWalls
(1)   71/   1BA9C : 6142                	dc.w $6142
(1)   72/   1BA9E : 0002 D35E           	dc.l Map_SSWalls
(1)   73/   1BAA2 : 6142                	dc.w $6142
(1)   74/   1BAA4 : 0002 D35E           	dc.l Map_SSWalls
(1)   75/   1BAA8 : 6142                	dc.w $6142
(1)   76/   1BAAA : 0000 EC0A           	dc.l Map_obj47
(1)   77/   1BAAE : 023B                	dc.w $23B
(1)   78/   1BAB0 : 0001 BBA6           	dc.l Map_SS_R
(1)   79/   1BAB4 : 0570                	dc.w $570
(1)   80/   1BAB6 : 0001 BBA6           	dc.l Map_SS_R
(1)   81/   1BABA : 0251                	dc.w $251
(1)   82/   1BABC : 0001 BBA6           	dc.l Map_SS_R
(1)   83/   1BAC0 : 0370                	dc.w $370
(1)   84/   1BAC2 : 0001 BBDA           	dc.l Map_SS_Up
(1)   85/   1BAC6 : 0263                	dc.w $263
(1)   86/   1BAC8 : 0001 BBEA           	dc.l Map_SS_Down
(1)   87/   1BACC : 0263                	dc.w $263
(1)   88/   1BACE : 0001 BBA6           	dc.l Map_SS_R
(1)   89/   1BAD2 : 22F0                	dc.w $22F0
(1)   90/   1BAD4 : 0001 BBBA           	dc.l Map_SS_Glass
(1)   91/   1BAD8 : 0470                	dc.w $470
(1)   92/   1BADA : 0001 BBBA           	dc.l Map_SS_Glass
(1)   93/   1BADE : 05F0                	dc.w $5F0
(1)   94/   1BAE0 : 0001 BBBA           	dc.l Map_SS_Glass
(1)   95/   1BAE4 : 65F0                	dc.w $65F0
(1)   96/   1BAE6 : 0001 BBBA           	dc.l Map_SS_Glass
(1)   97/   1BAEA : 25F0                	dc.w $25F0
(1)   98/   1BAEC : 0001 BBBA           	dc.l Map_SS_Glass
(1)   99/   1BAF0 : 45F0                	dc.w $45F0
(1)  100/   1BAF2 : 0001 BBA6           	dc.l Map_SS_R
(1)  101/   1BAF6 : 02F0                	dc.w $2F0
(1)  102/   1BAF8 : 0100 EC0A           	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
(1)  103/   1BAFC : 023B                	dc.w $23B
(1)  104/   1BAFE : 0200 EC0A           	dc.l Map_obj47+$2000000
(1)  105/   1BB02 : 023B                	dc.w $23B
(1)  106/   1BB04 : 0001 BBA6           	dc.l Map_SS_R
(1)  107/   1BB08 : 0797                	dc.w $797
(1)  108/   1BB0A : 0001 BBA6           	dc.l Map_SS_R
(1)  109/   1BB0E : 07A0                	dc.w $7A0
(1)  110/   1BB10 : 0001 BBA6           	dc.l Map_SS_R
(1)  111/   1BB14 : 07A9                	dc.w $7A9
(1)  112/   1BB16 : 0001 BBA6           	dc.l Map_SS_R
(1)  113/   1BB1A : 0797                	dc.w $797
(1)  114/   1BB1C : 0001 BBA6           	dc.l Map_SS_R
(1)  115/   1BB20 : 07A0                	dc.w $7A0
(1)  116/   1BB22 : 0001 BBA6           	dc.l Map_SS_R
(1)  117/   1BB26 : 07A9                	dc.w $7A9
(1)  118/   1BB28 : 0000 9F9E           	dc.l Map_obj25
(1)  119/   1BB2C : 27B2                	dc.w $27B2
(1)  120/   1BB2E : 0001 BC02           	dc.l Map_SS_Chaos3
(1)  121/   1BB32 : 0770                	dc.w $770
(1)  122/   1BB34 : 0001 BC02           	dc.l Map_SS_Chaos3
(1)  123/   1BB38 : 2770                	dc.w $2770
(1)  124/   1BB3A : 0001 BC02           	dc.l Map_SS_Chaos3
(1)  125/   1BB3E : 4770                	dc.w $4770
(1)  126/   1BB40 : 0001 BC02           	dc.l Map_SS_Chaos3
(1)  127/   1BB44 : 6770                	dc.w $6770
(1)  128/   1BB46 : 0001 BBFA           	dc.l Map_SS_Chaos1
(1)  129/   1BB4A : 0770                	dc.w $770
(1)  130/   1BB4C : 0001 BBFE           	dc.l Map_SS_Chaos2
(1)  131/   1BB50 : 0770                	dc.w $770
(1)  132/   1BB52 : 0001 BBA6           	dc.l Map_SS_R
(1)  133/   1BB56 : 04F0                	dc.w $4F0
(1)  134/   1BB58 : 0400 9F9E           	dc.l Map_obj25+$4000000
(1)  135/   1BB5C : 27B2                	dc.w $27B2
(1)  136/   1BB5E : 0500 9F9E           	dc.l Map_obj25+$5000000
(1)  137/   1BB62 : 27B2                	dc.w $27B2
(1)  138/   1BB64 : 0600 9F9E           	dc.l Map_obj25+$6000000
(1)  139/   1BB68 : 27B2                	dc.w $27B2
(1)  140/   1BB6A : 0700 9F9E           	dc.l Map_obj25+$7000000
(1)  141/   1BB6E : 27B2                	dc.w $27B2
(1)  142/   1BB70 : 0001 BBBA           	dc.l Map_SS_Glass
(1)  143/   1BB74 : 23F0                	dc.w $23F0
(1)  144/   1BB76 : 0101 BBBA           	dc.l Map_SS_Glass+$1000000
(1)  145/   1BB7A : 23F0                	dc.w $23F0
(1)  146/   1BB7C : 0201 BBBA           	dc.l Map_SS_Glass+$2000000
(1)  147/   1BB80 : 23F0                	dc.w $23F0
(1)  148/   1BB82 : 0301 BBBA           	dc.l Map_SS_Glass+$3000000
(1)  149/   1BB86 : 23F0                	dc.w $23F0
(1)  150/   1BB88 : 0201 BBA6           	dc.l Map_SS_R+$2000000
(1)  151/   1BB8C : 04F0                	dc.w $4F0
(1)  152/   1BB8E : 0001 BBBA           	dc.l Map_SS_Glass
(1)  153/   1BB92 : 05F0                	dc.w $5F0
(1)  154/   1BB94 : 0001 BBBA           	dc.l Map_SS_Glass
(1)  155/   1BB98 : 65F0                	dc.w $65F0
(1)  156/   1BB9A : 0001 BBBA           	dc.l Map_SS_Glass
(1)  157/   1BB9E : 25F0                	dc.w $25F0
(1)  158/   1BBA0 : 0001 BBBA           	dc.l Map_SS_Glass
(1)  159/   1BBA4 : 45F0                	dc.w $45F0
(1)  160/   1BBA6 :                     	
   35466/   1BBA6 :                     
   35467/   1BBA6 :                     ; ---------------------------------------------------------------------------
   35468/   1BBA6 :                     ; Sprite mappings - special stage "R" block
   35469/   1BBA6 :                     ; ---------------------------------------------------------------------------
   35470/   1BBA6 :                     Map_SS_R:
   35471/   1BBA6 :                     		include	"_maps/SSRblock.asm"
(1)    1/   1BBA6 :                     ; ---------------------------------------------------------------------------
(1)    2/   1BBA6 :                     ; Sprite mappings - special stage "R" block
(1)    3/   1BBA6 :                     ; ---------------------------------------------------------------------------
(1)    4/   1BBA6 : 0006 000C           		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
(1)    5/   1BBAA : 0012                		dc.w byte_1B91E-Map_SS_R
(1)    6/   1BBAC : 01                  byte_1B912:	dc.b 1
(1)    7/   1BBAD : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/   1BBB2 : 01                  byte_1B918:	dc.b 1
(1)    9/   1BBB3 : F40A 0009 F4        		dc.b $F4, $A, 0, 9, $F4
(1)   10/   1BBB8 : 00                  byte_1B91E:	dc.b 0
(1)   11/   1BBB9 : (MACRO)             		align 2
(1)   11/   1BBB9 :  (MACRO-2)                  cnop 0,2
(1)   11/   1BBB9 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
(1)   11/   1BBB9 : =$42                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
(1)   11/   1BBBA :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   35472/   1BBBA :                     
   35473/   1BBBA :                     ; ---------------------------------------------------------------------------
   35474/   1BBBA :                     ; Sprite mappings - special stage breakable glass blocks and red-white blocks
   35475/   1BBBA :                     ; ---------------------------------------------------------------------------
   35476/   1BBBA :                     Map_SS_Glass:
   35477/   1BBBA :                     		include	"_maps/SSglassblock.asm"
(1)    1/   1BBBA :                     ; ---------------------------------------------------------------------------
(1)    2/   1BBBA :                     ; Sprite mappings - special stage breakable glass blocks and red-white blocks
(1)    3/   1BBBA :                     ; ---------------------------------------------------------------------------
(1)    4/   1BBBA : 0008 000E           		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
(1)    5/   1BBBE : 0014 001A           		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
(1)    6/   1BBC2 : 01                  byte_1B928:	dc.b 1
(1)    7/   1BBC3 : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/   1BBC8 : 01                  byte_1B92E:	dc.b 1
(1)    9/   1BBC9 : F40A 0800 F4        		dc.b $F4, $A, 8, 0, $F4
(1)   10/   1BBCE : 01                  byte_1B934:	dc.b 1
(1)   11/   1BBCF : F40A 1800 F4        		dc.b $F4, $A, $18, 0, $F4
(1)   12/   1BBD4 : 01                  byte_1B93A:	dc.b 1
(1)   13/   1BBD5 : F40A 1000 F4        		dc.b $F4, $A, $10, 0, $F4
(1)   14/   1BBDA : (MACRO)             		align 2
(1)   14/   1BBDA :  (MACRO-2)                  cnop 0,2
(1)   14/   1BBDA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   35478/   1BBDA :                     
   35479/   1BBDA :                     ; ---------------------------------------------------------------------------
   35480/   1BBDA :                     ; Sprite mappings - special stage "UP" block
   35481/   1BBDA :                     ; ---------------------------------------------------------------------------
   35482/   1BBDA :                     Map_SS_Up:
   35483/   1BBDA :                     		include	"_maps/SSUPblock.asm"
(1)    1/   1BBDA :                     ; ---------------------------------------------------------------------------
(1)    2/   1BBDA :                     ; Sprite mappings - special stage "UP" block
(1)    3/   1BBDA :                     ; ---------------------------------------------------------------------------
(1)    4/   1BBDA : 0004                		dc.w byte_1B944-Map_SS_Up
(1)    5/   1BBDC : 000A                		dc.w byte_1B94A-Map_SS_Up
(1)    6/   1BBDE : 01                  byte_1B944:	dc.b 1
(1)    7/   1BBDF : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/   1BBE4 : 01                  byte_1B94A:	dc.b 1
(1)    9/   1BBE5 : F40A 0012 F4        		dc.b $F4, $A, 0, $12, $F4
(1)   10/   1BBEA : (MACRO)             		align 2
(1)   10/   1BBEA :  (MACRO-2)                  cnop 0,2
(1)   10/   1BBEA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   35484/   1BBEA :                     
   35485/   1BBEA :                     ; ---------------------------------------------------------------------------
   35486/   1BBEA :                     ; Sprite mappings - special stage "DOWN" block
   35487/   1BBEA :                     ; ---------------------------------------------------------------------------
   35488/   1BBEA :                     Map_SS_Down:
   35489/   1BBEA :                     		include	"_maps/SSDOWNblock.asm"
(1)    1/   1BBEA :                     ; ---------------------------------------------------------------------------
(1)    2/   1BBEA :                     ; Sprite mappings - special stage "DOWN" block
(1)    3/   1BBEA :                     ; ---------------------------------------------------------------------------
(1)    4/   1BBEA : 0004                		dc.w byte_1B954-Map_SS_Down
(1)    5/   1BBEC : 000A                		dc.w byte_1B95A-Map_SS_Down
(1)    6/   1BBEE : 01                  byte_1B954:	dc.b 1
(1)    7/   1BBEF : F40A 0009 F4        		dc.b $F4, $A, 0, 9, $F4
(1)    8/   1BBF4 : 01                  byte_1B95A:	dc.b 1
(1)    9/   1BBF5 : F40A 0012 F4        		dc.b $F4, $A, 0, $12, $F4
(1)   10/   1BBFA : (MACRO)             		align 2
(1)   10/   1BBFA :  (MACRO-2)                  cnop 0,2
(1)   10/   1BBFA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   35490/   1BBFA :                     
   35491/   1BBFA :                     ; ---------------------------------------------------------------------------
   35492/   1BBFA :                     ; Sprite mappings - special stage chaos	emeralds
   35493/   1BBFA :                     ; ---------------------------------------------------------------------------
   35494/   1BBFA : 000C                Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
   35495/   1BBFC : 001E                		dc.w byte_1B97E-Map_SS_Chaos1
   35496/   1BBFE : 000E                Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
   35497/   1BC00 : 001A                		dc.w byte_1B97E-Map_SS_Chaos2
   35498/   1BC02 : 0010                Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
   35499/   1BC04 : 0016                		dc.w byte_1B97E-Map_SS_Chaos3
   35500/   1BC06 : 01                  byte_1B96C:	dc.b 1
   35501/   1BC07 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
   35502/   1BC0C : 01                  byte_1B972:	dc.b 1
   35503/   1BC0D : F805 0004 F8        		dc.b $F8, 5, 0,	4, $F8
   35504/   1BC12 : 01                  byte_1B978:	dc.b 1
   35505/   1BC13 : F805 0008 F8        		dc.b $F8, 5, 0,	8, $F8
   35506/   1BC18 : 01                  byte_1B97E:	dc.b 1
   35507/   1BC19 : F805 000C F8        		dc.b $F8, 5, 0,	$C, $F8
   35508/   1BC1E : (MACRO)             		align 2
   35508/   1BC1E :  (MACRO-2)                  cnop 0,2
   35508/   1BC1E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   35509/   1BC1E :                     ; ===========================================================================
   35510/   1BC1E :                     ; ---------------------------------------------------------------------------
   35511/   1BC1E :                     ; Object 09 - Sonic (special stage)
   35512/   1BC1E :                     ; ---------------------------------------------------------------------------
   35513/   1BC1E :                     
   35514/   1BC1E :                     Obj09:					; XREF: Obj_Index
   35515/   1BC1E : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	being used?
   35516/   1BC22 : 6708                		beq.s	Obj09_Normal	; if not, branch
   35517/   1BC24 : 6100 022A           		bsr.w	SS_FixCamera
   35518/   1BC28 : 6000 1586           		bra.w	DebugMode
   35519/   1BC2C :                     ; ===========================================================================
   35520/   1BC2C :                     
   35521/   1BC2C :                     Obj09_Normal:
   35522/   1BC2C : 7000                		moveq	#0,d0
   35523/   1BC2E : 1028 0024           		move.b	$24(a0),d0
   35524/   1BC32 : 323B 0006           		move.w	Obj09_Index(pc,d0.w),d1
   35525/   1BC36 : 4EFB 1002           		jmp	Obj09_Index(pc,d1.w)
   35526/   1BC3A :                     ; ===========================================================================
   35527/   1BC3A : 0008                Obj09_Index:	dc.w Obj09_Main-Obj09_Index
   35528/   1BC3C : 0044                		dc.w Obj09_ChkDebug-Obj09_Index
   35529/   1BC3E : 0240                		dc.w Obj09_ExitStage-Obj09_Index
   35530/   1BC40 : 0294                		dc.w Obj09_Exit2-Obj09_Index
   35531/   1BC42 :                     ; ===========================================================================
   35532/   1BC42 :                     
   35533/   1BC42 :                     Obj09_Main:				; XREF: Obj09_Index
   35534/   1BC42 : 5428 0024           		addq.b	#2,$24(a0)
   35535/   1BC46 : 117C 000E 0016      		move.b	#$E,$16(a0)
   35536/   1BC4C : 117C 0007 0017      		move.b	#7,$17(a0)
   35537/   1BC52 : 217C 0002 1422 0004 		move.l	#Map_Sonic,4(a0)
   35538/   1BC5A : 317C 0780 0002      		move.w	#$780,2(a0)
   35539/   1BC60 : 117C 0004 0001      		move.b	#4,1(a0)
   35540/   1BC66 : 117C 0000 0018      		move.b	#0,$18(a0)
   35541/   1BC6C : 117C 0002 001C      		move.b	#2,$1C(a0)
   35542/   1BC72 : 08E8 0002 0022      		bset	#2,$22(a0)
   35543/   1BC78 : 08E8 0001 0022      		bset	#1,$22(a0)
   35544/   1BC7E :                     
   35545/   1BC7E :                     Obj09_ChkDebug:				; XREF: Obj09_Index
   35546/   1BC7E : 4A78 FFFA           		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
   35547/   1BC82 : 670E                		beq.s	Obj09_NoDebug	; if not, branch
   35548/   1BC84 : 0838 0004 F605      		btst	#4,($FFFFF605).w ; is button B pressed?
   35549/   1BC8A : 6706                		beq.s	Obj09_NoDebug	; if not, branch
   35550/   1BC8C : 31FC 0001 FE08      		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
   35551/   1BC92 :                     
   35552/   1BC92 :                     Obj09_NoDebug:
   35553/   1BC92 : 117C 0000 0030      		move.b	#0,$30(a0)
   35554/   1BC98 : 7000                		moveq	#0,d0
   35555/   1BC9A : 1028 0022           		move.b	$22(a0),d0
   35556/   1BC9E : 0240 0002           		andi.w	#2,d0
   35557/   1BCA2 : 323B 0012           		move.w	Obj09_Modes(pc,d0.w),d1
   35558/   1BCA6 : 4EBB 100E           		jsr	Obj09_Modes(pc,d1.w)
   35559/   1BCAA : 4EB9 0001 3EBA      		jsr	(LoadSonicDynPLC).l
   35560/   1BCB0 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   35561/   1BCB6 :                     ; ===========================================================================
   35562/   1BCB6 : 0004                Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
   35563/   1BCB8 : 0012                		dc.w Obj09_InAir-Obj09_Modes
   35564/   1BCBA :                     ; ===========================================================================
   35565/   1BCBA :                     
   35566/   1BCBA :                     Obj09_OnWall:				; XREF: Obj09_Modes
   35567/   1BCBA : 6100 0134           		bsr.w	Obj09_Jump
   35568/   1BCBE : 6100 003A           		bsr.w	Obj09_Move
   35569/   1BCC2 : 6100 022C           		bsr.w	Obj09_Fall
   35570/   1BCC6 : 600C                		bra.s	Obj09_Display
   35571/   1BCC8 :                     ; ===========================================================================
   35572/   1BCC8 :                     
   35573/   1BCC8 :                     Obj09_InAir:				; XREF: Obj09_Modes
   35574/   1BCC8 : 6100 016A           		bsr.w	nullsub_2
   35575/   1BCCC : 6100 002C           		bsr.w	Obj09_Move
   35576/   1BCD0 : 6100 021E           		bsr.w	Obj09_Fall
   35577/   1BCD4 :                     
   35578/   1BCD4 :                     Obj09_Display:				; XREF: Obj09_OnWall
   35579/   1BCD4 : 6100 0316           		bsr.w	Obj09_ChkItems
   35580/   1BCD8 : 6100 044E           		bsr.w	Obj09_ChkItems2
   35581/   1BCDC : 4EB9 0000 D6E8      		jsr	(SpeedToPos).l
   35582/   1BCE2 : 6100 016C           		bsr.w	SS_FixCamera
   35583/   1BCE6 : 3038 F780           		move.w	($FFFFF780).w,d0
   35584/   1BCEA : D078 F782           		add.w	($FFFFF782).w,d0
   35585/   1BCEE : 31C0 F780           		move.w	d0,($FFFFF780).w
   35586/   1BCF2 : 4EB9 0001 3C32      		jsr	(Sonic_Animate).l
   35587/   1BCF8 : 4E75                		rts	
   35588/   1BCFA :                     
   35589/   1BCFA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35590/   1BCFA :                     
   35591/   1BCFA :                     
   35592/   1BCFA :                     Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
   35593/   1BCFA : 0838 0002 F602      		btst	#2,($FFFFF602).w ; is left being pressed?
   35594/   1BD00 : 6704                		beq.s	Obj09_ChkRight	; if not, branch
   35595/   1BD02 : 6100 008E           		bsr.w	Obj09_MoveLeft
   35596/   1BD06 :                     
   35597/   1BD06 :                     Obj09_ChkRight:
   35598/   1BD06 : 0838 0003 F602      		btst	#3,($FFFFF602).w ; is right being pressed?
   35599/   1BD0C : 6704                		beq.s	loc_1BA78	; if not, branch
   35600/   1BD0E : 6100 00B2           		bsr.w	Obj09_MoveRight
   35601/   1BD12 :                     
   35602/   1BD12 :                     loc_1BA78:
   35603/   1BD12 : 1038 F602           		move.b	($FFFFF602).w,d0
   35604/   1BD16 : 0200 000C           		andi.b	#$C,d0
   35605/   1BD1A : 6626                		bne.s	loc_1BAA8
   35606/   1BD1C : 3028 0014           		move.w	$14(a0),d0
   35607/   1BD20 : 6720                		beq.s	loc_1BAA8
   35608/   1BD22 : 6B10                		bmi.s	loc_1BA9A
   35609/   1BD24 : 0440 000C           		subi.w	#$C,d0
   35610/   1BD28 : 6404                		bcc.s	loc_1BA94
   35611/   1BD2A : 303C 0000           		move.w	#0,d0
   35612/   1BD2E :                     
   35613/   1BD2E :                     loc_1BA94:
   35614/   1BD2E : 3140 0014           		move.w	d0,$14(a0)
   35615/   1BD32 : 600E                		bra.s	loc_1BAA8
   35616/   1BD34 :                     ; ===========================================================================
   35617/   1BD34 :                     
   35618/   1BD34 :                     loc_1BA9A:
   35619/   1BD34 : 0640 000C           		addi.w	#$C,d0
   35620/   1BD38 : 6404                		bcc.s	loc_1BAA4
   35621/   1BD3A : 303C 0000           		move.w	#0,d0
   35622/   1BD3E :                     
   35623/   1BD3E :                     loc_1BAA4:
   35624/   1BD3E : 3140 0014           		move.w	d0,$14(a0)
   35625/   1BD42 :                     
   35626/   1BD42 :                     loc_1BAA8:
   35627/   1BD42 : 1038 F780           		move.b	($FFFFF780).w,d0
   35628/   1BD46 : 0600 0020           		addi.b	#$20,d0
   35629/   1BD4A : 0200 00C0           		andi.b	#$C0,d0
   35630/   1BD4E : 4400                		neg.b	d0
   35631/   1BD50 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   35632/   1BD56 : C3E8 0014           		muls.w	$14(a0),d1
   35633/   1BD5A : D3A8 0008           		add.l	d1,8(a0)
   35634/   1BD5E : C1E8 0014           		muls.w	$14(a0),d0
   35635/   1BD62 : D1A8 000C           		add.l	d0,$C(a0)
   35636/   1BD66 : 48E7 C000           		movem.l	d0-d1,-(sp)
   35637/   1BD6A : 2428 000C           		move.l	$C(a0),d2
   35638/   1BD6E : 2628 0008           		move.l	8(a0),d3
   35639/   1BD72 : 6100 020E           		bsr.w	sub_1BCE8
   35640/   1BD76 : 6714                		beq.s	loc_1BAF2
   35641/   1BD78 : 4CDF 0003           		movem.l	(sp)+,d0-d1
   35642/   1BD7C : 93A8 0008           		sub.l	d1,8(a0)
   35643/   1BD80 : 91A8 000C           		sub.l	d0,$C(a0)
   35644/   1BD84 : 317C 0000 0014      		move.w	#0,$14(a0)
   35645/   1BD8A : 4E75                		rts	
   35646/   1BD8C :                     ; ===========================================================================
   35647/   1BD8C :                     
   35648/   1BD8C :                     loc_1BAF2:
   35649/   1BD8C : 4CDF 0003           		movem.l	(sp)+,d0-d1
   35650/   1BD90 : 4E75                		rts	
   35651/   1BD92 :                     ; End of function Obj09_Move
   35652/   1BD92 :                     
   35653/   1BD92 :                     
   35654/   1BD92 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35655/   1BD92 :                     
   35656/   1BD92 :                     
   35657/   1BD92 :                     Obj09_MoveLeft:				; XREF: Obj09_Move
   35658/   1BD92 : 08E8 0000 0022      		bset	#0,$22(a0)
   35659/   1BD98 : 3028 0014           		move.w	$14(a0),d0
   35660/   1BD9C : 6702                		beq.s	loc_1BB06
   35661/   1BD9E : 6A14                		bpl.s	loc_1BB1A
   35662/   1BDA0 :                     
   35663/   1BDA0 :                     loc_1BB06:
   35664/   1BDA0 : 0440 000C           		subi.w	#$C,d0
   35665/   1BDA4 : 0C40 F800           		cmpi.w	#-$800,d0
   35666/   1BDA8 : 6E04                		bgt.s	loc_1BB14
   35667/   1BDAA : 303C F800           		move.w	#-$800,d0
   35668/   1BDAE :                     
   35669/   1BDAE :                     loc_1BB14:
   35670/   1BDAE : 3140 0014           		move.w	d0,$14(a0)
   35671/   1BDB2 : 4E75                		rts	
   35672/   1BDB4 :                     ; ===========================================================================
   35673/   1BDB4 :                     
   35674/   1BDB4 :                     loc_1BB1A:
   35675/   1BDB4 : 0440 0040           		subi.w	#$40,d0
   35676/   1BDB8 : 6402                		bcc.s	loc_1BB22
   35677/   1BDBA : 4E71                		nop	
   35678/   1BDBC :                     
   35679/   1BDBC :                     loc_1BB22:
   35680/   1BDBC : 3140 0014           		move.w	d0,$14(a0)
   35681/   1BDC0 : 4E75                		rts	
   35682/   1BDC2 :                     ; End of function Obj09_MoveLeft
   35683/   1BDC2 :                     
   35684/   1BDC2 :                     
   35685/   1BDC2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35686/   1BDC2 :                     
   35687/   1BDC2 :                     
   35688/   1BDC2 :                     Obj09_MoveRight:			; XREF: Obj09_Move
   35689/   1BDC2 : 08A8 0000 0022      		bclr	#0,$22(a0)
   35690/   1BDC8 : 3028 0014           		move.w	$14(a0),d0
   35691/   1BDCC : 6B14                		bmi.s	loc_1BB48
   35692/   1BDCE : 0640 000C           		addi.w	#$C,d0
   35693/   1BDD2 : 0C40 0800           		cmpi.w	#$800,d0
   35694/   1BDD6 : 6D04                		blt.s	loc_1BB42
   35695/   1BDD8 : 303C 0800           		move.w	#$800,d0
   35696/   1BDDC :                     
   35697/   1BDDC :                     loc_1BB42:
   35698/   1BDDC : 3140 0014           		move.w	d0,$14(a0)
   35699/   1BDE0 : 600C                		bra.s	locret_1BB54
   35700/   1BDE2 :                     ; ===========================================================================
   35701/   1BDE2 :                     
   35702/   1BDE2 :                     loc_1BB48:
   35703/   1BDE2 : 0640 0040           		addi.w	#$40,d0
   35704/   1BDE6 : 6402                		bcc.s	loc_1BB50
   35705/   1BDE8 : 4E71                		nop	
   35706/   1BDEA :                     
   35707/   1BDEA :                     loc_1BB50:
   35708/   1BDEA : 3140 0014           		move.w	d0,$14(a0)
   35709/   1BDEE :                     
   35710/   1BDEE :                     locret_1BB54:
   35711/   1BDEE : 4E75                		rts	
   35712/   1BDF0 :                     ; End of function Obj09_MoveRight
   35713/   1BDF0 :                     
   35714/   1BDF0 :                     
   35715/   1BDF0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35716/   1BDF0 :                     
   35717/   1BDF0 :                     
   35718/   1BDF0 :                     Obj09_Jump:				; XREF: Obj09_OnWall
   35719/   1BDF0 : 1038 F603           		move.b	($FFFFF603).w,d0
   35720/   1BDF4 : 0200 0070           		andi.b	#$70,d0		; is A,	B or C pressed?
   35721/   1BDF8 : 6738                		beq.s	Obj09_NoJump	; if not, branch
   35722/   1BDFA : 1038 F780           		move.b	($FFFFF780).w,d0
   35723/   1BDFE : 0200 00FC           		andi.b	#$FC,d0
   35724/   1BE02 : 4400                		neg.b	d0
   35725/   1BE04 : 0400 0040           		subi.b	#$40,d0
   35726/   1BE08 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   35727/   1BE0E : C3FC 0680           		muls.w	#$680,d1
   35728/   1BE12 : E081                		asr.l	#8,d1
   35729/   1BE14 : 3141 0010           		move.w	d1,$10(a0)
   35730/   1BE18 : C1FC 0680           		muls.w	#$680,d0
   35731/   1BE1C : E080                		asr.l	#8,d0
   35732/   1BE1E : 3140 0012           		move.w	d0,$12(a0)
   35733/   1BE22 : 08E8 0001 0022      		bset	#1,$22(a0)
   35734/   1BE28 : 303C 00A0           		move.w	#$A0,d0
   35735/   1BE2C : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play jumping sound
   35736/   1BE32 :                     
   35737/   1BE32 :                     Obj09_NoJump:
   35738/   1BE32 : 4E75                		rts	
   35739/   1BE34 :                     ; End of function Obj09_Jump
   35740/   1BE34 :                     
   35741/   1BE34 :                     
   35742/   1BE34 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35743/   1BE34 :                     
   35744/   1BE34 :                     
   35745/   1BE34 :                     nullsub_2:				; XREF: Obj09_InAir
   35746/   1BE34 : 4E75                		rts	
   35747/   1BE36 :                     ; End of function nullsub_2
   35748/   1BE36 :                     
   35749/   1BE36 :                     ; ===========================================================================
   35750/   1BE36 :                     ; ---------------------------------------------------------------------------
   35751/   1BE36 :                     ; unused subroutine to limit Sonic"s upward vertical speed
   35752/   1BE36 :                     ; ---------------------------------------------------------------------------
   35753/   1BE36 : 323C FC00           		move.w	#-$400,d1
   35754/   1BE3A : B268 0012           		cmp.w	$12(a0),d1
   35755/   1BE3E : 6F0E                		ble.s	locret_1BBB4
   35756/   1BE40 : 1038 F602           		move.b	($FFFFF602).w,d0
   35757/   1BE44 : 0200 0070           		andi.b	#$70,d0
   35758/   1BE48 : 6604                		bne.s	locret_1BBB4
   35759/   1BE4A : 3141 0012           		move.w	d1,$12(a0)
   35760/   1BE4E :                     
   35761/   1BE4E :                     locret_1BBB4:
   35762/   1BE4E : 4E75                		rts	
   35763/   1BE50 :                     ; ---------------------------------------------------------------------------
   35764/   1BE50 :                     ; Subroutine to	fix the	camera on Sonic"s position (special stage)
   35765/   1BE50 :                     ; ---------------------------------------------------------------------------
   35766/   1BE50 :                     
   35767/   1BE50 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35768/   1BE50 :                     
   35769/   1BE50 :                     
   35770/   1BE50 :                     SS_FixCamera:				; XREF: Obj09
   35771/   1BE50 : 3428 000C           		move.w	$C(a0),d2
   35772/   1BE54 : 3628 0008           		move.w	8(a0),d3
   35773/   1BE58 : 3038 F700           		move.w	($FFFFF700).w,d0
   35774/   1BE5C : 0443 00A0           		subi.w	#$A0,d3
   35775/   1BE60 : 6506                		bcs.s	loc_1BBCE
   35776/   1BE62 : 9043                		sub.w	d3,d0
   35777/   1BE64 : 9178 F700           		sub.w	d0,($FFFFF700).w
   35778/   1BE68 :                     
   35779/   1BE68 :                     loc_1BBCE:
   35780/   1BE68 : 3038 F704           		move.w	($FFFFF704).w,d0
   35781/   1BE6C : 0442 0070           		subi.w	#$70,d2
   35782/   1BE70 : 6506                		bcs.s	locret_1BBDE
   35783/   1BE72 : 9042                		sub.w	d2,d0
   35784/   1BE74 : 9178 F704           		sub.w	d0,($FFFFF704).w
   35785/   1BE78 :                     
   35786/   1BE78 :                     locret_1BBDE:
   35787/   1BE78 : 4E75                		rts	
   35788/   1BE7A :                     ; End of function SS_FixCamera
   35789/   1BE7A :                     
   35790/   1BE7A :                     ; ===========================================================================
   35791/   1BE7A :                     
   35792/   1BE7A :                     Obj09_ExitStage:			; XREF: Obj09_Index
   35793/   1BE7A : 0678 0040 F782      		addi.w	#$40,($FFFFF782).w
   35794/   1BE80 : 0C78 1800 F782      		cmpi.w	#$1800,($FFFFF782).w
   35795/   1BE86 : 6606                		bne.s	loc_1BBF4
   35796/   1BE88 : 11FC 000C F600      		move.b	#$C,($FFFFF600).w
   35797/   1BE8E :                     
   35798/   1BE8E :                     loc_1BBF4:
   35799/   1BE8E : 0C78 3000 F782      		cmpi.w	#$3000,($FFFFF782).w
   35800/   1BE94 : 6D16                		blt.s	loc_1BC12
   35801/   1BE96 : 31FC 0000 F782      		move.w	#0,($FFFFF782).w
   35802/   1BE9C : 31FC 4000 F780      		move.w	#$4000,($FFFFF780).w
   35803/   1BEA2 : 5428 0024           		addq.b	#2,$24(a0)
   35804/   1BEA6 : 317C 003C 0038      		move.w	#$3C,$38(a0)
   35805/   1BEAC :                     
   35806/   1BEAC :                     loc_1BC12:
   35807/   1BEAC : 3038 F780           		move.w	($FFFFF780).w,d0
   35808/   1BEB0 : D078 F782           		add.w	($FFFFF782).w,d0
   35809/   1BEB4 : 31C0 F780           		move.w	d0,($FFFFF780).w
   35810/   1BEB8 : 4EB9 0001 3C32      		jsr	(Sonic_Animate).l
   35811/   1BEBE : 4EB9 0001 3EBA      		jsr	(LoadSonicDynPLC).l
   35812/   1BEC4 : 6100 FF8A           		bsr.w	SS_FixCamera
   35813/   1BEC8 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   35814/   1BECE :                     ; ===========================================================================
   35815/   1BECE :                     
   35816/   1BECE :                     Obj09_Exit2:				; XREF: Obj09_Index
   35817/   1BECE : 5368 0038           		subq.w	#1,$38(a0)
   35818/   1BED2 : 6606                		bne.s	loc_1BC40
   35819/   1BED4 : 11FC 000C F600      		move.b	#$C,($FFFFF600).w
   35820/   1BEDA :                     
   35821/   1BEDA :                     loc_1BC40:
   35822/   1BEDA : 4EB9 0001 3C32      		jsr	(Sonic_Animate).l
   35823/   1BEE0 : 4EB9 0001 3EBA      		jsr	(LoadSonicDynPLC).l
   35824/   1BEE6 : 6100 FF68           		bsr.w	SS_FixCamera
   35825/   1BEEA : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   35826/   1BEF0 :                     
   35827/   1BEF0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35828/   1BEF0 :                     
   35829/   1BEF0 :                     
   35830/   1BEF0 :                     Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
   35831/   1BEF0 : 2428 000C           		move.l	$C(a0),d2
   35832/   1BEF4 : 2628 0008           		move.l	8(a0),d3
   35833/   1BEF8 : 1038 F780           		move.b	($FFFFF780).w,d0
   35834/   1BEFC : 0200 00FC           		andi.b	#$FC,d0
   35835/   1BF00 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   35836/   1BF06 : 3828 0010           		move.w	$10(a0),d4
   35837/   1BF0A : 48C4                		ext.l	d4
   35838/   1BF0C : E184                		asl.l	#8,d4
   35839/   1BF0E : C1FC 002A           		muls.w	#$2A,d0
   35840/   1BF12 : D084                		add.l	d4,d0
   35841/   1BF14 : 3828 0012           		move.w	$12(a0),d4
   35842/   1BF18 : 48C4                		ext.l	d4
   35843/   1BF1A : E184                		asl.l	#8,d4
   35844/   1BF1C : C3FC 002A           		muls.w	#$2A,d1
   35845/   1BF20 : D284                		add.l	d4,d1
   35846/   1BF22 : D680                		add.l	d0,d3
   35847/   1BF24 : 6100 005C           		bsr.w	sub_1BCE8
   35848/   1BF28 : 6720                		beq.s	loc_1BCB0
   35849/   1BF2A : 9680                		sub.l	d0,d3
   35850/   1BF2C : 7000                		moveq	#0,d0
   35851/   1BF2E : 3140 0010           		move.w	d0,$10(a0)
   35852/   1BF32 : 08A8 0001 0022      		bclr	#1,$22(a0)
   35853/   1BF38 : D481                		add.l	d1,d2
   35854/   1BF3A : 6100 0046           		bsr.w	sub_1BCE8
   35855/   1BF3E : 6720                		beq.s	loc_1BCC6
   35856/   1BF40 : 9481                		sub.l	d1,d2
   35857/   1BF42 : 7200                		moveq	#0,d1
   35858/   1BF44 : 3141 0012           		move.w	d1,$12(a0)
   35859/   1BF48 : 4E75                		rts	
   35860/   1BF4A :                     ; ===========================================================================
   35861/   1BF4A :                     
   35862/   1BF4A :                     loc_1BCB0:
   35863/   1BF4A : D481                		add.l	d1,d2
   35864/   1BF4C : 6100 0034           		bsr.w	sub_1BCE8
   35865/   1BF50 : 671C                		beq.s	loc_1BCD4
   35866/   1BF52 : 9481                		sub.l	d1,d2
   35867/   1BF54 : 7200                		moveq	#0,d1
   35868/   1BF56 : 3141 0012           		move.w	d1,$12(a0)
   35869/   1BF5A : 08A8 0001 0022      		bclr	#1,$22(a0)
   35870/   1BF60 :                     
   35871/   1BF60 :                     loc_1BCC6:
   35872/   1BF60 : E080                		asr.l	#8,d0
   35873/   1BF62 : E081                		asr.l	#8,d1
   35874/   1BF64 : 3140 0010           		move.w	d0,$10(a0)
   35875/   1BF68 : 3141 0012           		move.w	d1,$12(a0)
   35876/   1BF6C : 4E75                		rts	
   35877/   1BF6E :                     ; ===========================================================================
   35878/   1BF6E :                     
   35879/   1BF6E :                     loc_1BCD4:
   35880/   1BF6E : E080                		asr.l	#8,d0
   35881/   1BF70 : E081                		asr.l	#8,d1
   35882/   1BF72 : 3140 0010           		move.w	d0,$10(a0)
   35883/   1BF76 : 3141 0012           		move.w	d1,$12(a0)
   35884/   1BF7A : 08E8 0001 0022      		bset	#1,$22(a0)
   35885/   1BF80 : 4E75                		rts	
   35886/   1BF82 :                     ; End of function Obj09_Fall
   35887/   1BF82 :                     
   35888/   1BF82 :                     
   35889/   1BF82 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35890/   1BF82 :                     
   35891/   1BF82 :                     
   35892/   1BF82 :                     sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
   35893/   1BF82 : 43F9 00FF 0000      		lea	($FF0000).l,a1
   35894/   1BF88 : 7800                		moveq	#0,d4
   35895/   1BF8A : 4842                		swap	d2
   35896/   1BF8C : 3802                		move.w	d2,d4
   35897/   1BF8E : 4842                		swap	d2
   35898/   1BF90 : 0644 0044           		addi.w	#$44,d4
   35899/   1BF94 : 88FC 0018           		divu.w	#$18,d4
   35900/   1BF98 : C8FC 0080           		mulu.w	#$80,d4
   35901/   1BF9C : D3C4                		adda.l	d4,a1
   35902/   1BF9E : 7800                		moveq	#0,d4
   35903/   1BFA0 : 4843                		swap	d3
   35904/   1BFA2 : 3803                		move.w	d3,d4
   35905/   1BFA4 : 4843                		swap	d3
   35906/   1BFA6 : 0644 0014           		addi.w	#$14,d4
   35907/   1BFAA : 88FC 0018           		divu.w	#$18,d4
   35908/   1BFAE : D2C4                		adda.w	d4,a1
   35909/   1BFB0 : 7A00                		moveq	#0,d5
   35910/   1BFB2 : 1819                		move.b	(a1)+,d4
   35911/   1BFB4 : 6114                		bsr.s	sub_1BD30
   35912/   1BFB6 : 1819                		move.b	(a1)+,d4
   35913/   1BFB8 : 6110                		bsr.s	sub_1BD30
   35914/   1BFBA : D2FC 007E           		adda.w	#$7E,a1
   35915/   1BFBE : 1819                		move.b	(a1)+,d4
   35916/   1BFC0 : 6108                		bsr.s	sub_1BD30
   35917/   1BFC2 : 1819                		move.b	(a1)+,d4
   35918/   1BFC4 : 6104                		bsr.s	sub_1BD30
   35919/   1BFC6 : 4A05                		tst.b	d5
   35920/   1BFC8 : 4E75                		rts	
   35921/   1BFCA :                     ; End of function sub_1BCE8
   35922/   1BFCA :                     
   35923/   1BFCA :                     
   35924/   1BFCA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35925/   1BFCA :                     
   35926/   1BFCA :                     
   35927/   1BFCA :                     sub_1BD30:				; XREF: sub_1BCE8
   35928/   1BFCA : 6712                		beq.s	locret_1BD44
   35929/   1BFCC : 0C04 0028           		cmpi.b	#$28,d4
   35930/   1BFD0 : 670C                		beq.s	locret_1BD44
   35931/   1BFD2 : 0C04 003A           		cmpi.b	#$3A,d4
   35932/   1BFD6 : 6508                		bcs.s	loc_1BD46
   35933/   1BFD8 : 0C04 004B           		cmpi.b	#$4B,d4
   35934/   1BFDC : 6402                		bcc.s	loc_1BD46
   35935/   1BFDE :                     
   35936/   1BFDE :                     locret_1BD44:
   35937/   1BFDE : 4E75                		rts	
   35938/   1BFE0 :                     ; ===========================================================================
   35939/   1BFE0 :                     
   35940/   1BFE0 :                     loc_1BD46:
   35941/   1BFE0 : 1144 0030           		move.b	d4,$30(a0)
   35942/   1BFE4 : 2149 0032           		move.l	a1,$32(a0)
   35943/   1BFE8 : 7AFF                		moveq	#-1,d5
   35944/   1BFEA : 4E75                		rts	
   35945/   1BFEC :                     ; End of function sub_1BD30
   35946/   1BFEC :                     
   35947/   1BFEC :                     
   35948/   1BFEC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35949/   1BFEC :                     
   35950/   1BFEC :                     
   35951/   1BFEC :                     Obj09_ChkItems:				; XREF: Obj09_Display
   35952/   1BFEC : 43F9 00FF 0000      		lea	($FF0000).l,a1
   35953/   1BFF2 : 7800                		moveq	#0,d4
   35954/   1BFF4 : 3828 000C           		move.w	$C(a0),d4
   35955/   1BFF8 : 0644 0050           		addi.w	#$50,d4
   35956/   1BFFC : 88FC 0018           		divu.w	#$18,d4
   35957/   1C000 : C8FC 0080           		mulu.w	#$80,d4
   35958/   1C004 : D3C4                		adda.l	d4,a1
   35959/   1C006 : 7800                		moveq	#0,d4
   35960/   1C008 : 3828 0008           		move.w	8(a0),d4
   35961/   1C00C : 0644 0020           		addi.w	#$20,d4
   35962/   1C010 : 88FC 0018           		divu.w	#$18,d4
   35963/   1C014 : D2C4                		adda.w	d4,a1
   35964/   1C016 : 1811                		move.b	(a1),d4
   35965/   1C018 : 660C                		bne.s	Obj09_ChkCont
   35966/   1C01A : 4A28 003A           		tst.b	$3A(a0)
   35967/   1C01E : 6600 00D6           		bne.w	Obj09_MakeGhostSolid
   35968/   1C022 : 7800                		moveq	#0,d4
   35969/   1C024 : 4E75                		rts	
   35970/   1C026 :                     ; ===========================================================================
   35971/   1C026 :                     
   35972/   1C026 :                     Obj09_ChkCont:
   35973/   1C026 : 0C04 003A           		cmpi.b	#$3A,d4		; is the item a	ring?
   35974/   1C02A : 6636                		bne.s	Obj09_Chk1Up
   35975/   1C02C : 6100 F726           		bsr.w	SS_RemoveCollectedItem
   35976/   1C030 : 6608                		bne.s	Obj09_GetCont
   35977/   1C032 : 14BC 0001           		move.b	#1,(a2)
   35978/   1C036 : 2549 0004           		move.l	a1,4(a2)
   35979/   1C03A :                     
   35980/   1C03A :                     Obj09_GetCont:
   35981/   1C03A : 4EB9 0000 9C82      		jsr	(CollectRing).l
   35982/   1C040 : 0C78 0032 FE20      		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
   35983/   1C046 : 6516                		bcs.s	Obj09_NoCont
   35984/   1C048 : 08F8 0000 FE1B      		bset	#0,($FFFFFE1B).w
   35985/   1C04E : 660E                		bne.s	Obj09_NoCont
   35986/   1C050 : 5238 FE18           		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
   35987/   1C054 : 303C 00BF           		move.w	#$BF,d0
   35988/   1C058 : 4EB9 0000 1396      		jsr	(PlaySound).l	; play extra continue sound
   35989/   1C05E :                     
   35990/   1C05E :                     Obj09_NoCont:
   35991/   1C05E : 7800                		moveq	#0,d4
   35992/   1C060 : 4E75                		rts	
   35993/   1C062 :                     ; ===========================================================================
   35994/   1C062 :                     
   35995/   1C062 :                     Obj09_Chk1Up:
   35996/   1C062 : 0C04 0028           		cmpi.b	#$28,d4		; is the item an extra life?
   35997/   1C066 : 6624                		bne.s	Obj09_ChkEmer
   35998/   1C068 : 6100 F6EA           		bsr.w	SS_RemoveCollectedItem
   35999/   1C06C : 6608                		bne.s	Obj09_Get1Up
   36000/   1C06E : 14BC 0003           		move.b	#3,(a2)
   36001/   1C072 : 2549 0004           		move.l	a1,4(a2)
   36002/   1C076 :                     
   36003/   1C076 :                     Obj09_Get1Up:
   36004/   1C076 : 5238 FE12           		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
   36005/   1C07A : 5238 FE1C           		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
   36006/   1C07E : 303C 0088           		move.w	#$88,d0
   36007/   1C082 : 4EB9 0000 1396      		jsr	(PlaySound).l	; play extra life music
   36008/   1C088 : 7800                		moveq	#0,d4
   36009/   1C08A : 4E75                		rts	
   36010/   1C08C :                     ; ===========================================================================
   36011/   1C08C :                     
   36012/   1C08C :                     Obj09_ChkEmer:
   36013/   1C08C : 0C04 003B           		cmpi.b	#$3B,d4		; is the item an emerald?
   36014/   1C090 : 6540                		bcs.s	Obj09_ChkGhost
   36015/   1C092 : 0C04 0040           		cmpi.b	#$40,d4
   36016/   1C096 : 623A                		bhi.s	Obj09_ChkGhost
   36017/   1C098 : 6100 F6BA           		bsr.w	SS_RemoveCollectedItem
   36018/   1C09C : 6608                		bne.s	Obj09_GetEmer
   36019/   1C09E : 14BC 0005           		move.b	#5,(a2)
   36020/   1C0A2 : 2549 0004           		move.l	a1,4(a2)
   36021/   1C0A6 :                     
   36022/   1C0A6 :                     Obj09_GetEmer:
   36023/   1C0A6 : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
   36024/   1C0AC : 6716                		beq.s	Obj09_NoEmer	; if yes, branch
   36025/   1C0AE : 0404 003B           		subi.b	#$3B,d4
   36026/   1C0B2 : 7000                		moveq	#0,d0
   36027/   1C0B4 : 1038 FE57           		move.b	($FFFFFE57).w,d0
   36028/   1C0B8 : 45F8 FE58           		lea	($FFFFFE58).w,a2
   36029/   1C0BC : 1584 0000           		move.b	d4,(a2,d0.w)
   36030/   1C0C0 : 5238 FE57           		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
   36031/   1C0C4 :                     
   36032/   1C0C4 :                     Obj09_NoEmer:
   36033/   1C0C4 : 303C 0093           		move.w	#$93,d0
   36034/   1C0C8 : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play emerald music
   36035/   1C0CE : 7800                		moveq	#0,d4
   36036/   1C0D0 : 4E75                		rts	
   36037/   1C0D2 :                     ; ===========================================================================
   36038/   1C0D2 :                     
   36039/   1C0D2 :                     Obj09_ChkGhost:
   36040/   1C0D2 : 0C04 0041           		cmpi.b	#$41,d4		; is the item a	ghost block?
   36041/   1C0D6 : 6606                		bne.s	Obj09_ChkGhostTag
   36042/   1C0D8 : 117C 0001 003A      		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
   36043/   1C0DE :                     
   36044/   1C0DE :                     Obj09_ChkGhostTag:
   36045/   1C0DE : 0C04 004A           		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
   36046/   1C0E2 : 660E                		bne.s	Obj09_NoGhost
   36047/   1C0E4 : 0C28 0001 003A      		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
   36048/   1C0EA : 6606                		bne.s	Obj09_NoGhost	; if not, branch
   36049/   1C0EC : 117C 0002 003A      		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
   36050/   1C0F2 :                     
   36051/   1C0F2 :                     Obj09_NoGhost:
   36052/   1C0F2 : 78FF                		moveq	#-1,d4
   36053/   1C0F4 : 4E75                		rts	
   36054/   1C0F6 :                     ; ===========================================================================
   36055/   1C0F6 :                     
   36056/   1C0F6 :                     Obj09_MakeGhostSolid:
   36057/   1C0F6 : 0C28 0002 003A      		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
   36058/   1C0FC : 6622                		bne.s	Obj09_GhostNotSolid ; if not, branch
   36059/   1C0FE : 43F9 00FF 1020      		lea	($FF1020).l,a1
   36060/   1C104 : 723F                		moveq	#$3F,d1
   36061/   1C106 :                     
   36062/   1C106 :                     Obj09_GhostLoop2:
   36063/   1C106 : 743F                		moveq	#$3F,d2
   36064/   1C108 :                     
   36065/   1C108 :                     Obj09_GhostLoop:
   36066/   1C108 : 0C11 0041           		cmpi.b	#$41,(a1)	; is the item a	ghost block?
   36067/   1C10C : 6604                		bne.s	Obj09_NoReplace	; if not, branch
   36068/   1C10E : 12BC 002C           		move.b	#$2C,(a1)	; replace ghost	block with a solid block
   36069/   1C112 :                     
   36070/   1C112 :                     Obj09_NoReplace:
   36071/   1C112 : 5249                		addq.w	#1,a1
   36072/   1C114 : 51CA FFF2           		dbf	d2,Obj09_GhostLoop
   36073/   1C118 : 43E9 0040           		lea	$40(a1),a1
   36074/   1C11C : 51C9 FFE8           		dbf	d1,Obj09_GhostLoop2
   36075/   1C120 :                     
   36076/   1C120 :                     Obj09_GhostNotSolid:
   36077/   1C120 : 4228 003A           		clr.b	$3A(a0)
   36078/   1C124 : 7800                		moveq	#0,d4
   36079/   1C126 : 4E75                		rts	
   36080/   1C128 :                     ; End of function Obj09_ChkItems
   36081/   1C128 :                     
   36082/   1C128 :                     
   36083/   1C128 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36084/   1C128 :                     
   36085/   1C128 :                     
   36086/   1C128 :                     Obj09_ChkItems2:			; XREF: Obj09_Display
   36087/   1C128 : 1028 0030           		move.b	$30(a0),d0
   36088/   1C12C : 661A                		bne.s	Obj09_ChkBumper
   36089/   1C12E : 5328 0036           		subq.b	#1,$36(a0)
   36090/   1C132 : 6A06                		bpl.s	loc_1BEA0
   36091/   1C134 : 117C 0000 0036      		move.b	#0,$36(a0)
   36092/   1C13A :                     
   36093/   1C13A :                     loc_1BEA0:
   36094/   1C13A : 5328 0037           		subq.b	#1,$37(a0)
   36095/   1C13E : 6A06                		bpl.s	locret_1BEAC
   36096/   1C140 : 117C 0000 0037      		move.b	#0,$37(a0)
   36097/   1C146 :                     
   36098/   1C146 :                     locret_1BEAC:
   36099/   1C146 : 4E75                		rts	
   36100/   1C148 :                     ; ===========================================================================
   36101/   1C148 :                     
   36102/   1C148 :                     Obj09_ChkBumper:
   36103/   1C148 : 0C00 0025           		cmpi.b	#$25,d0		; is the item a	bumper?
   36104/   1C14C : 6672                		bne.s	Obj09_GOAL
   36105/   1C14E : 2228 0032           		move.l	$32(a0),d1
   36106/   1C152 : 0481 00FF 0001      		subi.l	#$FF0001,d1
   36107/   1C158 : 3401                		move.w	d1,d2
   36108/   1C15A : 0241 007F           		andi.w	#$7F,d1
   36109/   1C15E : C2FC 0018           		mulu.w	#$18,d1
   36110/   1C162 : 0441 0014           		subi.w	#$14,d1
   36111/   1C166 : EE4A                		lsr.w	#7,d2
   36112/   1C168 : 0242 007F           		andi.w	#$7F,d2
   36113/   1C16C : C4FC 0018           		mulu.w	#$18,d2
   36114/   1C170 : 0442 0044           		subi.w	#$44,d2
   36115/   1C174 : 9268 0008           		sub.w	8(a0),d1
   36116/   1C178 : 9468 000C           		sub.w	$C(a0),d2
   36117/   1C17C : 4EB9 0000 2CB8      		jsr	(CalcAngle).l
   36118/   1C182 : 4EB9 0000 29EA      		jsr	(CalcSine).l
   36119/   1C188 : C3FC F900           		muls.w	#-$700,d1
   36120/   1C18C : E081                		asr.l	#8,d1
   36121/   1C18E : 3141 0010           		move.w	d1,$10(a0)
   36122/   1C192 : C1FC F900           		muls.w	#-$700,d0
   36123/   1C196 : E080                		asr.l	#8,d0
   36124/   1C198 : 3140 0012           		move.w	d0,$12(a0)
   36125/   1C19C : 08E8 0001 0022      		bset	#1,$22(a0)
   36126/   1C1A2 : 6100 F5B0           		bsr.w	SS_RemoveCollectedItem
   36127/   1C1A6 : 660E                		bne.s	Obj09_BumpSnd
   36128/   1C1A8 : 14BC 0002           		move.b	#2,(a2)
   36129/   1C1AC : 2028 0032           		move.l	$32(a0),d0
   36130/   1C1B0 : 5380                		subq.l	#1,d0
   36131/   1C1B2 : 2540 0004           		move.l	d0,4(a2)
   36132/   1C1B6 :                     
   36133/   1C1B6 :                     Obj09_BumpSnd:
   36134/   1C1B6 : 303C 00B4           		move.w	#$B4,d0
   36135/   1C1BA : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play bumper sound
   36136/   1C1C0 :                     ; ===========================================================================
   36137/   1C1C0 :                     
   36138/   1C1C0 :                     Obj09_GOAL:
   36139/   1C1C0 : 0C00 0027           		cmpi.b	#$27,d0		; is the item a	"GOAL"?
   36140/   1C1C4 : 6610                		bne.s	Obj09_UPblock
   36141/   1C1C6 : 5428 0024           		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
   36142/   1C1CA : 303C 00A8           		move.w	#$A8,d0		; change item
   36143/   1C1CE : 4EB9 0000 139C      		jsr	(PlaySound_Special).l ;	play "GOAL" sound
   36144/   1C1D4 : 4E75                		rts	
   36145/   1C1D6 :                     ; ===========================================================================
   36146/   1C1D6 :                     
   36147/   1C1D6 :                     Obj09_UPblock:
   36148/   1C1D6 : 0C00 0029           		cmpi.b	#$29,d0		; is the item an "UP" block?
   36149/   1C1DA : 662E                		bne.s	Obj09_DOWNblock
   36150/   1C1DC : 4A28 0036           		tst.b	$36(a0)
   36151/   1C1E0 : 6600 00D8           		bne.w	Obj09_NoGlass
   36152/   1C1E4 : 117C 001E 0036      		move.b	#$1E,$36(a0)
   36153/   1C1EA : 0838 0006 F783      		btst	#6,($FFFFF783).w
   36154/   1C1F0 : 670E                		beq.s	Obj09_UPsnd
   36155/   1C1F2 : E1F8 F782           		asl	($FFFFF782).w	; increase stage rotation speed
   36156/   1C1F6 : 2268 0032           		movea.l	$32(a0),a1
   36157/   1C1FA : 5389                		subq.l	#1,a1
   36158/   1C1FC : 12BC 002A           		move.b	#$2A,(a1)	; change item to a "DOWN" block
   36159/   1C200 :                     
   36160/   1C200 :                     Obj09_UPsnd:
   36161/   1C200 : 303C 00A9           		move.w	#$A9,d0
   36162/   1C204 : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play up/down sound
   36163/   1C20A :                     ; ===========================================================================
   36164/   1C20A :                     
   36165/   1C20A :                     Obj09_DOWNblock:
   36166/   1C20A : 0C00 002A           		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
   36167/   1C20E : 662E                		bne.s	Obj09_Rblock
   36168/   1C210 : 4A28 0036           		tst.b	$36(a0)
   36169/   1C214 : 6600 00A4           		bne.w	Obj09_NoGlass
   36170/   1C218 : 117C 001E 0036      		move.b	#$1E,$36(a0)
   36171/   1C21E : 0838 0006 F783      		btst	#6,($FFFFF783).w
   36172/   1C224 : 660E                		bne.s	Obj09_DOWNsnd
   36173/   1C226 : E0F8 F782           		asr	($FFFFF782).w	; reduce stage rotation	speed
   36174/   1C22A : 2268 0032           		movea.l	$32(a0),a1
   36175/   1C22E : 5389                		subq.l	#1,a1
   36176/   1C230 : 12BC 0029           		move.b	#$29,(a1)	; change item to an "UP" block
   36177/   1C234 :                     
   36178/   1C234 :                     Obj09_DOWNsnd:
   36179/   1C234 : 303C 00A9           		move.w	#$A9,d0
   36180/   1C238 : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play up/down sound
   36181/   1C23E :                     ; ===========================================================================
   36182/   1C23E :                     
   36183/   1C23E :                     Obj09_Rblock:
   36184/   1C23E : 0C00 002B           		cmpi.b	#$2B,d0		; is the item an "R" block?
   36185/   1C242 : 6630                		bne.s	Obj09_ChkGlass
   36186/   1C244 : 4A28 0037           		tst.b	$37(a0)
   36187/   1C248 : 6600 0070           		bne.w	Obj09_NoGlass
   36188/   1C24C : 117C 001E 0037      		move.b	#$1E,$37(a0)
   36189/   1C252 : 6100 F500           		bsr.w	SS_RemoveCollectedItem
   36190/   1C256 : 660E                		bne.s	Obj09_RevStage
   36191/   1C258 : 14BC 0004           		move.b	#4,(a2)
   36192/   1C25C : 2028 0032           		move.l	$32(a0),d0
   36193/   1C260 : 5380                		subq.l	#1,d0
   36194/   1C262 : 2540 0004           		move.l	d0,4(a2)
   36195/   1C266 :                     
   36196/   1C266 :                     Obj09_RevStage:
   36197/   1C266 : 4478 F782           		neg.w	($FFFFF782).w	; reverse stage	rotation
   36198/   1C26A : 303C 00A9           		move.w	#$A9,d0
   36199/   1C26E : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play sound
   36200/   1C274 :                     ; ===========================================================================
   36201/   1C274 :                     
   36202/   1C274 :                     Obj09_ChkGlass:
   36203/   1C274 : 0C00 002D           		cmpi.b	#$2D,d0		; is the item a	glass block?
   36204/   1C278 : 6712                		beq.s	Obj09_Glass	; if yes, branch
   36205/   1C27A : 0C00 002E           		cmpi.b	#$2E,d0
   36206/   1C27E : 670C                		beq.s	Obj09_Glass
   36207/   1C280 : 0C00 002F           		cmpi.b	#$2F,d0
   36208/   1C284 : 6706                		beq.s	Obj09_Glass
   36209/   1C286 : 0C00 0030           		cmpi.b	#$30,d0
   36210/   1C28A : 662E                		bne.s	Obj09_NoGlass	; if not, branch
   36211/   1C28C :                     
   36212/   1C28C :                     Obj09_Glass:
   36213/   1C28C : 6100 F4C6           		bsr.w	SS_RemoveCollectedItem
   36214/   1C290 : 661E                		bne.s	Obj09_GlassSnd
   36215/   1C292 : 14BC 0006           		move.b	#6,(a2)
   36216/   1C296 : 2268 0032           		movea.l	$32(a0),a1
   36217/   1C29A : 5389                		subq.l	#1,a1
   36218/   1C29C : 2549 0004           		move.l	a1,4(a2)
   36219/   1C2A0 : 1011                		move.b	(a1),d0
   36220/   1C2A2 : 5200                		addq.b	#1,d0		; change glass type when touched
   36221/   1C2A4 : 0C00 0030           		cmpi.b	#$30,d0
   36222/   1C2A8 : 6302                		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
   36223/   1C2AA : 4200                		clr.b	d0		; remove the glass block when it"s destroyed
   36224/   1C2AC :                     
   36225/   1C2AC :                     Obj09_GlassUpdate:
   36226/   1C2AC : 1540 0004           		move.b	d0,4(a2)	; update the stage layout
   36227/   1C2B0 :                     
   36228/   1C2B0 :                     Obj09_GlassSnd:
   36229/   1C2B0 : 303C 00BA           		move.w	#$BA,d0
   36230/   1C2B4 : 4EF9 0000 139C      		jmp	(PlaySound_Special).l ;	play glass block sound
   36231/   1C2BA :                     ; ===========================================================================
   36232/   1C2BA :                     
   36233/   1C2BA :                     Obj09_NoGlass:
   36234/   1C2BA : 4E75                		rts	
   36235/   1C2BC :                     ; End of function Obj09_ChkItems2
   36236/   1C2BC :                     
   36237/   1C2BC :                     ; ===========================================================================
   36238/   1C2BC :                     ; ---------------------------------------------------------------------------
   36239/   1C2BC :                     ; Object 10 - blank
   36240/   1C2BC :                     ; ---------------------------------------------------------------------------
   36241/   1C2BC :                     
   36242/   1C2BC :                     Obj10:					; XREF: Obj_Index
   36243/   1C2BC : 4E75                		rts	
   36244/   1C2BE :                     ; ---------------------------------------------------------------------------
   36245/   1C2BE :                     ; Subroutine to	animate	level graphics
   36246/   1C2BE :                     ; ---------------------------------------------------------------------------
   36247/   1C2BE :                     
   36248/   1C2BE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36249/   1C2BE :                     
   36250/   1C2BE :                     
   36251/   1C2BE :                     AniArt_Load:				; XREF: Demo_Time; loc_F54
   36252/   1C2BE : 4A78 F63A           		tst.w	($FFFFF63A).w	; is the game paused?
   36253/   1C2C2 : 661A                		bne.s	AniArt_Pause	; if yes, branch
   36254/   1C2C4 : 4DF9 00C0 0000      		lea	($C00000).l,a6
   36255/   1C2CA : 6100 04DE           		bsr.w	AniArt_GiantRing
   36256/   1C2CE : 7000                		moveq	#0,d0
   36257/   1C2D0 : 1038 FE10           		move.b	($FFFFFE10).w,d0
   36258/   1C2D4 : D040                		add.w	d0,d0
   36259/   1C2D6 : 303B 0008           		move.w	AniArt_Index(pc,d0.w),d0
   36260/   1C2DA : 4EFB 0004           		jmp	AniArt_Index(pc,d0.w)
   36261/   1C2DE :                     ; ===========================================================================
   36262/   1C2DE :                     
   36263/   1C2DE :                     AniArt_Pause:
   36264/   1C2DE : 4E75                		rts	
   36265/   1C2E0 :                     ; End of function AniArt_Load
   36266/   1C2E0 :                     
   36267/   1C2E0 :                     ; ===========================================================================
   36268/   1C2E0 : 000E 0370           AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
   36269/   1C2E4 : 00CC 0370           		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
   36270/   1C2E8 : 0370 01A6           		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
   36271/   1C2EC : 025C                		dc.w AniArt_Ending-AniArt_Index
   36272/   1C2EE :                     ; ===========================================================================
   36273/   1C2EE :                     ; ---------------------------------------------------------------------------
   36274/   1C2EE :                     ; Animated pattern routine - Green Hill
   36275/   1C2EE :                     ; ---------------------------------------------------------------------------
   36276/   1C2EE :                     
   36277/   1C2EE :                     AniArt_GHZ:				; XREF: AniArt_Index
   36278/   1C2EE : 5338 F7B1           		subq.b	#1,($FFFFF7B1).w
   36279/   1C2F2 : 6A30                		bpl.s	loc_1C08A
   36280/   1C2F4 : 11FC 0005 F7B1      		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
   36281/   1C2FA : 43F9 0006 7936      		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
   36282/   1C300 : 1038 F7B0           		move.b	($FFFFF7B0).w,d0
   36283/   1C304 : 5238 F7B0           		addq.b	#1,($FFFFF7B0).w
   36284/   1C308 : 0240 0001           		andi.w	#1,d0
   36285/   1C30C : 6704                		beq.s	loc_1C078
   36286/   1C30E : 43E9 0100           		lea	$100(a1),a1	; load next frame
   36287/   1C312 :                     
   36288/   1C312 :                     loc_1C078:
   36289/   1C312 : 23FC 6F00 0001 00C0 		move.l	#$6F000001,($C00004).l ; VRAM address
                    0004                
   36290/   1C31C : 323C 0007           		move.w	#7,d1		; number of 8x8	tiles
   36291/   1C320 : 6000 0330           		bra.w	LoadTiles
   36292/   1C324 :                     ; ===========================================================================
   36293/   1C324 :                     
   36294/   1C324 :                     loc_1C08A:
   36295/   1C324 : 5338 F7B3           		subq.b	#1,($FFFFF7B3).w
   36296/   1C328 : 6A30                		bpl.s	loc_1C0C0
   36297/   1C32A : 11FC 000F F7B3      		move.b	#$F,($FFFFF7B3).w
   36298/   1C330 : 43F9 0006 7B36      		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
   36299/   1C336 : 1038 F7B2           		move.b	($FFFFF7B2).w,d0
   36300/   1C33A : 5238 F7B2           		addq.b	#1,($FFFFF7B2).w
   36301/   1C33E : 0240 0001           		andi.w	#1,d0
   36302/   1C342 : 6704                		beq.s	loc_1C0AE
   36303/   1C344 : 43E9 0200           		lea	$200(a1),a1
   36304/   1C348 :                     
   36305/   1C348 :                     loc_1C0AE:
   36306/   1C348 : 23FC 6B80 0001 00C0 		move.l	#$6B800001,($C00004).l
                    0004                
   36307/   1C352 : 323C 000F           		move.w	#$F,d1
   36308/   1C356 : 6000 02FA           		bra.w	LoadTiles
   36309/   1C35A :                     ; ===========================================================================
   36310/   1C35A :                     
   36311/   1C35A :                     loc_1C0C0:
   36312/   1C35A : 5338 F7B5           		subq.b	#1,($FFFFF7B5).w
   36313/   1C35E : 6A46                		bpl.s	locret_1C10C
   36314/   1C360 : 11FC 0007 F7B5      		move.b	#7,($FFFFF7B5).w
   36315/   1C366 : 1038 F7B4           		move.b	($FFFFF7B4).w,d0
   36316/   1C36A : 5238 F7B4           		addq.b	#1,($FFFFF7B4).w
   36317/   1C36E : 0240 0003           		andi.w	#3,d0
   36318/   1C372 : 103B 0034           		move.b	byte_1C10E(pc,d0.w),d0
   36319/   1C376 : 0800 0000           		btst	#0,d0
   36320/   1C37A : 6606                		bne.s	loc_1C0E8
   36321/   1C37C : 11FC 007F F7B5      		move.b	#$7F,($FFFFF7B5).w
   36322/   1C382 :                     
   36323/   1C382 :                     loc_1C0E8:
   36324/   1C382 : EF48                		lsl.w	#7,d0
   36325/   1C384 : 3200                		move.w	d0,d1
   36326/   1C386 : D040                		add.w	d0,d0
   36327/   1C388 : D041                		add.w	d1,d0
   36328/   1C38A : 23FC 6D80 0001 00C0 		move.l	#$6D800001,($C00004).l
                    0004                
   36329/   1C394 : 43F9 0006 7F36      		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
   36330/   1C39A : 43F1 0000           		lea	(a1,d0.w),a1
   36331/   1C39E : 323C 000B           		move.w	#$B,d1
   36332/   1C3A2 : 6100 02AE           		bsr.w	LoadTiles
   36333/   1C3A6 :                     
   36334/   1C3A6 :                     locret_1C10C:
   36335/   1C3A6 : 4E75                		rts	
   36336/   1C3A8 :                     ; ===========================================================================
   36337/   1C3A8 : 0001 0201           byte_1C10E:	dc.b 0,	1, 2, 1
   36338/   1C3AC :                     ; ===========================================================================
   36339/   1C3AC :                     ; ---------------------------------------------------------------------------
   36340/   1C3AC :                     ; Animated pattern routine - Marble
   36341/   1C3AC :                     ; ---------------------------------------------------------------------------
   36342/   1C3AC :                     
   36343/   1C3AC :                     AniArt_MZ:				; XREF: AniArt_Index
   36344/   1C3AC : 5338 F7B1           		subq.b	#1,($FFFFF7B1).w
   36345/   1C3B0 : 6A38                		bpl.s	loc_1C150
   36346/   1C3B2 : 11FC 0013 F7B1      		move.b	#$13,($FFFFF7B1).w
   36347/   1C3B8 : 43F9 0006 83B6      		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
   36348/   1C3BE : 7000                		moveq	#0,d0
   36349/   1C3C0 : 1038 F7B0           		move.b	($FFFFF7B0).w,d0
   36350/   1C3C4 : 5200                		addq.b	#1,d0
   36351/   1C3C6 : 0C00 0003           		cmpi.b	#3,d0
   36352/   1C3CA : 6602                		bne.s	loc_1C134
   36353/   1C3CC : 7000                		moveq	#0,d0
   36354/   1C3CE :                     
   36355/   1C3CE :                     loc_1C134:
   36356/   1C3CE : 11C0 F7B0           		move.b	d0,($FFFFF7B0).w
   36357/   1C3D2 : C0FC 0100           		mulu.w	#$100,d0
   36358/   1C3D6 : D2C0                		adda.w	d0,a1
   36359/   1C3D8 : 23FC 5C40 0001 00C0 		move.l	#$5C400001,($C00004).l
                    0004                
   36360/   1C3E2 : 323C 0007           		move.w	#7,d1
   36361/   1C3E6 : 6100 026A           		bsr.w	LoadTiles
   36362/   1C3EA :                     
   36363/   1C3EA :                     loc_1C150:
   36364/   1C3EA : 5338 F7B3           		subq.b	#1,($FFFFF7B3).w
   36365/   1C3EE : 6A58                		bpl.s	loc_1C1AE
   36366/   1C3F0 : 11FC 0001 F7B3      		move.b	#1,($FFFFF7B3).w
   36367/   1C3F6 : 7000                		moveq	#0,d0
   36368/   1C3F8 : 1038 F7B0           		move.b	($FFFFF7B0).w,d0
   36369/   1C3FC : 49F9 0006 86B6      		lea	(Art_MzLava2).l,a4 ; load lava patterns
   36370/   1C402 : EE58                		ror.w	#7,d0
   36371/   1C404 : D8C0                		adda.w	d0,a4
   36372/   1C406 : 23FC 5A40 0001 00C0 		move.l	#$5A400001,($C00004).l
                    0004                
   36373/   1C410 : 7600                		moveq	#0,d3
   36374/   1C412 : 1638 F7B2           		move.b	($FFFFF7B2).w,d3
   36375/   1C416 : 5238 F7B2           		addq.b	#1,($FFFFF7B2).w
   36376/   1C41A : 1638 FE68           		move.b	($FFFFFE68).w,d3
   36377/   1C41E : 343C 0003           		move.w	#3,d2
   36378/   1C422 :                     
   36379/   1C422 :                     loc_1C188:
   36380/   1C422 : 3003                		move.w	d3,d0
   36381/   1C424 : D040                		add.w	d0,d0
   36382/   1C426 : 0240 001E           		andi.w	#$1E,d0
   36383/   1C42A : 47F9 0001 C668      		lea	(AniArt_MZextra).l,a3
   36384/   1C430 : 3033 0000           		move.w	(a3,d0.w),d0
   36385/   1C434 : 47F3 0000           		lea	(a3,d0.w),a3
   36386/   1C438 : 224C                		movea.l	a4,a1
   36387/   1C43A : 323C 001F           		move.w	#$1F,d1
   36388/   1C43E : 4E93                		jsr	(a3)
   36389/   1C440 : 5843                		addq.w	#4,d3
   36390/   1C442 : 51CA FFDE           		dbf	d2,loc_1C188
   36391/   1C446 : 4E75                		rts	
   36392/   1C448 :                     ; ===========================================================================
   36393/   1C448 :                     
   36394/   1C448 :                     loc_1C1AE:
   36395/   1C448 : 5338 F7B5           		subq.b	#1,($FFFFF7B5).w
   36396/   1C44C : 6A00 0036           		bpl.w	locret_1C1EA
   36397/   1C450 : 11FC 0007 F7B5      		move.b	#7,($FFFFF7B5).w
   36398/   1C456 : 43F9 0006 8CB6      		lea	(Art_MzTorch).l,a1 ; load torch	patterns
   36399/   1C45C : 7000                		moveq	#0,d0
   36400/   1C45E : 1038 F7B6           		move.b	($FFFFF7B6).w,d0
   36401/   1C462 : 5238 F7B6           		addq.b	#1,($FFFFF7B6).w
   36402/   1C466 : 0238 0003 F7B6      		andi.b	#3,($FFFFF7B6).w
   36403/   1C46C : C0FC 00C0           		mulu.w	#$C0,d0
   36404/   1C470 : D2C0                		adda.w	d0,a1
   36405/   1C472 : 23FC 5E40 0001 00C0 		move.l	#$5E400001,($C00004).l
                    0004                
   36406/   1C47C : 323C 0005           		move.w	#5,d1
   36407/   1C480 : 6000 01D0           		bra.w	LoadTiles
   36408/   1C484 :                     ; ===========================================================================
   36409/   1C484 :                     
   36410/   1C484 :                     locret_1C1EA:
   36411/   1C484 : 4E75                		rts	
   36412/   1C486 :                     ; ===========================================================================
   36413/   1C486 :                     ; ---------------------------------------------------------------------------
   36414/   1C486 :                     ; Animated pattern routine - Scrap Brain
   36415/   1C486 :                     ; ---------------------------------------------------------------------------
   36416/   1C486 :                     
   36417/   1C486 :                     AniArt_SBZ:				; XREF: AniArt_Index
   36418/   1C486 : 4A38 F7B4           		tst.b	($FFFFF7B4).w
   36419/   1C48A : 6706                		beq.s	loc_1C1F8
   36420/   1C48C : 5338 F7B4           		subq.b	#1,($FFFFF7B4).w
   36421/   1C490 : 6058                		bra.s	loc_1C250
   36422/   1C492 :                     ; ===========================================================================
   36423/   1C492 :                     
   36424/   1C492 :                     loc_1C1F8:
   36425/   1C492 : 5338 F7B1           		subq.b	#1,($FFFFF7B1).w
   36426/   1C496 : 6A52                		bpl.s	loc_1C250
   36427/   1C498 : 11FC 0007 F7B1      		move.b	#7,($FFFFF7B1).w
   36428/   1C49E : 43F9 0006 8FB6      		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
   36429/   1C4A4 : 23FC 4900 0002 00C0 		move.l	#$49000002,($C00004).l
                    0004                
   36430/   1C4AE : 1038 F7B0           		move.b	($FFFFF7B0).w,d0
   36431/   1C4B2 : 5238 F7B0           		addq.b	#1,($FFFFF7B0).w
   36432/   1C4B6 : 0240 0007           		andi.w	#7,d0
   36433/   1C4BA : 6712                		beq.s	loc_1C234
   36434/   1C4BC : 5340                		subq.w	#1,d0
   36435/   1C4BE : C0FC 0180           		mulu.w	#$180,d0
   36436/   1C4C2 : 43F1 0000           		lea	(a1,d0.w),a1
   36437/   1C4C6 : 323C 000B           		move.w	#$B,d1
   36438/   1C4CA : 6000 0186           		bra.w	LoadTiles
   36439/   1C4CE :                     ; ===========================================================================
   36440/   1C4CE :                     
   36441/   1C4CE :                     loc_1C234:
   36442/   1C4CE : 11FC 00B4 F7B4      		move.b	#$B4,($FFFFF7B4).w
   36443/   1C4D4 :                     
   36444/   1C4D4 :                     loc_1C23A:
   36445/   1C4D4 : 323C 0005           		move.w	#5,d1
   36446/   1C4D8 : 6100 0178           		bsr.w	LoadTiles
   36447/   1C4DC : 43F9 0006 8FB6      		lea	(Art_SbzSmoke).l,a1
   36448/   1C4E2 : 323C 0005           		move.w	#5,d1
   36449/   1C4E6 : 6000 016A           		bra.w	LoadTiles
   36450/   1C4EA :                     ; ===========================================================================
   36451/   1C4EA :                     
   36452/   1C4EA :                     loc_1C250:
   36453/   1C4EA : 4A38 F7B5           		tst.b	($FFFFF7B5).w
   36454/   1C4EE : 6706                		beq.s	loc_1C25C
   36455/   1C4F0 : 5338 F7B5           		subq.b	#1,($FFFFF7B5).w
   36456/   1C4F4 : 6044                		bra.s	locret_1C2A0
   36457/   1C4F6 :                     ; ===========================================================================
   36458/   1C4F6 :                     
   36459/   1C4F6 :                     loc_1C25C:
   36460/   1C4F6 : 5338 F7B3           		subq.b	#1,($FFFFF7B3).w
   36461/   1C4FA : 6A3E                		bpl.s	locret_1C2A0
   36462/   1C4FC : 11FC 0007 F7B3      		move.b	#7,($FFFFF7B3).w
   36463/   1C502 : 43F9 0006 8FB6      		lea	(Art_SbzSmoke).l,a1
   36464/   1C508 : 23FC 4A80 0002 00C0 		move.l	#$4A800002,($C00004).l
                    0004                
   36465/   1C512 : 1038 F7B2           		move.b	($FFFFF7B2).w,d0
   36466/   1C516 : 5238 F7B2           		addq.b	#1,($FFFFF7B2).w
   36467/   1C51A : 0240 0007           		andi.w	#7,d0
   36468/   1C51E : 6712                		beq.s	loc_1C298
   36469/   1C520 : 5340                		subq.w	#1,d0
   36470/   1C522 : C0FC 0180           		mulu.w	#$180,d0
   36471/   1C526 : 43F1 0000           		lea	(a1,d0.w),a1
   36472/   1C52A : 323C 000B           		move.w	#$B,d1
   36473/   1C52E : 6000 0122           		bra.w	LoadTiles
   36474/   1C532 :                     ; ===========================================================================
   36475/   1C532 :                     
   36476/   1C532 :                     loc_1C298:
   36477/   1C532 : 11FC 0078 F7B5      		move.b	#$78,($FFFFF7B5).w
   36478/   1C538 : 609A                		bra.s	loc_1C23A
   36479/   1C53A :                     ; ===========================================================================
   36480/   1C53A :                     
   36481/   1C53A :                     locret_1C2A0:
   36482/   1C53A : 4E75                		rts	
   36483/   1C53C :                     ; ===========================================================================
   36484/   1C53C :                     ; ---------------------------------------------------------------------------
   36485/   1C53C :                     ; Animated pattern routine - ending sequence
   36486/   1C53C :                     ; ---------------------------------------------------------------------------
   36487/   1C53C :                     
   36488/   1C53C :                     AniArt_Ending:				; XREF: AniArt_Index
   36489/   1C53C : 5338 F7B3           		subq.b	#1,($FFFFF7B3).w
   36490/   1C540 : 6A4C                		bpl.s	loc_1C2F4
   36491/   1C542 : 11FC 0007 F7B3      		move.b	#7,($FFFFF7B3).w
   36492/   1C548 : 43F9 0006 7B36      		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
   36493/   1C54E : 45F8 9400           		lea	($FFFF9400).w,a2
   36494/   1C552 : 1038 F7B2           		move.b	($FFFFF7B2).w,d0
   36495/   1C556 : 5238 F7B2           		addq.b	#1,($FFFFF7B2).w
   36496/   1C55A : 0240 0001           		andi.w	#1,d0
   36497/   1C55E : 6708                		beq.s	loc_1C2CE
   36498/   1C560 : 43E9 0200           		lea	$200(a1),a1
   36499/   1C564 : 45EA 0200           		lea	$200(a2),a2
   36500/   1C568 :                     
   36501/   1C568 :                     loc_1C2CE:
   36502/   1C568 : 23FC 6B80 0001 00C0 		move.l	#$6B800001,($C00004).l
                    0004                
   36503/   1C572 : 323C 000F           		move.w	#$F,d1
   36504/   1C576 : 6100 00DA           		bsr.w	LoadTiles
   36505/   1C57A : 224A                		movea.l	a2,a1
   36506/   1C57C : 23FC 7200 0001 00C0 		move.l	#$72000001,($C00004).l
                    0004                
   36507/   1C586 : 323C 000F           		move.w	#$F,d1
   36508/   1C58A : 6000 00C6           		bra.w	LoadTiles
   36509/   1C58E :                     ; ===========================================================================
   36510/   1C58E :                     
   36511/   1C58E :                     loc_1C2F4:
   36512/   1C58E : 5338 F7B5           		subq.b	#1,($FFFFF7B5).w
   36513/   1C592 : 6A42                		bpl.s	loc_1C33C
   36514/   1C594 : 11FC 0007 F7B5      		move.b	#7,($FFFFF7B5).w
   36515/   1C59A : 1038 F7B4           		move.b	($FFFFF7B4).w,d0
   36516/   1C59E : 5238 F7B4           		addq.b	#1,($FFFFF7B4).w
   36517/   1C5A2 : 0240 0007           		andi.w	#7,d0
   36518/   1C5A6 : 103B 0026           		move.b	byte_1C334(pc,d0.w),d0
   36519/   1C5AA : EF48                		lsl.w	#7,d0
   36520/   1C5AC : 3200                		move.w	d0,d1
   36521/   1C5AE : D040                		add.w	d0,d0
   36522/   1C5B0 : D041                		add.w	d1,d0
   36523/   1C5B2 : 23FC 6D80 0001 00C0 		move.l	#$6D800001,($C00004).l
                    0004                
   36524/   1C5BC : 43F9 0006 7F36      		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
   36525/   1C5C2 : 43F1 0000           		lea	(a1,d0.w),a1
   36526/   1C5C6 : 323C 000B           		move.w	#$B,d1
   36527/   1C5CA : 6000 0086           		bra.w	LoadTiles
   36528/   1C5CE :                     ; ===========================================================================
   36529/   1C5CE : 0000 0001 0202 0201 byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
   36530/   1C5D6 :                     ; ===========================================================================
   36531/   1C5D6 :                     
   36532/   1C5D6 :                     loc_1C33C:
   36533/   1C5D6 : 5338 F7B9           		subq.b	#1,($FFFFF7B9).w
   36534/   1C5DA : 6A38                		bpl.s	loc_1C37A
   36535/   1C5DC : 11FC 000E F7B9      		move.b	#$E,($FFFFF7B9).w
   36536/   1C5E2 : 1038 F7B8           		move.b	($FFFFF7B8).w,d0
   36537/   1C5E6 : 5238 F7B8           		addq.b	#1,($FFFFF7B8).w
   36538/   1C5EA : 0240 0003           		andi.w	#3,d0
   36539/   1C5EE : 103B 0020           		move.b	byte_1C376(pc,d0.w),d0
   36540/   1C5F2 : E148                		lsl.w	#8,d0
   36541/   1C5F4 : D040                		add.w	d0,d0
   36542/   1C5F6 : 23FC 7000 0001 00C0 		move.l	#$70000001,($C00004).l
                    0004                
   36543/   1C600 : 43F8 9800           		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
   36544/   1C604 : 43F1 0000           		lea	(a1,d0.w),a1
   36545/   1C608 : 323C 000F           		move.w	#$F,d1
   36546/   1C60C : 6000 0044           		bra.w	LoadTiles
   36547/   1C610 :                     ; ===========================================================================
   36548/   1C610 : 0001 0201           byte_1C376:	dc.b 0,	1, 2, 1
   36549/   1C614 :                     ; ===========================================================================
   36550/   1C614 :                     
   36551/   1C614 :                     loc_1C37A:
   36552/   1C614 : 5338 F7BB           		subq.b	#1,($FFFFF7BB).w
   36553/   1C618 : 6A34                		bpl.s	locret_1C3B4
   36554/   1C61A : 11FC 000B F7BB      		move.b	#$B,($FFFFF7BB).w
   36555/   1C620 : 1038 F7BA           		move.b	($FFFFF7BA).w,d0
   36556/   1C624 : 5238 F7BA           		addq.b	#1,($FFFFF7BA).w
   36557/   1C628 : 0240 0003           		andi.w	#3,d0
   36558/   1C62C : 103B 00E2           		move.b	byte_1C376(pc,d0.w),d0
   36559/   1C630 : E148                		lsl.w	#8,d0
   36560/   1C632 : D040                		add.w	d0,d0
   36561/   1C634 : 23FC 6800 0001 00C0 		move.l	#$68000001,($C00004).l
                    0004                
   36562/   1C63E : 43F8 9E00           		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
   36563/   1C642 : 43F1 0000           		lea	(a1,d0.w),a1
   36564/   1C646 : 323C 000F           		move.w	#$F,d1
   36565/   1C64A : 6000 0006           		bra.w	LoadTiles
   36566/   1C64E :                     ; ===========================================================================
   36567/   1C64E :                     
   36568/   1C64E :                     locret_1C3B4:
   36569/   1C64E : 4E75                		rts	
   36570/   1C650 :                     ; ===========================================================================
   36571/   1C650 :                     
   36572/   1C650 :                     AniArt_none:				; XREF: AniArt_Index
   36573/   1C650 : 4E75                		rts	
   36574/   1C652 :                     
   36575/   1C652 :                     ; ---------------------------------------------------------------------------
   36576/   1C652 :                     ; Subroutine to	load (d1 - 1) 8x8 tiles
   36577/   1C652 :                     ; ---------------------------------------------------------------------------
   36578/   1C652 :                     
   36579/   1C652 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36580/   1C652 :                     
   36581/   1C652 :                     
   36582/   1C652 :                     LoadTiles:
   36583/   1C652 : 2C99                		move.l	(a1)+,(a6)
   36584/   1C654 : 2C99                		move.l	(a1)+,(a6)
   36585/   1C656 : 2C99                		move.l	(a1)+,(a6)
   36586/   1C658 : 2C99                		move.l	(a1)+,(a6)
   36587/   1C65A : 2C99                		move.l	(a1)+,(a6)
   36588/   1C65C : 2C99                		move.l	(a1)+,(a6)
   36589/   1C65E : 2C99                		move.l	(a1)+,(a6)
   36590/   1C660 : 2C99                		move.l	(a1)+,(a6)
   36591/   1C662 : 51C9 FFEE           		dbf	d1,LoadTiles
   36592/   1C666 : 4E75                		rts	
   36593/   1C668 :                     ; End of function LoadTiles
   36594/   1C668 :                     
   36595/   1C668 :                     ; ===========================================================================
   36596/   1C668 :                     ; ---------------------------------------------------------------------------
   36597/   1C668 :                     ; Animated pattern routine - more Marble Zone
   36598/   1C668 :                     ; ---------------------------------------------------------------------------
   36599/   1C668 : 0020 002C           AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
   36600/   1C66C : 0042 0050           		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
   36601/   1C670 : 0066 0074           		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
   36602/   1C674 : 008A 0098           		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
   36603/   1C678 : 00AE 00BC           		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
   36604/   1C67C : 00D2 00E0           		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
   36605/   1C680 : 00F6 0104           		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
   36606/   1C684 : 011A 012C           		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
   36607/   1C688 :                     ; ===========================================================================
   36608/   1C688 :                     
   36609/   1C688 :                     loc_1C3EE:				; XREF: AniArt_MZextra
   36610/   1C688 : 2C91                		move.l	(a1),(a6)
   36611/   1C68A : 43E9 0010           		lea	$10(a1),a1
   36612/   1C68E : 51C9 FFF8           		dbf	d1,loc_1C3EE
   36613/   1C692 : 4E75                		rts	
   36614/   1C694 :                     ; ===========================================================================
   36615/   1C694 :                     
   36616/   1C694 :                     loc_1C3FA:				; XREF: AniArt_MZextra
   36617/   1C694 : 2029 0002           		move.l	2(a1),d0
   36618/   1C698 : 1029 0001           		move.b	1(a1),d0
   36619/   1C69C : E098                		ror.l	#8,d0
   36620/   1C69E : 2C80                		move.l	d0,(a6)
   36621/   1C6A0 : 43E9 0010           		lea	$10(a1),a1
   36622/   1C6A4 : 51C9 FFEE           		dbf	d1,loc_1C3FA
   36623/   1C6A8 : 4E75                		rts	
   36624/   1C6AA :                     ; ===========================================================================
   36625/   1C6AA :                     
   36626/   1C6AA :                     loc_1C410:				; XREF: AniArt_MZextra
   36627/   1C6AA : 2CA9 0002           		move.l	2(a1),(a6)
   36628/   1C6AE : 43E9 0010           		lea	$10(a1),a1
   36629/   1C6B2 : 51C9 FFF6           		dbf	d1,loc_1C410
   36630/   1C6B6 : 4E75                		rts	
   36631/   1C6B8 :                     ; ===========================================================================
   36632/   1C6B8 :                     
   36633/   1C6B8 :                     loc_1C41E:				; XREF: AniArt_MZextra
   36634/   1C6B8 : 2029 0004           		move.l	4(a1),d0
   36635/   1C6BC : 1029 0003           		move.b	3(a1),d0
   36636/   1C6C0 : E098                		ror.l	#8,d0
   36637/   1C6C2 : 2C80                		move.l	d0,(a6)
   36638/   1C6C4 : 43E9 0010           		lea	$10(a1),a1
   36639/   1C6C8 : 51C9 FFEE           		dbf	d1,loc_1C41E
   36640/   1C6CC : 4E75                		rts	
   36641/   1C6CE :                     ; ===========================================================================
   36642/   1C6CE :                     
   36643/   1C6CE :                     loc_1C434:				; XREF: AniArt_MZextra
   36644/   1C6CE : 2CA9 0004           		move.l	4(a1),(a6)
   36645/   1C6D2 : 43E9 0010           		lea	$10(a1),a1
   36646/   1C6D6 : 51C9 FFF6           		dbf	d1,loc_1C434
   36647/   1C6DA : 4E75                		rts	
   36648/   1C6DC :                     ; ===========================================================================
   36649/   1C6DC :                     
   36650/   1C6DC :                     loc_1C442:				; XREF: AniArt_MZextra
   36651/   1C6DC : 2029 0006           		move.l	6(a1),d0
   36652/   1C6E0 : 1029 0005           		move.b	5(a1),d0
   36653/   1C6E4 : E098                		ror.l	#8,d0
   36654/   1C6E6 : 2C80                		move.l	d0,(a6)
   36655/   1C6E8 : 43E9 0010           		lea	$10(a1),a1
   36656/   1C6EC : 51C9 FFEE           		dbf	d1,loc_1C442
   36657/   1C6F0 : 4E75                		rts	
   36658/   1C6F2 :                     ; ===========================================================================
   36659/   1C6F2 :                     
   36660/   1C6F2 :                     loc_1C458:				; XREF: AniArt_MZextra
   36661/   1C6F2 : 2CA9 0006           		move.l	6(a1),(a6)
   36662/   1C6F6 : 43E9 0010           		lea	$10(a1),a1
   36663/   1C6FA : 51C9 FFF6           		dbf	d1,loc_1C458
   36664/   1C6FE : 4E75                		rts	
   36665/   1C700 :                     ; ===========================================================================
   36666/   1C700 :                     
   36667/   1C700 :                     loc_1C466:				; XREF: AniArt_MZextra
   36668/   1C700 : 2029 0008           		move.l	8(a1),d0
   36669/   1C704 : 1029 0007           		move.b	7(a1),d0
   36670/   1C708 : E098                		ror.l	#8,d0
   36671/   1C70A : 2C80                		move.l	d0,(a6)
   36672/   1C70C : 43E9 0010           		lea	$10(a1),a1
   36673/   1C710 : 51C9 FFEE           		dbf	d1,loc_1C466
   36674/   1C714 : 4E75                		rts	
   36675/   1C716 :                     ; ===========================================================================
   36676/   1C716 :                     
   36677/   1C716 :                     loc_1C47C:				; XREF: AniArt_MZextra
   36678/   1C716 : 2CA9 0008           		move.l	8(a1),(a6)
   36679/   1C71A : 43E9 0010           		lea	$10(a1),a1
   36680/   1C71E : 51C9 FFF6           		dbf	d1,loc_1C47C
   36681/   1C722 : 4E75                		rts	
   36682/   1C724 :                     ; ===========================================================================
   36683/   1C724 :                     
   36684/   1C724 :                     loc_1C48A:				; XREF: AniArt_MZextra
   36685/   1C724 : 2029 000A           		move.l	$A(a1),d0
   36686/   1C728 : 1029 0009           		move.b	9(a1),d0
   36687/   1C72C : E098                		ror.l	#8,d0
   36688/   1C72E : 2C80                		move.l	d0,(a6)
   36689/   1C730 : 43E9 0010           		lea	$10(a1),a1
   36690/   1C734 : 51C9 FFEE           		dbf	d1,loc_1C48A
   36691/   1C738 : 4E75                		rts	
   36692/   1C73A :                     ; ===========================================================================
   36693/   1C73A :                     
   36694/   1C73A :                     loc_1C4A0:				; XREF: AniArt_MZextra
   36695/   1C73A : 2CA9 000A           		move.l	$A(a1),(a6)
   36696/   1C73E : 43E9 0010           		lea	$10(a1),a1
   36697/   1C742 : 51C9 FFF6           		dbf	d1,loc_1C4A0
   36698/   1C746 : 4E75                		rts	
   36699/   1C748 :                     ; ===========================================================================
   36700/   1C748 :                     
   36701/   1C748 :                     loc_1C4AE:				; XREF: AniArt_MZextra
   36702/   1C748 : 2029 000C           		move.l	$C(a1),d0
   36703/   1C74C : 1029 000B           		move.b	$B(a1),d0
   36704/   1C750 : E098                		ror.l	#8,d0
   36705/   1C752 : 2C80                		move.l	d0,(a6)
   36706/   1C754 : 43E9 0010           		lea	$10(a1),a1
   36707/   1C758 : 51C9 FFEE           		dbf	d1,loc_1C4AE
   36708/   1C75C : 4E75                		rts	
   36709/   1C75E :                     ; ===========================================================================
   36710/   1C75E :                     
   36711/   1C75E :                     loc_1C4C4:				; XREF: AniArt_MZextra
   36712/   1C75E : 2CA9 000C           		move.l	$C(a1),(a6)
   36713/   1C762 : 43E9 0010           		lea	$10(a1),a1
   36714/   1C766 : 51C9 FFF6           		dbf	d1,loc_1C4C4
   36715/   1C76A : 4E75                		rts	
   36716/   1C76C :                     ; ===========================================================================
   36717/   1C76C :                     
   36718/   1C76C :                     loc_1C4D2:				; XREF: AniArt_MZextra
   36719/   1C76C : 2029 000C           		move.l	$C(a1),d0
   36720/   1C770 : E198                		rol.l	#8,d0
   36721/   1C772 : (MACRO)             		_move.b	0(a1),d0
   36721/   1C772 :  (MACRO-2)                          insn2op move.b, 0(a1),d0
   36721/   1C772 : 1029 0001                                   !move.b   1+0(a1),d0
   36721/   1C775 :                                             !org    *-1
   36721/   1C775 : 00                                          !dc.b   0
   36722/   1C776 : 2C80                		move.l	d0,(a6)
   36723/   1C778 : 43E9 0010           		lea	$10(a1),a1
   36724/   1C77C : 51C9 FFEE           		dbf	d1,loc_1C4D2
   36725/   1C780 : 4E75                		rts	
   36726/   1C782 :                     ; ===========================================================================
   36727/   1C782 :                     
   36728/   1C782 :                     loc_1C4E8:				; XREF: AniArt_MZextra
   36729/   1C782 : 3CA9 000E           		move.w	$E(a1),(a6)
   36730/   1C786 : (MACRO)             		_move.w	0(a1),(a6)
   36730/   1C786 :  (MACRO-2)                          insn2op move.w, 0(a1),(a6)
   36730/   1C786 :                     start:
   36730/   1C786 : 3CA9 0001                                   !move.w   1+0(a1),(a6)
   36730/   1C78A :                     end:
   36730/   1C789 :                                             !org    start+3
   36730/   1C789 : 00                                          !dc.b   0
   36730/   1C78A :                                             !org    end
   36731/   1C78A : 43E9 0010           		lea	$10(a1),a1
   36732/   1C78E : 51C9 FFF2           		dbf	d1,loc_1C4E8
   36733/   1C792 : 4E75                		rts	
   36734/   1C794 :                     ; ===========================================================================
   36735/   1C794 :                     
   36736/   1C794 :                     loc_1C4FA:				; XREF: AniArt_MZextra
   36737/   1C794 : (MACRO)             		_move.l	0(a1),d0
   36737/   1C794 :  (MACRO-2)                          insn2op move.l, 0(a1),d0
   36737/   1C794 : 2029 0001                                   !move.l   1+0(a1),d0
   36737/   1C797 :                                             !org    *-1
   36737/   1C797 : 00                                          !dc.b   0
   36738/   1C798 : 1029 000F           		move.b	$F(a1),d0
   36739/   1C79C : E098                		ror.l	#8,d0
   36740/   1C79E : 2C80                		move.l	d0,(a6)
   36741/   1C7A0 : 43E9 0010           		lea	$10(a1),a1
   36742/   1C7A4 : 51C9 FFEE           		dbf	d1,loc_1C4FA
   36743/   1C7A8 : 4E75                		rts	
   36744/   1C7AA :                     
   36745/   1C7AA :                     ; ---------------------------------------------------------------------------
   36746/   1C7AA :                     ; Animated pattern routine - giant ring
   36747/   1C7AA :                     ; ---------------------------------------------------------------------------
   36748/   1C7AA :                     
   36749/   1C7AA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36750/   1C7AA :                     
   36751/   1C7AA :                     
   36752/   1C7AA :                     AniArt_GiantRing:			; XREF: AniArt_Load
   36753/   1C7AA : 4A78 F7BE           		tst.w	($FFFFF7BE).w
   36754/   1C7AE : 6602                		bne.s	loc_1C518
   36755/   1C7B0 : 4E75                		rts	
   36756/   1C7B2 :                     ; ===========================================================================
   36757/   1C7B2 :                     
   36758/   1C7B2 :                     loc_1C518:
   36759/   1C7B2 : 0478 01C0 F7BE      		subi.w	#$1C0,($FFFFF7BE).w
   36760/   1C7B8 : 43F9 0006 B194      		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
   36761/   1C7BE : 7000                		moveq	#0,d0
   36762/   1C7C0 : 3038 F7BE           		move.w	($FFFFF7BE).w,d0
   36763/   1C7C4 : 43F1 0000           		lea	(a1,d0.w),a1
   36764/   1C7C8 : 0640 8000           		addi.w	#$8000,d0
   36765/   1C7CC : E588                		lsl.l	#2,d0
   36766/   1C7CE : E448                		lsr.w	#2,d0
   36767/   1C7D0 : 0040 4000           		ori.w	#$4000,d0
   36768/   1C7D4 : 4840                		swap	d0
   36769/   1C7D6 : 2D40 0004           		move.l	d0,4(a6)
   36770/   1C7DA : 323C 000D           		move.w	#$D,d1
   36771/   1C7DE : 6000 FE72           		bra.w	LoadTiles
   36772/   1C7E2 :                     ; End of function AniArt_GiantRing
   36773/   1C7E2 :                     
   36774/   1C7E2 :                     ; ===========================================================================
   36775/   1C7E2 :                     ; ---------------------------------------------------------------------------
   36776/   1C7E2 :                     ; Object 21 - SCORE, TIME, RINGS
   36777/   1C7E2 :                     ; ---------------------------------------------------------------------------
   36778/   1C7E2 :                     
   36779/   1C7E2 :                     Obj21:					; XREF: Obj_Index
   36780/   1C7E2 : 7000                		moveq	#0,d0
   36781/   1C7E4 : 1028 0024           		move.b	$24(a0),d0
   36782/   1C7E8 : 323B 0006           		move.w	Obj21_Index(pc,d0.w),d1
   36783/   1C7EC : 4EFB 1002           		jmp	Obj21_Index(pc,d1.w)
   36784/   1C7F0 :                     ; ===========================================================================
   36785/   1C7F0 : 0004                Obj21_Index:	dc.w Obj21_Main-Obj21_Index
   36786/   1C7F2 : 002E                		dc.w Obj21_Flash-Obj21_Index
   36787/   1C7F4 :                     ; ===========================================================================
   36788/   1C7F4 :                     
   36789/   1C7F4 :                     Obj21_Main:				; XREF: Obj21_Main
   36790/   1C7F4 : 5428 0024           		addq.b	#2,$24(a0)
   36791/   1C7F8 : 317C 0090 0008      		move.w	#$90,8(a0)
   36792/   1C7FE : 317C 0108 000A      		move.w	#$108,$A(a0)
   36793/   1C804 : 217C 0001 C84E 0004 		move.l	#Map_obj21,4(a0)
   36794/   1C80C : 317C 06CA 0002      		move.w	#$6CA,2(a0)
   36795/   1C812 : 117C 0000 0001      		move.b	#0,1(a0)
   36796/   1C818 : 117C 0000 0018      		move.b	#0,$18(a0)
   36797/   1C81E :                     
   36798/   1C81E :                     Obj21_Flash:				; XREF: Obj21_Main
   36799/   1C81E : 4A78 FE20           		tst.w	($FFFFFE20).w	; do you have any rings?
   36800/   1C822 : 670A                		beq.s	Obj21_Flash2	; if not, branch
   36801/   1C824 : 4228 001A           		clr.b	$1A(a0)		; make all counters yellow
   36802/   1C828 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   36803/   1C82E :                     ; ===========================================================================
   36804/   1C82E :                     
   36805/   1C82E :                     Obj21_Flash2:
   36806/   1C82E : 7000                		moveq	#0,d0
   36807/   1C830 : 0838 0003 FE05      		btst	#3,($FFFFFE05).w
   36808/   1C836 : 660C                		bne.s	Obj21_Display
   36809/   1C838 : 5240                		addq.w	#1,d0		; make ring counter flash red
   36810/   1C83A : 0C38 0009 FE23      		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
   36811/   1C840 : 6602                		bne.s	Obj21_Display	; if not, branch
   36812/   1C842 : 5440                		addq.w	#2,d0		; make time counter flash red
   36813/   1C844 :                     
   36814/   1C844 :                     Obj21_Display:
   36815/   1C844 : 1140 001A           		move.b	d0,$1A(a0)
   36816/   1C848 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   36817/   1C84E :                     ; ===========================================================================
   36818/   1C84E :                     ; ---------------------------------------------------------------------------
   36819/   1C84E :                     ; Sprite mappings - SCORE, TIME, RINGS
   36820/   1C84E :                     ; ---------------------------------------------------------------------------
   36821/   1C84E :                     Map_obj21:
   36822/   1C84E :                     		include	"_maps/obj21.asm"
(1)    1/   1C84E :                     Map_e1ab:
(1)    2/   1C84E : 0008                Map_e1ab_0: 	dc.w Map_e1ab_8-Map_e1ab
(1)    3/   1C850 : 003B                Map_e1ab_2: 	dc.w Map_e1ab_3B-Map_e1ab
(1)    4/   1C852 : 006E                Map_e1ab_4: 	dc.w Map_e1ab_6E-Map_e1ab
(1)    5/   1C854 : 00A1                Map_e1ab_6: 	dc.w Map_e1ab_A1-Map_e1ab
(1)    6/   1C856 : 0A                  Map_e1ab_8: 	dc.b $A
(1)    7/   1C857 : 800D 8000 00        	dc.b $80, $D, $80, $0, $0
(1)    8/   1C85C : 800D 8018 20        	dc.b $80, $D, $80, $18, $20
(1)    9/   1C861 : 800D 8020 40        	dc.b $80, $D, $80, $20, $40
(1)   10/   1C866 : 900D 8010 00        	dc.b $90, $D, $80, $10, $0
(1)   11/   1C86B : 900D 8028 28        	dc.b $90, $D, $80, $28, $28
(1)   12/   1C870 : A00D 8008 00        	dc.b $A0, $D, $80, $8, $0
(1)   13/   1C875 : A001 8000 20        	dc.b $A0, $1, $80, $0, $20
(1)   14/   1C87A : A009 8030 30        	dc.b $A0, $9, $80, $30, $30
(1)   15/   1C87F : 4005 810A 00        	dc.b $40, $5, $81, $A, $0
(1)   16/   1C884 : 400D 810E 10        	dc.b $40, $D, $81, $E, $10
(1)   17/   1C889 : 0A                  Map_e1ab_3B: 	dc.b $A
(1)   18/   1C88A : 800D 8000 00        	dc.b $80, $D, $80, $0, $0
(1)   19/   1C88F : 800D 8018 20        	dc.b $80, $D, $80, $18, $20
(1)   20/   1C894 : 800D 8020 40        	dc.b $80, $D, $80, $20, $40
(1)   21/   1C899 : 900D 8010 00        	dc.b $90, $D, $80, $10, $0
(1)   22/   1C89E : 900D 8028 28        	dc.b $90, $D, $80, $28, $28
(1)   23/   1C8A3 : A00D A008 00        	dc.b $A0, $D, $A0, $8, $0
(1)   24/   1C8A8 : A001 A000 20        	dc.b $A0, $1, $A0, $0, $20
(1)   25/   1C8AD : A009 8030 30        	dc.b $A0, $9, $80, $30, $30
(1)   26/   1C8B2 : 4005 810A 00        	dc.b $40, $5, $81, $A, $0
(1)   27/   1C8B7 : 400D 810E 10        	dc.b $40, $D, $81, $E, $10
(1)   28/   1C8BC : 0A                  Map_e1ab_6E: 	dc.b $A
(1)   29/   1C8BD : 800D 8000 00        	dc.b $80, $D, $80, $0, $0
(1)   30/   1C8C2 : 800D 8018 20        	dc.b $80, $D, $80, $18, $20
(1)   31/   1C8C7 : 800D 8020 40        	dc.b $80, $D, $80, $20, $40
(1)   32/   1C8CC : 900D A010 00        	dc.b $90, $D, $A0, $10, $0
(1)   33/   1C8D1 : 900D 8028 28        	dc.b $90, $D, $80, $28, $28
(1)   34/   1C8D6 : A00D 8008 00        	dc.b $A0, $D, $80, $8, $0
(1)   35/   1C8DB : A001 8000 20        	dc.b $A0, $1, $80, $0, $20
(1)   36/   1C8E0 : A009 8030 30        	dc.b $A0, $9, $80, $30, $30
(1)   37/   1C8E5 : 4005 810A 00        	dc.b $40, $5, $81, $A, $0
(1)   38/   1C8EA : 400D 810E 10        	dc.b $40, $D, $81, $E, $10
(1)   39/   1C8EF : 0A                  Map_e1ab_A1: 	dc.b $A
(1)   40/   1C8F0 : 800D 8000 00        	dc.b $80, $D, $80, $0, $0
(1)   41/   1C8F5 : 800D 8018 20        	dc.b $80, $D, $80, $18, $20
(1)   42/   1C8FA : 800D 8020 40        	dc.b $80, $D, $80, $20, $40
(1)   43/   1C8FF : 900D A010 00        	dc.b $90, $D, $A0, $10, $0
(1)   44/   1C904 : 900D 8028 28        	dc.b $90, $D, $80, $28, $28
(1)   45/   1C909 : A00D A008 00        	dc.b $A0, $D, $A0, $8, $0
(1)   46/   1C90E : A001 A000 20        	dc.b $A0, $1, $A0, $0, $20
(1)   47/   1C913 : A009 8030 30        	dc.b $A0, $9, $80, $30, $30
(1)   48/   1C918 : 4005 810A 00        	dc.b $40, $5, $81, $A, $0
(1)   49/   1C91D : 400D 810E 10        	dc.b $40, $D, $81, $E, $10
(1)   50/   1C922 : (MACRO)             	even
   36823/   1C922 :                     
   36824/   1C922 :                     ; ---------------------------------------------------------------------------
   36825/   1C922 :                     ; Add points subroutine
   36826/   1C922 :                     ; ---------------------------------------------------------------------------
   36827/   1C922 :                     
   36828/   1C922 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36829/   1C922 :                     
   36830/   1C922 :                     
   36831/   1C922 :                     AddPoints:
   36832/   1C922 : 11FC 0001 FE1F      		move.b	#1,($FFFFFE1F).w ; set score counter to	update
   36833/   1C928 : 45F8 FFC0           		lea	($FFFFFFC0).w,a2
   36834/   1C92C : 47F8 FE26           		lea	($FFFFFE26).w,a3
   36835/   1C930 : D193                		add.l	d0,(a3)		; add d0*10 to the score
   36836/   1C932 : 223C 000F 423F      		move.l	#999999,d1
   36837/   1C938 : B293                		cmp.l	(a3),d1		; is #999999 higher than the score?
   36838/   1C93A : 6200 0006           		bhi.w	loc_1C6AC	; if yes, branch
   36839/   1C93E : 2681                		move.l	d1,(a3)		; reset	score to #999999
   36840/   1C940 : 2481                		move.l	d1,(a2)
   36841/   1C942 :                     
   36842/   1C942 :                     loc_1C6AC:
   36843/   1C942 : 2013                		move.l	(a3),d0
   36844/   1C944 : B092                		cmp.l	(a2),d0
   36845/   1C946 : 6500 0004           		bcs.w	locret_1C6B6
   36846/   1C94A : 2480                		move.l	d0,(a2)
   36847/   1C94C :                     
   36848/   1C94C :                     locret_1C6B6:
   36849/   1C94C : 4E75                		rts	
   36850/   1C94E :                     ; End of function AddPoints
   36851/   1C94E :                     
   36852/   1C94E :                     ; ---------------------------------------------------------------------------
   36853/   1C94E :                     ; Subroutine to	update the HUD
   36854/   1C94E :                     ; ---------------------------------------------------------------------------
   36855/   1C94E :                     
   36856/   1C94E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36857/   1C94E :                     
   36858/   1C94E :                     
   36859/   1C94E :                     HudUpdate:
   36860/   1C94E : 4A78 FFFA           		tst.w	($FFFFFFFA).w	; is debug mode	on?
   36861/   1C952 : 6600 00E4           		bne.w	HudDebug	; if yes, branch
   36862/   1C956 : 4A38 FE1F           		tst.b	($FFFFFE1F).w	; does the score need updating?
   36863/   1C95A : 6712                		beq.s	Hud_ChkRings	; if not, branch
   36864/   1C95C : 4238 FE1F           		clr.b	($FFFFFE1F).w
   36865/   1C960 : 203C 5C80 0003      		move.l	#$5C800003,d0	; set VRAM address
   36866/   1C966 : 2238 FE26           		move.l	($FFFFFE26).w,d1 ; load	score
   36867/   1C96A : 6100 0204           		bsr.w	Hud_Score
   36868/   1C96E :                     
   36869/   1C96E :                     Hud_ChkRings:
   36870/   1C96E : 4A38 FE1D           		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
   36871/   1C972 : 671A                		beq.s	Hud_ChkTime	; if not, branch
   36872/   1C974 : 6A04                		bpl.s	loc_1C6E4
   36873/   1C976 : 6100 012C           		bsr.w	Hud_LoadZero
   36874/   1C97A :                     
   36875/   1C97A :                     loc_1C6E4:
   36876/   1C97A : 4238 FE1D           		clr.b	($FFFFFE1D).w
   36877/   1C97E : 203C 5F40 0003      		move.l	#$5F400003,d0	; set VRAM address
   36878/   1C984 : 7200                		moveq	#0,d1
   36879/   1C986 : 3238 FE20           		move.w	($FFFFFE20).w,d1 ; load	number of rings
   36880/   1C98A : 6100 01DA           		bsr.w	Hud_Rings
   36881/   1C98E :                     
   36882/   1C98E :                     Hud_ChkTime:
   36883/   1C98E : 4A38 FE1E           		tst.b	($FFFFFE1E).w	; does the time	need updating?
   36884/   1C992 : 6756                		beq.s	Hud_ChkLives	; if not, branch
   36885/   1C994 : 4A78 F63A           		tst.w	($FFFFF63A).w	; is the game paused?
   36886/   1C998 : 6650                		bne.s	Hud_ChkLives	; if yes, branch
   36887/   1C99A : 43F8 FE22           		lea	($FFFFFE22).w,a1
   36888/   1C99E : 0C99 0009 3B3B      		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
   36889/   1C9A4 : 677C                		beq.s	TimeOver	; if yes, branch
   36890/   1C9A6 : 5221                		addq.b	#1,-(a1)
   36891/   1C9A8 : 0C11 003C           		cmpi.b	#60,(a1)
   36892/   1C9AC : 653C                		bcs.s	Hud_ChkLives
   36893/   1C9AE : 12BC 0000           		move.b	#0,(a1)
   36894/   1C9B2 : 5221                		addq.b	#1,-(a1)
   36895/   1C9B4 : 0C11 003C           		cmpi.b	#60,(a1)
   36896/   1C9B8 : 6510                		bcs.s	loc_1C734
   36897/   1C9BA : 12BC 0000           		move.b	#0,(a1)
   36898/   1C9BE : 5221                		addq.b	#1,-(a1)
   36899/   1C9C0 : 0C11 0009           		cmpi.b	#9,(a1)
   36900/   1C9C4 : 6504                		bcs.s	loc_1C734
   36901/   1C9C6 : 12BC 0009           		move.b	#9,(a1)
   36902/   1C9CA :                     
   36903/   1C9CA :                     loc_1C734:
   36904/   1C9CA : 203C 5E40 0003      		move.l	#$5E400003,d0
   36905/   1C9D0 : 7200                		moveq	#0,d1
   36906/   1C9D2 : 1238 FE23           		move.b	($FFFFFE23).w,d1 ; load	minutes
   36907/   1C9D6 : 6100 0266           		bsr.w	Hud_Mins
   36908/   1C9DA : 203C 5EC0 0003      		move.l	#$5EC00003,d0
   36909/   1C9E0 : 7200                		moveq	#0,d1
   36910/   1C9E2 : 1238 FE24           		move.b	($FFFFFE24).w,d1 ; load	seconds
   36911/   1C9E6 : 6100 0260           		bsr.w	Hud_Secs
   36912/   1C9EA :                     
   36913/   1C9EA :                     Hud_ChkLives:
   36914/   1C9EA : 4A38 FE1C           		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
   36915/   1C9EE : 6708                		beq.s	Hud_ChkBonus	; if not, branch
   36916/   1C9F0 : 4238 FE1C           		clr.b	($FFFFFE1C).w
   36917/   1C9F4 : 6100 030E           		bsr.w	Hud_Lives
   36918/   1C9F8 :                     
   36919/   1C9F8 :                     Hud_ChkBonus:
   36920/   1C9F8 : 4A38 F7D6           		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
   36921/   1C9FC : 6722                		beq.s	Hud_End		; if not, branch
   36922/   1C9FE : 4238 F7D6           		clr.b	($FFFFF7D6).w
   36923/   1CA02 : 23FC 6E00 0002 00C0 		move.l	#$6E000002,($C00004).l
                    0004                
   36924/   1CA0C : 7200                		moveq	#0,d1
   36925/   1CA0E : 3238 F7D2           		move.w	($FFFFF7D2).w,d1 ; load	time bonus
   36926/   1CA12 : 6100 028E           		bsr.w	Hud_TimeRingBonus
   36927/   1CA16 : 7200                		moveq	#0,d1
   36928/   1CA18 : 3238 F7D4           		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
   36929/   1CA1C : 6100 0284           		bsr.w	Hud_TimeRingBonus
   36930/   1CA20 :                     
   36931/   1CA20 :                     Hud_End:
   36932/   1CA20 : 4E75                		rts	
   36933/   1CA22 :                     ; ===========================================================================
   36934/   1CA22 :                     
   36935/   1CA22 :                     TimeOver:				; XREF: Hud_ChkTime
   36936/   1CA22 : 4238 FE1E           		clr.b	($FFFFFE1E).w
   36937/   1CA26 : 41F8 D000           		lea	($FFFFD000).w,a0
   36938/   1CA2A : 2448                		movea.l	a0,a2
   36939/   1CA2C : 6100 E904           		bsr.w	KillSonic
   36940/   1CA30 : 11FC 0001 FE1A      		move.b	#1,($FFFFFE1A).w
   36941/   1CA36 : 4E75                		rts	
   36942/   1CA38 :                     ; ===========================================================================
   36943/   1CA38 :                     
   36944/   1CA38 :                     HudDebug:				; XREF: HudUpdate
   36945/   1CA38 : 6100 00D6           		bsr.w	HudDb_XY
   36946/   1CA3C : 4A38 FE1D           		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
   36947/   1CA40 : 671A                		beq.s	HudDb_ObjCount	; if not, branch
   36948/   1CA42 : 6A04                		bpl.s	HudDb_Rings
   36949/   1CA44 : 6100 005E           		bsr.w	Hud_LoadZero
   36950/   1CA48 :                     
   36951/   1CA48 :                     HudDb_Rings:
   36952/   1CA48 : 4238 FE1D           		clr.b	($FFFFFE1D).w
   36953/   1CA4C : 203C 5F40 0003      		move.l	#$5F400003,d0	; set VRAM address
   36954/   1CA52 : 7200                		moveq	#0,d1
   36955/   1CA54 : 3238 FE20           		move.w	($FFFFFE20).w,d1 ; load	number of rings
   36956/   1CA58 : 6100 010C           		bsr.w	Hud_Rings
   36957/   1CA5C :                     
   36958/   1CA5C :                     HudDb_ObjCount:
   36959/   1CA5C : 203C 5EC0 0003      		move.l	#$5EC00003,d0	; set VRAM address
   36960/   1CA62 : 7200                		moveq	#0,d1
   36961/   1CA64 : 1238 F62C           		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
   36962/   1CA68 : 6100 01DE           		bsr.w	Hud_Secs
   36963/   1CA6C : 4A38 FE1C           		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
   36964/   1CA70 : 6708                		beq.s	HudDb_ChkBonus	; if not, branch
   36965/   1CA72 : 4238 FE1C           		clr.b	($FFFFFE1C).w
   36966/   1CA76 : 6100 028C           		bsr.w	Hud_Lives
   36967/   1CA7A :                     
   36968/   1CA7A :                     HudDb_ChkBonus:
   36969/   1CA7A : 4A38 F7D6           		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
   36970/   1CA7E : 6722                		beq.s	HudDb_End	; if not, branch
   36971/   1CA80 : 4238 F7D6           		clr.b	($FFFFF7D6).w
   36972/   1CA84 : 23FC 6E00 0002 00C0 		move.l	#$6E000002,($C00004).l ; set VRAM address
                    0004                
   36973/   1CA8E : 7200                		moveq	#0,d1
   36974/   1CA90 : 3238 F7D2           		move.w	($FFFFF7D2).w,d1 ; load	time bonus
   36975/   1CA94 : 6100 020C           		bsr.w	Hud_TimeRingBonus
   36976/   1CA98 : 7200                		moveq	#0,d1
   36977/   1CA9A : 3238 F7D4           		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
   36978/   1CA9E : 6100 0202           		bsr.w	Hud_TimeRingBonus
   36979/   1CAA2 :                     
   36980/   1CAA2 :                     HudDb_End:
   36981/   1CAA2 : 4E75                		rts	
   36982/   1CAA4 :                     ; End of function HudUpdate
   36983/   1CAA4 :                     
   36984/   1CAA4 :                     ; ---------------------------------------------------------------------------
   36985/   1CAA4 :                     ; Subroutine to	load "0" on the	HUD
   36986/   1CAA4 :                     ; ---------------------------------------------------------------------------
   36987/   1CAA4 :                     
   36988/   1CAA4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36989/   1CAA4 :                     
   36990/   1CAA4 :                     
   36991/   1CAA4 :                     Hud_LoadZero:				; XREF: HudUpdate
   36992/   1CAA4 : 23FC 5F40 0003 00C0 		move.l	#$5F400003,($C00004).l
                    0004                
   36993/   1CAAE : 45FA 005C           		lea	Hud_TilesZero(pc),a2
   36994/   1CAB2 : 343C 0002           		move.w	#2,d2
   36995/   1CAB6 : 601C                		bra.s	loc_1C83E
   36996/   1CAB8 :                     ; End of function Hud_LoadZero
   36997/   1CAB8 :                     
   36998/   1CAB8 :                     ; ---------------------------------------------------------------------------
   36999/   1CAB8 :                     ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
   37000/   1CAB8 :                     ; ---------------------------------------------------------------------------
   37001/   1CAB8 :                     
   37002/   1CAB8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37003/   1CAB8 :                     
   37004/   1CAB8 :                     
   37005/   1CAB8 :                     Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
   37006/   1CAB8 : 4DF9 00C0 0000      		lea	($C00000).l,a6
   37007/   1CABE : 6100 0244           		bsr.w	Hud_Lives
   37008/   1CAC2 : 23FC 5C40 0003 00C0 		move.l	#$5C400003,($C00004).l
                    0004                
   37009/   1CACC : 45FA 0032           		lea	Hud_TilesBase(pc),a2
   37010/   1CAD0 : 343C 000E           		move.w	#$E,d2
   37011/   1CAD4 :                     
   37012/   1CAD4 :                     loc_1C83E:				; XREF: Hud_LoadZero
   37013/   1CAD4 : 43FA 029A           		lea	Art_Hud(pc),a1
   37014/   1CAD8 :                     
   37015/   1CAD8 :                     loc_1C842:
   37016/   1CAD8 : 323C 000F           		move.w	#$F,d1
   37017/   1CADC : 101A                		move.b	(a2)+,d0
   37018/   1CADE : 6B14                		bmi.s	loc_1C85E
   37019/   1CAE0 : 4880                		ext.w	d0
   37020/   1CAE2 : EB48                		lsl.w	#5,d0
   37021/   1CAE4 : 47F1 0000           		lea	(a1,d0.w),a3
   37022/   1CAE8 :                     
   37023/   1CAE8 :                     loc_1C852:
   37024/   1CAE8 : 2C9B                		move.l	(a3)+,(a6)
   37025/   1CAEA : 51C9 FFFC           		dbf	d1,loc_1C852
   37026/   1CAEE :                     
   37027/   1CAEE :                     loc_1C858:
   37028/   1CAEE : 51CA FFE8           		dbf	d2,loc_1C842
   37029/   1CAF2 :                     
   37030/   1CAF2 : 4E75                		rts	
   37031/   1CAF4 :                     ; ===========================================================================
   37032/   1CAF4 :                     
   37033/   1CAF4 :                     loc_1C85E:
   37034/   1CAF4 : 2CBC 0000 0000      		move.l	#0,(a6)
   37035/   1CAFA : 51C9 FFF8           		dbf	d1,loc_1C85E
   37036/   1CAFE :                     
   37037/   1CAFE : 60EE                		bra.s	loc_1C858
   37038/   1CB00 :                     ; End of function Hud_Base
   37039/   1CB00 :                     
   37040/   1CB00 :                     ; ===========================================================================
   37041/   1CB00 : 16FF FFFF FFFF FF00 Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
                    0014 0000           
   37042/   1CB0C : FFFF 0000           Hud_TilesZero:	dc.b $FF, $FF, 0, 0
   37043/   1CB10 :                     ; ---------------------------------------------------------------------------
   37044/   1CB10 :                     ; Subroutine to	load debug mode	numbers	patterns
   37045/   1CB10 :                     ; ---------------------------------------------------------------------------
   37046/   1CB10 :                     
   37047/   1CB10 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37048/   1CB10 :                     
   37049/   1CB10 :                     
   37050/   1CB10 :                     HudDb_XY:				; XREF: HudDebug
   37051/   1CB10 : 23FC 5C40 0003 00C0 		move.l	#$5C400003,($C00004).l ; set VRAM address
                    0004                
   37052/   1CB1A : 3238 F700           		move.w	($FFFFF700).w,d1 ; load	camera x-position
   37053/   1CB1E : 4841                		swap	d1
   37054/   1CB20 : 3238 D008           		move.w	($FFFFD008).w,d1 ; load	Sonic"s x-position
   37055/   1CB24 : 610A                		bsr.s	HudDb_XY2
   37056/   1CB26 : 3238 F704           		move.w	($FFFFF704).w,d1 ; load	camera y-position
   37057/   1CB2A : 4841                		swap	d1
   37058/   1CB2C : 3238 D00C           		move.w	($FFFFD00C).w,d1 ; load	Sonic"s y-position
   37059/   1CB30 :                     ; End of function HudDb_XY
   37060/   1CB30 :                     
   37061/   1CB30 :                     
   37062/   1CB30 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37063/   1CB30 :                     
   37064/   1CB30 :                     
   37065/   1CB30 :                     HudDb_XY2:
   37066/   1CB30 : 7C07                		moveq	#7,d6
   37067/   1CB32 : 43F9 0000 05F0      		lea	(Art_Text).l,a1
   37068/   1CB38 :                     
   37069/   1CB38 :                     HudDb_XYLoop:
   37070/   1CB38 : E959                		rol.w	#4,d1
   37071/   1CB3A : 3401                		move.w	d1,d2
   37072/   1CB3C : 0242 000F           		andi.w	#$F,d2
   37073/   1CB40 : 0C42 000A           		cmpi.w	#$A,d2
   37074/   1CB44 : 6502                		bcs.s	loc_1C8B2
   37075/   1CB46 : 5E42                		addq.w	#7,d2
   37076/   1CB48 :                     
   37077/   1CB48 :                     loc_1C8B2:
   37078/   1CB48 : EB4A                		lsl.w	#5,d2
   37079/   1CB4A : 47F1 2000           		lea	(a1,d2.w),a3
   37080/   1CB4E : 2C9B                		move.l	(a3)+,(a6)
   37081/   1CB50 : 2C9B                		move.l	(a3)+,(a6)
   37082/   1CB52 : 2C9B                		move.l	(a3)+,(a6)
   37083/   1CB54 : 2C9B                		move.l	(a3)+,(a6)
   37084/   1CB56 : 2C9B                		move.l	(a3)+,(a6)
   37085/   1CB58 : 2C9B                		move.l	(a3)+,(a6)
   37086/   1CB5A : 2C9B                		move.l	(a3)+,(a6)
   37087/   1CB5C : 2C9B                		move.l	(a3)+,(a6)
   37088/   1CB5E : 4841                		swap	d1
   37089/   1CB60 : 51CE FFD6           		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
   37090/   1CB64 :                     
   37091/   1CB64 : 4E75                		rts	
   37092/   1CB66 :                     ; End of function HudDb_XY2
   37093/   1CB66 :                     
   37094/   1CB66 :                     ; ---------------------------------------------------------------------------
   37095/   1CB66 :                     ; Subroutine to	load rings numbers patterns
   37096/   1CB66 :                     ; ---------------------------------------------------------------------------
   37097/   1CB66 :                     
   37098/   1CB66 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37099/   1CB66 :                     
   37100/   1CB66 :                     
   37101/   1CB66 :                     Hud_Rings:				; XREF: HudUpdate
   37102/   1CB66 : 45F9 0001 CC32      		lea	(Hud_100).l,a2
   37103/   1CB6C : 7C02                		moveq	#2,d6
   37104/   1CB6E : 6008                		bra.s	Hud_LoadArt
   37105/   1CB70 :                     ; End of function Hud_Rings
   37106/   1CB70 :                     
   37107/   1CB70 :                     ; ---------------------------------------------------------------------------
   37108/   1CB70 :                     ; Subroutine to	load score numbers patterns
   37109/   1CB70 :                     ; ---------------------------------------------------------------------------
   37110/   1CB70 :                     
   37111/   1CB70 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37112/   1CB70 :                     
   37113/   1CB70 :                     
   37114/   1CB70 :                     Hud_Score:				; XREF: HudUpdate
   37115/   1CB70 : 45F9 0001 CC26      		lea	(Hud_100000).l,a2
   37116/   1CB76 : 7C05                		moveq	#5,d6
   37117/   1CB78 :                     
   37118/   1CB78 :                     Hud_LoadArt:
   37119/   1CB78 : 7800                		moveq	#0,d4
   37120/   1CB7A : 43FA 01F4           		lea	Art_Hud(pc),a1
   37121/   1CB7E :                     
   37122/   1CB7E :                     Hud_ScoreLoop:
   37123/   1CB7E : 7400                		moveq	#0,d2
   37124/   1CB80 : 261A                		move.l	(a2)+,d3
   37125/   1CB82 :                     
   37126/   1CB82 :                     loc_1C8EC:
   37127/   1CB82 : 9283                		sub.l	d3,d1
   37128/   1CB84 : 6504                		bcs.s	loc_1C8F4
   37129/   1CB86 : 5242                		addq.w	#1,d2
   37130/   1CB88 : 60F8                		bra.s	loc_1C8EC
   37131/   1CB8A :                     ; ===========================================================================
   37132/   1CB8A :                     
   37133/   1CB8A :                     loc_1C8F4:
   37134/   1CB8A : D283                		add.l	d3,d1
   37135/   1CB8C : 4A42                		tst.w	d2
   37136/   1CB8E : 6704                		beq.s	loc_1C8FE
   37137/   1CB90 : 383C 0001           		move.w	#1,d4
   37138/   1CB94 :                     
   37139/   1CB94 :                     loc_1C8FE:
   37140/   1CB94 : 4A44                		tst.w	d4
   37141/   1CB96 : 672A                		beq.s	loc_1C92C
   37142/   1CB98 : ED4A                		lsl.w	#6,d2
   37143/   1CB9A : 2D40 0004           		move.l	d0,4(a6)
   37144/   1CB9E : 47F1 2000           		lea	(a1,d2.w),a3
   37145/   1CBA2 : 2C9B                		move.l	(a3)+,(a6)
   37146/   1CBA4 : 2C9B                		move.l	(a3)+,(a6)
   37147/   1CBA6 : 2C9B                		move.l	(a3)+,(a6)
   37148/   1CBA8 : 2C9B                		move.l	(a3)+,(a6)
   37149/   1CBAA : 2C9B                		move.l	(a3)+,(a6)
   37150/   1CBAC : 2C9B                		move.l	(a3)+,(a6)
   37151/   1CBAE : 2C9B                		move.l	(a3)+,(a6)
   37152/   1CBB0 : 2C9B                		move.l	(a3)+,(a6)
   37153/   1CBB2 : 2C9B                		move.l	(a3)+,(a6)
   37154/   1CBB4 : 2C9B                		move.l	(a3)+,(a6)
   37155/   1CBB6 : 2C9B                		move.l	(a3)+,(a6)
   37156/   1CBB8 : 2C9B                		move.l	(a3)+,(a6)
   37157/   1CBBA : 2C9B                		move.l	(a3)+,(a6)
   37158/   1CBBC : 2C9B                		move.l	(a3)+,(a6)
   37159/   1CBBE : 2C9B                		move.l	(a3)+,(a6)
   37160/   1CBC0 : 2C9B                		move.l	(a3)+,(a6)
   37161/   1CBC2 :                     
   37162/   1CBC2 :                     loc_1C92C:
   37163/   1CBC2 : 0680 0040 0000      		addi.l	#$400000,d0
   37164/   1CBC8 : 51CE FFB4           		dbf	d6,Hud_ScoreLoop
   37165/   1CBCC :                     
   37166/   1CBCC : 4E75                		rts	
   37167/   1CBCE :                     ; End of function Hud_Score
   37168/   1CBCE :                     
   37169/   1CBCE :                     ; ---------------------------------------------------------------------------
   37170/   1CBCE :                     ; Subroutine to	load countdown numbers on the continue screen
   37171/   1CBCE :                     ; ---------------------------------------------------------------------------
   37172/   1CBCE :                     
   37173/   1CBCE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37174/   1CBCE :                     
   37175/   1CBCE :                     
   37176/   1CBCE :                     ContScrCounter:				; XREF: ContinueScreen
   37177/   1CBCE : 23FC 5F80 0003 00C0 		move.l	#$5F800003,($C00004).l ; set VRAM address
                    0004                
   37178/   1CBD8 : 4DF9 00C0 0000      		lea	($C00000).l,a6
   37179/   1CBDE : 45F9 0001 CC36      		lea	(Hud_10).l,a2
   37180/   1CBE4 : 7C01                		moveq	#1,d6
   37181/   1CBE6 : 7800                		moveq	#0,d4
   37182/   1CBE8 : 43FA 0186           		lea	Art_Hud(pc),a1 ; load numbers patterns
   37183/   1CBEC :                     
   37184/   1CBEC :                     ContScr_Loop:
   37185/   1CBEC : 7400                		moveq	#0,d2
   37186/   1CBEE : 261A                		move.l	(a2)+,d3
   37187/   1CBF0 :                     
   37188/   1CBF0 :                     loc_1C95A:
   37189/   1CBF0 : 9283                		sub.l	d3,d1
   37190/   1CBF2 : 6504                		bcs.s	loc_1C962
   37191/   1CBF4 : 5242                		addq.w	#1,d2
   37192/   1CBF6 : 60F8                		bra.s	loc_1C95A
   37193/   1CBF8 :                     ; ===========================================================================
   37194/   1CBF8 :                     
   37195/   1CBF8 :                     loc_1C962:
   37196/   1CBF8 : D283                		add.l	d3,d1
   37197/   1CBFA : ED4A                		lsl.w	#6,d2
   37198/   1CBFC : 47F1 2000           		lea	(a1,d2.w),a3
   37199/   1CC00 : 2C9B                		move.l	(a3)+,(a6)
   37200/   1CC02 : 2C9B                		move.l	(a3)+,(a6)
   37201/   1CC04 : 2C9B                		move.l	(a3)+,(a6)
   37202/   1CC06 : 2C9B                		move.l	(a3)+,(a6)
   37203/   1CC08 : 2C9B                		move.l	(a3)+,(a6)
   37204/   1CC0A : 2C9B                		move.l	(a3)+,(a6)
   37205/   1CC0C : 2C9B                		move.l	(a3)+,(a6)
   37206/   1CC0E : 2C9B                		move.l	(a3)+,(a6)
   37207/   1CC10 : 2C9B                		move.l	(a3)+,(a6)
   37208/   1CC12 : 2C9B                		move.l	(a3)+,(a6)
   37209/   1CC14 : 2C9B                		move.l	(a3)+,(a6)
   37210/   1CC16 : 2C9B                		move.l	(a3)+,(a6)
   37211/   1CC18 : 2C9B                		move.l	(a3)+,(a6)
   37212/   1CC1A : 2C9B                		move.l	(a3)+,(a6)
   37213/   1CC1C : 2C9B                		move.l	(a3)+,(a6)
   37214/   1CC1E : 2C9B                		move.l	(a3)+,(a6)
   37215/   1CC20 : 51CE FFCA           		dbf	d6,ContScr_Loop	; repeat 1 more	time
   37216/   1CC24 :                     
   37217/   1CC24 : 4E75                		rts	
   37218/   1CC26 :                     ; End of function ContScrCounter
   37219/   1CC26 :                     
   37220/   1CC26 :                     ; ===========================================================================
   37221/   1CC26 :                     ; ---------------------------------------------------------------------------
   37222/   1CC26 :                     ; HUD counter sizes
   37223/   1CC26 :                     ; ---------------------------------------------------------------------------
   37224/   1CC26 : 0001 86A0           Hud_100000:	dc.l 100000		; XREF: Hud_Score
   37225/   1CC2A : 0000 2710           Hud_10000:	dc.l 10000
   37226/   1CC2E : 0000 03E8           Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
   37227/   1CC32 : 0000 0064           Hud_100:	dc.l 100		; XREF: Hud_Rings
   37228/   1CC36 : 0000 000A           Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
   37229/   1CC3A : 0000 0001           Hud_1:		dc.l 1			; XREF: Hud_Mins
   37230/   1CC3E :                     
   37231/   1CC3E :                     ; ---------------------------------------------------------------------------
   37232/   1CC3E :                     ; Subroutine to	load time numbers patterns
   37233/   1CC3E :                     ; ---------------------------------------------------------------------------
   37234/   1CC3E :                     
   37235/   1CC3E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37236/   1CC3E :                     
   37237/   1CC3E :                     
   37238/   1CC3E :                     Hud_Mins:				; XREF: Hud_ChkTime
   37239/   1CC3E : 45F9 0001 CC3A      		lea	(Hud_1).l,a2
   37240/   1CC44 : 7C00                		moveq	#0,d6
   37241/   1CC46 : 6008                		bra.s	loc_1C9BA
   37242/   1CC48 :                     ; End of function Hud_Mins
   37243/   1CC48 :                     
   37244/   1CC48 :                     
   37245/   1CC48 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37246/   1CC48 :                     
   37247/   1CC48 :                     
   37248/   1CC48 :                     Hud_Secs:				; XREF: Hud_ChkTime
   37249/   1CC48 : 45F9 0001 CC36      		lea	(Hud_10).l,a2
   37250/   1CC4E : 7C01                		moveq	#1,d6
   37251/   1CC50 :                     
   37252/   1CC50 :                     loc_1C9BA:
   37253/   1CC50 : 7800                		moveq	#0,d4
   37254/   1CC52 : 43FA 011C           		lea	Art_Hud(pc),a1
   37255/   1CC56 :                     
   37256/   1CC56 :                     Hud_TimeLoop:
   37257/   1CC56 : 7400                		moveq	#0,d2
   37258/   1CC58 : 261A                		move.l	(a2)+,d3
   37259/   1CC5A :                     
   37260/   1CC5A :                     loc_1C9C4:
   37261/   1CC5A : 9283                		sub.l	d3,d1
   37262/   1CC5C : 6504                		bcs.s	loc_1C9CC
   37263/   1CC5E : 5242                		addq.w	#1,d2
   37264/   1CC60 : 60F8                		bra.s	loc_1C9C4
   37265/   1CC62 :                     ; ===========================================================================
   37266/   1CC62 :                     
   37267/   1CC62 :                     loc_1C9CC:
   37268/   1CC62 : D283                		add.l	d3,d1
   37269/   1CC64 : 4A42                		tst.w	d2
   37270/   1CC66 : 6704                		beq.s	loc_1C9D6
   37271/   1CC68 : 383C 0001           		move.w	#1,d4
   37272/   1CC6C :                     
   37273/   1CC6C :                     loc_1C9D6:
   37274/   1CC6C : ED4A                		lsl.w	#6,d2
   37275/   1CC6E : 2D40 0004           		move.l	d0,4(a6)
   37276/   1CC72 : 47F1 2000           		lea	(a1,d2.w),a3
   37277/   1CC76 : 2C9B                		move.l	(a3)+,(a6)
   37278/   1CC78 : 2C9B                		move.l	(a3)+,(a6)
   37279/   1CC7A : 2C9B                		move.l	(a3)+,(a6)
   37280/   1CC7C : 2C9B                		move.l	(a3)+,(a6)
   37281/   1CC7E : 2C9B                		move.l	(a3)+,(a6)
   37282/   1CC80 : 2C9B                		move.l	(a3)+,(a6)
   37283/   1CC82 : 2C9B                		move.l	(a3)+,(a6)
   37284/   1CC84 : 2C9B                		move.l	(a3)+,(a6)
   37285/   1CC86 : 2C9B                		move.l	(a3)+,(a6)
   37286/   1CC88 : 2C9B                		move.l	(a3)+,(a6)
   37287/   1CC8A : 2C9B                		move.l	(a3)+,(a6)
   37288/   1CC8C : 2C9B                		move.l	(a3)+,(a6)
   37289/   1CC8E : 2C9B                		move.l	(a3)+,(a6)
   37290/   1CC90 : 2C9B                		move.l	(a3)+,(a6)
   37291/   1CC92 : 2C9B                		move.l	(a3)+,(a6)
   37292/   1CC94 : 2C9B                		move.l	(a3)+,(a6)
   37293/   1CC96 : 0680 0040 0000      		addi.l	#$400000,d0
   37294/   1CC9C : 51CE FFB8           		dbf	d6,Hud_TimeLoop
   37295/   1CCA0 :                     
   37296/   1CCA0 : 4E75                		rts	
   37297/   1CCA2 :                     ; End of function Hud_Secs
   37298/   1CCA2 :                     
   37299/   1CCA2 :                     ; ---------------------------------------------------------------------------
   37300/   1CCA2 :                     ; Subroutine to	load time/ring bonus numbers patterns
   37301/   1CCA2 :                     ; ---------------------------------------------------------------------------
   37302/   1CCA2 :                     
   37303/   1CCA2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37304/   1CCA2 :                     
   37305/   1CCA2 :                     
   37306/   1CCA2 :                     Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
   37307/   1CCA2 : 45F9 0001 CC2E      		lea	(Hud_1000).l,a2
   37308/   1CCA8 : 7C03                		moveq	#3,d6
   37309/   1CCAA : 7800                		moveq	#0,d4
   37310/   1CCAC : 43FA 00C2           		lea	Art_Hud(pc),a1
   37311/   1CCB0 :                     
   37312/   1CCB0 :                     Hud_BonusLoop:
   37313/   1CCB0 : 7400                		moveq	#0,d2
   37314/   1CCB2 : 261A                		move.l	(a2)+,d3
   37315/   1CCB4 :                     
   37316/   1CCB4 :                     loc_1CA1E:
   37317/   1CCB4 : 9283                		sub.l	d3,d1
   37318/   1CCB6 : 6504                		bcs.s	loc_1CA26
   37319/   1CCB8 : 5242                		addq.w	#1,d2
   37320/   1CCBA : 60F8                		bra.s	loc_1CA1E
   37321/   1CCBC :                     ; ===========================================================================
   37322/   1CCBC :                     
   37323/   1CCBC :                     loc_1CA26:
   37324/   1CCBC : D283                		add.l	d3,d1
   37325/   1CCBE : 4A42                		tst.w	d2
   37326/   1CCC0 : 6704                		beq.s	loc_1CA30
   37327/   1CCC2 : 383C 0001           		move.w	#1,d4
   37328/   1CCC6 :                     
   37329/   1CCC6 :                     loc_1CA30:
   37330/   1CCC6 : 4A44                		tst.w	d4
   37331/   1CCC8 : 672C                		beq.s	Hud_ClrBonus
   37332/   1CCCA : ED4A                		lsl.w	#6,d2
   37333/   1CCCC : 47F1 2000           		lea	(a1,d2.w),a3
   37334/   1CCD0 : 2C9B                		move.l	(a3)+,(a6)
   37335/   1CCD2 : 2C9B                		move.l	(a3)+,(a6)
   37336/   1CCD4 : 2C9B                		move.l	(a3)+,(a6)
   37337/   1CCD6 : 2C9B                		move.l	(a3)+,(a6)
   37338/   1CCD8 : 2C9B                		move.l	(a3)+,(a6)
   37339/   1CCDA : 2C9B                		move.l	(a3)+,(a6)
   37340/   1CCDC : 2C9B                		move.l	(a3)+,(a6)
   37341/   1CCDE : 2C9B                		move.l	(a3)+,(a6)
   37342/   1CCE0 : 2C9B                		move.l	(a3)+,(a6)
   37343/   1CCE2 : 2C9B                		move.l	(a3)+,(a6)
   37344/   1CCE4 : 2C9B                		move.l	(a3)+,(a6)
   37345/   1CCE6 : 2C9B                		move.l	(a3)+,(a6)
   37346/   1CCE8 : 2C9B                		move.l	(a3)+,(a6)
   37347/   1CCEA : 2C9B                		move.l	(a3)+,(a6)
   37348/   1CCEC : 2C9B                		move.l	(a3)+,(a6)
   37349/   1CCEE : 2C9B                		move.l	(a3)+,(a6)
   37350/   1CCF0 :                     
   37351/   1CCF0 :                     loc_1CA5A:
   37352/   1CCF0 : 51CE FFBE           		dbf	d6,Hud_BonusLoop ; repeat 3 more times
   37353/   1CCF4 :                     
   37354/   1CCF4 : 4E75                		rts	
   37355/   1CCF6 :                     ; ===========================================================================
   37356/   1CCF6 :                     
   37357/   1CCF6 :                     Hud_ClrBonus:
   37358/   1CCF6 : 7A0F                		moveq	#$F,d5
   37359/   1CCF8 :                     
   37360/   1CCF8 :                     Hud_ClrBonusLoop:
   37361/   1CCF8 : 2CBC 0000 0000      		move.l	#0,(a6)
   37362/   1CCFE : 51CD FFF8           		dbf	d5,Hud_ClrBonusLoop
   37363/   1CD02 :                     
   37364/   1CD02 : 60EC                		bra.s	loc_1CA5A
   37365/   1CD04 :                     ; End of function Hud_TimeRingBonus
   37366/   1CD04 :                     
   37367/   1CD04 :                     ; ---------------------------------------------------------------------------
   37368/   1CD04 :                     ; Subroutine to	load uncompressed lives	counter	patterns
   37369/   1CD04 :                     ; ---------------------------------------------------------------------------
   37370/   1CD04 :                     
   37371/   1CD04 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37372/   1CD04 :                     
   37373/   1CD04 :                     
   37374/   1CD04 :                     Hud_Lives:				; XREF: Hud_ChkLives
   37375/   1CD04 : 203C 7BA0 0003      		move.l	#$7BA00003,d0	; set VRAM address
   37376/   1CD0A : 7200                		moveq	#0,d1
   37377/   1CD0C : 1238 FE12           		move.b	($FFFFFE12).w,d1 ; load	number of lives
   37378/   1CD10 : 45F9 0001 CC36      		lea	(Hud_10).l,a2
   37379/   1CD16 : 7C01                		moveq	#1,d6
   37380/   1CD18 : 7800                		moveq	#0,d4
   37381/   1CD1A : 43FA 0354           		lea	Art_LivesNums(pc),a1
   37382/   1CD1E :                     
   37383/   1CD1E :                     Hud_LivesLoop:
   37384/   1CD1E : 2D40 0004           		move.l	d0,4(a6)
   37385/   1CD22 : 7400                		moveq	#0,d2
   37386/   1CD24 : 261A                		move.l	(a2)+,d3
   37387/   1CD26 :                     
   37388/   1CD26 :                     loc_1CA90:
   37389/   1CD26 : 9283                		sub.l	d3,d1
   37390/   1CD28 : 6504                		bcs.s	loc_1CA98
   37391/   1CD2A : 5242                		addq.w	#1,d2
   37392/   1CD2C : 60F8                		bra.s	loc_1CA90
   37393/   1CD2E :                     ; ===========================================================================
   37394/   1CD2E :                     
   37395/   1CD2E :                     loc_1CA98:
   37396/   1CD2E : D283                		add.l	d3,d1
   37397/   1CD30 : 4A42                		tst.w	d2
   37398/   1CD32 : 6704                		beq.s	loc_1CAA2
   37399/   1CD34 : 383C 0001           		move.w	#1,d4
   37400/   1CD38 :                     
   37401/   1CD38 :                     loc_1CAA2:
   37402/   1CD38 : 4A44                		tst.w	d4
   37403/   1CD3A : 6722                		beq.s	Hud_ClrLives
   37404/   1CD3C :                     
   37405/   1CD3C :                     loc_1CAA6:
   37406/   1CD3C : EB4A                		lsl.w	#5,d2
   37407/   1CD3E : 47F1 2000           		lea	(a1,d2.w),a3
   37408/   1CD42 : 2C9B                		move.l	(a3)+,(a6)
   37409/   1CD44 : 2C9B                		move.l	(a3)+,(a6)
   37410/   1CD46 : 2C9B                		move.l	(a3)+,(a6)
   37411/   1CD48 : 2C9B                		move.l	(a3)+,(a6)
   37412/   1CD4A : 2C9B                		move.l	(a3)+,(a6)
   37413/   1CD4C : 2C9B                		move.l	(a3)+,(a6)
   37414/   1CD4E : 2C9B                		move.l	(a3)+,(a6)
   37415/   1CD50 : 2C9B                		move.l	(a3)+,(a6)
   37416/   1CD52 :                     
   37417/   1CD52 :                     loc_1CABC:
   37418/   1CD52 : 0680 0040 0000      		addi.l	#$400000,d0
   37419/   1CD58 : 51CE FFC4           		dbf	d6,Hud_LivesLoop ; repeat 1 more time
   37420/   1CD5C :                     
   37421/   1CD5C : 4E75                		rts	
   37422/   1CD5E :                     ; ===========================================================================
   37423/   1CD5E :                     
   37424/   1CD5E :                     Hud_ClrLives:
   37425/   1CD5E : 4A46                		tst.w	d6
   37426/   1CD60 : 67DA                		beq.s	loc_1CAA6
   37427/   1CD62 : 7A07                		moveq	#7,d5
   37428/   1CD64 :                     
   37429/   1CD64 :                     Hud_ClrLivesLoop:
   37430/   1CD64 : 2CBC 0000 0000      		move.l	#0,(a6)
   37431/   1CD6A : 51CD FFF8           		dbf	d5,Hud_ClrLivesLoop
   37432/   1CD6E : 60E2                		bra.s	loc_1CABC
   37433/   1CD70 :                     ; End of function Hud_Lives
   37434/   1CD70 :                     
   37435/   1CD70 :                     ; ===========================================================================
   37436/   1CD70 :                     Art_Hud:	binclude	artunc/HUD.bin		; 8x16 pixel numbers on HUD
   37437/   1D070 : (MACRO)             		align 2
   37437/   1D070 :  (MACRO-2)                  cnop 0,2
   37437/   1D070 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37438/   1D070 :                     Art_LivesNums:	binclude	artunc/livescnt.bin	; 8x8 pixel numbers on lives counter
   37439/   1D1B0 : (MACRO)             		align 2
   37439/   1D1B0 :  (MACRO-2)                  cnop 0,2
   37439/   1D1B0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37440/   1D1B0 :                     ; ===========================================================================
   37441/   1D1B0 :                     ; ---------------------------------------------------------------------------
   37442/   1D1B0 :                     ; When debug mode is currently in use
   37443/   1D1B0 :                     ; ---------------------------------------------------------------------------
   37444/   1D1B0 :                     
   37445/   1D1B0 :                     DebugMode:				; XREF: Obj01; Obj09
   37446/   1D1B0 : 7000                		moveq	#0,d0
   37447/   1D1B2 : 1038 FE08           		move.b	($FFFFFE08).w,d0
   37448/   1D1B6 : 323B 0006           		move.w	Debug_Index(pc,d0.w),d1
   37449/   1D1BA : 4EFB 1002           		jmp	Debug_Index(pc,d1.w)
   37450/   1D1BE :                     ; ===========================================================================
   37451/   1D1BE : 0004                Debug_Index:	dc.w Debug_Main-Debug_Index
   37452/   1D1C0 : 0086                		dc.w Debug_Skip-Debug_Index
   37453/   1D1C2 :                     ; ===========================================================================
   37454/   1D1C2 :                     
   37455/   1D1C2 :                     Debug_Main:				; XREF: Debug_Index
   37456/   1D1C2 : 5438 FE08           		addq.b	#2,($FFFFFE08).w
   37457/   1D1C6 : 31F8 F72C FEF0      		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
   37458/   1D1CC : 31F8 F726 FEF2      		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
   37459/   1D1D2 : 31FC 0000 F72C      		move.w	#0,($FFFFF72C).w
   37460/   1D1D8 : 31FC 0720 F726      		move.w	#$720,($FFFFF726).w
   37461/   1D1DE : 0278 07FF D00C      		andi.w	#$7FF,($FFFFD00C).w
   37462/   1D1E4 : 0278 07FF F704      		andi.w	#$7FF,($FFFFF704).w
   37463/   1D1EA : 0278 03FF F70C      		andi.w	#$3FF,($FFFFF70C).w
   37464/   1D1F0 : 117C 0000 001A      		move.b	#0,$1A(a0)
   37465/   1D1F6 : 117C 0000 001C      		move.b	#0,$1C(a0)
   37466/   1D1FC : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
   37467/   1D202 : 6610                		bne.s	Debug_Zone	; if not, branch
   37468/   1D204 : 31FC 0000 F782      		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
   37469/   1D20A : 31FC 0000 F780      		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
   37470/   1D210 : 7006                		moveq	#6,d0		; use 6th debug	item list
   37471/   1D212 : 6006                		bra.s	Debug_UseList
   37472/   1D214 :                     ; ===========================================================================
   37473/   1D214 :                     
   37474/   1D214 :                     Debug_Zone:
   37475/   1D214 : 7000                		moveq	#0,d0
   37476/   1D216 : 1038 FE10           		move.b	($FFFFFE10).w,d0
   37477/   1D21A :                     
   37478/   1D21A :                     Debug_UseList:
   37479/   1D21A : 45F9 0001 D404      		lea	(DebugList).l,a2
   37480/   1D220 : D040                		add.w	d0,d0
   37481/   1D222 : D4F2 0000           		adda.w	(a2,d0.w),a2
   37482/   1D226 : 3C1A                		move.w	(a2)+,d6
   37483/   1D228 : BC38 FE06           		cmp.b	($FFFFFE06).w,d6
   37484/   1D22C : 6206                		bhi.s	loc_1CF9E
   37485/   1D22E : 11FC 0000 FE06      		move.b	#0,($FFFFFE06).w
   37486/   1D234 :                     
   37487/   1D234 :                     loc_1CF9E:
   37488/   1D234 : 6100 01B2           		bsr.w	Debug_ShowItem
   37489/   1D238 : 11FC 000C FE0A      		move.b	#$C,($FFFFFE0A).w
   37490/   1D23E : 11FC 0001 FE0B      		move.b	#1,($FFFFFE0B).w
   37491/   1D244 :                     
   37492/   1D244 :                     Debug_Skip:				; XREF: Debug_Index
   37493/   1D244 : 7006                		moveq	#6,d0
   37494/   1D246 : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w
   37495/   1D24C : 6706                		beq.s	loc_1CFBE
   37496/   1D24E : 7000                		moveq	#0,d0
   37497/   1D250 : 1038 FE10           		move.b	($FFFFFE10).w,d0
   37498/   1D254 :                     
   37499/   1D254 :                     loc_1CFBE:
   37500/   1D254 : 45F9 0001 D404      		lea	(DebugList).l,a2
   37501/   1D25A : D040                		add.w	d0,d0
   37502/   1D25C : D4F2 0000           		adda.w	(a2,d0.w),a2
   37503/   1D260 : 3C1A                		move.w	(a2)+,d6
   37504/   1D262 : 6100 0008           		bsr.w	Debug_Control
   37505/   1D266 : 4EF9 0000 D70E      		jmp	(DisplaySprite).l
   37506/   1D26C :                     
   37507/   1D26C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37508/   1D26C :                     
   37509/   1D26C :                     
   37510/   1D26C :                     Debug_Control:
   37511/   1D26C : 7800                		moveq	#0,d4
   37512/   1D26E : 323C 0001           		move.w	#1,d1
   37513/   1D272 : 1838 F605           		move.b	($FFFFF605).w,d4
   37514/   1D276 : 0244 000F           		andi.w	#$F,d4		; is up/down/left/right	pressed?
   37515/   1D27A : 6632                		bne.s	loc_1D018	; if yes, branch
   37516/   1D27C : 1038 F604           		move.b	($FFFFF604).w,d0
   37517/   1D280 : 0240 000F           		andi.w	#$F,d0
   37518/   1D284 : 6610                		bne.s	loc_1D000
   37519/   1D286 : 11FC 000C FE0A      		move.b	#$C,($FFFFFE0A).w
   37520/   1D28C : 11FC 000F FE0B      		move.b	#$F,($FFFFFE0B).w
   37521/   1D292 : 6000 0070           		bra.w	Debug_BackItem
   37522/   1D296 :                     ; ===========================================================================
   37523/   1D296 :                     
   37524/   1D296 :                     loc_1D000:
   37525/   1D296 : 5338 FE0A           		subq.b	#1,($FFFFFE0A).w
   37526/   1D29A : 6616                		bne.s	loc_1D01C
   37527/   1D29C : 11FC 0001 FE0A      		move.b	#1,($FFFFFE0A).w
   37528/   1D2A2 : 5238 FE0B           		addq.b	#1,($FFFFFE0B).w
   37529/   1D2A6 : 6606                		bne.s	loc_1D018
   37530/   1D2A8 : 11FC 00FF FE0B      		move.b	#-1,($FFFFFE0B).w
   37531/   1D2AE :                     
   37532/   1D2AE :                     loc_1D018:
   37533/   1D2AE : 1838 F604           		move.b	($FFFFF604).w,d4
   37534/   1D2B2 :                     
   37535/   1D2B2 :                     loc_1D01C:
   37536/   1D2B2 : 7200                		moveq	#0,d1
   37537/   1D2B4 : 1238 FE0B           		move.b	($FFFFFE0B).w,d1
   37538/   1D2B8 : 5241                		addq.w	#1,d1
   37539/   1D2BA : 4841                		swap	d1
   37540/   1D2BC : E881                		asr.l	#4,d1
   37541/   1D2BE : 2428 000C           		move.l	$C(a0),d2
   37542/   1D2C2 : 2628 0008           		move.l	8(a0),d3
   37543/   1D2C6 : 0804 0000           		btst	#0,d4		; is up	being pressed?
   37544/   1D2CA : 6706                		beq.s	loc_1D03C	; if not, branch
   37545/   1D2CC : 9481                		sub.l	d1,d2
   37546/   1D2CE : 6402                		bcc.s	loc_1D03C
   37547/   1D2D0 : 7400                		moveq	#0,d2
   37548/   1D2D2 :                     
   37549/   1D2D2 :                     loc_1D03C:
   37550/   1D2D2 : 0804 0001           		btst	#1,d4		; is down being	pressed?
   37551/   1D2D6 : 6710                		beq.s	loc_1D052	; if not, branch
   37552/   1D2D8 : D481                		add.l	d1,d2
   37553/   1D2DA : 0C82 07FF 0000      		cmpi.l	#$7FF0000,d2
   37554/   1D2E0 : 6506                		bcs.s	loc_1D052
   37555/   1D2E2 : 243C 07FF 0000      		move.l	#$7FF0000,d2
   37556/   1D2E8 :                     
   37557/   1D2E8 :                     loc_1D052:
   37558/   1D2E8 : 0804 0002           		btst	#2,d4
   37559/   1D2EC : 6706                		beq.s	loc_1D05E
   37560/   1D2EE : 9681                		sub.l	d1,d3
   37561/   1D2F0 : 6402                		bcc.s	loc_1D05E
   37562/   1D2F2 : 7600                		moveq	#0,d3
   37563/   1D2F4 :                     
   37564/   1D2F4 :                     loc_1D05E:
   37565/   1D2F4 : 0804 0003           		btst	#3,d4
   37566/   1D2F8 : 6702                		beq.s	loc_1D066
   37567/   1D2FA : D681                		add.l	d1,d3
   37568/   1D2FC :                     
   37569/   1D2FC :                     loc_1D066:
   37570/   1D2FC : 2142 000C           		move.l	d2,$C(a0)
   37571/   1D300 : 2143 0008           		move.l	d3,8(a0)
   37572/   1D304 :                     
   37573/   1D304 :                     Debug_BackItem:
   37574/   1D304 : 0838 0006 F604      		btst	#6,($FFFFF604).w ; is button A pressed?
   37575/   1D30A : 6730                		beq.s	Debug_MakeItem	; if not, branch
   37576/   1D30C : 0838 0005 F605      		btst	#5,($FFFFF605).w ; is button C pressed?
   37577/   1D312 : 670C                		beq.s	Debug_NextItem	; if not, branch
   37578/   1D314 : 5338 FE06           		subq.b	#1,($FFFFFE06).w ; go back 1 item
   37579/   1D318 : 641E                		bcc.s	Debug_NoLoop
   37580/   1D31A : DD38 FE06           		add.b	d6,($FFFFFE06).w
   37581/   1D31E : 6018                		bra.s	Debug_NoLoop
   37582/   1D320 :                     ; ===========================================================================
   37583/   1D320 :                     
   37584/   1D320 :                     Debug_NextItem:
   37585/   1D320 : 0838 0006 F605      		btst	#6,($FFFFF605).w ; is button A pressed?
   37586/   1D326 : 6714                		beq.s	Debug_MakeItem	; if not, branch
   37587/   1D328 : 5238 FE06           		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
   37588/   1D32C : BC38 FE06           		cmp.b	($FFFFFE06).w,d6
   37589/   1D330 : 6206                		bhi.s	Debug_NoLoop
   37590/   1D332 : 11FC 0000 FE06      		move.b	#0,($FFFFFE06).w ; loop	back to	first item
   37591/   1D338 :                     
   37592/   1D338 :                     Debug_NoLoop:
   37593/   1D338 : 6000 00AE           		bra.w	Debug_ShowItem
   37594/   1D33C :                     ; ===========================================================================
   37595/   1D33C :                     
   37596/   1D33C :                     Debug_MakeItem:
   37597/   1D33C : 0838 0005 F605      		btst	#5,($FFFFF605).w ; is button C pressed?
   37598/   1D342 : 673C                		beq.s	Debug_Exit	; if not, branch
   37599/   1D344 : 4EB9 0000 DB96      		jsr	(SingleObjLoad).l
   37600/   1D34A : 6634                		bne.s	Debug_Exit
   37601/   1D34C : 3368 0008 0008      		move.w	8(a0),8(a1)
   37602/   1D352 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   37603/   1D358 : (MACRO)             		_move.b	4(a0),0(a1)	; create object
   37603/   1D358 :  (MACRO-2)                          insn2op move.b, 4(a0),0(a1)
   37603/   1D358 : 1368 0004 0001                              !move.b   4(a0),1+0(a1)
   37603/   1D35D :                                             !org    *-1
   37603/   1D35D : 00                                          !dc.b   0
   37604/   1D35E : 1368 0001 0001      		move.b	1(a0),1(a1)
   37605/   1D364 : 1368 0001 0022      		move.b	1(a0),$22(a1)
   37606/   1D36A : 0229 007F 0022      		andi.b	#$7F,$22(a1)
   37607/   1D370 : 7000                		moveq	#0,d0
   37608/   1D372 : 1038 FE06           		move.b	($FFFFFE06).w,d0
   37609/   1D376 : E748                		lsl.w	#3,d0
   37610/   1D378 : 1372 0004 0028      		move.b	4(a2,d0.w),$28(a1)
   37611/   1D37E : 4E75                		rts	
   37612/   1D380 :                     ; ===========================================================================
   37613/   1D380 :                     
   37614/   1D380 :                     Debug_Exit:
   37615/   1D380 : 0838 0004 F605      		btst	#4,($FFFFF605).w ; is button B pressed?
   37616/   1D386 : 675E                		beq.s	Debug_DoNothing	; if not, branch
   37617/   1D388 : 7000                		moveq	#0,d0
   37618/   1D38A : 31C0 FE08           		move.w	d0,($FFFFFE08).w ; deactivate debug mode
   37619/   1D38E : 21FC 0002 1422 D004 		move.l	#Map_Sonic,($FFFFD004).w
   37620/   1D396 : 31FC 0780 D002      		move.w	#$780,($FFFFD002).w
   37621/   1D39C : 11C0 D01C           		move.b	d0,($FFFFD01C).w
   37622/   1D3A0 : 3140 000A           		move.w	d0,$A(a0)
   37623/   1D3A4 : 3140 000E           		move.w	d0,$E(a0)
   37624/   1D3A8 : 31F8 FEF0 F72C      		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
   37625/   1D3AE : 31F8 FEF2 F726      		move.w	($FFFFFEF2).w,($FFFFF726).w
   37626/   1D3B4 : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
   37627/   1D3BA : 662A                		bne.s	Debug_DoNothing	; if not, branch
   37628/   1D3BC : 4278 F780           		clr.w	($FFFFF780).w
   37629/   1D3C0 : 31FC 0040 F782      		move.w	#$40,($FFFFF782).w ; set new level rotation speed
   37630/   1D3C6 : 21FC 0002 1422 D004 		move.l	#Map_Sonic,($FFFFD004).w
   37631/   1D3CE : 31FC 0780 D002      		move.w	#$780,($FFFFD002).w
   37632/   1D3D4 : 11FC 0002 D01C      		move.b	#2,($FFFFD01C).w
   37633/   1D3DA : 08F8 0002 D022      		bset	#2,($FFFFD022).w
   37634/   1D3E0 : 08F8 0001 D022      		bset	#1,($FFFFD022).w
   37635/   1D3E6 :                     
   37636/   1D3E6 :                     Debug_DoNothing:
   37637/   1D3E6 : 4E75                		rts	
   37638/   1D3E8 :                     ; End of function Debug_Control
   37639/   1D3E8 :                     
   37640/   1D3E8 :                     
   37641/   1D3E8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37642/   1D3E8 :                     
   37643/   1D3E8 :                     
   37644/   1D3E8 :                     Debug_ShowItem:				; XREF: Debug_Main
   37645/   1D3E8 : 7000                		moveq	#0,d0
   37646/   1D3EA : 1038 FE06           		move.b	($FFFFFE06).w,d0
   37647/   1D3EE : E748                		lsl.w	#3,d0
   37648/   1D3F0 : 2172 0000 0004      		move.l	(a2,d0.w),4(a0)	; load mappings	for item
   37649/   1D3F6 : 3172 0006 0002      		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
   37650/   1D3FC : 1172 0005 001A      		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
   37651/   1D402 : 4E75                		rts	
   37652/   1D404 :                     ; End of function Debug_ShowItem
   37653/   1D404 :                     
   37654/   1D404 :                     ; ===========================================================================
   37655/   1D404 :                     ; ---------------------------------------------------------------------------
   37656/   1D404 :                     ; Debug	list pointers
   37657/   1D404 :                     ; ---------------------------------------------------------------------------
   37658/   1D404 :                     DebugList:
   37659/   1D404 :                     		include	"_inc/Debug list pointers.asm"
(1)    1/   1D404 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D404 :                     ; Debug	list pointers
(1)    3/   1D404 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D404 : 000E                	dc.w Debug_GHZ-DebugList
(1)    5/   1D406 : 0090                	dc.w Debug_LZ-DebugList
(1)    6/   1D408 : 015A                	dc.w Debug_MZ-DebugList
(1)    7/   1D40A : 01EC                	dc.w Debug_SLZ-DebugList
(1)    8/   1D40C : 0266                	dc.w Debug_SYZ-DebugList
(1)    9/   1D40E : 02E0                	dc.w Debug_SBZ-DebugList
(1)   10/   1D410 : 03CA                	dc.w Debug_Ending-DebugList
   37660/   1D412 :                     
   37661/   1D412 :                     ; ---------------------------------------------------------------------------
   37662/   1D412 :                     ; Debug	list - Green Hill
   37663/   1D412 :                     ; ---------------------------------------------------------------------------
   37664/   1D412 :                     Debug_GHZ:
   37665/   1D412 :                     		include	"_inc/Debug list - GHZ.asm"
(1)    1/   1D412 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D412 :                     ; Debug	list - Green Hill
(1)    3/   1D412 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D412 : 0010                	dc.w $10			; number of items in list
(1)    5/   1D414 : 2500 9F9E           	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
(1)    6/   1D418 : 0000 27B2           	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
(1)    7/   1D41C : 2600 A5A6           	dc.l Map_obj26+$26000000
(1)    8/   1D420 : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D424 : 1F00 975C           	dc.l Map_obj1F+$1F000000
(1)   10/   1D428 : 0000 0400           	dc.b 0,	0, 4, 0
(1)   11/   1D42C : 2200 9A42           	dc.l Map_obj22+$22000000
(1)   12/   1D430 : 0000 0444           	dc.b 0,	0, 4, $44
(1)   13/   1D434 : 2B00 ACB4           	dc.l Map_obj2B+$2B000000
(1)   14/   1D438 : 0000 047B           	dc.b 0,	0, 4, $7B
(1)   15/   1D43C : 3600 D0F2           	dc.l Map_obj36+$36000000
(1)   16/   1D440 : 0000 051B           	dc.b 0,	0, 5, $1B
(1)   17/   1D444 : 1800 8148           	dc.l Map_obj18+$18000000
(1)   18/   1D448 : 0000 4000           	dc.b 0,	0, $40,	0
(1)   19/   1D44C : 3B00 D218           	dc.l Map_obj3B+$3B000000
(1)   20/   1D450 : 0000 63D0           	dc.b 0,	0, $63,	$D0
(1)   21/   1D454 : 4000 F8B0           	dc.l Map_obj40+$40000000
(1)   22/   1D458 : 0000 04F0           	dc.b 0,	0, 4, $F0
(1)   23/   1D45C : 4100 DE24           	dc.l Map_obj41+$41000000
(1)   24/   1D460 : 0000 0523           	dc.b 0,	0, 5, $23
(1)   25/   1D464 : 4200 E04C           	dc.l Map_obj42+$42000000
(1)   26/   1D468 : 0000 249B           	dc.b 0,	0, $24,	$9B
(1)   27/   1D46C : 4400 E35A           	dc.l Map_obj44+$44000000
(1)   28/   1D470 : 0000 434C           	dc.b 0,	0, $43,	$4C
(1)   29/   1D474 : 1900 81B6           	dc.l Map_obj48+$19000000
(1)   30/   1D478 : 0000 43AA           	dc.b 0,	0, $43,	$AA
(1)   31/   1D47C : 7901 7374           	dc.l Map_obj79+$79000000
(1)   32/   1D480 : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   33/   1D484 : 4B00 9FDE           	dc.l Map_obj4B+$4B000000
(1)   34/   1D488 : 0000 2400           	dc.b 0,	0, $24,	0
(1)   35/   1D48C : 7D01 74C4           	dc.l Map_obj7D+$7D000000
(1)   36/   1D490 : 0101 84B6           	dc.b 1,	1, $84,	$B6
(1)   37/   1D494 : (MACRO)             	align 2
(1)   37/   1D494 :  (MACRO-2)                  cnop 0,2
(1)   37/   1D494 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37666/   1D494 :                     
   37667/   1D494 :                     ; ---------------------------------------------------------------------------
   37668/   1D494 :                     ; Debug	list - Labyrinth
   37669/   1D494 :                     ; ---------------------------------------------------------------------------
   37670/   1D494 :                     Debug_LZ:
   37671/   1D494 :                     		include	"_inc/Debug list - LZ.asm"
(1)    1/   1D494 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D494 :                     ; Debug	list - Labyrinth
(1)    3/   1D494 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D494 : 0019                	dc.w $19
(1)    5/   1D496 : 2500 9F9E           	dc.l Map_obj25+$25000000
(1)    6/   1D49A : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D49E : 2600 A5A6           	dc.l Map_obj26+$26000000
(1)    8/   1D4A2 : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D4A6 : 4100 DE24           	dc.l Map_obj41+$41000000
(1)   10/   1D4AA : 0000 0523           	dc.b 0,	0, 5, $23
(1)   11/   1D4AE : 2C00 AD5A           	dc.l Map_obj2C+$2C000000
(1)   12/   1D4B2 : 0800 2486           	dc.b 8,	0, $24,	$86
(1)   13/   1D4B6 : 2D00 AF46           	dc.l Map_obj2D+$2D000000
(1)   14/   1D4BA : 0002 84A6           	dc.b 0,	2, $84,	$A6
(1)   15/   1D4BE : 1601 20AA           	dc.l Map_obj16+$16000000
(1)   16/   1D4C2 : 0000 03CC           	dc.b 0,	0, 3, $CC
(1)   17/   1D4C6 : 1601 20AA           	dc.l Map_obj16+$16000000
(1)   18/   1D4CA : 0203 03CC           	dc.b 2,	3, 3, $CC
(1)   19/   1D4CE : 3300 C3D0           	dc.l Map_obj33+$33000000
(1)   20/   1D4D2 : 0000 43DE           	dc.b 0,	0, $43,	$DE
(1)   21/   1D4D6 : 3200 BF8E           	dc.l Map_obj32+$32000000
(1)   22/   1D4DA : 0000 0513           	dc.b 0,	0, 5, $13
(1)   23/   1D4DE : 3600 D0F2           	dc.l Map_obj36+$36000000
(1)   24/   1D4E2 : 0000 051B           	dc.b 0,	0, 5, $1B
(1)   25/   1D4E6 : 5201 01B0           	dc.l Map_obj52a+$52000000
(1)   26/   1D4EA : 0400 43BC           	dc.b 4,	0, $43,	$BC
(1)   27/   1D4EE : 6101 22D2           	dc.l Map_obj61+$61000000
(1)   28/   1D4F2 : 0100 43E6           	dc.b 1,	0, $43,	$E6
(1)   29/   1D4F6 : 6101 22D2           	dc.l Map_obj61+$61000000
(1)   30/   1D4FA : 1301 43E6           	dc.b $13, 1, $43, $E6
(1)   31/   1D4FE : 6101 22D2           	dc.l Map_obj61+$61000000
(1)   32/   1D502 : 0500 43E6           	dc.b 5,	0, $43,	$E6
(1)   33/   1D506 : 6201 2428           	dc.l Map_obj62+$62000000
(1)   34/   1D50A : 0000 443E           	dc.b 0,	0, $44,	$3E
(1)   35/   1D50E : 6101 22D2           	dc.l Map_obj61+$61000000
(1)   36/   1D512 : 2702 43E6           	dc.b $27, 2, $43, $E6
(1)   37/   1D516 : 6101 22D2           	dc.l Map_obj61+$61000000
(1)   38/   1D51A : 3003 43E6           	dc.b $30, 3, $43, $E6
(1)   39/   1D51E : 6301 278C           	dc.l Map_obj63+$63000000
(1)   40/   1D522 : 7F00 03F6           	dc.b $7F, 0, 3,	$F6
(1)   41/   1D526 : 6001 1FF4           	dc.l Map_obj60+$60000000
(1)   42/   1D52A : 0000 0467           	dc.b 0,	0, 4, $67
(1)   43/   1D52E : 6401 2ADC           	dc.l Map_obj64+$64000000
(1)   44/   1D532 : 8413 8348           	dc.b $84, $13, $83, $48
(1)   45/   1D536 : 6501 2C64           	dc.l Map_obj65+$65000000
(1)   46/   1D53A : 0202 C259           	dc.b 2,	2, $C2,	$59
(1)   47/   1D53E : 6501 2C64           	dc.l Map_obj65+$65000000
(1)   48/   1D542 : 0909 C259           	dc.b 9,	9, $C2,	$59
(1)   49/   1D546 : 0B01 1432           	dc.l Map_obj0B+$B000000
(1)   50/   1D54A : 0000 43DE           	dc.b 0,	0, $43,	$DE
(1)   51/   1D54E : 0C01 1502           	dc.l Map_obj0C+$C000000
(1)   52/   1D552 : 0200 4328           	dc.b 2,	0, $43,	$28
(1)   53/   1D556 : 7901 7374           	dc.l Map_obj79+$79000000
(1)   54/   1D55A : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   55/   1D55E : (MACRO)             	align 2
(1)   55/   1D55E :  (MACRO-2)                  cnop 0,2
(1)   55/   1D55E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37672/   1D55E :                     
   37673/   1D55E :                     ; ---------------------------------------------------------------------------
   37674/   1D55E :                     ; Debug	list - Marble
   37675/   1D55E :                     ; ---------------------------------------------------------------------------
   37676/   1D55E :                     Debug_MZ:
   37677/   1D55E :                     		include	"_inc/Debug list - MZ.asm"
(1)    1/   1D55E :                     ; ---------------------------------------------------------------------------
(1)    2/   1D55E :                     ; Debug	list - Marble
(1)    3/   1D55E :                     ; ---------------------------------------------------------------------------
(1)    4/   1D55E : 0012                	dc.w $12
(1)    5/   1D560 : 2500 9F9E           	dc.l Map_obj25+$25000000
(1)    6/   1D564 : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D568 : 2600 A5A6           	dc.l Map_obj26+$26000000
(1)    8/   1D56C : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D570 : 2200 9A42           	dc.l Map_obj22+$22000000
(1)   10/   1D574 : 0000 0444           	dc.b 0,	0, 4, $44
(1)   11/   1D578 : 3600 D0F2           	dc.l Map_obj36+$36000000
(1)   12/   1D57C : 0000 051B           	dc.b 0,	0, 5, $1B
(1)   13/   1D580 : 4100 DE24           	dc.l Map_obj41+$41000000
(1)   14/   1D584 : 0000 0523           	dc.b 0,	0, 5, $23
(1)   15/   1D588 : 1300 B458           	dc.l Map_obj14+$13000000
(1)   16/   1D58C : 0000 0345           	dc.b 0,	0, 3, $45
(1)   17/   1D590 : 4600 EA0E           	dc.l Map_obj46+$46000000
(1)   18/   1D594 : 0000 4000           	dc.b 0,	0, $40,	0
(1)   19/   1D598 : 4C00 F35A           	dc.l Map_obj4C+$4C000000
(1)   20/   1D59C : 0000 63A8           	dc.b 0,	0, $63,	$A8
(1)   21/   1D5A0 : 4E00 F63E           	dc.l Map_obj4E+$4E000000
(1)   22/   1D5A4 : 0000 63A8           	dc.b 0,	0, $63,	$A8
(1)   23/   1D5A8 : 3300 C3D0           	dc.l Map_obj33+$33000000
(1)   24/   1D5AC : 0000 42B8           	dc.b 0,	0, $42,	$B8
(1)   25/   1D5B0 : 5000 FA3E           	dc.l Map_obj50+$50000000
(1)   26/   1D5B4 : 0000 247B           	dc.b 0,	0, $24,	$7B
(1)   27/   1D5B8 : 5100 FEE4           	dc.l Map_obj51+$51000000
(1)   28/   1D5BC : 0000 42B8           	dc.b 0,	0, $42,	$B8
(1)   29/   1D5C0 : 5201 015A           	dc.l Map_obj52+$52000000
(1)   30/   1D5C4 : 0000 02B8           	dc.b 0,	0, 2, $B8
(1)   31/   1D5C8 : 5300 8752           	dc.l Map_obj53+$53000000
(1)   32/   1D5CC : 0000 62B8           	dc.b 0,	0, $62,	$B8
(1)   33/   1D5D0 : 5400 F320           	dc.l Map_obj54+$54000000
(1)   34/   1D5D4 : 0000 8680           	dc.b 0,	0, $86,	$80
(1)   35/   1D5D8 : 5501 034E           	dc.l Map_obj55+$55000000
(1)   36/   1D5DC : 0000 04B8           	dc.b 0,	0, 4, $B8
(1)   37/   1D5E0 : 7801 6FEA           	dc.l Map_obj78+$78000000
(1)   38/   1D5E4 : 0000 24FF           	dc.b 0,	0, $24,	$FF
(1)   39/   1D5E8 : 7901 7374           	dc.l Map_obj79+$79000000
(1)   40/   1D5EC : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   41/   1D5F0 : (MACRO)             	align 2
(1)   41/   1D5F0 :  (MACRO-2)                  cnop 0,2
(1)   41/   1D5F0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37678/   1D5F0 :                     
   37679/   1D5F0 :                     ; ---------------------------------------------------------------------------
   37680/   1D5F0 :                     ; Debug	list - Star Light
   37681/   1D5F0 :                     ; ---------------------------------------------------------------------------
   37682/   1D5F0 :                     Debug_SLZ:
   37683/   1D5F0 :                     		include	"_inc/Debug list - SLZ.asm"
(1)    1/   1D5F0 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D5F0 :                     ; Debug	list - Star Light
(1)    3/   1D5F0 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D5F0 : 000F                	dc.w $F
(1)    5/   1D5F2 : 2500 9F9E           	dc.l Map_obj25+$25000000
(1)    6/   1D5F6 : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D5FA : 2600 A5A6           	dc.l Map_obj26+$26000000
(1)    8/   1D5FE : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D602 : 5901 0E58           	dc.l Map_obj59+$59000000
(1)   10/   1D606 : 0000 4000           	dc.b 0,	0, $40,	0
(1)   11/   1D60A : 5300 8752           	dc.l Map_obj53+$53000000
(1)   12/   1D60E : 0002 44E0           	dc.b 0,	2, $44,	$E0
(1)   13/   1D612 : 1800 81A6           	dc.l Map_obj18b+$18000000
(1)   14/   1D616 : 0000 4000           	dc.b 0,	0, $40,	0
(1)   15/   1D61A : 5A01 0F92           	dc.l Map_obj5A+$5A000000
(1)   16/   1D61E : 0000 4000           	dc.b 0,	0, $40,	0
(1)   17/   1D622 : 5B01 114C           	dc.l Map_obj5B+$5B000000
(1)   18/   1D626 : 0000 4000           	dc.b 0,	0, $40,	0
(1)   19/   1D62A : 5D01 1720           	dc.l Map_obj5D+$5D000000
(1)   20/   1D62E : 0000 43A0           	dc.b 0,	0, $43,	$A0
(1)   21/   1D632 : 5E01 1AB4           	dc.l Map_obj5E+$5E000000
(1)   22/   1D636 : 0000 0374           	dc.b 0,	0, 3, $74
(1)   23/   1D63A : 4100 DE24           	dc.l Map_obj41+$41000000
(1)   24/   1D63E : 0000 0523           	dc.b 0,	0, 5, $23
(1)   25/   1D642 : 1300 B458           	dc.l Map_obj14+$13000000
(1)   26/   1D646 : 0000 0480           	dc.b 0,	0, 4, $80
(1)   27/   1D64A : 1C00 8862           	dc.l Map_obj1C+$1C000000
(1)   28/   1D64E : 0000 44D8           	dc.b 0,	0, $44,	$D8
(1)   29/   1D652 : 5F01 1D38           	dc.l Map_obj5F+$5F000000
(1)   30/   1D656 : 0000 0400           	dc.b 0,	0, 4, 0
(1)   31/   1D65A : 6001 1FF4           	dc.l Map_obj60+$60000000
(1)   32/   1D65E : 0000 2429           	dc.b 0,	0, $24,	$29
(1)   33/   1D662 : 7901 7374           	dc.l Map_obj79+$79000000
(1)   34/   1D666 : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   35/   1D66A : (MACRO)             	align 2
(1)   35/   1D66A :  (MACRO-2)                  cnop 0,2
(1)   35/   1D66A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37684/   1D66A :                     
   37685/   1D66A :                     ; ---------------------------------------------------------------------------
   37686/   1D66A :                     ; Debug	list - Spring Yard
   37687/   1D66A :                     ; ---------------------------------------------------------------------------
   37688/   1D66A :                     Debug_SYZ:
   37689/   1D66A :                     		include	"_inc/Debug list - SYZ.asm"
(1)    1/   1D66A :                     ; ---------------------------------------------------------------------------
(1)    2/   1D66A :                     ; Debug	list - Spring Yard
(1)    3/   1D66A :                     ; ---------------------------------------------------------------------------
(1)    4/   1D66A : 000F                	dc.w $F
(1)    5/   1D66C : 2500 9F9E           	dc.l Map_obj25+$25000000
(1)    6/   1D670 : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D674 : 2600 A5A6           	dc.l Map_obj26+$26000000
(1)    8/   1D678 : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D67C : 3600 D0F2           	dc.l Map_obj36+$36000000
(1)   10/   1D680 : 0000 051B           	dc.b 0,	0, 5, $1B
(1)   11/   1D684 : 4100 DE24           	dc.l Map_obj41+$41000000
(1)   12/   1D688 : 0000 0523           	dc.b 0,	0, 5, $23
(1)   13/   1D68C : 4300 E2AC           	dc.l Map_obj43+$43000000
(1)   14/   1D690 : 0000 04B8           	dc.b 0,	0, 4, $B8
(1)   15/   1D694 : 1200 EA8C           	dc.l Map_obj12+$12000000
(1)   16/   1D698 : 0000 0000           	dc.b 0,	0, 0, 0
(1)   17/   1D69C : 4700 EC0A           	dc.l Map_obj47+$47000000
(1)   18/   1D6A0 : 0000 0380           	dc.b 0,	0, 3, $80
(1)   19/   1D6A4 : 1F00 975C           	dc.l Map_obj1F+$1F000000
(1)   20/   1D6A8 : 0000 0400           	dc.b 0,	0, 4, 0
(1)   21/   1D6AC : 2200 9A42           	dc.l Map_obj22+$22000000
(1)   22/   1D6B0 : 0000 0444           	dc.b 0,	0, 4, $44
(1)   23/   1D6B4 : 5000 FA3E           	dc.l Map_obj50+$50000000
(1)   24/   1D6B8 : 0000 247B           	dc.b 0,	0, $24,	$7B
(1)   25/   1D6BC : 1800 8194           	dc.l Map_obj18a+$18000000
(1)   26/   1D6C0 : 0000 4000           	dc.b 0,	0, $40,	0
(1)   27/   1D6C4 : 5601 0810           	dc.l Map_obj56+$56000000
(1)   28/   1D6C8 : 0000 4000           	dc.b 0,	0, $40,	0
(1)   29/   1D6CC : 3200 BF8E           	dc.l Map_obj32+$32000000
(1)   30/   1D6D0 : 0000 0513           	dc.b 0,	0, 5, $13
(1)   31/   1D6D4 : 7801 6FEA           	dc.l Map_obj78+$78000000
(1)   32/   1D6D8 : 0000 24FF           	dc.b 0,	0, $24,	$FF
(1)   33/   1D6DC : 7901 7374           	dc.l Map_obj79+$79000000
(1)   34/   1D6E0 : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   35/   1D6E4 : (MACRO)             	align 2
(1)   35/   1D6E4 :  (MACRO-2)                  cnop 0,2
(1)   35/   1D6E4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37690/   1D6E4 :                     
   37691/   1D6E4 :                     ; ---------------------------------------------------------------------------
   37692/   1D6E4 :                     ; Debug	list - Scrap Brain
   37693/   1D6E4 :                     ; ---------------------------------------------------------------------------
   37694/   1D6E4 :                     Debug_SBZ:
   37695/   1D6E4 :                     		include	"_inc/Debug list - SBZ.asm"
(1)    1/   1D6E4 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D6E4 :                     ; Debug	list - Scrap Brain
(1)    3/   1D6E4 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D6E4 : 001D                	dc.w $1D
(1)    5/   1D6E6 : 2500 9F9E           	dc.l Map_obj25+$25000000
(1)    6/   1D6EA : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D6EE : 2600 A5A6           	dc.l Map_obj26+$26000000
(1)    8/   1D6F2 : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D6F6 : 5F01 1D38           	dc.l Map_obj5F+$5F000000
(1)   10/   1D6FA : 0000 0400           	dc.b 0,	0, 4, 0
(1)   11/   1D6FE : 6001 1FF4           	dc.l Map_obj60+$60000000
(1)   12/   1D702 : 0000 0429           	dc.b 0,	0, 4, $29
(1)   13/   1D706 : 7801 6FEA           	dc.l Map_obj78+$78000000
(1)   14/   1D70A : 0000 22B0           	dc.b 0,	0, $22,	$B0
(1)   15/   1D70E : 1501 0BB0           	dc.l Map_obj15b+$15000000
(1)   16/   1D712 : 0702 4391           	dc.b 7,	2, $43,	$91
(1)   17/   1D716 : 6701 5902           	dc.l Map_obj67+$67000000
(1)   18/   1D71A : E000 C344           	dc.b $E0, 0, $C3, $44
(1)   19/   1D71E : 5201 015A           	dc.l Map_obj52+$52000000
(1)   20/   1D722 : 2802 22C0           	dc.b $28, 2, $22, $C0
(1)   21/   1D726 : 3200 BF8E           	dc.l Map_obj32+$32000000
(1)   22/   1D72A : 0000 0513           	dc.b 0,	0, 5, $13
(1)   23/   1D72E : 6901 5B5C           	dc.l Map_obj69+$69000000
(1)   24/   1D732 : 0300 4492           	dc.b 3,	0, $44,	$92
(1)   25/   1D736 : 6901 5BB6           	dc.l Map_obj69a+$69000000
(1)   26/   1D73A : 8300 04DF           	dc.b $83, 0, 4,	$DF
(1)   27/   1D73E : 6A01 5E14           	dc.l Map_obj6A+$6A000000
(1)   28/   1D742 : 0200 43B5           	dc.b 2,	0, $43,	$B5
(1)   29/   1D746 : 5300 8752           	dc.l Map_obj53+$53000000
(1)   30/   1D74A : 0000 43F5           	dc.b 0,	0, $43,	$F5
(1)   31/   1D74E : 5201 015A           	dc.l Map_obj52+$52000000
(1)   32/   1D752 : 3903 4460           	dc.b $39, 3, $44, $60
(1)   33/   1D756 : 6B01 61E4           	dc.l Map_obj6B+$6B000000
(1)   34/   1D75A : 0000 22C0           	dc.b 0,	0, $22,	$C0
(1)   35/   1D75E : 2A00 89F8           	dc.l Map_obj2A+$2A000000
(1)   36/   1D762 : 0000 42E8           	dc.b 0,	0, $42,	$E8
(1)   37/   1D766 : 6B01 61E4           	dc.l Map_obj6B+$6B000000
(1)   38/   1D76A : 1301 22C0           	dc.b $13, 1, $22, $C0
(1)   39/   1D76E : 6A01 5E14           	dc.l Map_obj6A+$6A000000
(1)   40/   1D772 : 0100 43B5           	dc.b 1,	0, $43,	$B5
(1)   41/   1D776 : 6B01 61E4           	dc.l Map_obj6B+$6B000000
(1)   42/   1D77A : 2401 22C0           	dc.b $24, 1, $22, $C0
(1)   43/   1D77E : 6A01 5E14           	dc.l Map_obj6A+$6A000000
(1)   44/   1D782 : 0402 43B5           	dc.b 4,	2, $43,	$B5
(1)   45/   1D786 : 6B01 61E4           	dc.l Map_obj6B+$6B000000
(1)   46/   1D78A : 3401 22C0           	dc.b $34, 1, $22, $C0
(1)   47/   1D78E : 6C01 63A6           	dc.l Map_obj6C+$6C000000
(1)   48/   1D792 : 0000 44C3           	dc.b 0,	0, $44,	$C3
(1)   49/   1D796 : 6D00 E6FE           	dc.l Map_obj6D+$6D000000
(1)   50/   1D79A : 6400 83D9           	dc.b $64, 0, $83, $D9
(1)   51/   1D79E : 6D00 E6FE           	dc.l Map_obj6D+$6D000000
(1)   52/   1D7A2 : 640B 83D9           	dc.b $64, $B, $83, $D9
(1)   53/   1D7A6 : 6E01 645C           	dc.l Map_obj6E+$6E000000
(1)   54/   1D7AA : 0400 047E           	dc.b 4,	0, 4, $7E
(1)   55/   1D7AE : 7001 68A4           	dc.l Map_obj70+$70000000
(1)   56/   1D7B2 : 0000 42F0           	dc.b 0,	0, $42,	$F0
(1)   57/   1D7B6 : 7101 15C6           	dc.l Map_obj71+$71000000
(1)   58/   1D7BA : 1100 8680           	dc.b $11, 0, $86, $80
(1)   59/   1D7BE : 1E00 8E6E           	dc.l Map_obj1E+$1E000000
(1)   60/   1D7C2 : 0400 2302           	dc.b 4,	0, $23,	2
(1)   61/   1D7C6 : 7901 7374           	dc.l Map_obj79+$79000000
(1)   62/   1D7CA : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   63/   1D7CE : (MACRO)             	align 2
(1)   63/   1D7CE :  (MACRO-2)                  cnop 0,2
(1)   63/   1D7CE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37696/   1D7CE :                     
   37697/   1D7CE :                     ; ---------------------------------------------------------------------------
   37698/   1D7CE :                     ; Debug	list - ending sequence / special stage
   37699/   1D7CE :                     ; ---------------------------------------------------------------------------
   37700/   1D7CE :                     Debug_Ending:
   37701/   1D7CE :                     		include	"_inc/Debug list - Ending and SS.asm"
(1)    1/   1D7CE :                     ; ---------------------------------------------------------------------------
(1)    2/   1D7CE :                     ; Debug	list - ending sequence / special stage
(1)    3/   1D7CE :                     ; ---------------------------------------------------------------------------
(1)    4/   1D7CE : 000D                	dc.w $D
(1)    5/   1D7D0 : 2500 9F9E           	dc.l Map_obj25+$25000000
(1)    6/   1D7D4 : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D7D8 : 4700 EC0A           	dc.l Map_obj47+$47000000
(1)    8/   1D7DC : 0000 0380           	dc.b 0,	0, 3, $80
(1)    9/   1D7E0 : 2800 948A           	dc.l Map_obj28a+$28000000
(1)   10/   1D7E4 : 0A00 05A0           	dc.b $A, 0, 5, $A0
(1)   11/   1D7E8 : 2800 948A           	dc.l Map_obj28a+$28000000
(1)   12/   1D7EC : 0B00 05A0           	dc.b $B, 0, 5, $A0
(1)   13/   1D7F0 : 2800 948A           	dc.l Map_obj28a+$28000000
(1)   14/   1D7F4 : 0C00 05A0           	dc.b $C, 0, 5, $A0
(1)   15/   1D7F8 : 2800 9472           	dc.l Map_obj28+$28000000
(1)   16/   1D7FC : 0D00 0553           	dc.b $D, 0, 5, $53
(1)   17/   1D800 : 2800 9472           	dc.l Map_obj28+$28000000
(1)   18/   1D804 : 0E00 0553           	dc.b $E, 0, 5, $53
(1)   19/   1D808 : 2800 9472           	dc.l Map_obj28+$28000000
(1)   20/   1D80C : 0F00 0573           	dc.b $F, 0, 5, $73
(1)   21/   1D810 : 2800 9472           	dc.l Map_obj28+$28000000
(1)   22/   1D814 : 1000 0573           	dc.b $10, 0, 5,	$73
(1)   23/   1D818 : 2800 948A           	dc.l Map_obj28a+$28000000
(1)   24/   1D81C : 1100 0585           	dc.b $11, 0, 5,	$85
(1)   25/   1D820 : 2800 94A2           	dc.l Map_obj28b+$28000000
(1)   26/   1D824 : 1200 0593           	dc.b $12, 0, 5,	$93
(1)   27/   1D828 : 2800 948A           	dc.l Map_obj28a+$28000000
(1)   28/   1D82C : 1300 0565           	dc.b $13, 0, 5,	$65
(1)   29/   1D830 : 2800 94A2           	dc.l Map_obj28b+$28000000
(1)   30/   1D834 : 1400 05B3           	dc.b $14, 0, 5,	$B3
(1)   31/   1D838 : (MACRO)             	align 2
(1)   31/   1D838 :  (MACRO-2)                  cnop 0,2
(1)   31/   1D838 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37702/   1D838 :                     
   37703/   1D838 :                     ; ---------------------------------------------------------------------------
   37704/   1D838 :                     ; Main level load blocks
   37705/   1D838 :                     ; ---------------------------------------------------------------------------
   37706/   1D838 :                     MainLoadBlocks:
   37707/   1D838 :                     		include	"_inc/Main level load blocks.asm"
(1)    1/   1D838 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D838 :                     ; Main level load blocks
(1)    3/   1D838 :                     ;
(1)    4/   1D838 :                     ; ===FORMAT===
(1)    5/   1D838 :                     ; level	patterns + (1st	PLC num	* 10^6)
(1)    6/   1D838 :                     ; 16x16	mappings + (2nd	PLC num	* 10^6)
(1)    7/   1D838 :                     ; 256x256 mappings
(1)    8/   1D838 :                     ; blank, music (unused), pal index (unused), pal index
(1)    9/   1D838 :                     ; ---------------------------------------------------------------------------
(1)   10/   1D838 : 0403 EA98           	dc.l Nem_GHZ_2nd+$4000000
(1)   11/   1D83C : 0503 CB72           	dc.l Blk16_GHZ+$5000000
(1)   12/   1D840 : 0003 FE2C           	dc.l Blk256_GHZ
(1)   13/   1D844 : 0081 0404           	dc.b 0,	$81, 4,	4
(1)   14/   1D848 : 0604 2316           	dc.l Nem_LZ+$6000000
(1)   15/   1D84C : 0704 1FEC           	dc.l Blk16_LZ+$7000000
(1)   16/   1D850 : 0004 3E5E           	dc.l Blk256_LZ
(1)   17/   1D854 : 0082 0505           	dc.b 0,	$82, 5,	5
(1)   18/   1D858 : 0804 6E58           	dc.l Nem_MZ+$8000000
(1)   19/   1D85C : 0904 664E           	dc.l Blk16_MZ+$9000000
(1)   20/   1D860 : 0004 969C           	dc.l Blk256_MZ
(1)   21/   1D864 : 0083 0606           	dc.b 0,	$83, 6,	6
(1)   22/   1D868 : 0A04 B640           	dc.l Nem_SLZ+$A000000
(1)   23/   1D86C : 0B04 AE5C           	dc.l Blk16_SLZ+$B000000
(1)   24/   1D870 : 0004 F194           	dc.l Blk256_SLZ
(1)   25/   1D874 : 0084 0707           	dc.b 0,	$84, 7,	7
(1)   26/   1D878 : 0C05 1F32           	dc.l Nem_SYZ+$C000000
(1)   27/   1D87C : 0D05 15C4           	dc.l Blk16_SYZ+$D000000
(1)   28/   1D880 : 0005 565E           	dc.l Blk256_SYZ
(1)   29/   1D884 : 0085 0808           	dc.b 0,	$85, 8,	8
(1)   30/   1D888 : 0E05 88A8           	dc.l Nem_SBZ+$E000000
(1)   31/   1D88C : 0F05 7A0E           	dc.l Blk16_SBZ+$F000000
(1)   32/   1D890 : 0005 B054           	dc.l Blk256_SBZ
(1)   33/   1D894 : 0086 0909           	dc.b 0,	$86, 9,	9
(1)   34/   1D898 : 0003 EA98           	dc.l Nem_GHZ_2nd	; main load block for ending
(1)   35/   1D89C : 0003 CB72           	dc.l Blk16_GHZ
(1)   36/   1D8A0 : 0003 FE2C           	dc.l Blk256_GHZ
(1)   37/   1D8A4 : 0086 1313           	dc.b 0,	$86, $13, $13
(1)   38/   1D8A8 : (MACRO)             	align 2
(1)   38/   1D8A8 :  (MACRO-2)                  cnop 0,2
(1)   38/   1D8A8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37708/   1D8A8 :                     
   37709/   1D8A8 :                     ; ---------------------------------------------------------------------------
   37710/   1D8A8 :                     ; Pattern load cues
   37711/   1D8A8 :                     ; ---------------------------------------------------------------------------
   37712/   1D8A8 :                     ArtLoadCues:
   37713/   1D8A8 :                     		include	"_inc/Pattern load cues.asm"
(1)    1/   1D8A8 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D8A8 :                     ; Pattern load cues - index
(1)    3/   1D8A8 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D8A8 : 0040 0060           	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
(1)    5/   1D8AC : 0074 007C           	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
(1)    6/   1D8B0 : 0084 00CE           	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
(1)    7/   1D8B4 : 00F4 013E           	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
(1)    8/   1D8B8 : 018E 01CC           	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
(1)    9/   1D8BC : 01EC 0224           	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
(1)   10/   1D8C0 : 024A 026A           	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
(1)   11/   1D8C4 : 029C 02E6           	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
(1)   12/   1D8C8 : 0336 033E           	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
(1)   13/   1D8CC : 0364 0378           	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
(1)   14/   1D8D0 : 0380 03FA           	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
(1)   15/   1D8D4 : 0408 0416           	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
(1)   16/   1D8D8 : 0424 0432           	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
(1)   17/   1D8DC : 0440 044E           	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
(1)   18/   1D8E0 : 045C 04B8           	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
(1)   19/   1D8E4 : 04CC 04E0           	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
(1)   20/   1D8E8 :                     ; ---------------------------------------------------------------------------
(1)   21/   1D8E8 :                     ; Pattern load cues - standard block 1
(1)   22/   1D8E8 :                     ; ---------------------------------------------------------------------------
(1)   23/   1D8E8 : 0004                PLC_Main:	dc.w 4
(1)   24/   1D8EA : 0003 B83A           		dc.l Nem_Lamp		; lamppost
(1)   25/   1D8EE : F400                		dc.w $F400
(1)   26/   1D8F0 : 0003 A162           		dc.l Nem_Hud		; HUD
(1)   27/   1D8F4 : D940                		dc.w $D940
(1)   28/   1D8F6 : 0003 A2D6           		dc.l Nem_Lives		; lives	counter
(1)   29/   1D8FA : FA80                		dc.w $FA80
(1)   30/   1D8FC : 0003 A3E4           		dc.l Nem_Ring		; rings
(1)   31/   1D900 : F640                		dc.w $F640
(1)   32/   1D902 : 0003 AF9E           		dc.l Nem_Points		; points from enemy
(1)   33/   1D906 : F2E0                		dc.w $F2E0
(1)   34/   1D908 :                     ; ---------------------------------------------------------------------------
(1)   35/   1D908 :                     ; Pattern load cues - standard block 2
(1)   36/   1D908 :                     ; ---------------------------------------------------------------------------
(1)   37/   1D908 : 0002                PLC_Main2:	dc.w 2
(1)   38/   1D90A : 0003 A4D8           		dc.l Nem_Monitors	; monitors
(1)   39/   1D90E : D000                		dc.w $D000
(1)   40/   1D910 : 0002 CB56           		dc.l Nem_Shield		; shield
(1)   41/   1D914 : A820                		dc.w $A820
(1)   42/   1D916 : 0002 CCEC           		dc.l Nem_Stars		; invincibility	stars
(1)   43/   1D91A : AB80                		dc.w $AB80
(1)   44/   1D91C :                     ; ---------------------------------------------------------------------------
(1)   45/   1D91C :                     ; Pattern load cues - explosion
(1)   46/   1D91C :                     ; ---------------------------------------------------------------------------
(1)   47/   1D91C : 0000                PLC_Explode:	dc.w 0
(1)   48/   1D91E : 0003 A938           		dc.l Nem_Explode	; explosion
(1)   49/   1D922 : B400                		dc.w $B400
(1)   50/   1D924 :                     ; ---------------------------------------------------------------------------
(1)   51/   1D924 :                     ; Pattern load cues - game/time	over
(1)   52/   1D924 :                     ; ---------------------------------------------------------------------------
(1)   53/   1D924 : 0000                PLC_GameOver:	dc.w 0
(1)   54/   1D926 : 0003 B04E           		dc.l Nem_GameOver	; game/time over
(1)   55/   1D92A : ABC0                		dc.w $ABC0
(1)   56/   1D92C :                     ; ---------------------------------------------------------------------------
(1)   57/   1D92C :                     ; Pattern load cues - Green Hill
(1)   58/   1D92C :                     ; ---------------------------------------------------------------------------
(1)   59/   1D92C : 000B                PLC_GHZ:	dc.w $B
(1)   60/   1D92E : 0003 D486           		dc.l Nem_GHZ_1st	; GHZ main patterns
(1)   61/   1D932 : 0000                		dc.w 0
(1)   62/   1D934 : 0003 EA98           		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
(1)   63/   1D938 : 39A0                		dc.w $39A0
(1)   64/   1D93A : 0003 0218           		dc.l Nem_Stalk		; flower stalk
(1)   65/   1D93E : 6B00                		dc.w $6B00
(1)   66/   1D940 : 0003 0A0A           		dc.l Nem_PplRock	; purple rock
(1)   67/   1D944 : 7A00                		dc.w $7A00
(1)   68/   1D946 : 0003 6800           		dc.l Nem_Crabmeat	; crabmeat enemy
(1)   69/   1D94A : 8000                		dc.w $8000
(1)   70/   1D94C : 0003 6CEE           		dc.l Nem_Buzz		; buzz bomber enemy
(1)   71/   1D950 : 8880                		dc.w $8880
(1)   72/   1D952 : 0003 7966           		dc.l Nem_Chopper	; chopper enemy
(1)   73/   1D956 : 8F60                		dc.w $8F60
(1)   74/   1D958 : 0003 8606           		dc.l Nem_Newtron	; newtron enemy
(1)   75/   1D95C : 9360                		dc.w $9360
(1)   76/   1D95E : 0003 837C           		dc.l Nem_Motobug	; motobug enemy
(1)   77/   1D962 : 9E00                		dc.w $9E00
(1)   78/   1D964 : 0003 064E           		dc.l Nem_Spikes		; spikes
(1)   79/   1D968 : A360                		dc.w $A360
(1)   80/   1D96A : 0003 B1E0           		dc.l Nem_HSpring	; horizontal spring
(1)   81/   1D96E : A460                		dc.w $A460
(1)   82/   1D970 : 0003 B2E2           		dc.l Nem_VSpring	; vertical spring
(1)   83/   1D974 : A660                		dc.w $A660
(1)   84/   1D976 : 0005                PLC_GHZ2:	dc.w 5
(1)   85/   1D978 : 0003 0262           		dc.l Nem_Swing		; swinging platform
(1)   86/   1D97C : 7000                		dc.w $7000
(1)   87/   1D97E : 0003 037C           		dc.l Nem_Bridge		; bridge
(1)   88/   1D982 : 71C0                		dc.w $71C0
(1)   89/   1D984 : 0003 08DE           		dc.l Nem_SpikePole	; spiked pole
(1)   90/   1D988 : 7300                		dc.w $7300
(1)   91/   1D98A : 0003 04B0           		dc.l Nem_Ball		; giant	ball
(1)   92/   1D98E : 7540                		dc.w $7540
(1)   93/   1D990 : 0003 0B38           		dc.l Nem_GhzWall1	; breakable wall
(1)   94/   1D994 : A1E0                		dc.w $A1E0
(1)   95/   1D996 : 0003 0BD6           		dc.l Nem_GhzWall2	; normal wall
(1)   96/   1D99A : 6980                		dc.w $6980
(1)   97/   1D99C :                     ; ---------------------------------------------------------------------------
(1)   98/   1D99C :                     ; Pattern load cues - Labyrinth
(1)   99/   1D99C :                     ; ---------------------------------------------------------------------------
(1)  100/   1D99C : 000B                PLC_LZ:		dc.w $B
(1)  101/   1D99E : 0004 2316           		dc.l Nem_LZ		; LZ main patterns
(1)  102/   1D9A2 : 0000                		dc.w 0
(1)  103/   1D9A4 : 0003 2E64           		dc.l Nem_LzBlock1	; block
(1)  104/   1D9A8 : 3C00                		dc.w $3C00
(1)  105/   1D9AA : 0003 294A           		dc.l Nem_LzBlock2	; blocks
(1)  106/   1D9AE : 3E00                		dc.w $3E00
(1)  107/   1D9B0 : 0003 0D5A           		dc.l Nem_Splash		; waterfalls and splash
(1)  108/   1D9B4 : 4B20                		dc.w $4B20
(1)  109/   1D9B6 : 0003 0C36           		dc.l Nem_Water		; water	surface
(1)  110/   1D9BA : 6000                		dc.w $6000
(1)  111/   1D9BC : 0003 154E           		dc.l Nem_LzSpikeBall	; spiked ball
(1)  112/   1D9C0 : 6200                		dc.w $6200
(1)  113/   1D9C2 : 0003 16CE           		dc.l Nem_FlapDoor	; flapping door
(1)  114/   1D9C6 : 6500                		dc.w $6500
(1)  115/   1D9C8 : 0003 1838           		dc.l Nem_Bubbles	; bubbles and numbers
(1)  116/   1D9CC : 6900                		dc.w $6900
(1)  117/   1D9CE : 0003 1E8E           		dc.l Nem_LzBlock3	; block
(1)  118/   1D9D2 : 7780                		dc.w $7780
(1)  119/   1D9D4 : 0003 1F44           		dc.l Nem_LzDoor1	; vertical door
(1)  120/   1D9D8 : 7880                		dc.w $7880
(1)  121/   1D9DA : 0003 1FE6           		dc.l Nem_Harpoon	; harpoon
(1)  122/   1D9DE : 7980                		dc.w $7980
(1)  123/   1D9E0 : 0003 727C           		dc.l Nem_Burrobot	; burrobot enemy
(1)  124/   1D9E4 : 94C0                		dc.w $94C0
(1)  125/   1D9E6 : 000C                PLC_LZ2:	dc.w $C
(1)  126/   1D9E8 : 0003 2142           		dc.l Nem_LzPole		; pole that breaks
(1)  127/   1D9EC : 7BC0                		dc.w $7BC0
(1)  128/   1D9EE : 0003 21A6           		dc.l Nem_LzDoor2	; large	horizontal door
(1)  129/   1D9F2 : 7CC0                		dc.w $7CC0
(1)  130/   1D9F4 : 0003 22F8           		dc.l Nem_LzWheel	; wheel
(1)  131/   1D9F8 : 7EC0                		dc.w $7EC0
(1)  132/   1D9FA : 0003 27DA           		dc.l Nem_Gargoyle	; gargoyle head
(1)  133/   1D9FE : 5D20                		dc.w $5D20
(1)  134/   1DA00 : 0002 CE34           		dc.l Nem_LzSonic	; Sonic	holding	his breath
(1)  135/   1DA04 : 8800                		dc.w $8800
(1)  136/   1DA06 : 0003 2C02           		dc.l Nem_LzPlatfm	; rising platform
(1)  137/   1DA0A : 89E0                		dc.w $89E0
(1)  138/   1DA0C : 0003 97E8           		dc.l Nem_Orbinaut	; orbinaut enemy
(1)  139/   1DA10 : 8CE0                		dc.w $8CE0
(1)  140/   1DA12 : 0003 7BCE           		dc.l Nem_Jaws		; jaws enemy
(1)  141/   1DA16 : 90C0                		dc.w $90C0
(1)  142/   1DA18 : 0003 4E14           		dc.l Nem_LzSwitch	; switch
(1)  143/   1DA1C : A1E0                		dc.w $A1E0
(1)  144/   1DA1E : 0003 2D3A           		dc.l Nem_Cork		; cork block
(1)  145/   1DA22 : A000                		dc.w $A000
(1)  146/   1DA24 : 0003 064E           		dc.l Nem_Spikes		; spikes
(1)  147/   1DA28 : A360                		dc.w $A360
(1)  148/   1DA2A : 0003 B1E0           		dc.l Nem_HSpring	; horizontal spring
(1)  149/   1DA2E : A460                		dc.w $A460
(1)  150/   1DA30 : 0003 B2E2           		dc.l Nem_VSpring	; vertical spring
(1)  151/   1DA34 : A660                		dc.w $A660
(1)  152/   1DA36 :                     ; ---------------------------------------------------------------------------
(1)  153/   1DA36 :                     ; Pattern load cues - Marble
(1)  154/   1DA36 :                     ; ---------------------------------------------------------------------------
(1)  155/   1DA36 : 0009                PLC_MZ:		dc.w 9
(1)  156/   1DA38 : 0004 6E58           		dc.l Nem_MZ		; MZ main patterns
(1)  157/   1DA3C : 0000                		dc.w 0
(1)  158/   1DA3E : 0003 2F74           		dc.l Nem_MzMetal	; metal	blocks
(1)  159/   1DA42 : 6000                		dc.w $6000
(1)  160/   1DA44 : 0003 33CC           		dc.l Nem_MzFire		; fireballs
(1)  161/   1DA48 : 68A0                		dc.w $68A0
(1)  162/   1DA4A : 0003 0262           		dc.l Nem_Swing		; swinging platform
(1)  163/   1DA4E : 7000                		dc.w $7000
(1)  164/   1DA50 : 0003 32C0           		dc.l Nem_MzGlass	; green	glassy block
(1)  165/   1DA54 : 71C0                		dc.w $71C0
(1)  166/   1DA56 : 0003 36AA           		dc.l Nem_Lava		; lava
(1)  167/   1DA5A : 7500                		dc.w $7500
(1)  168/   1DA5C : 0003 6CEE           		dc.l Nem_Buzz		; buzz bomber enemy
(1)  169/   1DA60 : 8880                		dc.w $8880
(1)  170/   1DA62 : 0003 8C24           		dc.l Nem_Yadrin		; yadrin enemy
(1)  171/   1DA66 : 8F60                		dc.w $8F60
(1)  172/   1DA68 : 0003 900C           		dc.l Nem_Basaran	; basaran enemy
(1)  173/   1DA6C : 9700                		dc.w $9700
(1)  174/   1DA6E : 0003 99C6           		dc.l Nem_Cater		; caterkiller enemy
(1)  175/   1DA72 : 9FE0                		dc.w $9FE0
(1)  176/   1DA74 : 0004                PLC_MZ2:	dc.w 4
(1)  177/   1DA76 : 0003 3202           		dc.l Nem_MzSwitch	; switch
(1)  178/   1DA7A : A260                		dc.w $A260
(1)  179/   1DA7C : 0003 064E           		dc.l Nem_Spikes		; spikes
(1)  180/   1DA80 : A360                		dc.w $A360
(1)  181/   1DA82 : 0003 B1E0           		dc.l Nem_HSpring	; horizontal spring
(1)  182/   1DA86 : A460                		dc.w $A460
(1)  183/   1DA88 : 0003 B2E2           		dc.l Nem_VSpring	; vertical spring
(1)  184/   1DA8C : A660                		dc.w $A660
(1)  185/   1DA8E : 0003 3FC0           		dc.l Nem_MzBlock	; green	stone block
(1)  186/   1DA92 : 5700                		dc.w $5700
(1)  187/   1DA94 :                     ; ---------------------------------------------------------------------------
(1)  188/   1DA94 :                     ; Pattern load cues - Star Light
(1)  189/   1DA94 :                     ; ---------------------------------------------------------------------------
(1)  190/   1DA94 : 0008                PLC_SLZ:	dc.w 8
(1)  191/   1DA96 : 0004 B640           		dc.l Nem_SLZ		; SLZ main patterns
(1)  192/   1DA9A : 0000                		dc.w 0
(1)  193/   1DA9C : 0003 9550           		dc.l Nem_Bomb		; bomb enemy
(1)  194/   1DAA0 : 8000                		dc.w $8000
(1)  195/   1DAA2 : 0003 97E8           		dc.l Nem_Orbinaut	; orbinaut enemy
(1)  196/   1DAA6 : 8520                		dc.w $8520
(1)  197/   1DAA8 : 0003 33CC           		dc.l Nem_MzFire		; fireballs
(1)  198/   1DAAC : 9000                		dc.w $9000
(1)  199/   1DAAE : 0003 4A98           		dc.l Nem_SlzBlock	; block
(1)  200/   1DAB2 : 9C00                		dc.w $9C00
(1)  201/   1DAB4 : 0003 4772           		dc.l Nem_SlzWall	; breakable wall
(1)  202/   1DAB8 : A260                		dc.w $A260
(1)  203/   1DABA : 0003 064E           		dc.l Nem_Spikes		; spikes
(1)  204/   1DABE : A360                		dc.w $A360
(1)  205/   1DAC0 : 0003 B1E0           		dc.l Nem_HSpring	; horizontal spring
(1)  206/   1DAC4 : A460                		dc.w $A460
(1)  207/   1DAC6 : 0003 B2E2           		dc.l Nem_VSpring	; vertical spring
(1)  208/   1DACA : A660                		dc.w $A660
(1)  209/   1DACC : 0005                PLC_SLZ2:	dc.w 5
(1)  210/   1DACE : 0003 41AC           		dc.l Nem_Seesaw		; seesaw
(1)  211/   1DAD2 : 6E80                		dc.w $6E80
(1)  212/   1DAD4 : 0003 452E           		dc.l Nem_Fan		; fan
(1)  213/   1DAD8 : 7400                		dc.w $7400
(1)  214/   1DADA : 0003 47D4           		dc.l Nem_Pylon		; foreground pylon
(1)  215/   1DADE : 7980                		dc.w $7980
(1)  216/   1DAE0 : 0003 48B6           		dc.l Nem_SlzSwing	; swinging platform
(1)  217/   1DAE4 : 7B80                		dc.w $7B80
(1)  218/   1DAE6 : 0003 4BA4           		dc.l Nem_SlzCannon	; fireball launcher
(1)  219/   1DAEA : 9B00                		dc.w $9B00
(1)  220/   1DAEC : 0003 43E8           		dc.l Nem_SlzSpike	; spikeball
(1)  221/   1DAF0 : 9E00                		dc.w $9E00
(1)  222/   1DAF2 :                     ; ---------------------------------------------------------------------------
(1)  223/   1DAF2 :                     ; Pattern load cues - Spring Yard
(1)  224/   1DAF2 :                     ; ---------------------------------------------------------------------------
(1)  225/   1DAF2 : 0004                PLC_SYZ:	dc.w 4
(1)  226/   1DAF4 : 0005 1F32           		dc.l Nem_SYZ		; SYZ main patterns
(1)  227/   1DAF8 : 0000                		dc.w 0
(1)  228/   1DAFA : 0003 6800           		dc.l Nem_Crabmeat	; crabmeat enemy
(1)  229/   1DAFE : 8000                		dc.w $8000
(1)  230/   1DB00 : 0003 6CEE           		dc.l Nem_Buzz		; buzz bomber enemy
(1)  231/   1DB04 : 8880                		dc.w $8880
(1)  232/   1DB06 : 0003 8C24           		dc.l Nem_Yadrin		; yadrin enemy
(1)  233/   1DB0A : 8F60                		dc.w $8F60
(1)  234/   1DB0C : 0003 7E58           		dc.l Nem_Roller		; roller enemy
(1)  235/   1DB10 : 9700                		dc.w $9700
(1)  236/   1DB12 : 0007                PLC_SYZ2:	dc.w 7
(1)  237/   1DB14 : 0003 4C48           		dc.l Nem_Bumper		; bumper
(1)  238/   1DB18 : 7000                		dc.w $7000
(1)  239/   1DB1A : 0003 4EF6           		dc.l Nem_SyzSpike1	; large	spikeball
(1)  240/   1DB1E : 72C0                		dc.w $72C0
(1)  241/   1DB20 : 0003 4DB2           		dc.l Nem_SyzSpike2	; small	spikeball
(1)  242/   1DB24 : 7740                		dc.w $7740
(1)  243/   1DB26 : 0003 99C6           		dc.l Nem_Cater		; caterkiller enemy
(1)  244/   1DB2A : 9FE0                		dc.w $9FE0
(1)  245/   1DB2C : 0003 4E14           		dc.l Nem_LzSwitch	; switch
(1)  246/   1DB30 : A1E0                		dc.w $A1E0
(1)  247/   1DB32 : 0003 064E           		dc.l Nem_Spikes		; spikes
(1)  248/   1DB36 : A360                		dc.w $A360
(1)  249/   1DB38 : 0003 B1E0           		dc.l Nem_HSpring	; horizontal spring
(1)  250/   1DB3C : A460                		dc.w $A460
(1)  251/   1DB3E : 0003 B2E2           		dc.l Nem_VSpring	; vertical spring
(1)  252/   1DB42 : A660                		dc.w $A660
(1)  253/   1DB44 :                     ; ---------------------------------------------------------------------------
(1)  254/   1DB44 :                     ; Pattern load cues - Scrap Brain
(1)  255/   1DB44 :                     ; ---------------------------------------------------------------------------
(1)  256/   1DB44 : 000B                PLC_SBZ:	dc.w $B
(1)  257/   1DB46 : 0005 88A8           		dc.l Nem_SBZ		; SBZ main patterns
(1)  258/   1DB4A : 0000                		dc.w 0
(1)  259/   1DB4C : 0003 5678           		dc.l Nem_Stomper	; moving platform and stomper
(1)  260/   1DB50 : 5800                		dc.w $5800
(1)  261/   1DB52 : 0003 6186           		dc.l Nem_SbzDoor1	; door
(1)  262/   1DB56 : 5D00                		dc.w $5D00
(1)  263/   1DB58 : 0003 632A           		dc.l Nem_Girder		; girder
(1)  264/   1DB5C : 5E00                		dc.w $5E00
(1)  265/   1DB5E : 0003 6440           		dc.l Nem_BallHog	; ball hog enemy
(1)  266/   1DB62 : 6040                		dc.w $6040
(1)  267/   1DB64 : 0003 5184           		dc.l Nem_SbzWheel1	; spot on large	wheel
(1)  268/   1DB68 : 6880                		dc.w $6880
(1)  269/   1DB6A : 0003 51D8           		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
(1)  270/   1DB6E : 6900                		dc.w $6900
(1)  271/   1DB70 : 0003 4EF6           		dc.l Nem_SyzSpike1	; large	spikeball
(1)  272/   1DB74 : 7220                		dc.w $7220
(1)  273/   1DB76 : 0003 5474           		dc.l Nem_Cutter		; pizza	cutter
(1)  274/   1DB7A : 76A0                		dc.w $76A0
(1)  275/   1DB7C : 0003 5FFA           		dc.l Nem_FlamePipe	; flaming pipe
(1)  276/   1DB80 : 7B20                		dc.w $7B20
(1)  277/   1DB82 : 0003 5D24           		dc.l Nem_SbzFloor	; collapsing floor
(1)  278/   1DB86 : 7EA0                		dc.w $7EA0
(1)  279/   1DB88 : 0003 5EFC           		dc.l Nem_SbzBlock	; vanishing block
(1)  280/   1DB8C : 9860                		dc.w $9860
(1)  281/   1DB8E : 000C                PLC_SBZ2:	dc.w $C
(1)  282/   1DB90 : 0003 99C6           		dc.l Nem_Cater		; caterkiller enemy
(1)  283/   1DB94 : 5600                		dc.w $5600
(1)  284/   1DB96 : 0003 9550           		dc.l Nem_Bomb		; bomb enemy
(1)  285/   1DB9A : 8000                		dc.w $8000
(1)  286/   1DB9C : 0003 97E8           		dc.l Nem_Orbinaut	; orbinaut enemy
(1)  287/   1DBA0 : 8520                		dc.w $8520
(1)  288/   1DBA2 : 0003 61D6           		dc.l Nem_SlideFloor	; floor	that slides away
(1)  289/   1DBA6 : 8C00                		dc.w $8C00
(1)  290/   1DBA8 : 0003 622E           		dc.l Nem_SbzDoor2	; horizontal door
(1)  291/   1DBAC : 8DE0                		dc.w $8DE0
(1)  292/   1DBAE : 0003 5D7C           		dc.l Nem_Electric	; electric orb
(1)  293/   1DBB2 : 8FC0                		dc.w $8FC0
(1)  294/   1DBB4 : 0003 5B46           		dc.l Nem_TrapDoor	; trapdoor
(1)  295/   1DBB8 : 9240                		dc.w $9240
(1)  296/   1DBBA : 0003 5D24           		dc.l Nem_SbzFloor	; collapsing floor
(1)  297/   1DBBE : 7F20                		dc.w $7F20
(1)  298/   1DBC0 : 0003 5816           		dc.l Nem_SpinPform	; small	spinning platform
(1)  299/   1DBC4 : 9BE0                		dc.w $9BE0
(1)  300/   1DBC6 : 0003 4E14           		dc.l Nem_LzSwitch	; switch
(1)  301/   1DBCA : A1E0                		dc.w $A1E0
(1)  302/   1DBCC : 0003 064E           		dc.l Nem_Spikes		; spikes
(1)  303/   1DBD0 : A360                		dc.w $A360
(1)  304/   1DBD2 : 0003 B1E0           		dc.l Nem_HSpring	; horizontal spring
(1)  305/   1DBD6 : A460                		dc.w $A460
(1)  306/   1DBD8 : 0003 B2E2           		dc.l Nem_VSpring	; vertical spring
(1)  307/   1DBDC : A660                		dc.w $A660
(1)  308/   1DBDE :                     ; ---------------------------------------------------------------------------
(1)  309/   1DBDE :                     ; Pattern load cues - title card
(1)  310/   1DBDE :                     ; ---------------------------------------------------------------------------
(1)  311/   1DBDE : 0000                PLC_TitleCard:	dc.w 0
(1)  312/   1DBE0 : 0003 9B54           		dc.l Nem_TitleCard
(1)  313/   1DBE4 : B000                		dc.w $B000
(1)  314/   1DBE6 :                     ; ---------------------------------------------------------------------------
(1)  315/   1DBE6 :                     ; Pattern load cues - act 3 boss
(1)  316/   1DBE6 :                     ; ---------------------------------------------------------------------------
(1)  317/   1DBE6 : 0005                PLC_Boss:	dc.w 5
(1)  318/   1DBE8 : 0005 DAA4           		dc.l Nem_Eggman		; Eggman main patterns
(1)  319/   1DBEC : 8000                		dc.w $8000
(1)  320/   1DBEE : 0005 E308           		dc.l Nem_Weapons	; Eggman's weapons
(1)  321/   1DBF2 : 8D80                		dc.w $8D80
(1)  322/   1DBF4 : 0005 E5F2           		dc.l Nem_Prison		; prison capsule
(1)  323/   1DBF8 : 93A0                		dc.w $93A0
(1)  324/   1DBFA : 0003 9550           		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
(1)  325/   1DBFE : A300                		dc.w $A300
(1)  326/   1DC00 : 0003 43E8           		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
(1)  327/   1DC04 : A300                		dc.w $A300
(1)  328/   1DC06 : 0006 038A           		dc.l Nem_Exhaust	; exhaust flame
(1)  329/   1DC0A : A540                		dc.w $A540
(1)  330/   1DC0C :                     ; ---------------------------------------------------------------------------
(1)  331/   1DC0C :                     ; Pattern load cues - act 1/2 signpost
(1)  332/   1DC0C :                     ; ---------------------------------------------------------------------------
(1)  333/   1DC0C : 0002                PLC_Signpost:	dc.w 2
(1)  334/   1DC0E : 0003 B3BE           		dc.l Nem_SignPost	; signpost
(1)  335/   1DC12 : D000                		dc.w $D000
(1)  336/   1DC14 : 0003 BA6E           		dc.l Nem_Bonus		; hidden bonus points
(1)  337/   1DC18 : 96C0                		dc.w $96C0
(1)  338/   1DC1A : 0003 B8FA           		dc.l Nem_BigFlash	; giant	ring flash effect
(1)  339/   1DC1E : 8C40                		dc.w $8C40
(1)  340/   1DC20 :                     ; ---------------------------------------------------------------------------
(1)  341/   1DC20 :                     ; Pattern load cues - beta special stage warp effect
(1)  342/   1DC20 :                     ; ---------------------------------------------------------------------------
(1)  343/   1DC20 : 0000                PLC_Warp:	dc.w 0
(1)  344/   1DC22 : 0002 CF90           		dc.l Nem_Warp
(1)  345/   1DC26 : A820                		dc.w $A820
(1)  346/   1DC28 :                     ; ---------------------------------------------------------------------------
(1)  347/   1DC28 :                     ; Pattern load cues - special stage
(1)  348/   1DC28 :                     ; ---------------------------------------------------------------------------
(1)  349/   1DC28 : 0010                PLC_SpeStage:	dc.w $10
(1)  350/   1DC2A : 0002 EDDA           		dc.l Nem_SSBgCloud	; bubble and cloud background
(1)  351/   1DC2E : 0000                		dc.w 0
(1)  352/   1DC30 : 0002 DE4A           		dc.l Nem_SSBgFish	; bird and fish	background
(1)  353/   1DC34 : 0A20                		dc.w $A20
(1)  354/   1DC36 : 0002 D3DE           		dc.l Nem_SSWalls	; walls
(1)  355/   1DC3A : 2840                		dc.w $2840
(1)  356/   1DC3C : 0003 4C48           		dc.l Nem_Bumper		; bumper
(1)  357/   1DC40 : 4760                		dc.w $4760
(1)  358/   1DC42 : 0002 F2CE           		dc.l Nem_SSGOAL		; GOAL block
(1)  359/   1DC46 : 4A20                		dc.w $4A20
(1)  360/   1DC48 : 0002 FB30           		dc.l Nem_SSUpDown	; UP and DOWN blocks
(1)  361/   1DC4C : 4C60                		dc.w $4C60
(1)  362/   1DC4E : 0002 F3BC           		dc.l Nem_SSRBlock	; R block
(1)  363/   1DC52 : 5E00                		dc.w $5E00
(1)  364/   1DC54 : 0002 F48C           		dc.l Nem_SS1UpBlock	; 1UP block
(1)  365/   1DC58 : 6E00                		dc.w $6E00
(1)  366/   1DC5A : 0002 F582           		dc.l Nem_SSEmStars	; emerald collection stars
(1)  367/   1DC5E : 7E00                		dc.w $7E00
(1)  368/   1DC60 : 0002 F5E0           		dc.l Nem_SSRedWhite	; red and white	block
(1)  369/   1DC64 : 8E00                		dc.w $8E00
(1)  370/   1DC66 : 0002 FE8C           		dc.l Nem_SSGhost	; ghost	block
(1)  371/   1DC6A : 9E00                		dc.w $9E00
(1)  372/   1DC6C : 0002 FF3C           		dc.l Nem_SSWBlock	; W block
(1)  373/   1DC70 : AE00                		dc.w $AE00
(1)  374/   1DC72 : 0003 0016           		dc.l Nem_SSGlass	; glass	block
(1)  375/   1DC76 : BE00                		dc.w $BE00
(1)  376/   1DC78 : 0002 FD24           		dc.l Nem_SSEmerald	; emeralds
(1)  377/   1DC7C : EE00                		dc.w $EE00
(1)  378/   1DC7E : 0002 F672           		dc.l Nem_SSZone1	; ZONE 1 block
(1)  379/   1DC82 : F2E0                		dc.w $F2E0
(1)  380/   1DC84 : 0002 F734           		dc.l Nem_SSZone2	; ZONE 2 block
(1)  381/   1DC88 : F400                		dc.w $F400
(1)  382/   1DC8A : 0002 F802           		dc.l Nem_SSZone3	; ZONE 3 block
(1)  383/   1DC8E : F520                		dc.w $F520
(1)  384/   1DC90 : 0002 F8CE           		dc.l Nem_SSZone4	; ZONE 4 block
(1)  385/   1DC94 : F2E0                		dc.w $F2E0
(1)  386/   1DC96 : 0002 F996           		dc.l Nem_SSZone5	; ZONE 5 block
(1)  387/   1DC9A : F400                		dc.w $F400
(1)  388/   1DC9C : 0002 FA60           		dc.l Nem_SSZone6	; ZONE 6 block
(1)  389/   1DCA0 : F520                		dc.w $F520
(1)  390/   1DCA2 :                     ; ---------------------------------------------------------------------------
(1)  391/   1DCA2 :                     ; Pattern load cues - GHZ animals
(1)  392/   1DCA2 :                     ; ---------------------------------------------------------------------------
(1)  393/   1DCA2 : 0001                PLC_GHZAnimals:	dc.w 1
(1)  394/   1DCA4 : 0003 C25A           		dc.l Nem_Rabbit		; rabbit
(1)  395/   1DCA8 : B000                		dc.w $B000
(1)  396/   1DCAA : 0003 C8DC           		dc.l Nem_Flicky		; flicky
(1)  397/   1DCAE : B240                		dc.w $B240
(1)  398/   1DCB0 :                     ; ---------------------------------------------------------------------------
(1)  399/   1DCB0 :                     ; Pattern load cues - LZ animals
(1)  400/   1DCB0 :                     ; ---------------------------------------------------------------------------
(1)  401/   1DCB0 : 0001                PLC_LZAnimals:	dc.w 1
(1)  402/   1DCB2 : 0003 C50E           		dc.l Nem_BlackBird	; blackbird
(1)  403/   1DCB6 : B000                		dc.w $B000
(1)  404/   1DCB8 : 0003 C68A           		dc.l Nem_Seal		; seal
(1)  405/   1DCBC : B240                		dc.w $B240
(1)  406/   1DCBE :                     ; ---------------------------------------------------------------------------
(1)  407/   1DCBE :                     ; Pattern load cues - MZ animals
(1)  408/   1DCBE :                     ; ---------------------------------------------------------------------------
(1)  409/   1DCBE : 0001                PLC_MZAnimals:	dc.w 1
(1)  410/   1DCC0 : 0003 CA16           		dc.l Nem_Squirrel	; squirrel
(1)  411/   1DCC4 : B000                		dc.w $B000
(1)  412/   1DCC6 : 0003 C68A           		dc.l Nem_Seal		; seal
(1)  413/   1DCCA : B240                		dc.w $B240
(1)  414/   1DCCC :                     ; ---------------------------------------------------------------------------
(1)  415/   1DCCC :                     ; Pattern load cues - SLZ animals
(1)  416/   1DCCC :                     ; ---------------------------------------------------------------------------
(1)  417/   1DCCC : 0001                PLC_SLZAnimals:	dc.w 1
(1)  418/   1DCCE : 0003 C7A6           		dc.l Nem_Pig		; pig
(1)  419/   1DCD2 : B000                		dc.w $B000
(1)  420/   1DCD4 : 0003 C8DC           		dc.l Nem_Flicky		; flicky
(1)  421/   1DCD8 : B240                		dc.w $B240
(1)  422/   1DCDA :                     ; ---------------------------------------------------------------------------
(1)  423/   1DCDA :                     ; Pattern load cues - SYZ animals
(1)  424/   1DCDA :                     ; ---------------------------------------------------------------------------
(1)  425/   1DCDA : 0001                PLC_SYZAnimals:	dc.w 1
(1)  426/   1DCDC : 0003 C7A6           		dc.l Nem_Pig		; pig
(1)  427/   1DCE0 : B000                		dc.w $B000
(1)  428/   1DCE2 : 0003 C3B2           		dc.l Nem_Chicken	; chicken
(1)  429/   1DCE6 : B240                		dc.w $B240
(1)  430/   1DCE8 :                     ; ---------------------------------------------------------------------------
(1)  431/   1DCE8 :                     ; Pattern load cues - SBZ animals
(1)  432/   1DCE8 :                     ; ---------------------------------------------------------------------------
(1)  433/   1DCE8 : 0001                PLC_SBZAnimals:	dc.w 1
(1)  434/   1DCEA : 0003 C25A           		dc.l Nem_Rabbit		; rabbit
(1)  435/   1DCEE : B000                		dc.w $B000
(1)  436/   1DCF0 : 0003 C3B2           		dc.l Nem_Chicken	; chicken
(1)  437/   1DCF4 : B240                		dc.w $B240
(1)  438/   1DCF6 :                     ; ---------------------------------------------------------------------------
(1)  439/   1DCF6 :                     ; Pattern load cues - special stage results screen
(1)  440/   1DCF6 :                     ; ---------------------------------------------------------------------------
(1)  441/   1DCF6 : 0001                PLC_SpeStResult:dc.w 1
(1)  442/   1DCF8 : 0003 009A           		dc.l Nem_ResultEm	; emeralds
(1)  443/   1DCFC : A820                		dc.w $A820
(1)  444/   1DCFE : 0003 C020           		dc.l Nem_MiniSonic	; mini Sonic
(1)  445/   1DD02 : AA20                		dc.w $AA20
(1)  446/   1DD04 :                     ; ---------------------------------------------------------------------------
(1)  447/   1DD04 :                     ; Pattern load cues - ending sequence
(1)  448/   1DD04 :                     ; ---------------------------------------------------------------------------
(1)  449/   1DD04 : 000E                PLC_Ending:	dc.w $E
(1)  450/   1DD06 : 0003 D486           		dc.l Nem_GHZ_1st	; GHZ main patterns
(1)  451/   1DD0A : 0000                		dc.w 0
(1)  452/   1DD0C : 0003 EA98           		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
(1)  453/   1DD10 : 39A0                		dc.w $39A0
(1)  454/   1DD12 : 0003 0218           		dc.l Nem_Stalk		; flower stalk
(1)  455/   1DD16 : 6B00                		dc.w $6B00
(1)  456/   1DD18 : 0006 2B30           		dc.l Nem_EndFlower	; flowers
(1)  457/   1DD1C : 7400                		dc.w $7400
(1)  458/   1DD1E : 0006 04AA           		dc.l Nem_EndEm		; emeralds
(1)  459/   1DD22 : 78A0                		dc.w $78A0
(1)  460/   1DD24 : 0006 06A8           		dc.l Nem_EndSonic	; Sonic
(1)  461/   1DD28 : 7C20                		dc.w $7C20
(1)  462/   1DD2A : 0006 21CA           		dc.l Nem_EndEggman	; Eggman's death (unused)
(1)  463/   1DD2E : A480                		dc.w $A480
(1)  464/   1DD30 : 0003 C25A           		dc.l Nem_Rabbit		; rabbit
(1)  465/   1DD34 : AA60                		dc.w $AA60
(1)  466/   1DD36 : 0003 C3B2           		dc.l Nem_Chicken	; chicken
(1)  467/   1DD3A : ACA0                		dc.w $ACA0
(1)  468/   1DD3C : 0003 C50E           		dc.l Nem_BlackBird	; blackbird
(1)  469/   1DD40 : AE60                		dc.w $AE60
(1)  470/   1DD42 : 0003 C68A           		dc.l Nem_Seal		; seal
(1)  471/   1DD46 : B0A0                		dc.w $B0A0
(1)  472/   1DD48 : 0003 C7A6           		dc.l Nem_Pig		; pig
(1)  473/   1DD4C : B260                		dc.w $B260
(1)  474/   1DD4E : 0003 C8DC           		dc.l Nem_Flicky		; flicky
(1)  475/   1DD52 : B4A0                		dc.w $B4A0
(1)  476/   1DD54 : 0003 CA16           		dc.l Nem_Squirrel	; squirrel
(1)  477/   1DD58 : B660                		dc.w $B660
(1)  478/   1DD5A : 0006 33B6           		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
(1)  479/   1DD5E : B8A0                		dc.w $B8A0
(1)  480/   1DD60 :                     ; ---------------------------------------------------------------------------
(1)  481/   1DD60 :                     ; Pattern load cues - "TRY AGAIN" and "END" screens
(1)  482/   1DD60 :                     ; ---------------------------------------------------------------------------
(1)  483/   1DD60 : 0002                PLC_TryAgain:	dc.w 2
(1)  484/   1DD62 : 0006 04AA           		dc.l Nem_EndEm		; emeralds
(1)  485/   1DD66 : 78A0                		dc.w $78A0
(1)  486/   1DD68 : 0006 1886           		dc.l Nem_TryAgain	; Eggman
(1)  487/   1DD6C : 7C20                		dc.w $7C20
(1)  488/   1DD6E : 0006 2DB8           		dc.l Nem_CreditText	; credits alphabet
(1)  489/   1DD72 : B400                		dc.w $B400
(1)  490/   1DD74 :                     ; ---------------------------------------------------------------------------
(1)  491/   1DD74 :                     ; Pattern load cues - Eggman on SBZ 2
(1)  492/   1DD74 :                     ; ---------------------------------------------------------------------------
(1)  493/   1DD74 : 0002                PLC_EggmanSBZ2:	dc.w 2
(1)  494/   1DD76 : 0003 5EFC           		dc.l Nem_SbzBlock	; block
(1)  495/   1DD7A : A300                		dc.w $A300
(1)  496/   1DD7C : 0005 EE76           		dc.l Nem_Sbz2Eggman	; Eggman
(1)  497/   1DD80 : 8000                		dc.w $8000
(1)  498/   1DD82 : 0003 4E14           		dc.l Nem_LzSwitch	; switch
(1)  499/   1DD86 : 9400                		dc.w $9400
(1)  500/   1DD88 :                     ; ---------------------------------------------------------------------------
(1)  501/   1DD88 :                     ; Pattern load cues - final boss
(1)  502/   1DD88 :                     ; ---------------------------------------------------------------------------
(1)  503/   1DD88 : 0004                PLC_FZBoss:	dc.w 4
(1)  504/   1DD8A : 0005 FE0A           		dc.l Nem_FzEggman	; Eggman after boss
(1)  505/   1DD8E : 7400                		dc.w $7400
(1)  506/   1DD90 : 0005 F6A2           		dc.l Nem_FzBoss		; FZ boss
(1)  507/   1DD94 : 6000                		dc.w $6000
(1)  508/   1DD96 : 0005 DAA4           		dc.l Nem_Eggman		; Eggman main patterns
(1)  509/   1DD9A : 8000                		dc.w $8000
(1)  510/   1DD9C : 0005 EE76           		dc.l Nem_Sbz2Eggman	; Eggman without ship
(1)  511/   1DDA0 : 8E00                		dc.w $8E00
(1)  512/   1DDA2 : 0006 038A           		dc.l Nem_Exhaust	; exhaust flame
(1)  513/   1DDA6 : A540                		dc.w $A540
(1)  514/   1DDA8 : (MACRO)             		align 2
(1)  514/   1DDA8 :  (MACRO-2)                  cnop 0,2
(1)  514/   1DDA8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37714/   1DDA8 :                     
   37715/   1DDA8 :                     		binclude	misc/padding.bin
   37716/   1DE96 : (MACRO)             		align 2
   37716/   1DE96 :  (MACRO-2)                  cnop 0,2
   37716/   1DE96 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37717/   1DE96 :                     Nem_SegaLogo:	binclude	artnem/segalogo.bin	; large Sega logo
   37718/   1E2F8 : (MACRO)             		align 2
   37718/   1E2F8 :  (MACRO-2)                  cnop 0,2
   37718/   1E2F8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37719/   1E2F8 :                     Eni_SegaLogo:	binclude	mapeni/segalogo.bin	; large Sega logo (mappings)
   37720/   1E3F0 : (MACRO)             		align 2
   37720/   1E3F0 :  (MACRO-2)                  cnop 0,2
   37720/   1E3F0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37721/   1E3F0 :                     Eni_Title:	binclude	mapeni/titlescr.bin	; title screen foreground (mappings)
   37722/   1E504 : (MACRO)             		align 2
   37722/   1E504 :  (MACRO-2)                  cnop 0,2
   37722/   1E504 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37723/   1E504 :                     Nem_TitleFg:	binclude	artnem/titlefor.bin	; title screen foreground
   37724/   1F510 : (MACRO)             		align 2
   37724/   1F510 :  (MACRO-2)                  cnop 0,2
   37724/   1F510 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37725/   1F510 :                     Nem_TitleSonic:	binclude	artnem/titleson.bin	; Sonic on title screen
   37726/   20E87 : (MACRO)             		align 2
   37726/   20E87 :  (MACRO-2)                  cnop 0,2
   37726/   20E87 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37726/   20E87 : =$43                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
   37726/   20E88 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   37727/   20E88 :                     Nem_TitleTM:	binclude	artnem/titletm.bin	; TM on title screen
   37728/   20EBC : (MACRO)             		align 2
   37728/   20EBC :  (MACRO-2)                  cnop 0,2
   37728/   20EBC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37729/   20EBC :                     Eni_JapNames:	binclude	mapeni/japcreds.bin	; Japanese credits (mappings)
   37730/   20F7A : (MACRO)             		align 2
   37730/   20F7A :  (MACRO-2)                  cnop 0,2
   37730/   20F7A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37731/   20F7A :                     Nem_JapNames:	binclude	artnem/japcreds.bin	; Japanese credits
   37732/   21422 : (MACRO)             		align 2
   37732/   21422 :  (MACRO-2)                  cnop 0,2
   37732/   21422 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37733/   21422 :                     ; ---------------------------------------------------------------------------
   37734/   21422 :                     ; Sprite mappings - Sonic
   37735/   21422 :                     ; ---------------------------------------------------------------------------
   37736/   21422 :                     Map_Sonic:
   37737/   21422 :                     		include	"_maps/Sonic.asm"
(1)    1/   21422 :                     Map_a6dd:
(1)    2/   21422 : 00BC                Map_a6dd_0: 	dc.w Map_a6dd_BC-Map_a6dd
(1)    3/   21424 : 00BD                Map_a6dd_2: 	dc.w Map_a6dd_BD-Map_a6dd
(1)    4/   21426 : 00D2                Map_a6dd_4: 	dc.w Map_a6dd_D2-Map_a6dd
(1)    5/   21428 : 00E2                Map_a6dd_6: 	dc.w Map_a6dd_E2-Map_a6dd
(1)    6/   2142A : 00F2                Map_a6dd_8: 	dc.w Map_a6dd_F2-Map_a6dd
(1)    7/   2142C : 0102                Map_a6dd_A: 	dc.w Map_a6dd_102-Map_a6dd
(1)    8/   2142E : 0112                Map_a6dd_C: 	dc.w Map_a6dd_112-Map_a6dd
(1)    9/   21430 : 0127                Map_a6dd_E: 	dc.w Map_a6dd_127-Map_a6dd
(1)   10/   21432 : 0132                Map_a6dd_10: 	dc.w Map_a6dd_132-Map_a6dd
(1)   11/   21434 : 013D                Map_a6dd_12: 	dc.w Map_a6dd_13D-Map_a6dd
(1)   12/   21436 : 0152                Map_a6dd_14: 	dc.w Map_a6dd_152-Map_a6dd
(1)   13/   21438 : 015D                Map_a6dd_16: 	dc.w Map_a6dd_15D-Map_a6dd
(1)   14/   2143A : 016D                Map_a6dd_18: 	dc.w Map_a6dd_16D-Map_a6dd
(1)   15/   2143C : 0187                Map_a6dd_1A: 	dc.w Map_a6dd_187-Map_a6dd
(1)   16/   2143E : 01A6                Map_a6dd_1C: 	dc.w Map_a6dd_1A6-Map_a6dd
(1)   17/   21440 : 01BB                Map_a6dd_1E: 	dc.w Map_a6dd_1BB-Map_a6dd
(1)   18/   21442 : 01D5                Map_a6dd_20: 	dc.w Map_a6dd_1D5-Map_a6dd
(1)   19/   21444 : 01EA                Map_a6dd_22: 	dc.w Map_a6dd_1EA-Map_a6dd
(1)   20/   21446 : 0204                Map_a6dd_24: 	dc.w Map_a6dd_204-Map_a6dd
(1)   21/   21448 : 0219                Map_a6dd_26: 	dc.w Map_a6dd_219-Map_a6dd
(1)   22/   2144A : 0224                Map_a6dd_28: 	dc.w Map_a6dd_224-Map_a6dd
(1)   23/   2144C : 022F                Map_a6dd_2A: 	dc.w Map_a6dd_22F-Map_a6dd
(1)   24/   2144E : 0244                Map_a6dd_2C: 	dc.w Map_a6dd_244-Map_a6dd
(1)   25/   21450 : 024F                Map_a6dd_2E: 	dc.w Map_a6dd_24F-Map_a6dd
(1)   26/   21452 : 025F                Map_a6dd_30: 	dc.w Map_a6dd_25F-Map_a6dd
(1)   27/   21454 : 027E                Map_a6dd_32: 	dc.w Map_a6dd_27E-Map_a6dd
(1)   28/   21456 : 029D                Map_a6dd_34: 	dc.w Map_a6dd_29D-Map_a6dd
(1)   29/   21458 : 02B2                Map_a6dd_36: 	dc.w Map_a6dd_2B2-Map_a6dd
(1)   30/   2145A : 02CC                Map_a6dd_38: 	dc.w Map_a6dd_2CC-Map_a6dd
(1)   31/   2145C : 02E1                Map_a6dd_3A: 	dc.w Map_a6dd_2E1-Map_a6dd
(1)   32/   2145E : 02FB                Map_a6dd_3C: 	dc.w Map_a6dd_2FB-Map_a6dd
(1)   33/   21460 : 0306                Map_a6dd_3E: 	dc.w Map_a6dd_306-Map_a6dd
(1)   34/   21462 : 0311                Map_a6dd_40: 	dc.w Map_a6dd_311-Map_a6dd
(1)   35/   21464 : 031C                Map_a6dd_42: 	dc.w Map_a6dd_31C-Map_a6dd
(1)   36/   21466 : 0327                Map_a6dd_44: 	dc.w Map_a6dd_327-Map_a6dd
(1)   37/   21468 : 033C                Map_a6dd_46: 	dc.w Map_a6dd_33C-Map_a6dd
(1)   38/   2146A : 034C                Map_a6dd_48: 	dc.w Map_a6dd_34C-Map_a6dd
(1)   39/   2146C : 0361                Map_a6dd_4A: 	dc.w Map_a6dd_361-Map_a6dd
(1)   40/   2146E : 0371                Map_a6dd_4C: 	dc.w Map_a6dd_371-Map_a6dd
(1)   41/   21470 : 037C                Map_a6dd_4E: 	dc.w Map_a6dd_37C-Map_a6dd
(1)   42/   21472 : 0387                Map_a6dd_50: 	dc.w Map_a6dd_387-Map_a6dd
(1)   43/   21474 : 0392                Map_a6dd_52: 	dc.w Map_a6dd_392-Map_a6dd
(1)   44/   21476 : 039D                Map_a6dd_54: 	dc.w Map_a6dd_39D-Map_a6dd
(1)   45/   21478 : 03B2                Map_a6dd_56: 	dc.w Map_a6dd_3B2-Map_a6dd
(1)   46/   2147A : 03BD                Map_a6dd_58: 	dc.w Map_a6dd_3BD-Map_a6dd
(1)   47/   2147C : 03D2                Map_a6dd_5A: 	dc.w Map_a6dd_3D2-Map_a6dd
(1)   48/   2147E : 03DD                Map_a6dd_5C: 	dc.w Map_a6dd_3DD-Map_a6dd
(1)   49/   21480 : 03E3                Map_a6dd_5E: 	dc.w Map_a6dd_3E3-Map_a6dd
(1)   50/   21482 : 03E9                Map_a6dd_60: 	dc.w Map_a6dd_3E9-Map_a6dd
(1)   51/   21484 : 03EF                Map_a6dd_62: 	dc.w Map_a6dd_3EF-Map_a6dd
(1)   52/   21486 : 03F5                Map_a6dd_64: 	dc.w Map_a6dd_3F5-Map_a6dd
(1)   53/   21488 : 03FB                Map_a6dd_66: 	dc.w Map_a6dd_3FB-Map_a6dd
(1)   54/   2148A : 0406                Map_a6dd_68: 	dc.w Map_a6dd_406-Map_a6dd
(1)   55/   2148C : 040C                Map_a6dd_6A: 	dc.w Map_a6dd_40C-Map_a6dd
(1)   56/   2148E : 0417                Map_a6dd_6C: 	dc.w Map_a6dd_417-Map_a6dd
(1)   57/   21490 : 041D                Map_a6dd_6E: 	dc.w Map_a6dd_41D-Map_a6dd
(1)   58/   21492 : 0428                Map_a6dd_70: 	dc.w Map_a6dd_428-Map_a6dd
(1)   59/   21494 : 043D                Map_a6dd_72: 	dc.w Map_a6dd_43D-Map_a6dd
(1)   60/   21496 : 0452                Map_a6dd_74: 	dc.w Map_a6dd_452-Map_a6dd
(1)   61/   21498 : 0462                Map_a6dd_76: 	dc.w Map_a6dd_462-Map_a6dd
(1)   62/   2149A : 0472                Map_a6dd_78: 	dc.w Map_a6dd_472-Map_a6dd
(1)   63/   2149C : 0482                Map_a6dd_7A: 	dc.w Map_a6dd_482-Map_a6dd
(1)   64/   2149E : 048D                Map_a6dd_7C: 	dc.w Map_a6dd_48D-Map_a6dd
(1)   65/   214A0 : 049D                Map_a6dd_7E: 	dc.w Map_a6dd_49D-Map_a6dd
(1)   66/   214A2 : 04AD                Map_a6dd_80: 	dc.w Map_a6dd_4AD-Map_a6dd
(1)   67/   214A4 : 04BD                Map_a6dd_82: 	dc.w Map_a6dd_4BD-Map_a6dd
(1)   68/   214A6 : 04D2                Map_a6dd_84: 	dc.w Map_a6dd_4D2-Map_a6dd
(1)   69/   214A8 : 04E7                Map_a6dd_86: 	dc.w Map_a6dd_4E7-Map_a6dd
(1)   70/   214AA : 0501                Map_a6dd_88: 	dc.w Map_a6dd_501-Map_a6dd
(1)   71/   214AC : 051B                Map_a6dd_8A: 	dc.w Map_a6dd_51B-Map_a6dd
(1)   72/   214AE : 0526                Map_a6dd_8C: 	dc.w Map_a6dd_526-Map_a6dd
(1)   73/   214B0 : 0536                Map_a6dd_8E: 	dc.w Map_a6dd_536-Map_a6dd
(1)   74/   214B2 : 0541                Map_a6dd_90: 	dc.w Map_a6dd_541-Map_a6dd
(1)   75/   214B4 : 0551                Map_a6dd_92: 	dc.w Map_a6dd_551-Map_a6dd
(1)   76/   214B6 : 055C                Map_a6dd_94: 	dc.w Map_a6dd_55C-Map_a6dd
(1)   77/   214B8 : 056C                Map_a6dd_96: 	dc.w Map_a6dd_56C-Map_a6dd
(1)   78/   214BA : 057C                Map_a6dd_98: 	dc.w Map_a6dd_57C-Map_a6dd
(1)   79/   214BC : 0596                Map_a6dd_9A: 	dc.w Map_a6dd_596-Map_a6dd
(1)   80/   214BE : 05B0                Map_a6dd_9C: 	dc.w Map_a6dd_5B0-Map_a6dd
(1)   81/   214C0 : 05BB                Map_a6dd_9E: 	dc.w Map_a6dd_5BB-Map_a6dd
(1)   82/   214C2 : 05CB                Map_a6dd_A0: 	dc.w Map_a6dd_5CB-Map_a6dd
(1)   83/   214C4 : 05D1                Map_a6dd_A2: 	dc.w Map_a6dd_5D1-Map_a6dd
(1)   84/   214C6 : 05D7                Map_a6dd_A4: 	dc.w Map_a6dd_5D7-Map_a6dd
(1)   85/   214C8 : 05DD                Map_a6dd_A6: 	dc.w Map_a6dd_5DD-Map_a6dd
(1)   86/   214CA : 05ED                Map_a6dd_A8: 	dc.w Map_a6dd_5ED-Map_a6dd
(1)   87/   214CC : 05FD                Map_a6dd_AA: 	dc.w Map_a6dd_5FD-Map_a6dd
(1)   88/   214CE : 060D                Map_a6dd_AC: 	dc.w Map_a6dd_60D-Map_a6dd
(1)   89/   214D0 : 061D                Map_a6dd_AE: 	dc.w Map_a6dd_61D-Map_a6dd
(1)   90/   214D2 : 0628                Map_a6dd_B0: 	dc.w Map_a6dd_628-Map_a6dd
(1)   91/   214D4 : 0633                Map_a6dd_B2: 	dc.w Map_a6dd_633-Map_a6dd
(1)   92/   214D6 : 063E                Map_a6dd_B4: 	dc.w Map_a6dd_63E-Map_a6dd
(1)   93/   214D8 : 0649                Map_a6dd_B6: 	dc.w Map_a6dd_649-Map_a6dd
(1)   94/   214DA : 0654                Map_a6dd_B8: 	dc.w Map_a6dd_654-Map_a6dd
(1)   95/   214DC : 065F                Map_a6dd_BA: 	dc.w Map_a6dd_65F-Map_a6dd
(1)   96/   214DE : 00                  Map_a6dd_BC: 	dc.b $0
(1)   97/   214DF : 04                  Map_a6dd_BD: 	dc.b $4
(1)   98/   214E0 : EC08 0000 F0        	dc.b $EC, $8, $0, $0, $F0
(1)   99/   214E5 : F40D 0003 F0        	dc.b $F4, $D, $0, $3, $F0
(1)  100/   214EA : 0408 000B F0        	dc.b $4, $8, $0, $B, $F0
(1)  101/   214EF : 0C08 000E F8        	dc.b $C, $8, $0, $E, $F8
(1)  102/   214F4 : 03                  Map_a6dd_D2: 	dc.b $3
(1)  103/   214F5 : EC09 0000 F0        	dc.b $EC, $9, $0, $0, $F0
(1)  104/   214FA : FC09 0006 F0        	dc.b $FC, $9, $0, $6, $F0
(1)  105/   214FF : 0C08 000C F8        	dc.b $C, $8, $0, $C, $F8
(1)  106/   21504 : 03                  Map_a6dd_E2: 	dc.b $3
(1)  107/   21505 : EC09 0000 F0        	dc.b $EC, $9, $0, $0, $F0
(1)  108/   2150A : FC09 0006 F0        	dc.b $FC, $9, $0, $6, $F0
(1)  109/   2150F : 0C08 000C F8        	dc.b $C, $8, $0, $C, $F8
(1)  110/   21514 : 03                  Map_a6dd_F2: 	dc.b $3
(1)  111/   21515 : EC09 0000 F0        	dc.b $EC, $9, $0, $0, $F0
(1)  112/   2151A : FC09 0006 F0        	dc.b $FC, $9, $0, $6, $F0
(1)  113/   2151F : 0C08 000C F8        	dc.b $C, $8, $0, $C, $F8
(1)  114/   21524 : 03                  Map_a6dd_102: 	dc.b $3
(1)  115/   21525 : EC0A 0000 F0        	dc.b $EC, $A, $0, $0, $F0
(1)  116/   2152A : 0408 0009 F0        	dc.b $4, $8, $0, $9, $F0
(1)  117/   2152F : 0C08 000C F8        	dc.b $C, $8, $0, $C, $F8
(1)  118/   21534 : 04                  Map_a6dd_112: 	dc.b $4
(1)  119/   21535 : EB0D 0000 EC        	dc.b $EB, $D, $0, $0, $EC
(1)  120/   2153A : FB09 0008 EC        	dc.b $FB, $9, $0, $8, $EC
(1)  121/   2153F : FB06 000E 04        	dc.b $FB, $6, $0, $E, $4
(1)  122/   21544 : 0B04 0014 EC        	dc.b $B, $4, $0, $14, $EC
(1)  123/   21549 : 02                  Map_a6dd_127: 	dc.b $2
(1)  124/   2154A : EC0D 0000 ED        	dc.b $EC, $D, $0, $0, $ED
(1)  125/   2154F : FC0E 0008 F5        	dc.b $FC, $E, $0, $8, $F5
(1)  126/   21554 : 02                  Map_a6dd_132: 	dc.b $2
(1)  127/   21555 : ED09 0000 F3        	dc.b $ED, $9, $0, $0, $F3
(1)  128/   2155A : FD0A 0006 F3        	dc.b $FD, $A, $0, $6, $F3
(1)  129/   2155F : 04                  Map_a6dd_13D: 	dc.b $4
(1)  130/   21560 : EB09 0000 F4        	dc.b $EB, $9, $0, $0, $F4
(1)  131/   21565 : FB09 0006 EC        	dc.b $FB, $9, $0, $6, $EC
(1)  132/   2156A : FB06 000C 04        	dc.b $FB, $6, $0, $C, $4
(1)  133/   2156F : 0B04 0012 EC        	dc.b $B, $4, $0, $12, $EC
(1)  134/   21574 : 02                  Map_a6dd_152: 	dc.b $2
(1)  135/   21575 : EC09 0000 F3        	dc.b $EC, $9, $0, $0, $F3
(1)  136/   2157A : FC0E 0006 EB        	dc.b $FC, $E, $0, $6, $EB
(1)  137/   2157F : 03                  Map_a6dd_15D: 	dc.b $3
(1)  138/   21580 : ED0D 0000 EC        	dc.b $ED, $D, $0, $0, $EC
(1)  139/   21585 : FD0C 0008 F4        	dc.b $FD, $C, $0, $8, $F4
(1)  140/   2158A : 0509 000C F4        	dc.b $5, $9, $0, $C, $F4
(1)  141/   2158F : 05                  Map_a6dd_16D: 	dc.b $5
(1)  142/   21590 : EB09 0000 EB        	dc.b $EB, $9, $0, $0, $EB
(1)  143/   21595 : EB06 0006 03        	dc.b $EB, $6, $0, $6, $3
(1)  144/   2159A : FB08 000C EB        	dc.b $FB, $8, $0, $C, $EB
(1)  145/   2159F : 0309 000F F3        	dc.b $3, $9, $0, $F, $F3
(1)  146/   215A4 : 1300 0015 FB        	dc.b $13, $0, $0, $15, $FB
(1)  147/   215A9 : 06                  Map_a6dd_187: 	dc.b $6
(1)  148/   215AA : EC09 0000 EC        	dc.b $EC, $9, $0, $0, $EC
(1)  149/   215AF : EC01 0006 04        	dc.b $EC, $1, $0, $6, $4
(1)  150/   215B4 : FC0C 0008 EC        	dc.b $FC, $C, $0, $8, $EC
(1)  151/   215B9 : 0409 000C F4        	dc.b $4, $9, $0, $C, $F4
(1)  152/   215BE : FC05 0012 0C        	dc.b $FC, $5, $0, $12, $C
(1)  153/   215C3 : F400 0016 14        	dc.b $F4, $0, $0, $16, $14
(1)  154/   215C8 : 04                  Map_a6dd_1A6: 	dc.b $4
(1)  155/   215C9 : ED09 0000 ED        	dc.b $ED, $9, $0, $0, $ED
(1)  156/   215CE : ED01 0006 05        	dc.b $ED, $1, $0, $6, $5
(1)  157/   215D3 : FD0D 0008 F5        	dc.b $FD, $D, $0, $8, $F5
(1)  158/   215D8 : 0D08 0010 FD        	dc.b $D, $8, $0, $10, $FD
(1)  159/   215DD : 05                  Map_a6dd_1BB: 	dc.b $5
(1)  160/   215DE : EB09 0000 EB        	dc.b $EB, $9, $0, $0, $EB
(1)  161/   215E3 : EB05 0006 03        	dc.b $EB, $5, $0, $6, $3
(1)  162/   215E8 : FB0D 000A F3        	dc.b $FB, $D, $0, $A, $F3
(1)  163/   215ED : 0B08 0012 F3        	dc.b $B, $8, $0, $12, $F3
(1)  164/   215F2 : 1304 0015 FB        	dc.b $13, $4, $0, $15, $FB
(1)  165/   215F7 : 04                  Map_a6dd_1D5: 	dc.b $4
(1)  166/   215F8 : EC09 0000 EC        	dc.b $EC, $9, $0, $0, $EC
(1)  167/   215FD : EC01 0006 04        	dc.b $EC, $1, $0, $6, $4
(1)  168/   21602 : FC0D 0008 F4        	dc.b $FC, $D, $0, $8, $F4
(1)  169/   21607 : 0C08 0010 FC        	dc.b $C, $8, $0, $10, $FC
(1)  170/   2160C : 05                  Map_a6dd_1EA: 	dc.b $5
(1)  171/   2160D : ED09 0000 ED        	dc.b $ED, $9, $0, $0, $ED
(1)  172/   21612 : ED01 0006 05        	dc.b $ED, $1, $0, $6, $5
(1)  173/   21617 : FD00 0008 ED        	dc.b $FD, $0, $0, $8, $ED
(1)  174/   2161C : FD0D 0009 F5        	dc.b $FD, $D, $0, $9, $F5
(1)  175/   21621 : 0D08 0011 FD        	dc.b $D, $8, $0, $11, $FD
(1)  176/   21626 : 04                  Map_a6dd_204: 	dc.b $4
(1)  177/   21627 : F407 0000 EB        	dc.b $F4, $7, $0, $0, $EB
(1)  178/   2162C : EC09 0008 FB        	dc.b $EC, $9, $0, $8, $FB
(1)  179/   21631 : FC04 000E FB        	dc.b $FC, $4, $0, $E, $FB
(1)  180/   21636 : 0409 0010 FB        	dc.b $4, $9, $0, $10, $FB
(1)  181/   2163B : 02                  Map_a6dd_219: 	dc.b $2
(1)  182/   2163C : F407 0000 EC        	dc.b $F4, $7, $0, $0, $EC
(1)  183/   21641 : EC0B 0008 FC        	dc.b $EC, $B, $0, $8, $FC
(1)  184/   21646 : 02                  Map_a6dd_224: 	dc.b $2
(1)  185/   21647 : F406 0000 ED        	dc.b $F4, $6, $0, $0, $ED
(1)  186/   2164C : F40A 0006 FD        	dc.b $F4, $A, $0, $6, $FD
(1)  187/   21651 : 04                  Map_a6dd_22F: 	dc.b $4
(1)  188/   21652 : F406 0000 EB        	dc.b $F4, $6, $0, $0, $EB
(1)  189/   21657 : EC09 0006 FB        	dc.b $EC, $9, $0, $6, $FB
(1)  190/   2165C : FC04 000C FB        	dc.b $FC, $4, $0, $C, $FB
(1)  191/   21661 : 0409 000E FB        	dc.b $4, $9, $0, $E, $FB
(1)  192/   21666 : 02                  Map_a6dd_244: 	dc.b $2
(1)  193/   21667 : F406 0000 EC        	dc.b $F4, $6, $0, $0, $EC
(1)  194/   2166C : F40B 0006 FC        	dc.b $F4, $B, $0, $6, $FC
(1)  195/   21671 : 03                  Map_a6dd_24F: 	dc.b $3
(1)  196/   21672 : F407 0000 ED        	dc.b $F4, $7, $0, $0, $ED
(1)  197/   21677 : EC00 0008 FD        	dc.b $EC, $0, $0, $8, $FD
(1)  198/   2167C : F40A 0009 FD        	dc.b $F4, $A, $0, $9, $FD
(1)  199/   21681 : 06                  Map_a6dd_25F: 	dc.b $6
(1)  200/   21682 : FD06 0000 EB        	dc.b $FD, $6, $0, $0, $EB
(1)  201/   21687 : ED04 0006 F3        	dc.b $ED, $4, $0, $6, $F3
(1)  202/   2168C : F504 0008 EB        	dc.b $F5, $4, $0, $8, $EB
(1)  203/   21691 : F50A 000A FB        	dc.b $F5, $A, $0, $A, $FB
(1)  204/   21696 : 0D00 0013 FB        	dc.b $D, $0, $0, $13, $FB
(1)  205/   2169B : FD00 0014 13        	dc.b $FD, $0, $0, $14, $13
(1)  206/   216A0 : 06                  Map_a6dd_27E: 	dc.b $6
(1)  207/   216A1 : FC06 0000 EC        	dc.b $FC, $6, $0, $0, $EC
(1)  208/   216A6 : E408 0006 F4        	dc.b $E4, $8, $0, $6, $F4
(1)  209/   216AB : EC04 0009 FC        	dc.b $EC, $4, $0, $9, $FC
(1)  210/   216B0 : F404 000B EC        	dc.b $F4, $4, $0, $B, $EC
(1)  211/   216B5 : F40A 000D FC        	dc.b $F4, $A, $0, $D, $FC
(1)  212/   216BA : 0C00 0016 FC        	dc.b $C, $0, $0, $16, $FC
(1)  213/   216BF : 04                  Map_a6dd_29D: 	dc.b $4
(1)  214/   216C0 : FB06 0000 ED        	dc.b $FB, $6, $0, $0, $ED
(1)  215/   216C5 : F304 0006 ED        	dc.b $F3, $4, $0, $6, $ED
(1)  216/   216CA : EB0A 0008 FD        	dc.b $EB, $A, $0, $8, $FD
(1)  217/   216CF : 0304 0011 FD        	dc.b $3, $4, $0, $11, $FD
(1)  218/   216D4 : 05                  Map_a6dd_2B2: 	dc.b $5
(1)  219/   216D5 : FD06 0000 EB        	dc.b $FD, $6, $0, $0, $EB
(1)  220/   216DA : ED08 0006 F3        	dc.b $ED, $8, $0, $6, $F3
(1)  221/   216DF : F504 0009 EB        	dc.b $F5, $4, $0, $9, $EB
(1)  222/   216E4 : F50D 000B FB        	dc.b $F5, $D, $0, $B, $FB
(1)  223/   216E9 : 0508 0013 FB        	dc.b $5, $8, $0, $13, $FB
(1)  224/   216EE : 04                  Map_a6dd_2CC: 	dc.b $4
(1)  225/   216EF : FC06 0000 EC        	dc.b $FC, $6, $0, $0, $EC
(1)  226/   216F4 : F404 0006 EC        	dc.b $F4, $4, $0, $6, $EC
(1)  227/   216F9 : EC0A 0008 FC        	dc.b $EC, $A, $0, $8, $FC
(1)  228/   216FE : 0404 0011 FC        	dc.b $4, $4, $0, $11, $FC
(1)  229/   21703 : 05                  Map_a6dd_2E1: 	dc.b $5
(1)  230/   21704 : FB06 0000 ED        	dc.b $FB, $6, $0, $0, $ED
(1)  231/   21709 : EB0A 0006 FD        	dc.b $EB, $A, $0, $6, $FD
(1)  232/   2170E : F304 000F ED        	dc.b $F3, $4, $0, $F, $ED
(1)  233/   21713 : 0304 0011 FD        	dc.b $3, $4, $0, $11, $FD
(1)  234/   21718 : 0B00 0013 FD        	dc.b $B, $0, $0, $13, $FD
(1)  235/   2171D : 02                  Map_a6dd_2FB: 	dc.b $2
(1)  236/   2171E : EE09 0000 F4        	dc.b $EE, $9, $0, $0, $F4
(1)  237/   21723 : FE0E 0006 EC        	dc.b $FE, $E, $0, $6, $EC
(1)  238/   21728 : 02                  Map_a6dd_306: 	dc.b $2
(1)  239/   21729 : EE09 0000 F4        	dc.b $EE, $9, $0, $0, $F4
(1)  240/   2172E : FE0E 0006 EC        	dc.b $FE, $E, $0, $6, $EC
(1)  241/   21733 : 02                  Map_a6dd_311: 	dc.b $2
(1)  242/   21734 : EE09 0000 F4        	dc.b $EE, $9, $0, $0, $F4
(1)  243/   21739 : FE0E 0006 EC        	dc.b $FE, $E, $0, $6, $EC
(1)  244/   2173E : 02                  Map_a6dd_31C: 	dc.b $2
(1)  245/   2173F : EE09 0000 F4        	dc.b $EE, $9, $0, $0, $F4
(1)  246/   21744 : FE0E 0006 EC        	dc.b $FE, $E, $0, $6, $EC
(1)  247/   21749 : 04                  Map_a6dd_327: 	dc.b $4
(1)  248/   2174A : EE09 0000 EE        	dc.b $EE, $9, $0, $0, $EE
(1)  249/   2174F : EE01 0006 06        	dc.b $EE, $1, $0, $6, $6
(1)  250/   21754 : FE0E 0008 F6        	dc.b $FE, $E, $0, $8, $F6
(1)  251/   21759 : FE00 0014 EE        	dc.b $FE, $0, $0, $14, $EE
(1)  252/   2175E : 03                  Map_a6dd_33C: 	dc.b $3
(1)  253/   2175F : EE09 0000 EE        	dc.b $EE, $9, $0, $0, $EE
(1)  254/   21764 : EE01 0006 06        	dc.b $EE, $1, $0, $6, $6
(1)  255/   21769 : FE0E 0008 F6        	dc.b $FE, $E, $0, $8, $F6
(1)  256/   2176E : 04                  Map_a6dd_34C: 	dc.b $4
(1)  257/   2176F : EE09 0000 EE        	dc.b $EE, $9, $0, $0, $EE
(1)  258/   21774 : EE01 0006 06        	dc.b $EE, $1, $0, $6, $6
(1)  259/   21779 : FE0E 0008 F6        	dc.b $FE, $E, $0, $8, $F6
(1)  260/   2177E : FE00 0014 EE        	dc.b $FE, $0, $0, $14, $EE
(1)  261/   21783 : 03                  Map_a6dd_361: 	dc.b $3
(1)  262/   21784 : EE09 0000 EE        	dc.b $EE, $9, $0, $0, $EE
(1)  263/   21789 : EE01 0006 06        	dc.b $EE, $1, $0, $6, $6
(1)  264/   2178E : FE0E 0008 F6        	dc.b $FE, $E, $0, $8, $F6
(1)  265/   21793 : 02                  Map_a6dd_371: 	dc.b $2
(1)  266/   21794 : F406 0000 EE        	dc.b $F4, $6, $0, $0, $EE
(1)  267/   21799 : F40B 0006 FE        	dc.b $F4, $B, $0, $6, $FE
(1)  268/   2179E : 02                  Map_a6dd_37C: 	dc.b $2
(1)  269/   2179F : F406 0000 EE        	dc.b $F4, $6, $0, $0, $EE
(1)  270/   217A4 : F40B 0006 FE        	dc.b $F4, $B, $0, $6, $FE
(1)  271/   217A9 : 02                  Map_a6dd_387: 	dc.b $2
(1)  272/   217AA : F406 0000 EE        	dc.b $F4, $6, $0, $0, $EE
(1)  273/   217AF : F40B 0006 FE        	dc.b $F4, $B, $0, $6, $FE
(1)  274/   217B4 : 02                  Map_a6dd_392: 	dc.b $2
(1)  275/   217B5 : F406 0000 EE        	dc.b $F4, $6, $0, $0, $EE
(1)  276/   217BA : F40B 0006 FE        	dc.b $F4, $B, $0, $6, $FE
(1)  277/   217BF : 04                  Map_a6dd_39D: 	dc.b $4
(1)  278/   217C0 : FA06 0000 EE        	dc.b $FA, $6, $0, $0, $EE
(1)  279/   217C5 : F204 0006 EE        	dc.b $F2, $4, $0, $6, $EE
(1)  280/   217CA : EA0B 0008 FE        	dc.b $EA, $B, $0, $8, $FE
(1)  281/   217CF : 0A00 0014 FE        	dc.b $A, $0, $0, $14, $FE
(1)  282/   217D4 : 02                  Map_a6dd_3B2: 	dc.b $2
(1)  283/   217D5 : F207 0000 EE        	dc.b $F2, $7, $0, $0, $EE
(1)  284/   217DA : EA0B 0008 FE        	dc.b $EA, $B, $0, $8, $FE
(1)  285/   217DF : 04                  Map_a6dd_3BD: 	dc.b $4
(1)  286/   217E0 : FA06 0000 EE        	dc.b $FA, $6, $0, $0, $EE
(1)  287/   217E5 : F204 0006 EE        	dc.b $F2, $4, $0, $6, $EE
(1)  288/   217EA : EA0B 0008 FE        	dc.b $EA, $B, $0, $8, $FE
(1)  289/   217EF : 0A00 0014 FE        	dc.b $A, $0, $0, $14, $FE
(1)  290/   217F4 : 02                  Map_a6dd_3D2: 	dc.b $2
(1)  291/   217F5 : F207 0000 EE        	dc.b $F2, $7, $0, $0, $EE
(1)  292/   217FA : EA0B 0008 FE        	dc.b $EA, $B, $0, $8, $FE
(1)  293/   217FF : 01                  Map_a6dd_3DD: 	dc.b $1
(1)  294/   21800 : F00F 0000 F0        	dc.b $F0, $F, $0, $0, $F0
(1)  295/   21805 : 01                  Map_a6dd_3E3: 	dc.b $1
(1)  296/   21806 : F00F 0000 F0        	dc.b $F0, $F, $0, $0, $F0
(1)  297/   2180B : 01                  Map_a6dd_3E9: 	dc.b $1
(1)  298/   2180C : F00F 0000 F0        	dc.b $F0, $F, $0, $0, $F0
(1)  299/   21811 : 01                  Map_a6dd_3EF: 	dc.b $1
(1)  300/   21812 : F00F 0000 F0        	dc.b $F0, $F, $0, $0, $F0
(1)  301/   21817 : 01                  Map_a6dd_3F5: 	dc.b $1
(1)  302/   21818 : F00F 0000 F0        	dc.b $F0, $F, $0, $0, $F0
(1)  303/   2181D : 02                  Map_a6dd_3FB: 	dc.b $2
(1)  304/   2181E : F40E 0000 EC        	dc.b $F4, $E, $0, $0, $EC
(1)  305/   21823 : F402 000C 0C        	dc.b $F4, $2, $0, $C, $C
(1)  306/   21828 : 01                  Map_a6dd_406: 	dc.b $1
(1)  307/   21829 : F00F 0000 F0        	dc.b $F0, $F, $0, $0, $F0
(1)  308/   2182E : 02                  Map_a6dd_40C: 	dc.b $2
(1)  309/   2182F : EC0B 0000 F4        	dc.b $EC, $B, $0, $0, $F4
(1)  310/   21834 : 0C08 000C F4        	dc.b $C, $8, $0, $C, $F4
(1)  311/   21839 : 01                  Map_a6dd_417: 	dc.b $1
(1)  312/   2183A : F00F 0000 F0        	dc.b $F0, $F, $0, $0, $F0
(1)  313/   2183F : 02                  Map_a6dd_41D: 	dc.b $2
(1)  314/   21840 : ED09 0000 F0        	dc.b $ED, $9, $0, $0, $F0
(1)  315/   21845 : FD0E 0006 F0        	dc.b $FD, $E, $0, $6, $F0
(1)  316/   2184A : 04                  Map_a6dd_428: 	dc.b $4
(1)  317/   2184B : ED09 0000 F0        	dc.b $ED, $9, $0, $0, $F0
(1)  318/   21850 : FD0D 0006 F0        	dc.b $FD, $D, $0, $6, $F0
(1)  319/   21855 : 0D04 000E 00        	dc.b $D, $4, $0, $E, $0
(1)  320/   2185A : 0500 0010 E8        	dc.b $5, $0, $0, $10, $E8
(1)  321/   2185F : 04                  Map_a6dd_43D: 	dc.b $4
(1)  322/   21860 : F404 0000 00        	dc.b $F4, $4, $0, $0, $0
(1)  323/   21865 : FC0D 0002 F8        	dc.b $FC, $D, $0, $2, $F8
(1)  324/   2186A : 0C08 000A F8        	dc.b $C, $8, $0, $A, $F8
(1)  325/   2186F : 0400 000D F0        	dc.b $4, $0, $0, $D, $F0
(1)  326/   21874 : 03                  Map_a6dd_452: 	dc.b $3
(1)  327/   21875 : EC08 0800 E8        	dc.b $EC, $8, $8, $0, $E8
(1)  328/   2187A : F402 0803 00        	dc.b $F4, $2, $8, $3, $0
(1)  329/   2187F : F40F 0806 E0        	dc.b $F4, $F, $8, $6, $E0
(1)  330/   21884 : 03                  Map_a6dd_462: 	dc.b $3
(1)  331/   21885 : EC0E 0800 E8        	dc.b $EC, $E, $8, $0, $E8
(1)  332/   2188A : 040D 080C E0        	dc.b $4, $D, $8, $C, $E0
(1)  333/   2188F : 0C00 1814 00        	dc.b $C, $0, $18, $14, $0
(1)  334/   21894 : 03                  Map_a6dd_472: 	dc.b $3
(1)  335/   21895 : F40D 0000 FC        	dc.b $F4, $D, $0, $0, $FC
(1)  336/   2189A : FC05 0008 EC        	dc.b $FC, $5, $0, $8, $EC
(1)  337/   2189F : 0408 000C FC        	dc.b $4, $8, $0, $C, $FC
(1)  338/   218A4 : 02                  Map_a6dd_482: 	dc.b $2
(1)  339/   218A5 : F40A 0000 E8        	dc.b $F4, $A, $0, $0, $E8
(1)  340/   218AA : F40A 0800 00        	dc.b $F4, $A, $8, $0, $0
(1)  341/   218AF : 03                  Map_a6dd_48D: 	dc.b $3
(1)  342/   218B0 : F40D 0000 E4        	dc.b $F4, $D, $0, $0, $E4
(1)  343/   218B5 : FC00 0008 04        	dc.b $FC, $0, $0, $8, $4
(1)  344/   218BA : 040C 0009 EC        	dc.b $4, $C, $0, $9, $EC
(1)  345/   218BF : 03                  Map_a6dd_49D: 	dc.b $3
(1)  346/   218C0 : F40D 0000 FC        	dc.b $F4, $D, $0, $0, $FC
(1)  347/   218C5 : FC05 0008 EC        	dc.b $FC, $5, $0, $8, $EC
(1)  348/   218CA : 0408 000C FC        	dc.b $4, $8, $0, $C, $FC
(1)  349/   218CF : 03                  Map_a6dd_4AD: 	dc.b $3
(1)  350/   218D0 : E80B 0000 F0        	dc.b $E8, $B, $0, $0, $F0
(1)  351/   218D5 : 0804 000C F8        	dc.b $8, $4, $0, $C, $F8
(1)  352/   218DA : 1000 000E F8        	dc.b $10, $0, $0, $E, $F8
(1)  353/   218DF : 04                  Map_a6dd_4BD: 	dc.b $4
(1)  354/   218E0 : F80E 0000 E8        	dc.b $F8, $E, $0, $0, $E8
(1)  355/   218E5 : 0005 000C 08        	dc.b $0, $5, $0, $C, $8
(1)  356/   218EA : F800 0010 08        	dc.b $F8, $0, $0, $10, $8
(1)  357/   218EF : F000 0011 F8        	dc.b $F0, $0, $0, $11, $F8
(1)  358/   218F4 : 04                  Map_a6dd_4D2: 	dc.b $4
(1)  359/   218F5 : F80E 0000 E8        	dc.b $F8, $E, $0, $0, $E8
(1)  360/   218FA : 0005 000C 08        	dc.b $0, $5, $0, $C, $8
(1)  361/   218FF : F800 0010 08        	dc.b $F8, $0, $0, $10, $8
(1)  362/   21904 : F000 0011 F8        	dc.b $F0, $0, $0, $11, $F8
(1)  363/   21909 : 05                  Map_a6dd_4E7: 	dc.b $5
(1)  364/   2190A : E80A 0000 F4        	dc.b $E8, $A, $0, $0, $F4
(1)  365/   2190F : F001 0009 0C        	dc.b $F0, $1, $0, $9, $C
(1)  366/   21914 : 0009 000B F4        	dc.b $0, $9, $0, $B, $F4
(1)  367/   21919 : 1004 0011 F4        	dc.b $10, $4, $0, $11, $F4
(1)  368/   2191E : 0000 0013 EC        	dc.b $0, $0, $0, $13, $EC
(1)  369/   21923 : 05                  Map_a6dd_501: 	dc.b $5
(1)  370/   21924 : E80A 0000 F4        	dc.b $E8, $A, $0, $0, $F4
(1)  371/   21929 : E801 0009 0C        	dc.b $E8, $1, $0, $9, $C
(1)  372/   2192E : 0009 000B F4        	dc.b $0, $9, $0, $B, $F4
(1)  373/   21933 : 1004 0011 F4        	dc.b $10, $4, $0, $11, $F4
(1)  374/   21938 : 0000 0013 EC        	dc.b $0, $0, $0, $13, $EC
(1)  375/   2193D : 02                  Map_a6dd_51B: 	dc.b $2
(1)  376/   2193E : ED0A 0000 F3        	dc.b $ED, $A, $0, $0, $F3
(1)  377/   21943 : 050D 0009 EB        	dc.b $5, $D, $0, $9, $EB
(1)  378/   21948 : 03                  Map_a6dd_526: 	dc.b $3
(1)  379/   21949 : EC0A 0000 F3        	dc.b $EC, $A, $0, $0, $F3
(1)  380/   2194E : 0408 0009 F3        	dc.b $4, $8, $0, $9, $F3
(1)  381/   21953 : 0C04 000C F3        	dc.b $C, $4, $0, $C, $F3
(1)  382/   21958 : 02                  Map_a6dd_536: 	dc.b $2
(1)  383/   21959 : ED0A 0000 F3        	dc.b $ED, $A, $0, $0, $F3
(1)  384/   2195E : 050D 0009 EB        	dc.b $5, $D, $0, $9, $EB
(1)  385/   21963 : 03                  Map_a6dd_541: 	dc.b $3
(1)  386/   21964 : EC0A 0000 F3        	dc.b $EC, $A, $0, $0, $F3
(1)  387/   21969 : 0408 0009 F3        	dc.b $4, $8, $0, $9, $F3
(1)  388/   2196E : 0C04 000C F3        	dc.b $C, $4, $0, $C, $F3
(1)  389/   21973 : 02                  Map_a6dd_551: 	dc.b $2
(1)  390/   21974 : EC09 0000 F0        	dc.b $EC, $9, $0, $0, $F0
(1)  391/   21979 : FC0E 0006 F0        	dc.b $FC, $E, $0, $6, $F0
(1)  392/   2197E : 03                  Map_a6dd_55C: 	dc.b $3
(1)  393/   2197F : EC0A 0000 F0        	dc.b $EC, $A, $0, $0, $F0
(1)  394/   21984 : 0405 0009 F8        	dc.b $4, $5, $0, $9, $F8
(1)  395/   21989 : E400 000D F8        	dc.b $E4, $0, $0, $D, $F8
(1)  396/   2198E : 03                  Map_a6dd_56C: 	dc.b $3
(1)  397/   2198F : E80D 0000 EC        	dc.b $E8, $D, $0, $0, $EC
(1)  398/   21994 : E801 0008 0C        	dc.b $E8, $1, $0, $8, $C
(1)  399/   21999 : F80B 000A F4        	dc.b $F8, $B, $0, $A, $F4
(1)  400/   2199E : 05                  Map_a6dd_57C: 	dc.b $5
(1)  401/   2199F : E80D 0000 EC        	dc.b $E8, $D, $0, $0, $EC
(1)  402/   219A4 : E801 0008 0C        	dc.b $E8, $1, $0, $8, $C
(1)  403/   219A9 : F809 000A F4        	dc.b $F8, $9, $0, $A, $F4
(1)  404/   219AE : 080C 0010 F4        	dc.b $8, $C, $0, $10, $F4
(1)  405/   219B3 : 1000 0014 F4        	dc.b $10, $0, $0, $14, $F4
(1)  406/   219B8 : 05                  Map_a6dd_596: 	dc.b $5
(1)  407/   219B9 : E80D 0000 EC        	dc.b $E8, $D, $0, $0, $EC
(1)  408/   219BE : E801 0008 0C        	dc.b $E8, $1, $0, $8, $C
(1)  409/   219C3 : F809 000A F4        	dc.b $F8, $9, $0, $A, $F4
(1)  410/   219C8 : 080C 0010 F4        	dc.b $8, $C, $0, $10, $F4
(1)  411/   219CD : 1000 0014 F4        	dc.b $10, $0, $0, $14, $F4
(1)  412/   219D2 : 02                  Map_a6dd_5B0: 	dc.b $2
(1)  413/   219D3 : EC08 0000 F0        	dc.b $EC, $8, $0, $0, $F0
(1)  414/   219D8 : F40F 0003 F0        	dc.b $F4, $F, $0, $3, $F0
(1)  415/   219DD : 03                  Map_a6dd_5BB: 	dc.b $3
(1)  416/   219DE : EC08 0000 F0        	dc.b $EC, $8, $0, $0, $F0
(1)  417/   219E3 : F40E 0003 F0        	dc.b $F4, $E, $0, $3, $F0
(1)  418/   219E8 : 0C08 000F F8        	dc.b $C, $8, $0, $F, $F8
(1)  419/   219ED : 01                  Map_a6dd_5CB: 	dc.b $1
(1)  420/   219EE : F00B 0000 F4        	dc.b $F0, $B, $0, $0, $F4
(1)  421/   219F3 : 01                  Map_a6dd_5D1: 	dc.b $1
(1)  422/   219F4 : F406 0000 F8        	dc.b $F4, $6, $0, $0, $F8
(1)  423/   219F9 : 01                  Map_a6dd_5D7: 	dc.b $1
(1)  424/   219FA : F801 0000 FC        	dc.b $F8, $1, $0, $0, $FC
(1)  425/   219FF : 03                  Map_a6dd_5DD: 	dc.b $3
(1)  426/   21A00 : F40D 0800 E4        	dc.b $F4, $D, $8, $0, $E4
(1)  427/   21A05 : FC05 0808 04        	dc.b $FC, $5, $8, $8, $4
(1)  428/   21A0A : 0408 080C EC        	dc.b $4, $8, $8, $C, $EC
(1)  429/   21A0F : 03                  Map_a6dd_5ED: 	dc.b $3
(1)  430/   21A10 : F40D 0800 FC        	dc.b $F4, $D, $8, $0, $FC
(1)  431/   21A15 : FC00 0808 F4        	dc.b $FC, $0, $8, $8, $F4
(1)  432/   21A1A : 040C 0809 F4        	dc.b $4, $C, $8, $9, $F4
(1)  433/   21A1F : 03                  Map_a6dd_5FD: 	dc.b $3
(1)  434/   21A20 : F00E 0000 EC        	dc.b $F0, $E, $0, $0, $EC
(1)  435/   21A25 : F801 000C 0C        	dc.b $F8, $1, $0, $C, $C
(1)  436/   21A2A : 080C 000E F4        	dc.b $8, $C, $0, $E, $F4
(1)  437/   21A2F : 03                  Map_a6dd_60D: 	dc.b $3
(1)  438/   21A30 : EB09 0000 F4        	dc.b $EB, $9, $0, $0, $F4
(1)  439/   21A35 : FB0E 0006 EC        	dc.b $FB, $E, $0, $6, $EC
(1)  440/   21A3A : 0301 0012 0C        	dc.b $3, $1, $0, $12, $C
(1)  441/   21A3F : 02                  Map_a6dd_61D: 	dc.b $2
(1)  442/   21A40 : F00F 0000 EC        	dc.b $F0, $F, $0, $0, $EC
(1)  443/   21A45 : F802 0010 0C        	dc.b $F8, $2, $0, $10, $C
(1)  444/   21A4A : 02                  Map_a6dd_628: 	dc.b $2
(1)  445/   21A4B : F90E 0000 F6        	dc.b $F9, $E, $0, $0, $F6
(1)  446/   21A50 : 1108 000C F6        	dc.b $11, $8, $0, $C, $F6
(1)  447/   21A55 : 02                  Map_a6dd_633: 	dc.b $2
(1)  448/   21A56 : F90E 0000 F6        	dc.b $F9, $E, $0, $0, $F6
(1)  449/   21A5B : 1108 000C F6        	dc.b $11, $8, $0, $C, $F6
(1)  450/   21A60 : 02                  Map_a6dd_63E: 	dc.b $2
(1)  451/   21A61 : F90E 0000 F6        	dc.b $F9, $E, $0, $0, $F6
(1)  452/   21A66 : 1108 000C F6        	dc.b $11, $8, $0, $C, $F6
(1)  453/   21A6B : 02                  Map_a6dd_649: 	dc.b $2
(1)  454/   21A6C : F90E 0000 F6        	dc.b $F9, $E, $0, $0, $F6
(1)  455/   21A71 : 1108 000C F6        	dc.b $11, $8, $0, $C, $F6
(1)  456/   21A76 : 02                  Map_a6dd_654: 	dc.b $2
(1)  457/   21A77 : F90E 0000 F6        	dc.b $F9, $E, $0, $0, $F6
(1)  458/   21A7C : 1108 000C F6        	dc.b $11, $8, $0, $C, $F6
(1)  459/   21A81 : 02                  Map_a6dd_65F: 	dc.b $2
(1)  460/   21A82 : F90E 0000 F6        	dc.b $F9, $E, $0, $0, $F6
(1)  461/   21A87 : 1108 000C F6        	dc.b $11, $8, $0, $C, $F6
(1)  462/   21A8C : (MACRO)             	even
   37738/   21A8C :                     
   37739/   21A8C :                     ; ---------------------------------------------------------------------------
   37740/   21A8C :                     ; Uncompressed graphics	loading	array for Sonic
   37741/   21A8C :                     ; ---------------------------------------------------------------------------
   37742/   21A8C :                     SonicDynPLC:
   37743/   21A8C :                     		include	"_inc/Sonic dynamic pattern load cues.asm"
(1)    1/   21A8C :                     DPLC_ddbf:
(1)    2/   21A8C : 00BC                DPLC_ddbf_0: 	dc.w DPLC_ddbf_BC-DPLC_ddbf
(1)    3/   21A8E : 00BD                DPLC_ddbf_2: 	dc.w DPLC_ddbf_BD-DPLC_ddbf
(1)    4/   21A90 : 00C6                DPLC_ddbf_4: 	dc.w DPLC_ddbf_C6-DPLC_ddbf
(1)    5/   21A92 : 00CD                DPLC_ddbf_6: 	dc.w DPLC_ddbf_CD-DPLC_ddbf
(1)    6/   21A94 : 00D4                DPLC_ddbf_8: 	dc.w DPLC_ddbf_D4-DPLC_ddbf
(1)    7/   21A96 : 00DB                DPLC_ddbf_A: 	dc.w DPLC_ddbf_DB-DPLC_ddbf
(1)    8/   21A98 : 00E2                DPLC_ddbf_C: 	dc.w DPLC_ddbf_E2-DPLC_ddbf
(1)    9/   21A9A : 00EB                DPLC_ddbf_E: 	dc.w DPLC_ddbf_EB-DPLC_ddbf
(1)   10/   21A9C : 00F0                DPLC_ddbf_10: 	dc.w DPLC_ddbf_F0-DPLC_ddbf
(1)   11/   21A9E : 00F5                DPLC_ddbf_12: 	dc.w DPLC_ddbf_F5-DPLC_ddbf
(1)   12/   21AA0 : 00FE                DPLC_ddbf_14: 	dc.w DPLC_ddbf_FE-DPLC_ddbf
(1)   13/   21AA2 : 0103                DPLC_ddbf_16: 	dc.w DPLC_ddbf_103-DPLC_ddbf
(1)   14/   21AA4 : 010A                DPLC_ddbf_18: 	dc.w DPLC_ddbf_10A-DPLC_ddbf
(1)   15/   21AA6 : 0115                DPLC_ddbf_1A: 	dc.w DPLC_ddbf_115-DPLC_ddbf
(1)   16/   21AA8 : 0122                DPLC_ddbf_1C: 	dc.w DPLC_ddbf_122-DPLC_ddbf
(1)   17/   21AAA : 012B                DPLC_ddbf_1E: 	dc.w DPLC_ddbf_12B-DPLC_ddbf
(1)   18/   21AAC : 0136                DPLC_ddbf_20: 	dc.w DPLC_ddbf_136-DPLC_ddbf
(1)   19/   21AAE : 013F                DPLC_ddbf_22: 	dc.w DPLC_ddbf_13F-DPLC_ddbf
(1)   20/   21AB0 : 014A                DPLC_ddbf_24: 	dc.w DPLC_ddbf_14A-DPLC_ddbf
(1)   21/   21AB2 : 0153                DPLC_ddbf_26: 	dc.w DPLC_ddbf_153-DPLC_ddbf
(1)   22/   21AB4 : 0158                DPLC_ddbf_28: 	dc.w DPLC_ddbf_158-DPLC_ddbf
(1)   23/   21AB6 : 015D                DPLC_ddbf_2A: 	dc.w DPLC_ddbf_15D-DPLC_ddbf
(1)   24/   21AB8 : 0166                DPLC_ddbf_2C: 	dc.w DPLC_ddbf_166-DPLC_ddbf
(1)   25/   21ABA : 016B                DPLC_ddbf_2E: 	dc.w DPLC_ddbf_16B-DPLC_ddbf
(1)   26/   21ABC : 0172                DPLC_ddbf_30: 	dc.w DPLC_ddbf_172-DPLC_ddbf
(1)   27/   21ABE : 017F                DPLC_ddbf_32: 	dc.w DPLC_ddbf_17F-DPLC_ddbf
(1)   28/   21AC0 : 018C                DPLC_ddbf_34: 	dc.w DPLC_ddbf_18C-DPLC_ddbf
(1)   29/   21AC2 : 0195                DPLC_ddbf_36: 	dc.w DPLC_ddbf_195-DPLC_ddbf
(1)   30/   21AC4 : 01A0                DPLC_ddbf_38: 	dc.w DPLC_ddbf_1A0-DPLC_ddbf
(1)   31/   21AC6 : 01A9                DPLC_ddbf_3A: 	dc.w DPLC_ddbf_1A9-DPLC_ddbf
(1)   32/   21AC8 : 01B4                DPLC_ddbf_3C: 	dc.w DPLC_ddbf_1B4-DPLC_ddbf
(1)   33/   21ACA : 01B9                DPLC_ddbf_3E: 	dc.w DPLC_ddbf_1B9-DPLC_ddbf
(1)   34/   21ACC : 01BE                DPLC_ddbf_40: 	dc.w DPLC_ddbf_1BE-DPLC_ddbf
(1)   35/   21ACE : 01C3                DPLC_ddbf_42: 	dc.w DPLC_ddbf_1C3-DPLC_ddbf
(1)   36/   21AD0 : 01C8                DPLC_ddbf_44: 	dc.w DPLC_ddbf_1C8-DPLC_ddbf
(1)   37/   21AD2 : 01D1                DPLC_ddbf_46: 	dc.w DPLC_ddbf_1D1-DPLC_ddbf
(1)   38/   21AD4 : 01D8                DPLC_ddbf_48: 	dc.w DPLC_ddbf_1D8-DPLC_ddbf
(1)   39/   21AD6 : 01E1                DPLC_ddbf_4A: 	dc.w DPLC_ddbf_1E1-DPLC_ddbf
(1)   40/   21AD8 : 01E8                DPLC_ddbf_4C: 	dc.w DPLC_ddbf_1E8-DPLC_ddbf
(1)   41/   21ADA : 01ED                DPLC_ddbf_4E: 	dc.w DPLC_ddbf_1ED-DPLC_ddbf
(1)   42/   21ADC : 01F2                DPLC_ddbf_50: 	dc.w DPLC_ddbf_1F2-DPLC_ddbf
(1)   43/   21ADE : 01F7                DPLC_ddbf_52: 	dc.w DPLC_ddbf_1F7-DPLC_ddbf
(1)   44/   21AE0 : 01FC                DPLC_ddbf_54: 	dc.w DPLC_ddbf_1FC-DPLC_ddbf
(1)   45/   21AE2 : 0205                DPLC_ddbf_56: 	dc.w DPLC_ddbf_205-DPLC_ddbf
(1)   46/   21AE4 : 020A                DPLC_ddbf_58: 	dc.w DPLC_ddbf_20A-DPLC_ddbf
(1)   47/   21AE6 : 0213                DPLC_ddbf_5A: 	dc.w DPLC_ddbf_213-DPLC_ddbf
(1)   48/   21AE8 : 0218                DPLC_ddbf_5C: 	dc.w DPLC_ddbf_218-DPLC_ddbf
(1)   49/   21AEA : 021B                DPLC_ddbf_5E: 	dc.w DPLC_ddbf_21B-DPLC_ddbf
(1)   50/   21AEC : 021E                DPLC_ddbf_60: 	dc.w DPLC_ddbf_21E-DPLC_ddbf
(1)   51/   21AEE : 0221                DPLC_ddbf_62: 	dc.w DPLC_ddbf_221-DPLC_ddbf
(1)   52/   21AF0 : 0224                DPLC_ddbf_64: 	dc.w DPLC_ddbf_224-DPLC_ddbf
(1)   53/   21AF2 : 0227                DPLC_ddbf_66: 	dc.w DPLC_ddbf_227-DPLC_ddbf
(1)   54/   21AF4 : 022C                DPLC_ddbf_68: 	dc.w DPLC_ddbf_22C-DPLC_ddbf
(1)   55/   21AF6 : 022F                DPLC_ddbf_6A: 	dc.w DPLC_ddbf_22F-DPLC_ddbf
(1)   56/   21AF8 : 0234                DPLC_ddbf_6C: 	dc.w DPLC_ddbf_234-DPLC_ddbf
(1)   57/   21AFA : 0237                DPLC_ddbf_6E: 	dc.w DPLC_ddbf_237-DPLC_ddbf
(1)   58/   21AFC : 023C                DPLC_ddbf_70: 	dc.w DPLC_ddbf_23C-DPLC_ddbf
(1)   59/   21AFE : 0245                DPLC_ddbf_72: 	dc.w DPLC_ddbf_245-DPLC_ddbf
(1)   60/   21B00 : 024E                DPLC_ddbf_74: 	dc.w DPLC_ddbf_24E-DPLC_ddbf
(1)   61/   21B02 : 0255                DPLC_ddbf_76: 	dc.w DPLC_ddbf_255-DPLC_ddbf
(1)   62/   21B04 : 025C                DPLC_ddbf_78: 	dc.w DPLC_ddbf_25C-DPLC_ddbf
(1)   63/   21B06 : 0263                DPLC_ddbf_7A: 	dc.w DPLC_ddbf_263-DPLC_ddbf
(1)   64/   21B08 : 0266                DPLC_ddbf_7C: 	dc.w DPLC_ddbf_266-DPLC_ddbf
(1)   65/   21B0A : 026D                DPLC_ddbf_7E: 	dc.w DPLC_ddbf_26D-DPLC_ddbf
(1)   66/   21B0C : 0274                DPLC_ddbf_80: 	dc.w DPLC_ddbf_274-DPLC_ddbf
(1)   67/   21B0E : 027B                DPLC_ddbf_82: 	dc.w DPLC_ddbf_27B-DPLC_ddbf
(1)   68/   21B10 : 0284                DPLC_ddbf_84: 	dc.w DPLC_ddbf_284-DPLC_ddbf
(1)   69/   21B12 : 028D                DPLC_ddbf_86: 	dc.w DPLC_ddbf_28D-DPLC_ddbf
(1)   70/   21B14 : 0298                DPLC_ddbf_88: 	dc.w DPLC_ddbf_298-DPLC_ddbf
(1)   71/   21B16 : 02A3                DPLC_ddbf_8A: 	dc.w DPLC_ddbf_2A3-DPLC_ddbf
(1)   72/   21B18 : 02A8                DPLC_ddbf_8C: 	dc.w DPLC_ddbf_2A8-DPLC_ddbf
(1)   73/   21B1A : 02AF                DPLC_ddbf_8E: 	dc.w DPLC_ddbf_2AF-DPLC_ddbf
(1)   74/   21B1C : 02B4                DPLC_ddbf_90: 	dc.w DPLC_ddbf_2B4-DPLC_ddbf
(1)   75/   21B1E : 02BB                DPLC_ddbf_92: 	dc.w DPLC_ddbf_2BB-DPLC_ddbf
(1)   76/   21B20 : 02C0                DPLC_ddbf_94: 	dc.w DPLC_ddbf_2C0-DPLC_ddbf
(1)   77/   21B22 : 02C7                DPLC_ddbf_96: 	dc.w DPLC_ddbf_2C7-DPLC_ddbf
(1)   78/   21B24 : 02CE                DPLC_ddbf_98: 	dc.w DPLC_ddbf_2CE-DPLC_ddbf
(1)   79/   21B26 : 02D9                DPLC_ddbf_9A: 	dc.w DPLC_ddbf_2D9-DPLC_ddbf
(1)   80/   21B28 : 02E4                DPLC_ddbf_9C: 	dc.w DPLC_ddbf_2E4-DPLC_ddbf
(1)   81/   21B2A : 02E9                DPLC_ddbf_9E: 	dc.w DPLC_ddbf_2E9-DPLC_ddbf
(1)   82/   21B2C : 02F0                DPLC_ddbf_A0: 	dc.w DPLC_ddbf_2F0-DPLC_ddbf
(1)   83/   21B2E : 02F3                DPLC_ddbf_A2: 	dc.w DPLC_ddbf_2F3-DPLC_ddbf
(1)   84/   21B30 : 02F6                DPLC_ddbf_A4: 	dc.w DPLC_ddbf_2F6-DPLC_ddbf
(1)   85/   21B32 : 02F9                DPLC_ddbf_A6: 	dc.w DPLC_ddbf_2F9-DPLC_ddbf
(1)   86/   21B34 : 0300                DPLC_ddbf_A8: 	dc.w DPLC_ddbf_300-DPLC_ddbf
(1)   87/   21B36 : 0307                DPLC_ddbf_AA: 	dc.w DPLC_ddbf_307-DPLC_ddbf
(1)   88/   21B38 : 030E                DPLC_ddbf_AC: 	dc.w DPLC_ddbf_30E-DPLC_ddbf
(1)   89/   21B3A : 0315                DPLC_ddbf_AE: 	dc.w DPLC_ddbf_315-DPLC_ddbf
(1)   90/   21B3C : 031A                DPLC_ddbf_B0: 	dc.w DPLC_ddbf_31A-DPLC_ddbf
(1)   91/   21B3E : 031D                DPLC_ddbf_B2: 	dc.w DPLC_ddbf_31D-DPLC_ddbf
(1)   92/   21B40 : 0320                DPLC_ddbf_B4: 	dc.w DPLC_ddbf_320-DPLC_ddbf
(1)   93/   21B42 : 0323                DPLC_ddbf_B6: 	dc.w DPLC_ddbf_323-DPLC_ddbf
(1)   94/   21B44 : 0326                DPLC_ddbf_B8: 	dc.w DPLC_ddbf_326-DPLC_ddbf
(1)   95/   21B46 : 0329                DPLC_ddbf_BA: 	dc.w DPLC_ddbf_329-DPLC_ddbf
(1)   96/   21B48 : 00                  DPLC_ddbf_BC: 	dc.b $0
(1)   97/   21B49 : 04                  DPLC_ddbf_BD: 	dc.b $4
(1)   98/   21B4A : 2000                	dc.b $20, $0
(1)   99/   21B4C : 7003                	dc.b $70, $3
(1)  100/   21B4E : 200B                	dc.b $20, $B
(1)  101/   21B50 : 200E                	dc.b $20, $E
(1)  102/   21B52 : 03                  DPLC_ddbf_C6: 	dc.b $3
(1)  103/   21B53 : 5011                	dc.b $50, $11
(1)  104/   21B55 : 5017                	dc.b $50, $17
(1)  105/   21B57 : 201D                	dc.b $20, $1D
(1)  106/   21B59 : 03                  DPLC_ddbf_CD: 	dc.b $3
(1)  107/   21B5A : 5020                	dc.b $50, $20
(1)  108/   21B5C : 5017                	dc.b $50, $17
(1)  109/   21B5E : 201D                	dc.b $20, $1D
(1)  110/   21B60 : 03                  DPLC_ddbf_D4: 	dc.b $3
(1)  111/   21B61 : 5020                	dc.b $50, $20
(1)  112/   21B63 : 5017                	dc.b $50, $17
(1)  113/   21B65 : 2026                	dc.b $20, $26
(1)  114/   21B67 : 03                  DPLC_ddbf_DB: 	dc.b $3
(1)  115/   21B68 : 8029                	dc.b $80, $29
(1)  116/   21B6A : 200B                	dc.b $20, $B
(1)  117/   21B6C : 200E                	dc.b $20, $E
(1)  118/   21B6E : 04                  DPLC_ddbf_E2: 	dc.b $4
(1)  119/   21B6F : 7032                	dc.b $70, $32
(1)  120/   21B71 : 503A                	dc.b $50, $3A
(1)  121/   21B73 : 5040                	dc.b $50, $40
(1)  122/   21B75 : 1046                	dc.b $10, $46
(1)  123/   21B77 : 02                  DPLC_ddbf_EB: 	dc.b $2
(1)  124/   21B78 : 7032                	dc.b $70, $32
(1)  125/   21B7A : B048                	dc.b $B0, $48
(1)  126/   21B7C : 02                  DPLC_ddbf_F0: 	dc.b $2
(1)  127/   21B7D : 5054                	dc.b $50, $54
(1)  128/   21B7F : 805A                	dc.b $80, $5A
(1)  129/   21B81 : 04                  DPLC_ddbf_F5: 	dc.b $4
(1)  130/   21B82 : 5054                	dc.b $50, $54
(1)  131/   21B84 : 5063                	dc.b $50, $63
(1)  132/   21B86 : 5069                	dc.b $50, $69
(1)  133/   21B88 : 106F                	dc.b $10, $6F
(1)  134/   21B8A : 02                  DPLC_ddbf_FE: 	dc.b $2
(1)  135/   21B8B : 5054                	dc.b $50, $54
(1)  136/   21B8D : B071                	dc.b $B0, $71
(1)  137/   21B8F : 03                  DPLC_ddbf_103: 	dc.b $3
(1)  138/   21B90 : 7032                	dc.b $70, $32
(1)  139/   21B92 : 307D                	dc.b $30, $7D
(1)  140/   21B94 : 5081                	dc.b $50, $81
(1)  141/   21B96 : 05                  DPLC_ddbf_10A: 	dc.b $5
(1)  142/   21B97 : 5087                	dc.b $50, $87
(1)  143/   21B99 : 508D                	dc.b $50, $8D
(1)  144/   21B9B : 2093                	dc.b $20, $93
(1)  145/   21B9D : 5096                	dc.b $50, $96
(1)  146/   21B9F : 009C                	dc.b $0, $9C
(1)  147/   21BA1 : 06                  DPLC_ddbf_115: 	dc.b $6
(1)  148/   21BA2 : 5087                	dc.b $50, $87
(1)  149/   21BA4 : 109D                	dc.b $10, $9D
(1)  150/   21BA6 : 309F                	dc.b $30, $9F
(1)  151/   21BA8 : 50A3                	dc.b $50, $A3
(1)  152/   21BAA : 30A9                	dc.b $30, $A9
(1)  153/   21BAC : 00AD                	dc.b $0, $AD
(1)  154/   21BAE : 04                  DPLC_ddbf_122: 	dc.b $4
(1)  155/   21BAF : 50AE                	dc.b $50, $AE
(1)  156/   21BB1 : 10B4                	dc.b $10, $B4
(1)  157/   21BB3 : 70B6                	dc.b $70, $B6
(1)  158/   21BB5 : 20BE                	dc.b $20, $BE
(1)  159/   21BB7 : 05                  DPLC_ddbf_12B: 	dc.b $5
(1)  160/   21BB8 : 50C1                	dc.b $50, $C1
(1)  161/   21BBA : 30C7                	dc.b $30, $C7
(1)  162/   21BBC : 70CB                	dc.b $70, $CB
(1)  163/   21BBE : 20D3                	dc.b $20, $D3
(1)  164/   21BC0 : 10D6                	dc.b $10, $D6
(1)  165/   21BC2 : 04                  DPLC_ddbf_136: 	dc.b $4
(1)  166/   21BC3 : 50C1                	dc.b $50, $C1
(1)  167/   21BC5 : 10D8                	dc.b $10, $D8
(1)  168/   21BC7 : 70DA                	dc.b $70, $DA
(1)  169/   21BC9 : 20E2                	dc.b $20, $E2
(1)  170/   21BCB : 05                  DPLC_ddbf_13F: 	dc.b $5
(1)  171/   21BCC : 5087                	dc.b $50, $87
(1)  172/   21BCE : 109D                	dc.b $10, $9D
(1)  173/   21BD0 : 0093                	dc.b $0, $93
(1)  174/   21BD2 : 70E5                	dc.b $70, $E5
(1)  175/   21BD4 : 20ED                	dc.b $20, $ED
(1)  176/   21BD6 : 04                  DPLC_ddbf_14A: 	dc.b $4
(1)  177/   21BD7 : 70F0                	dc.b $70, $F0
(1)  178/   21BD9 : 50F8                	dc.b $50, $F8
(1)  179/   21BDB : 10FE                	dc.b $10, $FE
(1)  180/   21BDD : 5100                	dc.b $51, $0
(1)  181/   21BDF : 02                  DPLC_ddbf_153: 	dc.b $2
(1)  182/   21BE0 : 70F0                	dc.b $70, $F0
(1)  183/   21BE2 : B106                	dc.b $B1, $6
(1)  184/   21BE4 : 02                  DPLC_ddbf_158: 	dc.b $2
(1)  185/   21BE5 : 5112                	dc.b $51, $12
(1)  186/   21BE7 : 8118                	dc.b $81, $18
(1)  187/   21BE9 : 04                  DPLC_ddbf_15D: 	dc.b $4
(1)  188/   21BEA : 5112                	dc.b $51, $12
(1)  189/   21BEC : 5121                	dc.b $51, $21
(1)  190/   21BEE : 1127                	dc.b $11, $27
(1)  191/   21BF0 : 5129                	dc.b $51, $29
(1)  192/   21BF2 : 02                  DPLC_ddbf_166: 	dc.b $2
(1)  193/   21BF3 : 5112                	dc.b $51, $12
(1)  194/   21BF5 : B12F                	dc.b $B1, $2F
(1)  195/   21BF7 : 03                  DPLC_ddbf_16B: 	dc.b $3
(1)  196/   21BF8 : 70F0                	dc.b $70, $F0
(1)  197/   21BFA : 0106                	dc.b $1, $6
(1)  198/   21BFC : 813B                	dc.b $81, $3B
(1)  199/   21BFE : 06                  DPLC_ddbf_172: 	dc.b $6
(1)  200/   21BFF : 5144                	dc.b $51, $44
(1)  201/   21C01 : 114A                	dc.b $11, $4A
(1)  202/   21C03 : 114C                	dc.b $11, $4C
(1)  203/   21C05 : 814E                	dc.b $81, $4E
(1)  204/   21C07 : 0157                	dc.b $1, $57
(1)  205/   21C09 : 0158                	dc.b $1, $58
(1)  206/   21C0B : 06                  DPLC_ddbf_17F: 	dc.b $6
(1)  207/   21C0C : 5144                	dc.b $51, $44
(1)  208/   21C0E : 2159                	dc.b $21, $59
(1)  209/   21C10 : 115C                	dc.b $11, $5C
(1)  210/   21C12 : 115E                	dc.b $11, $5E
(1)  211/   21C14 : 8160                	dc.b $81, $60
(1)  212/   21C16 : 0157                	dc.b $1, $57
(1)  213/   21C18 : 04                  DPLC_ddbf_18C: 	dc.b $4
(1)  214/   21C19 : 5169                	dc.b $51, $69
(1)  215/   21C1B : 116F                	dc.b $11, $6F
(1)  216/   21C1D : 8171                	dc.b $81, $71
(1)  217/   21C1F : 117A                	dc.b $11, $7A
(1)  218/   21C21 : 05                  DPLC_ddbf_195: 	dc.b $5
(1)  219/   21C22 : 517C                	dc.b $51, $7C
(1)  220/   21C24 : 2182                	dc.b $21, $82
(1)  221/   21C26 : 1185                	dc.b $11, $85
(1)  222/   21C28 : 7187                	dc.b $71, $87
(1)  223/   21C2A : 218F                	dc.b $21, $8F
(1)  224/   21C2C : 04                  DPLC_ddbf_1A0: 	dc.b $4
(1)  225/   21C2D : 517C                	dc.b $51, $7C
(1)  226/   21C2F : 1192                	dc.b $11, $92
(1)  227/   21C31 : 8194                	dc.b $81, $94
(1)  228/   21C33 : 119D                	dc.b $11, $9D
(1)  229/   21C35 : 05                  DPLC_ddbf_1A9: 	dc.b $5
(1)  230/   21C36 : 5144                	dc.b $51, $44
(1)  231/   21C38 : 819F                	dc.b $81, $9F
(1)  232/   21C3A : 115E                	dc.b $11, $5E
(1)  233/   21C3C : 11A8                	dc.b $11, $A8
(1)  234/   21C3E : 0157                	dc.b $1, $57
(1)  235/   21C40 : 02                  DPLC_ddbf_1B4: 	dc.b $2
(1)  236/   21C41 : 51AA                	dc.b $51, $AA
(1)  237/   21C43 : B1B0                	dc.b $B1, $B0
(1)  238/   21C45 : 02                  DPLC_ddbf_1B9: 	dc.b $2
(1)  239/   21C46 : 5054                	dc.b $50, $54
(1)  240/   21C48 : B1BC                	dc.b $B1, $BC
(1)  241/   21C4A : 02                  DPLC_ddbf_1BE: 	dc.b $2
(1)  242/   21C4B : 51AA                	dc.b $51, $AA
(1)  243/   21C4D : B1C8                	dc.b $B1, $C8
(1)  244/   21C4F : 02                  DPLC_ddbf_1C3: 	dc.b $2
(1)  245/   21C50 : 5054                	dc.b $50, $54
(1)  246/   21C52 : B1D4                	dc.b $B1, $D4
(1)  247/   21C54 : 04                  DPLC_ddbf_1C8: 	dc.b $4
(1)  248/   21C55 : 51E0                	dc.b $51, $E0
(1)  249/   21C57 : 11E6                	dc.b $11, $E6
(1)  250/   21C59 : B1E8                	dc.b $B1, $E8
(1)  251/   21C5B : 01F4                	dc.b $1, $F4
(1)  252/   21C5D : 03                  DPLC_ddbf_1D1: 	dc.b $3
(1)  253/   21C5E : 51F5                	dc.b $51, $F5
(1)  254/   21C60 : 11FB                	dc.b $11, $FB
(1)  255/   21C62 : B1FD                	dc.b $B1, $FD
(1)  256/   21C64 : 04                  DPLC_ddbf_1D8: 	dc.b $4
(1)  257/   21C65 : 51E0                	dc.b $51, $E0
(1)  258/   21C67 : 1209                	dc.b $12, $9
(1)  259/   21C69 : B20B                	dc.b $B2, $B
(1)  260/   21C6B : 01F4                	dc.b $1, $F4
(1)  261/   21C6D : 03                  DPLC_ddbf_1E1: 	dc.b $3
(1)  262/   21C6E : 51F5                	dc.b $51, $F5
(1)  263/   21C70 : 11FB                	dc.b $11, $FB
(1)  264/   21C72 : B217                	dc.b $B2, $17
(1)  265/   21C74 : 02                  DPLC_ddbf_1E8: 	dc.b $2
(1)  266/   21C75 : 5223                	dc.b $52, $23
(1)  267/   21C77 : B229                	dc.b $B2, $29
(1)  268/   21C79 : 02                  DPLC_ddbf_1ED: 	dc.b $2
(1)  269/   21C7A : 5112                	dc.b $51, $12
(1)  270/   21C7C : B235                	dc.b $B2, $35
(1)  271/   21C7E : 02                  DPLC_ddbf_1F2: 	dc.b $2
(1)  272/   21C7F : 5223                	dc.b $52, $23
(1)  273/   21C81 : B241                	dc.b $B2, $41
(1)  274/   21C83 : 02                  DPLC_ddbf_1F7: 	dc.b $2
(1)  275/   21C84 : 5112                	dc.b $51, $12
(1)  276/   21C86 : B24D                	dc.b $B2, $4D
(1)  277/   21C88 : 04                  DPLC_ddbf_1FC: 	dc.b $4
(1)  278/   21C89 : 5259                	dc.b $52, $59
(1)  279/   21C8B : 125F                	dc.b $12, $5F
(1)  280/   21C8D : B261                	dc.b $B2, $61
(1)  281/   21C8F : 026D                	dc.b $2, $6D
(1)  282/   21C91 : 02                  DPLC_ddbf_205: 	dc.b $2
(1)  283/   21C92 : 726E                	dc.b $72, $6E
(1)  284/   21C94 : B276                	dc.b $B2, $76
(1)  285/   21C96 : 04                  DPLC_ddbf_20A: 	dc.b $4
(1)  286/   21C97 : 5259                	dc.b $52, $59
(1)  287/   21C99 : 1282                	dc.b $12, $82
(1)  288/   21C9B : B284                	dc.b $B2, $84
(1)  289/   21C9D : 026D                	dc.b $2, $6D
(1)  290/   21C9F : 02                  DPLC_ddbf_213: 	dc.b $2
(1)  291/   21CA0 : 726E                	dc.b $72, $6E
(1)  292/   21CA2 : B290                	dc.b $B2, $90
(1)  293/   21CA4 : 01                  DPLC_ddbf_218: 	dc.b $1
(1)  294/   21CA5 : F29C                	dc.b $F2, $9C
(1)  295/   21CA7 : 01                  DPLC_ddbf_21B: 	dc.b $1
(1)  296/   21CA8 : F2AC                	dc.b $F2, $AC
(1)  297/   21CAA : 01                  DPLC_ddbf_21E: 	dc.b $1
(1)  298/   21CAB : F2BC                	dc.b $F2, $BC
(1)  299/   21CAD : 01                  DPLC_ddbf_221: 	dc.b $1
(1)  300/   21CAE : F2CC                	dc.b $F2, $CC
(1)  301/   21CB0 : 01                  DPLC_ddbf_224: 	dc.b $1
(1)  302/   21CB1 : F2DC                	dc.b $F2, $DC
(1)  303/   21CB3 : 02                  DPLC_ddbf_227: 	dc.b $2
(1)  304/   21CB4 : B2EC                	dc.b $B2, $EC
(1)  305/   21CB6 : 22F8                	dc.b $22, $F8
(1)  306/   21CB8 : 01                  DPLC_ddbf_22C: 	dc.b $1
(1)  307/   21CB9 : F2FB                	dc.b $F2, $FB
(1)  308/   21CBB : 02                  DPLC_ddbf_22F: 	dc.b $2
(1)  309/   21CBC : B30B                	dc.b $B3, $B
(1)  310/   21CBE : 2317                	dc.b $23, $17
(1)  311/   21CC0 : 01                  DPLC_ddbf_234: 	dc.b $1
(1)  312/   21CC1 : F31A                	dc.b $F3, $1A
(1)  313/   21CC3 : 02                  DPLC_ddbf_237: 	dc.b $2
(1)  314/   21CC4 : 532A                	dc.b $53, $2A
(1)  315/   21CC6 : B330                	dc.b $B3, $30
(1)  316/   21CC8 : 04                  DPLC_ddbf_23C: 	dc.b $4
(1)  317/   21CC9 : 533C                	dc.b $53, $3C
(1)  318/   21CCB : 7342                	dc.b $73, $42
(1)  319/   21CCD : 134A                	dc.b $13, $4A
(1)  320/   21CCF : 034C                	dc.b $3, $4C
(1)  321/   21CD1 : 04                  DPLC_ddbf_245: 	dc.b $4
(1)  322/   21CD2 : 134D                	dc.b $13, $4D
(1)  323/   21CD4 : 734F                	dc.b $73, $4F
(1)  324/   21CD6 : 2357                	dc.b $23, $57
(1)  325/   21CD8 : 035A                	dc.b $3, $5A
(1)  326/   21CDA : 03                  DPLC_ddbf_24E: 	dc.b $3
(1)  327/   21CDB : 235B                	dc.b $23, $5B
(1)  328/   21CDD : 235E                	dc.b $23, $5E
(1)  329/   21CDF : F361                	dc.b $F3, $61
(1)  330/   21CE1 : 03                  DPLC_ddbf_255: 	dc.b $3
(1)  331/   21CE2 : B371                	dc.b $B3, $71
(1)  332/   21CE4 : 737D                	dc.b $73, $7D
(1)  333/   21CE6 : 0071                	dc.b $0, $71
(1)  334/   21CE8 : 03                  DPLC_ddbf_25C: 	dc.b $3
(1)  335/   21CE9 : 7385                	dc.b $73, $85
(1)  336/   21CEB : 338D                	dc.b $33, $8D
(1)  337/   21CED : 2391                	dc.b $23, $91
(1)  338/   21CEF : 01                  DPLC_ddbf_263: 	dc.b $1
(1)  339/   21CF0 : 8394                	dc.b $83, $94
(1)  340/   21CF2 : 03                  DPLC_ddbf_266: 	dc.b $3
(1)  341/   21CF3 : 739D                	dc.b $73, $9D
(1)  342/   21CF5 : 03A5                	dc.b $3, $A5
(1)  343/   21CF7 : 33A6                	dc.b $33, $A6
(1)  344/   21CF9 : 03                  DPLC_ddbf_26D: 	dc.b $3
(1)  345/   21CFA : 73AA                	dc.b $73, $AA
(1)  346/   21CFC : 33B2                	dc.b $33, $B2
(1)  347/   21CFE : 23B6                	dc.b $23, $B6
(1)  348/   21D00 : 03                  DPLC_ddbf_274: 	dc.b $3
(1)  349/   21D01 : B3B9                	dc.b $B3, $B9
(1)  350/   21D03 : 13C5                	dc.b $13, $C5
(1)  351/   21D05 : 03C7                	dc.b $3, $C7
(1)  352/   21D07 : 04                  DPLC_ddbf_27B: 	dc.b $4
(1)  353/   21D08 : B3C8                	dc.b $B3, $C8
(1)  354/   21D0A : 33D4                	dc.b $33, $D4
(1)  355/   21D0C : 03D8                	dc.b $3, $D8
(1)  356/   21D0E : 03D9                	dc.b $3, $D9
(1)  357/   21D10 : 04                  DPLC_ddbf_284: 	dc.b $4
(1)  358/   21D11 : B3DA                	dc.b $B3, $DA
(1)  359/   21D13 : 33E6                	dc.b $33, $E6
(1)  360/   21D15 : 03EA                	dc.b $3, $EA
(1)  361/   21D17 : 03EB                	dc.b $3, $EB
(1)  362/   21D19 : 05                  DPLC_ddbf_28D: 	dc.b $5
(1)  363/   21D1A : 83EC                	dc.b $83, $EC
(1)  364/   21D1C : 13F5                	dc.b $13, $F5
(1)  365/   21D1E : 53F7                	dc.b $53, $F7
(1)  366/   21D20 : 13FD                	dc.b $13, $FD
(1)  367/   21D22 : 03FF                	dc.b $3, $FF
(1)  368/   21D24 : 05                  DPLC_ddbf_298: 	dc.b $5
(1)  369/   21D25 : 8400                	dc.b $84, $0
(1)  370/   21D27 : 1409                	dc.b $14, $9
(1)  371/   21D29 : 53F7                	dc.b $53, $F7
(1)  372/   21D2B : 13FD                	dc.b $13, $FD
(1)  373/   21D2D : 03FF                	dc.b $3, $FF
(1)  374/   21D2F : 02                  DPLC_ddbf_2A3: 	dc.b $2
(1)  375/   21D30 : 840B                	dc.b $84, $B
(1)  376/   21D32 : 7414                	dc.b $74, $14
(1)  377/   21D34 : 03                  DPLC_ddbf_2A8: 	dc.b $3
(1)  378/   21D35 : 841C                	dc.b $84, $1C
(1)  379/   21D37 : 2425                	dc.b $24, $25
(1)  380/   21D39 : 1428                	dc.b $14, $28
(1)  381/   21D3B : 02                  DPLC_ddbf_2AF: 	dc.b $2
(1)  382/   21D3C : 842A                	dc.b $84, $2A
(1)  383/   21D3E : 7433                	dc.b $74, $33
(1)  384/   21D40 : 03                  DPLC_ddbf_2B4: 	dc.b $3
(1)  385/   21D41 : 841C                	dc.b $84, $1C
(1)  386/   21D43 : 243B                	dc.b $24, $3B
(1)  387/   21D45 : 143E                	dc.b $14, $3E
(1)  388/   21D47 : 02                  DPLC_ddbf_2BB: 	dc.b $2
(1)  389/   21D48 : 5440                	dc.b $54, $40
(1)  390/   21D4A : B446                	dc.b $B4, $46
(1)  391/   21D4C : 03                  DPLC_ddbf_2C0: 	dc.b $3
(1)  392/   21D4D : 8452                	dc.b $84, $52
(1)  393/   21D4F : 345B                	dc.b $34, $5B
(1)  394/   21D51 : 045F                	dc.b $4, $5F
(1)  395/   21D53 : 03                  DPLC_ddbf_2C7: 	dc.b $3
(1)  396/   21D54 : 7460                	dc.b $74, $60
(1)  397/   21D56 : 1468                	dc.b $14, $68
(1)  398/   21D58 : B46A                	dc.b $B4, $6A
(1)  399/   21D5A : 05                  DPLC_ddbf_2CE: 	dc.b $5
(1)  400/   21D5B : 7476                	dc.b $74, $76
(1)  401/   21D5D : 147E                	dc.b $14, $7E
(1)  402/   21D5F : 5480                	dc.b $54, $80
(1)  403/   21D61 : 3486                	dc.b $34, $86
(1)  404/   21D63 : 048A                	dc.b $4, $8A
(1)  405/   21D65 : 05                  DPLC_ddbf_2D9: 	dc.b $5
(1)  406/   21D66 : 748B                	dc.b $74, $8B
(1)  407/   21D68 : 147E                	dc.b $14, $7E
(1)  408/   21D6A : 5493                	dc.b $54, $93
(1)  409/   21D6C : 3486                	dc.b $34, $86
(1)  410/   21D6E : 048A                	dc.b $4, $8A
(1)  411/   21D70 : 02                  DPLC_ddbf_2E4: 	dc.b $2
(1)  412/   21D71 : 2499                	dc.b $24, $99
(1)  413/   21D73 : F49C                	dc.b $F4, $9C
(1)  414/   21D75 : 03                  DPLC_ddbf_2E9: 	dc.b $3
(1)  415/   21D76 : 24AC                	dc.b $24, $AC
(1)  416/   21D78 : B4AF                	dc.b $B4, $AF
(1)  417/   21D7A : 24BB                	dc.b $24, $BB
(1)  418/   21D7C : 01                  DPLC_ddbf_2F0: 	dc.b $1
(1)  419/   21D7D : B4BE                	dc.b $B4, $BE
(1)  420/   21D7F : 01                  DPLC_ddbf_2F3: 	dc.b $1
(1)  421/   21D80 : 54CA                	dc.b $54, $CA
(1)  422/   21D82 : 01                  DPLC_ddbf_2F6: 	dc.b $1
(1)  423/   21D83 : 14D0                	dc.b $14, $D0
(1)  424/   21D85 : 03                  DPLC_ddbf_2F9: 	dc.b $3
(1)  425/   21D86 : 7385                	dc.b $73, $85
(1)  426/   21D88 : 338D                	dc.b $33, $8D
(1)  427/   21D8A : 2391                	dc.b $23, $91
(1)  428/   21D8C : 03                  DPLC_ddbf_300: 	dc.b $3
(1)  429/   21D8D : 739D                	dc.b $73, $9D
(1)  430/   21D8F : 03A5                	dc.b $3, $A5
(1)  431/   21D91 : 33A6                	dc.b $33, $A6
(1)  432/   21D93 : 03                  DPLC_ddbf_307: 	dc.b $3
(1)  433/   21D94 : B4D2                	dc.b $B4, $D2
(1)  434/   21D96 : 14DE                	dc.b $14, $DE
(1)  435/   21D98 : 34E0                	dc.b $34, $E0
(1)  436/   21D9A : 03                  DPLC_ddbf_30E: 	dc.b $3
(1)  437/   21D9B : 54E4                	dc.b $54, $E4
(1)  438/   21D9D : B4EA                	dc.b $B4, $EA
(1)  439/   21D9F : 106D                	dc.b $10, $6D
(1)  440/   21DA1 : 02                  DPLC_ddbf_315: 	dc.b $2
(1)  441/   21DA2 : F4F6                	dc.b $F4, $F6
(1)  442/   21DA4 : 2506                	dc.b $25, $6
(1)  443/   21DA6 : 01                  DPLC_ddbf_31A: 	dc.b $1
(1)  444/   21DA7 : E554                	dc.b $E5, $54
(1)  445/   21DA9 : 01                  DPLC_ddbf_31D: 	dc.b $1
(1)  446/   21DAA : E509                	dc.b $E5, $9
(1)  447/   21DAC : 01                  DPLC_ddbf_320: 	dc.b $1
(1)  448/   21DAD : E518                	dc.b $E5, $18
(1)  449/   21DAF : 01                  DPLC_ddbf_323: 	dc.b $1
(1)  450/   21DB0 : E527                	dc.b $E5, $27
(1)  451/   21DB2 : 01                  DPLC_ddbf_326: 	dc.b $1
(1)  452/   21DB3 : E536                	dc.b $E5, $36
(1)  453/   21DB5 : 01                  DPLC_ddbf_329: 	dc.b $1
(1)  454/   21DB6 : E545                	dc.b $E5, $45
(1)  455/   21DB8 : (MACRO)             	even
   37744/   21DB8 :                     
   37745/   21DB8 :                     ; ---------------------------------------------------------------------------
   37746/   21DB8 :                     ; Uncompressed graphics	- Sonic
   37747/   21DB8 :                     ; ---------------------------------------------------------------------------
   37748/   21DB8 :                     Art_Sonic:	binclude	artunc/sonic.bin	; Sonic
   37749/   2CA18 : (MACRO)             		align 2
   37749/   2CA18 :  (MACRO-2)                  cnop 0,2
   37749/   2CA18 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37750/   2CA18 :                     ; ---------------------------------------------------------------------------
   37751/   2CA18 :                     ; Compressed graphics - various
   37752/   2CA18 :                     ; ---------------------------------------------------------------------------
   37753/   2CA18 :                     Nem_Smoke:	binclude	artnem/xxxsmoke.bin	; unused smoke
   37754/   2CB1C : (MACRO)             		align 2
   37754/   2CB1C :  (MACRO-2)                  cnop 0,2
   37754/   2CB1C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37755/   2CB1C :                     Nem_SyzSparkle:	binclude	artnem/xxxstars.bin	; unused stars
   37756/   2CB56 : (MACRO)             		align 2
   37756/   2CB56 :  (MACRO-2)                  cnop 0,2
   37756/   2CB56 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37757/   2CB56 :                     Nem_Shield:	binclude	artnem/shield.bin	; shield
   37758/   2CCEC : (MACRO)             		align 2
   37758/   2CCEC :  (MACRO-2)                  cnop 0,2
   37758/   2CCEC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37759/   2CCEC :                     Nem_Stars:	binclude	artnem/invstars.bin	; invincibility stars
   37760/   2CE34 : (MACRO)             		align 2
   37760/   2CE34 :  (MACRO-2)                  cnop 0,2
   37760/   2CE34 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37761/   2CE34 :                     Nem_LzSonic:	binclude	artnem/xxxlzson.bin	; unused LZ Sonic holding his breath
   37762/   2CF3E : (MACRO)             		align 2
   37762/   2CF3E :  (MACRO-2)                  cnop 0,2
   37762/   2CF3E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37763/   2CF3E :                     Nem_UnkFire:	binclude	artnem/xxxfire.bin	; unused fireball
   37764/   2CF90 : (MACRO)             		align 2
   37764/   2CF90 :  (MACRO-2)                  cnop 0,2
   37764/   2CF90 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37765/   2CF90 :                     Nem_Warp:	binclude	artnem/xxxflash.bin	; unused entry to special stage flash
   37766/   2D1D8 : (MACRO)             		align 2
   37766/   2D1D8 :  (MACRO-2)                  cnop 0,2
   37766/   2D1D8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37767/   2D1D8 :                     Nem_Goggle:	binclude	artnem/xxxgoggl.bin	; unused goggles
   37768/   2D35E : (MACRO)             		align 2
   37768/   2D35E :  (MACRO-2)                  cnop 0,2
   37768/   2D35E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37769/   2D35E :                     ; ---------------------------------------------------------------------------
   37770/   2D35E :                     ; Sprite mappings - walls of the special stage
   37771/   2D35E :                     ; ---------------------------------------------------------------------------
   37772/   2D35E :                     Map_SSWalls:
   37773/   2D35E :                     		include	"_maps/SSwalls.asm"
(1)    1/   2D35E :                     ; ---------------------------------------------------------------------------
(1)    2/   2D35E :                     ; Sprite mappings - walls of the special stage
(1)    3/   2D35E :                     ; ---------------------------------------------------------------------------
(1)    4/   2D35E : 0020 0026           		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
(1)    5/   2D362 : 002C 0032           		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
(1)    6/   2D366 : 0038 003E           		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
(1)    7/   2D36A : 0044 004A           		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
(1)    8/   2D36E : 0050 0056           		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
(1)    9/   2D372 : 005C 0062           		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
(1)   10/   2D376 : 0068 006E           		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
(1)   11/   2D37A : 0074 007A           		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
(1)   12/   2D37E : 01                  byte_2C584:	dc.b 1
(1)   13/   2D37F : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)   14/   2D384 : 01                  byte_2C58A:	dc.b 1
(1)   15/   2D385 : F00F 0009 F0        		dc.b $F0, $F, 0, 9, $F0
(1)   16/   2D38A : 01                  byte_2C590:	dc.b 1
(1)   17/   2D38B : F00F 0019 F0        		dc.b $F0, $F, 0, $19, $F0
(1)   18/   2D390 : 01                  byte_2C596:	dc.b 1
(1)   19/   2D391 : F00F 0029 F0        		dc.b $F0, $F, 0, $29, $F0
(1)   20/   2D396 : 01                  byte_2C59C:	dc.b 1
(1)   21/   2D397 : F00F 0039 F0        		dc.b $F0, $F, 0, $39, $F0
(1)   22/   2D39C : 01                  byte_2C5A2:	dc.b 1
(1)   23/   2D39D : F00F 0049 F0        		dc.b $F0, $F, 0, $49, $F0
(1)   24/   2D3A2 : 01                  byte_2C5A8:	dc.b 1
(1)   25/   2D3A3 : F00F 0059 F0        		dc.b $F0, $F, 0, $59, $F0
(1)   26/   2D3A8 : 01                  byte_2C5AE:	dc.b 1
(1)   27/   2D3A9 : F00F 0069 F0        		dc.b $F0, $F, 0, $69, $F0
(1)   28/   2D3AE : 01                  byte_2C5B4:	dc.b 1
(1)   29/   2D3AF : F00F 0079 F0        		dc.b $F0, $F, 0, $79, $F0
(1)   30/   2D3B4 : 01                  byte_2C5BA:	dc.b 1
(1)   31/   2D3B5 : F00F 0089 F0        		dc.b $F0, $F, 0, $89, $F0
(1)   32/   2D3BA : 01                  byte_2C5C0:	dc.b 1
(1)   33/   2D3BB : F00F 0099 F0        		dc.b $F0, $F, 0, $99, $F0
(1)   34/   2D3C0 : 01                  byte_2C5C6:	dc.b 1
(1)   35/   2D3C1 : F00F 00A9 F0        		dc.b $F0, $F, 0, $A9, $F0
(1)   36/   2D3C6 : 01                  byte_2C5CC:	dc.b 1
(1)   37/   2D3C7 : F00F 00B9 F0        		dc.b $F0, $F, 0, $B9, $F0
(1)   38/   2D3CC : 01                  byte_2C5D2:	dc.b 1
(1)   39/   2D3CD : F00F 00C9 F0        		dc.b $F0, $F, 0, $C9, $F0
(1)   40/   2D3D2 : 01                  byte_2C5D8:	dc.b 1
(1)   41/   2D3D3 : F00F 00D9 F0        		dc.b $F0, $F, 0, $D9, $F0
(1)   42/   2D3D8 : 01                  byte_2C5DE:	dc.b 1
(1)   43/   2D3D9 : F00F 00E9 F0        		dc.b $F0, $F, 0, $E9, $F0
(1)   44/   2D3DE : (MACRO)             		align 2
(1)   44/   2D3DE :  (MACRO-2)                  cnop 0,2
(1)   44/   2D3DE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37774/   2D3DE :                     ; ---------------------------------------------------------------------------
   37775/   2D3DE :                     ; Compressed graphics - special stage
   37776/   2D3DE :                     ; ---------------------------------------------------------------------------
   37777/   2D3DE :                     Nem_SSWalls:	binclude	artnem/sswalls.bin	; special stage walls
   37778/   2DD16 : (MACRO)             		align 2
   37778/   2DD16 :  (MACRO-2)                  cnop 0,2
   37778/   2DD16 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37779/   2DD16 :                     Eni_SSBg1:	binclude	mapeni/ssbg1.bin	; special stage background (mappings)
   37780/   2DE4A : (MACRO)             		align 2
   37780/   2DE4A :  (MACRO-2)                  cnop 0,2
   37780/   2DE4A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37781/   2DE4A :                     Nem_SSBgFish:	binclude	artnem/ssbg1.bin	; special stage birds and fish background
   37782/   2EADA : (MACRO)             		align 2
   37782/   2EADA :  (MACRO-2)                  cnop 0,2
   37782/   2EADA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37783/   2EADA :                     Eni_SSBg2:	binclude	mapeni/ssbg2.bin	; special stage background (mappings)
   37784/   2EDDA : (MACRO)             		align 2
   37784/   2EDDA :  (MACRO-2)                  cnop 0,2
   37784/   2EDDA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37785/   2EDDA :                     Nem_SSBgCloud:	binclude	artnem/ssbg2.bin	; special stage clouds background
   37786/   2F2CE : (MACRO)             		align 2
   37786/   2F2CE :  (MACRO-2)                  cnop 0,2
   37786/   2F2CE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37787/   2F2CE :                     Nem_SSGOAL:	binclude	artnem/ssgoal.bin	; special stage GOAL block
   37788/   2F3BC : (MACRO)             		align 2
   37788/   2F3BC :  (MACRO-2)                  cnop 0,2
   37788/   2F3BC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37789/   2F3BC :                     Nem_SSRBlock:	binclude	artnem/ssr.bin		; special stage R block
   37790/   2F48C : (MACRO)             		align 2
   37790/   2F48C :  (MACRO-2)                  cnop 0,2
   37790/   2F48C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37791/   2F48C :                     Nem_SS1UpBlock:	binclude	artnem/ss1up.bin	; special stage 1UP block
   37792/   2F582 : (MACRO)             		align 2
   37792/   2F582 :  (MACRO-2)                  cnop 0,2
   37792/   2F582 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37793/   2F582 :                     Nem_SSEmStars:	binclude	artnem/ssemstar.bin	; special stage stars from a collected emerald
   37794/   2F5E0 : (MACRO)             		align 2
   37794/   2F5E0 :  (MACRO-2)                  cnop 0,2
   37794/   2F5E0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37795/   2F5E0 :                     Nem_SSRedWhite:	binclude	artnem/ssredwhi.bin	; special stage red/white block
   37796/   2F672 : (MACRO)             		align 2
   37796/   2F672 :  (MACRO-2)                  cnop 0,2
   37796/   2F672 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37797/   2F672 :                     Nem_SSZone1:	binclude	artnem/sszone1.bin	; special stage ZONE1 block
   37798/   2F734 : (MACRO)             		align 2
   37798/   2F734 :  (MACRO-2)                  cnop 0,2
   37798/   2F734 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37799/   2F734 :                     Nem_SSZone2:	binclude	artnem/sszone2.bin	; ZONE2 block
   37800/   2F802 : (MACRO)             		align 2
   37800/   2F802 :  (MACRO-2)                  cnop 0,2
   37800/   2F802 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37801/   2F802 :                     Nem_SSZone3:	binclude	artnem/sszone3.bin	; ZONE3 block
   37802/   2F8CE : (MACRO)             		align 2
   37802/   2F8CE :  (MACRO-2)                  cnop 0,2
   37802/   2F8CE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37803/   2F8CE :                     Nem_SSZone4:	binclude	artnem/sszone4.bin	; ZONE4 block
   37804/   2F996 : (MACRO)             		align 2
   37804/   2F996 :  (MACRO-2)                  cnop 0,2
   37804/   2F996 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37805/   2F996 :                     Nem_SSZone5:	binclude	artnem/sszone5.bin	; ZONE5 block
   37806/   2FA60 : (MACRO)             		align 2
   37806/   2FA60 :  (MACRO-2)                  cnop 0,2
   37806/   2FA60 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37807/   2FA60 :                     Nem_SSZone6:	binclude	artnem/sszone6.bin	; ZONE6 block
   37808/   2FB30 : (MACRO)             		align 2
   37808/   2FB30 :  (MACRO-2)                  cnop 0,2
   37808/   2FB30 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37809/   2FB30 :                     Nem_SSUpDown:	binclude	artnem/ssupdown.bin	; special stage UP/DOWN block
   37810/   2FD24 : (MACRO)             		align 2
   37810/   2FD24 :  (MACRO-2)                  cnop 0,2
   37810/   2FD24 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37811/   2FD24 :                     Nem_SSEmerald:	binclude	artnem/ssemeral.bin	; special stage chaos emeralds
   37812/   2FE8C : (MACRO)             		align 2
   37812/   2FE8C :  (MACRO-2)                  cnop 0,2
   37812/   2FE8C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37813/   2FE8C :                     Nem_SSGhost:	binclude	artnem/ssghost.bin	; special stage ghost block
   37814/   2FF3C : (MACRO)             		align 2
   37814/   2FF3C :  (MACRO-2)                  cnop 0,2
   37814/   2FF3C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37815/   2FF3C :                     Nem_SSWBlock:	binclude	artnem/ssw.bin		; special stage W block
   37816/   30016 : (MACRO)             		align 2
   37816/   30016 :  (MACRO-2)                  cnop 0,2
   37816/   30016 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37817/   30016 :                     Nem_SSGlass:	binclude	artnem/ssglass.bin	; special stage destroyable glass block
   37818/   3009A : (MACRO)             		align 2
   37818/   3009A :  (MACRO-2)                  cnop 0,2
   37818/   3009A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37819/   3009A :                     Nem_ResultEm:	binclude	artnem/ssresems.bin	; chaos emeralds on special stage results screen
   37820/   30218 : (MACRO)             		align 2
   37820/   30218 :  (MACRO-2)                  cnop 0,2
   37820/   30218 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37821/   30218 :                     ; ---------------------------------------------------------------------------
   37822/   30218 :                     ; Compressed graphics - GHZ stuff
   37823/   30218 :                     ; ---------------------------------------------------------------------------
   37824/   30218 :                     Nem_Stalk:	binclude	artnem/ghzstalk.bin	; GHZ flower stalk
   37825/   30262 : (MACRO)             		align 2
   37825/   30262 :  (MACRO-2)                  cnop 0,2
   37825/   30262 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37826/   30262 :                     Nem_Swing:	binclude	artnem/ghzswing.bin	; GHZ swinging platform
   37827/   3037C : (MACRO)             		align 2
   37827/   3037C :  (MACRO-2)                  cnop 0,2
   37827/   3037C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37828/   3037C :                     Nem_Bridge:	binclude	artnem/ghzbridg.bin	; GHZ bridge
   37829/   30468 : (MACRO)             		align 2
   37829/   30468 :  (MACRO-2)                  cnop 0,2
   37829/   30468 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37830/   30468 :                     Nem_GhzUnkBlock:binclude	artnem/xxxghzbl.bin	; unused GHZ block
   37831/   304B0 : (MACRO)             		align 2
   37831/   304B0 :  (MACRO-2)                  cnop 0,2
   37831/   304B0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37832/   304B0 :                     Nem_Ball:	binclude	artnem/ghzball.bin	; GHZ giant ball
   37833/   3064E : (MACRO)             		align 2
   37833/   3064E :  (MACRO-2)                  cnop 0,2
   37833/   3064E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37834/   3064E :                     Nem_Spikes:	binclude	artnem/spikes.bin	; spikes
   37835/   306CA : (MACRO)             		align 2
   37835/   306CA :  (MACRO-2)                  cnop 0,2
   37835/   306CA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37836/   306CA :                     Nem_GhzLog:	binclude	artnem/xxxghzlo.bin	; unused GHZ log
   37837/   308DE : (MACRO)             		align 2
   37837/   308DE :  (MACRO-2)                  cnop 0,2
   37837/   308DE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37838/   308DE :                     Nem_SpikePole:	binclude	artnem/ghzlog.bin	; GHZ spiked log
   37839/   30A0A : (MACRO)             		align 2
   37839/   30A0A :  (MACRO-2)                  cnop 0,2
   37839/   30A0A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37840/   30A0A :                     Nem_PplRock:	binclude	artnem/ghzrock.bin	; GHZ purple rock
   37841/   30B38 : (MACRO)             		align 2
   37841/   30B38 :  (MACRO-2)                  cnop 0,2
   37841/   30B38 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37842/   30B38 :                     Nem_GhzWall1:	binclude	artnem/ghzwall1.bin	; GHZ destroyable wall
   37843/   30BD6 : (MACRO)             		align 2
   37843/   30BD6 :  (MACRO-2)                  cnop 0,2
   37843/   30BD6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37844/   30BD6 :                     Nem_GhzWall2:	binclude	artnem/ghzwall2.bin	; GHZ normal wall
   37845/   30C36 : (MACRO)             		align 2
   37845/   30C36 :  (MACRO-2)                  cnop 0,2
   37845/   30C36 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37846/   30C36 :                     ; ---------------------------------------------------------------------------
   37847/   30C36 :                     ; Compressed graphics - LZ stuff
   37848/   30C36 :                     ; ---------------------------------------------------------------------------
   37849/   30C36 :                     Nem_Water:	binclude	artnem/lzwater.bin	; LZ water surface
   37850/   30D5A : (MACRO)             		align 2
   37850/   30D5A :  (MACRO-2)                  cnop 0,2
   37850/   30D5A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37851/   30D5A :                     Nem_Splash:	binclude	artnem/lzsplash.bin	; LZ waterfalls and splashes
   37852/   3154E : (MACRO)             		align 2
   37852/   3154E :  (MACRO-2)                  cnop 0,2
   37852/   3154E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37853/   3154E :                     Nem_LzSpikeBall:binclude	artnem/lzspball.bin	; LZ spiked ball on chain
   37854/   316CE : (MACRO)             		align 2
   37854/   316CE :  (MACRO-2)                  cnop 0,2
   37854/   316CE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37855/   316CE :                     Nem_FlapDoor:	binclude	artnem/lzflapdo.bin	; LZ flapping door
   37856/   31838 : (MACRO)             		align 2
   37856/   31838 :  (MACRO-2)                  cnop 0,2
   37856/   31838 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37857/   31838 :                     Nem_Bubbles:	binclude	artnem/lzbubble.bin	; LZ bubbles and countdown numbers
   37858/   31E8E : (MACRO)             		align 2
   37858/   31E8E :  (MACRO-2)                  cnop 0,2
   37858/   31E8E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37859/   31E8E :                     Nem_LzBlock3:	binclude	artnem/lzblock3.bin	; LZ 32x16 block
   37860/   31F44 : (MACRO)             		align 2
   37860/   31F44 :  (MACRO-2)                  cnop 0,2
   37860/   31F44 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37861/   31F44 :                     Nem_LzDoor1:	binclude	artnem/lzvdoor.bin	; LZ vertical door
   37862/   31FE6 : (MACRO)             		align 2
   37862/   31FE6 :  (MACRO-2)                  cnop 0,2
   37862/   31FE6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37863/   31FE6 :                     Nem_Harpoon:	binclude	artnem/lzharpoo.bin	; LZ harpoon
   37864/   32142 : (MACRO)             		align 2
   37864/   32142 :  (MACRO-2)                  cnop 0,2
   37864/   32142 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37865/   32142 :                     Nem_LzPole:	binclude	artnem/lzpole.bin	; LZ pole that breaks
   37866/   321A6 : (MACRO)             		align 2
   37866/   321A6 :  (MACRO-2)                  cnop 0,2
   37866/   321A6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37867/   321A6 :                     Nem_LzDoor2:	binclude	artnem/lzhdoor.bin	; LZ large horizontal door
   37868/   322F8 : (MACRO)             		align 2
   37868/   322F8 :  (MACRO-2)                  cnop 0,2
   37868/   322F8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37869/   322F8 :                     Nem_LzWheel:	binclude	artnem/lzwheel.bin	; LZ wheel from corner of conveyor belt
   37870/   327DA : (MACRO)             		align 2
   37870/   327DA :  (MACRO-2)                  cnop 0,2
   37870/   327DA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37871/   327DA :                     Nem_Gargoyle:	binclude	artnem/lzgargoy.bin	; LZ gargoyle head and spitting fire
   37872/   3294A : (MACRO)             		align 2
   37872/   3294A :  (MACRO-2)                  cnop 0,2
   37872/   3294A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37873/   3294A :                     Nem_LzBlock2:	binclude	artnem/lzblock2.bin	; LZ blocks
   37874/   32C02 : (MACRO)             		align 2
   37874/   32C02 :  (MACRO-2)                  cnop 0,2
   37874/   32C02 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37875/   32C02 :                     Nem_LzPlatfm:	binclude	artnem/lzptform.bin	; LZ rising platforms
   37876/   32D3A : (MACRO)             		align 2
   37876/   32D3A :  (MACRO-2)                  cnop 0,2
   37876/   32D3A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37877/   32D3A :                     Nem_Cork:	binclude	artnem/lzcork.bin	; LZ cork block
   37878/   32E64 : (MACRO)             		align 2
   37878/   32E64 :  (MACRO-2)                  cnop 0,2
   37878/   32E64 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37879/   32E64 :                     Nem_LzBlock1:	binclude	artnem/lzblock1.bin	; LZ 32x32 block
   37880/   32F74 : (MACRO)             		align 2
   37880/   32F74 :  (MACRO-2)                  cnop 0,2
   37880/   32F74 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37881/   32F74 :                     ; ---------------------------------------------------------------------------
   37882/   32F74 :                     ; Compressed graphics - MZ stuff
   37883/   32F74 :                     ; ---------------------------------------------------------------------------
   37884/   32F74 :                     Nem_MzMetal:	binclude	artnem/mzmetal.bin	; MZ metal blocks
   37885/   33202 : (MACRO)             		align 2
   37885/   33202 :  (MACRO-2)                  cnop 0,2
   37885/   33202 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37886/   33202 :                     Nem_MzSwitch:	binclude	artnem/mzswitch.bin	; MZ switch
   37887/   332C0 : (MACRO)             		align 2
   37887/   332C0 :  (MACRO-2)                  cnop 0,2
   37887/   332C0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37888/   332C0 :                     Nem_MzGlass:	binclude	artnem/mzglassy.bin	; MZ green glassy block
   37889/   33378 : (MACRO)             		align 2
   37889/   33378 :  (MACRO-2)                  cnop 0,2
   37889/   33378 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37890/   33378 :                     Nem_GhzGrass:	binclude	artnem/xxxgrass.bin	; unused grass (GHZ or MZ?)
   37891/   333CC : (MACRO)             		align 2
   37891/   333CC :  (MACRO-2)                  cnop 0,2
   37891/   333CC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37892/   333CC :                     Nem_MzFire:	binclude	artnem/mzfire.bin	; MZ fireballs
   37893/   336AA : (MACRO)             		align 2
   37893/   336AA :  (MACRO-2)                  cnop 0,2
   37893/   336AA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37894/   336AA :                     Nem_Lava:	binclude	artnem/mzlava.bin	; MZ lava
   37895/   33FC0 : (MACRO)             		align 2
   37895/   33FC0 :  (MACRO-2)                  cnop 0,2
   37895/   33FC0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37896/   33FC0 :                     Nem_MzBlock:	binclude	artnem/mzblock.bin	; MZ green pushable block
   37897/   34124 : (MACRO)             		align 2
   37897/   34124 :  (MACRO-2)                  cnop 0,2
   37897/   34124 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37898/   34124 :                     Nem_MzUnkBlock:	binclude	artnem/xxxmzblo.bin	; MZ unused background block
   37899/   341AC : (MACRO)             		align 2
   37899/   341AC :  (MACRO-2)                  cnop 0,2
   37899/   341AC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37900/   341AC :                     ; ---------------------------------------------------------------------------
   37901/   341AC :                     ; Compressed graphics - SLZ stuff
   37902/   341AC :                     ; ---------------------------------------------------------------------------
   37903/   341AC :                     Nem_Seesaw:	binclude	artnem/slzseesa.bin	; SLZ seesaw
   37904/   343E8 : (MACRO)             		align 2
   37904/   343E8 :  (MACRO-2)                  cnop 0,2
   37904/   343E8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37905/   343E8 :                     Nem_SlzSpike:	binclude	artnem/slzspike.bin	; SLZ spikeball that sits on a seesaw
   37906/   3452E : (MACRO)             		align 2
   37906/   3452E :  (MACRO-2)                  cnop 0,2
   37906/   3452E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37907/   3452E :                     Nem_Fan:	binclude	artnem/slzfan.bin	; SLZ fan
   37908/   34772 : (MACRO)             		align 2
   37908/   34772 :  (MACRO-2)                  cnop 0,2
   37908/   34772 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37909/   34772 :                     Nem_SlzWall:	binclude	artnem/slzwall.bin	; SLZ smashable wall
   37910/   347D4 : (MACRO)             		align 2
   37910/   347D4 :  (MACRO-2)                  cnop 0,2
   37910/   347D4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37911/   347D4 :                     Nem_Pylon:	binclude	artnem/slzpylon.bin	; SLZ foreground pylon
   37912/   348B6 : (MACRO)             		align 2
   37912/   348B6 :  (MACRO-2)                  cnop 0,2
   37912/   348B6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37913/   348B6 :                     Nem_SlzSwing:	binclude	artnem/slzswing.bin	; SLZ swinging platform
   37914/   34A98 : (MACRO)             		align 2
   37914/   34A98 :  (MACRO-2)                  cnop 0,2
   37914/   34A98 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37915/   34A98 :                     Nem_SlzBlock:	binclude	artnem/slzblock.bin	; SLZ 32x32 block
   37916/   34BA4 : (MACRO)             		align 2
   37916/   34BA4 :  (MACRO-2)                  cnop 0,2
   37916/   34BA4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37917/   34BA4 :                     Nem_SlzCannon:	binclude	artnem/slzcanno.bin	; SLZ fireball launcher cannon
   37918/   34C48 : (MACRO)             		align 2
   37918/   34C48 :  (MACRO-2)                  cnop 0,2
   37918/   34C48 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37919/   34C48 :                     ; ---------------------------------------------------------------------------
   37920/   34C48 :                     ; Compressed graphics - SYZ stuff
   37921/   34C48 :                     ; ---------------------------------------------------------------------------
   37922/   34C48 :                     Nem_Bumper:	binclude	artnem/syzbumpe.bin	; SYZ bumper
   37923/   34DB2 : (MACRO)             		align 2
   37923/   34DB2 :  (MACRO-2)                  cnop 0,2
   37923/   34DB2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37924/   34DB2 :                     Nem_SyzSpike2:	binclude	artnem/syzsspik.bin	; SYZ small spikeball
   37925/   34E14 : (MACRO)             		align 2
   37925/   34E14 :  (MACRO-2)                  cnop 0,2
   37925/   34E14 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37926/   34E14 :                     Nem_LzSwitch:	binclude	artnem/switch.bin	; LZ/SYZ/SBZ switch
   37927/   34EF6 : (MACRO)             		align 2
   37927/   34EF6 :  (MACRO-2)                  cnop 0,2
   37927/   34EF6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37928/   34EF6 :                     Nem_SyzSpike1:	binclude	artnem/syzlspik.bin	; SYZ/SBZ large spikeball
   37929/   35184 : (MACRO)             		align 2
   37929/   35184 :  (MACRO-2)                  cnop 0,2
   37929/   35184 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37930/   35184 :                     ; ---------------------------------------------------------------------------
   37931/   35184 :                     ; Compressed graphics - SBZ stuff
   37932/   35184 :                     ; ---------------------------------------------------------------------------
   37933/   35184 :                     Nem_SbzWheel1:	binclude	artnem/sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
   37934/   351D8 : (MACRO)             		align 2
   37934/   351D8 :  (MACRO-2)                  cnop 0,2
   37934/   351D8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37935/   351D8 :                     Nem_SbzWheel2:	binclude	artnem/sbzwhee2.bin	; SBZ wheel that grabs Sonic
   37936/   35474 : (MACRO)             		align 2
   37936/   35474 :  (MACRO-2)                  cnop 0,2
   37936/   35474 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37937/   35474 :                     Nem_Cutter:	binclude	artnem/sbzcutte.bin	; SBZ pizza cutter
   37938/   35678 : (MACRO)             		align 2
   37938/   35678 :  (MACRO-2)                  cnop 0,2
   37938/   35678 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37939/   35678 :                     Nem_Stomper:	binclude	artnem/sbzstomp.bin	; SBZ stomper
   37940/   35816 : (MACRO)             		align 2
   37940/   35816 :  (MACRO-2)                  cnop 0,2
   37940/   35816 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37941/   35816 :                     Nem_SpinPform:	binclude	artnem/sbzpform.bin	; SBZ spinning platform
   37942/   35B46 : (MACRO)             		align 2
   37942/   35B46 :  (MACRO-2)                  cnop 0,2
   37942/   35B46 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37943/   35B46 :                     Nem_TrapDoor:	binclude	artnem/sbztrapd.bin	; SBZ trapdoor
   37944/   35D24 : (MACRO)             		align 2
   37944/   35D24 :  (MACRO-2)                  cnop 0,2
   37944/   35D24 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37945/   35D24 :                     Nem_SbzFloor:	binclude	artnem/sbzfloor.bin	; SBZ collapsing floor
   37946/   35D7C : (MACRO)             		align 2
   37946/   35D7C :  (MACRO-2)                  cnop 0,2
   37946/   35D7C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37947/   35D7C :                     Nem_Electric:	binclude	artnem/sbzshock.bin	; SBZ electric shock orb
   37948/   35EFC : (MACRO)             		align 2
   37948/   35EFC :  (MACRO-2)                  cnop 0,2
   37948/   35EFC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37949/   35EFC :                     Nem_SbzBlock:	binclude	artnem/sbzvanis.bin	; SBZ vanishing block
   37950/   35FFA : (MACRO)             		align 2
   37950/   35FFA :  (MACRO-2)                  cnop 0,2
   37950/   35FFA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37951/   35FFA :                     Nem_FlamePipe:	binclude	artnem/sbzflame.bin	; SBZ flaming pipe
   37952/   36186 : (MACRO)             		align 2
   37952/   36186 :  (MACRO-2)                  cnop 0,2
   37952/   36186 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37953/   36186 :                     Nem_SbzDoor1:	binclude	artnem/sbzvdoor.bin	; SBZ small vertical door
   37954/   361D6 : (MACRO)             		align 2
   37954/   361D6 :  (MACRO-2)                  cnop 0,2
   37954/   361D6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37955/   361D6 :                     Nem_SlideFloor:	binclude	artnem/sbzslide.bin	; SBZ floor that slides away
   37956/   3622E : (MACRO)             		align 2
   37956/   3622E :  (MACRO-2)                  cnop 0,2
   37956/   3622E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37957/   3622E :                     Nem_SbzDoor2:	binclude	artnem/sbzhdoor.bin	; SBZ large horizontal door
   37958/   3632A : (MACRO)             		align 2
   37958/   3632A :  (MACRO-2)                  cnop 0,2
   37958/   3632A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37959/   3632A :                     Nem_Girder:	binclude	artnem/sbzgirde.bin	; SBZ crushing girder
   37960/   36440 : (MACRO)             		align 2
   37960/   36440 :  (MACRO-2)                  cnop 0,2
   37960/   36440 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37961/   36440 :                     ; ---------------------------------------------------------------------------
   37962/   36440 :                     ; Compressed graphics - enemies
   37963/   36440 :                     ; ---------------------------------------------------------------------------
   37964/   36440 :                     Nem_BallHog:	binclude	artnem/ballhog.bin	; ball hog
   37965/   36800 : (MACRO)             		align 2
   37965/   36800 :  (MACRO-2)                  cnop 0,2
   37965/   36800 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37966/   36800 :                     Nem_Crabmeat:	binclude	artnem/crabmeat.bin	; crabmeat
   37967/   36CEE : (MACRO)             		align 2
   37967/   36CEE :  (MACRO-2)                  cnop 0,2
   37967/   36CEE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37968/   36CEE :                     Nem_Buzz:	binclude	artnem/buzzbomb.bin	; buzz bomber
   37969/   37094 : (MACRO)             		align 2
   37969/   37094 :  (MACRO-2)                  cnop 0,2
   37969/   37094 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37970/   37094 :                     Nem_UnkExplode:	binclude	artnem/xxxexplo.bin	; unused explosion
   37971/   3727C : (MACRO)             		align 2
   37971/   3727C :  (MACRO-2)                  cnop 0,2
   37971/   3727C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37972/   3727C :                     Nem_Burrobot:	binclude	artnem/burrobot.bin	; burrobot
   37973/   37966 : (MACRO)             		align 2
   37973/   37966 :  (MACRO-2)                  cnop 0,2
   37973/   37966 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37974/   37966 :                     Nem_Chopper:	binclude	artnem/chopper.bin	; chopper
   37975/   37BCE : (MACRO)             		align 2
   37975/   37BCE :  (MACRO-2)                  cnop 0,2
   37975/   37BCE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37976/   37BCE :                     Nem_Jaws:	binclude	artnem/jaws.bin		; jaws
   37977/   37E58 : (MACRO)             		align 2
   37977/   37E58 :  (MACRO-2)                  cnop 0,2
   37977/   37E58 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37978/   37E58 :                     Nem_Roller:	binclude	artnem/roller.bin	; roller
   37979/   3837C : (MACRO)             		align 2
   37979/   3837C :  (MACRO-2)                  cnop 0,2
   37979/   3837C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37980/   3837C :                     Nem_Motobug:	binclude	artnem/motobug.bin	; moto bug
   37981/   38606 : (MACRO)             		align 2
   37981/   38606 :  (MACRO-2)                  cnop 0,2
   37981/   38606 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37982/   38606 :                     Nem_Newtron:	binclude	artnem/newtron.bin	; newtron
   37983/   38C24 : (MACRO)             		align 2
   37983/   38C24 :  (MACRO-2)                  cnop 0,2
   37983/   38C24 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37984/   38C24 :                     Nem_Yadrin:	binclude	artnem/yadrin.bin	; yadrin
   37985/   3900C : (MACRO)             		align 2
   37985/   3900C :  (MACRO-2)                  cnop 0,2
   37985/   3900C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37986/   3900C :                     Nem_Basaran:	binclude	artnem/basaran.bin	; basaran
   37987/   39308 : (MACRO)             		align 2
   37987/   39308 :  (MACRO-2)                  cnop 0,2
   37987/   39308 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37988/   39308 :                     Nem_Splats:	binclude	artnem/splats.bin	; splats
   37989/   39550 : (MACRO)             		align 2
   37989/   39550 :  (MACRO-2)                  cnop 0,2
   37989/   39550 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37990/   39550 :                     Nem_Bomb:	binclude	artnem/bomb.bin		; bomb
   37991/   397E8 : (MACRO)             		align 2
   37991/   397E8 :  (MACRO-2)                  cnop 0,2
   37991/   397E8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37992/   397E8 :                     Nem_Orbinaut:	binclude	artnem/orbinaut.bin	; orbinaut
   37993/   399C6 : (MACRO)             		align 2
   37993/   399C6 :  (MACRO-2)                  cnop 0,2
   37993/   399C6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37994/   399C6 :                     Nem_Cater:	binclude	artnem/caterkil.bin	; caterkiller
   37995/   39B54 : (MACRO)             		align 2
   37995/   39B54 :  (MACRO-2)                  cnop 0,2
   37995/   39B54 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   37996/   39B54 :                     ; ---------------------------------------------------------------------------
   37997/   39B54 :                     ; Compressed graphics - various
   37998/   39B54 :                     ; ---------------------------------------------------------------------------
   37999/   39B54 :                     Nem_TitleCard:	binclude	artnem/ttlcards.bin	; title cards
   38000/   3A162 : (MACRO)             		align 2
   38000/   3A162 :  (MACRO-2)                  cnop 0,2
   38000/   3A162 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38001/   3A162 :                     Nem_Hud:	binclude	artnem/hud.bin		; HUD (rings, time, score)
   38002/   3A2D6 : (MACRO)             		align 2
   38002/   3A2D6 :  (MACRO-2)                  cnop 0,2
   38002/   3A2D6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38003/   3A2D6 :                     Nem_Lives:	binclude	artnem/lifeicon.bin	; life counter icon
   38004/   3A3E4 : (MACRO)             		align 2
   38004/   3A3E4 :  (MACRO-2)                  cnop 0,2
   38004/   3A3E4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38005/   3A3E4 :                     Nem_Ring:	binclude	artnem/rings.bin	; rings
   38006/   3A4D8 : (MACRO)             		align 2
   38006/   3A4D8 :  (MACRO-2)                  cnop 0,2
   38006/   3A4D8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38007/   3A4D8 :                     Nem_Monitors:	binclude	artnem/monitors.bin	; monitors
   38008/   3A938 : (MACRO)             		align 2
   38008/   3A938 :  (MACRO-2)                  cnop 0,2
   38008/   3A938 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38009/   3A938 :                     Nem_Explode:	binclude	artnem/explosio.bin	; explosion
   38010/   3AF9E : (MACRO)             		align 2
   38010/   3AF9E :  (MACRO-2)                  cnop 0,2
   38010/   3AF9E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38011/   3AF9E :                     Nem_Points:	binclude	artnem/points.bin	; points from destroyed enemy or object
   38012/   3B04E : (MACRO)             		align 2
   38012/   3B04E :  (MACRO-2)                  cnop 0,2
   38012/   3B04E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38013/   3B04E :                     Nem_GameOver:	binclude	artnem/gameover.bin	; game over / time over
   38014/   3B1E0 : (MACRO)             		align 2
   38014/   3B1E0 :  (MACRO-2)                  cnop 0,2
   38014/   3B1E0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38015/   3B1E0 :                     Nem_HSpring:	binclude	artnem/springh.bin	; horizontal spring
   38016/   3B2E2 : (MACRO)             		align 2
   38016/   3B2E2 :  (MACRO-2)                  cnop 0,2
   38016/   3B2E2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38017/   3B2E2 :                     Nem_VSpring:	binclude	artnem/springv.bin	; vertical spring
   38018/   3B3BE : (MACRO)             		align 2
   38018/   3B3BE :  (MACRO-2)                  cnop 0,2
   38018/   3B3BE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38019/   3B3BE :                     Nem_SignPost:	binclude	artnem/signpost.bin	; end of level signpost
   38020/   3B83A : (MACRO)             		align 2
   38020/   3B83A :  (MACRO-2)                  cnop 0,2
   38020/   3B83A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38021/   3B83A :                     Nem_Lamp:	binclude	artnem/lamppost.bin	; lamppost
   38022/   3B8FA : (MACRO)             		align 2
   38022/   3B8FA :  (MACRO-2)                  cnop 0,2
   38022/   3B8FA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38023/   3B8FA :                     Nem_BigFlash:	binclude	artnem/rngflash.bin	; flash from giant ring
   38024/   3BA6E : (MACRO)             		align 2
   38024/   3BA6E :  (MACRO-2)                  cnop 0,2
   38024/   3BA6E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38025/   3BA6E :                     Nem_Bonus:	binclude	artnem/bonus.bin	; hidden bonuses at end of a level
   38026/   3BD70 : (MACRO)             		align 2
   38026/   3BD70 :  (MACRO-2)                  cnop 0,2
   38026/   3BD70 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38027/   3BD70 :                     ; ---------------------------------------------------------------------------
   38028/   3BD70 :                     ; Compressed graphics - continue screen
   38029/   3BD70 :                     ; ---------------------------------------------------------------------------
   38030/   3BD70 :                     Nem_ContSonic:	binclude	artnem/cntsonic.bin	; Sonic on continue screen
   38031/   3C020 : (MACRO)             		align 2
   38031/   3C020 :  (MACRO-2)                  cnop 0,2
   38031/   3C020 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38032/   3C020 :                     Nem_MiniSonic:	binclude	artnem/cntother.bin	; mini Sonic and text on continue screen
   38033/   3C25A : (MACRO)             		align 2
   38033/   3C25A :  (MACRO-2)                  cnop 0,2
   38033/   3C25A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38034/   3C25A :                     ; ---------------------------------------------------------------------------
   38035/   3C25A :                     ; Compressed graphics - animals
   38036/   3C25A :                     ; ---------------------------------------------------------------------------
   38037/   3C25A :                     Nem_Rabbit:	binclude	artnem/rabbit.bin	; rabbit
   38038/   3C3B2 : (MACRO)             		align 2
   38038/   3C3B2 :  (MACRO-2)                  cnop 0,2
   38038/   3C3B2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38039/   3C3B2 :                     Nem_Chicken:	binclude	artnem/chicken.bin	; chicken
   38040/   3C50E : (MACRO)             		align 2
   38040/   3C50E :  (MACRO-2)                  cnop 0,2
   38040/   3C50E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38041/   3C50E :                     Nem_BlackBird:	binclude	artnem/blackbrd.bin	; blackbird
   38042/   3C68A : (MACRO)             		align 2
   38042/   3C68A :  (MACRO-2)                  cnop 0,2
   38042/   3C68A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38043/   3C68A :                     Nem_Seal:	binclude	artnem/seal.bin		; seal
   38044/   3C7A6 : (MACRO)             		align 2
   38044/   3C7A6 :  (MACRO-2)                  cnop 0,2
   38044/   3C7A6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38045/   3C7A6 :                     Nem_Pig:	binclude	artnem/pig.bin		; pig
   38046/   3C8DC : (MACRO)             		align 2
   38046/   3C8DC :  (MACRO-2)                  cnop 0,2
   38046/   3C8DC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38047/   3C8DC :                     Nem_Flicky:	binclude	artnem/flicky.bin	; flicky
   38048/   3CA16 : (MACRO)             		align 2
   38048/   3CA16 :  (MACRO-2)                  cnop 0,2
   38048/   3CA16 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38049/   3CA16 :                     Nem_Squirrel:	binclude	artnem/squirrel.bin	; squirrel
   38050/   3CB72 : (MACRO)             		align 2
   38050/   3CB72 :  (MACRO-2)                  cnop 0,2
   38050/   3CB72 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38051/   3CB72 :                     ; ---------------------------------------------------------------------------
   38052/   3CB72 :                     ; Compressed graphics - primary patterns and block mappings
   38053/   3CB72 :                     ; ---------------------------------------------------------------------------
   38054/   3CB72 :                     Blk16_GHZ:	binclude	map16/ghz.bin
   38055/   3D486 : (MACRO)             		align 2
   38055/   3D486 :  (MACRO-2)                  cnop 0,2
   38055/   3D486 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38056/   3D486 :                     Nem_GHZ_1st:	binclude	artnem/8x8ghz1.bin	; GHZ primary patterns
   38057/   3EA98 : (MACRO)             		align 2
   38057/   3EA98 :  (MACRO-2)                  cnop 0,2
   38057/   3EA98 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38058/   3EA98 :                     Nem_GHZ_2nd:	binclude	artnem/8x8ghz2.bin	; GHZ secondary patterns
   38059/   3FE2C : (MACRO)             		align 2
   38059/   3FE2C :  (MACRO-2)                  cnop 0,2
   38059/   3FE2C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38060/   3FE2C :                     Blk256_GHZ:	binclude	map256/ghz.bin
   38061/   41FEC : (MACRO)             		align 2
   38061/   41FEC :  (MACRO-2)                  cnop 0,2
   38061/   41FEC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38062/   41FEC :                     Blk16_LZ:	binclude	map16/lz.bin
   38063/   42316 : (MACRO)             		align 2
   38063/   42316 :  (MACRO-2)                  cnop 0,2
   38063/   42316 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38064/   42316 :                     Nem_LZ:		binclude	artnem/8x8lz.bin	; LZ primary patterns
   38065/   43E5E : (MACRO)             		align 2
   38065/   43E5E :  (MACRO-2)                  cnop 0,2
   38065/   43E5E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38066/   43E5E :                     Blk256_LZ:	binclude	map256/lz.bin
   38067/   4664E : (MACRO)             		align 2
   38067/   4664E :  (MACRO-2)                  cnop 0,2
   38067/   4664E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38068/   4664E :                     Blk16_MZ:	binclude	map16/mz.bin
   38069/   46E58 : (MACRO)             		align 2
   38069/   46E58 :  (MACRO-2)                  cnop 0,2
   38069/   46E58 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38070/   46E58 :                     Nem_MZ:		binclude	artnem/8x8mz.bin	; MZ primary patterns
   38071/   4969C : (MACRO)             		align 2
   38071/   4969C :  (MACRO-2)                  cnop 0,2
   38071/   4969C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38072/   4969C :                     Blk256_MZ:	binclude	map256/mz.bin
   38073/   4AE5C : (MACRO)             		align 2
   38073/   4AE5C :  (MACRO-2)                  cnop 0,2
   38073/   4AE5C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38074/   4AE5C :                     Blk16_SLZ:	binclude	map16/slz.bin
   38075/   4B640 : (MACRO)             		align 2
   38075/   4B640 :  (MACRO-2)                  cnop 0,2
   38075/   4B640 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38076/   4B640 :                     Nem_SLZ:	binclude	artnem/8x8slz.bin	; SLZ primary patterns
   38077/   4F194 : (MACRO)             		align 2
   38077/   4F194 :  (MACRO-2)                  cnop 0,2
   38077/   4F194 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38078/   4F194 :                     Blk256_SLZ:	binclude	map256/slz.bin
   38079/   515C4 : (MACRO)             		align 2
   38079/   515C4 :  (MACRO-2)                  cnop 0,2
   38079/   515C4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38080/   515C4 :                     Blk16_SYZ:	binclude	map16/syz.bin
   38081/   51F32 : (MACRO)             		align 2
   38081/   51F32 :  (MACRO-2)                  cnop 0,2
   38081/   51F32 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38082/   51F32 :                     Nem_SYZ:	binclude	artnem/8x8syz.bin	; SYZ primary patterns
   38083/   5565E : (MACRO)             		align 2
   38083/   5565E :  (MACRO-2)                  cnop 0,2
   38083/   5565E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38084/   5565E :                     Blk256_SYZ:	binclude	map256/syz.bin
   38085/   57A0E : (MACRO)             		align 2
   38085/   57A0E :  (MACRO-2)                  cnop 0,2
   38085/   57A0E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38086/   57A0E :                     Blk16_SBZ:	binclude	map16/sbz.bin
   38087/   588A8 : (MACRO)             		align 2
   38087/   588A8 :  (MACRO-2)                  cnop 0,2
   38087/   588A8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38088/   588A8 :                     Nem_SBZ:	binclude	artnem/8x8sbz.bin	; SBZ primary patterns
   38089/   5B054 : (MACRO)             		align 2
   38089/   5B054 :  (MACRO-2)                  cnop 0,2
   38089/   5B054 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38090/   5B054 :                     Blk256_SBZ:	binclude	map256/sbz.bin
   38091/   5DAA4 : (MACRO)             		align 2
   38091/   5DAA4 :  (MACRO-2)                  cnop 0,2
   38091/   5DAA4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38092/   5DAA4 :                     ; ---------------------------------------------------------------------------
   38093/   5DAA4 :                     ; Compressed graphics - bosses and ending sequence
   38094/   5DAA4 :                     ; ---------------------------------------------------------------------------
   38095/   5DAA4 :                     Nem_Eggman:	binclude	artnem/bossmain.bin	; boss main patterns
   38096/   5E308 : (MACRO)             		align 2
   38096/   5E308 :  (MACRO-2)                  cnop 0,2
   38096/   5E308 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38097/   5E308 :                     Nem_Weapons:	binclude	artnem/bossxtra.bin	; boss add-ons and weapons
   38098/   5E5F2 : (MACRO)             		align 2
   38098/   5E5F2 :  (MACRO-2)                  cnop 0,2
   38098/   5E5F2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38099/   5E5F2 :                     Nem_Prison:	binclude	artnem/prison.bin	; prison capsule
   38100/   5EE76 : (MACRO)             		align 2
   38100/   5EE76 :  (MACRO-2)                  cnop 0,2
   38100/   5EE76 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38101/   5EE76 :                     Nem_Sbz2Eggman:	binclude	artnem/sbz2boss.bin	; Eggman in SBZ2 and FZ
   38102/   5F6A2 : (MACRO)             		align 2
   38102/   5F6A2 :  (MACRO-2)                  cnop 0,2
   38102/   5F6A2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38103/   5F6A2 :                     Nem_FzBoss:	binclude	artnem/fzboss.bin	; FZ boss
   38104/   5FE0A : (MACRO)             		align 2
   38104/   5FE0A :  (MACRO-2)                  cnop 0,2
   38104/   5FE0A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38105/   5FE0A :                     Nem_FzEggman:	binclude	artnem/fzboss2.bin	; Eggman after the FZ boss
   38106/   6038A : (MACRO)             		align 2
   38106/   6038A :  (MACRO-2)                  cnop 0,2
   38106/   6038A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38107/   6038A :                     Nem_Exhaust:	binclude	artnem/bossflam.bin	; boss exhaust flame
   38108/   604AA : (MACRO)             		align 2
   38108/   604AA :  (MACRO-2)                  cnop 0,2
   38108/   604AA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38109/   604AA :                     Nem_EndEm:	binclude	artnem/endemera.bin	; ending sequence chaos emeralds
   38110/   606A8 : (MACRO)             		align 2
   38110/   606A8 :  (MACRO-2)                  cnop 0,2
   38110/   606A8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38111/   606A8 :                     Nem_EndSonic:	binclude	artnem/endsonic.bin	; ending sequence Sonic
   38112/   61886 : (MACRO)             		align 2
   38112/   61886 :  (MACRO-2)                  cnop 0,2
   38112/   61886 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38113/   61886 :                     Nem_TryAgain:	binclude	artnem/tryagain.bin	; ending "try again" screen
   38114/   621CA : (MACRO)             		align 2
   38114/   621CA :  (MACRO-2)                  cnop 0,2
   38114/   621CA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38115/   621CA :                     Nem_EndEggman:	binclude	artnem/xxxend.bin	; unused boss sequence on ending
   38116/   625A0 : (MACRO)             		align 2
   38116/   625A0 :  (MACRO-2)                  cnop 0,2
   38116/   625A0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38117/   625A0 :                     Kos_EndFlowers:	binclude	artkos/flowers.bin	; ending sequence animated flowers
   38118/   62B30 : (MACRO)             		align 2
   38118/   62B30 :  (MACRO-2)                  cnop 0,2
   38118/   62B30 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38119/   62B30 :                     Nem_EndFlower:	binclude	artnem/endflowe.bin	; ending sequence flowers
   38120/   62DB8 : (MACRO)             		align 2
   38120/   62DB8 :  (MACRO-2)                  cnop 0,2
   38120/   62DB8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38121/   62DB8 :                     Nem_CreditText:	binclude	artnem/credits.bin	; credits alphabet
   38122/   633B6 : (MACRO)             		align 2
   38122/   633B6 :  (MACRO-2)                  cnop 0,2
   38122/   633B6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38123/   633B6 :                     Nem_EndStH:	binclude	artnem/endtext.bin	; ending sequence "Sonic the Hedgehog" text
   38124/   6363E : (MACRO)             		align 2
   38124/   6363E :  (MACRO-2)                  cnop 0,2
   38124/   6363E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38125/   6363E :                     		binclude	misc/padding2.bin
   38126/   63742 : (MACRO)             		align 2
   38126/   63742 :  (MACRO-2)                  cnop 0,2
   38126/   63742 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38127/   63742 :                     ; ---------------------------------------------------------------------------
   38128/   63742 :                     ; Collision data
   38129/   63742 :                     ; ---------------------------------------------------------------------------
   38130/   63742 :                     AngleMap:	binclude	collide/anglemap.bin	; floor angle map
   38131/   63842 : (MACRO)             		align 2
   38131/   63842 :  (MACRO-2)                  cnop 0,2
   38131/   63842 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38132/   63842 :                     CollArray1:	binclude	collide/carray_n.bin	; normal collision array
   38133/   64842 : (MACRO)             		align 2
   38133/   64842 :  (MACRO-2)                  cnop 0,2
   38133/   64842 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38134/   64842 :                     CollArray2:	binclude	collide/carray_r.bin	; rotated collision array
   38135/   65842 : (MACRO)             		align 2
   38135/   65842 :  (MACRO-2)                  cnop 0,2
   38135/   65842 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38136/   65842 :                     Col_GHZ:	binclude	collide/ghz.bin		; GHZ index
   38137/   659F9 : (MACRO)             		align 2
   38137/   659F9 :  (MACRO-2)                  cnop 0,2
   38137/   659F9 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38137/   659F9 : =$44                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
   38137/   659FA :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   38138/   659FA :                     Col_LZ:		binclude	collide/lz.bin		; LZ index
   38139/   65AC2 : (MACRO)             		align 2
   38139/   65AC2 :  (MACRO-2)                  cnop 0,2
   38139/   65AC2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38140/   65AC2 :                     Col_MZ:		binclude	collide/mz.bin		; MZ index
   38141/   65C52 : (MACRO)             		align 2
   38141/   65C52 :  (MACRO-2)                  cnop 0,2
   38141/   65C52 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38142/   65C52 :                     Col_SLZ:	binclude	collide/slz.bin		; SLZ index
   38143/   65E46 : (MACRO)             		align 2
   38143/   65E46 :  (MACRO-2)                  cnop 0,2
   38143/   65E46 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38144/   65E46 :                     Col_SYZ:	binclude	collide/syz.bin		; SYZ index
   38145/   6603A : (MACRO)             		align 2
   38145/   6603A :  (MACRO-2)                  cnop 0,2
   38145/   6603A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38146/   6603A :                     Col_SBZ:	binclude	collide/sbz.bin		; SBZ index
   38147/   66292 : (MACRO)             		align 2
   38147/   66292 :  (MACRO-2)                  cnop 0,2
   38147/   66292 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38148/   66292 :                     ; ---------------------------------------------------------------------------
   38149/   66292 :                     ; Special layouts
   38150/   66292 :                     ; ---------------------------------------------------------------------------
   38151/   66292 :                     SS_1:		binclude	sslayout/1.bin
   38152/   6650C : (MACRO)             		align 2
   38152/   6650C :  (MACRO-2)                  cnop 0,2
   38152/   6650C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38153/   6650C :                     SS_2:		binclude	sslayout/2.bin
   38154/   6691E : (MACRO)             		align 2
   38154/   6691E :  (MACRO-2)                  cnop 0,2
   38154/   6691E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38155/   6691E :                     SS_3:		binclude	sslayout/3.bin
   38156/   66C7A : (MACRO)             		align 2
   38156/   66C7A :  (MACRO-2)                  cnop 0,2
   38156/   66C7A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38157/   66C7A :                     SS_4:		binclude	sslayout/4.bin
   38158/   67154 : (MACRO)             		align 2
   38158/   67154 :  (MACRO-2)                  cnop 0,2
   38158/   67154 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38159/   67154 :                     SS_5:		binclude	sslayout/5.bin
   38160/   67626 : (MACRO)             		align 2
   38160/   67626 :  (MACRO-2)                  cnop 0,2
   38160/   67626 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38161/   67626 :                     SS_6:		binclude	sslayout/6.bin
   38162/   67936 : (MACRO)             		align 2
   38162/   67936 :  (MACRO-2)                  cnop 0,2
   38162/   67936 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38163/   67936 :                     ; ---------------------------------------------------------------------------
   38164/   67936 :                     ; Animated uncompressed graphics
   38165/   67936 :                     ; ---------------------------------------------------------------------------
   38166/   67936 :                     Art_GhzWater:	binclude	artunc/ghzwater.bin	; GHZ waterfall
   38167/   67B36 : (MACRO)             		align 2
   38167/   67B36 :  (MACRO-2)                  cnop 0,2
   38167/   67B36 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38168/   67B36 :                     Art_GhzFlower1:	binclude	artunc/ghzflowl.bin	; GHZ large flower
   38169/   67F36 : (MACRO)             		align 2
   38169/   67F36 :  (MACRO-2)                  cnop 0,2
   38169/   67F36 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38170/   67F36 :                     Art_GhzFlower2:	binclude	artunc/ghzflows.bin	; GHZ small flower
   38171/   683B6 : (MACRO)             		align 2
   38171/   683B6 :  (MACRO-2)                  cnop 0,2
   38171/   683B6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38172/   683B6 :                     Art_MzLava1:	binclude	artunc/mzlava1.bin	; MZ lava surface
   38173/   686B6 : (MACRO)             		align 2
   38173/   686B6 :  (MACRO-2)                  cnop 0,2
   38173/   686B6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38174/   686B6 :                     Art_MzLava2:	binclude	artunc/mzlava2.bin	; MZ lava
   38175/   68CB6 : (MACRO)             		align 2
   38175/   68CB6 :  (MACRO-2)                  cnop 0,2
   38175/   68CB6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38176/   68CB6 :                     Art_MzTorch:	binclude	artunc/mztorch.bin	; MZ torch in background
   38177/   68FB6 : (MACRO)             		align 2
   38177/   68FB6 :  (MACRO-2)                  cnop 0,2
   38177/   68FB6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38178/   68FB6 :                     Art_SbzSmoke:	binclude	artunc/sbzsmoke.bin	; SBZ smoke in background
   38179/   69A36 : (MACRO)             		align 2
   38179/   69A36 :  (MACRO-2)                  cnop 0,2
   38179/   69A36 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38180/   69A36 :                     
   38181/   69A36 :                     ; ---------------------------------------------------------------------------
   38182/   69A36 :                     ; Level	layout index
   38183/   69A36 :                     ; ---------------------------------------------------------------------------
   38184/   69A36 : 00A8 038C 019A      Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
   38185/   69A3C : 019E 038C 0266      		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
   38186/   69A42 : 026A 038C 03AE      		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
   38187/   69A48 : 03B2 03B2 03B2      		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
   38188/   69A4E : 03B6 04B8 05BA      		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
   38189/   69A54 : 05BE 04B8 0658      		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
   38190/   69A5A : 065C 04B8 0776      		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
   38191/   69A60 : 077A 04B8 0834      		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
   38192/   69A66 : 0838 08D6 0838      		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
   38193/   69A6C : 0950 09F4 0A86      		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
   38194/   69A72 : 0A8A 0B6C 0C10      		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
   38195/   69A78 : 0C14 0C14 0C14      		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
   38196/   69A7E : 0C18 0D2A 0FAE      		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
   38197/   69A84 : 0DA4 0D2A 0FAE      		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
   38198/   69A8A : 0E94 0D2A 0FAE      		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
   38199/   69A90 : 0FAE 0FAE 0FAE      		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
   38200/   69A96 : 0FB2 106E 10A8      		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
   38201/   69A9C : 10AC 106E 11B0      		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
   38202/   69AA2 : 11B4 106E 130E      		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
   38203/   69AA8 : 1312 1312 1312      		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
   38204/   69AAE : 1316 1438 1438      		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
   38205/   69AB4 : 1476 15B8 15B8      		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
   38206/   69ABA : 1476 15B8 1722      		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
   38207/   69AC0 : 1726 1726 1726      		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
   38208/   69AC6 : 172A 038C 175A      		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
   38209/   69ACC : 172A 038C 175A      		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
   38210/   69AD2 : 175A 175A 175A      		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
   38211/   69AD8 : 175A 175A 175A      		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
   38212/   69ADE :                     
   38213/   69ADE :                     Level_GHZ1:	binclude	levels/ghz1.bin
   38214/   69BD0 : (MACRO)             		align 2
   38214/   69BD0 :  (MACRO-2)                  cnop 0,2
   38214/   69BD0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38215/   69BD0 : 0000 0000           byte_68D70:	dc.b 0,	0, 0, 0
   38216/   69BD4 :                     Level_GHZ2:	binclude	levels/ghz2.bin
   38217/   69C9C : (MACRO)             		align 2
   38217/   69C9C :  (MACRO-2)                  cnop 0,2
   38217/   69C9C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38218/   69C9C : 0000 0000           byte_68E3C:	dc.b 0,	0, 0, 0
   38219/   69CA0 :                     Level_GHZ3:	binclude	levels/ghz3.bin
   38220/   69DC2 : (MACRO)             		align 2
   38220/   69DC2 :  (MACRO-2)                  cnop 0,2
   38220/   69DC2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38221/   69DC2 :                     Level_GHZbg:	binclude	levels/ghzbg.bin
   38222/   69DE4 : (MACRO)             		align 2
   38222/   69DE4 :  (MACRO-2)                  cnop 0,2
   38222/   69DE4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38223/   69DE4 : 0000 0000           byte_68F84:	dc.b 0,	0, 0, 0
   38224/   69DE8 : 0000 0000           byte_68F88:	dc.b 0,	0, 0, 0
   38225/   69DEC :                     
   38226/   69DEC :                     Level_LZ1:	binclude	levels/lz1.bin
   38227/   69EEE : (MACRO)             		align 2
   38227/   69EEE :  (MACRO-2)                  cnop 0,2
   38227/   69EEE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38228/   69EEE :                     Level_LZbg:	binclude	levels/lzbg.bin
   38229/   69FF0 : (MACRO)             		align 2
   38229/   69FF0 :  (MACRO-2)                  cnop 0,2
   38229/   69FF0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38230/   69FF0 : 0000 0000           byte_69190:	dc.b 0,	0, 0, 0
   38231/   69FF4 :                     Level_LZ2:	binclude	levels/lz2.bin
   38232/   6A08E : (MACRO)             		align 2
   38232/   6A08E :  (MACRO-2)                  cnop 0,2
   38232/   6A08E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38233/   6A08E : 0000 0000           byte_6922E:	dc.b 0,	0, 0, 0
   38234/   6A092 :                     Level_LZ3:	binclude	levels/lz3.bin
   38235/   6A1AC : (MACRO)             		align 2
   38235/   6A1AC :  (MACRO-2)                  cnop 0,2
   38235/   6A1AC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38236/   6A1AC : 0000 0000           byte_6934C:	dc.b 0,	0, 0, 0
   38237/   6A1B0 :                     Level_SBZ3:	binclude	levels/sbz3.bin
   38238/   6A26A : (MACRO)             		align 2
   38238/   6A26A :  (MACRO-2)                  cnop 0,2
   38238/   6A26A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38239/   6A26A : 0000 0000           byte_6940A:	dc.b 0,	0, 0, 0
   38240/   6A26E :                     
   38241/   6A26E :                     Level_MZ1:	binclude	levels/mz1.bin
   38242/   6A30C : (MACRO)             		align 2
   38242/   6A30C :  (MACRO-2)                  cnop 0,2
   38242/   6A30C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38243/   6A30C :                     Level_MZ1bg:	binclude	levels/mz1bg.bin
   38244/   6A386 : (MACRO)             		align 2
   38244/   6A386 :  (MACRO-2)                  cnop 0,2
   38244/   6A386 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38245/   6A386 :                     Level_MZ2:	binclude	levels/mz2.bin
   38246/   6A42A : (MACRO)             		align 2
   38246/   6A42A :  (MACRO-2)                  cnop 0,2
   38246/   6A42A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38247/   6A42A :                     Level_MZ2bg:	binclude	levels/mz2bg.bin
   38248/   6A4BC : (MACRO)             		align 2
   38248/   6A4BC :  (MACRO-2)                  cnop 0,2
   38248/   6A4BC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38249/   6A4BC : 0000 0000           byte_6965C:	dc.b 0,	0, 0, 0
   38250/   6A4C0 :                     Level_MZ3:	binclude	levels/mz3.bin
   38251/   6A5A2 : (MACRO)             		align 2
   38251/   6A5A2 :  (MACRO-2)                  cnop 0,2
   38251/   6A5A2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38252/   6A5A2 :                     Level_MZ3bg:	binclude	levels/mz3bg.bin
   38253/   6A646 : (MACRO)             		align 2
   38253/   6A646 :  (MACRO-2)                  cnop 0,2
   38253/   6A646 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38254/   6A646 : 0000 0000           byte_697E6:	dc.b 0,	0, 0, 0
   38255/   6A64A : 0000 0000           byte_697EA:	dc.b 0,	0, 0, 0
   38256/   6A64E :                     
   38257/   6A64E :                     Level_SLZ1:	binclude	levels/slz1.bin
   38258/   6A760 : (MACRO)             		align 2
   38258/   6A760 :  (MACRO-2)                  cnop 0,2
   38258/   6A760 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38259/   6A760 :                     Level_SLZbg:	binclude	levels/slzbg.bin
   38260/   6A7DA : (MACRO)             		align 2
   38260/   6A7DA :  (MACRO-2)                  cnop 0,2
   38260/   6A7DA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38261/   6A7DA :                     Level_SLZ2:	binclude	levels/slz2.bin
   38262/   6A8CA : (MACRO)             		align 2
   38262/   6A8CA :  (MACRO-2)                  cnop 0,2
   38262/   6A8CA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38263/   6A8CA :                     Level_SLZ3:	binclude	levels/slz3.bin
   38264/   6A9E4 : (MACRO)             		align 2
   38264/   6A9E4 :  (MACRO-2)                  cnop 0,2
   38264/   6A9E4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38265/   6A9E4 : 0000 0000           byte_69B84:	dc.b 0,	0, 0, 0
   38266/   6A9E8 :                     
   38267/   6A9E8 :                     Level_SYZ1:	binclude	levels/syz1.bin
   38268/   6AAA4 : (MACRO)             		align 2
   38268/   6AAA4 :  (MACRO-2)                  cnop 0,2
   38268/   6AAA4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38269/   6AAA4 :                     Level_SYZbg:	binclude	levels/syzbg.bin
   38270/   6AADE : (MACRO)             		align 2
   38270/   6AADE :  (MACRO-2)                  cnop 0,2
   38270/   6AADE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38271/   6AADE : 0000 0000           byte_69C7E:	dc.b 0,	0, 0, 0
   38272/   6AAE2 :                     Level_SYZ2:	binclude	levels/syz2.bin
   38273/   6ABE6 : (MACRO)             		align 2
   38273/   6ABE6 :  (MACRO-2)                  cnop 0,2
   38273/   6ABE6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38274/   6ABE6 : 0000 0000           byte_69D86:	dc.b 0,	0, 0, 0
   38275/   6ABEA :                     Level_SYZ3:	binclude	levels/syz3.bin
   38276/   6AD44 : (MACRO)             		align 2
   38276/   6AD44 :  (MACRO-2)                  cnop 0,2
   38276/   6AD44 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38277/   6AD44 : 0000 0000           byte_69EE4:	dc.b 0,	0, 0, 0
   38278/   6AD48 : 0000 0000           byte_69EE8:	dc.b 0,	0, 0, 0
   38279/   6AD4C :                     
   38280/   6AD4C :                     Level_SBZ1:	binclude	levels/sbz1.bin
   38281/   6AE6E : (MACRO)             		align 2
   38281/   6AE6E :  (MACRO-2)                  cnop 0,2
   38281/   6AE6E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38282/   6AE6E :                     Level_SBZ1bg:	binclude	levels/sbz1bg.bin
   38283/   6AEAC : (MACRO)             		align 2
   38283/   6AEAC :  (MACRO-2)                  cnop 0,2
   38283/   6AEAC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38284/   6AEAC :                     Level_SBZ2:	binclude	levels/sbz2.bin
   38285/   6AFEE : (MACRO)             		align 2
   38285/   6AFEE :  (MACRO-2)                  cnop 0,2
   38285/   6AFEE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38286/   6AFEE :                     Level_SBZ2bg:	binclude	levels/sbz2bg.bin
   38287/   6B158 : (MACRO)             		align 2
   38287/   6B158 :  (MACRO-2)                  cnop 0,2
   38287/   6B158 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38288/   6B158 : 0000 0000           byte_6A2F8:	dc.b 0,	0, 0, 0
   38289/   6B15C : 0000 0000           byte_6A2FC:	dc.b 0,	0, 0, 0
   38290/   6B160 :                     Level_End:	binclude	levels/ending.bin
   38291/   6B18F : (MACRO)             		align 2
   38291/   6B18F :  (MACRO-2)                  cnop 0,2
   38291/   6B18F :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38291/   6B18F : =$45                paddingSoFar    set paddingSoFar + (*-1+(2)-((*-1+(-(0)))#(2))) - *
   38291/   6B190 :                                             !org (*-1+(2)-((*-1+(-(0)))#(2)))
   38292/   6B190 : 0000 0000           byte_6A320:	dc.b 0,	0, 0, 0
   38293/   6B194 :                     
   38294/   6B194 :                     ; ---------------------------------------------------------------------------
   38295/   6B194 :                     ; Animated uncompressed giant ring graphics
   38296/   6B194 :                     ; ---------------------------------------------------------------------------
   38297/   6B194 :                     Art_BigRing:	binclude	artunc/bigring.bin
   38298/   6BDD4 : (MACRO)             		align 2
   38298/   6BDD4 :  (MACRO-2)                  cnop 0,2
   38298/   6BDD4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38299/   6BDD4 :                     
   38300/   6BDD4 :                     		binclude	misc/padding3.bin
   38301/   6BE70 : (MACRO)             		align 2
   38301/   6BE70 :  (MACRO-2)                  cnop 0,2
   38301/   6BE70 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38302/   6BE70 :                     
   38303/   6BE70 :                     ; ---------------------------------------------------------------------------
   38304/   6BE70 :                     ; Sprite locations index
   38305/   6BE70 :                     ; ---------------------------------------------------------------------------
   38306/   6BE70 : 0096 628E           ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38307/   6BE74 : 04CE 628E           		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38308/   6BE78 : 0A8C 628E           		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38309/   6BE7C : 0096 628E           		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38310/   6BE80 : 1146 628E           		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38311/   6BE84 : 15B4 628E           		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38312/   6BE88 : 18F6 628E           		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38313/   6BE8C : 1ED8 628E           		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38314/   6BE90 : 24C0 628E           		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38315/   6BE94 : 282C 628E           		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38316/   6BE98 : 2CD6 628E           		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38317/   6BE9C : 24C0 628E           		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38318/   6BEA0 : 324C 628E           		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38319/   6BEA4 : 378C 628E           		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38320/   6BEA8 : 3BF4 628E           		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38321/   6BEAC : 324C 628E           		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38322/   6BEB0 : 41D6 628E           		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38323/   6BEB4 : 4662 628E           		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38324/   6BEB8 : 4BCC 628E           		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38325/   6BEBC : 41D6 628E           		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38326/   6BEC0 : 51D2 628E           		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38327/   6BEC4 : 5910 628E           		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38328/   6BEC8 : 5FEE 628E           		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38329/   6BECC : 51D2 628E           		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38330/   6BED0 : 6132 628E           		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38331/   6BED4 : 6132 628E           		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38332/   6BED8 : 6132 628E           		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38333/   6BEDC : 6132 628E           		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38334/   6BEE0 : 2370 23A2           		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
   38335/   6BEE4 : 23D4 2406           		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
   38336/   6BEE8 : 2438 2482           		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
   38337/   6BEEC : 2370 23A2           		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
   38338/   6BEF0 : 6000 6032           		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
   38339/   6BEF4 : 6064 6096           		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
   38340/   6BEF8 : 60C8 60FA           		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
   38341/   6BEFC : 6000 6032           		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
   38342/   6BF00 : FFFF 0000 0000      		dc.b $FF, $FF, 0, 0, 0,	0
   38343/   6BF06 :                     ObjPos_GHZ1:	binclude	objpos/ghz1.bin
   38344/   6C33E : (MACRO)             		align 2
   38344/   6C33E :  (MACRO-2)                  cnop 0,2
   38344/   6C33E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38345/   6C33E :                     ObjPos_GHZ2:	binclude	objpos/ghz2.bin
   38346/   6C8FC : (MACRO)             		align 2
   38346/   6C8FC :  (MACRO-2)                  cnop 0,2
   38346/   6C8FC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38347/   6C8FC :                     ObjPos_GHZ3:	binclude	objpos/ghz3.bin
   38348/   6CFB6 : (MACRO)             		align 2
   38348/   6CFB6 :  (MACRO-2)                  cnop 0,2
   38348/   6CFB6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38349/   6CFB6 :                     ObjPos_LZ1:	binclude	objpos/lz1.bin
   38350/   6D424 : (MACRO)             		align 2
   38350/   6D424 :  (MACRO-2)                  cnop 0,2
   38350/   6D424 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38351/   6D424 :                     ObjPos_LZ2:	binclude	objpos/lz2.bin
   38352/   6D766 : (MACRO)             		align 2
   38352/   6D766 :  (MACRO-2)                  cnop 0,2
   38352/   6D766 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38353/   6D766 :                     ObjPos_LZ3:	binclude	objpos/lz3.bin
   38354/   6DD48 : (MACRO)             		align 2
   38354/   6DD48 :  (MACRO-2)                  cnop 0,2
   38354/   6DD48 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38355/   6DD48 :                     ObjPos_SBZ3:	binclude	objpos/sbz3.bin
   38356/   6E1E0 : (MACRO)             		align 2
   38356/   6E1E0 :  (MACRO-2)                  cnop 0,2
   38356/   6E1E0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38357/   6E1E0 :                     ObjPos_LZ1pf1:	binclude	objpos/lz1pf1.bin
   38358/   6E212 : (MACRO)             		align 2
   38358/   6E212 :  (MACRO-2)                  cnop 0,2
   38358/   6E212 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38359/   6E212 :                     ObjPos_LZ1pf2:	binclude	objpos/lz1pf2.bin
   38360/   6E244 : (MACRO)             		align 2
   38360/   6E244 :  (MACRO-2)                  cnop 0,2
   38360/   6E244 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38361/   6E244 :                     ObjPos_LZ2pf1:	binclude	objpos/lz2pf1.bin
   38362/   6E276 : (MACRO)             		align 2
   38362/   6E276 :  (MACRO-2)                  cnop 0,2
   38362/   6E276 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38363/   6E276 :                     ObjPos_LZ2pf2:	binclude	objpos/lz2pf2.bin
   38364/   6E2A8 : (MACRO)             		align 2
   38364/   6E2A8 :  (MACRO-2)                  cnop 0,2
   38364/   6E2A8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38365/   6E2A8 :                     ObjPos_LZ3pf1:	binclude	objpos/lz3pf1.bin
   38366/   6E2F2 : (MACRO)             		align 2
   38366/   6E2F2 :  (MACRO-2)                  cnop 0,2
   38366/   6E2F2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38367/   6E2F2 :                     ObjPos_LZ3pf2:	binclude	objpos/lz3pf2.bin
   38368/   6E330 : (MACRO)             		align 2
   38368/   6E330 :  (MACRO-2)                  cnop 0,2
   38368/   6E330 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38369/   6E330 :                     ObjPos_MZ1:	binclude	objpos/mz1.bin
   38370/   6E69C : (MACRO)             		align 2
   38370/   6E69C :  (MACRO-2)                  cnop 0,2
   38370/   6E69C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38371/   6E69C :                     ObjPos_MZ2:	binclude	objpos/mz2.bin
   38372/   6EB46 : (MACRO)             		align 2
   38372/   6EB46 :  (MACRO-2)                  cnop 0,2
   38372/   6EB46 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38373/   6EB46 :                     ObjPos_MZ3:	binclude	objpos/mz3.bin
   38374/   6F0BC : (MACRO)             		align 2
   38374/   6F0BC :  (MACRO-2)                  cnop 0,2
   38374/   6F0BC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38375/   6F0BC :                     ObjPos_SLZ1:	binclude	objpos/slz1.bin
   38376/   6F5FC : (MACRO)             		align 2
   38376/   6F5FC :  (MACRO-2)                  cnop 0,2
   38376/   6F5FC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38377/   6F5FC :                     ObjPos_SLZ2:	binclude	objpos/slz2.bin
   38378/   6FA64 : (MACRO)             		align 2
   38378/   6FA64 :  (MACRO-2)                  cnop 0,2
   38378/   6FA64 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38379/   6FA64 :                     ObjPos_SLZ3:	binclude	objpos/slz3.bin
   38380/   70046 : (MACRO)             		align 2
   38380/   70046 :  (MACRO-2)                  cnop 0,2
   38380/   70046 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38381/   70046 :                     ObjPos_SYZ1:	binclude	objpos/syz1.bin
   38382/   704D2 : (MACRO)             		align 2
   38382/   704D2 :  (MACRO-2)                  cnop 0,2
   38382/   704D2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38383/   704D2 :                     ObjPos_SYZ2:	binclude	objpos/syz2.bin
   38384/   70A3C : (MACRO)             		align 2
   38384/   70A3C :  (MACRO-2)                  cnop 0,2
   38384/   70A3C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38385/   70A3C :                     ObjPos_SYZ3:	binclude	objpos/syz3.bin
   38386/   71042 : (MACRO)             		align 2
   38386/   71042 :  (MACRO-2)                  cnop 0,2
   38386/   71042 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38387/   71042 :                     ObjPos_SBZ1:	binclude	objpos/sbz1.bin
   38388/   71780 : (MACRO)             		align 2
   38388/   71780 :  (MACRO-2)                  cnop 0,2
   38388/   71780 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38389/   71780 :                     ObjPos_SBZ2:	binclude	objpos/sbz2.bin
   38390/   71E5E : (MACRO)             		align 2
   38390/   71E5E :  (MACRO-2)                  cnop 0,2
   38390/   71E5E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38391/   71E5E :                     ObjPos_FZ:	binclude	objpos/fz.bin
   38392/   71E70 : (MACRO)             		align 2
   38392/   71E70 :  (MACRO-2)                  cnop 0,2
   38392/   71E70 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38393/   71E70 :                     ObjPos_SBZ1pf1:	binclude	objpos/sbz1pf1.bin
   38394/   71EA2 : (MACRO)             		align 2
   38394/   71EA2 :  (MACRO-2)                  cnop 0,2
   38394/   71EA2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38395/   71EA2 :                     ObjPos_SBZ1pf2:	binclude	objpos/sbz1pf2.bin
   38396/   71ED4 : (MACRO)             		align 2
   38396/   71ED4 :  (MACRO-2)                  cnop 0,2
   38396/   71ED4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38397/   71ED4 :                     ObjPos_SBZ1pf3:	binclude	objpos/sbz1pf3.bin
   38398/   71F06 : (MACRO)             		align 2
   38398/   71F06 :  (MACRO-2)                  cnop 0,2
   38398/   71F06 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38399/   71F06 :                     ObjPos_SBZ1pf4:	binclude	objpos/sbz1pf4.bin
   38400/   71F38 : (MACRO)             		align 2
   38400/   71F38 :  (MACRO-2)                  cnop 0,2
   38400/   71F38 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38401/   71F38 :                     ObjPos_SBZ1pf5:	binclude	objpos/sbz1pf5.bin
   38402/   71F6A : (MACRO)             		align 2
   38402/   71F6A :  (MACRO-2)                  cnop 0,2
   38402/   71F6A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38403/   71F6A :                     ObjPos_SBZ1pf6:	binclude	objpos/sbz1pf6.bin
   38404/   71FA2 : (MACRO)             		align 2
   38404/   71FA2 :  (MACRO-2)                  cnop 0,2
   38404/   71FA2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38405/   71FA2 :                     ObjPos_End:	binclude	objpos/ending.bin
   38406/   720FE : (MACRO)             		align 2
   38406/   720FE :  (MACRO-2)                  cnop 0,2
   38406/   720FE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38407/   720FE : FFFF 0000 0000      ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
   38408/   72104 :                     ; ---------------------------------------------------------------------------
   38409/   72104 :                     		binclude	misc/padding4.bin
   38410/   7272E : (MACRO)             		align 2
   38410/   7272E :  (MACRO-2)                  cnop 0,2
   38410/   7272E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   38411/   7272E :                     
   38412/   7272E : 0007 2886           Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
   38413/   72732 : 0007 99C2           Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
   38414/   72736 : 0007 283A           Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
   38415/   7273A : 0007 9902           Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
   38416/   7273E : 0007 2832           off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
   38417/   72742 : 0007 2746           Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
   38418/   72746 :                     ; ---------------------------------------------------------------------------
   38419/   72746 :                     ; PSG instruments used in music
   38420/   72746 :                     ; ---------------------------------------------------------------------------
   38421/   72746 : 0007 276A 0007 2781 PSG_Index:	dc.l PSG1, PSG2, PSG3
                    0007 2788           
   38422/   72752 : 0007 2799 0007 27B3 		dc.l PSG4, PSG5, PSG6
                    0007 27A4           
   38423/   7275E : 0007 27DD 0007 27F9 		dc.l PSG7, PSG8, PSG9
                    0007 2821           
   38424/   7276A :                     PSG1:		binclude	sound/psg1.bin
   38425/   72781 :                     PSG2:		binclude	sound/psg2.bin
   38426/   72788 :                     PSG3:		binclude	sound/psg3.bin
   38427/   72799 :                     PSG4:		binclude	sound/psg4.bin
   38428/   727A4 :                     PSG6:		binclude	sound/psg6.bin
   38429/   727B3 :                     PSG5:		binclude	sound/psg5.bin
   38430/   727DD :                     PSG7:		binclude	sound/psg7.bin
   38431/   727F9 :                     PSG8:		binclude	sound/psg8.bin
   38432/   72821 :                     PSG9:		binclude	sound/psg9.bin
   38433/   72832 :                     
   38434/   72832 : 0772 7326 1508 FF05 byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
   38435/   7283A :                     ; ---------------------------------------------------------------------------
   38436/   7283A :                     ; Music	Pointers
   38437/   7283A :                     ; ---------------------------------------------------------------------------
   38438/   7283A : 0007 539A 0007 5B02 MusicIndex:	dc.l Music81, Music82
   38439/   72842 : 0007 5F52 0007 63B0 		dc.l Music83, Music84
   38440/   7284A : 0007 681E 0007 6C6A 		dc.l Music85, Music86
   38441/   72852 : 0007 71BA 0007 73A0 		dc.l Music87, Music88
   38442/   7285A : 0007 748E 0007 77BA 		dc.l Music89, Music8A
   38443/   72862 : 0007 7966 0007 7C00 		dc.l Music8B, Music8C
   38444/   7286A : 0007 7E1C 0007 8038 		dc.l Music8D, Music8E
   38445/   72872 : 0007 818E 0007 82DE 		dc.l Music8F, Music90
   38446/   7287A : 0007 843C 0007 970A 		dc.l Music91, Music92
   38447/   72882 : 0007 9834           		dc.l Music93
   38448/   72886 :                     ; ---------------------------------------------------------------------------
   38449/   72886 :                     ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
   38450/   72886 :                     ; ---------------------------------------------------------------------------
   38451/   72886 : 9090 9090 9090 9090 SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
                    9090 9090 9090 9090 
   38452/   72896 : 9090 9090 9090 9090 		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
                    9090 9090 9090 9080 
   38453/   728A6 : 7070 7070 7070 7070 		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
                    7068 7070 7060 7070 
   38454/   728B6 : 6070 6070 7070 7070 		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
                    7070 7070 7070 7F60 
   38455/   728C6 : 7070 7070 7070 7070 		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
                    7070 7070 7070 7080 
   38456/   728D6 : 8080 8080 8080 8080 		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
                    8080 8080 8080 8090 
   38457/   728E6 : 9090 9090           		dc.b $90, $90, $90, $90
   38458/   728EA :                     
   38459/   728EA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38460/   728EA :                     
   38461/   728EA :                     
   38462/   728EA :                     sub_71B4C:				; XREF: loc_B10; PalToCRAM
   38463/   728EA : 33FC 0100 00A1 1100 		move.w	#$100,($A11100).l ; stop the Z80
   38464/   728F2 : 4E71                		nop	
   38465/   728F4 : 4E71                		nop	
   38466/   728F6 : 4E71                		nop	
   38467/   728F8 :                     
   38468/   728F8 :                     loc_71B5A:
   38469/   728F8 : 0839 0000 00A1 1100 		btst	#0,($A11100).l
   38470/   72900 : 66F6                		bne.s	loc_71B5A
   38471/   72902 :                     
   38472/   72902 : 0839 0007 00A0 1FFD 		btst	#7,($A01FFD).l
   38473/   7290A : 6714                		beq.s	loc_71B82
   38474/   7290C : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l	; start	the Z80
   38475/   72914 : 4E71                		nop	
   38476/   72916 : 4E71                		nop	
   38477/   72918 : 4E71                		nop	
   38478/   7291A : 4E71                		nop	
   38479/   7291C : 4E71                		nop	
   38480/   7291E : 60CA                		bra.s	sub_71B4C
   38481/   72920 :                     ; ===========================================================================
   38482/   72920 :                     
   38483/   72920 :                     loc_71B82:
   38484/   72920 : 4DF9 00FF F000      		lea	($FFF000).l,a6
   38485/   72926 : 422E 000E           		clr.b	$E(a6)
   38486/   7292A : 4A2E 0003           		tst.b	3(a6)		; is music paused?
   38487/   7292E : 6600 02BE           		bne.w	loc_71E50	; if yes, branch
   38488/   72932 : 532E 0001           		subq.b	#1,1(a6)
   38489/   72936 : 6604                		bne.s	loc_71B9E
   38490/   72938 : 4EBA 0A90           		jsr	sub_7260C(pc)
   38491/   7293C :                     
   38492/   7293C :                     loc_71B9E:
   38493/   7293C : 102E 0004           		move.b	4(a6),d0
   38494/   72940 : 6704                		beq.s	loc_71BA8
   38495/   72942 : 4EBA 097E           		jsr	sub_72504(pc)
   38496/   72946 :                     
   38497/   72946 :                     loc_71BA8:
   38498/   72946 : 4A2E 0024           		tst.b	$24(a6)
   38499/   7294A : 6704                		beq.s	loc_71BB2
   38500/   7294C : 4EBA 0AEC           		jsr	sub_7267C(pc)
   38501/   72950 :                     
   38502/   72950 :                     loc_71BB2:
   38503/   72950 : 4A6E 000A           		tst.w	$A(a6)		; is music or sound being played?
   38504/   72954 : 6704                		beq.s	loc_71BBC	; if not, branch
   38505/   72956 : 4EBA 0348           		jsr	Sound_Play(pc)
   38506/   7295A :                     
   38507/   7295A :                     loc_71BBC:
   38508/   7295A : 0C2E 0080 0009      		cmpi.b	#$80,9(a6)
   38509/   72960 : 6704                		beq.s	loc_71BC8
   38510/   72962 : 4EBA 0386           		jsr	Sound_ChkValue(pc)
   38511/   72966 :                     
   38512/   72966 :                     loc_71BC8:
   38513/   72966 : 4BEE 0040           		lea	$40(a6),a5
   38514/   7296A : 4A15                		tst.b	(a5)
   38515/   7296C : 6A04                		bpl.s	loc_71BD4
   38516/   7296E : 4EBA 007C           		jsr	sub_71C4E(pc)
   38517/   72972 :                     
   38518/   72972 :                     loc_71BD4:
   38519/   72972 : 422E 0008           		clr.b	8(a6)
   38520/   72976 : 7E05                		moveq	#5,d7
   38521/   72978 :                     
   38522/   72978 :                     loc_71BDA:
   38523/   72978 : DAFC 0030           		adda.w	#$30,a5
   38524/   7297C : 4A15                		tst.b	(a5)
   38525/   7297E : 6A04                		bpl.s	loc_71BE6
   38526/   72980 : 4EBA 00E6           		jsr	sub_71CCA(pc)
   38527/   72984 :                     
   38528/   72984 :                     loc_71BE6:
   38529/   72984 : 51CF FFF2           		dbf	d7,loc_71BDA
   38530/   72988 :                     
   38531/   72988 : 7E02                		moveq	#2,d7
   38532/   7298A :                     
   38533/   7298A :                     loc_71BEC:
   38534/   7298A : DAFC 0030           		adda.w	#$30,a5
   38535/   7298E : 4A15                		tst.b	(a5)
   38536/   72990 : 6A04                		bpl.s	loc_71BF8
   38537/   72992 : 4EBA 0C7A           		jsr	sub_72850(pc)
   38538/   72996 :                     
   38539/   72996 :                     loc_71BF8:
   38540/   72996 : 51CF FFF2           		dbf	d7,loc_71BEC
   38541/   7299A :                     
   38542/   7299A : 1D7C 0080 000E      		move.b	#$80,$E(a6)
   38543/   729A0 : 7E02                		moveq	#2,d7
   38544/   729A2 :                     
   38545/   729A2 :                     loc_71C04:
   38546/   729A2 : DAFC 0030           		adda.w	#$30,a5
   38547/   729A6 : 4A15                		tst.b	(a5)
   38548/   729A8 : 6A04                		bpl.s	loc_71C10
   38549/   729AA : 4EBA 00BC           		jsr	sub_71CCA(pc)
   38550/   729AE :                     
   38551/   729AE :                     loc_71C10:
   38552/   729AE : 51CF FFF2           		dbf	d7,loc_71C04
   38553/   729B2 :                     
   38554/   729B2 : 7E02                		moveq	#2,d7
   38555/   729B4 :                     
   38556/   729B4 :                     loc_71C16:
   38557/   729B4 : DAFC 0030           		adda.w	#$30,a5
   38558/   729B8 : 4A15                		tst.b	(a5)
   38559/   729BA : 6A04                		bpl.s	loc_71C22
   38560/   729BC : 4EBA 0C50           		jsr	sub_72850(pc)
   38561/   729C0 :                     
   38562/   729C0 :                     loc_71C22:
   38563/   729C0 : 51CF FFF2           		dbf	d7,loc_71C16
   38564/   729C4 : 1D7C 0040 000E      		move.b	#$40,$E(a6)
   38565/   729CA : DAFC 0030           		adda.w	#$30,a5
   38566/   729CE : 4A15                		tst.b	(a5)
   38567/   729D0 : 6A04                		bpl.s	loc_71C38
   38568/   729D2 : 4EBA 0094           		jsr	sub_71CCA(pc)
   38569/   729D6 :                     
   38570/   729D6 :                     loc_71C38:
   38571/   729D6 : DAFC 0030           		adda.w	#$30,a5
   38572/   729DA : 4A15                		tst.b	(a5)
   38573/   729DC : 6A04                		bpl.s	loc_71C44
   38574/   729DE : 4EBA 0C2E           		jsr	sub_72850(pc)
   38575/   729E2 :                     
   38576/   729E2 :                     loc_71C44:
   38577/   729E2 : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l	; start	the Z80
   38578/   729EA : 4E75                		rts	
   38579/   729EC :                     ; End of function sub_71B4C
   38580/   729EC :                     
   38581/   729EC :                     
   38582/   729EC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38583/   729EC :                     
   38584/   729EC :                     
   38585/   729EC :                     sub_71C4E:				; XREF: sub_71B4C
   38586/   729EC : 532D 000E           		subq.b	#1,$E(a5)
   38587/   729F0 : 6656                		bne.s	locret_71CAA
   38588/   729F2 : 1D7C 0080 0008      		move.b	#$80,8(a6)
   38589/   729F8 : 286D 0004           		movea.l	4(a5),a4
   38590/   729FC :                     
   38591/   729FC :                     loc_71C5E:
   38592/   729FC : 7A00                		moveq	#0,d5
   38593/   729FE : 1A1C                		move.b	(a4)+,d5
   38594/   72A00 : 0C05 00E0           		cmpi.b	#-$20,d5
   38595/   72A04 : 6506                		bcs.s	loc_71C6E
   38596/   72A06 : 4EBA 0E10           		jsr	sub_72A5A(pc)
   38597/   72A0A : 60F0                		bra.s	loc_71C5E
   38598/   72A0C :                     ; ===========================================================================
   38599/   72A0C :                     
   38600/   72A0C :                     loc_71C6E:
   38601/   72A0C : 4A05                		tst.b	d5
   38602/   72A0E : 6A12                		bpl.s	loc_71C84
   38603/   72A10 : 1B45 0010           		move.b	d5,$10(a5)
   38604/   72A14 : 1A1C                		move.b	(a4)+,d5
   38605/   72A16 : 6A0A                		bpl.s	loc_71C84
   38606/   72A18 : 534C                		subq.w	#1,a4
   38607/   72A1A : 1B6D 000F 000E      		move.b	$F(a5),$E(a5)
   38608/   72A20 : 6004                		bra.s	loc_71C88
   38609/   72A22 :                     ; ===========================================================================
   38610/   72A22 :                     
   38611/   72A22 :                     loc_71C84:
   38612/   72A22 : 4EBA 00BA           		jsr	sub_71D40(pc)
   38613/   72A26 :                     
   38614/   72A26 :                     loc_71C88:
   38615/   72A26 : 2B4C 0004           		move.l	a4,4(a5)
   38616/   72A2A : 0815 0002           		btst	#2,(a5)
   38617/   72A2E : 6618                		bne.s	locret_71CAA
   38618/   72A30 : 7000                		moveq	#0,d0
   38619/   72A32 : 102D 0010           		move.b	$10(a5),d0
   38620/   72A36 : 0C00 0080           		cmpi.b	#$80,d0
   38621/   72A3A : 670C                		beq.s	locret_71CAA
   38622/   72A3C : 0800 0003           		btst	#3,d0
   38623/   72A40 : 6608                		bne.s	loc_71CAC
   38624/   72A42 : 13C0 00A0 1FFF      		move.b	d0,($A01FFF).l
   38625/   72A48 :                     
   38626/   72A48 :                     locret_71CAA:
   38627/   72A48 : 4E75                		rts	
   38628/   72A4A :                     ; ===========================================================================
   38629/   72A4A :                     
   38630/   72A4A :                     loc_71CAC:
   38631/   72A4A : 0400 0088           		subi.b	#$88,d0
   38632/   72A4E : 103B 0012           		move.b	byte_71CC4(pc,d0.w),d0
   38633/   72A52 : 13C0 00A0 00EA      		move.b	d0,($A000EA).l
   38634/   72A58 : 13FC 0083 00A0 1FFF 		move.b	#$83,($A01FFF).l
   38635/   72A60 : 4E75                		rts	
   38636/   72A62 :                     ; End of function sub_71C4E
   38637/   72A62 :                     
   38638/   72A62 :                     ; ===========================================================================
   38639/   72A62 : 1215 1C1D FFFF      byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
   38640/   72A68 :                     
   38641/   72A68 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38642/   72A68 :                     
   38643/   72A68 :                     
   38644/   72A68 :                     sub_71CCA:				; XREF: sub_71B4C
   38645/   72A68 : 532D 000E           		subq.b	#1,$E(a5)
   38646/   72A6C : 6610                		bne.s	loc_71CE0
   38647/   72A6E : 0895 0004           		bclr	#4,(a5)
   38648/   72A72 : 4EBA 0016           		jsr	sub_71CEC(pc)
   38649/   72A76 : 4EBA 013E           		jsr	sub_71E18(pc)
   38650/   72A7A : 6000 0A24           		bra.w	loc_726E2
   38651/   72A7E :                     ; ===========================================================================
   38652/   72A7E :                     
   38653/   72A7E :                     loc_71CE0:
   38654/   72A7E : 4EBA 00BC           		jsr	sub_71D9E(pc)
   38655/   72A82 : 4EBA 00E0           		jsr	sub_71DC6(pc)
   38656/   72A86 : 6000 013A           		bra.w	loc_71E24
   38657/   72A8A :                     ; End of function sub_71CCA
   38658/   72A8A :                     
   38659/   72A8A :                     
   38660/   72A8A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38661/   72A8A :                     
   38662/   72A8A :                     
   38663/   72A8A :                     sub_71CEC:				; XREF: sub_71CCA
   38664/   72A8A : 286D 0004           		movea.l	4(a5),a4
   38665/   72A8E : 0895 0001           		bclr	#1,(a5)
   38666/   72A92 :                     
   38667/   72A92 :                     loc_71CF4:
   38668/   72A92 : 7A00                		moveq	#0,d5
   38669/   72A94 : 1A1C                		move.b	(a4)+,d5
   38670/   72A96 : 0C05 00E0           		cmpi.b	#-$20,d5
   38671/   72A9A : 6506                		bcs.s	loc_71D04
   38672/   72A9C : 4EBA 0D7A           		jsr	sub_72A5A(pc)
   38673/   72AA0 : 60F0                		bra.s	loc_71CF4
   38674/   72AA2 :                     ; ===========================================================================
   38675/   72AA2 :                     
   38676/   72AA2 :                     loc_71D04:
   38677/   72AA2 : 4EBA 0A18           		jsr	sub_726FE(pc)
   38678/   72AA6 : 4A05                		tst.b	d5
   38679/   72AA8 : 6A0E                		bpl.s	loc_71D1A
   38680/   72AAA : 4EBA 0014           		jsr	sub_71D22(pc)
   38681/   72AAE : 1A1C                		move.b	(a4)+,d5
   38682/   72AB0 : 6A06                		bpl.s	loc_71D1A
   38683/   72AB2 : 534C                		subq.w	#1,a4
   38684/   72AB4 : 6000 0048           		bra.w	sub_71D60
   38685/   72AB8 :                     ; ===========================================================================
   38686/   72AB8 :                     
   38687/   72AB8 :                     loc_71D1A:
   38688/   72AB8 : 4EBA 0024           		jsr	sub_71D40(pc)
   38689/   72ABC : 6000 0040           		bra.w	sub_71D60
   38690/   72AC0 :                     ; End of function sub_71CEC
   38691/   72AC0 :                     
   38692/   72AC0 :                     
   38693/   72AC0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38694/   72AC0 :                     
   38695/   72AC0 :                     
   38696/   72AC0 :                     sub_71D22:				; XREF: sub_71CEC
   38697/   72AC0 : 0405 0080           		subi.b	#$80,d5
   38698/   72AC4 : 6730                		beq.s	loc_71D58
   38699/   72AC6 : DA2D 0008           		add.b	8(a5),d5
   38700/   72ACA : 0245 007F           		andi.w	#$7F,d5
   38701/   72ACE : E34D                		lsl.w	#1,d5
   38702/   72AD0 : 41FA 0A7C           		lea	word_72790(pc),a0
   38703/   72AD4 : 3C30 5000           		move.w	(a0,d5.w),d6
   38704/   72AD8 : 3B46 0010           		move.w	d6,$10(a5)
   38705/   72ADC : 4E75                		rts	
   38706/   72ADE :                     ; End of function sub_71D22
   38707/   72ADE :                     
   38708/   72ADE :                     
   38709/   72ADE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38710/   72ADE :                     
   38711/   72ADE :                     
   38712/   72ADE :                     sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
   38713/   72ADE : 1005                		move.b	d5,d0
   38714/   72AE0 : 122D 0002           		move.b	2(a5),d1
   38715/   72AE4 :                     
   38716/   72AE4 :                     loc_71D46:
   38717/   72AE4 : 5301                		subq.b	#1,d1
   38718/   72AE6 : 6704                		beq.s	loc_71D4E
   38719/   72AE8 : D005                		add.b	d5,d0
   38720/   72AEA : 60F8                		bra.s	loc_71D46
   38721/   72AEC :                     ; ===========================================================================
   38722/   72AEC :                     
   38723/   72AEC :                     loc_71D4E:
   38724/   72AEC : 1B40 000F           		move.b	d0,$F(a5)
   38725/   72AF0 : 1B40 000E           		move.b	d0,$E(a5)
   38726/   72AF4 : 4E75                		rts	
   38727/   72AF6 :                     ; End of function sub_71D40
   38728/   72AF6 :                     
   38729/   72AF6 :                     ; ===========================================================================
   38730/   72AF6 :                     
   38731/   72AF6 :                     loc_71D58:				; XREF: sub_71D22
   38732/   72AF6 : 08D5 0001           		bset	#1,(a5)
   38733/   72AFA : 426D 0010           		clr.w	$10(a5)
   38734/   72AFE :                     
   38735/   72AFE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38736/   72AFE :                     
   38737/   72AFE :                     
   38738/   72AFE :                     sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
   38739/   72AFE : 2B4C 0004           		move.l	a4,4(a5)
   38740/   72B02 : 1B6D 000F 000E      		move.b	$F(a5),$E(a5)
   38741/   72B08 : 0815 0004           		btst	#4,(a5)
   38742/   72B0C : 662C                		bne.s	locret_71D9C
   38743/   72B0E : 1B6D 0013 0012      		move.b	$13(a5),$12(a5)
   38744/   72B14 : 422D 000C           		clr.b	$C(a5)
   38745/   72B18 : 0815 0003           		btst	#3,(a5)
   38746/   72B1C : 671C                		beq.s	locret_71D9C
   38747/   72B1E : 206D 0014           		movea.l	$14(a5),a0
   38748/   72B22 : 1B58 0018           		move.b	(a0)+,$18(a5)
   38749/   72B26 : 1B58 0019           		move.b	(a0)+,$19(a5)
   38750/   72B2A : 1B58 001A           		move.b	(a0)+,$1A(a5)
   38751/   72B2E : 1018                		move.b	(a0)+,d0
   38752/   72B30 : E208                		lsr.b	#1,d0
   38753/   72B32 : 1B40 001B           		move.b	d0,$1B(a5)
   38754/   72B36 : 426D 001C           		clr.w	$1C(a5)
   38755/   72B3A :                     
   38756/   72B3A :                     locret_71D9C:
   38757/   72B3A : 4E75                		rts	
   38758/   72B3C :                     ; End of function sub_71D60
   38759/   72B3C :                     
   38760/   72B3C :                     
   38761/   72B3C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38762/   72B3C :                     
   38763/   72B3C :                     
   38764/   72B3C :                     sub_71D9E:				; XREF: sub_71CCA; sub_72850
   38765/   72B3C : 4A2D 0012           		tst.b	$12(a5)
   38766/   72B40 : 6720                		beq.s	locret_71DC4
   38767/   72B42 : 532D 0012           		subq.b	#1,$12(a5)
   38768/   72B46 : 661A                		bne.s	locret_71DC4
   38769/   72B48 : 08D5 0001           		bset	#1,(a5)
   38770/   72B4C : 4A2D 0001           		tst.b	1(a5)
   38771/   72B50 : 6B00 000A           		bmi.w	loc_71DBE
   38772/   72B54 : 4EBA 0966           		jsr	sub_726FE(pc)
   38773/   72B58 : 584F                		addq.w	#4,sp
   38774/   72B5A : 4E75                		rts	
   38775/   72B5C :                     ; ===========================================================================
   38776/   72B5C :                     
   38777/   72B5C :                     loc_71DBE:
   38778/   72B5C : 4EBA 0C00           		jsr	sub_729A0(pc)
   38779/   72B60 : 584F                		addq.w	#4,sp
   38780/   72B62 :                     
   38781/   72B62 :                     locret_71DC4:
   38782/   72B62 : 4E75                		rts	
   38783/   72B64 :                     ; End of function sub_71D9E
   38784/   72B64 :                     
   38785/   72B64 :                     
   38786/   72B64 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38787/   72B64 :                     
   38788/   72B64 :                     
   38789/   72B64 :                     sub_71DC6:				; XREF: sub_71CCA; sub_72850
   38790/   72B64 : 584F                		addq.w	#4,sp
   38791/   72B66 : 0815 0003           		btst	#3,(a5)
   38792/   72B6A : 6748                		beq.s	locret_71E16
   38793/   72B6C : 4A2D 0018           		tst.b	$18(a5)
   38794/   72B70 : 6706                		beq.s	loc_71DDA
   38795/   72B72 : 532D 0018           		subq.b	#1,$18(a5)
   38796/   72B76 : 4E75                		rts	
   38797/   72B78 :                     ; ===========================================================================
   38798/   72B78 :                     
   38799/   72B78 :                     loc_71DDA:
   38800/   72B78 : 532D 0019           		subq.b	#1,$19(a5)
   38801/   72B7C : 6702                		beq.s	loc_71DE2
   38802/   72B7E : 4E75                		rts	
   38803/   72B80 :                     ; ===========================================================================
   38804/   72B80 :                     
   38805/   72B80 :                     loc_71DE2:
   38806/   72B80 : 206D 0014           		movea.l	$14(a5),a0
   38807/   72B84 : 1B68 0001 0019      		move.b	1(a0),$19(a5)
   38808/   72B8A : 4A2D 001B           		tst.b	$1B(a5)
   38809/   72B8E : 660C                		bne.s	loc_71DFE
   38810/   72B90 : 1B68 0003 001B      		move.b	3(a0),$1B(a5)
   38811/   72B96 : 442D 001A           		neg.b	$1A(a5)
   38812/   72B9A : 4E75                		rts	
   38813/   72B9C :                     ; ===========================================================================
   38814/   72B9C :                     
   38815/   72B9C :                     loc_71DFE:
   38816/   72B9C : 532D 001B           		subq.b	#1,$1B(a5)
   38817/   72BA0 : 1C2D 001A           		move.b	$1A(a5),d6
   38818/   72BA4 : 4886                		ext.w	d6
   38819/   72BA6 : DC6D 001C           		add.w	$1C(a5),d6
   38820/   72BAA : 3B46 001C           		move.w	d6,$1C(a5)
   38821/   72BAE : DC6D 0010           		add.w	$10(a5),d6
   38822/   72BB2 : 594F                		subq.w	#4,sp
   38823/   72BB4 :                     
   38824/   72BB4 :                     locret_71E16:
   38825/   72BB4 : 4E75                		rts	
   38826/   72BB6 :                     ; End of function sub_71DC6
   38827/   72BB6 :                     
   38828/   72BB6 :                     
   38829/   72BB6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38830/   72BB6 :                     
   38831/   72BB6 :                     
   38832/   72BB6 :                     sub_71E18:				; XREF: sub_71CCA
   38833/   72BB6 : 0815 0001           		btst	#1,(a5)
   38834/   72BBA : 662A                		bne.s	locret_71E48
   38835/   72BBC : 3C2D 0010           		move.w	$10(a5),d6
   38836/   72BC0 : 6726                		beq.s	loc_71E4A
   38837/   72BC2 :                     
   38838/   72BC2 :                     loc_71E24:				; XREF: sub_71CCA
   38839/   72BC2 : 102D 001E           		move.b	$1E(a5),d0
   38840/   72BC6 : 4880                		ext.w	d0
   38841/   72BC8 : DC40                		add.w	d0,d6
   38842/   72BCA : 0815 0002           		btst	#2,(a5)
   38843/   72BCE : 6616                		bne.s	locret_71E48
   38844/   72BD0 : 3206                		move.w	d6,d1
   38845/   72BD2 : E049                		lsr.w	#8,d1
   38846/   72BD4 : 103C 00A4           		move.b	#-$5C,d0
   38847/   72BD8 : 4EBA 0906           		jsr	sub_72722(pc)
   38848/   72BDC : 1206                		move.b	d6,d1
   38849/   72BDE : 103C 00A0           		move.b	#-$60,d0
   38850/   72BE2 : 4EBA 08FC           		jsr	sub_72722(pc)
   38851/   72BE6 :                     
   38852/   72BE6 :                     locret_71E48:
   38853/   72BE6 : 4E75                		rts	
   38854/   72BE8 :                     ; ===========================================================================
   38855/   72BE8 :                     
   38856/   72BE8 :                     loc_71E4A:
   38857/   72BE8 : 08D5 0001           		bset	#1,(a5)
   38858/   72BEC : 4E75                		rts	
   38859/   72BEE :                     ; End of function sub_71E18
   38860/   72BEE :                     
   38861/   72BEE :                     ; ===========================================================================
   38862/   72BEE :                     
   38863/   72BEE :                     loc_71E50:				; XREF: sub_71B4C
   38864/   72BEE : 6B42                		bmi.s	loc_71E94
   38865/   72BF0 : 0C2E 0002 0003      		cmpi.b	#2,3(a6)
   38866/   72BF6 : 6700 00A4           		beq.w	loc_71EFE
   38867/   72BFA : 1D7C 0002 0003      		move.b	#2,3(a6)
   38868/   72C00 : 7602                		moveq	#2,d3
   38869/   72C02 : 103C 00B4           		move.b	#-$4C,d0
   38870/   72C06 : 7200                		moveq	#0,d1
   38871/   72C08 :                     
   38872/   72C08 :                     loc_71E6A:
   38873/   72C08 : 4EBA 08E2           		jsr	sub_7272E(pc)
   38874/   72C0C : 4EBA 0914           		jsr	sub_72764(pc)
   38875/   72C10 : 5200                		addq.b	#1,d0
   38876/   72C12 : 51CB FFF4           		dbf	d3,loc_71E6A
   38877/   72C16 :                     
   38878/   72C16 : 7602                		moveq	#2,d3
   38879/   72C18 : 7028                		moveq	#$28,d0
   38880/   72C1A :                     
   38881/   72C1A :                     loc_71E7C:
   38882/   72C1A : 1203                		move.b	d3,d1
   38883/   72C1C : 4EBA 08CE           		jsr	sub_7272E(pc)
   38884/   72C20 : 5801                		addq.b	#4,d1
   38885/   72C22 : 4EBA 08C8           		jsr	sub_7272E(pc)
   38886/   72C26 : 51CB FFF2           		dbf	d3,loc_71E7C
   38887/   72C2A :                     
   38888/   72C2A : 4EBA 0B48           		jsr	sub_729B6(pc)
   38889/   72C2E : 6000 FDB2           		bra.w	loc_71C44
   38890/   72C32 :                     ; ===========================================================================
   38891/   72C32 :                     
   38892/   72C32 :                     loc_71E94:				; XREF: loc_71E50
   38893/   72C32 : 422E 0003           		clr.b	3(a6)
   38894/   72C36 : 7630                		moveq	#$30,d3
   38895/   72C38 : 4BEE 0040           		lea	$40(a6),a5
   38896/   72C3C : 7806                		moveq	#6,d4
   38897/   72C3E :                     
   38898/   72C3E :                     loc_71EA0:
   38899/   72C3E : 0815 0007           		btst	#7,(a5)
   38900/   72C42 : 6712                		beq.s	loc_71EB8
   38901/   72C44 : 0815 0002           		btst	#2,(a5)
   38902/   72C48 : 660C                		bne.s	loc_71EB8
   38903/   72C4A : 103C 00B4           		move.b	#-$4C,d0
   38904/   72C4E : 122D 000A           		move.b	$A(a5),d1
   38905/   72C52 : 4EBA 088C           		jsr	sub_72722(pc)
   38906/   72C56 :                     
   38907/   72C56 :                     loc_71EB8:
   38908/   72C56 : DAC3                		adda.w	d3,a5
   38909/   72C58 : 51CC FFE4           		dbf	d4,loc_71EA0
   38910/   72C5C :                     
   38911/   72C5C : 4BEE 0220           		lea	$220(a6),a5
   38912/   72C60 : 7802                		moveq	#2,d4
   38913/   72C62 :                     
   38914/   72C62 :                     loc_71EC4:
   38915/   72C62 : 0815 0007           		btst	#7,(a5)
   38916/   72C66 : 6712                		beq.s	loc_71EDC
   38917/   72C68 : 0815 0002           		btst	#2,(a5)
   38918/   72C6C : 660C                		bne.s	loc_71EDC
   38919/   72C6E : 103C 00B4           		move.b	#-$4C,d0
   38920/   72C72 : 122D 000A           		move.b	$A(a5),d1
   38921/   72C76 : 4EBA 0868           		jsr	sub_72722(pc)
   38922/   72C7A :                     
   38923/   72C7A :                     loc_71EDC:
   38924/   72C7A : DAC3                		adda.w	d3,a5
   38925/   72C7C : 51CC FFE4           		dbf	d4,loc_71EC4
   38926/   72C80 :                     
   38927/   72C80 : 4BEE 0340           		lea	$340(a6),a5
   38928/   72C84 : 0815 0007           		btst	#7,(a5)
   38929/   72C88 : 6712                		beq.s	loc_71EFE
   38930/   72C8A : 0815 0002           		btst	#2,(a5)
   38931/   72C8E : 660C                		bne.s	loc_71EFE
   38932/   72C90 : 103C 00B4           		move.b	#-$4C,d0
   38933/   72C94 : 122D 000A           		move.b	$A(a5),d1
   38934/   72C98 : 4EBA 0846           		jsr	sub_72722(pc)
   38935/   72C9C :                     
   38936/   72C9C :                     loc_71EFE:
   38937/   72C9C : 6000 FD44           		bra.w	loc_71C44
   38938/   72CA0 :                     
   38939/   72CA0 :                     ; ---------------------------------------------------------------------------
   38940/   72CA0 :                     ; Subroutine to	play a sound or	music track
   38941/   72CA0 :                     ; ---------------------------------------------------------------------------
   38942/   72CA0 :                     
   38943/   72CA0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38944/   72CA0 :                     
   38945/   72CA0 :                     
   38946/   72CA0 :                     Sound_Play:				; XREF: sub_71B4C
   38947/   72CA0 : 2079 0007 272E      		movea.l	(Go_SoundTypes).l,a0
   38948/   72CA6 : 43EE 000A           		lea	$A(a6),a1	; load music track number
   38949/   72CAA : (MACRO)             		_move.b	0(a6),d3
   38949/   72CAA :  (MACRO-2)                          insn2op move.b, 0(a6),d3
   38949/   72CAA : 162E 0001                                   !move.b   1+0(a6),d3
   38949/   72CAD :                                             !org    *-1
   38949/   72CAD : 00                                          !dc.b   0
   38950/   72CAE : 7802                		moveq	#2,d4
   38951/   72CB0 :                     
   38952/   72CB0 :                     loc_71F12:
   38953/   72CB0 : 1011                		move.b	(a1),d0		; move track number to d0
   38954/   72CB2 : 1200                		move.b	d0,d1
   38955/   72CB4 : 4219                		clr.b	(a1)+
   38956/   72CB6 : 0400 0081           		subi.b	#$81,d0
   38957/   72CBA : 6520                		bcs.s	loc_71F3E
   38958/   72CBC : 0C2E 0080 0009      		cmpi.b	#$80,9(a6)
   38959/   72CC2 : 6706                		beq.s	loc_71F2C
   38960/   72CC4 : 1D41 000A           		move.b	d1,$A(a6)
   38961/   72CC8 : 6012                		bra.s	loc_71F3E
   38962/   72CCA :                     ; ===========================================================================
   38963/   72CCA :                     
   38964/   72CCA :                     loc_71F2C:
   38965/   72CCA : 0240 007F           		andi.w	#$7F,d0
   38966/   72CCE : 1430 0000           		move.b	(a0,d0.w),d2
   38967/   72CD2 : B403                		cmp.b	d3,d2
   38968/   72CD4 : 6506                		bcs.s	loc_71F3E
   38969/   72CD6 : 1602                		move.b	d2,d3
   38970/   72CD8 : 1D41 0009           		move.b	d1,9(a6)	; set music flag
   38971/   72CDC :                     
   38972/   72CDC :                     loc_71F3E:
   38973/   72CDC : 51CC FFD2           		dbf	d4,loc_71F12
   38974/   72CE0 :                     
   38975/   72CE0 : 4A03                		tst.b	d3
   38976/   72CE2 : 6B04                		bmi.s	locret_71F4A
   38977/   72CE4 : (MACRO)             		_move.b	d3,0(a6)
   38977/   72CE4 :  (MACRO-2)                          insn2op move.b, d3,0(a6)
   38977/   72CE4 : 1D43 0001                                   !move.b   d3,1+0(a6)
   38977/   72CE7 :                                             !org    *-1
   38977/   72CE7 : 00                                          !dc.b   0
   38978/   72CE8 :                     
   38979/   72CE8 :                     locret_71F4A:
   38980/   72CE8 : 4E75                		rts	
   38981/   72CEA :                     ; End of function Sound_Play
   38982/   72CEA :                     
   38983/   72CEA :                     
   38984/   72CEA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   38985/   72CEA :                     
   38986/   72CEA :                     
   38987/   72CEA :                     Sound_ChkValue:				; XREF: sub_71B4C
   38988/   72CEA : 7E00                		moveq	#0,d7
   38989/   72CEC : 1E2E 0009           		move.b	9(a6),d7
   38990/   72CF0 : 6700 066A           		beq.w	Sound_E4
   38991/   72CF4 : 6A34                		bpl.s	locret_71F8C
   38992/   72CF6 : 1D7C 0080 0009      		move.b	#$80,9(a6)	; reset	music flag
   38993/   72CFC : 0C07 009F           		cmpi.b	#$9F,d7
   38994/   72D00 : 6300 008E           		bls.w	Sound_81to9F	; music	$81-$9F
   38995/   72D04 : 0C07 00A0           		cmpi.b	#$A0,d7
   38996/   72D08 : 6500 0020           		bcs.w	locret_71F8C
   38997/   72D0C : 0C07 00CF           		cmpi.b	#$CF,d7
   38998/   72D10 : 6300 0272           		bls.w	Sound_A0toCF	; sound	$A0-$CF
   38999/   72D14 : 0C07 00D0           		cmpi.b	#$D0,d7
   39000/   72D18 : 6500 0010           		bcs.w	locret_71F8C
   39001/   72D1C : 0C07 00E0           		cmpi.b	#$E0,d7
   39002/   72D20 : 6500 03A8           		bcs.w	Sound_D0toDF	; sound	$D0-$DF
   39003/   72D24 : 0C07 00E4           		cmpi.b	#$E4,d7
   39004/   72D28 : 6302                		bls.s	Sound_E0toE4	; sound	$E0-$E4
   39005/   72D2A :                     
   39006/   72D2A :                     locret_71F8C:
   39007/   72D2A : 4E75                		rts	
   39008/   72D2C :                     ; ===========================================================================
   39009/   72D2C :                     
   39010/   72D2C :                     Sound_E0toE4:				; XREF: Sound_ChkValue
   39011/   72D2C : 0407 00E0           		subi.b	#$E0,d7
   39012/   72D30 : E54F                		lsl.w	#2,d7
   39013/   72D32 : 4EFB 7002           		jmp	Sound_ExIndex(pc,d7.w)
   39014/   72D36 :                     ; ===========================================================================
   39015/   72D36 :                     
   39016/   72D36 :                     Sound_ExIndex:
   39017/   72D36 : 6000 056C           		bra.w	Sound_E0
   39018/   72D3A :                     ; ===========================================================================
   39019/   72D3A : 6000 000E           		bra.w	Sound_E1
   39020/   72D3E :                     ; ===========================================================================
   39021/   72D3E : 6000 06A2           		bra.w	Sound_E2
   39022/   72D42 :                     ; ===========================================================================
   39023/   72D42 : 6000 06CC           		bra.w	Sound_E3
   39024/   72D46 :                     ; ===========================================================================
   39025/   72D46 : 6000 0614           		bra.w	Sound_E4
   39026/   72D4A :                     ; ===========================================================================
   39027/   72D4A :                     ; ---------------------------------------------------------------------------
   39028/   72D4A :                     ; Play "Say-gaa" PCM sound
   39029/   72D4A :                     ; ---------------------------------------------------------------------------
   39030/   72D4A :                     
   39031/   72D4A :                     Sound_E1:				  
   39032/   72D4A : 45F9 0007 A446      		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
   39033/   72D50 : 263C 0000 6BA4      		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
   39034/   72D56 : 13FC 002A 00A0 4000 		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
   39035/   72D5E :                     PlayPCM_Loop:	  
   39036/   72D5E : 13DA 00A0 4001      		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
   39037/   72D64 : 303C 0014           		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
   39038/   72D68 : 51C8 FFFE           		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
   39039/   72D6C : 96BC 0000 0001      		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
   39040/   72D72 : 6718                		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
   39041/   72D74 : 41F8 F604           		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
   39042/   72D78 : 43F9 00A1 0003      		lea	($A10003).l,a1			; address where JoyPad states are read from 
   39043/   72D7E : 4EB8 11F4           		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
   39044/   72D82 : 0838 0007 F604      		btst	#7,($FFFFF604).w		; Check for Start button 
   39045/   72D88 : 6602                		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
   39046/   72D8A : 60D2                		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
   39047/   72D8C :                     return_PlayPCM: 
   39048/   72D8C : 584F                		addq.w	#4,sp 
   39049/   72D8E : 4E75                		rts
   39050/   72D90 :                     ; ===========================================================================
   39051/   72D90 :                     ; ---------------------------------------------------------------------------
   39052/   72D90 :                     ; Play music track $81-$9F
   39053/   72D90 :                     ; ---------------------------------------------------------------------------
   39054/   72D90 :                     
   39055/   72D90 :                     Sound_81to9F:				; XREF: Sound_ChkValue
   39056/   72D90 : 0C07 0088           		cmpi.b	#$88,d7		; is "extra life" music	played?
   39057/   72D94 : 664C                		bne.s	loc_72024	; if not, branch
   39058/   72D96 : 4A2E 0027           		tst.b	$27(a6)
   39059/   72D9A : 6600 01D8           		bne.w	loc_721B6
   39060/   72D9E : 4BEE 0040           		lea	$40(a6),a5
   39061/   72DA2 : 7009                		moveq	#9,d0
   39062/   72DA4 :                     
   39063/   72DA4 :                     loc_71FE6:
   39064/   72DA4 : 0895 0002           		bclr	#2,(a5)
   39065/   72DA8 : DAFC 0030           		adda.w	#$30,a5
   39066/   72DAC : 51C8 FFF6           		dbf	d0,loc_71FE6
   39067/   72DB0 :                     
   39068/   72DB0 : 4BEE 0220           		lea	$220(a6),a5
   39069/   72DB4 : 7005                		moveq	#5,d0
   39070/   72DB6 :                     
   39071/   72DB6 :                     loc_71FF8:
   39072/   72DB6 : 0895 0007           		bclr	#7,(a5)
   39073/   72DBA : DAFC 0030           		adda.w	#$30,a5
   39074/   72DBE : 51C8 FFF6           		dbf	d0,loc_71FF8
   39075/   72DC2 : (MACRO)             		_clr.b	0(a6)
   39075/   72DC2 :  (MACRO-2)                          insn1op clr.b, 0(a6)
   39075/   72DC2 : 422E 0001                           !clr.b   1+0(a6)
   39075/   72DC5 :                                     !org    *-1
   39075/   72DC5 : 00                                  !dc.b   0
   39076/   72DC6 : 204E                		movea.l	a6,a0
   39077/   72DC8 : 43EE 03A0           		lea	$3A0(a6),a1
   39078/   72DCC : 303C 0087           		move.w	#$87,d0
   39079/   72DD0 :                     
   39080/   72DD0 :                     loc_72012:
   39081/   72DD0 : 22D8                		move.l	(a0)+,(a1)+
   39082/   72DD2 : 51C8 FFFC           		dbf	d0,loc_72012
   39083/   72DD6 :                     
   39084/   72DD6 : 1D7C 0080 0027      		move.b	#$80,$27(a6)
   39085/   72DDC : (MACRO)             		_clr.b	0(a6)
   39085/   72DDC :  (MACRO-2)                          insn1op clr.b, 0(a6)
   39085/   72DDC : 422E 0001                           !clr.b   1+0(a6)
   39085/   72DDF :                                     !org    *-1
   39085/   72DDF : 00                                  !dc.b   0
   39086/   72DE0 : 6008                		bra.s	loc_7202C
   39087/   72DE2 :                     ; ===========================================================================
   39088/   72DE2 :                     
   39089/   72DE2 :                     loc_72024:
   39090/   72DE2 : 422E 0027           		clr.b	$27(a6)
   39091/   72DE6 : 422E 0026           		clr.b	$26(a6)
   39092/   72DEA :                     
   39093/   72DEA :                     loc_7202C:
   39094/   72DEA : 4EBA 059C           		jsr	sub_725CA(pc)
   39095/   72DEE : 2879 0007 273E      		movea.l	(off_719A0).l,a4
   39096/   72DF4 : 0407 0081           		subi.b	#$81,d7
   39097/   72DF8 : 1D74 7000 0029      		move.b	(a4,d7.w),$29(a6)
   39098/   72DFE : 2879 0007 2736      		movea.l	(Go_MusicIndex).l,a4
   39099/   72E04 : E54F                		lsl.w	#2,d7
   39100/   72E06 : 2874 7000           		movea.l	(a4,d7.w),a4
   39101/   72E0A : 7000                		moveq	#0,d0
   39102/   72E0C : 3014                		move.w	(a4),d0
   39103/   72E0E : D08C                		add.l	a4,d0
   39104/   72E10 : 2D40 0018           		move.l	d0,$18(a6)
   39105/   72E14 : 102C 0005           		move.b	5(a4),d0
   39106/   72E18 : 1D40 0028           		move.b	d0,$28(a6)
   39107/   72E1C : 4A2E 002A           		tst.b	$2A(a6)
   39108/   72E20 : 6704                		beq.s	loc_72068
   39109/   72E22 : 102E 0029           		move.b	$29(a6),d0
   39110/   72E26 :                     
   39111/   72E26 :                     loc_72068:
   39112/   72E26 : 1D40 0002           		move.b	d0,2(a6)
   39113/   72E2A : 1D40 0001           		move.b	d0,1(a6)
   39114/   72E2E : 7200                		moveq	#0,d1
   39115/   72E30 : 264C                		movea.l	a4,a3
   39116/   72E32 : 5C4C                		addq.w	#6,a4
   39117/   72E34 : 7E00                		moveq	#0,d7
   39118/   72E36 : 1E2B 0002           		move.b	2(a3),d7
   39119/   72E3A : 6700 0096           		beq.w	loc_72114
   39120/   72E3E : 5307                		subq.b	#1,d7
   39121/   72E40 : 123C 00C0           		move.b	#-$40,d1
   39122/   72E44 : 182B 0004           		move.b	4(a3),d4
   39123/   72E48 : 7C30                		moveq	#$30,d6
   39124/   72E4A : 1A3C 0001           		move.b	#1,d5
   39125/   72E4E : 43EE 0040           		lea	$40(a6),a1
   39126/   72E52 : 45FA 0124           		lea	byte_721BA(pc),a2
   39127/   72E56 :                     
   39128/   72E56 :                     loc_72098:
   39129/   72E56 : 08D1 0007           		bset	#7,(a1)
   39130/   72E5A : 135A 0001           		move.b	(a2)+,1(a1)
   39131/   72E5E : 1344 0002           		move.b	d4,2(a1)
   39132/   72E62 : 1346 000D           		move.b	d6,$D(a1)
   39133/   72E66 : 1341 000A           		move.b	d1,$A(a1)
   39134/   72E6A : 1345 000E           		move.b	d5,$E(a1)
   39135/   72E6E : 7000                		moveq	#0,d0
   39136/   72E70 : 301C                		move.w	(a4)+,d0
   39137/   72E72 : D08B                		add.l	a3,d0
   39138/   72E74 : 2340 0004           		move.l	d0,4(a1)
   39139/   72E78 : 335C 0008           		move.w	(a4)+,8(a1)
   39140/   72E7C : D2C6                		adda.w	d6,a1
   39141/   72E7E : 51CF FFD6           		dbf	d7,loc_72098
   39142/   72E82 : 0C2B 0007 0002      		cmpi.b	#7,2(a3)
   39143/   72E88 : 660C                		bne.s	loc_720D8
   39144/   72E8A : 702B                		moveq	#$2B,d0
   39145/   72E8C : 7200                		moveq	#0,d1
   39146/   72E8E : 4EBA 065C           		jsr	sub_7272E(pc)
   39147/   72E92 : 6000 003E           		bra.w	loc_72114
   39148/   72E96 :                     ; ===========================================================================
   39149/   72E96 :                     
   39150/   72E96 :                     loc_720D8:
   39151/   72E96 : 7028                		moveq	#$28,d0
   39152/   72E98 : 7206                		moveq	#6,d1
   39153/   72E9A : 4EBA 0650           		jsr	sub_7272E(pc)
   39154/   72E9E : 103C 0042           		move.b	#$42,d0
   39155/   72EA2 : 727F                		moveq	#$7F,d1
   39156/   72EA4 : 4EBA 067C           		jsr	sub_72764(pc)
   39157/   72EA8 : 103C 004A           		move.b	#$4A,d0
   39158/   72EAC : 727F                		moveq	#$7F,d1
   39159/   72EAE : 4EBA 0672           		jsr	sub_72764(pc)
   39160/   72EB2 : 103C 0046           		move.b	#$46,d0
   39161/   72EB6 : 727F                		moveq	#$7F,d1
   39162/   72EB8 : 4EBA 0668           		jsr	sub_72764(pc)
   39163/   72EBC : 103C 004E           		move.b	#$4E,d0
   39164/   72EC0 : 727F                		moveq	#$7F,d1
   39165/   72EC2 : 4EBA 065E           		jsr	sub_72764(pc)
   39166/   72EC6 : 103C 00B6           		move.b	#-$4A,d0
   39167/   72ECA : 123C 00C0           		move.b	#-$40,d1
   39168/   72ECE : 4EBA 0652           		jsr	sub_72764(pc)
   39169/   72ED2 :                     
   39170/   72ED2 :                     loc_72114:
   39171/   72ED2 : 7E00                		moveq	#0,d7
   39172/   72ED4 : 1E2B 0003           		move.b	3(a3),d7
   39173/   72ED8 : 6738                		beq.s	loc_72154
   39174/   72EDA : 5307                		subq.b	#1,d7
   39175/   72EDC : 43EE 0190           		lea	$190(a6),a1
   39176/   72EE0 : 45FA 009E           		lea	byte_721C2(pc),a2
   39177/   72EE4 :                     
   39178/   72EE4 :                     loc_72126:
   39179/   72EE4 : 08D1 0007           		bset	#7,(a1)
   39180/   72EE8 : 135A 0001           		move.b	(a2)+,1(a1)
   39181/   72EEC : 1344 0002           		move.b	d4,2(a1)
   39182/   72EF0 : 1346 000D           		move.b	d6,$D(a1)
   39183/   72EF4 : 1345 000E           		move.b	d5,$E(a1)
   39184/   72EF8 : 7000                		moveq	#0,d0
   39185/   72EFA : 301C                		move.w	(a4)+,d0
   39186/   72EFC : D08B                		add.l	a3,d0
   39187/   72EFE : 2340 0004           		move.l	d0,4(a1)
   39188/   72F02 : 335C 0008           		move.w	(a4)+,8(a1)
   39189/   72F06 : 101C                		move.b	(a4)+,d0
   39190/   72F08 : 135C 000B           		move.b	(a4)+,$B(a1)
   39191/   72F0C : D2C6                		adda.w	d6,a1
   39192/   72F0E : 51CF FFD4           		dbf	d7,loc_72126
   39193/   72F12 :                     
   39194/   72F12 :                     loc_72154:
   39195/   72F12 : 43EE 0220           		lea	$220(a6),a1
   39196/   72F16 : 7E05                		moveq	#5,d7
   39197/   72F18 :                     
   39198/   72F18 :                     loc_7215A:
   39199/   72F18 : 4A11                		tst.b	(a1)
   39200/   72F1A : 6A00 001E           		bpl.w	loc_7217C
   39201/   72F1E : 7000                		moveq	#0,d0
   39202/   72F20 : 1029 0001           		move.b	1(a1),d0
   39203/   72F24 : 6B06                		bmi.s	loc_7216E
   39204/   72F26 : 5500                		subq.b	#2,d0
   39205/   72F28 : E508                		lsl.b	#2,d0
   39206/   72F2A : 6002                		bra.s	loc_72170
   39207/   72F2C :                     ; ===========================================================================
   39208/   72F2C :                     
   39209/   72F2C :                     loc_7216E:
   39210/   72F2C : E608                		lsr.b	#3,d0
   39211/   72F2E :                     
   39212/   72F2E :                     loc_72170:
   39213/   72F2E : 41FA 015A           		lea	dword_722CC(pc),a0
   39214/   72F32 : 2070 0000           		movea.l	(a0,d0.w),a0
   39215/   72F36 : 08D0 0002           		bset	#2,(a0)
   39216/   72F3A :                     
   39217/   72F3A :                     loc_7217C:
   39218/   72F3A : D2C6                		adda.w	d6,a1
   39219/   72F3C : 51CF FFDA           		dbf	d7,loc_7215A
   39220/   72F40 :                     
   39221/   72F40 : 4A6E 0340           		tst.w	$340(a6)
   39222/   72F44 : 6A06                		bpl.s	loc_7218E
   39223/   72F46 : 08EE 0002 0100      		bset	#2,$100(a6)
   39224/   72F4C :                     
   39225/   72F4C :                     loc_7218E:
   39226/   72F4C : 4A6E 0370           		tst.w	$370(a6)
   39227/   72F50 : 6A06                		bpl.s	loc_7219A
   39228/   72F52 : 08EE 0002 01F0      		bset	#2,$1F0(a6)
   39229/   72F58 :                     
   39230/   72F58 :                     loc_7219A:
   39231/   72F58 : 4BEE 0070           		lea	$70(a6),a5
   39232/   72F5C : 7805                		moveq	#5,d4
   39233/   72F5E :                     
   39234/   72F5E :                     loc_721A0:
   39235/   72F5E : 4EBA 055C           		jsr	sub_726FE(pc)
   39236/   72F62 : DAC6                		adda.w	d6,a5
   39237/   72F64 : 51CC FFF8           		dbf	d4,loc_721A0
   39238/   72F68 : 7802                		moveq	#2,d4
   39239/   72F6A :                     
   39240/   72F6A :                     loc_721AC:
   39241/   72F6A : 4EBA 07F2           		jsr	sub_729A0(pc)
   39242/   72F6E : DAC6                		adda.w	d6,a5
   39243/   72F70 : 51CC FFF8           		dbf	d4,loc_721AC
   39244/   72F74 :                     
   39245/   72F74 :                     loc_721B6:
   39246/   72F74 : 584F                		addq.w	#4,sp
   39247/   72F76 : 4E75                		rts	
   39248/   72F78 :                     ; ===========================================================================
   39249/   72F78 : 0600 0102 0405 0600 byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
   39250/   72F80 : (MACRO)             		align 2
   39250/   72F80 :  (MACRO-2)                  cnop 0,2
   39250/   72F80 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   39251/   72F80 : 80A0 C000           byte_721C2:	dc.b $80, $A0, $C0, 0
   39252/   72F84 : (MACRO)             		align 2
   39252/   72F84 :  (MACRO-2)                  cnop 0,2
   39252/   72F84 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   39253/   72F84 :                     ; ===========================================================================
   39254/   72F84 :                     ; ---------------------------------------------------------------------------
   39255/   72F84 :                     ; Play normal sound effect
   39256/   72F84 :                     ; ---------------------------------------------------------------------------
   39257/   72F84 :                     
   39258/   72F84 :                     Sound_A0toCF:				; XREF: Sound_ChkValue
   39259/   72F84 : 4A2E 0027           		tst.b	$27(a6)
   39260/   72F88 : 6600 00FA           		bne.w	loc_722C6
   39261/   72F8C : 4A2E 0004           		tst.b	4(a6)
   39262/   72F90 : 6600 00F2           		bne.w	loc_722C6
   39263/   72F94 : 4A2E 0024           		tst.b	$24(a6)
   39264/   72F98 : 6600 00EA           		bne.w	loc_722C6
   39265/   72F9C : 0C07 00B5           		cmpi.b	#$B5,d7		; is ring sound	effect played?
   39266/   72FA0 : 6610                		bne.s	Sound_notB5	; if not, branch
   39267/   72FA2 : 4A2E 002B           		tst.b	$2B(a6)
   39268/   72FA6 : 6604                		bne.s	loc_721EE
   39269/   72FA8 : 1E3C 00CE           		move.b	#$CE,d7		; play ring sound in left speaker
   39270/   72FAC :                     
   39271/   72FAC :                     loc_721EE:
   39272/   72FAC : 086E 0000 002B      		bchg	#0,$2B(a6)	; change speaker
   39273/   72FB2 :                     
   39274/   72FB2 :                     Sound_notB5:
   39275/   72FB2 : 0C07 00A7           		cmpi.b	#$A7,d7		; is "pushing" sound played?
   39276/   72FB6 : 660E                		bne.s	Sound_notA7	; if not, branch
   39277/   72FB8 : 4A2E 002C           		tst.b	$2C(a6)
   39278/   72FBC : 6600 00C4           		bne.w	locret_722C4
   39279/   72FC0 : 1D7C 0080 002C      		move.b	#$80,$2C(a6)
   39280/   72FC6 :                     
   39281/   72FC6 :                     Sound_notA7:
   39282/   72FC6 : 2079 0007 273A      		movea.l	(Go_SoundIndex).l,a0
   39283/   72FCC : 0407 00A0           		subi.b	#$A0,d7
   39284/   72FD0 : E54F                		lsl.w	#2,d7
   39285/   72FD2 : 2670 7000           		movea.l	(a0,d7.w),a3
   39286/   72FD6 : 224B                		movea.l	a3,a1
   39287/   72FD8 : 7200                		moveq	#0,d1
   39288/   72FDA : 3219                		move.w	(a1)+,d1
   39289/   72FDC : D28B                		add.l	a3,d1
   39290/   72FDE : 1A19                		move.b	(a1)+,d5
   39291/   72FE0 : 1E19                		move.b	(a1)+,d7
   39292/   72FE2 : 5307                		subq.b	#1,d7
   39293/   72FE4 : 7C30                		moveq	#$30,d6
   39294/   72FE6 :                     
   39295/   72FE6 :                     loc_72228:
   39296/   72FE6 : 7600                		moveq	#0,d3
   39297/   72FE8 : 1629 0001           		move.b	1(a1),d3
   39298/   72FEC : 1803                		move.b	d3,d4
   39299/   72FEE : 6B12                		bmi.s	loc_72244
   39300/   72FF0 : 5543                		subq.w	#2,d3
   39301/   72FF2 : E54B                		lsl.w	#2,d3
   39302/   72FF4 : 4BFA 0094           		lea	dword_722CC(pc),a5
   39303/   72FF8 : 2A75 3000           		movea.l	(a5,d3.w),a5
   39304/   72FFC : 08D5 0002           		bset	#2,(a5)
   39305/   73000 : 602A                		bra.s	loc_7226E
   39306/   73002 :                     ; ===========================================================================
   39307/   73002 :                     
   39308/   73002 :                     loc_72244:
   39309/   73002 : E64B                		lsr.w	#3,d3
   39310/   73004 : 4BFA 0084           		lea	dword_722CC(pc),a5
   39311/   73008 : 2A75 3000           		movea.l	(a5,d3.w),a5
   39312/   7300C : 08D5 0002           		bset	#2,(a5)
   39313/   73010 : 0C04 00C0           		cmpi.b	#$C0,d4
   39314/   73014 : 6616                		bne.s	loc_7226E
   39315/   73016 : 1004                		move.b	d4,d0
   39316/   73018 : 0000 001F           		ori.b	#$1F,d0
   39317/   7301C : 13C0 00C0 0011      		move.b	d0,($C00011).l
   39318/   73022 : 0840 0005           		bchg	#5,d0
   39319/   73026 : 13C0 00C0 0011      		move.b	d0,($C00011).l
   39320/   7302C :                     
   39321/   7302C :                     loc_7226E:
   39322/   7302C : 2A7B 307C           		movea.l	dword_722EC(pc,d3.w),a5
   39323/   73030 : 244D                		movea.l	a5,a2
   39324/   73032 : 700B                		moveq	#$B,d0
   39325/   73034 :                     
   39326/   73034 :                     loc_72276:
   39327/   73034 : 429A                		clr.l	(a2)+
   39328/   73036 : 51C8 FFFC           		dbf	d0,loc_72276
   39329/   7303A :                     
   39330/   7303A : 3A99                		move.w	(a1)+,(a5)
   39331/   7303C : 1B45 0002           		move.b	d5,2(a5)
   39332/   73040 : 7000                		moveq	#0,d0
   39333/   73042 : 3019                		move.w	(a1)+,d0
   39334/   73044 : D08B                		add.l	a3,d0
   39335/   73046 : 2B40 0004           		move.l	d0,4(a5)
   39336/   7304A : 3B59 0008           		move.w	(a1)+,8(a5)
   39337/   7304E : 1B7C 0001 000E      		move.b	#1,$E(a5)
   39338/   73054 : 1B46 000D           		move.b	d6,$D(a5)
   39339/   73058 : 4A04                		tst.b	d4
   39340/   7305A : 6B0A                		bmi.s	loc_722A8
   39341/   7305C : 1B7C 00C0 000A      		move.b	#$C0,$A(a5)
   39342/   73062 : 2B41 0020           		move.l	d1,$20(a5)
   39343/   73066 :                     
   39344/   73066 :                     loc_722A8:
   39345/   73066 : 51CF FF7E           		dbf	d7,loc_72228
   39346/   7306A :                     
   39347/   7306A : 4A2E 0250           		tst.b	$250(a6)
   39348/   7306E : 6A06                		bpl.s	loc_722B8
   39349/   73070 : 08EE 0002 0340      		bset	#2,$340(a6)
   39350/   73076 :                     
   39351/   73076 :                     loc_722B8:
   39352/   73076 : 4A2E 0310           		tst.b	$310(a6)
   39353/   7307A : 6A06                		bpl.s	locret_722C4
   39354/   7307C : 08EE 0002 0370      		bset	#2,$370(a6)
   39355/   73082 :                     
   39356/   73082 :                     locret_722C4:
   39357/   73082 : 4E75                		rts	
   39358/   73084 :                     ; ===========================================================================
   39359/   73084 :                     
   39360/   73084 :                     loc_722C6:
   39361/   73084 : (MACRO)             		_clr.b	0(a6)
   39361/   73084 :  (MACRO-2)                          insn1op clr.b, 0(a6)
   39361/   73084 : 422E 0001                           !clr.b   1+0(a6)
   39361/   73087 :                                     !org    *-1
   39361/   73087 : 00                                  !dc.b   0
   39362/   73088 : 4E75                		rts	
   39363/   7308A :                     ; ===========================================================================
   39364/   7308A : 00FF F0D0           dword_722CC:	dc.l $FFF0D0
   39365/   7308E : 0000 0000           		dc.l 0
   39366/   73092 : 00FF F100           		dc.l $FFF100
   39367/   73096 : 00FF F130           		dc.l $FFF130
   39368/   7309A : 00FF F190           		dc.l $FFF190
   39369/   7309E : 00FF F1C0           		dc.l $FFF1C0
   39370/   730A2 : 00FF F1F0           		dc.l $FFF1F0
   39371/   730A6 : 00FF F1F0           		dc.l $FFF1F0
   39372/   730AA : 00FF F220           dword_722EC:	dc.l $FFF220
   39373/   730AE : 0000 0000           		dc.l 0
   39374/   730B2 : 00FF F250           		dc.l $FFF250
   39375/   730B6 : 00FF F280           		dc.l $FFF280
   39376/   730BA : 00FF F2B0           		dc.l $FFF2B0
   39377/   730BE : 00FF F2E0           		dc.l $FFF2E0
   39378/   730C2 : 00FF F310           		dc.l $FFF310
   39379/   730C6 : 00FF F310           		dc.l $FFF310
   39380/   730CA :                     ; ===========================================================================
   39381/   730CA :                     ; ---------------------------------------------------------------------------
   39382/   730CA :                     ; Play GHZ waterfall sound
   39383/   730CA :                     ; ---------------------------------------------------------------------------
   39384/   730CA :                     
   39385/   730CA :                     Sound_D0toDF:				; XREF: Sound_ChkValue
   39386/   730CA : 4A2E 0027           		tst.b	$27(a6)
   39387/   730CE : 6600 00B4           		bne.w	locret_723C6
   39388/   730D2 : 4A2E 0004           		tst.b	4(a6)
   39389/   730D6 : 6600 00AC           		bne.w	locret_723C6
   39390/   730DA : 4A2E 0024           		tst.b	$24(a6)
   39391/   730DE : 6600 00A4           		bne.w	locret_723C6
   39392/   730E2 : 2079 0007 2732      		movea.l	(Go_SoundD0).l,a0
   39393/   730E8 : 0407 00D0           		subi.b	#$D0,d7
   39394/   730EC : E54F                		lsl.w	#2,d7
   39395/   730EE : 2670 7000           		movea.l	(a0,d7.w),a3
   39396/   730F2 : 224B                		movea.l	a3,a1
   39397/   730F4 : 7000                		moveq	#0,d0
   39398/   730F6 : 3019                		move.w	(a1)+,d0
   39399/   730F8 : D08B                		add.l	a3,d0
   39400/   730FA : 2D40 0020           		move.l	d0,$20(a6)
   39401/   730FE : 1A19                		move.b	(a1)+,d5
   39402/   73100 : 1E19                		move.b	(a1)+,d7
   39403/   73102 : 5307                		subq.b	#1,d7
   39404/   73104 : 7C30                		moveq	#$30,d6
   39405/   73106 :                     
   39406/   73106 :                     loc_72348:
   39407/   73106 : 1829 0001           		move.b	1(a1),d4
   39408/   7310A : 6B0C                		bmi.s	loc_7235A
   39409/   7310C : 08EE 0002 0100      		bset	#2,$100(a6)
   39410/   73112 : 4BEE 0340           		lea	$340(a6),a5
   39411/   73116 : 600A                		bra.s	loc_72364
   39412/   73118 :                     ; ===========================================================================
   39413/   73118 :                     
   39414/   73118 :                     loc_7235A:
   39415/   73118 : 08EE 0002 01F0      		bset	#2,$1F0(a6)
   39416/   7311E : 4BEE 0370           		lea	$370(a6),a5
   39417/   73122 :                     
   39418/   73122 :                     loc_72364:
   39419/   73122 : 244D                		movea.l	a5,a2
   39420/   73124 : 700B                		moveq	#$B,d0
   39421/   73126 :                     
   39422/   73126 :                     loc_72368:
   39423/   73126 : 429A                		clr.l	(a2)+
   39424/   73128 : 51C8 FFFC           		dbf	d0,loc_72368
   39425/   7312C :                     
   39426/   7312C : 3A99                		move.w	(a1)+,(a5)
   39427/   7312E : 1B45 0002           		move.b	d5,2(a5)
   39428/   73132 : 7000                		moveq	#0,d0
   39429/   73134 : 3019                		move.w	(a1)+,d0
   39430/   73136 : D08B                		add.l	a3,d0
   39431/   73138 : 2B40 0004           		move.l	d0,4(a5)
   39432/   7313C : 3B59 0008           		move.w	(a1)+,8(a5)
   39433/   73140 : 1B7C 0001 000E      		move.b	#1,$E(a5)
   39434/   73146 : 1B46 000D           		move.b	d6,$D(a5)
   39435/   7314A : 4A04                		tst.b	d4
   39436/   7314C : 6B06                		bmi.s	loc_72396
   39437/   7314E : 1B7C 00C0 000A      		move.b	#$C0,$A(a5)
   39438/   73154 :                     
   39439/   73154 :                     loc_72396:
   39440/   73154 : 51CF FFB0           		dbf	d7,loc_72348
   39441/   73158 :                     
   39442/   73158 : 4A2E 0250           		tst.b	$250(a6)
   39443/   7315C : 6A06                		bpl.s	loc_723A6
   39444/   7315E : 08EE 0002 0340      		bset	#2,$340(a6)
   39445/   73164 :                     
   39446/   73164 :                     loc_723A6:
   39447/   73164 : 4A2E 0310           		tst.b	$310(a6)
   39448/   73168 : 6A1A                		bpl.s	locret_723C6
   39449/   7316A : 08EE 0002 0370      		bset	#2,$370(a6)
   39450/   73170 : 0004 001F           		ori.b	#$1F,d4
   39451/   73174 : 13C4 00C0 0011      		move.b	d4,($C00011).l
   39452/   7317A : 0844 0005           		bchg	#5,d4
   39453/   7317E : 13C4 00C0 0011      		move.b	d4,($C00011).l
   39454/   73184 :                     
   39455/   73184 :                     locret_723C6:
   39456/   73184 : 4E75                		rts	
   39457/   73186 :                     ; End of function Sound_ChkValue
   39458/   73186 :                     
   39459/   73186 :                     ; ===========================================================================
   39460/   73186 : 00FF F100           		dc.l $FFF100
   39461/   7318A : 00FF F1F0           		dc.l $FFF1F0
   39462/   7318E : 00FF F250           		dc.l $FFF250
   39463/   73192 : 00FF F310           		dc.l $FFF310
   39464/   73196 : 00FF F340           		dc.l $FFF340
   39465/   7319A : 00FF F370           		dc.l $FFF370
   39466/   7319E :                     
   39467/   7319E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39468/   7319E :                     
   39469/   7319E :                     
   39470/   7319E :                     Snd_FadeOut1:				; XREF: Sound_E0
   39471/   7319E : (MACRO)             		_clr.b	0(a6)
   39471/   7319E :  (MACRO-2)                          insn1op clr.b, 0(a6)
   39471/   7319E : 422E 0001                           !clr.b   1+0(a6)
   39471/   731A1 :                                     !org    *-1
   39471/   731A1 : 00                                  !dc.b   0
   39472/   731A2 : 4BEE 0220           		lea	$220(a6),a5
   39473/   731A6 : 7E05                		moveq	#5,d7
   39474/   731A8 :                     
   39475/   731A8 :                     loc_723EA:
   39476/   731A8 : 4A15                		tst.b	(a5)
   39477/   731AA : 6A00 0084           		bpl.w	loc_72472
   39478/   731AE : 0895 0007           		bclr	#7,(a5)
   39479/   731B2 : 7600                		moveq	#0,d3
   39480/   731B4 : 162D 0001           		move.b	1(a5),d3
   39481/   731B8 : 6B40                		bmi.s	loc_7243C
   39482/   731BA : 4EBA 0300           		jsr	sub_726FE(pc)
   39483/   731BE : 0C03 0004           		cmpi.b	#4,d3
   39484/   731C2 : 6610                		bne.s	loc_72416
   39485/   731C4 : 4A2E 0340           		tst.b	$340(a6)
   39486/   731C8 : 6A0A                		bpl.s	loc_72416
   39487/   731CA : 4BEE 0340           		lea	$340(a6),a5
   39488/   731CE : 226E 0020           		movea.l	$20(a6),a1
   39489/   731D2 : 6012                		bra.s	loc_72428
   39490/   731D4 :                     ; ===========================================================================
   39491/   731D4 :                     
   39492/   731D4 :                     loc_72416:
   39493/   731D4 : 5503                		subq.b	#2,d3
   39494/   731D6 : E50B                		lsl.b	#2,d3
   39495/   731D8 : 41FA FEB0           		lea	dword_722CC(pc),a0
   39496/   731DC : 264D                		movea.l	a5,a3
   39497/   731DE : 2A70 3000           		movea.l	(a0,d3.w),a5
   39498/   731E2 : 226E 0018           		movea.l	$18(a6),a1
   39499/   731E6 :                     
   39500/   731E6 :                     loc_72428:
   39501/   731E6 : 0895 0002           		bclr	#2,(a5)
   39502/   731EA : 08D5 0001           		bset	#1,(a5)
   39503/   731EE : 102D 000B           		move.b	$B(a5),d0
   39504/   731F2 : 4EBA 0818           		jsr	sub_72C4E(pc)
   39505/   731F6 : 2A4B                		movea.l	a3,a5
   39506/   731F8 : 6036                		bra.s	loc_72472
   39507/   731FA :                     ; ===========================================================================
   39508/   731FA :                     
   39509/   731FA :                     loc_7243C:
   39510/   731FA : 4EBA 0562           		jsr	sub_729A0(pc)
   39511/   731FE : 41EE 0370           		lea	$370(a6),a0
   39512/   73202 : 0C03 00E0           		cmpi.b	#$E0,d3
   39513/   73206 : 6710                		beq.s	loc_7245A
   39514/   73208 : 0C03 00C0           		cmpi.b	#$C0,d3
   39515/   7320C : 670A                		beq.s	loc_7245A
   39516/   7320E : E60B                		lsr.b	#3,d3
   39517/   73210 : 41FA FE78           		lea	dword_722CC(pc),a0
   39518/   73214 : 2070 3000           		movea.l	(a0,d3.w),a0
   39519/   73218 :                     
   39520/   73218 :                     loc_7245A:
   39521/   73218 : 0890 0002           		bclr	#2,(a0)
   39522/   7321C : 08D0 0001           		bset	#1,(a0)
   39523/   73220 : 0C28 00E0 0001      		cmpi.b	#$E0,1(a0)
   39524/   73226 : 6608                		bne.s	loc_72472
   39525/   73228 : 13E8 001F 00C0 0011 		move.b	$1F(a0),($C00011).l
   39526/   73230 :                     
   39527/   73230 :                     loc_72472:
   39528/   73230 : DAFC 0030           		adda.w	#$30,a5
   39529/   73234 : 51CF FF72           		dbf	d7,loc_723EA
   39530/   73238 :                     
   39531/   73238 : 4E75                		rts	
   39532/   7323A :                     ; End of function Snd_FadeOut1
   39533/   7323A :                     
   39534/   7323A :                     
   39535/   7323A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39536/   7323A :                     
   39537/   7323A :                     
   39538/   7323A :                     Snd_FadeOut2:				; XREF: Sound_E0
   39539/   7323A : 4BEE 0340           		lea	$340(a6),a5
   39540/   7323E : 4A15                		tst.b	(a5)
   39541/   73240 : 6A2A                		bpl.s	loc_724AE
   39542/   73242 : 0895 0007           		bclr	#7,(a5)
   39543/   73246 : 0815 0002           		btst	#2,(a5)
   39544/   7324A : 6620                		bne.s	loc_724AE
   39545/   7324C : 4EBA 027A           		jsr	loc_7270A(pc)
   39546/   73250 : 4BEE 0100           		lea	$100(a6),a5
   39547/   73254 : 0895 0002           		bclr	#2,(a5)
   39548/   73258 : 08D5 0001           		bset	#1,(a5)
   39549/   7325C : 4A15                		tst.b	(a5)
   39550/   7325E : 6A0C                		bpl.s	loc_724AE
   39551/   73260 : 226E 0018           		movea.l	$18(a6),a1
   39552/   73264 : 102D 000B           		move.b	$B(a5),d0
   39553/   73268 : 4EBA 07A2           		jsr	sub_72C4E(pc)
   39554/   7326C :                     
   39555/   7326C :                     loc_724AE:
   39556/   7326C : 4BEE 0370           		lea	$370(a6),a5
   39557/   73270 : 4A15                		tst.b	(a5)
   39558/   73272 : 6A2E                		bpl.s	locret_724E4
   39559/   73274 : 0895 0007           		bclr	#7,(a5)
   39560/   73278 : 0815 0002           		btst	#2,(a5)
   39561/   7327C : 6624                		bne.s	locret_724E4
   39562/   7327E : 4EBA 04E4           		jsr	loc_729A6(pc)
   39563/   73282 : 4BEE 01F0           		lea	$1F0(a6),a5
   39564/   73286 : 0895 0002           		bclr	#2,(a5)
   39565/   7328A : 08D5 0001           		bset	#1,(a5)
   39566/   7328E : 4A15                		tst.b	(a5)
   39567/   73290 : 6A10                		bpl.s	locret_724E4
   39568/   73292 : 0C2D 00E0 0001      		cmpi.b	#-$20,1(a5)
   39569/   73298 : 6608                		bne.s	locret_724E4
   39570/   7329A : 13ED 001F 00C0 0011 		move.b	$1F(a5),($C00011).l
   39571/   732A2 :                     
   39572/   732A2 :                     locret_724E4:
   39573/   732A2 : 4E75                		rts	
   39574/   732A4 :                     ; End of function Snd_FadeOut2
   39575/   732A4 :                     
   39576/   732A4 :                     ; ===========================================================================
   39577/   732A4 :                     ; ---------------------------------------------------------------------------
   39578/   732A4 :                     ; Fade out music
   39579/   732A4 :                     ; ---------------------------------------------------------------------------
   39580/   732A4 :                     
   39581/   732A4 :                     Sound_E0:				; XREF: Sound_ExIndex
   39582/   732A4 : 4EBA FEF8           		jsr	Snd_FadeOut1(pc)
   39583/   732A8 : 4EBA FF90           		jsr	Snd_FadeOut2(pc)
   39584/   732AC : 1D7C 0003 0006      		move.b	#3,6(a6)
   39585/   732B2 : 1D7C 0028 0004      		move.b	#$28,4(a6)
   39586/   732B8 : 422E 0040           		clr.b	$40(a6)
   39587/   732BC : 422E 002A           		clr.b	$2A(a6)
   39588/   732C0 : 4E75                		rts	
   39589/   732C2 :                     
   39590/   732C2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39591/   732C2 :                     
   39592/   732C2 :                     
   39593/   732C2 :                     sub_72504:				; XREF: sub_71B4C
   39594/   732C2 : 102E 0006           		move.b	6(a6),d0
   39595/   732C6 : 6706                		beq.s	loc_72510
   39596/   732C8 : 532E 0006           		subq.b	#1,6(a6)
   39597/   732CC : 4E75                		rts	
   39598/   732CE :                     ; ===========================================================================
   39599/   732CE :                     
   39600/   732CE :                     loc_72510:
   39601/   732CE : 532E 0004           		subq.b	#1,4(a6)
   39602/   732D2 : 6700 0088           		beq.w	Sound_E4
   39603/   732D6 : 1D7C 0003 0006      		move.b	#3,6(a6)
   39604/   732DC : 4BEE 0070           		lea	$70(a6),a5
   39605/   732E0 : 7E05                		moveq	#5,d7
   39606/   732E2 :                     
   39607/   732E2 :                     loc_72524:
   39608/   732E2 : 4A15                		tst.b	(a5)
   39609/   732E4 : 6A10                		bpl.s	loc_72538
   39610/   732E6 : 522D 0009           		addq.b	#1,9(a5)
   39611/   732EA : 6A06                		bpl.s	loc_72534
   39612/   732EC : 0895 0007           		bclr	#7,(a5)
   39613/   732F0 : 6004                		bra.s	loc_72538
   39614/   732F2 :                     ; ===========================================================================
   39615/   732F2 :                     
   39616/   732F2 :                     loc_72534:
   39617/   732F2 : 4EBA 077E           		jsr	sub_72CB4(pc)
   39618/   732F6 :                     
   39619/   732F6 :                     loc_72538:
   39620/   732F6 : DAFC 0030           		adda.w	#$30,a5
   39621/   732FA : 51CF FFE6           		dbf	d7,loc_72524
   39622/   732FE :                     
   39623/   732FE : 7E02                		moveq	#2,d7
   39624/   73300 :                     
   39625/   73300 :                     loc_72542:
   39626/   73300 : 4A15                		tst.b	(a5)
   39627/   73302 : 6A1A                		bpl.s	loc_72560
   39628/   73304 : 522D 0009           		addq.b	#1,9(a5)
   39629/   73308 : 0C2D 0010 0009      		cmpi.b	#$10,9(a5)
   39630/   7330E : 6506                		bcs.s	loc_72558
   39631/   73310 : 0895 0007           		bclr	#7,(a5)
   39632/   73314 : 6008                		bra.s	loc_72560
   39633/   73316 :                     ; ===========================================================================
   39634/   73316 :                     
   39635/   73316 :                     loc_72558:
   39636/   73316 : 1C2D 0009           		move.b	9(a5),d6
   39637/   7331A : 4EBA 040C           		jsr	sub_7296A(pc)
   39638/   7331E :                     
   39639/   7331E :                     loc_72560:
   39640/   7331E : DAFC 0030           		adda.w	#$30,a5
   39641/   73322 : 51CF FFDC           		dbf	d7,loc_72542
   39642/   73326 :                     
   39643/   73326 : 4E75                		rts	
   39644/   73328 :                     ; End of function sub_72504
   39645/   73328 :                     
   39646/   73328 :                     
   39647/   73328 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39648/   73328 :                     
   39649/   73328 :                     
   39650/   73328 :                     sub_7256A:				; XREF: Sound_E4; sub_725CA
   39651/   73328 : 7602                		moveq	#2,d3
   39652/   7332A : 7028                		moveq	#$28,d0
   39653/   7332C :                     
   39654/   7332C :                     loc_7256E:
   39655/   7332C : 1203                		move.b	d3,d1
   39656/   7332E : 4EBA 01BC           		jsr	sub_7272E(pc)
   39657/   73332 : 5801                		addq.b	#4,d1
   39658/   73334 : 4EBA 01B6           		jsr	sub_7272E(pc)
   39659/   73338 : 51CB FFF2           		dbf	d3,loc_7256E
   39660/   7333C :                     
   39661/   7333C : 7040                		moveq	#$40,d0
   39662/   7333E : 727F                		moveq	#$7F,d1
   39663/   73340 : 7802                		moveq	#2,d4
   39664/   73342 :                     
   39665/   73342 :                     loc_72584:
   39666/   73342 : 7603                		moveq	#3,d3
   39667/   73344 :                     
   39668/   73344 :                     loc_72586:
   39669/   73344 : 4EBA 01A6           		jsr	sub_7272E(pc)
   39670/   73348 : 4EBA 01D8           		jsr	sub_72764(pc)
   39671/   7334C : 5840                		addq.w	#4,d0
   39672/   7334E : 51CB FFF4           		dbf	d3,loc_72586
   39673/   73352 :                     
   39674/   73352 : 0400 000F           		subi.b	#$F,d0
   39675/   73356 : 51CC FFEA           		dbf	d4,loc_72584
   39676/   7335A :                     
   39677/   7335A : 4E75                		rts	
   39678/   7335C :                     ; End of function sub_7256A
   39679/   7335C :                     
   39680/   7335C :                     ; ===========================================================================
   39681/   7335C :                     ; ---------------------------------------------------------------------------
   39682/   7335C :                     ; Stop music
   39683/   7335C :                     ; ---------------------------------------------------------------------------
   39684/   7335C :                     
   39685/   7335C :                     Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
   39686/   7335C : 702B                		moveq	#$2B,d0
   39687/   7335E : 123C 0080           		move.b	#$80,d1
   39688/   73362 : 4EBA 0188           		jsr	sub_7272E(pc)
   39689/   73366 : 7027                		moveq	#$27,d0
   39690/   73368 : 7200                		moveq	#0,d1
   39691/   7336A : 4EBA 0180           		jsr	sub_7272E(pc)
   39692/   7336E : 204E                		movea.l	a6,a0
   39693/   73370 : 303C 00E3           		move.w	#$E3,d0
   39694/   73374 :                     
   39695/   73374 :                     loc_725B6:
   39696/   73374 : 4298                		clr.l	(a0)+
   39697/   73376 : 51C8 FFFC           		dbf	d0,loc_725B6
   39698/   7337A :                     
   39699/   7337A : 1D7C 0080 0009      		move.b	#$80,9(a6)	; set music to $80 (silence)
   39700/   73380 : 4EBA FFA6           		jsr	sub_7256A(pc)
   39701/   73384 : 6000 03EE           		bra.w	sub_729B6
   39702/   73388 :                     
   39703/   73388 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39704/   73388 :                     
   39705/   73388 :                     
   39706/   73388 :                     sub_725CA:				; XREF: Sound_ChkValue
   39707/   73388 : 204E                		movea.l	a6,a0
   39708/   7338A : (MACRO)             		_move.b	0(a6),d1
   39708/   7338A :  (MACRO-2)                          insn2op move.b, 0(a6),d1
   39708/   7338A : 122E 0001                                   !move.b   1+0(a6),d1
   39708/   7338D :                                             !org    *-1
   39708/   7338D : 00                                          !dc.b   0
   39709/   7338E : 142E 0027           		move.b	$27(a6),d2
   39710/   73392 : 162E 002A           		move.b	$2A(a6),d3
   39711/   73396 : 182E 0026           		move.b	$26(a6),d4
   39712/   7339A : 3A2E 000A           		move.w	$A(a6),d5
   39713/   7339E : 303C 0087           		move.w	#$87,d0
   39714/   733A2 :                     
   39715/   733A2 :                     loc_725E4:
   39716/   733A2 : 4298                		clr.l	(a0)+
   39717/   733A4 : 51C8 FFFC           		dbf	d0,loc_725E4
   39718/   733A8 :                     
   39719/   733A8 : (MACRO)             		_move.b	d1,0(a6)
   39719/   733A8 :  (MACRO-2)                          insn2op move.b, d1,0(a6)
   39719/   733A8 : 1D41 0001                                   !move.b   d1,1+0(a6)
   39719/   733AB :                                             !org    *-1
   39719/   733AB : 00                                          !dc.b   0
   39720/   733AC : 1D42 0027           		move.b	d2,$27(a6)
   39721/   733B0 : 1D43 002A           		move.b	d3,$2A(a6)
   39722/   733B4 : 1D44 0026           		move.b	d4,$26(a6)
   39723/   733B8 : 3D45 000A           		move.w	d5,$A(a6)
   39724/   733BC : 1D7C 0080 0009      		move.b	#$80,9(a6)
   39725/   733C2 : 4EBA FF64           		jsr	sub_7256A(pc)
   39726/   733C6 : 6000 03AC           		bra.w	sub_729B6
   39727/   733CA :                     ; End of function sub_725CA
   39728/   733CA :                     
   39729/   733CA :                     
   39730/   733CA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39731/   733CA :                     
   39732/   733CA :                     
   39733/   733CA :                     sub_7260C:				; XREF: sub_71B4C
   39734/   733CA : 1D6E 0002 0001      		move.b	2(a6),1(a6)
   39735/   733D0 : 41EE 004E           		lea	$4E(a6),a0
   39736/   733D4 : 7030                		moveq	#$30,d0
   39737/   733D6 : 7209                		moveq	#9,d1
   39738/   733D8 :                     
   39739/   733D8 :                     loc_7261A:
   39740/   733D8 : 5210                		addq.b	#1,(a0)
   39741/   733DA : D0C0                		adda.w	d0,a0
   39742/   733DC : 51C9 FFFA           		dbf	d1,loc_7261A
   39743/   733E0 :                     
   39744/   733E0 : 4E75                		rts	
   39745/   733E2 :                     ; End of function sub_7260C
   39746/   733E2 :                     
   39747/   733E2 :                     ; ===========================================================================
   39748/   733E2 :                     ; ---------------------------------------------------------------------------
   39749/   733E2 :                     ; Speed	up music
   39750/   733E2 :                     ; ---------------------------------------------------------------------------
   39751/   733E2 :                     
   39752/   733E2 :                     Sound_E2:				; XREF: Sound_ExIndex
   39753/   733E2 : 4A2E 0027           		tst.b	$27(a6)
   39754/   733E6 : 6614                		bne.s	loc_7263E
   39755/   733E8 : 1D6E 0029 0002      		move.b	$29(a6),2(a6)
   39756/   733EE : 1D6E 0029 0001      		move.b	$29(a6),1(a6)
   39757/   733F4 : 1D7C 0080 002A      		move.b	#$80,$2A(a6)
   39758/   733FA : 4E75                		rts	
   39759/   733FC :                     ; ===========================================================================
   39760/   733FC :                     
   39761/   733FC :                     loc_7263E:
   39762/   733FC : 1D6E 03C9 03A2      		move.b	$3C9(a6),$3A2(a6)
   39763/   73402 : 1D6E 03C9 03A1      		move.b	$3C9(a6),$3A1(a6)
   39764/   73408 : 1D7C 0080 03CA      		move.b	#$80,$3CA(a6)
   39765/   7340E : 4E75                		rts	
   39766/   73410 :                     ; ===========================================================================
   39767/   73410 :                     ; ---------------------------------------------------------------------------
   39768/   73410 :                     ; Change music back to normal speed
   39769/   73410 :                     ; ---------------------------------------------------------------------------
   39770/   73410 :                     
   39771/   73410 :                     Sound_E3:				; XREF: Sound_ExIndex
   39772/   73410 : 4A2E 0027           		tst.b	$27(a6)
   39773/   73414 : 6612                		bne.s	loc_7266A
   39774/   73416 : 1D6E 0028 0002      		move.b	$28(a6),2(a6)
   39775/   7341C : 1D6E 0028 0001      		move.b	$28(a6),1(a6)
   39776/   73422 : 422E 002A           		clr.b	$2A(a6)
   39777/   73426 : 4E75                		rts	
   39778/   73428 :                     ; ===========================================================================
   39779/   73428 :                     
   39780/   73428 :                     loc_7266A:
   39781/   73428 : 1D6E 03C8 03A2      		move.b	$3C8(a6),$3A2(a6)
   39782/   7342E : 1D6E 03C8 03A1      		move.b	$3C8(a6),$3A1(a6)
   39783/   73434 : 422E 03CA           		clr.b	$3CA(a6)
   39784/   73438 : 4E75                		rts	
   39785/   7343A :                     
   39786/   7343A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39787/   7343A :                     
   39788/   7343A :                     
   39789/   7343A :                     sub_7267C:				; XREF: sub_71B4C
   39790/   7343A : 4A2E 0025           		tst.b	$25(a6)
   39791/   7343E : 6706                		beq.s	loc_72688
   39792/   73440 : 532E 0025           		subq.b	#1,$25(a6)
   39793/   73444 : 4E75                		rts	
   39794/   73446 :                     ; ===========================================================================
   39795/   73446 :                     
   39796/   73446 :                     loc_72688:
   39797/   73446 : 4A2E 0026           		tst.b	$26(a6)
   39798/   7344A : 6748                		beq.s	loc_726D6
   39799/   7344C : 532E 0026           		subq.b	#1,$26(a6)
   39800/   73450 : 1D7C 0002 0025      		move.b	#2,$25(a6)
   39801/   73456 : 4BEE 0070           		lea	$70(a6),a5
   39802/   7345A : 7E05                		moveq	#5,d7
   39803/   7345C :                     
   39804/   7345C :                     loc_7269E:
   39805/   7345C : 4A15                		tst.b	(a5)
   39806/   7345E : 6A08                		bpl.s	loc_726AA
   39807/   73460 : 532D 0009           		subq.b	#1,9(a5)
   39808/   73464 : 4EBA 060C           		jsr	sub_72CB4(pc)
   39809/   73468 :                     
   39810/   73468 :                     loc_726AA:
   39811/   73468 : DAFC 0030           		adda.w	#$30,a5
   39812/   7346C : 51CF FFEE           		dbf	d7,loc_7269E
   39813/   73470 : 7E02                		moveq	#2,d7
   39814/   73472 :                     
   39815/   73472 :                     loc_726B4:
   39816/   73472 : 4A15                		tst.b	(a5)
   39817/   73474 : 6A14                		bpl.s	loc_726CC
   39818/   73476 : 532D 0009           		subq.b	#1,9(a5)
   39819/   7347A : 1C2D 0009           		move.b	9(a5),d6
   39820/   7347E : 0C06 0010           		cmpi.b	#$10,d6
   39821/   73482 : 6502                		bcs.s	loc_726C8
   39822/   73484 : 7C0F                		moveq	#$F,d6
   39823/   73486 :                     
   39824/   73486 :                     loc_726C8:
   39825/   73486 : 4EBA 02A0           		jsr	sub_7296A(pc)
   39826/   7348A :                     
   39827/   7348A :                     loc_726CC:
   39828/   7348A : DAFC 0030           		adda.w	#$30,a5
   39829/   7348E : 51CF FFE2           		dbf	d7,loc_726B4
   39830/   73492 : 4E75                		rts	
   39831/   73494 :                     ; ===========================================================================
   39832/   73494 :                     
   39833/   73494 :                     loc_726D6:
   39834/   73494 : 08AE 0002 0040      		bclr	#2,$40(a6)
   39835/   7349A : 422E 0024           		clr.b	$24(a6)
   39836/   7349E : 4E75                		rts	
   39837/   734A0 :                     ; End of function sub_7267C
   39838/   734A0 :                     
   39839/   734A0 :                     ; ===========================================================================
   39840/   734A0 :                     
   39841/   734A0 :                     loc_726E2:				; XREF: sub_71CCA
   39842/   734A0 : 0815 0001           		btst	#1,(a5)
   39843/   734A4 : 6614                		bne.s	locret_726FC
   39844/   734A6 : 0815 0002           		btst	#2,(a5)
   39845/   734AA : 660E                		bne.s	locret_726FC
   39846/   734AC : 7028                		moveq	#$28,d0
   39847/   734AE : 122D 0001           		move.b	1(a5),d1
   39848/   734B2 : 0001 00F0           		ori.b	#-$10,d1
   39849/   734B6 : 6000 0034           		bra.w	sub_7272E
   39850/   734BA :                     ; ===========================================================================
   39851/   734BA :                     
   39852/   734BA :                     locret_726FC:
   39853/   734BA : 4E75                		rts	
   39854/   734BC :                     
   39855/   734BC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39856/   734BC :                     
   39857/   734BC :                     
   39858/   734BC :                     sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
   39859/   734BC : 0815 0004           		btst	#4,(a5)
   39860/   734C0 : 6610                		bne.s	locret_72714
   39861/   734C2 : 0815 0002           		btst	#2,(a5)
   39862/   734C6 : 660A                		bne.s	locret_72714
   39863/   734C8 :                     
   39864/   734C8 :                     loc_7270A:				; XREF: Snd_FadeOut2
   39865/   734C8 : 7028                		moveq	#$28,d0
   39866/   734CA : 122D 0001           		move.b	1(a5),d1
   39867/   734CE : 6000 001C           		bra.w	sub_7272E
   39868/   734D2 :                     ; ===========================================================================
   39869/   734D2 :                     
   39870/   734D2 :                     locret_72714:
   39871/   734D2 : 4E75                		rts	
   39872/   734D4 :                     ; End of function sub_726FE
   39873/   734D4 :                     
   39874/   734D4 :                     ; ===========================================================================
   39875/   734D4 :                     
   39876/   734D4 :                     loc_72716:				; XREF: sub_72A5A
   39877/   734D4 : 0815 0002           		btst	#2,(a5)
   39878/   734D8 : 6604                		bne.s	locret_72720
   39879/   734DA : 6000 0004           		bra.w	sub_72722
   39880/   734DE :                     ; ===========================================================================
   39881/   734DE :                     
   39882/   734DE :                     locret_72720:
   39883/   734DE : 4E75                		rts	
   39884/   734E0 :                     
   39885/   734E0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39886/   734E0 :                     
   39887/   734E0 :                     
   39888/   734E0 :                     sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
   39889/   734E0 : 082D 0002 0001      		btst	#2,1(a5)
   39890/   734E6 : 6630                		bne.s	loc_7275A
   39891/   734E8 : D02D 0001           		add.b	1(a5),d0
   39892/   734EC :                     ; End of function sub_72722
   39893/   734EC :                     
   39894/   734EC :                     
   39895/   734EC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39896/   734EC :                     
   39897/   734EC :                     
   39898/   734EC :                     sub_7272E:				; XREF: loc_71E6A
   39899/   734EC : 1439 00A0 4000      		move.b	($A04000).l,d2
   39900/   734F2 : 0802 0007           		btst	#7,d2
   39901/   734F6 : 66F4                		bne.s	sub_7272E
   39902/   734F8 : 13C0 00A0 4000      		move.b	d0,($A04000).l
   39903/   734FE : 4E71                		nop	
   39904/   73500 : 4E71                		nop	
   39905/   73502 : 4E71                		nop	
   39906/   73504 :                     
   39907/   73504 :                     loc_72746:
   39908/   73504 : 1439 00A0 4000      		move.b	($A04000).l,d2
   39909/   7350A : 0802 0007           		btst	#7,d2
   39910/   7350E : 66F4                		bne.s	loc_72746
   39911/   73510 :                     
   39912/   73510 : 13C1 00A0 4001      		move.b	d1,($A04001).l
   39913/   73516 : 4E75                		rts	
   39914/   73518 :                     ; End of function sub_7272E
   39915/   73518 :                     
   39916/   73518 :                     ; ===========================================================================
   39917/   73518 :                     
   39918/   73518 :                     loc_7275A:				; XREF: sub_72722
   39919/   73518 : 142D 0001           		move.b	1(a5),d2
   39920/   7351C : 0882 0002           		bclr	#2,d2
   39921/   73520 : D002                		add.b	d2,d0
   39922/   73522 :                     
   39923/   73522 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39924/   73522 :                     
   39925/   73522 :                     
   39926/   73522 :                     sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
   39927/   73522 : 1439 00A0 4000      		move.b	($A04000).l,d2
   39928/   73528 : 0802 0007           		btst	#7,d2
   39929/   7352C : 66F4                		bne.s	sub_72764
   39930/   7352E : 13C0 00A0 4002      		move.b	d0,($A04002).l
   39931/   73534 : 4E71                		nop	
   39932/   73536 : 4E71                		nop	
   39933/   73538 : 4E71                		nop	
   39934/   7353A :                     
   39935/   7353A :                     loc_7277C:
   39936/   7353A : 1439 00A0 4000      		move.b	($A04000).l,d2
   39937/   73540 : 0802 0007           		btst	#7,d2
   39938/   73544 : 66F4                		bne.s	loc_7277C
   39939/   73546 :                     
   39940/   73546 : 13C1 00A0 4003      		move.b	d1,($A04003).l
   39941/   7354C : 4E75                		rts	
   39942/   7354E :                     ; End of function sub_72764
   39943/   7354E :                     
   39944/   7354E :                     ; ===========================================================================
   39945/   7354E : 025E 0284 02AB 02D3 word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
                    02FE 032D 035C 038F 
                    03C5                
   39946/   73560 : 03FF 043C 047C 0A5E 		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
                    0A84 0AAB 0AD3 0AFE 
                    0B2D                
   39947/   73572 : 0B5C 0B8F 0BC5 0BFF 		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
                    0C3C 0C7C 125E 1284 
   39948/   73582 : 12AB 12D3 12FE 132D 		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
                    135C 138F 13C5 13FF 
   39949/   73592 : 143C 147C 1A5E 1A84 		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
                    1AAB 1AD3 1AFE 1B2D 
   39950/   735A2 : 1B5C 1B8F 1BC5 1BFF 		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
                    1C3C 1C7C 225E 2284 
   39951/   735B2 : 22AB 22D3 22FE 232D 		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
                    235C 238F 23C5 23FF 
   39952/   735C2 : 243C 247C 2A5E 2A84 		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
                    2AAB 2AD3 2AFE 2B2D 
   39953/   735D2 : 2B5C 2B8F 2BC5 2BFF 		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
                    2C3C 2C7C 325E 3284 
   39954/   735E2 : 32AB 32D3 32FE 332D 		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
                    335C 338F 33C5 33FF 
   39955/   735F2 : 343C 347C 3A5E 3A84 		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
                    3AAB 3AD3 3AFE 3B2D 
   39956/   73602 : 3B5C 3B8F 3BC5 3BFF 		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
                    3C3C 3C7C           
   39957/   7360E :                     
   39958/   7360E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39959/   7360E :                     
   39960/   7360E :                     
   39961/   7360E :                     sub_72850:				; XREF: sub_71B4C
   39962/   7360E : 532D 000E           		subq.b	#1,$E(a5)
   39963/   73612 : 6610                		bne.s	loc_72866
   39964/   73614 : 0895 0004           		bclr	#4,(a5)
   39965/   73618 : 4EBA 001C           		jsr	sub_72878(pc)
   39966/   7361C : 4EBA 007C           		jsr	sub_728DC(pc)
   39967/   73620 : 6000 00CA           		bra.w	loc_7292E
   39968/   73624 :                     ; ===========================================================================
   39969/   73624 :                     
   39970/   73624 :                     loc_72866:
   39971/   73624 : 4EBA F516           		jsr	sub_71D9E(pc)
   39972/   73628 : 4EBA 00BA           		jsr	sub_72926(pc)
   39973/   7362C : 4EBA F536           		jsr	sub_71DC6(pc)
   39974/   73630 : 4EBA 006E           		jsr	sub_728E2(pc)
   39975/   73634 : 4E75                		rts	
   39976/   73636 :                     ; End of function sub_72850
   39977/   73636 :                     
   39978/   73636 :                     
   39979/   73636 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   39980/   73636 :                     
   39981/   73636 :                     
   39982/   73636 :                     sub_72878:				; XREF: sub_72850
   39983/   73636 : 0895 0001           		bclr	#1,(a5)
   39984/   7363A : 286D 0004           		movea.l	4(a5),a4
   39985/   7363E :                     
   39986/   7363E :                     loc_72880:
   39987/   7363E : 7A00                		moveq	#0,d5
   39988/   73640 : 1A1C                		move.b	(a4)+,d5
   39989/   73642 : 0C05 00E0           		cmpi.b	#$E0,d5
   39990/   73646 : 6506                		bcs.s	loc_72890
   39991/   73648 : 4EBA 01CE           		jsr	sub_72A5A(pc)
   39992/   7364C : 60F0                		bra.s	loc_72880
   39993/   7364E :                     ; ===========================================================================
   39994/   7364E :                     
   39995/   7364E :                     loc_72890:
   39996/   7364E : 4A05                		tst.b	d5
   39997/   73650 : 6A10                		bpl.s	loc_728A4
   39998/   73652 : 4EBA 0016           		jsr	sub_728AC(pc)
   39999/   73656 : 1A1C                		move.b	(a4)+,d5
   40000/   73658 : 4A05                		tst.b	d5
   40001/   7365A : 6A06                		bpl.s	loc_728A4
   40002/   7365C : 534C                		subq.w	#1,a4
   40003/   7365E : 6000 F49E           		bra.w	sub_71D60
   40004/   73662 :                     ; ===========================================================================
   40005/   73662 :                     
   40006/   73662 :                     loc_728A4:
   40007/   73662 : 4EBA F47A           		jsr	sub_71D40(pc)
   40008/   73666 : 6000 F496           		bra.w	sub_71D60
   40009/   7366A :                     ; End of function sub_72878
   40010/   7366A :                     
   40011/   7366A :                     
   40012/   7366A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   40013/   7366A :                     
   40014/   7366A :                     
   40015/   7366A :                     sub_728AC:				; XREF: sub_72878
   40016/   7366A : 0405 0081           		subi.b	#$81,d5
   40017/   7366E : 6518                		bcs.s	loc_728CA
   40018/   73670 : DA2D 0008           		add.b	8(a5),d5
   40019/   73674 : 0245 007F           		andi.w	#$7F,d5
   40020/   73678 : E34D                		lsl.w	#1,d5
   40021/   7367A : 41FA 0110           		lea	word_729CE(pc),a0
   40022/   7367E : 3B70 5000 0010      		move.w	(a0,d5.w),$10(a5)
   40023/   73684 : 6000 F478           		bra.w	sub_71D60
   40024/   73688 :                     ; ===========================================================================
   40025/   73688 :                     
   40026/   73688 :                     loc_728CA:
   40027/   73688 : 08D5 0001           		bset	#1,(a5)
   40028/   7368C : 3B7C FFFF 0010      		move.w	#-1,$10(a5)
   40029/   73692 : 4EBA F46A           		jsr	sub_71D60(pc)
   40030/   73696 : 6000 00C6           		bra.w	sub_729A0
   40031/   7369A :                     ; End of function sub_728AC
   40032/   7369A :                     
   40033/   7369A :                     
   40034/   7369A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   40035/   7369A :                     
   40036/   7369A :                     
   40037/   7369A :                     sub_728DC:				; XREF: sub_72850
   40038/   7369A : 3C2D 0010           		move.w	$10(a5),d6
   40039/   7369E : 6B3E                		bmi.s	loc_72920
   40040/   736A0 :                     ; End of function sub_728DC
   40041/   736A0 :                     
   40042/   736A0 :                     
   40043/   736A0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   40044/   736A0 :                     
   40045/   736A0 :                     
   40046/   736A0 :                     sub_728E2:				; XREF: sub_72850
   40047/   736A0 : 102D 001E           		move.b	$1E(a5),d0
   40048/   736A4 : 4880                		ext.w	d0
   40049/   736A6 : DC40                		add.w	d0,d6
   40050/   736A8 : 0815 0002           		btst	#2,(a5)
   40051/   736AC : 662E                		bne.s	locret_7291E
   40052/   736AE : 0815 0001           		btst	#1,(a5)
   40053/   736B2 : 6628                		bne.s	locret_7291E
   40054/   736B4 : 102D 0001           		move.b	1(a5),d0
   40055/   736B8 : 0C00 00E0           		cmpi.b	#$E0,d0
   40056/   736BC : 6604                		bne.s	loc_72904
   40057/   736BE : 103C 00C0           		move.b	#$C0,d0
   40058/   736C2 :                     
   40059/   736C2 :                     loc_72904:
   40060/   736C2 : 3206                		move.w	d6,d1
   40061/   736C4 : 0201 000F           		andi.b	#$F,d1
   40062/   736C8 : 8001                		or.b	d1,d0
   40063/   736CA : E84E                		lsr.w	#4,d6
   40064/   736CC : 0206 003F           		andi.b	#$3F,d6
   40065/   736D0 : 13C0 00C0 0011      		move.b	d0,($C00011).l
   40066/   736D6 : 13C6 00C0 0011      		move.b	d6,($C00011).l
   40067/   736DC :                     
   40068/   736DC :                     locret_7291E:
   40069/   736DC : 4E75                		rts	
   40070/   736DE :                     ; End of function sub_728E2
   40071/   736DE :                     
   40072/   736DE :                     ; ===========================================================================
   40073/   736DE :                     
   40074/   736DE :                     loc_72920:				; XREF: sub_728DC
   40075/   736DE : 08D5 0001           		bset	#1,(a5)
   40076/   736E2 : 4E75                		rts	
   40077/   736E4 :                     
   40078/   736E4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   40079/   736E4 :                     
   40080/   736E4 :                     
   40081/   736E4 :                     sub_72926:				; XREF: sub_72850
   40082/   736E4 : 4A2D 000B           		tst.b	$B(a5)
   40083/   736E8 : 6700 005E           		beq.w	locret_7298A
   40084/   736EC :                     
   40085/   736EC :                     loc_7292E:				; XREF: sub_72850
   40086/   736EC : 1C2D 0009           		move.b	9(a5),d6
   40087/   736F0 : 7000                		moveq	#0,d0
   40088/   736F2 : 102D 000B           		move.b	$B(a5),d0
   40089/   736F6 : 6730                		beq.s	sub_7296A
   40090/   736F8 : 2079 0007 2742      		movea.l	(Go_PSGIndex).l,a0
   40091/   736FE : 5340                		subq.w	#1,d0
   40092/   73700 : E548                		lsl.w	#2,d0
   40093/   73702 : 2070 0000           		movea.l	(a0,d0.w),a0
   40094/   73706 : 102D 000C           		move.b	$C(a5),d0
   40095/   7370A : 1030 0000           		move.b	(a0,d0.w),d0
   40096/   7370E : 522D 000C           		addq.b	#1,$C(a5)
   40097/   73712 : 0800 0007           		btst	#7,d0
   40098/   73716 : 6706                		beq.s	loc_72960
   40099/   73718 : 0C00 0080           		cmpi.b	#$80,d0
   40100/   7371C : 673A                		beq.s	loc_7299A
   40101/   7371E :                     
   40102/   7371E :                     loc_72960:
   40103/   7371E : DC40                		add.w	d0,d6
   40104/   73720 : 0C06 0010           		cmpi.b	#$10,d6
   40105/   73724 : 6502                		bcs.s	sub_7296A
   40106/   73726 : 7C0F                		moveq	#$F,d6
   40107/   73728 :                     ; End of function sub_72926
   40108/   73728 :                     
   40109/   73728 :                     
   40110/   73728 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   40111/   73728 :                     
   40112/   73728 :                     
   40113/   73728 :                     sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
   40114/   73728 : 0815 0001           		btst	#1,(a5)
   40115/   7372C : 661A                		bne.s	locret_7298A
   40116/   7372E : 0815 0002           		btst	#2,(a5)
   40117/   73732 : 6614                		bne.s	locret_7298A
   40118/   73734 : 0815 0004           		btst	#4,(a5)
   40119/   73738 : 6610                		bne.s	loc_7298C
   40120/   7373A :                     
   40121/   7373A :                     loc_7297C:
   40122/   7373A : 8C2D 0001           		or.b	1(a5),d6
   40123/   7373E : 0606 0010           		addi.b	#$10,d6
   40124/   73742 : 13C6 00C0 0011      		move.b	d6,($C00011).l
   40125/   73748 :                     
   40126/   73748 :                     locret_7298A:
   40127/   73748 : 4E75                		rts	
   40128/   7374A :                     ; ===========================================================================
   40129/   7374A :                     
   40130/   7374A :                     loc_7298C:
   40131/   7374A : 4A2D 0013           		tst.b	$13(a5)
   40132/   7374E : 67EA                		beq.s	loc_7297C
   40133/   73750 : 4A2D 0012           		tst.b	$12(a5)
   40134/   73754 : 66E4                		bne.s	loc_7297C
   40135/   73756 : 4E75                		rts	
   40136/   73758 :                     ; End of function sub_7296A
   40137/   73758 :                     
   40138/   73758 :                     ; ===========================================================================
   40139/   73758 :                     
   40140/   73758 :                     loc_7299A:				; XREF: sub_72926
   40141/   73758 : 532D 000C           		subq.b	#1,$C(a5)
   40142/   7375C : 4E75                		rts	
   40143/   7375E :                     
   40144/   7375E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   40145/   7375E :                     
   40146/   7375E :                     
   40147/   7375E :                     sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
   40148/   7375E : 0815 0002           		btst	#2,(a5)
   40149/   73762 : 660E                		bne.s	locret_729B4
   40150/   73764 :                     
   40151/   73764 :                     loc_729A6:				; XREF: Snd_FadeOut2
   40152/   73764 : 102D 0001           		move.b	1(a5),d0
   40153/   73768 : 0000 001F           		ori.b	#$1F,d0
   40154/   7376C : 13C0 00C0 0011      		move.b	d0,($C00011).l
   40155/   73772 :                     
   40156/   73772 :                     locret_729B4:
   40157/   73772 : 4E75                		rts	
   40158/   73774 :                     ; End of function sub_729A0
   40159/   73774 :                     
   40160/   73774 :                     
   40161/   73774 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   40162/   73774 :                     
   40163/   73774 :                     
   40164/   73774 :                     sub_729B6:				; XREF: loc_71E7C
   40165/   73774 : 41F9 00C0 0011      		lea	($C00011).l,a0
   40166/   7377A : 10BC 009F           		move.b	#$9F,(a0)
   40167/   7377E : 10BC 00BF           		move.b	#$BF,(a0)
   40168/   73782 : 10BC 00DF           		move.b	#$DF,(a0)
   40169/   73786 : 10BC 00FF           		move.b	#$FF,(a0)
   40170/   7378A : 4E75                		rts	
   40171/   7378C :                     ; End of function sub_729B6
   40172/   7378C :                     
   40173/   7378C :                     ; ===========================================================================
   40174/   7378C : 0356 0326 02F9 02CE word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
                    02A5 0280 025C 023A 
                    021A                
   40175/   7379E : 01FB 01DF 01C4 01AB 		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
                    0193 017D 0167 0153 
                    0140                
   40176/   737B0 : 012E 011D 010D 00FE 		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
                    00EF 00E2 00D6 00C9 
                    00BE 00B4           
   40177/   737C4 : 00A9 00A0 0097 008F 		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
                    0087 007F 0078 0071 
                    006B 0065           
   40178/   737D8 : 005F 005A 0055 0050 		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
                    004B 0047 0043 0040 
                    003C 0039           
   40179/   737EC : 0036 0033 0030 002D 		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
                    002B 0028 0026 0024 
                    0022 0020           
   40180/   73800 : 001F 001D 001B 001A 		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
                    0018 0017 0016 0015 
                    0013 0012           
   40181/   73814 : 0011 0000           		dc.w $11, 0
   40182/   73818 :                     
   40183/   73818 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   40184/   73818 :                     
   40185/   73818 :                     
   40186/   73818 :                     sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
   40187/   73818 : 0445 00E0           		subi.w	#$E0,d5
   40188/   7381C : E54D                		lsl.w	#2,d5
   40189/   7381E : 4EFB 5002           		jmp	loc_72A64(pc,d5.w)
   40190/   73822 :                     ; End of function sub_72A5A
   40191/   73822 :                     
   40192/   73822 :                     ; ===========================================================================
   40193/   73822 :                     
   40194/   73822 :                     loc_72A64:
   40195/   73822 : 6000 0066           		bra.w	loc_72ACC
   40196/   73826 :                     ; ===========================================================================
   40197/   73826 : 6000 0082           		bra.w	loc_72AEC
   40198/   7382A :                     ; ===========================================================================
   40199/   7382A : 6000 0084           		bra.w	loc_72AF2
   40200/   7382E :                     ; ===========================================================================
   40201/   7382E : 6000 0086           		bra.w	loc_72AF8
   40202/   73832 :                     ; ===========================================================================
   40203/   73832 : 6000 009E           		bra.w	loc_72B14
   40204/   73836 :                     ; ===========================================================================
   40205/   73836 : 6000 0124           		bra.w	loc_72B9E
   40206/   7383A :                     ; ===========================================================================
   40207/   7383A : 6000 0126           		bra.w	loc_72BA4
   40208/   7383E :                     ; ===========================================================================
   40209/   7383E : 6000 012C           		bra.w	loc_72BAE
   40210/   73842 :                     ; ===========================================================================
   40211/   73842 : 6000 012E           		bra.w	loc_72BB4
   40212/   73846 :                     ; ===========================================================================
   40213/   73846 : 6000 0134           		bra.w	loc_72BBE
   40214/   7384A :                     ; ===========================================================================
   40215/   7384A : 6000 0138           		bra.w	loc_72BC6
   40216/   7384E :                     ; ===========================================================================
   40217/   7384E : 6000 013E           		bra.w	loc_72BD0
   40218/   73852 :                     ; ===========================================================================
   40219/   73852 : 6000 0150           		bra.w	loc_72BE6
   40220/   73856 :                     ; ===========================================================================
   40221/   73856 : 6000 0154           		bra.w	loc_72BEE
   40222/   7385A :                     ; ===========================================================================
   40223/   7385A : 6000 0156           		bra.w	loc_72BF4
   40224/   7385E :                     ; ===========================================================================
   40225/   7385E : 6000 0184           		bra.w	loc_72C26
   40226/   73862 :                     ; ===========================================================================
   40227/   73862 : 6000 028A           		bra.w	loc_72D30
   40228/   73866 :                     ; ===========================================================================
   40229/   73866 : 6000 02A8           		bra.w	loc_72D52
   40230/   7386A :                     ; ===========================================================================
   40231/   7386A : 6000 02AA           		bra.w	loc_72D58
   40232/   7386E :                     ; ===========================================================================
   40233/   7386E : 6000 0354           		bra.w	loc_72E06
   40234/   73872 :                     ; ===========================================================================
   40235/   73872 : 6000 036A           		bra.w	loc_72E20
   40236/   73876 :                     ; ===========================================================================
   40237/   73876 : 6000 036C           		bra.w	loc_72E26
   40238/   7387A :                     ; ===========================================================================
   40239/   7387A : 6000 036E           		bra.w	loc_72E2C
   40240/   7387E :                     ; ===========================================================================
   40241/   7387E : 6000 0376           		bra.w	loc_72E38
   40242/   73882 :                     ; ===========================================================================
   40243/   73882 : 6000 038C           		bra.w	loc_72E52
   40244/   73886 :                     ; ===========================================================================
   40245/   73886 : 6000 039A           		bra.w	loc_72E64
   40246/   7388A :                     ; ===========================================================================
   40247/   7388A :                     
   40248/   7388A :                     loc_72ACC:				; XREF: loc_72A64
   40249/   7388A : 121C                		move.b	(a4)+,d1
   40250/   7388C : 4A2D 0001           		tst.b	1(a5)
   40251/   73890 : 6B16                		bmi.s	locret_72AEA
   40252/   73892 : 102D 000A           		move.b	$A(a5),d0
   40253/   73896 : 0200 0037           		andi.b	#$37,d0
   40254/   7389A : 8200                		or.b	d0,d1
   40255/   7389C : 1B41 000A           		move.b	d1,$A(a5)
   40256/   738A0 : 103C 00B4           		move.b	#$B4,d0
   40257/   738A4 : 6000 FC2E           		bra.w	loc_72716
   40258/   738A8 :                     ; ===========================================================================
   40259/   738A8 :                     
   40260/   738A8 :                     locret_72AEA:
   40261/   738A8 : 4E75                		rts	
   40262/   738AA :                     ; ===========================================================================
   40263/   738AA :                     
   40264/   738AA :                     loc_72AEC:				; XREF: loc_72A64
   40265/   738AA : 1B5C 001E           		move.b	(a4)+,$1E(a5)
   40266/   738AE : 4E75                		rts	
   40267/   738B0 :                     ; ===========================================================================
   40268/   738B0 :                     
   40269/   738B0 :                     loc_72AF2:				; XREF: loc_72A64
   40270/   738B0 : 1D5C 0007           		move.b	(a4)+,7(a6)
   40271/   738B4 : 4E75                		rts	
   40272/   738B6 :                     ; ===========================================================================
   40273/   738B6 :                     
   40274/   738B6 :                     loc_72AF8:				; XREF: loc_72A64
   40275/   738B6 : 7000                		moveq	#0,d0
   40276/   738B8 : 102D 000D           		move.b	$D(a5),d0
   40277/   738BC : 2875 0000           		movea.l	(a5,d0.w),a4
   40278/   738C0 : 2BBC 0000 0000 0000 		move.l	#0,(a5,d0.w)
   40279/   738C8 : 544C                		addq.w	#2,a4
   40280/   738CA : 5800                		addq.b	#4,d0
   40281/   738CC : 1B40 000D           		move.b	d0,$D(a5)
   40282/   738D0 : 4E75                		rts	
   40283/   738D2 :                     ; ===========================================================================
   40284/   738D2 :                     
   40285/   738D2 :                     loc_72B14:				; XREF: loc_72A64
   40286/   738D2 : 204E                		movea.l	a6,a0
   40287/   738D4 : 43EE 03A0           		lea	$3A0(a6),a1
   40288/   738D8 : 303C 0087           		move.w	#$87,d0
   40289/   738DC :                     
   40290/   738DC :                     loc_72B1E:
   40291/   738DC : 20D9                		move.l	(a1)+,(a0)+
   40292/   738DE : 51C8 FFFC           		dbf	d0,loc_72B1E
   40293/   738E2 :                     
   40294/   738E2 : 08EE 0002 0040      		bset	#2,$40(a6)
   40295/   738E8 : 264D                		movea.l	a5,a3
   40296/   738EA : 1C3C 0028           		move.b	#$28,d6
   40297/   738EE : 9C2E 0026           		sub.b	$26(a6),d6
   40298/   738F2 : 7E05                		moveq	#5,d7
   40299/   738F4 : 4BEE 0070           		lea	$70(a6),a5
   40300/   738F8 :                     
   40301/   738F8 :                     loc_72B3A:
   40302/   738F8 : 0815 0007           		btst	#7,(a5)
   40303/   738FC : 671C                		beq.s	loc_72B5C
   40304/   738FE : 08D5 0001           		bset	#1,(a5)
   40305/   73902 : DD2D 0009           		add.b	d6,9(a5)
   40306/   73906 : 0815 0002           		btst	#2,(a5)
   40307/   7390A : 660E                		bne.s	loc_72B5C
   40308/   7390C : 7000                		moveq	#0,d0
   40309/   7390E : 102D 000B           		move.b	$B(a5),d0
   40310/   73912 : 226E 0018           		movea.l	$18(a6),a1
   40311/   73916 : 4EBA 00F4           		jsr	sub_72C4E(pc)
   40312/   7391A :                     
   40313/   7391A :                     loc_72B5C:
   40314/   7391A : DAFC 0030           		adda.w	#$30,a5
   40315/   7391E : 51CF FFD8           		dbf	d7,loc_72B3A
   40316/   73922 :                     
   40317/   73922 : 7E02                		moveq	#2,d7
   40318/   73924 :                     
   40319/   73924 :                     loc_72B66:
   40320/   73924 : 0815 0007           		btst	#7,(a5)
   40321/   73928 : 670C                		beq.s	loc_72B78
   40322/   7392A : 08D5 0001           		bset	#1,(a5)
   40323/   7392E : 4EBA FE2E           		jsr	sub_729A0(pc)
   40324/   73932 : DD2D 0009           		add.b	d6,9(a5)
   40325/   73936 :                     
   40326/   73936 :                     loc_72B78:
   40327/   73936 : DAFC 0030           		adda.w	#$30,a5
   40328/   7393A : 51CF FFE8           		dbf	d7,loc_72B66
   40329/   7393E : 2A4B                		movea.l	a3,a5
   40330/   73940 : 1D7C 0080 0024      		move.b	#$80,$24(a6)
   40331/   73946 : 1D7C 0028 0026      		move.b	#$28,$26(a6)
   40332/   7394C : 422E 0027           		clr.b	$27(a6)
   40333/   73950 : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l
   40334/   73958 : 504F                		addq.w	#8,sp
   40335/   7395A : 4E75                		rts	
   40336/   7395C :                     ; ===========================================================================
   40337/   7395C :                     
   40338/   7395C :                     loc_72B9E:				; XREF: loc_72A64
   40339/   7395C : 1B5C 0002           		move.b	(a4)+,2(a5)
   40340/   73960 : 4E75                		rts	
   40341/   73962 :                     ; ===========================================================================
   40342/   73962 :                     
   40343/   73962 :                     loc_72BA4:				; XREF: loc_72A64
   40344/   73962 : 101C                		move.b	(a4)+,d0
   40345/   73964 : D12D 0009           		add.b	d0,9(a5)
   40346/   73968 : 6000 0108           		bra.w	sub_72CB4
   40347/   7396C :                     ; ===========================================================================
   40348/   7396C :                     
   40349/   7396C :                     loc_72BAE:				; XREF: loc_72A64
   40350/   7396C : 08D5 0004           		bset	#4,(a5)
   40351/   73970 : 4E75                		rts	
   40352/   73972 :                     ; ===========================================================================
   40353/   73972 :                     
   40354/   73972 :                     loc_72BB4:				; XREF: loc_72A64
   40355/   73972 : 1B54 0012           		move.b	(a4),$12(a5)
   40356/   73976 : 1B5C 0013           		move.b	(a4)+,$13(a5)
   40357/   7397A : 4E75                		rts	
   40358/   7397C :                     ; ===========================================================================
   40359/   7397C :                     
   40360/   7397C :                     loc_72BBE:				; XREF: loc_72A64
   40361/   7397C : 101C                		move.b	(a4)+,d0
   40362/   7397E : D12D 0008           		add.b	d0,8(a5)
   40363/   73982 : 4E75                		rts	
   40364/   73984 :                     ; ===========================================================================
   40365/   73984 :                     
   40366/   73984 :                     loc_72BC6:				; XREF: loc_72A64
   40367/   73984 : 1D54 0002           		move.b	(a4),2(a6)
   40368/   73988 : 1D5C 0001           		move.b	(a4)+,1(a6)
   40369/   7398C : 4E75                		rts	
   40370/   7398E :                     ; ===========================================================================
   40371/   7398E :                     
   40372/   7398E :                     loc_72BD0:				; XREF: loc_72A64
   40373/   7398E : 41EE 0040           		lea	$40(a6),a0
   40374/   73992 : 101C                		move.b	(a4)+,d0
   40375/   73994 : 7230                		moveq	#$30,d1
   40376/   73996 : 7409                		moveq	#9,d2
   40377/   73998 :                     
   40378/   73998 :                     loc_72BDA:
   40379/   73998 : 1140 0002           		move.b	d0,2(a0)
   40380/   7399C : D0C1                		adda.w	d1,a0
   40381/   7399E : 51CA FFF8           		dbf	d2,loc_72BDA
   40382/   739A2 :                     
   40383/   739A2 : 4E75                		rts	
   40384/   739A4 :                     ; ===========================================================================
   40385/   739A4 :                     
   40386/   739A4 :                     loc_72BE6:				; XREF: loc_72A64
   40387/   739A4 : 101C                		move.b	(a4)+,d0
   40388/   739A6 : D12D 0009           		add.b	d0,9(a5)
   40389/   739AA : 4E75                		rts	
   40390/   739AC :                     ; ===========================================================================
   40391/   739AC :                     
   40392/   739AC :                     loc_72BEE:				; XREF: loc_72A64
   40393/   739AC : 422E 002C           		clr.b	$2C(a6)
   40394/   739B0 : 4E75                		rts	
   40395/   739B2 :                     ; ===========================================================================
   40396/   739B2 :                     
   40397/   739B2 :                     loc_72BF4:				; XREF: loc_72A64
   40398/   739B2 : 0895 0007           		bclr	#7,(a5)
   40399/   739B6 : 0895 0004           		bclr	#4,(a5)
   40400/   739BA : 4EBA FB00           		jsr	sub_726FE(pc)
   40401/   739BE : 4A2E 0250           		tst.b	$250(a6)
   40402/   739C2 : 6B1C                		bmi.s	loc_72C22
   40403/   739C4 : 264D                		movea.l	a5,a3
   40404/   739C6 : 4BEE 0100           		lea	$100(a6),a5
   40405/   739CA : 226E 0018           		movea.l	$18(a6),a1
   40406/   739CE : 0895 0002           		bclr	#2,(a5)
   40407/   739D2 : 08D5 0001           		bset	#1,(a5)
   40408/   739D6 : 102D 000B           		move.b	$B(a5),d0
   40409/   739DA : 4EBA 0030           		jsr	sub_72C4E(pc)
   40410/   739DE : 2A4B                		movea.l	a3,a5
   40411/   739E0 :                     
   40412/   739E0 :                     loc_72C22:
   40413/   739E0 : 504F                		addq.w	#8,sp
   40414/   739E2 : 4E75                		rts	
   40415/   739E4 :                     ; ===========================================================================
   40416/   739E4 :                     
   40417/   739E4 :                     loc_72C26:				; XREF: loc_72A64
   40418/   739E4 : 7000                		moveq	#0,d0
   40419/   739E6 : 101C                		move.b	(a4)+,d0
   40420/   739E8 : 1B40 000B           		move.b	d0,$B(a5)
   40421/   739EC : 0815 0002           		btst	#2,(a5)
   40422/   739F0 : 6600 0076           		bne.w	locret_72CAA
   40423/   739F4 : 226E 0018           		movea.l	$18(a6),a1
   40424/   739F8 : 4A2E 000E           		tst.b	$E(a6)
   40425/   739FC : 670E                		beq.s	sub_72C4E
   40426/   739FE : 226D 0020           		movea.l	$20(a5),a1
   40427/   73A02 : 4A2E 000E           		tst.b	$E(a6)
   40428/   73A06 : 6B04                		bmi.s	sub_72C4E
   40429/   73A08 : 226E 0020           		movea.l	$20(a6),a1
   40430/   73A0C :                     
   40431/   73A0C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   40432/   73A0C :                     
   40433/   73A0C :                     
   40434/   73A0C :                     sub_72C4E:				; XREF: Snd_FadeOut1; et al
   40435/   73A0C : 5340                		subq.w	#1,d0
   40436/   73A0E : 6B0A                		bmi.s	loc_72C5C
   40437/   73A10 : 323C 0019           		move.w	#$19,d1
   40438/   73A14 :                     
   40439/   73A14 :                     loc_72C56:
   40440/   73A14 : D2C1                		adda.w	d1,a1
   40441/   73A16 : 51C8 FFFC           		dbf	d0,loc_72C56
   40442/   73A1A :                     
   40443/   73A1A :                     loc_72C5C:
   40444/   73A1A : 1219                		move.b	(a1)+,d1
   40445/   73A1C : 1B41 001F           		move.b	d1,$1F(a5)
   40446/   73A20 : 1801                		move.b	d1,d4
   40447/   73A22 : 103C 00B0           		move.b	#$B0,d0
   40448/   73A26 : 4EBA FAB8           		jsr	sub_72722(pc)
   40449/   73A2A : 45FA 00AA           		lea	byte_72D18(pc),a2
   40450/   73A2E : 7613                		moveq	#$13,d3
   40451/   73A30 :                     
   40452/   73A30 :                     loc_72C72:
   40453/   73A30 : 101A                		move.b	(a2)+,d0
   40454/   73A32 : 1219                		move.b	(a1)+,d1
   40455/   73A34 : 4EBA FAAA           		jsr	sub_72722(pc)
   40456/   73A38 : 51CB FFF6           		dbf	d3,loc_72C72
   40457/   73A3C : 7A03                		moveq	#3,d5
   40458/   73A3E : 0244 0007           		andi.w	#7,d4
   40459/   73A42 : 183B 4026           		move.b	byte_72CAC(pc,d4.w),d4
   40460/   73A46 : 162D 0009           		move.b	9(a5),d3
   40461/   73A4A :                     
   40462/   73A4A :                     loc_72C8C:
   40463/   73A4A : 101A                		move.b	(a2)+,d0
   40464/   73A4C : 1219                		move.b	(a1)+,d1
   40465/   73A4E : E20C                		lsr.b	#1,d4
   40466/   73A50 : 6402                		bcc.s	loc_72C96
   40467/   73A52 : D203                		add.b	d3,d1
   40468/   73A54 :                     
   40469/   73A54 :                     loc_72C96:
   40470/   73A54 : 4EBA FA8A           		jsr	sub_72722(pc)
   40471/   73A58 : 51CD FFF0           		dbf	d5,loc_72C8C
   40472/   73A5C : 103C 00B4           		move.b	#$B4,d0
   40473/   73A60 : 122D 000A           		move.b	$A(a5),d1
   40474/   73A64 : 4EBA FA7A           		jsr	sub_72722(pc)
   40475/   73A68 :                     
   40476/   73A68 :                     locret_72CAA:
   40477/   73A68 : 4E75                		rts	
   40478/   73A6A :                     ; End of function sub_72C4E
   40479/   73A6A :                     
   40480/   73A6A :                     ; ===========================================================================
   40481/   73A6A : 0808 0808 0A0E 0E0F byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
   40482/   73A72 :                     
   40483/   73A72 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   40484/   73A72 :                     
   40485/   73A72 :                     
   40486/   73A72 :                     sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
   40487/   73A72 : 0815 0002           		btst	#2,(a5)
   40488/   73A76 : 665C                		bne.s	locret_72D16
   40489/   73A78 : 7000                		moveq	#0,d0
   40490/   73A7A : 102D 000B           		move.b	$B(a5),d0
   40491/   73A7E : 226E 0018           		movea.l	$18(a6),a1
   40492/   73A82 : 4A2E 000E           		tst.b	$E(a6)
   40493/   73A86 : 670E                		beq.s	loc_72CD8
   40494/   73A88 : 226E 0020           		movea.l	$20(a6),a1
   40495/   73A8C : 4A2E 000E           		tst.b	$E(a6)
   40496/   73A90 : 6B04                		bmi.s	loc_72CD8
   40497/   73A92 : 226E 0020           		movea.l	$20(a6),a1
   40498/   73A96 :                     
   40499/   73A96 :                     loc_72CD8:
   40500/   73A96 : 5340                		subq.w	#1,d0
   40501/   73A98 : 6B0A                		bmi.s	loc_72CE6
   40502/   73A9A : 323C 0019           		move.w	#$19,d1
   40503/   73A9E :                     
   40504/   73A9E :                     loc_72CE0:
   40505/   73A9E : D2C1                		adda.w	d1,a1
   40506/   73AA0 : 51C8 FFFC           		dbf	d0,loc_72CE0
   40507/   73AA4 :                     
   40508/   73AA4 :                     loc_72CE6:
   40509/   73AA4 : D2FC 0015           		adda.w	#$15,a1
   40510/   73AA8 : 45FA 0040           		lea	byte_72D2C(pc),a2
   40511/   73AAC : 102D 001F           		move.b	$1F(a5),d0
   40512/   73AB0 : 0240 0007           		andi.w	#7,d0
   40513/   73AB4 : 183B 00B4           		move.b	byte_72CAC(pc,d0.w),d4
   40514/   73AB8 : 162D 0009           		move.b	9(a5),d3
   40515/   73ABC : 6B16                		bmi.s	locret_72D16
   40516/   73ABE : 7A03                		moveq	#3,d5
   40517/   73AC0 :                     
   40518/   73AC0 :                     loc_72D02:
   40519/   73AC0 : 101A                		move.b	(a2)+,d0
   40520/   73AC2 : 1219                		move.b	(a1)+,d1
   40521/   73AC4 : E20C                		lsr.b	#1,d4
   40522/   73AC6 : 6408                		bcc.s	loc_72D12
   40523/   73AC8 : D203                		add.b	d3,d1
   40524/   73ACA : 6504                		bcs.s	loc_72D12
   40525/   73ACC : 4EBA FA12           		jsr	sub_72722(pc)
   40526/   73AD0 :                     
   40527/   73AD0 :                     loc_72D12:
   40528/   73AD0 : 51CD FFEE           		dbf	d5,loc_72D02
   40529/   73AD4 :                     
   40530/   73AD4 :                     locret_72D16:
   40531/   73AD4 : 4E75                		rts	
   40532/   73AD6 :                     ; End of function sub_72CB4
   40533/   73AD6 :                     
   40534/   73AD6 :                     ; ===========================================================================
   40535/   73AD6 : 3038 343C 5058 545C byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
                    6068                
   40536/   73AE0 : 646C 7078 747C 8088 		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
                    848C                
   40537/   73AEA : 4048 444C           byte_72D2C:	dc.b $40, $48, $44, $4C
   40538/   73AEE :                     ; ===========================================================================
   40539/   73AEE :                     
   40540/   73AEE :                     loc_72D30:				; XREF: loc_72A64
   40541/   73AEE : 08D5 0003           		bset	#3,(a5)
   40542/   73AF2 : 2B4C 0014           		move.l	a4,$14(a5)
   40543/   73AF6 : 1B5C 0018           		move.b	(a4)+,$18(a5)
   40544/   73AFA : 1B5C 0019           		move.b	(a4)+,$19(a5)
   40545/   73AFE : 1B5C 001A           		move.b	(a4)+,$1A(a5)
   40546/   73B02 : 101C                		move.b	(a4)+,d0
   40547/   73B04 : E208                		lsr.b	#1,d0
   40548/   73B06 : 1B40 001B           		move.b	d0,$1B(a5)
   40549/   73B0A : 426D 001C           		clr.w	$1C(a5)
   40550/   73B0E : 4E75                		rts	
   40551/   73B10 :                     ; ===========================================================================
   40552/   73B10 :                     
   40553/   73B10 :                     loc_72D52:				; XREF: loc_72A64
   40554/   73B10 : 08D5 0003           		bset	#3,(a5)
   40555/   73B14 : 4E75                		rts	
   40556/   73B16 :                     ; ===========================================================================
   40557/   73B16 :                     
   40558/   73B16 :                     loc_72D58:				; XREF: loc_72A64
   40559/   73B16 : 0895 0007           		bclr	#7,(a5)
   40560/   73B1A : 0895 0004           		bclr	#4,(a5)
   40561/   73B1E : 4A2D 0001           		tst.b	1(a5)
   40562/   73B22 : 6B0E                		bmi.s	loc_72D74
   40563/   73B24 : 4A2E 0008           		tst.b	8(a6)
   40564/   73B28 : 6B00 0096           		bmi.w	loc_72E02
   40565/   73B2C : 4EBA F98E           		jsr	sub_726FE(pc)
   40566/   73B30 : 6004                		bra.s	loc_72D78
   40567/   73B32 :                     ; ===========================================================================
   40568/   73B32 :                     
   40569/   73B32 :                     loc_72D74:
   40570/   73B32 : 4EBA FC2A           		jsr	sub_729A0(pc)
   40571/   73B36 :                     
   40572/   73B36 :                     loc_72D78:
   40573/   73B36 : 4A2E 000E           		tst.b	$E(a6)
   40574/   73B3A : 6A00 0084           		bpl.w	loc_72E02
   40575/   73B3E : (MACRO)             		_clr.b	0(a6)
   40575/   73B3E :  (MACRO-2)                          insn1op clr.b, 0(a6)
   40575/   73B3E : 422E 0001                           !clr.b   1+0(a6)
   40575/   73B41 :                                     !org    *-1
   40575/   73B41 : 00                                  !dc.b   0
   40576/   73B42 : 7000                		moveq	#0,d0
   40577/   73B44 : 102D 0001           		move.b	1(a5),d0
   40578/   73B48 : 6B40                		bmi.s	loc_72DCC
   40579/   73B4A : 41FA F53E           		lea	dword_722CC(pc),a0
   40580/   73B4E : 264D                		movea.l	a5,a3
   40581/   73B50 : 0C00 0004           		cmpi.b	#4,d0
   40582/   73B54 : 6610                		bne.s	loc_72DA8
   40583/   73B56 : 4A2E 0340           		tst.b	$340(a6)
   40584/   73B5A : 6A0A                		bpl.s	loc_72DA8
   40585/   73B5C : 4BEE 0340           		lea	$340(a6),a5
   40586/   73B60 : 226E 0020           		movea.l	$20(a6),a1
   40587/   73B64 : 6010                		bra.s	loc_72DB8
   40588/   73B66 :                     ; ===========================================================================
   40589/   73B66 :                     
   40590/   73B66 :                     loc_72DA8:
   40591/   73B66 : 5500                		subq.b	#2,d0
   40592/   73B68 : E508                		lsl.b	#2,d0
   40593/   73B6A : 2A70 0000           		movea.l	(a0,d0.w),a5
   40594/   73B6E : 4A15                		tst.b	(a5)
   40595/   73B70 : 6A14                		bpl.s	loc_72DC8
   40596/   73B72 : 226E 0018           		movea.l	$18(a6),a1
   40597/   73B76 :                     
   40598/   73B76 :                     loc_72DB8:
   40599/   73B76 : 0895 0002           		bclr	#2,(a5)
   40600/   73B7A : 08D5 0001           		bset	#1,(a5)
   40601/   73B7E : 102D 000B           		move.b	$B(a5),d0
   40602/   73B82 : 4EBA FE88           		jsr	sub_72C4E(pc)
   40603/   73B86 :                     
   40604/   73B86 :                     loc_72DC8:
   40605/   73B86 : 2A4B                		movea.l	a3,a5
   40606/   73B88 : 6036                		bra.s	loc_72E02
   40607/   73B8A :                     ; ===========================================================================
   40608/   73B8A :                     
   40609/   73B8A :                     loc_72DCC:
   40610/   73B8A : 41EE 0370           		lea	$370(a6),a0
   40611/   73B8E : 4A10                		tst.b	(a0)
   40612/   73B90 : 6A0C                		bpl.s	loc_72DE0
   40613/   73B92 : 0C00 00E0           		cmpi.b	#$E0,d0
   40614/   73B96 : 6710                		beq.s	loc_72DEA
   40615/   73B98 : 0C00 00C0           		cmpi.b	#$C0,d0
   40616/   73B9C : 670A                		beq.s	loc_72DEA
   40617/   73B9E :                     
   40618/   73B9E :                     loc_72DE0:
   40619/   73B9E : 41FA F4EA           		lea	dword_722CC(pc),a0
   40620/   73BA2 : E608                		lsr.b	#3,d0
   40621/   73BA4 : 2070 0000           		movea.l	(a0,d0.w),a0
   40622/   73BA8 :                     
   40623/   73BA8 :                     loc_72DEA:
   40624/   73BA8 : 0890 0002           		bclr	#2,(a0)
   40625/   73BAC : 08D0 0001           		bset	#1,(a0)
   40626/   73BB0 : 0C28 00E0 0001      		cmpi.b	#$E0,1(a0)
   40627/   73BB6 : 6608                		bne.s	loc_72E02
   40628/   73BB8 : 13E8 001F 00C0 0011 		move.b	$1F(a0),($C00011).l
   40629/   73BC0 :                     
   40630/   73BC0 :                     loc_72E02:
   40631/   73BC0 : 504F                		addq.w	#8,sp
   40632/   73BC2 : 4E75                		rts	
   40633/   73BC4 :                     ; ===========================================================================
   40634/   73BC4 :                     
   40635/   73BC4 :                     loc_72E06:				; XREF: loc_72A64
   40636/   73BC4 : 1B7C 00E0 0001      		move.b	#$E0,1(a5)
   40637/   73BCA : 1B5C 001F           		move.b	(a4)+,$1F(a5)
   40638/   73BCE : 0815 0002           		btst	#2,(a5)
   40639/   73BD2 : 6608                		bne.s	locret_72E1E
   40640/   73BD4 : 13EC FFFF 00C0 0011 		move.b	-1(a4),($C00011).l
   40641/   73BDC :                     
   40642/   73BDC :                     locret_72E1E:
   40643/   73BDC : 4E75                		rts	
   40644/   73BDE :                     ; ===========================================================================
   40645/   73BDE :                     
   40646/   73BDE :                     loc_72E20:				; XREF: loc_72A64
   40647/   73BDE : 0895 0003           		bclr	#3,(a5)
   40648/   73BE2 : 4E75                		rts	
   40649/   73BE4 :                     ; ===========================================================================
   40650/   73BE4 :                     
   40651/   73BE4 :                     loc_72E26:				; XREF: loc_72A64
   40652/   73BE4 : 1B5C 000B           		move.b	(a4)+,$B(a5)
   40653/   73BE8 : 4E75                		rts	
   40654/   73BEA :                     ; ===========================================================================
   40655/   73BEA :                     
   40656/   73BEA :                     loc_72E2C:				; XREF: loc_72A64
   40657/   73BEA : 101C                		move.b	(a4)+,d0
   40658/   73BEC : E148                		lsl.w	#8,d0
   40659/   73BEE : 101C                		move.b	(a4)+,d0
   40660/   73BF0 : D8C0                		adda.w	d0,a4
   40661/   73BF2 : 534C                		subq.w	#1,a4
   40662/   73BF4 : 4E75                		rts	
   40663/   73BF6 :                     ; ===========================================================================
   40664/   73BF6 :                     
   40665/   73BF6 :                     loc_72E38:				; XREF: loc_72A64
   40666/   73BF6 : 7000                		moveq	#0,d0
   40667/   73BF8 : 101C                		move.b	(a4)+,d0
   40668/   73BFA : 121C                		move.b	(a4)+,d1
   40669/   73BFC : 4A35 0024           		tst.b	$24(a5,d0.w)
   40670/   73C00 : 6604                		bne.s	loc_72E48
   40671/   73C02 : 1B81 0024           		move.b	d1,$24(a5,d0.w)
   40672/   73C06 :                     
   40673/   73C06 :                     loc_72E48:
   40674/   73C06 : 5335 0024           		subq.b	#1,$24(a5,d0.w)
   40675/   73C0A : 66DE                		bne.s	loc_72E2C
   40676/   73C0C : 544C                		addq.w	#2,a4
   40677/   73C0E : 4E75                		rts	
   40678/   73C10 :                     ; ===========================================================================
   40679/   73C10 :                     
   40680/   73C10 :                     loc_72E52:				; XREF: loc_72A64
   40681/   73C10 : 7000                		moveq	#0,d0
   40682/   73C12 : 102D 000D           		move.b	$D(a5),d0
   40683/   73C16 : 5900                		subq.b	#4,d0
   40684/   73C18 : 2B8C 0000           		move.l	a4,(a5,d0.w)
   40685/   73C1C : 1B40 000D           		move.b	d0,$D(a5)
   40686/   73C20 : 60C8                		bra.s	loc_72E2C
   40687/   73C22 :                     ; ===========================================================================
   40688/   73C22 :                     
   40689/   73C22 :                     loc_72E64:				; XREF: loc_72A64
   40690/   73C22 : 103C 0088           		move.b	#$88,d0
   40691/   73C26 : 123C 000F           		move.b	#$F,d1
   40692/   73C2A : 4EBA F8C0           		jsr	sub_7272E(pc)
   40693/   73C2E : 103C 008C           		move.b	#$8C,d0
   40694/   73C32 : 123C 000F           		move.b	#$F,d1
   40695/   73C36 : 6000 F8B4           		bra.w	sub_7272E
   40696/   73C3A :                     ; ===========================================================================
   40697/   73C3A :                     Kos_Z80:	binclude	sound/z80.bin
   40698/   7539A : (MACRO)             		align 2
   40698/   7539A :  (MACRO-2)                  cnop 0,2
   40698/   7539A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40699/   7539A :                     Music81:	binclude	sound/music81.bin
   40700/   75B02 : (MACRO)             		align 2
   40700/   75B02 :  (MACRO-2)                  cnop 0,2
   40700/   75B02 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40701/   75B02 :                     Music82:	binclude	sound/music82.bin
   40702/   75F52 : (MACRO)             		align 2
   40702/   75F52 :  (MACRO-2)                  cnop 0,2
   40702/   75F52 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40703/   75F52 :                     Music83:	binclude	sound/music83.bin
   40704/   763B0 : (MACRO)             		align 2
   40704/   763B0 :  (MACRO-2)                  cnop 0,2
   40704/   763B0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40705/   763B0 :                     Music84:	binclude	sound/music84.bin
   40706/   7681E : (MACRO)             		align 2
   40706/   7681E :  (MACRO-2)                  cnop 0,2
   40706/   7681E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40707/   7681E :                     Music85:	binclude	sound/music85.bin
   40708/   76C6A : (MACRO)             		align 2
   40708/   76C6A :  (MACRO-2)                  cnop 0,2
   40708/   76C6A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40709/   76C6A :                     Music86:	binclude	sound/music86.bin
   40710/   771BA : (MACRO)             		align 2
   40710/   771BA :  (MACRO-2)                  cnop 0,2
   40710/   771BA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40711/   771BA :                     Music87:	binclude	sound/music87.bin
   40712/   773A0 : (MACRO)             		align 2
   40712/   773A0 :  (MACRO-2)                  cnop 0,2
   40712/   773A0 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40713/   773A0 :                     Music88:	binclude	sound/music88.bin
   40714/   7748E : (MACRO)             		align 2
   40714/   7748E :  (MACRO-2)                  cnop 0,2
   40714/   7748E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40715/   7748E :                     Music89:	binclude	sound/music89.bin
   40716/   777BA : (MACRO)             		align 2
   40716/   777BA :  (MACRO-2)                  cnop 0,2
   40716/   777BA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40717/   777BA :                     Music8A:	binclude	sound/music8A.bin
   40718/   77966 : (MACRO)             		align 2
   40718/   77966 :  (MACRO-2)                  cnop 0,2
   40718/   77966 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40719/   77966 :                     Music8B:	binclude	sound/music8B.bin
   40720/   77C00 : (MACRO)             		align 2
   40720/   77C00 :  (MACRO-2)                  cnop 0,2
   40720/   77C00 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40721/   77C00 :                     Music8C:	binclude	sound/music8C.bin
   40722/   77E1C : (MACRO)             		align 2
   40722/   77E1C :  (MACRO-2)                  cnop 0,2
   40722/   77E1C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40723/   77E1C :                     Music8D:	binclude	sound/music8D.bin
   40724/   78038 : (MACRO)             		align 2
   40724/   78038 :  (MACRO-2)                  cnop 0,2
   40724/   78038 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40725/   78038 :                     Music8E:	binclude	sound/music8E.bin
   40726/   7818E : (MACRO)             		align 2
   40726/   7818E :  (MACRO-2)                  cnop 0,2
   40726/   7818E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40727/   7818E :                     Music8F:	binclude	sound/music8F.bin
   40728/   782DE : (MACRO)             		align 2
   40728/   782DE :  (MACRO-2)                  cnop 0,2
   40728/   782DE :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40729/   782DE :                     Music90:	binclude	sound/music90.bin
   40730/   7843C : (MACRO)             		align 2
   40730/   7843C :  (MACRO-2)                  cnop 0,2
   40730/   7843C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40731/   7843C :                     Music91:	binclude	sound/music91.bin
   40732/   7970A : (MACRO)             		align 2
   40732/   7970A :  (MACRO-2)                  cnop 0,2
   40732/   7970A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40733/   7970A :                     Music92:	binclude	sound/music92.bin
   40734/   79834 : (MACRO)             		align 2
   40734/   79834 :  (MACRO-2)                  cnop 0,2
   40734/   79834 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40735/   79834 :                     Music93:	binclude	sound/music93.bin
   40736/   79902 : (MACRO)             		align 2
   40736/   79902 :  (MACRO-2)                  cnop 0,2
   40736/   79902 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40737/   79902 :                     ; ---------------------------------------------------------------------------
   40738/   79902 :                     ; Sound	effect pointers
   40739/   79902 :                     ; ---------------------------------------------------------------------------
   40740/   79902 : 0007 99C6 0007 99DC SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
                    0007 9A06           
   40741/   7990E : 0007 9A26 0007 9A58 		dc.l SoundA3, SoundA4, SoundA5
                    0007 9A8E           
   40742/   7991A : 0007 9ABA 0007 9AEA 		dc.l SoundA6, SoundA7, SoundA8
                    0007 9B1A           
   40743/   79926 : 0007 9B4E 0007 9B60 		dc.l SoundA9, SoundAA, SoundAB
                    0007 9BA2           
   40744/   79932 : 0007 9BC2 0007 9BF6 		dc.l SoundAC, SoundAD, SoundAE
                    0007 9C2C           
   40745/   7993E : 0007 9C76 0007 9CA4 		dc.l SoundAF, SoundB0, SoundB1
                    0007 9CD6           
   40746/   7994A : 0007 9D02 0007 9D52 		dc.l SoundB2, SoundB3, SoundB4
                    0007 9D9C           
   40747/   79956 : 0007 9DF8 0007 9E26 		dc.l SoundB5, SoundB6, SoundB7
                    0007 9E44           
   40748/   79962 : 0007 9E80 0007 9E9E 		dc.l SoundB8, SoundB9, SoundBA
                    0007 9F02           
   40749/   7996E : 0007 9F2A 0007 9F56 		dc.l SoundBB, SoundBC, SoundBD
                    0007 9F98           
   40750/   7997A : 0007 9FEC 0007 A026 		dc.l SoundBE, SoundBF, SoundC0
                    0007 A098           
   40751/   79986 : 0007 A0C6 0007 A100 		dc.l SoundC1, SoundC2, SoundC3
                    0007 A12A           
   40752/   79992 : 0007 A1A4 0007 A1CC 		dc.l SoundC4, SoundC5, SoundC6
                    0007 A234           
   40753/   7999E : 0007 A276 0007 A2A4 		dc.l SoundC7, SoundC8, SoundC9
                    0007 A2B6           
   40754/   799AA : 0007 A2E4 0007 A312 		dc.l SoundCA, SoundCB, SoundCC
                    0007 A35E           
   40755/   799B6 : 0007 A398 0007 A3A6 		dc.l SoundCD, SoundCE, SoundCF
                    0007 A3D4           
   40756/   799C2 : 0007 A40C           SoundD0Index:	dc.l SoundD0
   40757/   799C6 :                     SoundA0:	binclude	sound/soundA0.bin
   40758/   799DC : (MACRO)             		align 2
   40758/   799DC :  (MACRO-2)                  cnop 0,2
   40758/   799DC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40759/   799DC :                     SoundA1:	binclude	sound/soundA1.bin
   40760/   79A06 : (MACRO)             		align 2
   40760/   79A06 :  (MACRO-2)                  cnop 0,2
   40760/   79A06 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40761/   79A06 :                     SoundA2:	binclude	sound/soundA2.bin
   40762/   79A26 : (MACRO)             		align 2
   40762/   79A26 :  (MACRO-2)                  cnop 0,2
   40762/   79A26 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40763/   79A26 :                     SoundA3:	binclude	sound/soundA3.bin
   40764/   79A58 : (MACRO)             		align 2
   40764/   79A58 :  (MACRO-2)                  cnop 0,2
   40764/   79A58 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40765/   79A58 :                     SoundA4:	binclude	sound/soundA4.bin
   40766/   79A8E : (MACRO)             		align 2
   40766/   79A8E :  (MACRO-2)                  cnop 0,2
   40766/   79A8E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40767/   79A8E :                     SoundA5:	binclude	sound/soundA5.bin
   40768/   79ABA : (MACRO)             		align 2
   40768/   79ABA :  (MACRO-2)                  cnop 0,2
   40768/   79ABA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40769/   79ABA :                     SoundA6:	binclude	sound/soundA6.bin
   40770/   79AEA : (MACRO)             		align 2
   40770/   79AEA :  (MACRO-2)                  cnop 0,2
   40770/   79AEA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40771/   79AEA :                     SoundA7:	binclude	sound/soundA7.bin
   40772/   79B1A : (MACRO)             		align 2
   40772/   79B1A :  (MACRO-2)                  cnop 0,2
   40772/   79B1A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40773/   79B1A :                     SoundA8:	binclude	sound/soundA8.bin
   40774/   79B4E : (MACRO)             		align 2
   40774/   79B4E :  (MACRO-2)                  cnop 0,2
   40774/   79B4E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40775/   79B4E :                     SoundA9:	binclude	sound/soundA9.bin
   40776/   79B60 : (MACRO)             		align 2
   40776/   79B60 :  (MACRO-2)                  cnop 0,2
   40776/   79B60 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40777/   79B60 :                     SoundAA:	binclude	sound/soundAA.bin
   40778/   79BA2 : (MACRO)             		align 2
   40778/   79BA2 :  (MACRO-2)                  cnop 0,2
   40778/   79BA2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40779/   79BA2 :                     SoundAB:	binclude	sound/soundAB.bin
   40780/   79BC2 : (MACRO)             		align 2
   40780/   79BC2 :  (MACRO-2)                  cnop 0,2
   40780/   79BC2 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40781/   79BC2 :                     SoundAC:	binclude	sound/soundAC.bin
   40782/   79BF6 : (MACRO)             		align 2
   40782/   79BF6 :  (MACRO-2)                  cnop 0,2
   40782/   79BF6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40783/   79BF6 :                     SoundAD:	binclude	sound/soundAD.bin
   40784/   79C2C : (MACRO)             		align 2
   40784/   79C2C :  (MACRO-2)                  cnop 0,2
   40784/   79C2C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40785/   79C2C :                     SoundAE:	binclude	sound/soundAE.bin
   40786/   79C76 : (MACRO)             		align 2
   40786/   79C76 :  (MACRO-2)                  cnop 0,2
   40786/   79C76 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40787/   79C76 :                     SoundAF:	binclude	sound/soundAF.bin
   40788/   79CA4 : (MACRO)             		align 2
   40788/   79CA4 :  (MACRO-2)                  cnop 0,2
   40788/   79CA4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40789/   79CA4 :                     SoundB0:	binclude	sound/soundB0.bin
   40790/   79CD6 : (MACRO)             		align 2
   40790/   79CD6 :  (MACRO-2)                  cnop 0,2
   40790/   79CD6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40791/   79CD6 :                     SoundB1:	binclude	sound/soundB1.bin
   40792/   79D02 : (MACRO)             		align 2
   40792/   79D02 :  (MACRO-2)                  cnop 0,2
   40792/   79D02 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40793/   79D02 :                     SoundB2:	binclude	sound/soundB2.bin
   40794/   79D52 : (MACRO)             		align 2
   40794/   79D52 :  (MACRO-2)                  cnop 0,2
   40794/   79D52 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40795/   79D52 :                     SoundB3:	binclude	sound/soundB3.bin
   40796/   79D9C : (MACRO)             		align 2
   40796/   79D9C :  (MACRO-2)                  cnop 0,2
   40796/   79D9C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40797/   79D9C :                     SoundB4:	binclude	sound/soundB4.bin
   40798/   79DF8 : (MACRO)             		align 2
   40798/   79DF8 :  (MACRO-2)                  cnop 0,2
   40798/   79DF8 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40799/   79DF8 :                     SoundB5:	binclude	sound/soundB5.bin
   40800/   79E26 : (MACRO)             		align 2
   40800/   79E26 :  (MACRO-2)                  cnop 0,2
   40800/   79E26 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40801/   79E26 :                     SoundB6:	binclude	sound/soundB6.bin
   40802/   79E44 : (MACRO)             		align 2
   40802/   79E44 :  (MACRO-2)                  cnop 0,2
   40802/   79E44 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40803/   79E44 :                     SoundB7:	binclude	sound/soundB7.bin
   40804/   79E80 : (MACRO)             		align 2
   40804/   79E80 :  (MACRO-2)                  cnop 0,2
   40804/   79E80 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40805/   79E80 :                     SoundB8:	binclude	sound/soundB8.bin
   40806/   79E9E : (MACRO)             		align 2
   40806/   79E9E :  (MACRO-2)                  cnop 0,2
   40806/   79E9E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40807/   79E9E :                     SoundB9:	binclude	sound/soundB9.bin
   40808/   79F02 : (MACRO)             		align 2
   40808/   79F02 :  (MACRO-2)                  cnop 0,2
   40808/   79F02 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40809/   79F02 :                     SoundBA:	binclude	sound/soundBA.bin
   40810/   79F2A : (MACRO)             		align 2
   40810/   79F2A :  (MACRO-2)                  cnop 0,2
   40810/   79F2A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40811/   79F2A :                     SoundBB:	binclude	sound/soundBB.bin
   40812/   79F56 : (MACRO)             		align 2
   40812/   79F56 :  (MACRO-2)                  cnop 0,2
   40812/   79F56 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40813/   79F56 :                     SoundBC:	binclude	sound/soundBC.bin
   40814/   79F98 : (MACRO)             		align 2
   40814/   79F98 :  (MACRO-2)                  cnop 0,2
   40814/   79F98 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40815/   79F98 :                     SoundBD:	binclude	sound/soundBD.bin
   40816/   79FEC : (MACRO)             		align 2
   40816/   79FEC :  (MACRO-2)                  cnop 0,2
   40816/   79FEC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40817/   79FEC :                     SoundBE:	binclude	sound/soundBE.bin
   40818/   7A026 : (MACRO)             		align 2
   40818/   7A026 :  (MACRO-2)                  cnop 0,2
   40818/   7A026 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40819/   7A026 :                     SoundBF:	binclude	sound/soundBF.bin
   40820/   7A098 : (MACRO)             		align 2
   40820/   7A098 :  (MACRO-2)                  cnop 0,2
   40820/   7A098 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40821/   7A098 :                     SoundC0:	binclude	sound/soundC0.bin
   40822/   7A0C6 : (MACRO)             		align 2
   40822/   7A0C6 :  (MACRO-2)                  cnop 0,2
   40822/   7A0C6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40823/   7A0C6 :                     SoundC1:	binclude	sound/soundC1.bin
   40824/   7A100 : (MACRO)             		align 2
   40824/   7A100 :  (MACRO-2)                  cnop 0,2
   40824/   7A100 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40825/   7A100 :                     SoundC2:	binclude	sound/soundC2.bin
   40826/   7A12A : (MACRO)             		align 2
   40826/   7A12A :  (MACRO-2)                  cnop 0,2
   40826/   7A12A :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40827/   7A12A :                     SoundC3:	binclude	sound/soundC3.bin
   40828/   7A1A4 : (MACRO)             		align 2
   40828/   7A1A4 :  (MACRO-2)                  cnop 0,2
   40828/   7A1A4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40829/   7A1A4 :                     SoundC4:	binclude	sound/soundC4.bin
   40830/   7A1CC : (MACRO)             		align 2
   40830/   7A1CC :  (MACRO-2)                  cnop 0,2
   40830/   7A1CC :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40831/   7A1CC :                     SoundC5:	binclude	sound/soundC5.bin
   40832/   7A234 : (MACRO)             		align 2
   40832/   7A234 :  (MACRO-2)                  cnop 0,2
   40832/   7A234 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40833/   7A234 :                     SoundC6:	binclude	sound/soundC6.bin
   40834/   7A276 : (MACRO)             		align 2
   40834/   7A276 :  (MACRO-2)                  cnop 0,2
   40834/   7A276 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40835/   7A276 :                     SoundC7:	binclude	sound/soundC7.bin
   40836/   7A2A4 : (MACRO)             		align 2
   40836/   7A2A4 :  (MACRO-2)                  cnop 0,2
   40836/   7A2A4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40837/   7A2A4 :                     SoundC8:	binclude	sound/soundC8.bin
   40838/   7A2B6 : (MACRO)             		align 2
   40838/   7A2B6 :  (MACRO-2)                  cnop 0,2
   40838/   7A2B6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40839/   7A2B6 :                     SoundC9:	binclude	sound/soundC9.bin
   40840/   7A2E4 : (MACRO)             		align 2
   40840/   7A2E4 :  (MACRO-2)                  cnop 0,2
   40840/   7A2E4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40841/   7A2E4 :                     SoundCA:	binclude	sound/soundCA.bin
   40842/   7A312 : (MACRO)             		align 2
   40842/   7A312 :  (MACRO-2)                  cnop 0,2
   40842/   7A312 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40843/   7A312 :                     SoundCB:	binclude	sound/soundCB.bin
   40844/   7A35E : (MACRO)             		align 2
   40844/   7A35E :  (MACRO-2)                  cnop 0,2
   40844/   7A35E :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40845/   7A35E :                     SoundCC:	binclude	sound/soundCC.bin
   40846/   7A398 : (MACRO)             		align 2
   40846/   7A398 :  (MACRO-2)                  cnop 0,2
   40846/   7A398 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40847/   7A398 :                     SoundCD:	binclude	sound/soundCD.bin
   40848/   7A3A6 : (MACRO)             		align 2
   40848/   7A3A6 :  (MACRO-2)                  cnop 0,2
   40848/   7A3A6 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40849/   7A3A6 :                     SoundCE:	binclude	sound/soundCE.bin
   40850/   7A3D4 : (MACRO)             		align 2
   40850/   7A3D4 :  (MACRO-2)                  cnop 0,2
   40850/   7A3D4 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40851/   7A3D4 :                     SoundCF:	binclude	sound/soundCF.bin
   40852/   7A40C : (MACRO)             		align 2
   40852/   7A40C :  (MACRO-2)                  cnop 0,2
   40852/   7A40C :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40853/   7A40C :                     SoundD0:	binclude	sound/soundD0.bin
   40854/   7A446 : (MACRO)             		align 2
   40854/   7A446 :  (MACRO-2)                  cnop 0,2
   40854/   7A446 :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40855/   7A446 :                     SegaPCM:	binclude	sound/segapcm.bin
   40856/   80FEA : (MACRO)             		align 2
   40856/   80FEA :  (MACRO-2)                  cnop 0,2
   40856/   80FEA :   (MACRO-3)                         org (*-1+(2)-((*-1+(-(0)))#(2)))
   40857/   80FEA : (MACRO)             SegaPCM_End:   even
   40858/   80FEA :                     ; end of "ROM"
   40859/   80FEA :                     EndOfRom:
   40860/   80FEA :                     
   40861/   80FEA :                     
   40862/   80FEA :                     		END
 AS V1.42 Beta [Bld 89] - source file s1.asm - page 2 - 2/27/2022 20:33:18


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - |  AddPoints :                  1C922 C |
 AddressError :                 3DE C |  AngleMap :                   63742 C |
 Angle_Data :                  2D1E C |  AniArt_Ending :              1C53C C |
 AniArt_GHZ :                 1C2EE C |  AniArt_GiantRing :           1C7AA C |
 AniArt_Index :               1C2E0 C |  AniArt_Load :                1C2BE C |
 AniArt_MZ :                  1C3AC C |  AniArt_MZextra :             1C668 C |
 AniArt_Pause :               1C2DE C |  AniArt_SBZ :                 1C486 C |
 AniArt_none :                1C650 C |  Ani_Eggman :                 17F4C C |
 Ani_obj08 :                  14840 C |  Ani_obj0A :                  14334 C |
 Ani_obj0C :                  114F2 C |  Ani_obj0D :                   EE2C C |
 Ani_obj0E :                   A720 C |  Ani_obj0F :                   A72E C |
 Ani_obj14 :                   E5CE C |  Ani_obj16 :                  12092 C |
 Ani_obj1E :                   8E54 C |  Ani_obj1F :                   9726 C |
 Ani_obj22 :                   9A24 C |  Ani_obj23 :                   9A36 C |
 Ani_obj25 :                   9F96 C |  Ani_obj26 :                   A524 C |
 Ani_obj2A :                   89DC C |  Ani_obj2A_Open :              89EC C |
 Ani_obj2A_Shut :              89E0 C |  Ani_obj2B :                   ACA2 C |
 Ani_obj2C :                   AD52 C |  Ani_obj2D :                   AF2E C |
 Ani_obj35 :                   B3B6 C |  Ani_obj38 :                  145C8 C |
 Ani_obj3E :                  1AFFC C |  Ani_obj40 :                   F892 C |
 Ani_obj41 :                   DE08 C |  Ani_obj42 :                   E024 C |
 Ani_obj43 :                   E294 C |  Ani_obj47 :                   EBFA C |
 Ani_obj4A :                  146D2 C |  Ani_obj4C :                   F324 C |
 Ani_obj4E :                   F352 C |  Ani_obj50 :                   FA2C C |
 Ani_obj55 :                  1033A C |  Ani_obj5F :                  11D18 C |
 Ani_obj60 :                  11FE6 C |  Ani_obj64 :                  12AAC C |
 Ani_obj65 :                  12C5C C |  Ani_obj69 :                  15B20 C |
 Ani_obj6C :                  16392 C |  Ani_obj6D :                   E6C6 C |
 Ani_obj6E :                  16444 C |  Ani_obj6F :                  16706 C |
 Ani_obj78 :                  16F6A C |  Ani_obj81 :                   505C C |
 Ani_obj82 :                  19C92 C |  Ani_obj85 :                  1A664 C |
 Ani_obj86 :                  1ACD0 C |  Ani_obj86a :                 1AD06 C |
 Ani_obj87 :                   552A C |  Ani_obj8B :                   5AAE C |
 Anim_End :                    A7DE C |  Anim_End_FA :                 A7D6 C |
 Anim_End_FB :                 A7C8 C |  Anim_End_FC :                 A7C0 C |
 Anim_End_FD :                 A7B6 C |  Anim_End_FE :                 A7A2 C |
 Anim_End_FF :                 A792 C |  Anim_Next :                   A76C C |
 Anim_Run :                    A750 C |  Anim_Wait :                   A790 C |
 AnimateSprite :               A734 C |  ArtLoadCues :                1D8A8 C |
 Art_BigRing :                6B194 C |  Art_GhzFlower1 :             67B36 C |
 Art_GhzFlower2 :             67F36 C |  Art_GhzWater :               67936 C |
 Art_Hud :                    1CD70 C |  Art_LivesNums :              1D070 C |
 Art_MzLava1 :                683B6 C |  Art_MzLava2 :                686B6 C |
 Art_MzTorch :                68CB6 C |  Art_SbzSmoke :               68FB6 C |
 Art_Sonic :                  21DB8 C |  Art_Text :                     5F0 C |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
 BgScrollSpeed :               61F8 C |  BgScroll_End :                626A C |
 BgScroll_GHZ :                6230 C |  BgScroll_Index :              6222 C |
 BgScroll_LZ :                 6234 C |  BgScroll_MZ :                 623C C |
 BgScroll_SBZ :                625E C |  BgScroll_SLZ :                623E C |
 BgScroll_SYZ :                624A C |  BldSpr_ScrPos :               D758 C |
 Blk16_GHZ :                  3CB72 C |  Blk16_LZ :                   41FEC C |
 Blk16_MZ :                   4664E C |  Blk16_SBZ :                  57A0E C |
 Blk16_SLZ :                  4AE5C C |  Blk16_SYZ :                  515C4 C |
 Blk256_GHZ :                 3FE2C C |  Blk256_LZ :                  43E5E C |
 Blk256_MZ :                  4969C C |  Blk256_SBZ :                 5B054 C |
 Blk256_SLZ :                 4F194 C |  Blk256_SYZ :                 5565E C |
 BossDefeated :               17AF0 C |  BossMove :                   17B34 C |
 Boundary_Bottom :            1345A C |  Boundary_Bottom_locret :     1348A C |
 Boundary_Sides :             1348C C |  BuildSprites :                D768 C |
 BusError :                     3D6 C | *CASESENSITIVE :                  1 - |
*CONSTPI :        3.141592653589793 - |  CalcAngle :                   2CB8 C |
 CalcSine :                    29EA C |  ChangeRingFrame :             421A C |
 CheckSumCheck :                31C C |  CheckSumError :                3B8 C |
 CheckSum_Loop :                3D4 C |  CheckSum_Red :                 3C8 C |
 Checksum :                     18E C |  ChkInstr :                     3FA C |
 ChkObjOnScreen :              D988 C |  ChkObjOnScreen2 :             D9B0 C |
 ClearPLC :                    15DE C |  ClearPLC_Loop :               15E4 C |
 ClearScreen :                 12C4 C |  ClrCRAMLoop :                  26E C |
 ClrRAMLoop :                   262 C |  ClrVDPStuff :                  278 C |
 ColIndexLoad :                4104 C |  ColPointers :                 4114 C |
 Col_GHZ :                    65842 C |  Col_LZ :                     659FA C |
 Col_MZ :                     65AC2 C |  Col_SBZ :                    6603A C |
 Col_SLZ :                    65C52 C |  Col_SYZ :                    65E46 C |
 CollArray1 :                 63842 C |  CollArray2 :                 64842 C |
 CollectRing :                 9C82 C | *Console :                      100 C |
 ContScrCounter :             1CBCE C |  ContScr_Loop :               1CBEC C |
 Cont_ClrObjRam :              4D26 C |  Cont_GotoLevel :              4E32 C |
 Cont_MainLoop :               4DD8 C |  ContinueScreen :              4CF4 C |
 Cred_ClrObjRam :              580C C |  Cred_ClrPallet :              5830 C |
 Cred_WaitLoop :               587E C |  Credits :                     57D0 C |
*DATE :                   2/27/2022 - |  DPLC_ddbf :                  21A8C C |
*DPLC_ddbf_0 :                21A8C C | *DPLC_ddbf_10 :               21A9C C |
 DPLC_ddbf_103 :              21B8F C |  DPLC_ddbf_10A :              21B96 C |
 DPLC_ddbf_115 :              21BA1 C | *DPLC_ddbf_12 :               21A9E C |
 DPLC_ddbf_122 :              21BAE C |  DPLC_ddbf_12B :              21BB7 C |
 DPLC_ddbf_136 :              21BC2 C |  DPLC_ddbf_13F :              21BCB C |
*DPLC_ddbf_14 :               21AA0 C |  DPLC_ddbf_14A :              21BD6 C |
 DPLC_ddbf_153 :              21BDF C |  DPLC_ddbf_158 :              21BE4 C |
 DPLC_ddbf_15D :              21BE9 C | *DPLC_ddbf_16 :               21AA2 C |
 DPLC_ddbf_166 :              21BF2 C |  DPLC_ddbf_16B :              21BF7 C |
 DPLC_ddbf_172 :              21BFE C |  DPLC_ddbf_17F :              21C0B C |
*DPLC_ddbf_18 :               21AA4 C |  DPLC_ddbf_18C :              21C18 C |
 DPLC_ddbf_195 :              21C21 C | *DPLC_ddbf_1A :               21AA6 C |
 DPLC_ddbf_1A0 :              21C2C C |  DPLC_ddbf_1A9 :              21C35 C |
 DPLC_ddbf_1B4 :              21C40 C |  DPLC_ddbf_1B9 :              21C45 C |
 DPLC_ddbf_1BE :              21C4A C | *DPLC_ddbf_1C :               21AA8 C |
 DPLC_ddbf_1C3 :              21C4F C |  DPLC_ddbf_1C8 :              21C54 C |
 DPLC_ddbf_1D1 :              21C5D C |  DPLC_ddbf_1D8 :              21C64 C |
*DPLC_ddbf_1E :               21AAA C |  DPLC_ddbf_1E1 :              21C6D C |
 DPLC_ddbf_1E8 :              21C74 C |  DPLC_ddbf_1ED :              21C79 C |
 DPLC_ddbf_1F2 :              21C7E C |  DPLC_ddbf_1F7 :              21C83 C |
 DPLC_ddbf_1FC :              21C88 C | *DPLC_ddbf_2 :                21A8E C |
*DPLC_ddbf_20 :               21AAC C |  DPLC_ddbf_205 :              21C91 C |
 DPLC_ddbf_20A :              21C96 C |  DPLC_ddbf_213 :              21C9F C |
 DPLC_ddbf_218 :              21CA4 C |  DPLC_ddbf_21B :              21CA7 C |
 DPLC_ddbf_21E :              21CAA C | *DPLC_ddbf_22 :               21AAE C |
 DPLC_ddbf_221 :              21CAD C |  DPLC_ddbf_224 :              21CB0 C |
 DPLC_ddbf_227 :              21CB3 C |  DPLC_ddbf_22C :              21CB8 C |
 DPLC_ddbf_22F :              21CBB C |  DPLC_ddbf_234 :              21CC0 C |
 DPLC_ddbf_237 :              21CC3 C |  DPLC_ddbf_23C :              21CC8 C |
*DPLC_ddbf_24 :               21AB0 C |  DPLC_ddbf_245 :              21CD1 C |
 DPLC_ddbf_24E :              21CDA C |  DPLC_ddbf_255 :              21CE1 C |
 DPLC_ddbf_25C :              21CE8 C | *DPLC_ddbf_26 :               21AB2 C |
 DPLC_ddbf_263 :              21CEF C |  DPLC_ddbf_266 :              21CF2 C |
 DPLC_ddbf_26D :              21CF9 C |  DPLC_ddbf_274 :              21D00 C |
 DPLC_ddbf_27B :              21D07 C | *DPLC_ddbf_28 :               21AB4 C |
 DPLC_ddbf_284 :              21D10 C |  DPLC_ddbf_28D :              21D19 C |
 DPLC_ddbf_298 :              21D24 C | *DPLC_ddbf_2A :               21AB6 C |
 DPLC_ddbf_2A3 :              21D2F C |  DPLC_ddbf_2A8 :              21D34 C |
 DPLC_ddbf_2AF :              21D3B C |  DPLC_ddbf_2B4 :              21D40 C |
 DPLC_ddbf_2BB :              21D47 C | *DPLC_ddbf_2C :               21AB8 C |
 DPLC_ddbf_2C0 :              21D4C C |  DPLC_ddbf_2C7 :              21D53 C |
 DPLC_ddbf_2CE :              21D5A C |  DPLC_ddbf_2D9 :              21D65 C |
*DPLC_ddbf_2E :               21ABA C |  DPLC_ddbf_2E4 :              21D70 C |
 DPLC_ddbf_2E9 :              21D75 C |  DPLC_ddbf_2F0 :              21D7C C |
 DPLC_ddbf_2F3 :              21D7F C |  DPLC_ddbf_2F6 :              21D82 C |
 DPLC_ddbf_2F9 :              21D85 C | *DPLC_ddbf_30 :               21ABC C |
 DPLC_ddbf_300 :              21D8C C |  DPLC_ddbf_307 :              21D93 C |
 DPLC_ddbf_30E :              21D9A C |  DPLC_ddbf_315 :              21DA1 C |
 DPLC_ddbf_31A :              21DA6 C |  DPLC_ddbf_31D :              21DA9 C |
*DPLC_ddbf_32 :               21ABE C |  DPLC_ddbf_320 :              21DAC C |
 DPLC_ddbf_323 :              21DAF C |  DPLC_ddbf_326 :              21DB2 C |
 DPLC_ddbf_329 :              21DB5 C | *DPLC_ddbf_34 :               21AC0 C |
*DPLC_ddbf_36 :               21AC2 C | *DPLC_ddbf_38 :               21AC4 C |
*DPLC_ddbf_3A :               21AC6 C | *DPLC_ddbf_3C :               21AC8 C |
*DPLC_ddbf_3E :               21ACA C | *DPLC_ddbf_4 :                21A90 C |
*DPLC_ddbf_40 :               21ACC C | *DPLC_ddbf_42 :               21ACE C |
*DPLC_ddbf_44 :               21AD0 C | *DPLC_ddbf_46 :               21AD2 C |
*DPLC_ddbf_48 :               21AD4 C | *DPLC_ddbf_4A :               21AD6 C |
*DPLC_ddbf_4C :               21AD8 C | *DPLC_ddbf_4E :               21ADA C |
*DPLC_ddbf_50 :               21ADC C | *DPLC_ddbf_52 :               21ADE C |
*DPLC_ddbf_54 :               21AE0 C | *DPLC_ddbf_56 :               21AE2 C |
*DPLC_ddbf_58 :               21AE4 C | *DPLC_ddbf_5A :               21AE6 C |
*DPLC_ddbf_5C :               21AE8 C | *DPLC_ddbf_5E :               21AEA C |
*DPLC_ddbf_6 :                21A92 C | *DPLC_ddbf_60 :               21AEC C |
*DPLC_ddbf_62 :               21AEE C | *DPLC_ddbf_64 :               21AF0 C |
*DPLC_ddbf_66 :               21AF2 C | *DPLC_ddbf_68 :               21AF4 C |
*DPLC_ddbf_6A :               21AF6 C | *DPLC_ddbf_6C :               21AF8 C |
*DPLC_ddbf_6E :               21AFA C | *DPLC_ddbf_70 :               21AFC C |
*DPLC_ddbf_72 :               21AFE C | *DPLC_ddbf_74 :               21B00 C |
*DPLC_ddbf_76 :               21B02 C | *DPLC_ddbf_78 :               21B04 C |
*DPLC_ddbf_7A :               21B06 C | *DPLC_ddbf_7C :               21B08 C |
*DPLC_ddbf_7E :               21B0A C | *DPLC_ddbf_8 :                21A94 C |
*DPLC_ddbf_80 :               21B0C C | *DPLC_ddbf_82 :               21B0E C |
*DPLC_ddbf_84 :               21B10 C | *DPLC_ddbf_86 :               21B12 C |
*DPLC_ddbf_88 :               21B14 C | *DPLC_ddbf_8A :               21B16 C |
*DPLC_ddbf_8C :               21B18 C | *DPLC_ddbf_8E :               21B1A C |
*DPLC_ddbf_90 :               21B1C C | *DPLC_ddbf_92 :               21B1E C |
*DPLC_ddbf_94 :               21B20 C | *DPLC_ddbf_96 :               21B22 C |
*DPLC_ddbf_98 :               21B24 C | *DPLC_ddbf_9A :               21B26 C |
*DPLC_ddbf_9C :               21B28 C | *DPLC_ddbf_9E :               21B2A C |
*DPLC_ddbf_A :                21A96 C | *DPLC_ddbf_A0 :               21B2C C |
*DPLC_ddbf_A2 :               21B2E C | *DPLC_ddbf_A4 :               21B30 C |
*DPLC_ddbf_A6 :               21B32 C | *DPLC_ddbf_A8 :               21B34 C |
*DPLC_ddbf_AA :               21B36 C | *DPLC_ddbf_AC :               21B38 C |
*DPLC_ddbf_AE :               21B3A C | *DPLC_ddbf_B0 :               21B3C C |
*DPLC_ddbf_B2 :               21B3E C | *DPLC_ddbf_B4 :               21B40 C |
*DPLC_ddbf_B6 :               21B42 C | *DPLC_ddbf_B8 :               21B44 C |
*DPLC_ddbf_BA :               21B46 C |  DPLC_ddbf_BC :               21B48 C |
 DPLC_ddbf_BD :               21B49 C | *DPLC_ddbf_C :                21A98 C |
 DPLC_ddbf_C6 :               21B52 C |  DPLC_ddbf_CD :               21B59 C |
 DPLC_ddbf_D4 :               21B60 C |  DPLC_ddbf_DB :               21B67 C |
*DPLC_ddbf_E :                21A9A C |  DPLC_ddbf_E2 :               21B6E C |
 DPLC_ddbf_EB :               21B77 C |  DPLC_ddbf_F0 :               21B7C C |
 DPLC_ddbf_F5 :               21B81 C |  DPLC_ddbf_FE :               21B8A C |
 Dash_Speeds :                136C4 C | *Date :                         110 C |
 DebugList :                  1D404 C |  DebugMode :                  1D1B0 C |
 Debug_BackItem :             1D304 C |  Debug_Control :              1D26C C |
 Debug_DoNothing :            1D3E6 C |  Debug_Ending :               1D7CE C |
 Debug_Exit :                 1D380 C |  Debug_GHZ :                  1D412 C |
 Debug_Index :                1D1BE C |  Debug_LZ :                   1D494 C |
 Debug_MZ :                   1D55E C |  Debug_Main :                 1D1C2 C |
 Debug_MakeItem :             1D33C C |  Debug_NextItem :             1D320 C |
 Debug_NoLoop :               1D338 C |  Debug_SBZ :                  1D6E4 C |
 Debug_SLZ :                  1D5F0 C |  Debug_SYZ :                  1D66A C |
 Debug_ShowItem :             1D3E8 C |  Debug_Skip :                 1D244 C |
 Debug_UseList :              1D21A C |  Debug_Zone :                 1D214 C |
 DeformBgLayer :               6292 C |  Deform_GHZ :                  62F8 C |
 Deform_Index :                62EA C |  Deform_LZ :                   63A2 C |
 Deform_MZ :                   63E2 C |  Deform_SBZ :                  6550 C |
 Deform_SLZ :                  643A C |  Deform_SLZ_2 :                64B4 C |
 Deform_SYZ :                  6512 C |  DelayProgram :                29B8 C |
 DeleteObject :                D74A C |  DeleteObject2 :               D74C C |
 Demo :                        33C0 C |  Demo_EndGHZ1 :                5D5C C |
 Demo_EndGHZ2 :                5E9A C |  Demo_EndIndex :               40B4 C |
 Demo_EndLZ :                  5DFA C |  Demo_EndMZ :                  5D8A C |
 Demo_EndSBZ1 :                5E4A C |  Demo_EndSBZ2 :                5E6A C |
 Demo_EndSLZ :                 5E2A C |  Demo_EndSYZ :                 5DCA C |
 Demo_GHZ :                    42C0 C |  Demo_Index :                  4094 C |
 Demo_Level :                  3452 C |  Demo_Levels :                 3468 C |
 Demo_MZ :                     4340 C |  Demo_SS :                     44F0 C |
 Demo_SYZ :                    4470 C |  Demo_Time :                    D84 C |
 Demo_TimeEnd :                 DA4 C |  DisplaySprite :               D70E C |
 DisplaySprite2 :              D72C C |  DynScrResizeLoad :            6D78 C |
 DynWater_Index :              3C70 C |  DynWater_LZ1 :                3C78 C |
 DynWater_LZ2 :                3D0A C |  DynWater_LZ3 :                3D2C C |
 DynWater_SBZ3 :               3E30 C |  EndDemo_Exit :                5902 C |
 EndDemo_LampLoad :            58FC C |  EndDemo_LampVar :             5914 C |
 EndDemo_Levels :              5904 C |  EndOfRom :                   80FEA C |
 End_AllEmlds :                5304 C |  End_ClrObjRam :               5110 C |
 End_ClrRam :                  5120 C |  End_ClrRam2 :                 5130 C |
 End_ClrRam3 :                 5140 C |  End_LoadData :                51A2 C |
 End_LoadSonic :               51FA C |  End_MainLoop :                5298 C |
 End_MoveSonExit :             53F4 C |  End_MoveSonic :               5384 C |
 End_MoveSonic2 :              53A4 C |  End_MoveSonic3 :              53DC C |
 EndingDemoLoad :              58A4 C |  EndingSequence :              50FA C |
 EndingStLocArray :            6078 C |  Enemy_Points :               1B26C C |
 EniDec :                      171E C |  Eni_JapNames :               20EBC C |
 Eni_SSBg1 :                  2DD16 C |  Eni_SSBg2 :                  2EADA C |
 Eni_SegaLogo :               1E2F8 C |  Eni_Title :                  1E3F0 C |
 EntryPoint :                   206 C |  ErrorExcept :                  432 C |
 ErrorText :                    4D2 C |  ErrorTrap :                    200 C |
 ErrorWaitForC :                5E0 C |  Error_LoadGfx :                4A2 C |
 Error_LoopChars :              4C2 C |  ExitPlatform :                75CC C |
 ExitPlatform2 :               75CE C |  ExtraLife :                   A3A6 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 FindFloor :                  14C4A C |  FindFloor2 :                 14CF0 C |
 FindWall :                   14D88 C |  FindWall2 :                  14E30 C |
 FloorLog_Unk :               14EC8 C |  FloorLog_Unk2 :              14F1E C |
 Floor_ChkTile :              14BD8 C |  GameClrRAM :                   370 C |
 GameInit :                     364 C |  GameModeArray :                396 C |
 GameOver :                   13AEC C |  GameProgram :                  300 C |
 Go_MusicIndex :              72736 C |  Go_PSGIndex :                72742 C |
 Go_SoundD0 :                 72732 C |  Go_SoundIndex :              7273A C |
 Go_SoundTypes :              7272E C |  GotThroughAct :               ED94 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 HudDb_ChkBonus :             1CA7A C |  HudDb_End :                  1CAA2 C |
 HudDb_ObjCount :             1CA5C C |  HudDb_Rings :                1CA48 C |
 HudDb_XY :                   1CB10 C |  HudDb_XY2 :                  1CB30 C |
 HudDb_XYLoop :               1CB38 C |  HudDebug :                   1CA38 C |
 HudUpdate :                  1C94E C |  Hud_1 :                      1CC3A C |
 Hud_10 :                     1CC36 C |  Hud_100 :                    1CC32 C |
 Hud_1000 :                   1CC2E C | *Hud_10000 :                  1CC2A C |
 Hud_100000 :                 1CC26 C |  Hud_Base :                   1CAB8 C |
 Hud_BonusLoop :              1CCB0 C |  Hud_ChkBonus :               1C9F8 C |
 Hud_ChkLives :               1C9EA C |  Hud_ChkRings :               1C96E C |
 Hud_ChkTime :                1C98E C |  Hud_ClrBonus :               1CCF6 C |
 Hud_ClrBonusLoop :           1CCF8 C |  Hud_ClrLives :               1CD5E C |
 Hud_ClrLivesLoop :           1CD64 C |  Hud_End :                    1CA20 C |
 Hud_Lives :                  1CD04 C |  Hud_LivesLoop :              1CD1E C |
 Hud_LoadArt :                1CB78 C |  Hud_LoadZero :               1CAA4 C |
 Hud_Mins :                   1CC3E C |  Hud_Rings :                  1CB66 C |
 Hud_Score :                  1CB70 C |  Hud_ScoreLoop :              1CB7E C |
 Hud_Secs :                   1CC48 C |  Hud_TilesBase :              1CB00 C |
 Hud_TilesZero :              1CB0C C |  Hud_TimeLoop :               1CC56 C |
 Hud_TimeRingBonus :          1CCA2 C |  HurtSonic :                  1B28E C |
 Hurt_ChkSpikes :             1B2FA C |  Hurt_NoRings :               1B32A C |
 Hurt_Reverse :               1B2EC C |  Hurt_Shield :                1B2B6 C |
 Hurt_Sound :                 1B320 C | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
 IllegalInstr :                 3E6 C |  JoypadInit :                  11B6 C |
 Joypad_Read :                 11F4 C |  Joypad_WaitZ80 :              11BE C |
 KillSonic :                  1B332 C |  Kill_NoDeath :               1B386 C |
 Kill_Sound :                 1B380 C |  KosDec :                      189C C |
 Kos_EndFlowers :             625A0 C |  Kos_Z80 :                    73C3A C |
*LISTON :                         3 - |  LSelectPointers :             338A C |
 LZDynamicWater :              3C46 C |  LZMoveWater :                 3C00 C |
 LZSlide_Move :                3F90 C |  LZWaterEffects :              3BE4 C |
 LZWaterSlides :               3F48 C |  LZWindTunnels :               3E46 C |
 LZWind_Data :                 3F28 C |  LZWind_Loop :                 3E6E C |
 LZWind_Move :                 3ED2 C |  LZWind_MoveDown :             3EFA C |
 LevLoad_ClrRam :              6D28 C |  LevLoad_NumRows :             6D64 C |
 LevLoad_Row :                 6D68 C |  LevSelControls :              3470 C |
 LevSelTextLoad :              34F6 C |  LevSel_ChgLine :              3596 C |
 LevSel_ChgSnd :               3582 C |  LevSel_Credits :              3304 C |
 LevSel_Down :                 34A0 C |  LevSel_Ending :               32F6 C |
 LevSel_Level :                334A C |  LevSel_Level_SS :             331A C |
 LevSel_NoCheat :              32E4 C |  LevSel_NoMove :               34F4 C |
 LevSel_PlaySnd :              32F0 C |  LevSel_Refresh :              34B0 C |
 LevSel_Refresh2 :             34EC C |  LevSel_Right :                34DC C |
 LevSel_SndTest :              34BA C |  LevSel_UpDown :               3480 C |
 LevSz_ChkLamp :               6098 C |  LevSz_SonicPos :              60CC C |
 LevSz_StartLoc :              60AE C |  LevSz_Unk :                   61AA C |
 Level :                       37B2 C |  LevelLayoutLoad :             6D1E C |
 LevelLayoutLoad2 :            6D3E C |  LevelMenuText :               35B2 C |
 LevelOrder :                  C7DE C |  LevelSelect :                 32A0 C |
 LevelSelectCode_J :           33B4 C |  LevelSelectCode_US :          33BA C |
 LevelSizeArray :              5F28 C |  LevelSizeLoad :               5ECA C |
 Level_BgmNotLZ4 :             3908 C |  Level_ChkDebug :              3992 C |
 Level_ChkDemo :               3B64 C |  Level_ChkWater :              39A6 C |
 Level_ChkWaterPal :           3A8C C |  Level_ClrCardArt :            3AD8 C |
 Level_ClrObjRam :             381C C |  Level_ClrRam :                3812 C |
 Level_ClrVars :               382C C |  Level_ClrVars2 :              383C C |
 Level_ClrVars3 :              384C C |  Level_Delay :                 3AA4 C |
 Level_DelayLoop :             3AA8 C |  Level_Demo :                  3A62 C |
 Level_End :                  6B160 C |  Level_EndDemo :               3B82 C |
 Level_GHZ1 :                 69ADE C |  Level_GHZ2 :                 69BD4 C |
 Level_GHZ3 :                 69CA0 C |  Level_GHZbg :                69DC2 C |
 Level_GetBgm :                38F2 C |  Level_Index :                69A36 C |
 Level_LZ1 :                  69DEC C |  Level_LZ2 :                  69FF4 C |
 Level_LZ3 :                  6A092 C |  Level_LZbg :                 69EEE C |
 Level_LoadObj :               39D2 C |  Level_LoadPal :               38BE C |
 Level_MZ1 :                  6A26E C |  Level_MZ1bg :                6A30C C |
 Level_MZ2 :                  6A386 C |  Level_MZ2bg :                6A42A C |
 Level_MZ3 :                  6A4C0 C |  Level_MZ3bg :                6A5A2 C |
 Level_MainLoop :              3AF6 C |  Level_PlayBgm :               3912 C |
 Level_SBZ1 :                 6AD4C C |  Level_SBZ1bg :               6AE6E C |
 Level_SBZ2 :                 6AEAC C |  Level_SBZ2bg :               6AFEE C |
 Level_SBZ3 :                 6A1B0 C |  Level_SLZ1 :                 6A64E C |
 Level_SLZ2 :                 6A7DA C |  Level_SLZ3 :                 6A8CA C |
 Level_SLZbg :                6A760 C |  Level_SYZ1 :                 6A9E8 C |
 Level_SYZ2 :                 6AAE2 C |  Level_SYZ3 :                 6ABEA C |
 Level_SYZbg :                6AAA4 C |  Level_StartGame :             3AF0 C |
 Level_TtlCard :               3926 C |  Level_WaterPal :              38E2 C |
 Level_WaterPal2 :             3AA0 C |  Line1010Emu :                  41A C |
 Line1111Emu :                  426 C |  LoadPLC :                     1580 C |
 LoadPLC2 :                    15B2 C |  LoadSonicDynPLC :            13EBA C |
 LoadTiles :                  1C652 C |  LoadTilesAsYouMove :          68BE C |
 LoadTilesFromStart :          6C64 C |  LoadTilesFromStart2 :         6C8A C |
 LoopTileNums :                618E C | *MACEXP :                         1 - |
 MLB_ChkSBZPal :               6CF8 C |  MLB_NormalPal :               6D0A C |
 MLB_UsePal0E :                6D08 C |  MOMCPU :                     68000 - |
*MOMCPUNAME :                 68000 - |  MainGameLoop :                 388 C |
 MainLoadBlockLoad :           6CB2 C |  MainLoadBlocks :             1D838 C |
 Map_BossItems :              18064 C |  Map_Eggman :                 17F9C C |
 Map_Eggman2 :                1A66A C |  Map_FZBoss :                 1A6AC C |
 Map_SSWalls :                2D35E C |  Map_SS_Chaos1 :              1BBFA C |
 Map_SS_Chaos2 :              1BBFE C |  Map_SS_Chaos3 :              1BC02 C |
 Map_SS_Down :                1BBEA C |  Map_SS_Glass :               1BBBA C |
 Map_SS_R :                   1BBA6 C |  Map_SS_Up :                  1BBDA C |
 Map_Sonic :                  21422 C |  Map_a6dd :                   21422 C |
*Map_a6dd_0 :                 21422 C | *Map_a6dd_10 :                21432 C |
 Map_a6dd_102 :               21524 C |  Map_a6dd_112 :               21534 C |
*Map_a6dd_12 :                21434 C |  Map_a6dd_127 :               21549 C |
 Map_a6dd_132 :               21554 C |  Map_a6dd_13D :               2155F C |
*Map_a6dd_14 :                21436 C |  Map_a6dd_152 :               21574 C |
 Map_a6dd_15D :               2157F C | *Map_a6dd_16 :                21438 C |
 Map_a6dd_16D :               2158F C | *Map_a6dd_18 :                2143A C |
 Map_a6dd_187 :               215A9 C | *Map_a6dd_1A :                2143C C |
 Map_a6dd_1A6 :               215C8 C |  Map_a6dd_1BB :               215DD C |
*Map_a6dd_1C :                2143E C |  Map_a6dd_1D5 :               215F7 C |
*Map_a6dd_1E :                21440 C |  Map_a6dd_1EA :               2160C C |
*Map_a6dd_2 :                 21424 C | *Map_a6dd_20 :                21442 C |
 Map_a6dd_204 :               21626 C |  Map_a6dd_219 :               2163B C |
*Map_a6dd_22 :                21444 C |  Map_a6dd_224 :               21646 C |
 Map_a6dd_22F :               21651 C | *Map_a6dd_24 :                21446 C |
 Map_a6dd_244 :               21666 C |  Map_a6dd_24F :               21671 C |
 Map_a6dd_25F :               21681 C | *Map_a6dd_26 :                21448 C |
 Map_a6dd_27E :               216A0 C | *Map_a6dd_28 :                2144A C |
 Map_a6dd_29D :               216BF C | *Map_a6dd_2A :                2144C C |
 Map_a6dd_2B2 :               216D4 C | *Map_a6dd_2C :                2144E C |
 Map_a6dd_2CC :               216EE C | *Map_a6dd_2E :                21450 C |
 Map_a6dd_2E1 :               21703 C |  Map_a6dd_2FB :               2171D C |
*Map_a6dd_30 :                21452 C |  Map_a6dd_306 :               21728 C |
 Map_a6dd_311 :               21733 C |  Map_a6dd_31C :               2173E C |
*Map_a6dd_32 :                21454 C |  Map_a6dd_327 :               21749 C |
 Map_a6dd_33C :               2175E C | *Map_a6dd_34 :                21456 C |
 Map_a6dd_34C :               2176E C | *Map_a6dd_36 :                21458 C |
 Map_a6dd_361 :               21783 C |  Map_a6dd_371 :               21793 C |
 Map_a6dd_37C :               2179E C | *Map_a6dd_38 :                2145A C |
 Map_a6dd_387 :               217A9 C |  Map_a6dd_392 :               217B4 C |
 Map_a6dd_39D :               217BF C | *Map_a6dd_3A :                2145C C |
 Map_a6dd_3B2 :               217D4 C |  Map_a6dd_3BD :               217DF C |
*Map_a6dd_3C :                2145E C |  Map_a6dd_3D2 :               217F4 C |
 Map_a6dd_3DD :               217FF C | *Map_a6dd_3E :                21460 C |
 Map_a6dd_3E3 :               21805 C |  Map_a6dd_3E9 :               2180B C |
 Map_a6dd_3EF :               21811 C |  Map_a6dd_3F5 :               21817 C |
 Map_a6dd_3FB :               2181D C | *Map_a6dd_4 :                 21426 C |
*Map_a6dd_40 :                21462 C |  Map_a6dd_406 :               21828 C |
 Map_a6dd_40C :               2182E C |  Map_a6dd_417 :               21839 C |
 Map_a6dd_41D :               2183F C | *Map_a6dd_42 :                21464 C |
 Map_a6dd_428 :               2184A C |  Map_a6dd_43D :               2185F C |
*Map_a6dd_44 :                21466 C |  Map_a6dd_452 :               21874 C |
*Map_a6dd_46 :                21468 C |  Map_a6dd_462 :               21884 C |
 Map_a6dd_472 :               21894 C | *Map_a6dd_48 :                2146A C |
 Map_a6dd_482 :               218A4 C |  Map_a6dd_48D :               218AF C |
 Map_a6dd_49D :               218BF C | *Map_a6dd_4A :                2146C C |
 Map_a6dd_4AD :               218CF C |  Map_a6dd_4BD :               218DF C |
*Map_a6dd_4C :                2146E C |  Map_a6dd_4D2 :               218F4 C |
*Map_a6dd_4E :                21470 C |  Map_a6dd_4E7 :               21909 C |
*Map_a6dd_50 :                21472 C |  Map_a6dd_501 :               21923 C |
 Map_a6dd_51B :               2193D C | *Map_a6dd_52 :                21474 C |
 Map_a6dd_526 :               21948 C |  Map_a6dd_536 :               21958 C |
*Map_a6dd_54 :                21476 C |  Map_a6dd_541 :               21963 C |
 Map_a6dd_551 :               21973 C |  Map_a6dd_55C :               2197E C |
*Map_a6dd_56 :                21478 C |  Map_a6dd_56C :               2198E C |
 Map_a6dd_57C :               2199E C | *Map_a6dd_58 :                2147A C |
 Map_a6dd_596 :               219B8 C | *Map_a6dd_5A :                2147C C |
 Map_a6dd_5B0 :               219D2 C |  Map_a6dd_5BB :               219DD C |
*Map_a6dd_5C :                2147E C |  Map_a6dd_5CB :               219ED C |
 Map_a6dd_5D1 :               219F3 C |  Map_a6dd_5D7 :               219F9 C |
 Map_a6dd_5DD :               219FF C | *Map_a6dd_5E :                21480 C |
 Map_a6dd_5ED :               21A0F C |  Map_a6dd_5FD :               21A1F C |
*Map_a6dd_6 :                 21428 C | *Map_a6dd_60 :                21482 C |
 Map_a6dd_60D :               21A2F C |  Map_a6dd_61D :               21A3F C |
*Map_a6dd_62 :                21484 C |  Map_a6dd_628 :               21A4A C |
 Map_a6dd_633 :               21A55 C |  Map_a6dd_63E :               21A60 C |
*Map_a6dd_64 :                21486 C |  Map_a6dd_649 :               21A6B C |
 Map_a6dd_654 :               21A76 C |  Map_a6dd_65F :               21A81 C |
*Map_a6dd_66 :                21488 C | *Map_a6dd_68 :                2148A C |
*Map_a6dd_6A :                2148C C | *Map_a6dd_6C :                2148E C |
*Map_a6dd_6E :                21490 C | *Map_a6dd_70 :                21492 C |
*Map_a6dd_72 :                21494 C | *Map_a6dd_74 :                21496 C |
*Map_a6dd_76 :                21498 C | *Map_a6dd_78 :                2149A C |
*Map_a6dd_7A :                2149C C | *Map_a6dd_7C :                2149E C |
*Map_a6dd_7E :                214A0 C | *Map_a6dd_8 :                 2142A C |
*Map_a6dd_80 :                214A2 C | *Map_a6dd_82 :                214A4 C |
*Map_a6dd_84 :                214A6 C | *Map_a6dd_86 :                214A8 C |
*Map_a6dd_88 :                214AA C | *Map_a6dd_8A :                214AC C |
*Map_a6dd_8C :                214AE C | *Map_a6dd_8E :                214B0 C |
*Map_a6dd_90 :                214B2 C | *Map_a6dd_92 :                214B4 C |
*Map_a6dd_94 :                214B6 C | *Map_a6dd_96 :                214B8 C |
*Map_a6dd_98 :                214BA C | *Map_a6dd_9A :                214BC C |
*Map_a6dd_9C :                214BE C | *Map_a6dd_9E :                214C0 C |
*Map_a6dd_A :                 2142C C | *Map_a6dd_A0 :                214C2 C |
*Map_a6dd_A2 :                214C4 C | *Map_a6dd_A4 :                214C6 C |
*Map_a6dd_A6 :                214C8 C | *Map_a6dd_A8 :                214CA C |
*Map_a6dd_AA :                214CC C | *Map_a6dd_AC :                214CE C |
*Map_a6dd_AE :                214D0 C | *Map_a6dd_B0 :                214D2 C |
*Map_a6dd_B2 :                214D4 C | *Map_a6dd_B4 :                214D6 C |
*Map_a6dd_B6 :                214D8 C | *Map_a6dd_B8 :                214DA C |
*Map_a6dd_BA :                214DC C |  Map_a6dd_BC :                214DE C |
 Map_a6dd_BD :                214DF C | *Map_a6dd_C :                 2142E C |
 Map_a6dd_D2 :                214F4 C | *Map_a6dd_E :                 21430 C |
 Map_a6dd_E2 :                21504 C |  Map_a6dd_F2 :                21514 C |
 Map_ab48 :                    A8A4 C | *Map_ab48_0 :                  A8A4 C |
 Map_ab48_10 :                 A8B4 C |  Map_ab48_14E :                A9F2 C |
 Map_ab48_1B8 :                AA5C C | *Map_ab48_2 :                  A8A6 C |
 Map_ab48_222 :                AAC6 C |  Map_ab48_28C :                AB30 C |
 Map_ab48_2F6 :                AB9A C | *Map_ab48_4 :                  A8A8 C |
*Map_ab48_6 :                  A8AA C |  Map_ab48_7A :                 A91E C |
*Map_ab48_8 :                  A8AC C | *Map_ab48_A :                  A8AE C |
*Map_ab48_C :                  A8B0 C | *Map_ab48_E :                  A8B2 C |
 Map_ab48_E4 :                 A988 C |  Map_e1ab :                   1C84E C |
*Map_e1ab_0 :                 1C84E C | *Map_e1ab_2 :                 1C850 C |
 Map_e1ab_3B :                1C889 C | *Map_e1ab_4 :                 1C852 C |
*Map_e1ab_6 :                 1C854 C |  Map_e1ab_6E :                1C8BC C |
 Map_e1ab_8 :                 1C856 C |  Map_e1ab_A1 :                1C8EF C |
 Map_obj08 :                  14848 C |  Map_obj0A :                  143CC C |
 Map_obj0B :                  11432 C |  Map_obj0C :                  11502 C |
 Map_obj0D :                   EE48 C |  Map_obj0E :                   A8A4 C |
 Map_obj0F :                   A7E0 C |  Map_obj11 :                   7940 C |
 Map_obj12 :                   EA8C C |  Map_obj14 :                   B458 C |
 Map_obj15 :                   7C54 C |  Map_obj15a :                  7C72 C |
 Map_obj15b :                 10BB0 C |  Map_obj16 :                  120AA C |
 Map_obj17 :                   7E04 C |  Map_obj18 :                   8148 C |
 Map_obj18a :                  8194 C |  Map_obj18b :                  81A6 C |
 Map_obj18x :                  8106 C |  Map_obj1A :                   85AC C |
 Map_obj1B :                  1127C C |  Map_obj1C :                   8862 C |
 Map_obj1D :                   8928 C |  Map_obj1E :                   8E6E C |
 Map_obj1F :                   975C C |  Map_obj21 :                  1C84E C |
 Map_obj22 :                   9A42 C |  Map_obj23 :                   9B12 C |
 Map_obj24 :                   8EB2 C |  Map_obj25 :                   9F9E C |
 Map_obj26 :                   A5A6 C |  Map_obj27 :                   8ED2 C |
 Map_obj28 :                   9472 C |  Map_obj28a :                  948A C |
 Map_obj28b :                  94A2 C |  Map_obj29 :                   94BA C |
 Map_obj2A :                   89F8 C |  Map_obj2B :                   ACB4 C |
 Map_obj2C :                   AD5A C |  Map_obj2D :                   AF46 C |
 Map_obj2F :                   B3BE C |  Map_obj30 :                   B6E4 C |
 Map_obj31 :                   BC38 C |  Map_obj32 :                   BF8E C |
 Map_obj33 :                   C3D0 C |  Map_obj34 :                   CAD0 C |
 Map_obj36 :                   D0F2 C |  Map_obj38 :                  1462E C |
 Map_obj39 :                   CCA8 C |  Map_obj3A :                   CCDC C |
 Map_obj3B :                   D218 C |  Map_obj3C :                   D3C0 C |
 Map_obj3E :                  1B004 C |  Map_obj3F :                   8F18 C |
 Map_obj40 :                   F8B0 C |  Map_obj41 :                   DE24 C |
 Map_obj42 :                   E04C C |  Map_obj43 :                   E2AC C |
 Map_obj44 :                   E35A C |  Map_obj45 :                   BD44 C |
 Map_obj46 :                   EA0E C |  Map_obj47 :                   EC0A C |
 Map_obj48 :                   81B6 C |  Map_obj4A :                  146E8 C |
 Map_obj4B :                   9FDE C |  Map_obj4C :                   F35A C |
 Map_obj4E :                   F63E C |  Map_obj50 :                   FA3E C |
 Map_obj51 :                   FEE4 C |  Map_obj52 :                  1015A C |
 Map_obj52a :                 101B0 C |  Map_obj53 :                   8752 C |
 Map_obj54 :                   F320 C |  Map_obj55 :                  1034E C |
 Map_obj56 :                  10810 C |  Map_obj57 :                  10A66 C |
 Map_obj57a :                 10A6E C |  Map_obj59 :                  10E58 C |
 Map_obj5A :                  10F92 C |  Map_obj5B :                  1114C C |
 Map_obj5C :                  111A6 C |  Map_obj5D :                  11720 C |
 Map_obj5E :                  11AB4 C |  Map_obj5Ea :                 11AF6 C |
 Map_obj5F :                  11D38 C |  Map_obj60 :                  11FF4 C |
 Map_obj61 :                  122D2 C |  Map_obj62 :                  12428 C |
 Map_obj63 :                  1278C C |  Map_obj64 :                  12ADC C |
 Map_obj65 :                  12C64 C |  Map_obj66 :                  1550E C |
 Map_obj67 :                  15902 C |  Map_obj69 :                  15B5C C |
 Map_obj69a :                 15BB6 C |  Map_obj6A :                  15E14 C |
 Map_obj6B :                  161E4 C |  Map_obj6C :                  163A6 C |
 Map_obj6D :                   E6FE C |  Map_obj6E :                  1645C C |
 Map_obj70 :                  168A4 C |  Map_obj71 :                  115C6 C |
 Map_obj76 :                  19A8E C |  Map_obj78 :                  16FEA C |
 Map_obj79 :                  17374 C |  Map_obj7B :                  1936E C |
 Map_obj7C :                   A080 C |  Map_obj7D :                  174C4 C |
 Map_obj7E :                   CD9E C |  Map_obj7F :                   CEF8 C |
 Map_obj80 :                   506A C |  Map_obj82 :                  19CC4 C |
 Map_obj83 :                  19FA2 C |  Map_obj84 :                  1A906 C |
 Map_obj86 :                  1ACE6 C |  Map_obj86a :                 1AD36 C |
 Map_obj87 :                   568C C |  Map_obj88 :                   5786 C |
 Map_obj89 :                   57BE C |  Map_obj8A :                  1755E C |
 Map_obj8B :                   5BC8 C |  MarkObjGone :                 F7BC C |
 Mark_ChkGone :                F7DE C |  Mark_Delete :                 F7F0 C |
 MoveDemo_On :                 4024 C | *MoveDemo_Record :             3FEC C |
 MoveSonicInDemo :             3FE4 C |  Music81 :                    7539A C |
 Music82 :                    75B02 C |  Music83 :                    75F52 C |
 Music84 :                    763B0 C |  Music85 :                    7681E C |
 Music86 :                    76C6A C |  Music87 :                    771BA C |
 Music88 :                    773A0 C |  Music89 :                    7748E C |
 Music8A :                    777BA C |  Music8B :                    77966 C |
 Music8C :                    77C00 C |  Music8D :                    77E1C C |
 Music8E :                    78038 C |  Music8F :                    7818E C |
 Music90 :                    782DE C |  Music91 :                    7843C C |
 Music92 :                    7970A C |  Music93 :                    79834 C |
 MusicIndex :                 7283A C |  MusicList :                   37AA C |
 MusicList2 :                 12DD8 C |  MvSonic2 :                    7B46 C |
 MvSonicOnPtfm :               7B2E C |  MvSonicOnPtfm2 :              7B3A C |
*NESTMAX :                      100 - |  NemDec :                      1440 C |
 NemDec2 :                     148A C |  NemDec3 :                     14CC C |
 NemDec4 :                     152E C |  Nem_Ball :                   304B0 C |
 Nem_BallHog :                36440 C |  Nem_Basaran :                3900C C |
 Nem_BigFlash :               3B8FA C |  Nem_BlackBird :              3C50E C |
 Nem_Bomb :                   39550 C |  Nem_Bonus :                  3BA6E C |
 Nem_Bridge :                 3037C C |  Nem_Bubbles :                31838 C |
 Nem_Bumper :                 34C48 C |  Nem_Burrobot :               3727C C |
 Nem_Buzz :                   36CEE C |  Nem_Cater :                  399C6 C |
 Nem_Chicken :                3C3B2 C |  Nem_Chopper :                37966 C |
 Nem_ContSonic :              3BD70 C |  Nem_Cork :                   32D3A C |
 Nem_Crabmeat :               36800 C |  Nem_CreditText :             62DB8 C |
 Nem_Cutter :                 35474 C |  Nem_Eggman :                 5DAA4 C |
 Nem_Electric :               35D7C C |  Nem_EndEggman :              621CA C |
 Nem_EndEm :                  604AA C |  Nem_EndFlower :              62B30 C |
 Nem_EndSonic :               606A8 C |  Nem_EndStH :                 633B6 C |
 Nem_Exhaust :                6038A C |  Nem_Explode :                3A938 C |
 Nem_Fan :                    3452E C |  Nem_FlamePipe :              35FFA C |
 Nem_FlapDoor :               316CE C |  Nem_Flicky :                 3C8DC C |
 Nem_FzBoss :                 5F6A2 C |  Nem_FzEggman :               5FE0A C |
 Nem_GHZ_1st :                3D486 C |  Nem_GHZ_2nd :                3EA98 C |
 Nem_GameOver :               3B04E C |  Nem_Gargoyle :               327DA C |
*Nem_GhzGrass :               33378 C | *Nem_GhzLog :                 306CA C |
*Nem_GhzUnkBlock :            30468 C |  Nem_GhzWall1 :               30B38 C |
 Nem_GhzWall2 :               30BD6 C |  Nem_Girder :                 3632A C |
*Nem_Goggle :                 2D1D8 C |  Nem_HSpring :                3B1E0 C |
 Nem_Harpoon :                31FE6 C |  Nem_Hud :                    3A162 C |
 Nem_JapNames :               20F7A C |  Nem_Jaws :                   37BCE C |
 Nem_LZ :                     42316 C |  Nem_Lamp :                   3B83A C |
 Nem_Lava :                   336AA C |  Nem_Lives :                  3A2D6 C |
 Nem_LzBlock1 :               32E64 C |  Nem_LzBlock2 :               3294A C |
 Nem_LzBlock3 :               31E8E C |  Nem_LzDoor1 :                31F44 C |
 Nem_LzDoor2 :                321A6 C |  Nem_LzPlatfm :               32C02 C |
 Nem_LzPole :                 32142 C |  Nem_LzSonic :                2CE34 C |
 Nem_LzSpikeBall :            3154E C |  Nem_LzSwitch :               34E14 C |
 Nem_LzWheel :                322F8 C |  Nem_MZ :                     46E58 C |
 Nem_MiniSonic :              3C020 C |  Nem_Monitors :               3A4D8 C |
 Nem_Motobug :                3837C C |  Nem_MzBlock :                33FC0 C |
 Nem_MzFire :                 333CC C |  Nem_MzGlass :                332C0 C |
 Nem_MzMetal :                32F74 C |  Nem_MzSwitch :               33202 C |
*Nem_MzUnkBlock :             34124 C |  Nem_Newtron :                38606 C |
 Nem_Orbinaut :               397E8 C |  Nem_Pig :                    3C7A6 C |
 Nem_Points :                 3AF9E C |  Nem_PplRock :                30A0A C |
 Nem_Prison :                 5E5F2 C |  Nem_Pylon :                  347D4 C |
 Nem_Rabbit :                 3C25A C |  Nem_ResultEm :               3009A C |
 Nem_Ring :                   3A3E4 C |  Nem_Roller :                 37E58 C |
 Nem_SBZ :                    588A8 C |  Nem_SLZ :                    4B640 C |
 Nem_SS1UpBlock :             2F48C C |  Nem_SSBgCloud :              2EDDA C |
 Nem_SSBgFish :               2DE4A C |  Nem_SSEmStars :              2F582 C |
 Nem_SSEmerald :              2FD24 C |  Nem_SSGOAL :                 2F2CE C |
 Nem_SSGhost :                2FE8C C |  Nem_SSGlass :                30016 C |
 Nem_SSRBlock :               2F3BC C |  Nem_SSRedWhite :             2F5E0 C |
 Nem_SSUpDown :               2FB30 C |  Nem_SSWBlock :               2FF3C C |
 Nem_SSWalls :                2D3DE C |  Nem_SSZone1 :                2F672 C |
 Nem_SSZone2 :                2F734 C |  Nem_SSZone3 :                2F802 C |
 Nem_SSZone4 :                2F8CE C |  Nem_SSZone5 :                2F996 C |
 Nem_SSZone6 :                2FA60 C |  Nem_SYZ :                    51F32 C |
 Nem_Sbz2Eggman :             5EE76 C |  Nem_SbzBlock :               35EFC C |
 Nem_SbzDoor1 :               36186 C |  Nem_SbzDoor2 :               3622E C |
 Nem_SbzFloor :               35D24 C |  Nem_SbzWheel1 :              35184 C |
 Nem_SbzWheel2 :              351D8 C |  Nem_Seal :                   3C68A C |
 Nem_Seesaw :                 341AC C |  Nem_SegaLogo :               1DE96 C |
 Nem_Shield :                 2CB56 C |  Nem_SignPost :               3B3BE C |
 Nem_SlideFloor :             361D6 C |  Nem_SlzBlock :               34A98 C |
 Nem_SlzCannon :              34BA4 C |  Nem_SlzSpike :               343E8 C |
 Nem_SlzSwing :               348B6 C |  Nem_SlzWall :                34772 C |
*Nem_Smoke :                  2CA18 C |  Nem_SpikePole :              308DE C |
 Nem_Spikes :                 3064E C |  Nem_SpinPform :              35816 C |
 Nem_Splash :                 30D5A C | *Nem_Splats :                 39308 C |
 Nem_Squirrel :               3CA16 C |  Nem_Stalk :                  30218 C |
 Nem_Stars :                  2CCEC C |  Nem_Stomper :                35678 C |
 Nem_Swing :                  30262 C | *Nem_SyzSparkle :             2CB1C C |
 Nem_SyzSpike1 :              34EF6 C |  Nem_SyzSpike2 :              34DB2 C |
 Nem_TitleCard :              39B54 C |  Nem_TitleFg :                1E504 C |
 Nem_TitleSonic :             1F510 C |  Nem_TitleTM :                20E88 C |
 Nem_TrapDoor :               35B46 C |  Nem_TryAgain :               61886 C |
*Nem_UnkExplode :             37094 C | *Nem_UnkFire :                2CF3E C |
 Nem_VSpring :                3B2E2 C |  Nem_Warp :                   2CF90 C |
 Nem_Water :                  30C36 C |  Nem_Weapons :                5E308 C |
 Nem_Yadrin :                 38C24 C |  NormalJump :                 135AC C |
 NotOnScreen :                 D9AC C |  NotOnScreen2 :                D9E0 C |
*Notes :                        1BC C |  OPL_ClrList :                 DA2E C |
 OPL_Index :                   D9F2 C |  OPL_Main :                    D9F6 C |
 OPL_MakeItem :                DB5A C |  OPL_Next :                    DA8A C |
 Obj01 :                      12CE8 C |  Obj01_ChkInvin :             12DF2 C |
 Obj01_ChkRoll :              134CC C |  Obj01_ChkShoes :             12E38 C |
 Obj01_Control :              12D4E C |  Obj01_Death :                13AD0 C |
 Obj01_Display :              12DEC C |  Obj01_DoRoll :               134D6 C |
 Obj01_ExitChk :              12E6C C |  Obj01_Hurt :                 13A60 C |
 Obj01_InWater :              12E92 C |  Obj01_Index :                12D02 C |
 Obj01_JumpMove :             133A2 C |  Obj01_Main :                 12D0C C |
 Obj01_MdJump :               12F50 C |  Obj01_MdJump2 :              12F9A C |
 Obj01_MdNormal :             12F28 C |  Obj01_MdRoll :               12F7A C |
 Obj01_Modes :                12DD0 C |  Obj01_NoRoll :               134CA C |
 Obj01_Normal :               12CF4 C |  Obj01_NotLeft :              12FEC C |
 Obj01_NotRight :             12FF8 C |  Obj01_OutWater :             12EE4 C |
 Obj01_PlayMusic :            12E22 C |  Obj01_ResetLevel :           13B70 C |
 Obj01_ResetScr :             130C4 C |  Obj01_ResetScr2 :            133A6 C |
 Obj01_RmvInvin :             12E32 C |  Obj08 :                      1456C C |
 Obj08_Delete :               145C2 C |  Obj08_Display :              145AA C |
 Obj08_Index :                1457A C |  Obj08_Main :                 14580 C |
 Obj09 :                      1BC1E C |  Obj09_BumpSnd :              1C1B6 C |
 Obj09_Chk1Up :               1C062 C |  Obj09_ChkBumper :            1C148 C |
 Obj09_ChkCont :              1C026 C |  Obj09_ChkDebug :             1BC7E C |
 Obj09_ChkEmer :              1C08C C |  Obj09_ChkGhost :             1C0D2 C |
 Obj09_ChkGhostTag :          1C0DE C |  Obj09_ChkGlass :             1C274 C |
 Obj09_ChkItems :             1BFEC C |  Obj09_ChkItems2 :            1C128 C |
 Obj09_ChkRight :             1BD06 C |  Obj09_DOWNblock :            1C20A C |
 Obj09_DOWNsnd :              1C234 C |  Obj09_Display :              1BCD4 C |
 Obj09_Exit2 :                1BECE C |  Obj09_ExitStage :            1BE7A C |
 Obj09_Fall :                 1BEF0 C |  Obj09_GOAL :                 1C1C0 C |
 Obj09_Get1Up :               1C076 C |  Obj09_GetCont :              1C03A C |
 Obj09_GetEmer :              1C0A6 C |  Obj09_GhostLoop :            1C108 C |
 Obj09_GhostLoop2 :           1C106 C |  Obj09_GhostNotSolid :        1C120 C |
 Obj09_Glass :                1C28C C |  Obj09_GlassSnd :             1C2B0 C |
 Obj09_GlassUpdate :          1C2AC C |  Obj09_InAir :                1BCC8 C |
 Obj09_Index :                1BC3A C |  Obj09_Jump :                 1BDF0 C |
 Obj09_Main :                 1BC42 C |  Obj09_MakeGhostSolid :       1C0F6 C |
 Obj09_Modes :                1BCB6 C |  Obj09_Move :                 1BCFA C |
 Obj09_MoveLeft :             1BD92 C |  Obj09_MoveRight :            1BDC2 C |
 Obj09_NoCont :               1C05E C |  Obj09_NoDebug :              1BC92 C |
 Obj09_NoEmer :               1C0C4 C |  Obj09_NoGhost :              1C0F2 C |
 Obj09_NoGlass :              1C2BA C |  Obj09_NoJump :               1BE32 C |
 Obj09_NoReplace :            1C112 C |  Obj09_Normal :               1BC2C C |
 Obj09_OnWall :               1BCBA C |  Obj09_Rblock :               1C23E C |
 Obj09_RevStage :             1C266 C |  Obj09_UPblock :              1C1D6 C |
 Obj09_UPsnd :                1C200 C |  Obj0A :                      13F14 C |
 Obj0A_AirLeft :              14014 C |  Obj0A_Animate :              13F8C C |
 Obj0A_ChkWater :             13F98 C |  Obj0A_Countdown :            14118 C |
 Obj0A_Delete :               13FF4 C |  Obj0A_Delete2 :              1400E C |
 Obj0A_Delete3 :              14046 C |  Obj0A_Display :              13FFA C |
 Obj0A_Display2 :             1402E C |  Obj0A_GoMakeItem :           14226 C |
 Obj0A_Index :                13F22 C |  Obj0A_Main :                 13F34 C |
 Obj0A_MakeItem :             14238 C |  Obj0A_ReduceAir :            1419C C |
 Obj0A_ShowNumber :           1404C C |  Obj0A_WarnSound :            14192 C |
 Obj0A_Wobble :               13FB6 C |  Obj0A_WobbleData :           14098 C |
 Obj0B :                      11316 C |  Obj0B_Action :               11362 C |
 Obj0B_Display :              1142E C |  Obj0B_Grab :                 113D8 C |
 Obj0B_Index :                11324 C |  Obj0B_LetGo :                113B8 C |
 Obj0B_Main :                 1132A C |  Obj0B_MoveDown :             1139E C |
 Obj0B_MoveUp :               1137C C |  Obj0B_Release :              113C2 C |
 Obj0C :                      11456 C |  Obj0C_Display :              114EE C |
 Obj0C_Index :                11464 C |  Obj0C_Main :                 11468 C |
 Obj0C_OpenClose :            11494 C |  Obj0C_Solid :                114B6 C |
 Obj0D :                       EC32 C |  Obj0D_Index :                 EC6E C |
 Obj0D_Main :                  EC78 C |  Obj0D_SparkPos :              ED4E C |
 Obj0D_Sparkle :               ECE2 C |  Obj0D_Spin :                  ECC6 C |
 Obj0D_Touch :                 EC9C C |  Obj0E :                       A638 C |
 Obj0E_Animate :               A6A8 C |  Obj0E_Delay :                 A682 C |
 Obj0E_Display :               A6A2 C |  Obj0E_Index :                 A646 C |
 Obj0E_Main :                  A64E C |  Obj0E_Move :                  A692 C |
 Obj0E_Wait :                  A690 C |  Obj0F :                       A6B8 C |
 Obj0F_Index :                 A6CA C |  Obj0F_Main :                  A6D0 C |
 Obj0F_PrsStart :              A716 C |  Obj10 :                      1C2BC C |
 Obj11 :                       7334 C |  Obj11_Action :                7410 C |
 Obj11_Action2 :               7594 C |  Obj11_Bend :                  762C C |
 Obj11_BendData :              76D8 C |  Obj11_BendData2 :             77E8 C |
 Obj11_ChkDel :                78E8 C |  Obj11_DelAll :                7908 C |
 Obj11_DelLoop :               7914 C |  Obj11_Delete :                792E C |
 Obj11_Delete2 :               7934 C |  Obj11_Display :               7420 C |
 Obj11_Display2 :              793A C |  Obj11_Index :                 7342 C |
 Obj11_Main :                  734E C |  Obj11_MakeBdg :               7396 C |
 Obj11_MoveSonic :             7600 C |  Obj11_Solid :                 7428 C |
 Obj11_WalkOff :               759E C |  Obj12 :                       EA16 C |
 Obj12_Animate :               EA4C C |  Obj12_ChkDel :                EA6A C |
 Obj12_Index :                 EA24 C |  Obj12_Main :                  EA28 C |
 Obj13 :                       E3A0 C |  Obj13_Index :                 E3B2 C |
 Obj13_Main :                  E3BC C |  Obj13_MakeLava :              E3DC C |
 Obj13_Rates :                 E3B6 C |  Obj14 :                       E40E C |
 Obj14_Action :                E4C4 C |  Obj14_ChkDel :                E4E2 C |
 Obj14_Delete :                E5CA C |  Obj14_Index :                 E420 C |
 Obj14_Main :                  E438 C |  Obj14_PlaySnd :               E4BA C |
 Obj14_SetSpeed :              E486 C |  Obj14_Speeds :                E426 C |
 Obj14_Type00 :                E514 C |  Obj14_Type04 :                E53C C |
 Obj14_Type05 :                E55E C |  Obj14_Type06 :                E580 C |
 Obj14_Type07 :                E5A4 C |  Obj14_Type08 :                E5C8 C |
 Obj14_TypeIndex :             E502 C |  Obj15 :                       795E C |
 Obj15_Action :                7AF8 C |  Obj15_Action2 :               7B04 C |
 Obj15_ChkDel :                7C0A C |  Obj15_DelAll :                7C2A C |
 Obj15_DelLoop :               7C32 C |  Obj15_Delete :                7C4A C |
 Obj15_Display :               7C50 C |  Obj15_Index :                 796C C |
 Obj15_Main :                  797A C |  Obj15_MakeChain :             7A32 C |
 Obj15_Move :                  7B70 C |  Obj15_Move2 :                 7BC6 C |
 Obj15_NotSLZ :                79D8 C |  Obj15_SetLength :             7A06 C |
 Obj15_SetSolid :              7AE8 C |  Obj15_Solid :                 7568 C |
 Obj16 :                      12014 C |  Obj16_ChkDel :               1208E C |
 Obj16_Data :                 12072 C |  Obj16_Index :                12022 C |
 Obj16_Main :                 12028 C |  Obj16_Move :                 12058 C |
 Obj16_Wait :                 12078 C |  Obj17 :                       7CAE C |
 Obj17_Action :                7D88 C |  Obj17_ChkDel :                7DB4 C |
 Obj17_DelAll :                7DD4 C |  Obj17_DelLoop :               7DE0 C |
 Obj17_Delete :                7DF6 C |  Obj17_Display :               7DFC C |
 Obj17_Index :                 7CBC C |  Obj17_Main :                  7CC6 C |
 Obj17_MakeHelix :             7D16 C |  Obj17_RotateSpikes :          7D94 C |
 Obj18 :                       7E3E C |  Obj18_01_Move :               7F9E C |
 Obj18_02_Move :               7FE4 C |  Obj18_03_NoMove :             8004 C |
 Obj18_03_Wait :               8006 C |  Obj18_07_NoMove :             80A0 C |
 Obj18_07_Wait :               80A2 C |  Obj18_08_NoStop :             80C4 C |
 Obj18_Action :                7EF6 C |  Obj18_Action2 :               7F06 C |
 Obj18_ChgMotion :             80DC C |  Obj18_ChkDel :                80E4 C |
 Obj18_Delete :                8102 C |  Obj18_Index :                 7E4C C |
 Obj18_Main :                  7E56 C |  Obj18_Move :                  7F52 C |
 Obj18_NotSLZ :                7EA6 C |  Obj18_NotSYZ :                7E84 C |
 Obj18_Nudge :                 7F38 C |  Obj18_SetFrame :              7EDE C |
 Obj18_Solid :                 7EE2 C |  Obj18_Type00 :                7F80 C |
 Obj18_Type01 :                7F92 C |  Obj18_Type02 :                7FD8 C |
 Obj18_Type03 :                7FF0 C |  Obj18_Type04 :                8018 C |
 Obj18_Type05 :                7F82 C |  Obj18_Type06 :                7FC8 C |
 Obj18_Type07 :                8082 C |  Obj18_Type08 :                80AE C |
 Obj18_Type0A :                80C6 C |  Obj18_Type0B :                7FBA C |
 Obj18_Type0C :                7FAA C |  Obj18_TypeIndex :             7F66 C |
 Obj19 :                       81B4 C |  Obj1A :                       821C C |
 Obj1A_ChkTouch :              8272 C |  Obj1A_Collapse :              8480 C |
 Obj1A_Delete :                8326 C |  Obj1A_Display :               82C6 C |
 Obj1A_Index :                 822A C |  Obj1A_Main :                  8236 C |
 Obj1A_Slope :                 8284 C |  Obj1A_SlopeData :             857C C |
 Obj1A_TimeZero :              8316 C |  Obj1A_Touch :                 8296 C |
 Obj1A_WalkOff :               82A8 C |  Obj1B :                      111D6 C |
 Obj1B_Action :               1120C C |  Obj1B_Animate :              1124A C |
 Obj1B_Display :              11278 C |  Obj1B_Index :                111E4 C |
 Obj1B_Main :                 111E8 C |  Obj1C :                       87D6 C |
 Obj1C_ChkDel :                8818 C |  Obj1C_Index :                 87E4 C |
 Obj1C_Main :                  87E8 C |  Obj1C_Var :                   883A C |
 Obj1D :                       886A C |  Obj1D_Action :                88A8 C |
 Obj1D_ChkDel :                88C2 C |  Obj1D_ChkTouch :              88EC C |
 Obj1D_Delete :                88E6 C |  Obj1D_Index :                 8878 C |
 Obj1D_Main :                  887E C |  Obj1E :                       8B58 C |
 Obj1E_Action :                8BBA C |  Obj1E_Index :                 8B66 C |
 Obj1E_Main :                  8B6A C |  Obj1E_MakeBall :              8BDC C |
 Obj1E_MarkAsGone :            8BD8 C |  Obj1E_SetBall :               8BD4 C |
 Obj1F :                       94FC C |  Obj1F_Action :                9568 C |
 Obj1F_BallMain :              96CA C |  Obj1F_BallMove :              9700 C |
 Obj1F_Delete :                96C4 C |  Obj1F_Delete2 :               9722 C |
 Obj1F_Index :                 950A C |  Obj1F_Index2 :                9584 C |
 Obj1F_Main :                  9514 C |  Obj1F_MakeFire :              95C4 C |
 Obj1F_MakeFire2 :             95FA C |  Obj1F_Move :                  959C C |
 Obj1F_SetAni :                9694 C |  Obj1F_WaitFire :              9588 C |
 Obj1F_WalkOnFloor :           9626 C |  Obj20 :                       8C28 C |
 Obj20_Animate :               8CD6 C |  Obj20_Bounce :                8C7E C |
 Obj20_ChkExplode :            8CBA C |  Obj20_Display :               8CE8 C |
 Obj20_Index :                 8C36 C |  Obj20_Main :                  8C3A C |
 Obj21 :                      1C7E2 C |  Obj21_Display :              1C844 C |
 Obj21_Flash :                1C81E C |  Obj21_Flash2 :               1C82E C |
 Obj21_Index :                1C7F0 C |  Obj21_Main :                 1C7F4 C |
 Obj22 :                       97EA C |  Obj22_Action :                9828 C |
 Obj22_ChgDir :                9914 C |  Obj22_ChkNrSonic :            98DE C |
 Obj22_Delete :                9938 C |  Obj22_Fire :                  987A C |
 Obj22_Index :                 97F8 C |  Obj22_Index2 :                9844 C |
 Obj22_Main :                  97FE C |  Obj22_Move :                  9848 C |
 Obj22_SetNrSonic :            98FA C |  Obj22_Stop :                  9926 C |
 Obj23 :                       993E C |  Obj23_Animate :               99A0 C |
 Obj23_Animate2 :              9A14 C |  Obj23_ChkCancel :             99B0 C |
 Obj23_Delete :                9A04 C |  Obj23_Explode :               99F4 C |
 Obj23_FromBuzz :              99BE C |  Obj23_FromNewt :              9A0A C |
 Obj23_Index :                 994C C |  Obj23_Main :                  9956 C |
 Obj24 :                       8CFE C |  Obj24_Animate :               8D50 C |
 Obj24_Display :               8D6A C |  Obj24_Index :                 8D0C C |
 Obj24_Main :                  8D10 C |  Obj25 :                       9B32 C |
 Obj25_Animate :               9C22 C |  Obj25_Collect :               9C4A C |
 Obj25_Delete :                9C7E C |  Obj25_Index :                 9B40 C |
 Obj25_Main :                  9B6A C |  Obj25_MakeRings :             9BB6 C |
 Obj25_PlaySnd :               9CBC C |  Obj25_PosData :               9B4A C |
 Obj25_Sparkle :               9C70 C |  Obj26 :                       A124 C |
 Obj26_Animate :               A282 C |  Obj26_BreakOpen :             A2B0 C |
 Obj26_Display :               A28C C |  Obj26_Explode :               A2D8 C |
 Obj26_Fall :                  A1D8 C |  Obj26_Index :                 A132 C |
 Obj26_Main :                  A13C C |  Obj26_NotBroken :             A192 C |
 Obj26_SetBroken :             A2F4 C |  Obj26_Solid :                 A19E C |
 Obj26_SolidSides :            A4AA C |  Obj27 :                       8D6E C |
 Obj27_Animate :               8DE4 C |  Obj27_Display :               8DFE C |
 Obj27_Index :                 8D7C C |  Obj27_LoadAnimal :            8D82 C |
 Obj27_Main :                  8DA4 C |  Obj28 :                       8F2E C |
 Obj28_Display :               9124 C |  Obj28_EndMap :                8FD6 C |
 Obj28_EndSpeed :              8FAA C |  Obj28_EndVram :               9002 C |
 Obj28_Ending :                9018 C |  Obj28_FromEnemy :             9082 C |
 Obj28_Index :                 8F3C C |  Obj28_VarIndex :              8F66 C |
 Obj28_Variables :             8F72 C |  Obj29 :                       941E C |
 Obj29_Index :                 9430 C |  Obj29_Main :                  9434 C |
 Obj29_Slower :                945E C |  Obj2A :                       8940 C |
 Obj2A_Animate :               89B4 C |  Obj2A_Index :                 894E C |
 Obj2A_Main :                  8952 C |  Obj2A_MarkAsUsed :            89D8 C |
 Obj2A_Open :                  89AE C |  Obj2A_OpenShut :              8976 C |
 Obj2B :                       AC0A C |  Obj2B_ChgAni :                AC7E C |
 Obj2B_ChgSpeed :              AC56 C |  Obj2B_Index :                 AC1C C |
 Obj2B_Main :                  AC20 C |  Obj2C :                       ACC4 C |
 Obj2C_Animate :               AD40 C |  Obj2C_Index :                 ACD2 C |
 Obj2C_Main :                  ACD6 C |  Obj2C_Turn :                  AD24 C |
 Obj2D :                       AD8E C |  Obj2D_Action :                ADE0 C |
 Obj2D_ChgDir :                AE04 C |  Obj2D_ChkSonic :              AEDC C |
 Obj2D_ChkSonic2 :             AF0C C |  Obj2D_Index :                 AD9C C |
 Obj2D_Index2 :                ADFC C |  Obj2D_Jump :                  AEA0 C |
 Obj2D_Main :                  ADA0 C |  Obj2D_Move :                  AE2E C |
 Obj2E :                       A30E C |  Obj2E_ChkEggman :             A37A C |
 Obj2E_ChkEnd :                A49E C |  Obj2E_ChkInvinc :             A402 C |
 Obj2E_ChkRings :              A456 C |  Obj2E_ChkS :                  A496 C |
 Obj2E_ChkShield :             A3E6 C |  Obj2E_ChkShoes :              A3B8 C |
 Obj2E_ChkSonic :              A3A0 C |  Obj2E_Delete :                A4A0 C |
 Obj2E_Index :                 A320 C |  Obj2E_Main :                  A326 C |
 Obj2E_Move :                  A366 C |  Obj2E_NoMusic :               A454 C |
 Obj2E_RingSound :             A48C C |  Obj2F :                       AFA2 C |
 Obj2F_Action :                B01E C |  Obj2F_ChkDel :                B1A4 C |
 Obj2F_Data :                  AFB4 C |  Obj2F_Data1 :                 B202 C |
 Obj2F_Data2 :                 B24E C |  Obj2F_Data3 :                 B27A C |
 Obj2F_DelFlames :             B1D0 C |  Obj2F_Display :               B080 C |
 Obj2F_Index :                 AFB0 C |  Obj2F_Main :                  AFC0 C |
 Obj2F_Move :                  B0D0 C |  Obj2F_Slope :                 B046 C |
 Obj2F_Solid :                 B05E C |  Obj2F_Type00 :                B0A8 C |
 Obj2F_Type01 :                B0AA C |  Obj2F_Type02 :                B0B4 C |
 Obj2F_Type03 :                B0BE C |  Obj2F_Type04 :                B0C8 C |
 Obj2F_Type05 :                B0E8 C |  Obj2F_TypeIndex :             B09C C |
 Obj2F_Types :                 B088 C |  Obj30 :                       B488 C |
 Obj30_Block012 :              B576 C |  Obj30_Block34 :               B59C C |
 Obj30_ChkSwitch :             B6AC C |  Obj30_Delete :                B4B8 C |
 Obj30_Index :                 B4BC C |  Obj30_Load :                  B500 C |
 Obj30_Loop :                  B4FA C |  Obj30_Main :                  B4D2 C |
 Obj30_Reflect012 :            B58E C |  Obj30_Reflect34 :             B5B4 C |
 Obj30_Type00 :                B5E6 C |  Obj30_Type01 :                B5E8 C |
 Obj30_Type02 :                B5F2 C |  Obj30_Type03 :                B614 C |
 Obj30_Type04 :                B69A C |  Obj30_TypeIndex :             B5DC C |
 Obj30_Types :                 B5C8 C |  Obj30_Vars1 :                 B4C6 C |
 Obj30_Vars2 :                 B4CC C |  Obj31 :                       B766 C |
 Obj31_ChkDel :                B8FE C |  Obj31_Display :               B8C4 C |
 Obj31_Display2 :              B8FA C |  Obj31_Index :                 B774 C |
 Obj31_Loop :                  B7D6 C |  Obj31_Main :                  B79C C |
 Obj31_MakeStomper :           B7DE C |  Obj31_Restart :               B9CA C |
 Obj31_SetSize :               B862 C |  Obj31_SwchNums :              B77E C |
 Obj31_Type00 :                B93E C |  Obj31_Type01 :                B9DA C |
 Obj31_Type03 :                BA6A C |  Obj31_TypeIndex :             B930 C |
 Obj31_Types :                 B91E C |  Obj31_Var :                   B782 C |
 Obj31_Var2 :                  B87C C |  Obj32 :                       BE18 C |
 Obj32_Delete :                BF06 C |  Obj32_Display :               BEE2 C |
 Obj32_Index :                 BE26 C |  Obj32_MZBlock :               BF0C C |
 Obj32_MZData :                BF46 C |  Obj32_MZLoop :                BF2C C |
 Obj32_Main :                  BE2A C |  Obj32_Pressed :               BE60 C |
 Obj33 :                       BFBC C |  Obj33_ChkGone :               C03C C |
 Obj33_ChkLava :               C204 C |  Obj33_ChkLava2 :              C22A C |
 Obj33_Index :                 BFCA C |  Obj33_LoadLava :              C248 C |
 Obj33_Main :                  BFD4 C |  Obj33_NoLava :                C246 C |
 Obj33_StopPush :              C1BA C |  Obj33_Var :                   BFD0 C |
 Obj34 :                       C3F0 C |  Obj34_ActNumber :             C458 C |
 Obj34_ChangeArt :             C4FE C |  Obj34_CheckFZ :               C418 C |
 Obj34_CheckSBZ3 :             C406 C |  Obj34_ChkPos :                C49E C |
 Obj34_ChkPos2 :               C4D2 C |  Obj34_ConData :               C532 C |
 Obj34_Delete :                C51E C |  Obj34_Index :                 C3FE C |
 Obj34_ItemData :              C522 C |  Obj34_LoadConfig :            C426 C |
 Obj34_Loop :                  C438 C |  Obj34_MakeSprite :            C46C C |
 Obj34_Move :                  C4AE C |  Obj34_Move2 :                 C4E8 C |
 Obj34_Wait :                  C4C4 C |  Obj35 :                       B2C6 C |
 Obj35_Animate :               B3A8 C |  Obj35_Index :                 B2D4 C |
 Obj35_Main :                  B2DA C |  Obj35_Move :                  B39C C |
 Obj36 :                       CF2C C |  Obj36_Display :               D02C C |
 Obj36_Hurt :                  CFF6 C |  Obj36_Index :                 CF3A C |
 Obj36_Main :                  CF4A C |  Obj36_SideWays :              CFB0 C |
 Obj36_Solid :                 CF94 C |  Obj36_Type00 :                D066 C |
 Obj36_Type01 :                D068 C |  Obj36_Type02 :                D07C C |
 Obj36_Type0x :                D050 C |  Obj36_TypeIndex :             D060 C |
 Obj36_Upright :               CFD0 C |  Obj36_Var :                   CF3E C |
 Obj36_Wait :                  D090 C |  Obj37 :                       9CC2 C |
 Obj37_Bounce :                9D9A C |  Obj37_ChkDel :                9DD4 C |
 Obj37_Collect :               9DEC C |  Obj37_CountRings :            9CDA C |
 Obj37_Delete :                9E0E C |  Obj37_Index :                 9CD0 C |
 Obj37_Loop :                  9CF2 C |  Obj37_MakeRings :             9CFA C |
 Obj37_ResetCounter :          9D7E C |  Obj37_Sparkle :               9E00 C |
 Obj38 :                      143D4 C |  Obj38_Delete :               14452 C |
 Obj38_Delete2 :              144CA C |  Obj38_DoStars :              14414 C |
 Obj38_Index :                143E2 C |  Obj38_Main :                 143E8 C |
 Obj38_RmvShield :            14450 C |  Obj38_Shield :               14420 C |
 Obj38_StarTrail :            14482 C |  Obj38_StarTrail2 :           1449E C |
 Obj38_StarTrail2a :          144A2 C |  Obj38_Stars :                14458 C |
 Obj39 :                       C5A2 C |  Obj39_ChgMode :               C638 C |
 Obj39_ChkPLC :                C5B6 C |  Obj39_Display :               C658 C |
 Obj39_Index :                 C5B0 C |  Obj39_Main :                  C5BE C |
 Obj39_Move :                  C604 C |  Obj39_ResetLvl :              C652 C |
 Obj39_SetWait :               C60C C |  Obj39_Wait :                  C618 C |
 Obj3A :                       C65C C |  Obj3A_AddBonus :              C77E C |
 Obj3A_ChkBonus :              C758 C |  Obj3A_ChkPLC :                C67C C |
 Obj3A_ChkPos :                C6D4 C |  Obj3A_ChkPos2 :               C80E C |
 Obj3A_ChkSS :                 C7C2 C |  Obj3A_Config :                C860 C |
 Obj3A_Display :               C728 C |  Obj3A_Display2 :              C7DA C |
 Obj3A_Index :                 C66A C |  Obj3A_Loop :                  C68E C |
 Obj3A_Main :                  C684 C |  Obj3A_Move :                  C6E4 C |
 Obj3A_Move2 :                 C81E C |  Obj3A_NextLevel :             C798 C |
 Obj3A_RingBonus :             C748 C |  Obj3A_SBZ2 :                  C834 C |
 Obj3A_SetDelay :              C776 C |  Obj3A_TimeBonus :             C72C C |
 Obj3A_Wait :                  C71E C |  Obj3B :                       D15A C |
 Obj3B_Index :                 D168 C |  Obj3B_Main :                  D16C C |
 Obj3B_Solid :                 D190 C |  Obj3C :                       D226 C |
 Obj3C_ChkRoll :               D28C C |  Obj3C_ChkSpeed :              D29C C |
 Obj3C_FragMove :              D2E0 C |  Obj3C_FragSpd1 :              D380 C |
 Obj3C_FragSpd2 :              D3A0 C |  Obj3C_Index :                 D238 C |
 Obj3C_Main :                  D23E C |  Obj3C_Smash :                 D2C6 C |
 Obj3C_Solid :                 D268 C |  Obj3D :                      17990 C |
 Obj3D_Display :              17D3A C |  Obj3D_FaceDel :              17D00 C |
 Obj3D_FaceDisp :             17CFE C |  Obj3D_FaceMain :             17CB4 C |
 Obj3D_FlameDel :             17D34 C |  Obj3D_FlameDisp :            17D32 C |
 Obj3D_FlameMain :            17D06 C |  Obj3D_Index :                1799E C |
 Obj3D_LoadBoss :             179C0 C |  Obj3D_Loop :                 179B8 C |
 Obj3D_Main :                 179AC C |  Obj3D_MakeBall :             17B5A C |
 Obj3D_ObjData :              179A6 C |  Obj3D_Reverse :              17BD4 C |
 Obj3D_ShipDel :              17CAE C |  Obj3D_ShipFlash :            17ABE C |
 Obj3D_ShipIndex :            17A4C C |  Obj3D_ShipMain :             17A1A C |
 Obj3D_ShipMove :             17BAA C |  Obj3D_ShipStart :            17A5A C |
 Obj3E :                      1ADB2 C |  Obj3E_Animals :              1AF8A C |
 Obj3E_BodyMain :             1AE52 C |  Obj3E_ChkOpened :            1AE70 C |
 Obj3E_Delete :               1ADE2 C |  Obj3E_DoOpen :               1AE86 C |
 Obj3E_EndAct :               1AFDA C |  Obj3E_Explosion :            1AEF2 C |
 Obj3E_FindObj28 :            1AFE4 C |  Obj3E_Index :                1ADE8 C |
 Obj3E_Loop :                 1AF5E C |  Obj3E_Main :                 1AE08 C |
 Obj3E_MakeAnimal :           1AF38 C |  Obj3E_Not02 :                1AE50 C |
 Obj3E_Obj28Found :           1AFFA C |  Obj3E_Switched :             1AE8E C |
 Obj3E_Var :                  1ADF8 C |  Obj3F :                       8E02 C |
 Obj3F_Index :                 8E10 C |  Obj3F_Main :                  8E14 C |
 Obj40 :                       F72A C |  Obj40_Action :                F7A4 C |
 Obj40_Animate :               F880 C |  Obj40_Delete :                F88E C |
 Obj40_FixToFloor :            F81C C |  Obj40_Index :                 F738 C |
 Obj40_Index2 :                F7F4 C |  Obj40_Main :                  F740 C |
 Obj40_Move :                  F7F8 C |  Obj40_Pause :                 F868 C |
 Obj40_SetSmoke :              F79C C |  Obj41 :                       DBC8 C |
 Obj41_AniDwn :                DDF2 C |  Obj41_AniLR :                 DD76 C |
 Obj41_AniUp :                 DCDE C |  Obj41_BounceDwn :             DDBA C |
 Obj41_BounceLR :              DD20 C |  Obj41_BounceUp :              DCA4 C |
 Obj41_Dwn :                   DD8C C |  Obj41_Index :                 DBFA C |
 Obj41_LR :                    DCF4 C |  Obj41_Main :                  DC12 C |
 Obj41_Powers :                DC0E C |  Obj41_ResetDwn :              DDFC C |
 Obj41_ResetLR :               DD80 C |  Obj41_ResetUp :               DCE8 C |
 Obj41_Up :                    DC88 C |  Obj42 :                       DE72 C |
 Obj42_Action :                DEB6 C |  Obj42_ChkDist :               DEDC C |
 Obj42_Delete :                E020 C |  Obj42_Fall :                  DF3E C |
 Obj42_FireMissile :           DFC6 C |  Obj42_Index :                 DE80 C |
 Obj42_Index2 :                DED2 C |  Obj42_Main :                  DE86 C |
 Obj42_MatchFloor :            DF92 C |  Obj42_Move :                  DF78 C |
 Obj42_Speed :                 DFB2 C |  Obj42_Type00 :                DF1E C |
 Obj42_Type01 :                DFB8 C |  Obj43 :                       E104 C |
 Obj43_Action :                E15E C |  Obj43_ChkGone :               E198 C |
 Obj43_ChkJump :               E208 C |  Obj43_Delete :                E1AA C |
 Obj43_Index :                 E112 C |  Obj43_Index2 :                E1AE C |
 Obj43_Jump :                  E226 C |  Obj43_Main :                  E116 C |
 Obj43_MatchFloor :            E23A C |  Obj43_RollChk :               E1B6 C |
 Obj43_RollNoChk :             E1E0 C |  Obj43_Stop :                  E25C C |
 Obj44 :                       E2DE C |  Obj44_Display :               E336 C |
 Obj44_Index :                 E2EC C |  Obj44_Main :                  E2F2 C |
 Obj44_Solid :                 E32A C |  Obj44_SolidWall :             8A6E C |
 Obj44_SolidWall2 :            8AE6 C |  Obj45 :                       BA84 C |
 Obj45_ChkDel :                BB90 C |  Obj45_Display :               BB8C C |
 Obj45_Index :                 BA92 C |  Obj45_Load :                  BACC C |
 Obj45_Loop :                  BAC6 C |  Obj45_Main :                  BAAE C |
 Obj45_Move :                  BBB0 C |  Obj45_Solid :                 BB42 C |
 Obj45_Var :                   BA9C C |  Obj46 :                       E8DA C |
 Obj46_Action :                E928 C |  Obj46_ChkDel :                E956 C |
 Obj46_Index :                 E8E8 C |  Obj46_Main :                  E8EC C |
 Obj46_Type00 :                E984 C |  Obj46_Type01 :                E99E C |
 Obj46_Type02 :                E986 C |  Obj46_Type03 :                E9BE C |
 Obj46_Type04 :                E9FA C |  Obj46_TypeIndex :             E97A C |
 Obj47 :                       EADA C |  Obj47_ChkHit :                EBE4 C |
 Obj47_Delete :                EBF6 C |  Obj47_Display :               EBBA C |
 Obj47_Hit :                   EB16 C |  Obj47_Index :                 EAE8 C |
 Obj47_Main :                  EAEC C |  Obj47_Score :                 EB94 C |
 Obj48 :                      17D74 C |  Obj48_Base :                 17E48 C |
 Obj48_ChkVanish :            17F14 C |  Obj48_Display :              17E96 C |
 Obj48_Display2 :             17EAA C |  Obj48_Display3 :             17F0E C |
 Obj48_Display4 :             17F46 C |  Obj48_Index :                17D82 C |
 Obj48_Main :                 17D8C C |  Obj48_MakeBall :             17E1A C |
 Obj48_MakeLinks :            17DB8 C |  Obj48_Move :                  7B86 C |
 Obj48_PosData :              17E42 C |  Obj48_Vanish :               17F1E C |
 Obj49 :                       D1C8 C |  Obj49_ChkDel :                D1F8 C |
 Obj49_Index :                 D1D6 C |  Obj49_Main :                  D1DA C |
 Obj49_PlaySnd :               D1E4 C |  Obj4A :                      144D0 C |
 Obj4A_Display :              14552 C |  Obj4A_Index :                144DE C |
 Obj4A_LoadSonic :            14558 C |  Obj4A_Main :                 144E4 C |
 Obj4A_Main2 :                144EC C |  Obj4A_RmvSonic :             14516 C |
 Obj4A_Wait :                 1456A C |  Obj4B :                       9E12 C |
 Obj4B_Animate :               9E72 C |  Obj4B_Collect :               9E9A C |
 Obj4B_Delete :                9EDE C |  Obj4B_Index :                 9E20 C |
 Obj4B_Main :                  9E28 C |  Obj4B_Okay :                  9E5C C |
 Obj4B_PlaySnd :               9ED2 C |  Obj4C :                       EE94 C |
 Obj4C_Delete :                EF6A C |  Obj4C_Display :               EF5A C |
 Obj4C_Index :                 EEA6 C |  Obj4C_Main :                  EEB2 C |
 Obj4C_MakeLava :              EF02 C |  Obj4C_Type00 :                EF3C C |
 Obj4D :                       EF80 C |  Obj4D_Action :                F08A C |
 Obj4D_ChkDel :                F0A8 C |  Obj4D_Delete :                F16A C |
 Obj4D_Index :                 EF92 C |  Obj4D_Loop :                  EFCA C |
 Obj4D_Main :                  EF9E C |  Obj4D_MakeLava :              EFD0 C |
 Obj4D_PlaySnd :               F080 C |  Obj4D_Speeds :                EF9A C |
 Obj4D_Type00 :                F0CC C |  Obj4D_Type01 :                F0EC C |
 Obj4D_TypeIndex :             F0C8 C |  Obj4E :                       F16E C |
 Obj4E_Action :                F1E6 C |  Obj4E_Animate :               F252 C |
 Obj4E_ChkDel :                F268 C |  Obj4E_ChkGone :               F290 C |
 Obj4E_ChkSonic :              F1F2 C |  Obj4E_Delete :                F2C4 C |
 Obj4E_Index :                 F17C C |  Obj4E_Loop :                  F190 C |
 Obj4E_Main :                  F186 C |  Obj4E_Main2 :                 F196 C |
 Obj4E_Move :                  F212 C |  Obj4E_Move2 :                 F2A8 C |
 Obj4E_Solid :                 F222 C |  Obj4F :                       F916 C |
 Obj50 :                       F94A C |  Obj50_Action :                F9B0 C |
 Obj50_ChkWall :               F918 C |  Obj50_FixToFloor :            F9F4 C |
 Obj50_Index :                 F958 C |  Obj50_Index2 :                F9CC C |
 Obj50_Main :                  F95C C |  Obj50_Move :                  F9D0 C |
 Obj50_Pause :                 FA14 C |  Obj51 :                       FDA2 C |
 Obj51_Bonus :                 FE94 C |  Obj51_Display :               FEB4 C |
 Obj51_Index :                 FDB4 C |  Obj51_Main :                  FDBA C |
 Obj51_Points :                FEDC C |  Obj51_Smash :                 FE0E C |
 Obj51_Solid :                 FDE4 C |  Obj51_Speeds :                FECC C |
 Obj52 :                       FF08 C |  Obj52_02_Wait :              1004E C |
 Obj52_03_End :               1006A C |  Obj52_05_End :               1008A C |
 Obj52_07_ChkDel :            100BC C |  Obj52_0A_Back :              10140 C |
 Obj52_0A_Reset :             10150 C |  Obj52_0A_Wait :              10132 C |
 Obj52_ChkDel :                FFD4 C |  Obj52_Index :                 FF16 C |
 Obj52_Main :                  FF26 C |  Obj52_Move :                  FFF6 C |
 Obj52_Platform :              FFA6 C |  Obj52_StandOn :               FFB8 C |
 Obj52_Type00 :               10020 C |  Obj52_Type01 :               10022 C |
 Obj52_Type02 :               10042 C |  Obj52_Type03 :               10050 C |
 Obj52_Type05 :               10070 C |  Obj52_Type06 :               10090 C |
 Obj52_Type07 :               100B2 C |  Obj52_Type08 :               100DE C |
 Obj52_Type0A :               100FE C |  Obj52_TypeIndex :            1000A C |
 Obj52_Var :                   FF1C C |  Obj53 :                       832C C |
 Obj53_ChkTouch :              8390 C |  Obj53_Collapse :              845E C |
 Obj53_Data1 :                 850C C |  Obj53_Data2 :                 8526 C |
 Obj53_Data3 :                 852E C |  Obj53_Delete :                8458 C |
 Obj53_Display :               83F8 C |  Obj53_Index :                 833A C |
 Obj53_Main :                  8346 C |  Obj53_MarkAsGone :            83CE C |
 Obj53_NotSBZ :                8378 C |  Obj53_NotSLZ :                836A C |
 Obj53_Solid :                 83A2 C |  Obj53_TimeZero :              8448 C |
 Obj53_Touch :                 83D2 C |  Obj53_WalkOff :               83E4 C |
 Obj54 :                       F2C8 C |  Obj54_ChkDel :                F2FC C |
 Obj54_Index :                 F2D6 C |  Obj54_Main :                  F2DE C |
 Obj54_Sizes :                 F2DA C |  Obj55 :                      101B8 C |
 Obj55_Action :               101FA C |  Obj55_ChkDel :               10292 C |
 Obj55_ChkDrop :              1021E C |  Obj55_ChkSonic :             10306 C |
 Obj55_DropFly :              1025A C |  Obj55_FlyUp :                102D8 C |
 Obj55_Index :                101C6 C |  Obj55_Index2 :               10216 C |
 Obj55_Main :                 101CA C |  Obj55_NoDrop :               10258 C |
 Obj55_PlaySnd :              1029C C |  Obj56 :                      10396 C |
 Obj56_Action :               1048C C |  Obj56_ChkDel :               104C4 C |
 Obj56_ChkGone :              1046A C |  Obj56_Index :                103A4 C |
 Obj56_Main :                 103B8 C |  Obj56_Move_LR :              1051A C |
 Obj56_Move_Sqr :             10790 C |  Obj56_Move_UD :              10548 C |
 Obj56_Type00 :               10502 C |  Obj56_Type01 :               10504 C |
 Obj56_Type02 :               10510 C |  Obj56_Type03 :               10532 C |
 Obj56_Type04 :               1053E C |  Obj56_Type05 :               10560 C |
 Obj56_Type06 :               105F4 C |  Obj56_Type07 :               10658 C |
 Obj56_Type08 :               10750 C |  Obj56_Type09 :               10762 C |
 Obj56_Type0A :               10772 C |  Obj56_Type0B :               10782 C |
 Obj56_Type0C :               1068A C |  Obj56_Type0D :               106EC C |
 Obj56_TypeIndex :            104E6 C |  Obj56_Var :                  103A8 C |
 Obj57 :                      10892 C |  Obj57_ChkDel :               10A20 C |
 Obj57_DelLoop :              10A4A C |  Obj57_Delete :               10A42 C |
 Obj57_Display :              10A62 C |  Obj57_Index :                108A0 C |
 Obj57_Main :                 108A6 C |  Obj57_MakeChain :            1093E C |
 Obj57_Move :                 109C6 C |  Obj57_MoveLoop :             109F0 C |
 Obj57_MoveSub :              109CE C |  Obj58 :                      10A86 C |
 Obj58_Index :                10A94 C |  Obj58_Main :                 10A98 C |
 Obj58_Move :                 10AF2 C |  Obj58_Type00 :               10B30 C |
 Obj58_Type01 :               10B32 C |  Obj58_Type02 :               10B54 C |
 Obj58_Type03 :               10B78 C |  Obj58_TypeIndex :            10B28 C |
 Obj59 :                      10BE2 C |  Obj59_Action :               10CC2 C |
 Obj59_ChkDel :               10E36 C |  Obj59_Delete :               10DBE C |
 Obj59_Index :                10C12 C |  Obj59_Main :                 10C3A C |
 Obj59_Main2 :                10C5E C |  Obj59_MakeMulti :            10E0C C |
 Obj59_Move :                 10DC2 C |  Obj59_Platform :             10CB2 C |
 Obj59_Type00 :               10D0E C |  Obj59_Type01 :               10D10 C |
 Obj59_Type02 :               10D1E C |  Obj59_Type04 :               10D32 C |
 Obj59_Type06 :               10D44 C |  Obj59_Type08 :               10D66 C |
 Obj59_Type09 :               10D88 C |  Obj59_TypeIndex :            10CFA C |
 Obj59_Types :                10CE6 C |  Obj59_Var1 :                 10C1A C |
 Obj59_Var2 :                 10C1C C |  Obj5A :                      10E6A C |
 Obj5A_Action :               10EE0 C |  Obj5A_Index :                10E9A C |
 Obj5A_Main :                 10EA0 C |  Obj5A_Platform :             10ED0 C |
 Obj5A_Type00 :               10F14 C |  Obj5A_Type04 :               10F52 C |
 Obj5A_TypeIndex :            10F10 C |  Obj5A_Types :                10EFC C |
 Obj5B :                      10FA0 C |  Obj5B_Index :                10FD0 C |
 Obj5B_Loop :                 10FF4 C |  Obj5B_Main :                 10FD6 C |
 Obj5B_MakeBlocks :           11002 C |  Obj5B_Move :                 11056 C |
 Obj5B_Solid :                1106A C |  Obj5B_Type00 :               110BA C |
 Obj5B_Type01 :               11120 C |  Obj5B_Type02 :               110DC C |
 Obj5B_TypeIndex :            110B2 C |  Obj5C :                      11154 C |
 Obj5C_Display :              1117E C |  Obj5C_Index :                11162 C |
 Obj5C_Main :                 11166 C |  Obj5D :                      1160C C |
 Obj5D_Animate :              116CA C |  Obj5D_Blow :                 11664 C |
 Obj5D_ChkDel :               116FC C |  Obj5D_ChkSonic :             11682 C |
 Obj5D_Delay :                11642 C |  Obj5D_Index :                1161A C |
 Obj5D_Main :                 1161E C |  Obj5D_MoveSonic :            116C6 C |
 Obj5E :                      1174C C |  Obj5E_Data1 :                11A54 C |
 Obj5E_Data2 :                11A84 C |  Obj5E_Index :                11780 C |
 Obj5E_Main :                 1178C C |  Obj5E_MoveSpike :            118F8 C |
 Obj5E_Slope :                117F6 C |  Obj5E_Slope2 :               11828 C |
 Obj5E_Speeds :               11A4A C |  Obj5E_SpikeFall :            1198C C |
 Obj5E_Spikeball :            118A2 C |  Obj5E_Spring :               119E8 C |
 Obj5F :                      11B06 C |  Obj5F_Action :               11B58 C |
 Obj5F_ChkSonic :             11BE2 C |  Obj5F_Display :              11C70 C |
 Obj5F_End :                  11CE8 C |  Obj5F_Explode :              11BCE C |
 Obj5F_Index :                11B14 C |  Obj5F_Index2 :               11B74 C |
 Obj5F_Loop :                 11CA6 C |  Obj5F_Main :                 11B1C C |
 Obj5F_MakeFuse :             11C00 C |  Obj5F_MakeShrap :            11CAC C |
 Obj5F_ShrSpeed :             11D08 C |  Obj5F_Wait :                 11BA8 C |
 Obj5F_Walk :                 11B7A C |  Obj60 :                      11DDE C |
 Obj60_Animate :              11EFE C |  Obj60_ChkDel :               11F10 C |
 Obj60_ChkDel2 :              11FD6 C |  Obj60_ChkGone :              11F32 C |
 Obj60_ChkSonic :             11ECE C |  Obj60_Circle :               11FAC C |
 Obj60_Delete :               11F66 C |  Obj60_Display :              11F0C C |
 Obj60_Display2 :             11FA8 C |  Obj60_FireOrb :              11F96 C |
 Obj60_Index :                11DEC C |  Obj60_Main :                 11DF6 C |
 Obj60_MakeOrbs :             11E44 C |  Obj60_Move :                 11EAC C |
 Obj60_MoveOrb :              11F6A C |  Obj61 :                      120E4 C |
 Obj61_Action :               1215C C |  Obj61_ChkDel :               1219C C |
 Obj61_Index :                120F2 C |  Obj61_Main :                 120FE C |
 Obj61_Type00 :               121CE C |  Obj61_Type01 :               121D0 C |
 Obj61_Type02 :               121F6 C |  Obj61_Type04 :               12218 C |
 Obj61_Type05 :               12238 C |  Obj61_Type07 :               1224A C |
 Obj61_TypeIndex :            121BE C |  Obj61_Var :                  120F6 C |
 Obj62 :                      122F8 C |  Obj62_AniFire :              123F0 C |
 Obj62_FireBall :             12394 C |  Obj62_Index :                1230A C |
 Obj62_Main :                 1231A C |  Obj62_MakeFire :             12358 C |
 Obj62_NoFire :               12392 C |  Obj62_Sound :                123E6 C |
 Obj62_SpitRate :             12312 C |  Obj62_StopFire :             12400 C |
 Obj62_StopFire2 :            1241A C |  Obj63 :                      1244C C |
 Obj63_ChangeDir :            12680 C |  Obj63_Data :                 126F8 C |
 Obj63_Display :              12476 C |  Obj63_Index :                124A2 C |
 Obj63_Loop :                 125A0 C |  Obj63_Main :                 124AA C |
 Obj63_MakePtfms :            125A6 C |  Obj64 :                      127B4 C |
 Obj64_Animate :              1282C C |  Obj64_BblMaker :             12922 C |
 Obj64_BblTypes :             12A5C C |  Obj64_Bubble :               12812 C |
 Obj64_Burst :                12850 C |  Obj64_ChkDel :               12A30 C |
 Obj64_ChkSonic :             12A6E C |  Obj64_ChkWater :             12846 C |
 Obj64_Delete :               128FA C |  Obj64_Delete2 :              12918 C |
 Obj64_Delete3 :              1291E C |  Obj64_Display :              128EA C |
 Obj64_Display2 :             12900 C |  Obj64_Index :                127C2 C |
 Obj64_Main :                 127CE C |  Obj64_Wobble :               1285E C |
 Obj65 :                      12BAE C |  Obj65_Animate :              12C28 C |
 Obj65_Animate2 :             12C5A C |  Obj65_ChkDel :               12C34 C |
 Obj65_FixHeight :            12C38 C |  Obj65_Index :                12BBC C |
 Obj65_Main :                 12BC6 C |  Obj66 :                      15316 C |
 Obj66_Action :               1539C C |  Obj66_Animate :              154A4 C |
 Obj66_ChgPos :               154C4 C |  Obj66_ChkSwitch :            1547C C |
 Obj66_Display :              15430 C |  Obj66_GrabSonic :            153D6 C |
 Obj66_Index :                15324 C |  Obj66_Loop :                 15338 C |
 Obj66_Main :                 1532C C |  Obj66_MakeItem :             15360 C |
 Obj66_PosData :              154EE C |  Obj66_Release :              15434 C |
 Obj67 :                      1575E C |  Obj67_Action :               157E0 C |
 Obj67_ChkDel :               158DA C |  Obj67_Delete :               158FC C |
 Obj67_Index :                1576C C |  Obj67_Main :                 15770 C |
 Obj67_MoveSonic :            157EC C |  Obj67_MoveSpot :             158A0 C |
 Obj68 :                      1590A C |  Obj68_Action :               15946 C |
 Obj68_Delete :               15966 C |  Obj68_Index :                15918 C |
 Obj68_Main :                 1591C C |  Obj68_MoveSonic :            1596C C |
 Obj69 :                      159AC C |  Obj69_Animate :              15A60 C |
 Obj69_Animate2 :             15AD6 C |  Obj69_Delay :                15ABA C |
 Obj69_Display :              15AA6 C |  Obj69_Display2 :             15B1C C |
 Obj69_Index :                159BA C |  Obj69_Main :                 159C0 C |
 Obj69_NotSolid :             15A8A C |  Obj69_NotSolid2 :            15B00 C |
 Obj69_Spinner :              15AAA C |  Obj69_Trapdoor :             15A3E C |
 Obj6A :                      15BF8 C |  Obj6A_Action :               15C48 C |
 Obj6A_Animate01 :            15CA6 C |  Obj6A_Animate02 :            15CF6 C |
 Obj6A_Animate03 :            15D82 C |  Obj6A_Animate04 :            15DF4 C |
 Obj6A_Delete :               15C7E C |  Obj6A_Index :                15C06 C |
 Obj6A_Main :                 15C0A C |  Obj6A_Type00 :               15C8E C |
 Obj6A_Type01 :               15C90 C |  Obj6A_Type02 :               15CDE C |
 Obj6A_Type03 :               15D2E C |  Obj6A_Type04 :               15DA2 C |
 Obj6A_TypeIndex :            15C84 C |  Obj6B :                      15E8E C |
 Obj6B_Action :               15F86 C |  Obj6B_ChkDel :               15FBE C |
 Obj6B_ChkGone :              15EF4 C |  Obj6B_ChkGone2 :             15F74 C |
 Obj6B_Delete :               15F06 C |  Obj6B_Delete2 :              15FFE C |
 Obj6B_Index :                15E9C C |  Obj6B_Main :                 15EB4 C |
 Obj6B_SBZ12 :                15F34 C |  Obj6B_SBZ3 :                 15F0C C |
 Obj6B_Type00 :               16010 C |  Obj6B_Type01 :               16012 C |
 Obj6B_Type02 :               1607E C |  Obj6B_Type03 :               160D4 C |
 Obj6B_Type04 :               16128 C |  Obj6B_Type05 :               1618A C |
 Obj6B_TypeIndex :            16004 C |  Obj6B_Var :                  15EA0 C |
 Obj6C :                      16274 C |  Obj6C_Animate :              162F8 C |
 Obj6C_Display :              1638E C |  Obj6C_Index :                16282 C |
 Obj6C_Main :                 1628A C |  Obj6C_NotSolid :             1636C C |
 Obj6C_Vanish :               16308 C |  Obj6D :                       E5EA C |
 Obj6D_Action :                E660 C |  Obj6D_ChkDel :                E6A4 C |
 Obj6D_Index :                 E5F8 C |  Obj6D_Main :                  E5FC C |
 Obj6E :                      163C2 C |  Obj6E_Animate :              16420 C |
 Obj6E_Display :              16440 C |  Obj6E_Index :                163D0 C |
 Obj6E_Main :                 163D4 C |  Obj6E_Shock :                16400 C |
 Obj6F :                      164E6 C |  Obj6F_Act1or2 :              16524 C |
 Obj6F_Delete :               16538 C |  Obj6F_Display :              16510 C |
 Obj6F_Index :                1653E C |  Obj6F_LoadPform :            16638 C |
 Obj6F_Loop :                 16630 C |  Obj6F_Main :                 16542 C |
 Obj70 :                      167A6 C |  Obj70_Action :               167F2 C |
 Obj70_ChkDel :               16832 C |  Obj70_Delete :               16854 C |
 Obj70_Index :                167B4 C |  Obj70_Main :                 167B8 C |
 Obj70_Move :                 16802 C |  Obj70_Move2 :                1685A C |
 Obj70_MoveData :             16884 C |  Obj70_Solid :                16812 C |
 Obj71 :                      1152A C |  Obj71_ChkDel :               11596 C |
 Obj71_Delete :               115C0 C |  Obj71_Index :                11538 C |
 Obj71_Main :                 1153C C |  Obj71_NoDisplay :            115BE C |
 Obj71_Solid :                11574 C |  Obj72 :                      168E4 C |
 Obj72_Data :                 16B28 C |  Obj72_Delete :               16910 C |
 Obj72_Index :                16916 C |  Obj72_Main :                 1691E C |
 Obj73 :                      184C0 C |  Obj73_Display :              188CE C |
 Obj73_FaceDel :              18894 C |  Obj73_FaceMain :             18840 C |
 Obj73_FlameDel :             188C8 C |  Obj73_FlameMain :            1889A C |
 Obj73_Index :                184CE C |  Obj73_LoadBoss :             18520 C |
 Obj73_Loop :                 18506 C |  Obj73_Main :                 184E4 C |
 Obj73_MakeLava :             1869E C |  Obj73_MakeLava2 :            1872E C |
 Obj73_ObjData :              184D8 C |  Obj73_ShipDel :              1883A C |
 Obj73_ShipIndex :            18588 C |  Obj73_ShipMain :             18558 C |
 Obj73_TubeDel :              1892E C |  Obj73_TubeMain :             18906 C |
 Obj74 :                      18934 C |  Obj74_Action :               189AA C |
 Obj74_Animate :              18B30 C |  Obj74_Delete :               189D4 C |
 Obj74_Delete2 :              18B10 C |  Obj74_Delete3 :              18B3C C |
 Obj74_Drop :                 189E2 C |  Obj74_Duplicate :            18A80 C |
 Obj74_Duplicate2 :           18A60 C |  Obj74_FallEdge :             18AC2 C |
 Obj74_Index :                18948 C |  Obj74_Index2 :               189DA C |
 Obj74_Loop :                 18A46 C |  Obj74_Main :                 18950 C |
 Obj74_MakeFlame :            18A12 C |  Obj75 :                      1937E C |
 Obj75_FaceDelete :           197D0 C |  Obj75_FaceMain :             197B0 C |
 Obj75_FindBlocks :           196DA C |  Obj75_FindLoop :             196EA C |
 Obj75_FlameDelete :          19848 C |  Obj75_FlameMain :            1981A C |
 Obj75_Index :                1938C C |  Obj75_LoadBoss :             193E8 C |
 Obj75_Loop :                 193D0 C |  Obj75_Main :                 193A2 C |
 Obj75_ObjData :              19396 C |  Obj75_ShipDelete :           197AA C |
 Obj75_ShipIndex :            19450 C |  Obj75_ShipMain :             19420 C |
 Obj75_SpikeDelete :          1991C C |  Obj75_SpikeMain :            19886 C |
 Obj76 :                      19922 C |  Obj76_Action :               19994 C |
 Obj76_Break :                19A0A C |  Obj76_Delete :               19A04 C |
 Obj76_Display :              199EC C |  Obj76_ExitLoop :             19992 C |
 Obj76_FragPos :              19A7E C |  Obj76_FragSpeed :            19A6E C |
 Obj76_Index :                19930 C |  Obj76_Loop :                 19942 C |
 Obj76_LoopFrag :             19A2C C |  Obj76_Main :                 19936 C |
 Obj76_MakeBlock :            1994A C |  Obj76_MakeFrag :             19A34 C |
 Obj76_Solid :                199D6 C |  Obj77 :                      180C6 C |
 Obj77_Display :              18488 C |  Obj77_FaceDel :              18448 C |
 Obj77_FaceMain :             18400 C |  Obj77_FlameDel :             18482 C |
 Obj77_FlameMain :            1844E C |  Obj77_Index :                180D4 C |
 Obj77_LoadBoss :             18130 C |  Obj77_Loop :                 18116 C |
 Obj77_Main :                 180E2 C |  Obj77_ObjData :              180DC C |
 Obj77_ShipDel :              183FA C |  Obj77_ShipIndex :            1819E C |
 Obj77_ShipMain :             1816A C |  Obj78 :                      16BB0 C |
 Obj78_Action :               16CBC C |  Obj78_AniBody :              16E3C C |
 Obj78_AniHead :              16CF8 C |  Obj78_BodySeg1 :             16E46 C |
 Obj78_BodySeg2 :             16E14 C |  Obj78_ChkGone :              16D26 C |
 Obj78_Delete :               16D40 C |  Obj78_Display :              16D02 C |
 Obj78_FragSpeed :            16F04 C |  Obj78_Index :                16BBE C |
 Obj78_Index2 :               16D46 C |  Obj78_LoadBody :             16C52 C |
 Obj78_Main :                 16BCE C |  Obj78_Move :                 16D4A C |
 Obj78_Move2 :                16D52 C |  Obj78_QuitLoad :             16CAE C |
 Obj79 :                      170AA C |  Obj79_AfterHit :             1720E C |
 Obj79_BlueLamp :             1712A C |  Obj79_HitLamp :              1716E C |
 Obj79_Index :                170BE C |  Obj79_LoadInfo :             172C8 C |
 Obj79_Main :                 170C6 C |  Obj79_RedLamp :              17116 C |
 Obj79_StoreInfo :            1724E C |  Obj79_Twirl :                17210 C |
 Obj7A :                      18B48 C |  Obj7A_Delete :               18B42 C |
 Obj7A_FaceMain :             18E80 C |  Obj7A_FlameMain :            18EC4 C |
 Obj7A_Index :                18B56 C |  Obj7A_LoadBoss :             18BB4 C |
 Obj7A_Loop :                 18B9A C |  Obj7A_Main :                 18B6C C |
 Obj7A_MakeBall :             18D62 C |  Obj7A_ObjData :              18B60 C |
 Obj7A_ShipIndex :            18C3C C |  Obj7A_ShipMain :             18C0C C |
 Obj7A_TubeMain :             18F34 C |  Obj7B :                      18F5E C |
 Obj7B_Explode :              192BA C |  Obj7B_Fall :                 18FFC C |
 Obj7B_FragSpeed :            19330 C |  Obj7B_Index :                18F94 C |
 Obj7B_Loop :                 192D8 C |  Obj7B_Main :                 18FA0 C |
 Obj7B_MakeFrag :             192CC C |  Obj7B_MoveFrag :             19340 C |
 Obj7C :                       9EE2 C |  Obj7C_ChkDel :                9F20 C |
 Obj7C_Collect :               9F44 C |  Obj7C_Delete :                9F92 C |
 Obj7C_End :                   9F84 C |  Obj7C_Index :                 9EF0 C |
 Obj7C_Main :                  9EF6 C |  Obj7D :                      173DA C |
 Obj7D_ChkDel :               1746A C |  Obj7D_DelayDel :             17496 C |
 Obj7D_Delete :               17488 C |  Obj7D_Delete2 :              174BE C |
 Obj7D_Index :                173E8 C |  Obj7D_Main :                 173EC C |
 Obj7D_Points :               1748E C |  Obj7E :                       C898 C |
 Obj7E_ChkPLC :                C8BC C |  Obj7E_ChkPos :                C930 C |
 Obj7E_Config :                CA18 C |  Obj7E_Continue :              C9E0 C |
 Obj7E_Display :               C978 C |  Obj7E_Display2 :              CA14 C |
 Obj7E_Exit :                  C9D6 C |  Obj7E_Index :                 C8A6 C |
 Obj7E_Loop :                  C8D8 C |  Obj7E_Main :                  C8C4 C |
 Obj7E_Move :                  C940 C |  Obj7E_RingBonus :             C97C C |
 Obj7E_Wait :                  C96E C |  Obj7F :                       CA40 C |
 Obj7F_Display :               CACC C |  Obj7F_Flash :                 CAB6 C |
 Obj7F_Index :                 CA4E C |  Obj7F_Loop :                  CA74 C |
 Obj7F_Main :                  CA5E C |  Obj7F_PosData :               CA52 C |
 Obj80 :                       4E56 C |  Obj80_ChkType :               4F34 C |
 Obj80_Delete :                4F6A C |  Obj80_Display :               4E9C C |
 Obj80_Display2 :              4F64 C |  Obj80_Index :                 4E64 C |
 Obj80_Main :                  4E6C C |  Obj80_MakeMiniSonic :         4EC0 C |
 Obj80_MiniSonLoop :           4EEA C |  Obj80_MiniSonicPos :          4EA2 C |
 Obj81 :                       4F70 C |  Obj81_AddSpeed :              5044 C |
 Obj81_Animate :               4FFA C |  Obj81_ChkLand :               4FC2 C |
 Obj81_GetUp :                 500C C |  Obj81_Index :                 4F84 C |
 Obj81_Main :                  4F8C C |  Obj81_Run :                   5034 C |
 Obj81_ShowFall :              4FE8 C |  Obj81_ShowRun :               504A C |
 Obj82 :                      19AC2 C |  Obj82_ChkSonic :             19BA6 C |
 Obj82_EggIndex :             19B9E C |  Obj82_Eggman :               19B80 C |
 Obj82_FindBlocks :           19C32 C |  Obj82_FindLoop :             19C44 C |
 Obj82_Index :                19AD0 C |  Obj82_Leap :                 19BE6 C |
 Obj82_Main :                 19ADC C |  Obj82_ObjData :              19AD6 C |
 Obj82_PreLeap :              19BCA C |  Obj82_SwDisplay :            19C8C C |
 Obj82_SwIndex :              19C72 C |  Obj82_Switch :               19C64 C |
 Obj83 :                      19DF0 C |  Obj83_Break :                19F24 C |
 Obj83_BreakSnd :             19F7A C |  Obj83_ChkBreak :             19E8C C |
 Obj83_ExitMake :             19E86 C |  Obj83_FragPos :              19F92 C |
 Obj83_FragSpeed :            19F8A C |  Obj83_Index :                19DFE C |
 Obj83_LoopFrag :             19F46 C |  Obj83_Main :                 19E0A C |
 Obj83_MakeBlock :            19E3A C |  Obj83_MakeFrag :             19F4E C |
 Obj83_Solid :                19E9C C |  Obj83_Solid2 :               19EF0 C |
 Obj84 :                      1A6DE C |  Obj84_Delete :               1A6D8 C |
 Obj84_Index :                1A6EC C |  Obj84_Main :                 1A702 C |
 Obj84_PosData :              1A6F2 C |  Obj85 :                      19FE8 C |
 Obj85_Delete :               19FE2 C |  Obj85_Eggman :               1A0FC C |
 Obj85_Index :                19FF6 C |  Obj85_LoadBoss :             1A074 C |
 Obj85_Loop :                 1A06C C |  Obj85_Main :                 1A05E C |
 Obj85_ObjData :              1A004 C |  Obj85_ObjData2 :             1A040 C |
 Obj86 :                      1AA6A C |  Obj86_Generator :            1AAC4 C |
 Obj86_Index :                1AA78 C |  Obj86_Index2 :               1AC30 C |
 Obj86_Loop :                 1AB5A C |  Obj86_Main :                 1AA82 C |
 Obj86_MakeBalls :            1AB3A C |  Obj87 :                       53F6 C |
 Obj87_Animate :               54E0 C |  Obj87_ClrLoop :               54A4 C |
 Obj87_ClrObjRam :             5496 C |  Obj87_Index :                 540A C |
 Obj87_Leap :                  54EC C |  Obj87_LookUp :                547A C |
 Obj87_Main :                  541E C |  Obj87_Main2 :                 5434 C |
 Obj87_MakeEmlds :             5462 C |  Obj87_MakeLogo :              54C2 C |
 Obj87_Wait :                  5478 C |  Obj87_Wait2 :                 54C0 C |
 Obj87_Wait3 :                 54DE C |  Obj87_Wait4 :                 5528 C |
 Obj88 :                       5550 C |  Obj88_Index :                 5564 C |
 Obj88_Main :                  5568 C |  Obj88_Main2 :                 5574 C |
 Obj88_MainLoop :              5588 C |  Obj88_Move :                  55D0 C |
 Obj89 :                       562A C |  Obj89_Delay :                 5676 C |
 Obj89_Display :               568C C |  Obj89_GotoCredits :           5680 C |
 Obj89_Index :                 5638 C |  Obj89_Main :                  563E C |
 Obj89_Move :                  5668 C |  Obj8A :                      174E0 C |
 Obj8A_Display :              17558 C |  Obj8A_Index :                174EE C |
 Obj8A_Main :                 174F2 C |  Obj8B :                       59EE C |
 Obj8B_Animate :               5A5A C |  Obj8B_Index :                 5A02 C |
 Obj8B_Juggle :                5A66 C |  Obj8B_Main :                  5A0A C |
 Obj8C :                       5ACE C |  Obj8C_ChkEmLoop :             5B40 C |
 Obj8C_ChkEms :                5B36 C |  Obj8C_Index :                 5AE2 C |
 Obj8C_Main :                  5AE6 C |  Obj8C_MakeEms :               5AF2 C |
 Obj8C_Move :                  5B72 C |  ObjHitCeiling :              1521A C |
 ObjHitFloor :                15094 C |  ObjHitFloor2 :               15098 C |
 ObjHitWallLeft :             152E8 C |  ObjHitWallRight :            15156 C |
 ObjPosLoad :                  D9E4 C |  ObjPos_End :                 71FA2 C |
 ObjPos_FZ :                  71E5E C |  ObjPos_GHZ1 :                6BF06 C |
 ObjPos_GHZ2 :                6C33E C |  ObjPos_GHZ3 :                6C8FC C |
 ObjPos_Index :               6BE70 C |  ObjPos_LZ1 :                 6CFB6 C |
 ObjPos_LZ1pf1 :              6E1E0 C |  ObjPos_LZ1pf2 :              6E212 C |
 ObjPos_LZ2 :                 6D424 C |  ObjPos_LZ2pf1 :              6E244 C |
 ObjPos_LZ2pf2 :              6E276 C |  ObjPos_LZ3 :                 6D766 C |
 ObjPos_LZ3pf1 :              6E2A8 C |  ObjPos_LZ3pf2 :              6E2F2 C |
 ObjPos_MZ1 :                 6E330 C |  ObjPos_MZ2 :                 6E69C C |
 ObjPos_MZ3 :                 6EB46 C |  ObjPos_Null :                720FE C |
 ObjPos_SBZ1 :                71042 C |  ObjPos_SBZ1pf1 :             71E70 C |
 ObjPos_SBZ1pf2 :             71EA2 C |  ObjPos_SBZ1pf3 :             71ED4 C |
 ObjPos_SBZ1pf4 :             71F06 C |  ObjPos_SBZ1pf5 :             71F38 C |
 ObjPos_SBZ1pf6 :             71F6A C |  ObjPos_SBZ2 :                71780 C |
 ObjPos_SBZ3 :                6DD48 C |  ObjPos_SLZ1 :                6F0BC C |
 ObjPos_SLZ2 :                6F5FC C |  ObjPos_SLZ3 :                6FA64 C |
 ObjPos_SYZ1 :                70046 C |  ObjPos_SYZ2 :                704D2 C |
 ObjPos_SYZ3 :                70A3C C |  Obj_Index :                   D48C C |
 ObjectFall :                  D6BC C |  ObjectsLoad :                 D442 C |
 Osc_Data :                    4140 C |  Osc_Data2 :                   41DA C |
 Osc_Loop :                    4138 C |  OscillateNumDo :              4182 C |
 OscillateNumInit :            412C C | *PACKING :                        0 - |
*PADDING :                        0 - |  PLC_Boss :                   1DBE6 C |
 PLC_EggmanSBZ2 :             1DD74 C |  PLC_Ending :                 1DD04 C |
 PLC_Explode :                1D91C C |  PLC_FZBoss :                 1DD88 C |
 PLC_GHZ :                    1D92C C |  PLC_GHZ2 :                   1D976 C |
 PLC_GHZAnimals :             1DCA2 C |  PLC_GameOver :               1D924 C |
 PLC_LZ :                     1D99C C |  PLC_LZ2 :                    1D9E6 C |
 PLC_LZAnimals :              1DCB0 C |  PLC_MZ :                     1DA36 C |
 PLC_MZ2 :                    1DA74 C |  PLC_MZAnimals :              1DCBE C |
 PLC_Main :                   1D8E8 C |  PLC_Main2 :                  1D908 C |
 PLC_SBZ :                    1DB44 C |  PLC_SBZ2 :                   1DB8E C |
 PLC_SBZAnimals :             1DCE8 C |  PLC_SLZ :                    1DA94 C |
 PLC_SLZ2 :                   1DACC C |  PLC_SLZAnimals :             1DCCC C |
 PLC_SYZ :                    1DAF2 C |  PLC_SYZ2 :                   1DB12 C |
 PLC_SYZAnimals :             1DCDA C |  PLC_Signpost :               1DC0C C |
 PLC_SpeStResult :            1DCF6 C |  PLC_SpeStage :               1DC28 C |
 PLC_TitleCard :              1DBDE C |  PLC_TryAgain :               1DD60 C |
 PLC_Warp :                   1DC20 C |  PSG1 :                       7276A C |
 PSG2 :                       72781 C |  PSG3 :                       72788 C |
 PSG4 :                       72799 C |  PSG5 :                       727B3 C |
 PSG6 :                       727A4 C |  PSG7 :                       727DD C |
 PSG8 :                       727F9 C |  PSG9 :                       72821 C |
 PSGInitLoop :                  280 C |  PSG_Index :                  72746 C |
 PalCycle :                    194E C |  PalCycle_GHZ :                1964 C |
 PalCycle_LZ :                 1992 C |  PalCycle_Load :               193C C |
 PalCycle_MZ :                 1A44 C |  PalCycle_SBZ :                1AC8 C |
 PalCycle_SLZ :                1A46 C |  PalCycle_SS :                 4976 C |
 PalCycle_SYZ :                1A82 C |  PalCycle_Sega :               201A C |
 PalCycle_Title :              195C C |  PalLoad1 :                    210C C |
 PalLoad2 :                    2128 C |  PalLoad3_Water :              2140 C |
 PalLoad4_Water :              215C C |  PalPointers :                 2178 C |
 PalToCRAM :                   1126 C |  PalWhite_Loop :               1EFA C |
 Pal_AddColor :                1E36 C |  Pal_AddColor2 :               1FDA C |
 Pal_AddGreen :                1E4C C |  Pal_AddRed :                  1E5A C |
 Pal_DecBlue :                 1ECE C |  Pal_DecColor :                1EB0 C |
 Pal_DecColor2 :               1F5C C |  Pal_DecGreen :                1EC0 C |
 Pal_Ending :                  2938 C |  Pal_FadeFrom :                1E62 C |
 Pal_FadeIn :                  1DF4 C |  Pal_FadeOut :                 1E82 C |
 Pal_FadeTo :                  1DBC C |  Pal_FadeTo2 :                 1DC2 C |
 Pal_GHZ :                     23B8 C |  Pal_GHZCyc :                  1B86 C |
 Pal_LZ :                      2418 C |  Pal_LZCyc1 :                  1BA6 C |
 Pal_LZCyc2 :                  1BC6 C |  Pal_LZCyc3 :                  1BD8 C |
 Pal_LZSonWater :              2838 C |  Pal_LZWater :                 2478 C |
 Pal_LevelSel :                2318 C |  Pal_MZ :                      24F8 C |
 Pal_MakeFlash :               1F8C C |  Pal_MakeWhite :               1EE0 C |
 Pal_SBZ1 :                    2618 C |  Pal_SBZ2 :                    2678 C |
 Pal_SBZ3 :                    2758 C |  Pal_SBZ3Cyc1 :                1BEA C |
 Pal_SBZ3SonWat :              2858 C |  Pal_SBZ3Water :               27B8 C |
 Pal_SBZCyc1 :                 1D0A C |  Pal_SBZCyc10 :                1DB0 C |
 Pal_SBZCyc2 :                 1D2A C |  Pal_SBZCyc3 :                 1D3A C |
 Pal_SBZCyc4 :                 1D4A C |  Pal_SBZCyc5 :                 1D56 C |
 Pal_SBZCyc6 :                 1D66 C |  Pal_SBZCyc7 :                 1D76 C |
 Pal_SBZCyc8 :                 1D96 C |  Pal_SBZCyc9 :                 1DA0 C |
 Pal_SBZCycList :              1CA6 C |  Pal_SBZCycList2 :             1CDE C |
 Pal_SLZ :                     2558 C |  Pal_SLZCyc :                  1C52 C |
 Pal_SSCyc1 :                  4ADE C |  Pal_SSCyc2 :                  4B26 C |
 Pal_SYZ :                     25B8 C |  Pal_SYZCyc1 :                 1C76 C |
 Pal_SYZCyc2 :                 1C96 C |  Pal_Sega1 :                   20D0 C |
 Pal_Sega2 :                   20DC C |  Pal_SegaBG :                  2218 C |
 Pal_Sonic :                   2398 C |  Pal_SpeContinue :             28F8 C |
 Pal_SpeResult :               2878 C |  Pal_Special :                 26D8 C |
 Pal_Title :                   2298 C |  Pal_TitleCyc :                1B66 C |
 Pal_ToBlack :                 1DD4 C |  Pal_ToWhite :                 1FAC C |
 Pal_WhiteToBlack :            1F1A C |  PauseGame :                   13A8 C |
 Pause_ChkBC :                 13EC C |  Pause_ChkStart :              13FC C |
 Pause_DoNothing :             1410 C |  Pause_SlowMo :                1412 C |
 Platform2 :                   747A C |  Platform3 :                   7480 C |
 PlatformObject :              7458 C |  PlayLevel :                   3352 C |
 PlayPCM_Loop :               72D5E C |  PlaySound :                   1396 C |
 PlaySound_Special :           139C C | *PlaySound_Unk :               13A2 C |
 PortA_Ok :                     214 C |  PortC_Ok :                     292 C |
 PrivilegeViol :                40A C | *RELAXED :                        0 - |
*RamEndLoc :                    1AC C | *RamStartLoc :                  1A8 C |
 RandomNumber :                29C4 C |  ReadJoypads :                 11E6 C |
*Region :                       1F0 C |  Resize_Ending :               7332 C |
 Resize_FZ :                   72D6 C |  Resize_FZboss :               7302 C |
 Resize_FZend :                7320 C |  Resize_FZend2 :               7330 C |
 Resize_FZmain :               72EE C |  Resize_GHZ :                  6DEA C |
 Resize_GHZ1 :                 6E00 C |  Resize_GHZ2 :                 6E16 C |
 Resize_GHZ3 :                 6E48 C |  Resize_GHZ3boss :             6EB0 C |
 Resize_GHZ3end :              6EF6 C |  Resize_GHZ3main :             6E5C C |
 Resize_GHZx :                 6DFA C |  Resize_Index :                6DDC C |
 Resize_LZ :                   6EFE C |  Resize_LZ12 :                 6F16 C |
 Resize_LZ3 :                  6F18 C |  Resize_LZx :                  6F0E C |
 Resize_MZ :                   6F9A C |  Resize_MZ1 :                  6FB0 C |
 Resize_MZ2 :                  7080 C |  Resize_MZ3 :                  7096 C |
 Resize_MZ3boss :              70A8 C |  Resize_MZ3end :               70F6 C |
 Resize_MZx :                  6FAA C |  Resize_SBZ :                  7216 C |
 Resize_SBZ1 :                 722C C |  Resize_SBZ2 :                 7250 C |
 Resize_SBZ2boss :             7288 C |  Resize_SBZ2boss2 :            72A6 C |
 Resize_SBZ2end :              72C4 C |  Resize_SBZ2main :             7266 C |
 Resize_SBZ3 :                 6F72 C |  Resize_SBZx :                 7226 C |
 Resize_SLZ :                  70FE C |  Resize_SLZ12 :                7114 C |
 Resize_SLZ3 :                 7116 C |  Resize_SLZ3boss :             713E C |
 Resize_SLZ3end :              716A C |  Resize_SLZ3main :             712A C |
 Resize_SLZx :                 710E C |  Resize_SYZ :                  7174 C |
 Resize_SYZ1 :                 718A C |  Resize_SYZ2 :                 718C C |
 Resize_SYZ3 :                 71B0 C |  Resize_SYZ3boss :             71DC C |
 Resize_SYZ3end :              720E C |  Resize_SYZ3main :             71C4 C |
 Resize_SYZx :                 7184 C | *Result_Check :               1359E C |
 ResumeMusic :                1430A C |  RomEndLoc :                    1A4 C |
*RomStartLoc :                  1A0 C |  RunPLC_Loop :                 16FE C |
 RunPLC_RAM :                  15EC C |  RunPLC_ROM :                  16EC C |
 SAnim_Delay :                13C8E C |  SAnim_Do :                   13C54 C |
 SAnim_Do2 :                  13C7A C |  SAnim_End :                  13CBE C |
 SAnim_End_FD :               13CB4 C |  SAnim_End_FE :               13CA0 C |
 SAnim_End_FF :               13C90 C |  SAnim_Next :                 13C86 C |
 SAnim_Push :                 13D84 C |  SAnim_RollJump :             13D40 C |
 SAnim_WalkRun :              13CC0 C |  SPLC_LoadTile :              13EFE C |
 SPLC_ReadEntry :             13EE8 C | *SRAMSupport :                  1B0 C |
 SS_1 :                       66292 C |  SS_2 :                       6650C C |
 SS_3 :                       6691E C |  SS_4 :                       66C7A C |
 SS_5 :                       67154 C |  SS_6 :                       67626 C |
 SS_Ani1Up :                  1B808 C |  SS_Ani1UpData :              1B832 C |
 SS_AniBumpData :             1B802 C |  SS_AniBumper :               1B7D2 C |
 SS_AniEmerData :             1B8A8 C |  SS_AniEmeraldSparks :        1B86E C |
 SS_AniGlassBlock :           1B8AE C |  SS_AniGlassData :            1B8DC C |
 SS_AniIndex :                1B78A C |  SS_AniItems :                1B76A C |
 SS_AniRevData :              1B868 C |  SS_AniReverse :              1B838 C |
 SS_AniRingData :             1B7CC C |  SS_AniRingSparks :           1B7A2 C |
 SS_AniWallsRings :           1B52A C |  SS_BGAnimate :                4BF8 C |
 SS_BGLoad :                   48B0 C |  SS_ChkEmldLoop :             1B944 C |
 SS_ChkEmldNum :              1B92E C |  SS_ChkEmldRepeat :           1B94C C |
 SS_ChkEnd :                   477A C |  SS_ClrNemRam :                46A0 C |
 SS_ClrObjRam :                4670 C |  SS_ClrRAM3 :                 1B97C C |
 SS_ClrRam :                   4680 C |  SS_ClrRam2 :                  4690 C |
 SS_End :                      479E C |  SS_EndClrObjRam :             4864 C |
 SS_EndLoop :                  47AE C |  SS_FixCamera :               1BE50 C |
 SS_LayoutIndex :             1B8E6 C |  SS_Load :                    1B916 C |
 SS_LoadData :                1B950 C |  SS_MainLoop :                 473E C |
 SS_MapIndex :                1B9D2 C |  SS_NoDebug :                  472C C |
 SS_NormalExit :               4870 C |  SS_RemoveCollectedItem :     1B754 C |
 SS_ShowLayout :              1B3E8 C |  SS_StartLoc :                1B8FE C |
 SS_ToSegaScreen :             48A8 C |  SS_WaRiVramSet :             1B6D4 C |
 ScrollBlock1 :                6774 C |  ScrollBlock2 :                67DE C |
 ScrollBlock3 :                6820 C |  ScrollBlock4 :                6850 C |
 ScrollHoriz :                 658A C |  ScrollHoriz2 :                65BE C |
 ScrollVertical :              6622 C |  SegaPCM :                    7A446 C |
 SegaPCM_End :                80FEA C |  SegaScreen :                  2E20 C |
 Sega_GotoTitle :              2F20 C |  Sega_WaitEnd :                2F08 C |
 Sega_WaitPallet :             2EE0 C | *Serial :                       180 C |
 SetupValues :                  294 C |  ShowErrorMsg :                 488 C |
 ShowVDPGraphics :             1420 C |  SignpostArtLoad :             4288 C |
 Signpost_Exit :               42BE C |  Sine_Data :                   2A02 C |
 SingleObjLoad :               DB96 C |  SingleObjLoad2 :              DBAC C |
 SkipSecurity :                 234 C |  SlopeObject :                 752C C |
 SlopeObject2 :                8536 C |  SmashObject :                 D2F8 C |
 Smash_LoadFrag :              D324 C |  Smash_Loop :                  D31C C |
 Smash_PlaySnd :               D376 C |  Snd_FadeOut1 :               7319E C |
 Snd_FadeOut2 :               7323A C |  SolidObject :                 FAE6 C |
 SolidObject2F :               FB72 C |  SolidObject71 :               FB2C C |
 SonAni_Balance :             13E34 C |  SonAni_Blank :               13E9E C |
 SonAni_Bubble :              13E78 C |  SonAni_Death1 :              13E80 C |
 SonAni_Death2 :              13E88 C |  SonAni_Drown :               13E84 C |
 SonAni_Duck :                13E3C C |  SonAni_Float1 :              13E54 C |
 SonAni_Float2 :              13E58 C |  SonAni_Float3 :              13EA2 C |
 SonAni_Float4 :              13EAA C |  SonAni_Hurt :                13E96 C |
 SonAni_LZHang :              13E64 C |  SonAni_LZSlide :             13E9A C |
 SonAni_Leap1 :               13E68 C |  SonAni_Leap2 :               13E6E C |
 SonAni_LookUp :              13E38 C |  SonAni_Push :                13E16 C |
 SonAni_Roll :                13E06 C |  SonAni_Roll2 :               13E0E C |
 SonAni_Run :                 13DFE C |  SonAni_Shrink :              13E8C C |
 SonAni_SpinDash :            13EAE C |  SonAni_Spring :              13E60 C |
 SonAni_Stop :                13E50 C |  SonAni_Surf :                13E74 C |
 SonAni_Wait :                13E1E C |  SonAni_Walk :                13DF6 C |
 SonAni_Warp1 :               13E40 C |  SonAni_Warp2 :               13E44 C |
 SonAni_Warp3 :               13E48 C |  SonAni_Warp4 :               13E4C C |
 SonicAniData :               13DB6 C |  SonicDynPLC :                21A8C C |
 Sonic_Angle :                149CC C |  Sonic_AnglePos :             1486A C |
 Sonic_Animate :              13C32 C |  Sonic_Balance :              1305A C |
 Sonic_ChgJumpDir :           1335C C |  Sonic_Display :              12DDE C |
 Sonic_DontRunOnWalls :       15184 C |  Sonic_Duck :                 130A8 C |
 Sonic_Floor :                13812 C |  Sonic_HitFloor :             14FEC C |
 Sonic_HitWall :              152BE C |  Sonic_HurtStop :             13A94 C |
 Sonic_Jump :                 1350A C |  Sonic_JumpAngle :            137F6 C |
 Sonic_JumpHeight :           135C6 C |  Sonic_LevelBound :           13418 C |
 Sonic_LookUp :               1308C C |  Sonic_Loops :                13B84 C |
 Sonic_Move :                 12FC4 C |  Sonic_MoveLeft :             13192 C |
 Sonic_MoveRight :            131FE C |  Sonic_RecordPos :            12E6E C |
 Sonic_ResetOnFloor :         13A0E C |  Sonic_Roll :                 134A4 C |
 Sonic_RollLeft :             13316 C |  Sonic_RollRepel :            13778 C |
 Sonic_RollRight :            1333A C |  Sonic_RollSpeed :            13264 C |
 Sonic_SlopeRepel :           137B4 C |  Sonic_SlopeResist :          13742 C |
 Sonic_SpinDash :             13602 C |  Sonic_WalkCeiling :          14A94 C |
 Sonic_WalkSpeed :            14F5A C |  Sonic_WalkVertL :            14B36 C |
 Sonic_WalkVertR :            149F8 C |  Sonic_Water :                12E88 C |
 SoundA0 :                    799C6 C |  SoundA1 :                    799DC C |
 SoundA2 :                    79A06 C |  SoundA3 :                    79A26 C |
 SoundA4 :                    79A58 C |  SoundA5 :                    79A8E C |
 SoundA6 :                    79ABA C |  SoundA7 :                    79AEA C |
 SoundA8 :                    79B1A C |  SoundA9 :                    79B4E C |
 SoundAA :                    79B60 C |  SoundAB :                    79BA2 C |
 SoundAC :                    79BC2 C |  SoundAD :                    79BF6 C |
 SoundAE :                    79C2C C |  SoundAF :                    79C76 C |
 SoundB0 :                    79CA4 C |  SoundB1 :                    79CD6 C |
 SoundB2 :                    79D02 C |  SoundB3 :                    79D52 C |
 SoundB4 :                    79D9C C |  SoundB5 :                    79DF8 C |
 SoundB6 :                    79E26 C |  SoundB7 :                    79E44 C |
 SoundB8 :                    79E80 C |  SoundB9 :                    79E9E C |
 SoundBA :                    79F02 C |  SoundBB :                    79F2A C |
 SoundBC :                    79F56 C |  SoundBD :                    79F98 C |
 SoundBE :                    79FEC C |  SoundBF :                    7A026 C |
 SoundC0 :                    7A098 C |  SoundC1 :                    7A0C6 C |
 SoundC2 :                    7A100 C |  SoundC3 :                    7A12A C |
 SoundC4 :                    7A1A4 C |  SoundC5 :                    7A1CC C |
 SoundC6 :                    7A234 C |  SoundC7 :                    7A276 C |
 SoundC8 :                    7A2A4 C |  SoundC9 :                    7A2B6 C |
 SoundCA :                    7A2E4 C |  SoundCB :                    7A312 C |
 SoundCC :                    7A35E C |  SoundCD :                    7A398 C |
 SoundCE :                    7A3A6 C |  SoundCF :                    7A3D4 C |
 SoundD0 :                    7A40C C |  SoundD0Index :               799C2 C |
 SoundDriverLoad :             1352 C |  SoundIndex :                 79902 C |
 SoundTypes :                 72886 C |  Sound_81to9F :               72D90 C |
 Sound_A0toCF :               72F84 C |  Sound_ChkValue :             72CEA C |
 Sound_D0toDF :               730CA C |  Sound_E0 :                   732A4 C |
 Sound_E0toE4 :               72D2C C |  Sound_E1 :                   72D4A C |
 Sound_E2 :                   733E2 C |  Sound_E3 :                   73410 C |
 Sound_E4 :                   7335C C |  Sound_ExIndex :              72D36 C |
 Sound_Play :                 72CA0 C |  Sound_notA7 :                72FC6 C |
 Sound_notB5 :                72FB2 C |  SpecialStage :                45F0 C |
 SpeedToPos :                  D6E8 C |  StartLocArray :               611E C |
 StartOfRom :                     0 C | *TIME :                    20:33:17 - |
 TRUE :                           1 - |  TimeBonuses :                 EE00 C |
 TimeOver :                   1CA22 C |  TitleScreen :                 2F28 C |
 Title_ChkLevSel :             3252 C |  Title_ChkRegion :             31C6 C |
 Title_ClrObjRam :             2F74 C |  Title_ClrObjRam2 :            312E C |
 Title_ClrPallet :             2FD4 C |  Title_ClrScroll :             3274 C |
 Title_ClrVram :               3296 C |  Title_CountC :                3232 C |
 Title_EnterCheat :            31DA C | *Title_Int :                    150 C |
 Title_LoadText :              304E C | *Title_Local :                  120 C |
 Title_PlayRing :              3210 C |  Title_RegionJ :               31D4 C |
 TouchResponse :              1B074 C |  Touch_CatKiller :            1B3AC C |
 Touch_ChkHurt :              1B27A C |  Touch_ChkValue :             1B14C C |
 Touch_D7orE1 :               1B3E2 C |  Touch_Enemy :                1B1C0 C |
 Touch_Height :               1B106 C |  Touch_Hurt :                 1B284 C |
 Touch_KillEnemy :            1B204 C |  Touch_Loop :                 1B0A6 C |
 Touch_Monitor :              1B184 C |  Touch_NextObj :              1B0B2 C |
 Touch_NoDuck :               1B098 C |  Touch_Sizes :                1B0BE C |
 Touch_Special :              1B38A C |  Touch_Width :                1B12E C |
 Touch_Yadrin :               1B3B0 C |  Trace :                        412 C |
 TrapvInstr :                   402 C |  TryAg_ClrObjRam :             5974 C |
 TryAg_ClrPallet :             598A C |  TryAg_Exit :                  59E6 C |
 TryAg_MainLoop :              59B6 C |  TryAgainEnd :                 5938 C |
 Unpause :                     140A C |  VDPInitLoop :                  23E C |
 VDPSetupArray :               129E C |  VDPSetupGame :                1222 C |
 VDP_ClrCRAM :                 125C C |  VDP_Loop :                    1236 C |
*VERSION :                     142F - | *Vectors :                        0 C |
 WaitForZ80 :                   250 C |  WaterHeight :                 3C3E C |
 Z80InitLoop :                  256 C |  ZeroDivide :                   3F2 C |
 asc_4E8 :                      4E8 C |  asc_4FB :                      4FB C |
 asc_50E :                      50E C |  asc_521 :                      521 C |
 asc_534 :                      534 C |  asc_547 :                      547 C |
 asc_55A :                      55A C |  asc_56D :                      56D C |
 asc_580 :                      580 C |  asc_593 :                      593 C |
 asc_5A6 :                      5A6 C | *bj0D_SonicRun :               ED5E C |
 byte_10054 :                 10164 C |  byte_1005A :                 1016A C |
 byte_10065 :                 10175 C |  byte_1007A :                 1018A C |
 byte_1008F :                 1019F C |  byte_100A2 :                 101B2 C |
 byte_10230 :                 10340 C |  byte_10234 :                 10344 C |
 byte_10238 :                 10348 C |  byte_10246 :                 10356 C |
 byte_1024C :                 1035C C |  byte_1025C :                 1036C C |
 byte_10271 :                 10381 C |  byte_10710 :                 10820 C |
 byte_10716 :                 10826 C |  byte_1072B :                 1083B C |
 byte_10736 :                 10846 C |  byte_1074B :                 1085B C |
 byte_1075B :                 1086B C |  byte_10761 :                 10871 C |
 byte_1076C :                 1087C C |  byte_10958 :                 10A68 C |
 byte_10964 :                 10A74 C |  byte_1096A :                 10A7A C |
 byte_10970 :                 10A80 C |  byte_10AA6 :                 10BB6 C |
 byte_10AC0 :                 10BD0 C |  byte_10AC6 :                 10BD6 C |
 byte_10D4A :                 10E5A C |  byte_10E84 :                 10F94 C |
 byte_1103E :                 1114E C |  byte_11098 :                 111A8 C |
 byte_11178 :                 11288 C |  byte_11188 :                 11298 C |
 byte_11198 :                 112A8 C |  byte_111A8 :                 112B8 C |
 byte_111C7 :                 112D7 C |  byte_111E6 :                 112F6 C |
 byte_11326 :                 11436 C |  byte_11331 :                 11441 C |
 byte_113E6 :                 114F6 C |  byte_113EC :                 114FC C |
 byte_113F8 :                 11508 C |  byte_11403 :                 11513 C |
 byte_1140E :                 1151E C |  byte_114BC :                 115CC C |
 byte_114D1 :                 115E1 C |  byte_114E6 :                 115F6 C |
 byte_1161A :                 1172A C |  byte_11625 :                 11735 C |
 byte_11630 :                 11740 C |  byte_119AC :                 11ABC C |
 byte_119D0 :                 11AE0 C |  byte_119EA :                 11AFA C |
 byte_119F0 :                 11B00 C |  byte_11C12 :                 11D22 C |
 byte_11C16 :                 11D26 C |  byte_11C1C :                 11D2C C |
 byte_11C20 :                 11D30 C |  byte_11C24 :                 11D34 C |
 byte_11C40 :                 11D50 C |  byte_11C50 :                 11D60 C |
 byte_11C60 :                 11D70 C |  byte_11C70 :                 11D80 C |
 byte_11C80 :                 11D90 C |  byte_11C90 :                 11DA0 C |
 byte_11CA0 :                 11DB0 C |  byte_11CAB :                 11DBB C |
 byte_11CB6 :                 11DC6 C |  byte_11CBC :                 11DCC C |
 byte_11CC2 :                 11DD2 C |  byte_11CC8 :                 11DD8 C |
 byte_11EDA :                 11FEA C |  byte_11EDE :                 11FEE C |
 byte_11EEC :                 11FFC C |  byte_11EF2 :                 12002 C |
 byte_11EF8 :                 12008 C |  byte_11EFE :                 1200E C |
 byte_11F8A :                 1209A C |  byte_11F8E :                 1209E C |
 byte_11F92 :                 120A2 C |  byte_11F96 :                 120A6 C |
 byte_11FA6 :                 120B6 C |  byte_11FAC :                 120BC C |
 byte_11FB2 :                 120C2 C |  byte_11FBD :                 120CD C |
 byte_11FC3 :                 120D3 C |  byte_11FC9 :                 120D9 C |
 byte_121CA :                 122DA C |  byte_121D0 :                 122E0 C |
 byte_121DB :                 122EB C |  byte_121E1 :                 122F1 C |
 byte_12320 :                 12430 C |  byte_12330 :                 12440 C |
 byte_12336 :                 12446 C |  byte_12686 :                 12796 C |
 byte_1268C :                 1279C C |  byte_12692 :                 127A2 C |
 byte_12698 :                 127A8 C |  byte_1269E :                 127AE C |
 byte_129AA :                 12ABA C |  byte_129B0 :                 12AC0 C |
 byte_129B6 :                 12AC6 C |  byte_129BE :                 12ACE C |
 byte_129C0 :                 12AD0 C |  byte_129C6 :                 12AD6 C |
 byte_129FA :                 12B0A C |  byte_12A00 :                 12B10 C |
 byte_12A06 :                 12B16 C |  byte_12A0C :                 12B1C C |
 byte_12A12 :                 12B22 C |  byte_12A18 :                 12B28 C |
 byte_12A1E :                 12B2E C |  byte_12A24 :                 12B34 C |
 byte_12A39 :                 12B49 C |  byte_12A4E :                 12B5E C |
 byte_12A54 :                 12B64 C |  byte_12A5A :                 12B6A C |
 byte_12A60 :                 12B70 C |  byte_12A66 :                 12B76 C |
 byte_12A6C :                 12B7C C |  byte_12A72 :                 12B82 C |
 byte_12A78 :                 12B88 C |  byte_12A7E :                 12B8E C |
 byte_12A84 :                 12B94 C |  byte_12A8A :                 12B9A C |
 byte_12A90 :                 12BA0 C |  byte_12A96 :                 12BA6 C |
 byte_12A9C :                 12BAC C |  byte_12B4E :                 12C5E C |
 byte_12B6C :                 12C7C C |  byte_12B72 :                 12C82 C |
 byte_12B7D :                 12C8D C |  byte_12B88 :                 12C98 C |
 byte_12B8E :                 12C9E C |  byte_12B99 :                 12CA9 C |
 byte_12B9F :                 12CAF C |  byte_12BA5 :                 12CB5 C |
 byte_12BAB :                 12CBB C |  byte_12BB6 :                 12CC6 C |
 byte_12BC1 :                 12CD1 C |  byte_12BCC :                 12CDC C |
 byte_140D6 :                 14352 C |  byte_140E0 :                 1435C C |
 byte_140EA :                 14366 C |  byte_140F4 :                 14370 C |
 byte_140FE :                 1437A C |  byte_14108 :                 14384 C |
 byte_14112 :                 1438E C |  byte_14118 :                 14394 C |
 byte_14120 :                 1439C C |  byte_14128 :                 143A4 C |
 byte_14130 :                 143AC C |  byte_14138 :                 143B4 C |
 byte_14140 :                 143BC C |  byte_14148 :                 143C4 C |
 byte_1414A :                 143C6 C |  byte_14152 :                 143CE C |
 byte_14356 :                 145D2 C |  byte_1435E :                 145DA C |
 byte_14364 :                 145E0 C |  byte_1437E :                 145FA C |
 byte_14398 :                 14614 C |  byte_143C2 :                 1463E C |
 byte_143CD :                 14649 C |  byte_143D7 :                 14653 C |
 byte_143EC :                 14668 C |  byte_14401 :                 1467D C |
 byte_14416 :                 14692 C |  byte_1442B :                 146A7 C |
 byte_14440 :                 146BC C |  byte_14458 :                 146D4 C |
 byte_1447C :                 146F8 C |  byte_1448C :                 14708 C |
 byte_1449C :                 14718 C |  byte_144B6 :                 14732 C |
 byte_144E4 :                 14760 C |  byte_1453F :                 147BB C |
 byte_14595 :                 14811 C |  byte_145BF :                 1483B C |
 byte_145C6 :                 14842 C |  byte_145D2 :                 1484E C |
 byte_145DD :                 14859 C |  byte_145E8 :                 14864 C |
 byte_152B4 :                 15530 C |  byte_152D3 :                 1554F C |
 byte_152F2 :                 1556E C |  byte_15311 :                 1558D C |
 byte_15330 :                 155AC C |  byte_1534F :                 155CB C |
 byte_1536E :                 155EA C |  byte_1538D :                 15609 C |
 byte_153AC :                 15628 C |  byte_153CB :                 15647 C |
 byte_153EA :                 15666 C |  byte_15409 :                 15685 C |
 byte_15428 :                 156A4 C |  byte_15447 :                 156C3 C |
 byte_15466 :                 156E2 C |  byte_15485 :                 15701 C |
 byte_154A4 :                 15720 C |  byte_15688 :                 15904 C |
 byte_158AC :                 15B28 C |  byte_158B2 :                 15B2E C |
 byte_158B8 :                 15B34 C |  byte_158CC :                 15B48 C |
 byte_158E6 :                 15B62 C |  byte_158FB :                 15B77 C |
 byte_15924 :                 15BA0 C |  byte_15944 :                 15BC0 C |
 byte_1594F :                 15BCB C |  byte_1595A :                 15BD6 C |
 byte_15965 :                 15BE1 C |  byte_15970 :                 15BEC C |
 byte_15BA0 :                 15E1C C |  byte_15BC4 :                 15E40 C |
 byte_15BE8 :                 15E64 C |  byte_15BFD :                 15E79 C |
 byte_15F72 :                 161EE C |  byte_15F87 :                 16203 C |
 byte_15FB0 :                 1622C C |  byte_1611A :                 16396 C |
 byte_16122 :                 1639E C |  byte_16132 :                 163AE C |
 byte_16138 :                 163B4 C |  byte_1613E :                 163BA C |
 byte_16144 :                 163C0 C |  byte_161CC :                 16448 C |
 byte_161D0 :                 1644C C |  byte_161EC :                 16468 C |
 byte_161F7 :                 16473 C |  byte_16207 :                 16483 C |
 byte_16221 :                 1649D C |  byte_16236 :                 164B2 C |
 byte_16255 :                 164D1 C |  byte_1648E :                 1670A C |
 byte_164A2 :                 1671E C |  byte_1662A :                 168A6 C |
 byte_16D9E :                 1701A C |  byte_16DA4 :                 17020 C |
 byte_16DAA :                 17026 C |  byte_16DB0 :                 1702C C |
 byte_16DB6 :                 17032 C |  byte_16DBC :                 17038 C |
 byte_16DC2 :                 1703E C |  byte_16DC8 :                 17044 C |
 byte_16DCE :                 1704A C |  byte_16DD4 :                 17050 C |
 byte_16DDA :                 17056 C |  byte_16DE0 :                 1705C C |
 byte_16DE6 :                 17062 C |  byte_16DEC :                 17068 C |
 byte_16DF2 :                 1706E C |  byte_16DF8 :                 17074 C |
 byte_16DFE :                 1707A C |  byte_16E04 :                 17080 C |
 byte_16E0A :                 17086 C |  byte_16E10 :                 1708C C |
 byte_16E16 :                 17092 C |  byte_16E1C :                 17098 C |
 byte_16E22 :                 1709E C |  byte_16E28 :                 170A4 C |
 byte_17100 :                 1737C C |  byte_1711F :                 1739B C |
 byte_17134 :                 173B0 C |  byte_1713F :                 173BB C |
 byte_17250 :                 174CC C |  byte_17251 :                 174CD C |
 byte_17257 :                 174D3 C |  byte_1725D :                 174D9 C |
 byte_172F8 :                 17574 C |  byte_1733F :                 175BB C |
 byte_17390 :                 1760C C |  byte_173C3 :                 1763F C |
 byte_1743C :                 176B8 C |  byte_174A1 :                 1771D C |
 byte_17524 :                 177A0 C |  byte_17598 :                 17814 C |
 byte_17634 :                 178B0 C |  byte_17680 :                 178FC C |
 byte_176A9 :                 17925 C |  byte_17CD4 :                 17F64 C |
 byte_17CD8 :                 17F68 C |  byte_17CDC :                 17F6C C |
 byte_17CE0 :                 17F70 C |  byte_17CE4 :                 17F74 C |
 byte_17CE8 :                 17F78 C |  byte_17CEC :                 17F7C C |
 byte_17CF0 :                 17F80 C |  byte_17CF4 :                 17F84 C |
 byte_17CF8 :                 17F88 C |  byte_17CFC :                 17F8C C |
 byte_17D00 :                 17F90 C |  byte_17D26 :                 17FB6 C |
 byte_17D45 :                 17FD5 C |  byte_17D50 :                 17FE0 C |
 byte_17D5B :                 17FEB C |  byte_17D6B :                 17FFB C |
 byte_17D7B :                 1800B C |  byte_17D8B :                 1801B C |
 byte_17D9B :                 1802B C |  byte_17DB0 :                 18040 C |
 byte_17DB6 :                 18046 C |  byte_17DBC :                 1804C C |
 byte_17DBD :                 1804D C |  byte_17DC8 :                 18058 C |
 byte_17DE4 :                 18074 C |  byte_17DEA :                 1807A C |
 byte_17DF6 :                 18086 C |  byte_17DFC :                 1808C C |
 byte_17E02 :                 18092 C |  byte_17E08 :                 18098 C |
 byte_17E1E :                 180AE C |  byte_17E2A :                 180BA C |
 byte_19022 :                 192B2 C |  byte_19026 :                 192B6 C |
 byte_190E2 :                 19372 C |  byte_190E8 :                 19378 C |
 byte_19808 :                 19A98 C |  byte_19814 :                 19AA4 C |
 byte_1981A :                 19AAA C |  byte_19820 :                 19AB0 C |
 byte_19826 :                 19AB6 C |  byte_19A10 :                 19CA0 C |
 byte_19A14 :                 19CA4 C |  byte_19A18 :                 19CA8 C |
 byte_19A20 :                 19CB0 C |  byte_19A24 :                 19CB4 C |
 byte_19A2A :                 19CBA C |  byte_19A30 :                 19CC0 C |
 byte_19A4A :                 19CDA C |  byte_19A5A :                 19CEA C |
 byte_19A70 :                 19D00 C |  byte_19A86 :                 19D16 C |
 byte_19A9C :                 19D2C C |  byte_19AB2 :                 19D42 C |
 byte_19AC8 :                 19D58 C |  byte_19AEC :                 19D7C C |
 byte_19B06 :                 19D96 C |  byte_19B26 :                 19DB6 C |
 byte_19B4F :                 19DDF C |  byte_19D1C :                 19FAC C |
 byte_19D22 :                 19FB2 C |  byte_19D2E :                 19FBE C |
 byte_19D3A :                 19FCA C |  byte_19D46 :                 19FD6 C |
 byte_1A3C :                   1A3C C |  byte_1A3D6 :                 1A666 C |
 byte_1A3DE :                 1A66E C |  byte_1A3FD :                 1A68D C |
 byte_1A422 :                 1A6B2 C |  byte_1A42D :                 1A6BD C |
 byte_1A43D :                 1A6CD C |  byte_1A68E :                 1A91E C |
 byte_1A6AD :                 1A93D C |  byte_1A6D6 :                 1A966 C |
 byte_1A709 :                 1A999 C |  byte_1A746 :                 1A9D6 C |
 byte_1A788 :                 1AA18 C |  byte_1A7CF :                 1AA5F C |
 byte_1AA46 :                 1ACD6 C |  byte_1AA4A :                 1ACDA C |
 byte_1AA50 :                 1ACE0 C |  byte_1AA5E :                 1ACEE C |
 byte_1AA64 :                 1ACF4 C |  byte_1AA6A :                 1ACFA C |
 byte_1AA70 :                 1AD00 C |  byte_1AA7A :                 1AD0A C |
 byte_1AA9C :                 1AD2C C |  byte_1AABC :                 1AD4C C |
 byte_1AAC7 :                 1AD57 C |  byte_1AAD2 :                 1AD62 C |
 byte_1AADD :                 1AD6D C |  byte_1AAE8 :                 1AD78 C |
 byte_1AAF3 :                 1AD83 C |  byte_1AAFE :                 1AD8E C |
 byte_1AB04 :                 1AD94 C |  byte_1AB0A :                 1AD9A C |
 byte_1AB15 :                 1ADA5 C |  byte_1AB20 :                 1ADB0 C |
 byte_1AD70 :                 1B000 C |  byte_1AD82 :                 1B012 C |
 byte_1ADA6 :                 1B036 C |  byte_1ADAC :                 1B03C C |
 byte_1ADCB :                 1B05B C |  byte_1ADD1 :                 1B061 C |
 byte_1ADDC :                 1B06C C |  byte_1ADE2 :                 1B072 C |
 byte_1B912 :                 1BBAC C |  byte_1B918 :                 1BBB2 C |
 byte_1B91E :                 1BBB8 C |  byte_1B928 :                 1BBC2 C |
 byte_1B92E :                 1BBC8 C |  byte_1B934 :                 1BBCE C |
 byte_1B93A :                 1BBD4 C |  byte_1B944 :                 1BBDE C |
 byte_1B94A :                 1BBE4 C |  byte_1B954 :                 1BBEE C |
 byte_1B95A :                 1BBF4 C |  byte_1B96C :                 1BC06 C |
 byte_1B972 :                 1BC0C C |  byte_1B978 :                 1BC12 C |
 byte_1B97E :                 1BC18 C |  byte_1C10E :                 1C3A8 C |
 byte_1C334 :                 1C5CE C |  byte_1C376 :                 1C610 C |
 byte_2C584 :                 2D37E C |  byte_2C58A :                 2D384 C |
 byte_2C590 :                 2D38A C |  byte_2C596 :                 2D390 C |
 byte_2C59C :                 2D396 C |  byte_2C5A2 :                 2D39C C |
 byte_2C5A8 :                 2D3A2 C |  byte_2C5AE :                 2D3A8 C |
 byte_2C5B4 :                 2D3AE C |  byte_2C5BA :                 2D3B4 C |
 byte_2C5C0 :                 2D3BA C |  byte_2C5C6 :                 2D3C0 C |
 byte_2C5CC :                 2D3C6 C |  byte_2C5D2 :                 2D3CC C |
 byte_2C5D8 :                 2D3D2 C |  byte_2C5DE :                 2D3D8 C |
 byte_3FC0 :                   3FD4 C |  byte_3FCF :                   3FE3 C |
 byte_4A3C :                   4A50 C |  byte_4ABC :                   4AD0 C |
 byte_4CB8 :                   4CCC C |  byte_4CC4 :                   4CD8 C |
 byte_4CCC :                   4CE0 C |  byte_504A :                   505E C |
 byte_5066 :                   507A C |  byte_509E :                   50B2 C |
 byte_50AE :                   50C2 C |  byte_50BE :                   50D2 C |
 byte_50CE :                   50E2 C |  byte_50D9 :                   50ED C |
 byte_50DF :                   50F3 C |  byte_551C :                   5530 C |
 byte_552A :                   553E C |  byte_5534 :                   5548 C |
 byte_5690 :                   569C C |  byte_569B :                   56A7 C |
 byte_56AB :                   56B7 C |  byte_56B6 :                   56C2 C |
 byte_56C1 :                   56CD C |  byte_56CC :                   56D8 C |
 byte_56DC :                   56E8 C |  byte_5700 :                   570C C |
 byte_5788 :                   5794 C |  byte_578E :                   579A C |
 byte_5794 :                   57A0 C |  byte_579A :                   57A6 C |
 byte_57A0 :                   57AC C |  byte_57A6 :                   57B2 C |
 byte_57AC :                   57B8 C |  byte_57B4 :                   57C0 C |
 byte_5AA8 :                   5AB4 C |  byte_5AAC :                   5AB8 C |
 byte_5AB0 :                   5ABC C |  byte_5BCC :                   5BD8 C |
 byte_5BF5 :                   5C01 C |  byte_5C1E :                   5C2A C |
 byte_5C47 :                   5C53 C |  byte_5C70 :                   5C7C C |
 byte_5CAD :                   5CB9 C |  byte_5CE0 :                   5CEC C |
 byte_5D13 :                   5D1F C |  byte_68D70 :                 69BD0 C |
 byte_68E3C :                 69C9C C |  byte_68F84 :                 69DE4 C |
 byte_68F88 :                 69DE8 C |  byte_69190 :                 69FF0 C |
 byte_6922E :                 6A08E C |  byte_6934C :                 6A1AC C |
 byte_6940A :                 6A26A C |  byte_6965C :                 6A4BC C |
 byte_697E6 :                 6A646 C |  byte_697EA :                 6A64A C |
 byte_69B84 :                 6A9E4 C |  byte_69C7E :                 6AADE C |
 byte_69D86 :                 6ABE6 C |  byte_69EE4 :                 6AD44 C |
 byte_69EE8 :                 6AD48 C |  byte_6A2F8 :                 6B158 C |
 byte_6A2FC :                 6B15C C |  byte_6A320 :                 6B190 C |
 byte_71A94 :                 72832 C |  byte_71CC4 :                 72A62 C |
 byte_721BA :                 72F78 C |  byte_721C2 :                 72F80 C |
 byte_72CAC :                 73A6A C |  byte_72D18 :                 73AD6 C |
 byte_72D2C :                 73AEA C |  byte_793A :                   7946 C |
 byte_7940 :                   794C C |  byte_794B :                   7957 C |
 byte_7C4E :                   7C5A C |  byte_7C59 :                   7C65 C |
 byte_7C5F :                   7C6B C |  byte_7C6C :                   7C78 C |
 byte_7C95 :                   7CA1 C |  byte_7C9B :                   7CA7 C |
 byte_7E08 :                   7E14 C |  byte_7E0E :                   7E1A C |
 byte_7E14 :                   7E20 C |  byte_7E1A :                   7E26 C |
 byte_7E20 :                   7E2C C |  byte_7E26 :                   7E32 C |
 byte_7E2C :                   7E38 C |  byte_7E2D :                   7E39 C |
 byte_80FE :                   810A C |  byte_8109 :                   8115 C |
 byte_8140 :                   814C C |  byte_8155 :                   8161 C |
 byte_818A :                   8196 C |  byte_819C :                   81A8 C |
 byte_81B2 :                   81BE C |  byte_81D1 :                   81DD C |
 byte_81E6 :                   81F2 C |  byte_81FB :                   8207 C |
 byte_85A8 :                   85B4 C |  byte_85F9 :                   8605 C |
 byte_864A :                   8656 C |  byte_86C8 :                   86D4 C |
 byte_874E :                   875A C |  byte_8763 :                   876F C |
 byte_878C :                   8798 C |  byte_87A1 :                   87AD C |
 byte_8858 :                   8864 C |  byte_891E :                   892A C |
 byte_89FE :                   8A0A C |  byte_8A09 :                   8A15 C |
 byte_8A14 :                   8A20 C |  byte_8A1F :                   8A2B C |
 byte_8A2A :                   8A36 C |  byte_8A35 :                   8A41 C |
 byte_8A40 :                   8A4C C |  byte_8A4B :                   8A57 C |
 byte_8A56 :                   8A62 C |  byte_8E4A :                   8E56 C |
 byte_8E6E :                   8E7A C |  byte_8E79 :                   8E85 C |
 byte_8E84 :                   8E90 C |  byte_8E8F :                   8E9B C |
 byte_8E9A :                   8EA6 C |  byte_8EA0 :                   8EAC C |
 byte_8EAE :                   8EBA C |  byte_8EB4 :                   8EC0 C |
 byte_8EBA :                   8EC6 C |  byte_8EC0 :                   8ECC C |
 byte_8ED0 :                   8EDC C |  byte_8ED6 :                   8EE2 C |
 byte_8EDC :                   8EE8 C |  byte_8EE2 :                   8EEE C |
 byte_8EF7 :                   8F03 C |  byte_8F16 :                   8F22 C |
 byte_8F1C :                   8F28 C |  byte_946C :                   9478 C |
 byte_9472 :                   947E C |  byte_9478 :                   9484 C |
 byte_9484 :                   9490 C |  byte_948A :                   9496 C |
 byte_9490 :                   949C C |  byte_949C :                   94A8 C |
 byte_94A2 :                   94AE C |  byte_94A8 :                   94B4 C |
 byte_94BC :                   94C8 C |  byte_94C2 :                   94CE C |
 byte_94C8 :                   94D4 C |  byte_94CE :                   94DA C |
 byte_94D4 :                   94E0 C |  byte_94DA :                   94E6 C |
 byte_94E5 :                   94F1 C |  byte_972A :                   9736 C |
 byte_972E :                   973A C |  byte_9732 :                   973E C |
 byte_9736 :                   9742 C |  byte_973C :                   9748 C |
 byte_9742 :                   974E C |  byte_9748 :                   9754 C |
 byte_974C :                   9758 C |  byte_975E :                   976A C |
 byte_9773 :                   977F C |  byte_9788 :                   9794 C |
 byte_979D :                   97A9 C |  byte_97B2 :                   97BE C |
 byte_97D1 :                   97DD C |  byte_97D7 :                   97E3 C |
 byte_9A1E :                   9A2A C |  byte_9A22 :                   9A2E C |
 byte_9A26 :                   9A32 C |  byte_9A2E :                   9A3A C |
 byte_9A32 :                   9A3E C |  byte_9A42 :                   9A4E C |
 byte_9A61 :                   9A6D C |  byte_9A80 :                   9A8C C |
 byte_9AA4 :                   9AB0 C |  byte_9AC8 :                   9AD4 C |
 byte_9AE7 :                   9AF3 C |  byte_9B0E :                   9B1A C |
 byte_9B14 :                   9B20 C |  byte_9B1A :                   9B26 C |
 byte_9B20 :                   9B2C C |  byte_9F8C :                   9F98 C |
 byte_9FA2 :                   9FAE C |  byte_9FA8 :                   9FB4 C |
 byte_9FAE :                   9FBA C |  byte_9FB4 :                   9FC0 C |
 byte_9FBA :                   9FC6 C |  byte_9FC0 :                   9FCC C |
 byte_9FC6 :                   9FD2 C |  byte_9FCC :                   9FD8 C |
 byte_9FDA :                   9FE6 C |  byte_A00D :                   A019 C |
 byte_A036 :                   A042 C |  byte_A04B :                   A057 C |
 byte_A084 :                   A090 C |  byte_A08F :                   A09B C |
 byte_A0A4 :                   A0B0 C |  byte_A0B9 :                   A0C5 C |
 byte_A0CE :                   A0DA C |  byte_A0E3 :                   A0EF C |
 byte_A0F8 :                   A104 C |  byte_A103 :                   A10F C |
 byte_A51C :                   A538 C |  byte_A522 :                   A53E C |
 byte_A52E :                   A54A C |  byte_A53A :                   A556 C |
 byte_A546 :                   A562 C |  byte_A552 :                   A56E C |
 byte_A55E :                   A57A C |  byte_A56A :                   A586 C |
 byte_A576 :                   A592 C |  byte_A582 :                   A59E C |
 byte_A5A2 :                   A5BE C |  byte_A5A8 :                   A5C4 C |
 byte_A5B3 :                   A5CF C |  byte_A5BE :                   A5DA C |
 byte_A5C9 :                   A5E5 C |  byte_A5D4 :                   A5F0 C |
 byte_A5DF :                   A5FB C |  byte_A5EA :                   A606 C |
 byte_A5F5 :                   A611 C |  byte_A600 :                   A61C C |
*byte_A601 :                   A61D C |  byte_A60B :                   A627 C |
 byte_A616 :                   A632 C |  byte_A706 :                   A722 C |
 byte_A714 :                   A730 C |  byte_A7CC :                   A7E8 C |
 byte_A7CD :                   A7E9 C |  byte_A7EB :                   A807 C |
 byte_A882 :                   A89E C |  byte_ABBE :                   ACA8 C |
 byte_ABC2 :                   ACAC C |  byte_ABC6 :                   ACB0 C |
 byte_ABCE :                   ACB8 C |  byte_ABD4 :                   ACBE C |
 byte_AC6A :                   AD54 C |  byte_AC78 :                   AD62 C |
 byte_AC83 :                   AD6D C |  byte_AC8E :                   AD78 C |
 byte_AC99 :                   AD83 C |  byte_AE4C :                   AF36 C |
 byte_AE50 :                   AF3A C |  byte_AE54 :                   AF3E C |
 byte_AE58 :                   AF42 C |  byte_AE6A :                   AF54 C |
 byte_AE75 :                   AF5F C |  byte_AE80 :                   AF6A C |
 byte_AE8B :                   AF75 C |  byte_AE96 :                   AF80 C |
 byte_AEA1 :                   AF8B C |  byte_AEAC :                   AF96 C |
 byte_B2CE :                   B3B8 C |  byte_B2DA :                   B3C4 C |
 byte_B31C :                   B406 C |  byte_B34F :                   B439 C |
 byte_B37A :                   B464 C |  byte_B380 :                   B46A C |
 byte_B386 :                   B470 C |  byte_B38C :                   B476 C |
 byte_B392 :                   B47C C |  byte_B398 :                   B482 C |
 byte_B600 :                   B6EA C |  byte_B63D :                   B727 C |
 byte_B648 :                   B732 C |  byte_BB64 :                   BC4E C |
 byte_BB7E :                   BC68 C |  byte_BB98 :                   BC82 C |
 byte_BB9E :                   BC88 C |  byte_BBA9 :                   BC93 C |
 byte_BBBE :                   BCA8 C |  byte_BBDD :                   BCC7 C |
 byte_BC06 :                   BCF0 C |  byte_BC39 :                   BD23 C |
 byte_BC53 :                   BD3D C |  byte_BC6C :                   BD56 C |
 byte_BC7C :                   BD66 C |  byte_BC8C :                   BD76 C |
 byte_BC92 :                   BD7C C |  byte_BC9D :                   BD87 C |
 byte_BCB2 :                   BD9C C |  byte_BCD1 :                   BDBB C |
 byte_BCFA :                   BDE4 C |  byte_BEAC :                   BF96 C |
 byte_BEB7 :                   BFA1 C |  byte_BEC2 :                   BFAC C |
 byte_C2EA :                   C3D4 C |  byte_C2F0 :                   C3DA C |
 byte_C9FE :                   CAE8 C |  byte_CA2C :                   CB2F C |
 byte_CA5A :                   CB5D C |  byte_CA7A :                   CB7D C |
 byte_CAA8 :                   CBAB C |  byte_CADC :                   CBDF C |
 byte_CB10 :                   CC13 C |  byte_CB26 :                   CC29 C |
 byte_CB31 :                   CC34 C |  byte_CB3C :                   CC3F C |
 byte_CB47 :                   CC4A C |  byte_CB8A :                   CC8D C |
 byte_CBAC :                   CCB0 C |  byte_CBB7 :                   CCBB C |
 byte_CBC2 :                   CCC6 C |  byte_CBCD :                   CCD1 C |
 byte_CBEA :                   CCEE C |  byte_CC13 :                   CD17 C |
 byte_CC32 :                   CD36 C |  byte_CC51 :                   CD55 C |
 byte_CC75 :                   CD79 C |  byte_CCAC :                   CDB0 C |
 byte_CCEE :                   CDF2 C |  byte_CD0D :                   CE11 C |
 byte_CD31 :                   CE35 C |  byte_CD46 :                   CE4A C |
 byte_CD5B :                   CE5F C |  byte_CD6B :                   CE6F C |
 byte_CDA8 :                   CEAC C |  byte_CE02 :                   CF06 C |
 byte_CE08 :                   CF0C C |  byte_CE0E :                   CF12 C |
 byte_CE14 :                   CF18 C |  byte_CE1A :                   CF1E C |
 byte_CE20 :                   CF24 C |  byte_CE26 :                   CF2A C |
 byte_CFF4 :                   D0FE C |  byte_D004 :                   D10E C |
 byte_D014 :                   D11E C |  byte_D01A :                   D124 C |
 byte_D02A :                   D134 C |  byte_D049 :                   D153 C |
 byte_D110 :                   D21A C |  byte_D2BC :                   D3C6 C |
 byte_D2E5 :                   D3EF C |  byte_D30E :                   D418 C |
 byte_DD02 :                   DE0C C |  byte_DD0E :                   DE18 C |
 byte_DD26 :                   DE30 C |  byte_DD31 :                   DE3B C |
 byte_DD37 :                   DE41 C |  byte_DD47 :                   DE51 C |
 byte_DD4D :                   DE57 C |  byte_DD53 :                   DE5D C |
 byte_DF24 :                   E02E C |  byte_DF28 :                   E032 C |
 byte_DF30 :                   E03A C |  byte_DF34 :                   E03E C |
 byte_DF38 :                   E042 C |  byte_DF58 :                   E062 C |
 byte_DF68 :                   E072 C |  byte_DF78 :                   E082 C |
 byte_DF88 :                   E092 C |  byte_DF9D :                   E0A7 C |
 byte_DFAD :                   E0B7 C |  byte_DFB8 :                   E0C2 C |
 byte_DFC8 :                   E0D2 C |  byte_DFD8 :                   E0E2 C |
 byte_DFE8 :                   E0F2 C |  byte_DFF8 :                   E102 C |
 byte_E190 :                   E29A C |  byte_E196 :                   E2A0 C |
 byte_E19C :                   E2A6 C |  byte_E1AC :                   E2B6 C |
 byte_E1B7 :                   E2C1 C |  byte_E1C2 :                   E2CC C |
 byte_E1C8 :                   E2D2 C |  byte_E1CE :                   E2D8 C |
 byte_E256 :                   E360 C |  byte_E26B :                   E375 C |
 byte_E280 :                   E38A C |  byte_E4CC :                   E5D6 C |
 byte_E4D2 :                   E5DC C |  byte_E4D6 :                   E5E0 C |
 byte_E4DC :                   E5E6 C |  byte_E5C4 :                   E6CE C |
 byte_E5D2 :                   E6DC C |  byte_E5DC :                   E6E6 C |
 byte_E5EA :                   E6F4 C |  byte_E620 :                   E72A C |
 byte_E626 :                   E730 C |  byte_E631 :                   E73B C |
 byte_E63C :                   E746 C |  byte_E64C :                   E756 C |
 byte_E65C :                   E766 C |  byte_E671 :                   E77B C |
 byte_E686 :                   E790 C |  byte_E6A0 :                   E7AA C |
 byte_E6BA :                   E7C4 C |  byte_E6D9 :                   E7E3 C |
 byte_E6F8 :                   E802 C |  byte_E6FE :                   E808 C |
 byte_E709 :                   E813 C |  byte_E714 :                   E81E C |
 byte_E724 :                   E82E C |  byte_E734 :                   E83E C |
 byte_E749 :                   E853 C |  byte_E75E :                   E868 C |
 byte_E778 :                   E882 C |  byte_E792 :                   E89C C |
 byte_E7B1 :                   E8BB C |  byte_E906 :                   EA10 C |
 byte_E98E :                   EA98 C |  byte_E999 :                   EAA3 C |
 byte_E9A4 :                   EAAE C |  byte_E9AF :                   EAB9 C |
 byte_E9BA :                   EAC4 C |  byte_E9C5 :                   EACF C |
 byte_EAF4 :                   EBFE C |  byte_EAF8 :                   EC02 C |
 byte_EB06 :                   EC10 C |  byte_EB11 :                   EC1B C |
 byte_EB1C :                   EC26 C |  byte_ED24 :                   EE34 C |
 byte_ED28 :                   EE38 C |  byte_ED2E :                   EE3E C |
 byte_ED34 :                   EE44 C |  byte_ED42 :                   EE52 C |
 byte_ED52 :                   EE62 C |  byte_ED5D :                   EE6D C |
 byte_ED68 :                   EE78 C |  byte_ED73 :                   EE83 C |
 byte_F212 :                   F322 C |  byte_F220 :                   F330 C |
 byte_F22A :                   F33A C |  byte_F22E :                   F33E C |
 byte_F232 :                   F342 C |  byte_F23A :                   F34A C |
 byte_F23E :                   F34E C |  byte_F244 :                   F354 C |
 byte_F272 :                   F382 C |  byte_F27D :                   F38D C |
 byte_F288 :                   F398 C |  byte_F29D :                   F3AD C |
 byte_F2B2 :                   F3C2 C |  byte_F2D1 :                   F3E1 C |
 byte_F2F0 :                   F400 C |  byte_F2FB :                   F40B C |
 byte_F306 :                   F416 C |  byte_F339 :                   F449 C |
 byte_F36C :                   F47C C |  byte_F39F :                   F4AF C |
 byte_F3BE :                   F4CE C |  byte_F3DD :                   F4ED C |
 byte_F3FC :                   F50C C |  byte_F44D :                   F55D C |
 byte_F49E :                   F5AE C |  byte_F4EF :                   F5FF C |
 byte_F50E :                   F61E C |  byte_F52D :                   F63D C |
 byte_F538 :                   F648 C |  byte_F566 :                   F676 C |
 byte_F594 :                   F6A4 C |  byte_F5C2 :                   F6D2 C |
 byte_F5F0 :                   F700 C |  byte_F788 :                   F898 C |
 byte_F78C :                   F89C C |  byte_F792 :                   F8A2 C |
 byte_F7AE :                   F8BE C |  byte_F7C3 :                   F8D3 C |
 byte_F7D8 :                   F8E8 C |  byte_F7F2 :                   F902 C |
 byte_F7F8 :                   F908 C |  byte_F7FE :                   F90E C |
 byte_F804 :                   F914 C |  byte_F920 :                   FA30 C |
 byte_F924 :                   FA34 C |  byte_F93A :                   FA4A C |
 byte_F954 :                   FA64 C |  byte_F96E :                   FA7E C |
 byte_F988 :                   FA98 C |  byte_F9A2 :                   FAB2 C |
 byte_F9BC :                   FACC C |  byte_FDD8 :                   FEE8 C |
 byte_FDE3 :                   FEF3 C |  cont :                       135B2 C |
 dword_61B4 :                  61C0 C |  dword_722CC :                7308A C |
 dword_722EC :                730AA C |  loc_10004 :                  10114 C |
 loc_101A0 :                  102B0 C |  loc_101B0 :                  102C0 C |
 loc_10214 :                  10324 C |  loc_102C8 :                  103D8 C |
 loc_10332 :                  10442 C |  loc_10416 :                  10526 C |
 loc_10444 :                  10554 C |  loc_1047A :                  1058A C |
 loc_1049E :                  105AE C |  loc_104A4 :                  105B4 C |
 loc_104AE :                  105BE C |  loc_104BC :                  105CC C |
 loc_104C8 :                  105D8 C |  loc_10500 :                  10610 C |
 loc_10512 :                  10622 C |  loc_10520 :                  10630 C |
 loc_1052C :                  1063C C |  loc_1055E :                  1066E C |
 loc_10598 :                  106A8 C |  loc_105A2 :                  106B2 C |
 loc_105B4 :                  106C4 C |  loc_105C0 :                  106D0 C |
 loc_105F8 :                  10708 C |  loc_1060 :                    1060 C |
 loc_10606 :                  10716 C |  loc_10618 :                  10728 C |
 loc_10624 :                  10734 C |  loc_1068E :                  1079E C |
 loc_106AE :                  107BE C |  loc_106CC :                  107DC C |
 loc_106EA :                  107FA C |  loc_1076 :                    1076 C |
 loc_107E8 :                  108F8 C |  loc_10890 :                  109A0 C |
 loc_10894 :                  109A4 C |  loc_10A38 :                  10B48 C |
 loc_10A5C :                  10B6C C |  loc_10B0 :                    10B0 C |
 loc_10C94 :                  10DA4 C |  loc_10CC8 :                  10DD8 C |
 loc_10CD0 :                  10DE0 C |  loc_10CF0 :                  10E00 C |
 loc_10D4 :                    10D4 C |  loc_10E24 :                  10F34 C |
 loc_10E30 :                  10F40 C |  loc_10E62 :                  10F72 C |
 loc_10E6E :                  10F7E C |  loc_10EDA :                  10FEA C |
 loc_10F92 :                  110A2 C |  loc_10FC0 :                  110D0 C |
 loc_10FE0 :                  110F0 C |  loc_10FEC :                  110FC C |
 loc_11114 :                  11224 C |  loc_1114A :                  1125A C |
 loc_1159A :                  116AA C |  loc_115A8 :                  116B8 C |
 loc_115D8 :                  116E8 C |  loc_115E4 :                  116F4 C |
 loc_116D2 :                  117E2 C |  loc_116E0 :                  117F0 C |
 loc_11702 :                  11812 C |  loc_11730 :                  11840 C |
 loc_1174A :                  1185A C |  loc_1175E :                  1186E C |
 loc_11766 :                  11876 C |  loc_11772 :                  11882 C |
 loc_117FC :                  1190C C |  loc_11822 :                  11932 C |
 loc_11838 :                  11948 C |  loc_1183E :                  1194E C |
 loc_1185C :                  1196C C |  loc_1189A :                  119AA C |
 loc_118BA :                  119CA C |  loc_1192C :                  11A3C C |
 loc_119E :                    119E C |  loc_11A3C :                  11B4C C |
 loc_11AA8 :                  11BB8 C |  loc_11ADE :                  11BEE C |
 loc_11B54 :                  11C64 C |  loc_11B70 :                  11C80 C |
 loc_11B7C :                  11C8C C |  loc_11BCE :                  11CDE C |
 loc_11D02 :                  11E12 C |  loc_11D10 :                  11E20 C |
 loc_11D90 :                  11EA0 C |  loc_11DCA :                  11EDA C |
 loc_11DDC :                  11EEC C |  loc_11E34 :                  11F44 C |
 loc_11E40 :                  11F50 C |  loc_120D6 :                  121E6 C |
 loc_1214E :                  1225E C |  loc_12162 :                  12272 C |
 loc_1216A :                  1227A C |  loc_12180 :                  12290 C |
 loc_1219A :                  122AA C |  loc_121A6 :                  122B6 C |
 loc_1236A :                  1247A C |  loc_12378 :                  12488 C |
 loc_123E2 :                  124F2 C |  loc_12448 :                  12558 C |
 loc_1244C :                  1255C C |  loc_12460 :                  12570 C |
 loc_124AA :                  125BA C |  loc_124B2 :                  125C2 C |
 loc_124C2 :                  125D2 C |  loc_124DE :                  125EE C |
 loc_124F2 :                  12602 C |  loc_124FC :                  1260C C |
 loc_12520 :                  12630 C |  loc_12534 :                  12644 C |
 loc_12552 :                  12662 C |  loc_1256A :                  1267A C |
 loc_12584 :                  12694 C |  loc_12598 :                  126A8 C |
 loc_125AE :                  126BE C |  loc_125C2 :                  126D2 C |
 loc_125D4 :                  126E4 C |  loc_1283A :                  1294A C |
 loc_12872 :                  12982 C |  loc_12874 :                  12984 C |
 loc_1287C :                  1298C C |  loc_128E :                    128E C |
 loc_128E4 :                  129F4 C |  loc_128F8 :                  12A08 C |
 loc_12914 :                  12A24 C |  loc_12998 :                  12AA8 C |
 loc_12AE6 :                  12BF6 C |  loc_12B0A :                  12C1A C |
 loc_12B36 :                  12C46 C |  loc_12C58 :                  12D68 C |
 loc_12C64 :                  12D74 C |  loc_12C7E :                  12D8E C |
 loc_12CA6 :                  12DB6 C |  loc_12CB6 :                  12DC6 C |
 loc_12E0E :                  12F1E C |  loc_12E5C :                  12F70 C |
 loc_12E6 :                    12E6 C |  loc_12EA6 :                  12FBA C |
 loc_12F5A :                  1306E C |  loc_12F62 :                  13076 C |
 loc_12F6A :                  1307E C |  loc_12F70 :                  13084 C |
 loc_12FBE :                  130D2 C |  loc_12FC2 :                  130D6 C |
 loc_12FDC :                  130F0 C |  loc_12FE2 :                  130F6 C |
 loc_12FEA :                  130FE C |  loc_12FEE :                  13102 C |
 loc_1300C :                  13120 C |  loc_13024 :                  13138 C |
 loc_13060 :                  13174 C |  loc_13066 :                  1317A C |
 loc_13078 :                  1318C C |  loc_13086 :                  1319A C |
 loc_1309A :                  131AE C |  loc_130A6 :                  131BA C |
 loc_130B2 :                  131C6 C |  loc_130BA :                  131CE C |
 loc_13104 :                  13218 C |  loc_1310C :                  13220 C |
 loc_13118 :                  1322C C |  loc_13120 :                  13234 C |
 loc_1314 :                    1314 C |  loc_1317C :                  13290 C |
 loc_13188 :                  1329C C |  loc_13198 :                  132AC C |
 loc_1319E :                  132B2 C |  loc_131A6 :                  132BA C |
 loc_131AA :                  132BE C |  loc_131CC :                  132E0 C |
 loc_131F0 :                  13304 C |  loc_131FA :                  1330E C |
 loc_1320A :                  1331E C |  loc_13218 :                  1332C C |
 loc_13220 :                  13334 C |  loc_1323A :                  1334E C |
 loc_13242 :                  13356 C |  loc_13278 :                  1338C C |
 loc_132A0 :                  133B4 C |  loc_132A4 :                  133B8 C |
 loc_132C0 :                  133D4 C |  loc_132C6 :                  133DA C |
 loc_132CE :                  133E2 C |  loc_13332 :                  13446 C |
 loc_13336 :                  1344A C |  loc_13392 :                  134B2 C |
 loc_133A :                    133A C |  loc_1341C :                  1353C C |
 loc_13490 :                  135BE C |  loc_134A :                    134A C |
 loc_134AE :                  135DC C |  loc_134C4 :                  135F2 C |
 loc_13504 :                  13772 C |  loc_13534 :                  137A2 C |
 loc_1353A :                  137A8 C |  loc_13540 :                  137AE C |
 loc_1356A :                  137D8 C |  loc_13582 :                  137F0 C |
 loc_13596 :                  13804 C |  loc_13598 :                  13806 C |
 loc_1359E :                  1380C C |  loc_135F0 :                  1385E C |
 loc_13602 :                  13870 C |  loc_1361E :                  1388C C |
 loc_1364E :                  138BC C |  loc_1365C :                  138CA C |
 loc_13670 :                  138DE C |  loc_13680 :                  138EE C |
 loc_1369A :                  13908 C |  loc_136B4 :                  13922 C |
 loc_136E2 :                  13950 C |  loc_136F4 :                  13962 C |
 loc_13706 :                  13974 C |  loc_13726 :                  13994 C |
 loc_1373E :                  139AC C |  loc_13758 :                  139C6 C |
 loc_13772 :                  139E0 C |  loc_137AE :                  13A1C C |
 loc_137E4 :                  13A52 C |  loc_1380C :                  13A7A C |
 loc_138C2 :                  13B30 C |  loc_138D4 :                  13B42 C |
 loc_13926 :                  13B94 C |  loc_13966 :                  13BD4 C |
 loc_13976 :                  13BE4 C |  loc_13988 :                  13BF6 C |
 loc_13996 :                  13C04 C |  loc_139B2 :                  13C20 C |
 loc_13A70 :                  13CDE C |  loc_13A78 :                  13CE6 C |
 loc_13A9C :                  13D0A C |  loc_13AB4 :                  13D22 C |
 loc_13AC2 :                  13D30 C |  loc_13ADE :                  13D4C C |
 loc_13AF0 :                  13D5E C |  loc_13AFA :                  13D68 C |
 loc_13B1E :                  13D8C C |  loc_13B26 :                  13D94 C |
 loc_13BE :                    13BE C |  loc_13CA :                    13CA C |
 loc_13D00 :                  13F7C C |  loc_13D44 :                  13FC0 C |
 loc_13F02 :                  1417E C |  loc_13F86 :                  14202 C |
 loc_13F94 :                  14210 C |  loc_13FAC :                  14228 C |
 loc_13FF2 :                  1426E C |  loc_1403E :                  142BA C |
 loc_1404 :                    1404 C |  loc_1406A :                  142E6 C |
 loc_14082 :                  142FE C |  loc_140A6 :                  14322 C |
 loc_140AC :                  14328 C |  loc_142C :                    142C C |
 loc_1432 :                    1432 C |  loc_145C :                    145C C |
 loc_14602 :                  1487E C |  loc_1461E :                  1489A C |
 loc_14624 :                  148A0 C |  loc_1462C :                  148A8 C |
 loc_14630 :                  148AC C |  loc_146A :                    146A C |
 loc_146C0 :                  1493C C |  loc_146C6 :                  14942 C |
 loc_146CC :                  14948 C |  loc_1475E :                  149DA C |
 loc_1476A :                  149E6 C |  loc_147F2 :                  14A6E C |
 loc_147F8 :                  14A74 C |  loc_147FE :                  14A7A C |
 loc_14894 :                  14B10 C |  loc_1489A :                  14B16 C |
 loc_148A0 :                  14B1C C |  loc_14936 :                  14BB2 C |
 loc_1493C :                  14BB8 C |  loc_14942 :                  14BBE C |
 loc_14996 :                  14C12 C |  loc_1499A :                  14C16 C |
 loc_149B2 :                  14C2E C |  loc_149DE :                  14C5A C |
 loc_149EC :                  14C68 C |  loc_14A12 :                  14C8E C |
 loc_14A22 :                  14C9E C |  loc_14A3E :                  14CBA C |
 loc_14A5A :                  14CD6 C |  loc_14A66 :                  14CE2 C |
 loc_14A86 :                  14D02 C |  loc_14A94 :                  14D10 C |
 loc_14ABA :                  14D36 C |  loc_14ACA :                  14D46 C |
 loc_14AE6 :                  14D62 C |  loc_14AFC :                  14D78 C |
 loc_14B1E :                  14D9A C |  loc_14B2 :                    14B2 C |
 loc_14B2C :                  14DA8 C |  loc_14B5A :                  14DD6 C |
 loc_14B62 :                  14DDE C |  loc_14B7E :                  14DFA C |
 loc_14B9A :                  14E16 C |  loc_14BA6 :                  14E22 C |
 loc_14BC6 :                  14E42 C |  loc_14BD4 :                  14E50 C |
 loc_14C0 :                    14C0 C |  loc_14C02 :                  14E7E C |
 loc_14C0A :                  14E86 C |  loc_14C2 :                    14C2 C |
 loc_14C26 :                  14EA2 C |  loc_14C3C :                  14EB8 C |
 loc_14C5E :                  14EDA C |  loc_14C64 :                  14EE0 C |
 loc_14C6A :                  14EE6 C |  loc_14CA6 :                  14F22 C |
 loc_14CB2 :                  14F2E C |  loc_14CB8 :                  14F34 C |
 loc_14CBE :                  14F3A C |  loc_14CC4 :                  14F40 C |
 loc_14CCA :                  14F46 C |  loc_14CD0 :                  14F4C C |
 loc_14CD4 :                  14F50 C |  loc_14CD6 :                  14F52 C |
 loc_14D0 :                    14D0 C |  loc_14D14 :                  14F90 C |
 loc_14D1A :                  14F96 C |  loc_14D20 :                  14F9C C |
 loc_14D24 :                  14FA0 C |  loc_14D3C :                  14FB8 C |
 loc_14D6 :                    14D6 C |  loc_14DD0 :                  1504C C |
 loc_14DDE :                  1505A C |  loc_14DF0 :                  1506C C |
 loc_14E0A :                  15086 C |  loc_14E4 :                    14E4 C |
 loc_14EBC :                  15138 C |  loc_14F7C :                  151F8 C |
 loc_14FD6 :                  15252 C |  loc_1502 :                    1502 C |
 loc_1504A :                  152C6 C |  loc_150FE :                  1537A C |
 loc_1518 :                    1518 C |  loc_151C8 :                  15444 C |
 loc_151F0 :                  1546C C |  loc_151F8 :                  15474 C |
 loc_15224 :                  154A0 C |  loc_1530 :                    1530 C |
 loc_1538 :                    1538 C |  loc_153A :                    153A C |
 loc_15546 :                  157C2 C |  loc_155A8 :                  15824 C |
 loc_155B8 :                  15834 C |  loc_155D0 :                  1584C C |
 loc_155E2 :                  1585E C |  loc_155FA :                  15876 C |
 loc_15608 :                  15884 C |  loc_15616 :                  15892 C |
 loc_1568 :                    1568 C |  loc_156BA :                  15936 C |
 loc_1574 :                    1574 C |  loc_1598 :                    1598 C |
 loc_15A0 :                    15A0 C |  loc_15A4 :                    15A4 C |
 loc_15A46 :                  15CC2 C |  loc_15A96 :                  15D12 C |
 loc_15AC :                    15AC C |  loc_15B02 :                  15D7E C |
 loc_15B74 :                  15DF0 C |  loc_15D0 :                    15D0 C |
 loc_15D64 :                  15FE0 C |  loc_15D8 :                    15D8 C |
 loc_15DB4 :                  16030 C |  loc_15DC2 :                  1603E C |
 loc_15DD4 :                  16050 C |  loc_15DE0 :                  1605C C |
 loc_15E14 :                  16090 C |  loc_15E1E :                  1609A C |
 loc_15E30 :                  160AC C |  loc_15E3C :                  160B8 C |
 loc_15E6A :                  160E6 C |  loc_15E7C :                  160F8 C |
 loc_15E8E :                  1610A C |  loc_15EA0 :                  1611C C |
 loc_15EBE :                  1613A C |  loc_15ED0 :                  1614C C |
 loc_15EE0 :                  1615C C |  loc_15EF0 :                  1616C C |
 loc_15F02 :                  1617E C |  loc_15F3E :                  161BA C |
 loc_15F5E :                  161DA C |  loc_16068 :                  162E4 C |
 loc_160A4 :                  16320 C |  loc_160AA :                  16326 C |
 loc_160D6 :                  16352 C |  loc_160E :                    160E C |
 loc_1629A :                  16516 C |  loc_16352 :                  165CE C |
 loc_16356 :                  165D2 C |  loc_1636C :                  165E8 C |
 loc_16378 :                  165F4 C |  loc_16380 :                  165FC C |
 loc_1639A :                  16616 C |  loc_163D0 :                  1664C C |
 loc_163D8 :                  16654 C |  loc_16404 :                  16680 C |
 loc_16420 :                  1669C C |  loc_16424 :                  166A0 C |
 loc_16456 :                  166D2 C |  loc_16474 :                  166F0 C |
 loc_16480 :                  166FC C |  loc_16484 :                  16700 C |
 loc_166C8 :                  16944 C |  loc_166E0 :                  1695C C |
 loc_1670E :                  1698A C |  loc_1675E :                  169DA C |
 loc_1676 :                    1676 C |  loc_16798 :                  16A14 C |
 loc_167C2 :                  16A3E C |  loc_167DA :                  16A56 C |
 loc_16800 :                  16A7C C |  loc_16830 :                  16AAC C |
 loc_16844 :                  16AC0 C |  loc_16866 :                  16AE2 C |
 loc_16874 :                  16AF0 C |  loc_1687A :                  16AF6 C |
 loc_16898 :                  16B14 C |  loc_168A6 :                  16B22 C |
 loc_16996 :                  16C12 C |  loc_169CA :                  16C46 C |
 loc_16AA :                    16AA C |  loc_16ABC :                  16D38 C |
 loc_16AFC :                  16D78 C |  loc_16B02 :                  16D7E C |
 loc_16B1E :                  16D9A C |  loc_16B5E :                  16DDA C |
 loc_16B70 :                  16DEC C |  loc_16C0C :                  16E88 C |
 loc_16C50 :                  16ECC C |  loc_16C64 :                  16EE0 C |
 loc_16C7C :                  16EF8 C |  loc_16C82 :                  16EFE C |
 loc_16C90 :                  16F0C C |  loc_16C96 :                  16F12 C |
 loc_16CAA :                  16F26 C |  loc_16CC0 :                  16F3C C |
 loc_16CE0 :                  16F5C C |  loc_16DC :                    16DC C |
 loc_16E2 :                    16E2 C |  loc_16F76 :                  171F2 C |
 loc_16FA0 :                  1721C C |  loc_170E4 :                  17360 C |
 loc_173E :                    173E C |  loc_1758 :                    1758 C |
 loc_1768 :                    1768 C |  loc_1772 :                    1772 C |
 loc_17772 :                  17A02 C |  loc_177A :                    177A C |
 loc_177E :                    177E C |  loc_177E6 :                  17A76 C |
 loc_1783C :                  17ACC C |  loc_1784C :                  17ADC C |
 loc_1786 :                    1786 C |  loc_178A :                    178A C |
 loc_17910 :                  17BA0 C |  loc_17916 :                  17BA6 C |
 loc_1794 :                    1794 C |  loc_17950 :                  17BE0 C |
 loc_17954 :                  17BE4 C |  loc_17960 :                  17BF0 C |
 loc_17976 :                  17C06 C |  loc_1797A :                  17C0A C |
 loc_1798 :                    1798 C |  loc_17984 :                  17C14 C |
 loc_179AC :                  17C3C C |  loc_179BC :                  17C4C C |
 loc_179C2 :                  17C52 C |  loc_179DA :                  17C6A C |
 loc_179E0 :                  17C70 C |  loc_179EE :                  17C7E C |
 loc_179F6 :                  17C86 C |  loc_17A10 :                  17CA0 C |
 loc_17A16 :                  17CA6 C |  loc_17A2 :                    17A2 C |
 loc_17A3E :                  17CCE C |  loc_17A46 :                  17CD6 C |
 loc_17A50 :                  17CE0 C |  loc_17A5A :                  17CEA C |
 loc_17A8 :                    17A8 C |  loc_17A96 :                  17D26 C |
 loc_17B4 :                    17B4 C |  loc_17B60 :                  17DF0 C |
 loc_17BC6 :                  17E56 C |  loc_17BE0 :                  17E70 C |
 loc_17BFA :                  17E8A C |  loc_17C3C :                  17ECC C |
 loc_17C4 :                    17C4 C |  loc_17C68 :                  17EF8 C |
 loc_17CE :                    17CE C |  loc_17D6 :                    17D6 C |
 loc_17DC :                    17DC C |  loc_17EE :                    17EE C |
 loc_17F1E :                  181AE C |  loc_17F38 :                  181C8 C |
 loc_17F48 :                  181D8 C |  loc_17F70 :                  18200 C |
 loc_17F7E :                  1820E C |  loc_17F8E :                  1821E C |
 loc_17F92 :                  18222 C |  loc_17FA0 :                  18230 C |
 loc_17FB6 :                  18246 C |  loc_17FC :                    17FC C |
 loc_17FCA :                  1825A C |  loc_17FDC :                  1826C C |
 loc_17FE0 :                  18270 C |  loc_17FF6 :                  18286 C |
 loc_1800A :                  1829A C |  loc_1801A :                  182AA C |
 loc_1801E :                  182AE C |  loc_18046 :                  182D6 C |
 loc_1804E :                  182DE C |  loc_1806C :                  182FC C |
 loc_180A :                    180A C |  loc_180A2 :                  18332 C |
 loc_180AE :                  1833E C |  loc_180BC :                  1834C C |
 loc_180D2 :                  18362 C |  loc_180E6 :                  18376 C |
 loc_180F2 :                  18382 C |  loc_180F6 :                  18386 C |
 loc_18112 :                  183A2 C |  loc_18126 :                  183B6 C |
 loc_1812A :                  183BA C |  loc_18136 :                  183C6 C |
 loc_1814E :                  183DE C |  loc_18152 :                  183E2 C |
 loc_18160 :                  183F0 C |  loc_18166 :                  183F6 C |
 loc_1818 :                    1818 C |  loc_1818C :                  1841C C |
 loc_18196 :                  18426 C |  loc_181A0 :                  18430 C |
 loc_181B6 :                  18446 C |  loc_181F0 :                  18480 C |
 loc_1826 :                    1826 C |  loc_18302 :                  18592 C |
 loc_18334 :                  185C4 C |  loc_1833E :                  185CE C |
 loc_18374 :                  18604 C |  loc_18382 :                  18612 C |
 loc_18392 :                  18622 C |  loc_183AA :                  1863A C |
 loc_183CA :                  1865A C |  loc_183DE :                  1866E C |
 loc_183E6 :                  18676 C |  loc_183FE :                  1868E C |
 loc_1844 :                    1844 C |  loc_1844A :                  186DA C |
 loc_1845C :                  186EC C |  loc_18474 :                  18704 C |
 loc_18482 :                  18712 C |  loc_18498 :                  18728 C |
 loc_184EA :                  1877A C |  loc_184F6 :                  18786 C |
 loc_18500 :                  18790 C |  loc_1852C :                  187BC C |
 loc_18544 :                  187D4 C |  loc_1854E :                  187DE C |
 loc_1856 :                    1856 C |  loc_18566 :                  187F6 C |
 loc_1856C :                  187FC C |  loc_1857A :                  1880A C |
 loc_18582 :                  18812 C |  loc_1859C :                  1882C C |
 loc_185A2 :                  18832 C |  loc_185D2 :                  18862 C |
 loc_185DA :                  1886A C |  loc_185E4 :                  18874 C |
 loc_185EE :                  1887E C |  loc_18602 :                  18892 C |
 loc_1862A :                  188BA C |  loc_18636 :                  188C6 C |
 loc_1864A :                  188DA C |  loc_1868 :                    1868 C |
 loc_18688 :                  18918 C | *loc_186A :                    186A C |
 loc_1870A :                  1899A C |  loc_187CA :                  18A5A C |
 loc_1881E :                  18AAE C |  loc_18826 :                  18AB6 C |
 loc_1882C :                  18ABC C |  loc_1884A :                  18ADA C |
 loc_18856 :                  18AE6 C |  loc_18886 :                  18B16 C |
 loc_1895C :                  18BEC C |  loc_18968 :                  18BF8 C |
 loc_18974 :                  18C04 C |  loc_189B8 :                  18C48 C |
 loc_189CA :                  18C5A C |  loc_189EE :                  18C7E C |
 loc_189FE :                  18C8E C |  loc_18A28 :                  18CB8 C |
 loc_18A36 :                  18CC6 C |  loc_18A46 :                  18CD6 C |
 loc_18A5E :                  18CEE C |  loc_18A7C :                  18D0C C |
 loc_18A8 :                    18A8 C |  loc_18A82 :                  18D12 C |
 loc_18A88 :                  18D18 C |  loc_18A9E :                  18D2E C |
 loc_18AB4 :                  18D44 C |  loc_18AC0 :                  18D50 C |
 loc_18AFA :                  18D8A C |  loc_18B36 :                  18DC6 C |
 loc_18B40 :                  18DD0 C |  loc_18B48 :                  18DD8 C |
 loc_18B52 :                  18DE2 C |  loc_18B7C :                  18E0C C |
 loc_18B80 :                  18E10 C |  loc_18B90 :                  18E20 C |
 loc_18B96 :                  18E26 C |  loc_18BA :                    18BA C |
 loc_18BAE :                  18E3E C |  loc_18BB4 :                  18E44 C |
 loc_18BC2 :                  18E52 C |  loc_18BC6 :                  18E56 C |
 loc_18BE0 :                  18E70 C |  loc_18BE8 :                  18E78 C |
 loc_18C06 :                  18E96 C |  loc_18C10 :                  18EA0 C |
 loc_18C1A :                  18EAA C |  loc_18C2 :                    18C2 C |
 loc_18C32 :                  18EC2 C |  loc_18C56 :                  18EE6 C |
 loc_18C6C :                  18EFC C |  loc_18C78 :                  18F08 C |
 loc_18CB8 :                  18F48 C |  loc_18D6 :                    18D6 C |
 loc_18D68 :                  18FF8 C |  loc_18D8E :                  1901E C |
 loc_18DAE :                  1903E C |  loc_18DC6 :                  19056 C |
 loc_18DDA :                  1906A C |  loc_18E00 :                  19090 C |
 loc_18E16 :                  190A6 C |  loc_18E2A :                  190BA C |
 loc_18E48 :                  190D8 C |  loc_18E7A :                  1910A C |
 loc_18E88 :                  19118 C |  loc_18E96 :                  19126 C |
 loc_18EA :                    18EA C |  loc_18EAA :                  1913A C |
 loc_18EB4 :                  19144 C |  loc_18EC0 :                  19150 C |
 loc_18F38 :                  191C8 C |  loc_18F58 :                  191E8 C |
 loc_18F5C :                  191EC C |  loc_18F7E :                  1920E C |
 loc_18F9C :                  1922C C |  loc_18FA2 :                  19232 C |
 loc_18FC :                    18FC C |  loc_18FDC :                  1926C C |
 loc_19008 :                  19298 C |  loc_1906 :                    1906 C |
 loc_1909A :                  1932A C |  loc_191C :                    191C C |
 loc_191CC :                  1945C C |  loc_191DE :                  1946E C |
 loc_191F2 :                  19482 C |  loc_19202 :                  19492 C |
 loc_1923A :                  194CA C |  loc_19248 :                  194D8 C |
 loc_19258 :                  194E8 C |  loc_19270 :                  19500 C |
 loc_1928 :                    1928 C |  loc_1928E :                  1951E C |
 loc_19294 :                  19524 C |  loc_1929E :                  1952E C |
 loc_192AE :                  1953E C |  loc_192E8 :                  19578 C |
 loc_192EC :                  1957C C |  loc_19302 :                  19592 C |
 loc_1933C :                  195CC C |  loc_19344 :                  195D4 C |
 loc_19348 :                  195D8 C |  loc_19362 :                  195F2 C |
 loc_19366 :                  195F6 C |  loc_1937C :                  1960C C |
 loc_1938 :                    1938 C |  loc_1938E :                  1961E C |
 loc_1939C :                  1962C C |  loc_193B4 :                  19644 C |
 loc_193BE :                  1964E C |  loc_193CC :                  1965C C |
 loc_193D0 :                  19660 C |  loc_193E8 :                  19678 C |
 loc_193EE :                  1967E C |  loc_19406 :                  19696 C |
 loc_19410 :                  196A0 C |  loc_1941C :                  196AC C |
 loc_19424 :                  196B4 C |  loc_19438 :                  196C8 C |
 loc_19446 :                  196D6 C |  loc_1946A :                  196FA C |
 loc_19474 :                  19704 C |  loc_1947E :                  1970E C |
 loc_194A8 :                  19738 C |  loc_194AC :                  1973C C |
 loc_194BC :                  1974C C |  loc_194C2 :                  19752 C |
 loc_194DA :                  1976A C |  loc_194E0 :                  19770 C |
 loc_194EE :                  1977E C |  loc_194F2 :                  19782 C |
 loc_1950C :                  1979C C |  loc_19512 :                  197A2 C |
 loc_19552 :                  197E2 C |  loc_19556 :                  197E6 C |
 loc_1955A :                  197EA C |  loc_19570 :                  19800 C |
 loc_19572 :                  19802 C |  loc_19574 :                  19804 C |
 loc_1957E :                  1980E C |  loc_195AA :                  1983A C |
 loc_195B6 :                  19846 C |  loc_195BE :                  1984E C |
 loc_195DA :                  1986A C |  loc_1961C :                  198AC C |
 loc_1964C :                  198DC C |  loc_19652 :                  198E2 C |
 loc_19658 :                  198E8 C |  loc_19688 :                  19918 C |
 loc_196A :                    196A C |  loc_19712 :                  199A2 C |
 loc_19718 :                  199A8 C |  loc_19762 :                  199F2 C |
 loc_197AA :                  19A3A C |  loc_197D4 :                  19A64 C |
 loc_1982C :                  19ABC C |  loc_19934 :                  19BC4 C |
 loc_19954 :                  19BE4 C |  loc_1996A :                  19BFA C |
 loc_19976 :                  19C06 C |  loc_199D0 :                  19C60 C |
 loc_199E6 :                  19C76 C |  loc_19C0 :                    19C0 C |
 loc_19C36 :                  19EC6 C |  loc_19C62 :                  19EF2 C |
 loc_19C72 :                  19F02 C |  loc_19C80 :                  19F10 C |
 loc_19CC4 :                  19F54 C |  loc_19D8 :                    19D8 C |
 loc_19E20 :                  1A0B0 C |  loc_19E3E :                  1A0CE C |
 loc_19E5A :                  1A0EA C |  loc_19E90 :                  1A120 C |
 loc_19EA2 :                  1A132 C |  loc_19EA8 :                  1A138 C |
 loc_19EC6 :                  1A156 C |  loc_19F0 :                    19F0 C |
 loc_19F10 :                  1A1A0 C |  loc_19F2E :                  1A1BE C |
 loc_19F48 :                  1A1D8 C |  loc_19F50 :                  1A1E0 C |
 loc_19F6A :                  1A1FA C |  loc_19F88 :                  1A218 C |
 loc_19F96 :                  1A226 C |  loc_19F9C :                  1A22C C |
 loc_19FA6 :                  1A236 C |  loc_19FBC :                  1A24C C |
 loc_19FE6 :                  1A276 C |  loc_1A000 :                  1A290 C |
 loc_1A00A :                  1A29A C |  loc_1A020 :                  1A2B0 C |
 loc_1A02A :                  1A2BA C |  loc_1A070 :                  1A300 C |
 loc_1A074 :                  1A304 C |  loc_1A09A :                  1A32A C |
 loc_1A0A :                    1A0A C |  loc_1A0B4 :                  1A344 C |
 loc_1A0F2 :                  1A382 C |  loc_1A110 :                  1A3A0 C |
 loc_1A112 :                  1A3A2 C |  loc_1A124 :                  1A3B4 C |
 loc_1A142 :                  1A3D2 C |  loc_1A15C :                  1A3EC C |
 loc_1A166 :                  1A3F6 C |  loc_1A172 :                  1A402 C |
 loc_1A192 :                  1A422 C |  loc_1A1D0 :                  1A460 C |
 loc_1A1D4 :                  1A464 C |  loc_1A1FC :                  1A48C C |
 loc_1A210 :                  1A4A0 C |  loc_1A216 :                  1A4A6 C |
 loc_1A23A :                  1A4CA C |  loc_1A248 :                  1A4D8 C |
 loc_1A260 :                  1A4F0 C |  loc_1A264 :                  1A4F4 C |
 loc_1A280 :                  1A510 C |  loc_1A28C :                  1A51C C |
 loc_1A296 :                  1A526 C |  loc_1A2A6 :                  1A536 C |
 loc_1A2C6 :                  1A556 C |  loc_1A2E4 :                  1A574 C |
 loc_1A312 :                  1A5A2 C |  loc_1A346 :                  1A5D6 C |
 loc_1A35E :                  1A5EE C |  loc_1A376 :                  1A606 C |
 loc_1A38A :                  1A61A C |  loc_1A38E :                  1A61E C |
 loc_1A3A6 :                  1A636 C |  loc_1A3AC :                  1A63C C |
 loc_1A3D0 :                  1A660 C |  loc_1A4CE :                  1A75E C |
 loc_1A4DC :                  1A76C C |  loc_1A4EA :                  1A77A C |
 loc_1A514 :                  1A7A4 C |  loc_1A524 :                  1A7B4 C |
 loc_1A550 :                  1A7E0 C |  loc_1A55C :                  1A7EC C |
 loc_1A578 :                  1A808 C |  loc_1A57E :                  1A80E C |
 loc_1A598 :                  1A828 C |  loc_1A5B4 :                  1A844 C |
 loc_1A5D4 :                  1A864 C |  loc_1A5E4 :                  1A874 C |
 loc_1A60 :                    1A60 C |  loc_1A604 :                  1A894 C |
 loc_1A626 :                  1A8B6 C |  loc_1A646 :                  1A8D6 C |
 loc_1A656 :                  1A8E6 C |  loc_1A850 :                  1AAE0 C |
 loc_1A86C :                  1AAFC C |  loc_1A89A :                  1AB2A C |
 loc_1A954 :                  1ABE4 C |  loc_1A95E :                  1ABEE C |
 loc_1A962 :                  1ABF2 C |  loc_1A97E :                  1AC0E C |
 loc_1A982 :                  1AC12 C |  loc_1A9A6 :                  1AC36 C |
 loc_1A9C0 :                  1AC50 C |  loc_1A9E6 :                  1AC76 C |
 loc_1AA1E :                  1ACAE C |  loc_1AA34 :                  1ACC4 C |
 loc_1AC84 :                  13648 C |  loc_1AC8E :                  13652 C |
 loc_1ACA0 :                  1AF30 C |  loc_1ACF4 :                  136AC C |
 loc_1AD2E :                  1AFBE C |  loc_1AD30 :                  136D6 C |
 loc_1AD38 :                  1AFC8 C |  loc_1AD48 :                  136EE C |
 loc_1AD78 :                  1371E C |  loc_1AD88 :                  1372E C |
 loc_1AD8C :                  13732 C |  loc_1ADA :                    1ADA C |
 loc_1AE0 :                    1AE0 C |  loc_1AE98 :                  1B128 C |
 loc_1AEA :                    1AEA C |  loc_1AEB6 :                  1B146 C |
 loc_1AF1E :                  1B1AE C |  loc_1AF40 :                  1B1DA C |
 loc_1AF6 :                    1AF6 C |  loc_1AF82 :                  1B21C C |
 loc_1AF9C :                  1B236 C |  loc_1AFC2 :                  1B25C C |
 loc_1AFCA :                  1B264 C |  loc_1AFDA :                  1B274 C |
 loc_1AFE6 :                  1B280 C |  loc_1B06 :                    1B06 C |
 loc_1B130 :                  1B3CA C |  loc_1B13C :                  1B3D6 C |
 loc_1B140 :                  1B3DA C |  loc_1B144 :                  1B3DE C |
 loc_1B19E :                  1B438 C |  loc_1B1C0 :                  1B45A C |
 loc_1B20C :                  1B4A6 C |  loc_1B210 :                  1B4AA C |
 loc_1B268 :                  1B502 C |  loc_1B288 :                  1B522 C |
 loc_1B2A4 :                  1B53E C |  loc_1B2C8 :                  1B562 C |
 loc_1B2E :                    1B2E C |  loc_1B2E4 :                  1B57E C |
 loc_1B326 :                  1B5C0 C |  loc_1B350 :                  1B5EA C |
 loc_1B38 :                    1B38 C |  loc_1B4C4 :                  1B75E C |
 loc_1B4DA :                  1B774 C |  loc_1B4E8 :                  1B782 C |
*loc_1B4EA :                  1B784 C |  loc_1B52 :                    1B52 C |
 loc_1B564 :                  1B7FE C |  loc_1B5CA :                  1B864 C |
 loc_1B6F6 :                  1B990 C |  loc_1B6F8 :                  1B992 C |
 loc_1B714 :                  1B9AE C |  loc_1B730 :                  1B9CA C |
 loc_1BA78 :                  1BD12 C |  loc_1BA94 :                  1BD2E C |
 loc_1BA9A :                  1BD34 C |  loc_1BAA4 :                  1BD3E C |
 loc_1BAA8 :                  1BD42 C |  loc_1BAF2 :                  1BD8C C |
 loc_1BB06 :                  1BDA0 C |  loc_1BB14 :                  1BDAE C |
 loc_1BB1A :                  1BDB4 C |  loc_1BB22 :                  1BDBC C |
 loc_1BB42 :                  1BDDC C |  loc_1BB48 :                  1BDE2 C |
 loc_1BB50 :                  1BDEA C |  loc_1BBCE :                  1BE68 C |
 loc_1BBF4 :                  1BE8E C |  loc_1BC12 :                  1BEAC C |
 loc_1BC40 :                  1BEDA C |  loc_1BCB0 :                  1BF4A C |
 loc_1BCC6 :                  1BF60 C |  loc_1BCD4 :                  1BF6E C |
 loc_1BD46 :                  1BFE0 C |  loc_1BEA0 :                  1C13A C |
 loc_1C078 :                  1C312 C |  loc_1C08A :                  1C324 C |
 loc_1C0AE :                  1C348 C |  loc_1C0C0 :                  1C35A C |
 loc_1C0E8 :                  1C382 C |  loc_1C134 :                  1C3CE C |
 loc_1C150 :                  1C3EA C |  loc_1C188 :                  1C422 C |
 loc_1C1AE :                  1C448 C |  loc_1C1F8 :                  1C492 C |
 loc_1C234 :                  1C4CE C |  loc_1C23A :                  1C4D4 C |
 loc_1C250 :                  1C4EA C |  loc_1C25C :                  1C4F6 C |
 loc_1C298 :                  1C532 C |  loc_1C2CE :                  1C568 C |
 loc_1C2F4 :                  1C58E C |  loc_1C33C :                  1C5D6 C |
 loc_1C37A :                  1C614 C |  loc_1C3EE :                  1C688 C |
 loc_1C3FA :                  1C694 C |  loc_1C410 :                  1C6AA C |
 loc_1C41E :                  1C6B8 C |  loc_1C434 :                  1C6CE C |
 loc_1C442 :                  1C6DC C |  loc_1C458 :                  1C6F2 C |
 loc_1C466 :                  1C700 C |  loc_1C47C :                  1C716 C |
 loc_1C48A :                  1C724 C |  loc_1C4A0 :                  1C73A C |
 loc_1C4AE :                  1C748 C |  loc_1C4C4 :                  1C75E C |
 loc_1C4D2 :                  1C76C C |  loc_1C4E8 :                  1C782 C |
 loc_1C4FA :                  1C794 C |  loc_1C518 :                  1C7B2 C |
 loc_1C6AC :                  1C942 C |  loc_1C6E4 :                  1C97A C |
 loc_1C734 :                  1C9CA C |  loc_1C83E :                  1CAD4 C |
 loc_1C842 :                  1CAD8 C |  loc_1C852 :                  1CAE8 C |
 loc_1C858 :                  1CAEE C |  loc_1C85E :                  1CAF4 C |
 loc_1C8B2 :                  1CB48 C |  loc_1C8EC :                  1CB82 C |
 loc_1C8F4 :                  1CB8A C |  loc_1C8FE :                  1CB94 C |
 loc_1C92C :                  1CBC2 C |  loc_1C95A :                  1CBF0 C |
 loc_1C962 :                  1CBF8 C |  loc_1C9BA :                  1CC50 C |
 loc_1C9C4 :                  1CC5A C |  loc_1C9CC :                  1CC62 C |
 loc_1C9D6 :                  1CC6C C |  loc_1CA1E :                  1CCB4 C |
 loc_1CA26 :                  1CCBC C |  loc_1CA30 :                  1CCC6 C |
 loc_1CA5A :                  1CCF0 C |  loc_1CA90 :                  1CD26 C |
 loc_1CA98 :                  1CD2E C |  loc_1CAA2 :                  1CD38 C |
 loc_1CAA6 :                  1CD3C C |  loc_1CABC :                  1CD52 C |
 loc_1CF9E :                  1D234 C |  loc_1CFBE :                  1D254 C |
 loc_1D000 :                  1D296 C |  loc_1D018 :                  1D2AE C |
 loc_1D01C :                  1D2B2 C |  loc_1D03C :                  1D2D2 C |
 loc_1D052 :                  1D2E8 C |  loc_1D05E :                  1D2F4 C |
 loc_1D066 :                  1D2FC C |  loc_1DCE :                    1DDE C |
 loc_1DFA :                    1E0A C |  loc_1E1E :                    1E2E C |
 loc_1E4E :                    1E5E C |  loc_1E5C :                    1E6C C |
 loc_1E82 :                    1E92 C |  loc_1E98 :                    1EA8 C |
 loc_1ECC :                    1EDC C |  loc_1EF4 :                    1F04 C |
 loc_1F20 :                    1F30 C |  loc_1F44 :                    1F54 C |
 loc_1F64 :                    1F74 C |  loc_1F74 :                    1F84 C |
 loc_1F78 :                    1F88 C |  loc_1F86 :                    1F96 C |
 loc_1FAC :                    1FBC C |  loc_1FC2 :                    1FD2 C |
 loc_1FE2 :                    1FF2 C |  loc_1FF4 :                    2004 C |
 loc_2006 :                    2016 C |  loc_2020 :                    2030 C |
 loc_202A :                    203A C |  loc_2034 :                    2044 C |
 loc_203E :                    204E C |  loc_2054 :                    2064 C |
 loc_2062 :                    2072 C |  loc_206A :                    207A C |
 loc_2088 :                    2098 C |  loc_20A8 :                    20B8 C |
 loc_20B2 :                    20C2 C |  loc_20BC :                    20CC C |
 loc_2110 :                    2120 C |  loc_2128 :                    2138 C |
 loc_2144 :                    2154 C |  loc_2160 :                    2170 C |
 loc_29AC :                    29BC C |  loc_29C0 :                    29D0 C |
 loc_2C80 :                    2C90 C |  loc_2C9A :                    2CAA C |
 loc_2CC2 :                    2CD2 C |  loc_2CCA :                    2CDA C |
 loc_2CDC :                    2CEC C |  loc_2CE6 :                    2CF6 C |
 loc_2CF2 :                    2D02 C |  loc_2CFE :                    2D0E C |
 loc_2D04 :                    2D14 C |  loc_317C :                    318C C |
 loc_3210 :                    3220 C |  loc_3230 :                    3240 C |
 loc_32C :                      32C C |  loc_33B6 :                    33C6 C |
 loc_33E4 :                    33F4 C |  loc_3422 :                    3432 C |
 loc_348 :                      348 C |  loc_34FE :                    350E C |
 loc_3550 :                    3560 C |  loc_3580 :                    3590 C |
 loc_3588 :                    3598 C |  loc_3598 :                    35A8 C |
 loc_37B6 :                    37C6 C |  loc_37FC :                    380C C |
 loc_3946 :                    3956 C |  loc_39E8 :                    39F8 C |
 loc_3B10 :                    3B24 C |  loc_3B14 :                    3B28 C |
 loc_3B88 :                    3B9C C |  loc_3B98 :                    3BAC C |
 loc_3BC8 :                    3BDC C |  loc_3C1A :                    3C2E C |
 loc_3C24 :                    3C38 C |  loc_3C56 :                    3C6A C |
 loc_3CB4 :                    3CC8 C |  loc_3CBA :                    3CCE C |
 loc_3CD0 :                    3CE4 C |  loc_3CF0 :                    3D04 C |
 loc_3D12 :                    3D26 C |  loc_3D54 :                    3D68 C |
 loc_3D5E :                    3D72 C |  loc_3D8E :                    3DA2 C |
 loc_3DA2 :                    3DB6 C |  loc_3DA8 :                    3DBC C |
 loc_3DC6 :                    3DDA C |  loc_3DCC :                    3DE0 C |
 loc_3DD2 :                    3DE6 C |  loc_3E04 :                    3E18 C |
 loc_3E0E :                    3E22 C |  loc_3E2C :                    3E40 C |
 loc_3E56 :                    3E6A C |  loc_3E90 :                    3EA4 C |
 loc_3EBA :                    3ECE C |  loc_3EF4 :                    3F08 C |
 loc_3F06 :                    3F1A C |  loc_3F62 :                    3F76 C |
 loc_3F6A :                    3F7E C |  loc_3F84 :                    3F98 C |
 loc_3F9A :                    3FAE C |  loc_3FFA :                    400E C |
 loc_4022 :                    4036 C |  loc_4038 :                    404C C |
 loc_4056 :                    406A C |  loc_4184 :                    4198 C |
 loc_41A4 :                    41B8 C |  loc_41BA :                    41CE C |
 loc_421C :                    4230 C |  loc_4232 :                    4246 C |
 loc_4250 :                    4264 C |  loc_43A :                      43A C |
 loc_462 :                      462 C |  loc_463C :                    4650 C |
 loc_478 :                      478 C |  loc_47D4 :                    47E8 C |
 loc_48BE :                    48D2 C |  loc_48CC :                    48E0 C |
 loc_48CE :                    48E2 C |  loc_48E2 :                    48F6 C |
 loc_48F2 :                    4906 C |  loc_491C :                    4930 C |
 loc_4992 :                    49A6 C |  loc_49E8 :                    49FC C |
 loc_49F4 :                    4A08 C |  loc_4A18 :                    4A2C C |
 loc_4A2E :                    4A42 C |  loc_4BF6 :                    4C0A C |
 loc_4C10 :                    4C24 C |  loc_4C26 :                    4C3A C |
 loc_4C4E :                    4C62 C |  loc_4C64 :                    4C78 C |
 loc_4C74 :                    4C88 C |  loc_4C7E :                    4C92 C |
 loc_4C9A :                    4CAE C |  loc_4CA4 :                    4CB8 C |
 loc_4DF2 :                    4E06 C |  loc_4EC4 :                    4ED8 C |
 loc_4ED0 :                    4EE4 C |  loc_4EEA :                    4EFE C |
 loc_4F40 :                    4F54 C |  loc_52DA :                    52EE C |
 loc_5334 :                    5348 C |  loc_55FA :                    560E C |
 loc_5608 :                    561C C |  loc_5862 :                    586E C |
 loc_5A6A :                    5A76 C |  loc_5A70 :                    5A7C C |
 loc_5A8E :                    5A9A C |  loc_5B3E :                    5B4A C |
 loc_5B42 :                    5B4E C |  loc_5B78 :                    5B84 C |
 loc_5B80 :                    5B8C C |  loc_5B8C :                    5B98 C |
 loc_5B96 :                    5BA2 C |  loc_5C0 :                      5C0 C |
 loc_5D8 :                      5D8 C |  loc_60D0 :                    60DC C |
 loc_60D8 :                    60E4 C |  loc_60E2 :                    60EE C |
 loc_60EE :                    60FA C |  loc_60F8 :                    6104 C |
 loc_6206 :                    6212 C |  loc_628E :                    629A C |
 loc_633C :                    6348 C |  loc_6346 :                    6352 C |
 loc_6356 :                    6362 C |  loc_6384 :                    6390 C |
 loc_63C6 :                    63D2 C |  loc_6402 :                    640E C |
 loc_6426 :                    6432 C |  loc_6480 :                    648C C |
 loc_6482 :                    648E C |  loc_64CE :                    64DA C |
 loc_64E2 :                    64EE C |  loc_64F0 :                    64FC C |
 loc_64FE :                    650A C |  loc_653C :                    6548 C |
 loc_6576 :                    6582 C |  loc_65AA :                    65B6 C |
 loc_65CC :                    65D8 C |  loc_65D6 :                    65E2 C |
 loc_65E4 :                    65F0 C |  loc_65F6 :                    6602 C |
 loc_6610 :                    661C C |  loc_662A :                    6636 C |
 loc_664A :                    6656 C |  loc_6656 :                    6662 C |
 loc_665C :                    6668 C |  loc_666C :                    6678 C |
 loc_6684 :                    6690 C |  loc_6696 :                    66A2 C |
 loc_66A8 :                    66B4 C |  loc_66AE :                    66BA C |
 loc_66C0 :                    66CC C |  loc_66CC :                    66D8 C |
 loc_66F0 :                    66FC C |  loc_66F6 :                    6702 C |
 loc_6700 :                    670C C |  loc_6720 :                    672C C |
 loc_6724 :                    6730 C |  loc_6760 :                    676C C |
 loc_6796 :                    67A2 C |  loc_679C :                    67A8 C |
 loc_67CA :                    67D6 C |  loc_680C :                    6818 C |
 loc_683C :                    6848 C |  loc_687E :                    688A C |
 loc_6908 :                    6914 C |  loc_6922 :                    692E C |
 loc_6938 :                    6944 C |  loc_6972 :                    697E C |
 loc_698E :                    699A C |  loc_69BA :                    69C6 C |
 loc_69BE :                    69CA C |  loc_69EE :                    69FA C |
 loc_6A3E :                    6A4A C |  loc_6AAC :                    6AB8 C |
 loc_6AE2 :                    6AEE C |  loc_6B0E :                    6B1A C |
 loc_6B4E :                    6B5A C |  loc_6B6E :                    6B7A C |
 loc_6B90 :                    6B9C C |  loc_6C82 :                    6C8E C |
 loc_6DA0 :                    6DAC C |  loc_6DAC :                    6DB8 C |
 loc_6DC4 :                    6DD0 C |  loc_6E8E :                    6E9A C |
 loc_6E98 :                    6EA4 C |  loc_6EB0 :                    6EBC C |
 loc_6ED0 :                    6EDC C |  loc_6F28 :                    6F34 C |
 loc_6F4A :                    6F56 C |  loc_6FBA :                    6FC6 C |
 loc_6FEA :                    6FF6 C |  loc_6FF8 :                    7004 C |
 loc_702E :                    703A C |  loc_703C :                    7048 C |
 loc_7050 :                    705C C |  loc_70D0 :                    70DC C |
 loc_7144 :                    7150 C |  loc_71B5A :                  728F8 C |
 loc_71B82 :                  72920 C |  loc_71B9E :                  7293C C |
 loc_71BA8 :                  72946 C |  loc_71BB2 :                  72950 C |
 loc_71BBC :                  7295A C |  loc_71BC8 :                  72966 C |
 loc_71BD4 :                  72972 C |  loc_71BDA :                  72978 C |
 loc_71BE6 :                  72984 C |  loc_71BEC :                  7298A C |
 loc_71BF8 :                  72996 C |  loc_71C04 :                  729A2 C |
 loc_71C10 :                  729AE C |  loc_71C16 :                  729B4 C |
 loc_71C22 :                  729C0 C |  loc_71C38 :                  729D6 C |
 loc_71C44 :                  729E2 C |  loc_71C5E :                  729FC C |
 loc_71C6E :                  72A0C C |  loc_71C84 :                  72A22 C |
 loc_71C88 :                  72A26 C |  loc_71CAC :                  72A4A C |
 loc_71CE0 :                  72A7E C |  loc_71CF4 :                  72A92 C |
 loc_71D04 :                  72AA2 C |  loc_71D1A :                  72AB8 C |
 loc_71D46 :                  72AE4 C |  loc_71D4E :                  72AEC C |
 loc_71D58 :                  72AF6 C |  loc_71DBE :                  72B5C C |
 loc_71DDA :                  72B78 C |  loc_71DE2 :                  72B80 C |
 loc_71DFE :                  72B9C C |  loc_71E24 :                  72BC2 C |
 loc_71E4A :                  72BE8 C |  loc_71E50 :                  72BEE C |
 loc_71E6A :                  72C08 C |  loc_71E7C :                  72C1A C |
 loc_71E94 :                  72C32 C |  loc_71EA0 :                  72C3E C |
 loc_71EB8 :                  72C56 C |  loc_71EC :                    71F8 C |
 loc_71EC4 :                  72C62 C |  loc_71EDC :                  72C7A C |
 loc_71EFE :                  72C9C C |  loc_71F12 :                  72CB0 C |
 loc_71F2C :                  72CCA C |  loc_71F3E :                  72CDC C |
 loc_71FE6 :                  72DA4 C |  loc_71FF8 :                  72DB6 C |
 loc_72012 :                  72DD0 C |  loc_72024 :                  72DE2 C |
 loc_7202C :                  72DEA C |  loc_72068 :                  72E26 C |
 loc_72098 :                  72E56 C |  loc_720D8 :                  72E96 C |
 loc_72114 :                  72ED2 C |  loc_72126 :                  72EE4 C |
 loc_72154 :                  72F12 C |  loc_7215A :                  72F18 C |
 loc_7216E :                  72F2C C |  loc_72170 :                  72F2E C |
 loc_7217C :                  72F3A C |  loc_7218E :                  72F4C C |
 loc_7219A :                  72F58 C |  loc_721A0 :                  72F5E C |
 loc_721AC :                  72F6A C |  loc_721B6 :                  72F74 C |
 loc_721EE :                  72FAC C |  loc_72228 :                  72FE6 C |
 loc_72244 :                  73002 C |  loc_7226E :                  7302C C |
 loc_72276 :                  73034 C |  loc_722A8 :                  73066 C |
 loc_722B8 :                  73076 C |  loc_722C6 :                  73084 C |
 loc_72348 :                  73106 C |  loc_7235A :                  73118 C |
 loc_72364 :                  73122 C |  loc_72368 :                  73126 C |
 loc_72396 :                  73154 C |  loc_723A6 :                  73164 C |
 loc_723EA :                  731A8 C |  loc_72416 :                  731D4 C |
 loc_72428 :                  731E6 C |  loc_7243C :                  731FA C |
 loc_7245A :                  73218 C |  loc_72472 :                  73230 C |
 loc_724AE :                  7326C C |  loc_72510 :                  732CE C |
 loc_72524 :                  732E2 C |  loc_72534 :                  732F2 C |
 loc_72538 :                  732F6 C |  loc_72542 :                  73300 C |
 loc_72558 :                  73316 C |  loc_72560 :                  7331E C |
 loc_7256E :                  7332C C |  loc_72584 :                  73342 C |
 loc_72586 :                  73344 C |  loc_725B6 :                  73374 C |
 loc_725E4 :                  733A2 C |  loc_7261A :                  733D8 C |
 loc_7263E :                  733FC C |  loc_7266A :                  73428 C |
 loc_72688 :                  73446 C |  loc_7269E :                  7345C C |
 loc_726AA :                  73468 C |  loc_726B4 :                  73472 C |
 loc_726C8 :                  73486 C |  loc_726CC :                  7348A C |
 loc_726D6 :                  73494 C |  loc_726E2 :                  734A0 C |
 loc_7270A :                  734C8 C |  loc_72716 :                  734D4 C |
 loc_72746 :                  73504 C |  loc_7275A :                  73518 C |
 loc_7277C :                  7353A C |  loc_72866 :                  73624 C |
 loc_72880 :                  7363E C |  loc_72890 :                  7364E C |
 loc_728A4 :                  73662 C |  loc_728CA :                  73688 C |
 loc_72904 :                  736C2 C |  loc_72920 :                  736DE C |
 loc_7292E :                  736EC C |  loc_72960 :                  7371E C |
 loc_7297C :                  7373A C |  loc_7298C :                  7374A C |
 loc_7299A :                  73758 C |  loc_729A6 :                  73764 C |
 loc_72A64 :                  73822 C |  loc_72ACC :                  7388A C |
 loc_72AEC :                  738AA C |  loc_72AF2 :                  738B0 C |
 loc_72AF8 :                  738B6 C |  loc_72B0 :                    72BC C |
 loc_72B14 :                  738D2 C |  loc_72B1E :                  738DC C |
 loc_72B3A :                  738F8 C |  loc_72B5C :                  7391A C |
 loc_72B6 :                    72C2 C |  loc_72B66 :                  73924 C |
 loc_72B78 :                  73936 C |  loc_72B9E :                  7395C C |
 loc_72BA4 :                  73962 C |  loc_72BAE :                  7396C C |
 loc_72BB4 :                  73972 C |  loc_72BBE :                  7397C C |
 loc_72BC6 :                  73984 C |  loc_72BD0 :                  7398E C |
 loc_72BDA :                  73998 C |  loc_72BE6 :                  739A4 C |
 loc_72BEE :                  739AC C |  loc_72BF4 :                  739B2 C |
 loc_72C2 :                    72CE C |  loc_72C22 :                  739E0 C |
 loc_72C26 :                  739E4 C |  loc_72C56 :                  73A14 C |
 loc_72C5C :                  73A1A C |  loc_72C72 :                  73A30 C |
 loc_72C8C :                  73A4A C |  loc_72C96 :                  73A54 C |
 loc_72CD8 :                  73A96 C |  loc_72CE0 :                  73A9E C |
 loc_72CE6 :                  73AA4 C |  loc_72D02 :                  73AC0 C |
 loc_72D12 :                  73AD0 C |  loc_72D30 :                  73AEE C |
 loc_72D52 :                  73B10 C |  loc_72D58 :                  73B16 C |
 loc_72D74 :                  73B32 C |  loc_72D78 :                  73B36 C |
 loc_72DA8 :                  73B66 C |  loc_72DB8 :                  73B76 C |
 loc_72DC8 :                  73B86 C |  loc_72DCC :                  73B8A C |
 loc_72DE0 :                  73B9E C |  loc_72DEA :                  73BA8 C |
 loc_72E02 :                  73BC0 C |  loc_72E06 :                  73BC4 C |
 loc_72E20 :                  73BDE C |  loc_72E26 :                  73BE4 C |
 loc_72E2C :                  73BEA C |  loc_72E38 :                  73BF6 C |
 loc_72E48 :                  73C06 C |  loc_72E52 :                  73C10 C |
 loc_72E64 :                  73C22 C |  loc_72F4 :                    7300 C |
 loc_7312 :                    731E C |  loc_7320 :                    732C C |
 loc_73B8 :                    73C4 C |  loc_74AE :                    74BA C |
 loc_74DC :                    74E8 C |  loc_7512 :                    751E C |
 loc_754A :                    7556 C |  loc_75B6 :                    75C2 C |
 loc_75E0 :                    75EC C |  loc_765C :                    7668 C |
 loc_76A4 :                    76B0 C |  loc_791E :                    792A C |
 loc_7A8E :                    7A9A C |  loc_7A92 :                    7A9E C |
 loc_7AD4 :                    7AE0 C |  loc_7B78 :                    7B84 C |
 loc_7B9C :                    7BA8 C |  loc_7BB6 :                    7BC2 C |
 loc_7BCE :                    7BDA C |  loc_7D78 :                    7D84 C |
 loc_7EE0 :                    7EEC C |  loc_7F06 :                    7F12 C |
 loc_8042 :                    804E C |  loc_8048 :                    8054 C |
 loc_82D0 :                    82DC C |  loc_82FC :                    8308 C |
 loc_8402 :                    840E C |  loc_842E :                    843A C |
 loc_8458 :                    8464 C |  loc_846C :                    8478 C |
 loc_847A :                    8486 C |  loc_8486 :                    8492 C |
 loc_84AA :                    84B6 C |  loc_84B2 :                    84BE C |
 loc_84EE :                    84FA C |  loc_84F2 :                    84FE C |
 loc_854E :                    855A C |  loc_8918 :                    8924 C |
 loc_899A :                    89A6 C |  loc_8A7C :                    8A88 C |
 loc_8A82 :                    8A8E C |  loc_8A92 :                    8A9E C |
 loc_8AA8 :                    8AB4 C |  loc_8AB6 :                    8AC2 C |
 loc_8AC4 :                    8AD0 C |  loc_8B30 :                    8B3C C |
 loc_8B3C :                    8B48 C |  loc_8B44 :                    8B50 C |
 loc_8B48 :                    8B54 C |  loc_8C0A :                    8C16 C |
 loc_8C1A :                    8C26 C |  loc_8CA4 :                    8CB0 C |
 loc_90C0 :                    90CC C |  loc_911C :                    9128 C |
 loc_912A :                    9136 C |  loc_9180 :                    918C C |
 loc_9184 :                    9190 C |  loc_91AE :                    91BA C |
 loc_91C0 :                    91CC C |  loc_91FC :                    9208 C |
 loc_9212 :                    921E C |  loc_9224 :                    9230 C |
 loc_923C :                    9248 C |  loc_9240 :                    924C C |
 loc_925C :                    9268 C |  loc_9260 :                    926C C |
 loc_927C :                    9288 C |  loc_9280 :                    928C C |
 loc_92B6 :                    92C2 C |  loc_92BA :                    92C6 C |
 loc_92D6 :                    92E2 C |  loc_9306 :                    9312 C |
 loc_9310 :                    931C C |  loc_9314 :                    9320 C |
 loc_932E :                    933A C |  loc_9332 :                    933E C |
 loc_936C :                    9378 C |  loc_9370 :                    937C C |
 loc_93A0 :                    93AC C |  loc_93AA :                    93B6 C |
 loc_93C0 :                    93CC C |  loc_93C4 :                    93D0 C |
 loc_93EC :                    93F8 C |  loc_9640 :                    964C C |
 loc_9654 :                    9660 C |  loc_966E :                    967A C |
 loc_96A4 :                    96B0 C |  loc_98AA :                    98B6 C |
 loc_9B80 :                    9B8C C |  loc_9BBA :                    9BC6 C |
 loc_9C02 :                    9C0E C |  loc_9C0E :                    9C1A C |
 loc_9CA4 :                    9CB0 C |  loc_9CDE :                    9CEA C |
 loc_9D62 :                    9D6E C |  loc_A1BC :                    A1C8 C |
 loc_A1EC :                    A1F8 C |  loc_A20A :                    A216 C |
 loc_A220 :                    A22C C |  loc_A230 :                    A23C C |
 loc_A236 :                    A242 C |  loc_A246 :                    A252 C |
 loc_A25C :                    A268 C |  loc_A26A :                    A276 C |
 loc_A4DC :                    A4F8 C |  loc_A4E2 :                    A4FE C |
 loc_A4E6 :                    A502 C |  loc_A4EA :                    A506 C |
 loc_AD6A :                    AE54 C |  loc_AD78 :                    AE62 C |
 loc_AD84 :                    AE6E C |  loc_ADA4 :                    AE8E C |
 loc_AE40 :                    AF2A C |  loc_AF8E :                    B078 C |
 loc_AFF2 :                    B0DC C |  loc_B010 :                    B0FA C |
 loc_B01C :                    B106 C |  loc_B07A :                    B164 C |
 loc_B086 :                    B170 C |  loc_B0C6 :                    B1B0 C |
*loc_B0E8 :                    B1D2 C |  loc_B0F4 :                    B1DE C |
 loc_B10 :                      B10 C |  loc_B238 :                    B322 C |
 loc_B2B0 :                    B39A C |  loc_B3E :                      B3E C |
 loc_B40C :                    B4F6 C |  loc_B42 :                      B42 C |
 loc_B480 :                    B56A C |  loc_B514 :                    B5FE C |
 loc_B526 :                    B610 C |  loc_B53E :                    B628 C |
 loc_B54E :                    B638 C |  loc_B582 :                    B66C C |
 loc_B594 :                    B67E C |  loc_B5A4 :                    B68E C |
 loc_B5AA :                    B694 C |  loc_B5E :                      B5E C |
 loc_B5E0 :                    B6CA C |  loc_B5EA :                    B6D4 C |
 loc_B5EE :                    B6D8 C |  loc_B64 :                      B64 C |
 loc_B6CE :                    B7B8 C |  loc_B6E0 :                    B7CA C |
 loc_B76A :                    B854 C |  loc_B798 :                    B882 C |
 loc_B7E2 :                    B8CC C |  loc_B7FE :                    B8E8 C |
 loc_B872 :                    B95C C |  loc_B88 :                      B88 C |
 loc_B892 :                    B97C C |  loc_B8A0 :                    B98A C |
 loc_B8A8 :                    B992 C |  loc_B902 :                    B9EC C |
 loc_B91C :                    BA06 C |  loc_B938 :                    BA22 C |
 loc_B97C :                    BA66 C |  loc_B98C :                    BA76 C |
 loc_B996 :                    BA80 C |  loc_B9A :                      B9A C |
 loc_BA40 :                    BB2A C |  loc_BA52 :                    BB3C C |
 loc_BA7A :                    BB64 C |  loc_BA8E :                    BB78 C |
 loc_BADA :                    BBC4 C |  loc_BAEC :                    BBD6 C |
 loc_BB08 :                    BBF2 C |  loc_BB3C :                    BC26 C |
 loc_BB6 :                      BB6 C |  loc_BBA :                      BBA C |
 loc_BC8 :                      BC8 C |  loc_BD60 :                    BE4A C |
 loc_BDB2 :                    BE9C C |  loc_BDBE :                    BEA8 C |
 loc_BDC8 :                    BEB2 C |  loc_BDD6 :                    BEC0 C |
 loc_BDDE :                    BEC8 C |  loc_BE4E :                    BF38 C |
 loc_BE5E :                    BF48 C |  loc_BE80 :                    BF6A C |
 loc_BE84 :                    BF6E C |  loc_BE9A :                    BF84 C |
 loc_BE9E :                    BF88 C |  loc_BF16 :                    C000 C |
 loc_BF6E :                    C058 C |  loc_BFC6 :                    C0B0 C |
 loc_BFE :                      BFE C |  loc_BFE6 :                    C0D0 C |
 loc_C016 :                    C100 C |  loc_C028 :                    C112 C |
 loc_C02C :                    C116 C |  loc_C046 :                    C130 C |
 loc_C056 :                    C140 C |  loc_C09E :                    C188 C |
 loc_C0A0 :                    C18A C |  loc_C0BC :                    C1A6 C |
 loc_C0D6 :                    C1C0 C |  loc_C0E6 :                    C1D0 C |
 loc_C104 :                    C1EE C |  loc_C186 :                    C270 C |
 loc_C1A4 :                    C28E C |  loc_C1AA :                    C294 C |
 loc_C1F2 :                    C2DC C |  loc_C218 :                    C302 C |
 loc_C22 :                      C22 C |  loc_C230 :                    C31A C |
 loc_C268 :                    C352 C |  loc_C294 :                    C37E C |
 loc_C2D8 :                    C3C2 C |  loc_C2E0 :                    C3CA C |
 loc_C32 :                      C32 C |  loc_C36 :                      C36 C |
 loc_C3C8 :                    C4B2 C |  loc_C44 :                      C44 C |
 loc_C4EC :                    C5D6 C |  loc_C50C :                    C5F6 C |
 loc_C5CA :                    C6B4 C |  loc_C5E :                      C5E C |
 loc_C5FE :                    C6E8 C |  loc_C610 :                    C6FA C |
 loc_C61A :                    C704 C |  loc_C64 :                      C64 C |
 loc_C6E :                      C6E C |  loc_C6EA :                    C7D4 C |
 loc_C76 :                      C76 C |  loc_C766 :                    C850 C |
 loc_C842 :                    C92C C |  loc_C85A :                    C944 C |
 loc_C86C :                    C956 C |  loc_C8C4 :                    C9AE C |
 loc_C91A :                    CA04 C |  loc_CB0 :                      CB0 C |
 loc_CD4 :                      CD4 C |  loc_CF20 :                    D02A C |
 loc_CFA4 :                    D0AE C |  loc_CFC6 :                    D0D0 C |
 loc_D268 :                    D372 C |  loc_D348 :                    D452 C |
 loc_D358 :                    D462 C |  loc_D362 :                    D46C C |
 loc_D368 :                    D472 C |  loc_D378 :                    D482 C |
*loc_D37C :                    D486 C |  loc_D50 :                      D50 C |
 loc_D646 :                    D750 C |  loc_D66A :                    D774 C |
 loc_D672 :                    D77C C |  loc_D6DE :                    D7E8 C |
 loc_D6E8 :                    D7F2 C |  loc_D700 :                    D80A C |
 loc_D71C :                    D826 C |  loc_D720 :                    D82A C |
 loc_D726 :                    D830 C |  loc_D72E :                    D838 C |
 loc_D748 :                    D852 C |  loc_D78E :                    D898 C |
 loc_D796 :                    D8A0 C |  loc_D79E :                    D8A8 C |
 loc_D7DC :                    D8E6 C |  loc_D7E4 :                    D8EE C |
 loc_D822 :                    D92C C |  loc_D82A :                    D934 C |
 loc_D876 :                    D980 C |  loc_D93C :                    DA46 C |
 loc_D944 :                    DA4E C |  loc_D952 :                    DA5C C |
 loc_D956 :                    DA60 C |  loc_D964 :                    DA6E C |
 loc_D972 :                    DA7C C |  loc_D976 :                    DA80 C |
 loc_D9A6 :                    DAB0 C |  loc_D9BC :                    DAC6 C |
 loc_D9C6 :                    DAD0 C |  loc_D9D0 :                    DADA C |
 loc_D9D2 :                    DADC C |  loc_D9DE :                    DAE8 C |
 loc_D9EC :                    DAF6 C |  loc_D9F0 :                    DAFA C |
 loc_D9F6 :                    DB00 C |  loc_DA02 :                    DB0C C |
 loc_DA10 :                    DB1A C |  loc_DA16 :                    DB20 C |
 loc_DA24 :                    DB2E C |  loc_DA32 :                    DB3C C |
 loc_DA36 :                    DB40 C |  loc_DA3C :                    DB46 C |
 loc_DA6 :                      DA6 C |  loc_DA80 :                    DB8A C |
 loc_DA94 :                    DB9E C |  loc_DAB0 :                    DBBA C |
 loc_DAE :                      DAE C |  loc_DB54 :                    DC5E C |
 loc_DB66 :                    DC70 C |  loc_DB72 :                    DC7C C |
 loc_DC0C :                    DD16 C |  loc_DC36 :                    DD40 C |
 loc_DC56 :                    DD60 C |  loc_DCA4 :                    DDAE C |
 loc_DDEA :                    DEF4 C |  loc_DE42 :                    DF4C C |
 loc_DEA2 :                    DFAC C |  loc_DF04 :                    E00E C |
 loc_E0D2 :                    E1DC C |  loc_E0F8 :                    E202 C |
 loc_E35A :                    E464 C |  loc_E41E :                    E528 C |
 loc_E57A :                    E684 C |  loc_E64 :                      E64 C |
 loc_E72 :                      E72 C |  loc_E7A :                      E7A C |
 loc_E888 :                    E992 C |  loc_E8A8 :                    E9B2 C |
 loc_EB4 :                      EB4 C |  loc_EC70 :                    ED7A C |
 loc_EC86 :                    ED90 C |  loc_ECD0 :                    EDE0 C |
 loc_ED8 :                      ED8 C |  loc_EDCC :                    EEDC C |
 loc_EE18 :                    EF28 C |  loc_EE3E :                    EF4E C |
 loc_EEA4 :                    EFB4 C | *loc_EEE :                      EEE C |
 loc_EF0A :                    F01A C |  loc_EF10 :                    F020 C |
 loc_EFFC :                    F10C C |  loc_F026 :                    F136 C |
 loc_F02E :                    F13E C |  loc_F04C :                    F15C C |
 loc_F0C8 :                    F1D8 C |  loc_F0F4 :                    F204 C |
 loc_F54 :                      F54 C |  loc_F828 :                    F938 C |
 loc_F82C :                    F93C C |  loc_F836 :                    F946 C |
 loc_F8A :                      F8A C |  loc_F9A :                      F9A C |
 loc_F9FE :                    FB0E C |  loc_FA12 :                    FB22 C |
 loc_FA44 :                    FB54 C |  loc_FA58 :                    FB68 C |
 loc_FA6 :                      FA6 C |  loc_FA94 :                    FBA4 C |
 loc_FAC8 :                    FBD8 C |  loc_FAD0 :                    FBE0 C |
 loc_FAE :                      FAE C |  loc_FB0E :                    FC1E C |
 loc_FB36 :                    FC46 C |  loc_FB44 :                    FC54 C |
 loc_FB5E :                    FC6E C |  loc_FB64 :                    FC74 C |
 loc_FB70 :                    FC80 C |  loc_FB8C :                    FC9C C |
 loc_FB92 :                    FCA2 C |  loc_FBA0 :                    FCB0 C |
 loc_FBAC :                    FCBC C |  loc_FBB0 :                    FCC0 C |
 loc_FBBC :                    FCCC C |  loc_FBD2 :                    FCE2 C |
 loc_FBD6 :                    FCE6 C |  loc_FBEE :                    FCFE C |
 loc_FC28 :                    FD38 C |  loc_FC4E :                    FD5E C |
 loc_FC84 :                    FD94 C |  loc_FD98 :                    FEA8 C |
 loc_FE44 :                    FF54 C |  loc_FE60 :                    FF70 C |
 loc_FF26 :                   10036 C |  loc_FFE2 :                   100F2 C |
 locret_1002E :               1013E C |  locret_10180 :               10290 C |
 locret_101C6 :               102D6 C |  locret_101F4 :               10304 C |
 locret_10578 :               10688 C |  locret_106C :                 106C C |
 locret_10BD4 :               10CE4 C |  locret_10C0C :               10D1C C |
 locret_10CFA :               10E0A C |  locret_10FA0 :               110B0 C |
 locret_10FBE :               110CE C |  locret_10FDE :               110EE C |
 locret_11038 :               11148 C |  locret_11790 :               118A0 C |
 locret_11898 :               119A8 C |  locret_11938 :               11A48 C |
 locret_119C :                 119C C |  locret_11A96 :               11BA6 C |
 locret_11AD0 :               11BE0 C |  locret_11B5E :               11C6E C |
 locret_11DBC :               11ECC C |  locret_120D4 :               121E4 C |
 locret_12106 :               12216 C |  locret_12126 :               12236 C |
 locret_12138 :               12248 C |  locret_12160 :               12270 C |
 locret_1217E :               1228E C |  locret_121C0 :               122D0 C |
 locret_12D80 :               12E90 C |  locret_1307C :               13190 C |
 locret_130E8 :               131FC C |  locret_1314E :               13262 C |
 locret_132D2 :               133E6 C |  locret_13302 :               13416 C |
 locret_133E8 :               13508 C |  locret_1348E :               135BC C |
 locret_134C2 :               135F0 C |  locret_134D2 :               13600 C |
 locret_13502 :               13770 C |  locret_13508 :               13776 C |
 locret_13544 :               137B2 C |  locret_13580 :               137EE C |
 locret_135A2 :               13810 C |  locret_1367E :               138EC C |
 locret_136B2 :               13920 C |  locret_136E0 :               1394E C |
 locret_1373C :               139AA C |  locret_13770 :               139DE C |
 locret_1379E :               13A0C C |  locret_13860 :               13ACE C |
 locret_13900 :               13B6E C |  locret_13914 :               13B82 C |
 locret_139C2 :               13C30 C |  locret_13C96 :               13F12 C |
 locret_13E1A :               14096 C |  locret_1408C :               14308 C |
 locret_146BE :               1493A C |  locret_146E6 :               14962 C |
 locret_1470A :               14986 C |  locret_147F0 :               14A6C C |
 locret_14892 :               14B0E C |  locret_14934 :               14BB0 C |
 locret_14DE6 :               15062 C |  locret_14E16 :               15092 C |
 locret_14E4E :               150CA C |  locret_14F06 :               15182 C |
 locret_14FD4 :               15250 C |  locret_15098 :               15314 C |
 locret_15246 :               154C2 C |  locret_155B6 :               15832 C |
 locret_15606 :               15882 C |  locret_15622 :               1589E C |
 locret_1572E :               159AA C |  locret_15A60 :               15CDC C |
 locret_15AB0 :               15D2C C |  locret_15B04 :               15D80 C |
 locret_15B24 :               15DA0 C |  locret_15B76 :               15DF2 C |
 locret_15B96 :               15E12 C |  locret_15F5C :               161D8 C |
 locret_1640 :                 1640 C |  locret_1675C :               169D8 C |
 locret_16796 :               16A12 C |  locret_16950 :               16BCC C |
 locret_16B5C :               16DD8 C |  locret_16DA :                 16DA C |
 locret_16F90 :               1720C C |  locret_170F6 :               17372 C |
 locret_1784A :               17ADA C |  locret_178A2 :               17B32 C |
 locret_179AA :               17C3A C |  locret_17C66 :               17EF6 C |
 locret_17F8C :               1821C C |  locret_18390 :               18620 C |
 locret_1849C :               1872C C |  locret_184F4 :               18784 C |
 locret_1852A :               187BA C |  locret_18780 :               18A10 C |
 locret_187EE :               18A7E C |  locret_1887E :               18B0E C |
 locret_189A :                 189A C |  locret_18A44 :               18CD4 C |
 locret_18DC4 :               19054 C |  locret_18EA8 :               19138 C |
 locret_19256 :               194E6 C |  locret_19472 :               19702 C |
 locret_19588 :               19818 C |  locret_1990 :                 1990 C |
 locret_1A01E :               1A2AE C |  locret_1A190 :               1A420 C |
 locret_1A3A :                 1A3A C |  locret_1A602 :               1A892 C |
 locret_1A674 :               1A904 C |  locret_1A80 :                 1A80 C |
 locret_1AA1C :               1ACAC C |  locret_1AC6 :                 1AC6 C |
 locret_1AC60 :               1AEF0 C |  locret_1AC8C :               13650 C |
 locret_1ACF8 :               1AF88 C |  locret_1AD48 :               1AFD8 C |
 locret_1AEF2 :               1B182 C |  locret_1AF2E :               1B1BE C |
 locret_1AF68 :               1B202 C |  locret_1B4CE :               1B768 C |
 locret_1B530 :               1B7CA C |  locret_1B566 :               1B800 C |
 locret_1B596 :               1B830 C |  locret_1B5CC :               1B866 C |
 locret_1B60C :               1B8A6 C |  locret_1B64 :                 1B64 C |
 locret_1B640 :               1B8DA C |  locret_1BB54 :               1BDEE C |
 locret_1BBB4 :               1BE4E C |  locret_1BBDE :               1BE78 C |
 locret_1BD44 :               1BFDE C |  locret_1BEAC :               1C146 C |
 locret_1C10C :               1C3A6 C |  locret_1C1EA :               1C484 C |
 locret_1C2A0 :               1C53A C |  locret_1C3B4 :               1C64E C |
 locret_1C6B6 :               1C94C C |  locret_1E24 :                 1E34 C |
 locret_1F4A :                 1F5A C |  locret_3C28 :                 3C3C C |
 locret_3C5A :                 3C6E C |  locret_3CF4 :                 3D08 C |
 locret_3E1A :                 3E2E C |  locret_3EF2 :                 3F06 C |
 locret_3F0A :                 3F1E C |  locret_3F7A :                 3F8E C |
 locret_3FBE :                 3FD2 C |  locret_407E :                 4092 C |
 locret_41C4 :                 41D8 C |  locret_4272 :                 4286 C |
 locret_49E6 :                 49FA C |  locret_5480 :                 5494 C |
 locret_5614 :                 5628 C |  locret_5AA0 :                 5AAC C |
 locret_5BBA :                 5BC6 C |  locret_65B0 :                 65BC C |
 locret_6766 :                 6772 C |  locret_67D0 :                 67DC C |
 locret_6812 :                 681E C |  locret_6842 :                 684E C |
 locret_6884 :                 6890 C |  locret_6952 :                 695E C |
 locret_69F2 :                 69FE C |  locret_6A80 :                 6A8C C |
 locret_6AD6 :                 6AE2 C |  locret_6C1E :                 6C2A C |
 locret_6D10 :                 6D1C C |  locret_6DAA :                 6DB6 C |
 locret_6E08 :                 6E14 C |  locret_6E3A :                 6E46 C |
 locret_6E96 :                 6EA2 C |  locret_6EE8 :                 6EF4 C |
 locret_6F62 :                 6F6E C |  locret_6F64 :                 6F70 C |
 locret_6F8C :                 6F98 C |  locret_6FE8 :                 6FF4 C |
 locret_702C :                 7038 C |  locret_704E :                 705A C |
 locret_7072 :                 707E C |  locret_7088 :                 7094 C |
 locret_70E8 :                 70F4 C |  locret_7130 :                 713C C |
 locret_715C :                 7168 C |  locret_71A2 :                 71AE C |
 locret_71CAA :               72A48 C |  locret_71CE :                 71DA C |
 locret_71D9C :               72B3A C |  locret_71DC4 :               72B62 C |
 locret_71E16 :               72BB4 C |  locret_71E48 :               72BE6 C |
 locret_71F4A :               72CE8 C |  locret_71F8C :               72D2A C |
 locret_7200 :                 720C C |  locret_722C4 :               73082 C |
 locret_723C6 :               73184 C |  locret_7242 :                 724E C |
 locret_724E4 :               732A2 C |  locret_726FC :               734BA C |
 locret_72714 :               734D2 C |  locret_72720 :               734DE C |
 locret_727A :                 7286 C |  locret_7291E :               736DC C |
 locret_7298 :                 72A4 C |  locret_7298A :               73748 C |
 locret_729B4 :               73772 C |  locret_72AEA :               738A8 C |
 locret_72CAA :               73A68 C |  locret_72D16 :               73AD4 C |
 locret_72E1E :               73BDC C |  locret_7322 :                 732E C |
 locret_751E :                 752A C |  locret_75BE :                 75CA C |
 locret_75F2 :                 75FE C |  locret_76CA :                 76D6 C |
 locret_7B62 :                 7B6E C |  locret_7DA6 :                 7DB2 C |
 locret_8074 :                 8080 C |  locret_8308 :                 8314 C |
 locret_843A :                 8446 C |  locret_856E :                 857A C |
 locret_8AC2 :                 8ACE C |  locret_8AD8 :                 8AE4 C |
 locret_8BAC :                 8BB8 C |  locret_93EA :                 93F6 C |
 locret_9402 :                 940E C |  locret_955A :                 9566 C |
 locret_95B6 :                 95C2 C |  locret_9618 :                 9624 C |
 locret_96A2 :                 96AE C |  locret_96B6 :                 96C2 C |
 locret_986C :                 9878 C |  locret_98D0 :                 98DC C |
 locret_992A :                 9936 C |  locret_9F76 :                 9F82 C |
 locret_A6F8 :                 A714 C |  locret_ABB6 :                 ACA0 C |
 locret_AD42 :                 AE2C C |  locret_ADF0 :                 AEDA C |
 locret_AE20 :                 AF0A C |  locret_B09A :                 B184 C |
 locret_B116 :                 B200 C | *locret_BE5A :                 BF44 C |
 locret_C044 :                 C12E C |  locret_C184 :                 C26E C |
 locret_C1F0 :                 C2DA C |  locret_C2E4 :                 C3CE C |
 locret_C3D8 :                 C4C2 C |  locret_C412 :                 C4FC C |
 locret_C42 :                   C42 C |  locret_C5C :                   C5C C |
 locret_C60E :                 C6F8 C |  locret_C692 :                 C77C C |
 locret_C748 :                 C832 C |  locret_C86A :                 C954 C |
 locret_C8EA :                 C9D4 C |  locret_CFE6 :                 D0F0 C |
 locret_D180 :                 D28A C |  locret_D620 :                 D72A C |
 locret_D63E :                 D748 C |  locret_D794 :                 D89E C |
 locret_D7E2 :                 D8EC C |  locret_D828 :                 D932 C |
 locret_D87C :                 D986 C |  locret_DA3A :                 DB44 C |
 locret_DA8A :                 DB94 C |  locret_DAA0 :                 DBAA C |
 locret_DABC :                 DBC6 C |  locret_DCAE :                 DDB8 C |
 locret_DE12 :                 DF1C C |  locret_DE32 :                 DF3C C |
 locret_DE86 :                 DF90 C |  locret_DF14 :                 E01E C |
 locret_E052 :                 E15C C |  locret_E0F6 :                 E200 C |
 locret_E12E :                 E238 C |  locret_E150 :                 E25A C |
 locret_E188 :                 E292 C |  locret_E302 :                 E40C C |
 locret_E430 :                 E53A C |  locret_E452 :                 E55C C |
 locret_E474 :                 E57E C |  locret_E498 :                 E5A2 C |
 locret_E4BC :                 E5C6 C |  locret_E70 :                   E70 C |
 locret_E8EE :                 E9F8 C |  locret_EBBA :                 ECC4 C |
 locret_EC42 :                 ED4C C |  locret_ECEE :                 EDFE C |
 locret_ED1A :                 EE2A C |  locret_EDF0 :                 EF00 C |
 locret_EFDA :                 F0EA C |  locret_EFFA :                 F10A C |
 locret_F17E :                 F28E C |  locret_F68A :                 F79A C |
 locret_F70A :                 F81A C |  locret_F756 :                 F866 C |
 locret_F89E :                 F9AE C |  locret_F8E2 :                 F9F2 C |
 locret_FCFC :                 FE0C C |  locret_FFA0 :                100B0 C |
 nullsub_2 :                  1BE34 C |  off_164A6 :                  16722 C |
 off_183C2 :                  18652 C |  off_192FA :                  1958A C |
 off_19546 :                  197D6 C |  off_19568 :                  197F8 C |
 off_19E80 :                  1A110 C |  off_1A590 :                  1A820 C |
 off_6E4A :                    6E56 C |  off_6FB2 :                    6FBE C |
 off_7098 :                    70A4 C |  off_7118 :                    7124 C |
 off_719A0 :                  7273E C |  off_71B2 :                    71BE C |
 off_7252 :                    725E C |  off_72D8 :                    72E4 C |
 off_B6E :                      B6E C |  off_BAD6 :                    BBC0 C |
 paddingSoFar :                  45 - |  return_PlayPCM :             72D8C C |
 sub_106E :                    106E C |  sub_12502 :                  12612 C |
 sub_14D48 :                  14FC4 C |  sub_14E50 :                  150CC C |
 sub_14EB4 :                  15130 C |  sub_1642 :                    1642 C |
 sub_165E :                    165E C |  sub_1681C :                  16A98 C |
 sub_17C2A :                  17EBA C |  sub_188C :                    188C C |
 sub_1BCE8 :                  1BF82 C |  sub_1BD30 :                  1BFCA C |
 sub_5BA :                      5BA C |  sub_5CA :                      5CA C |
 sub_6886 :                    6892 C |  sub_6954 :                    6960 C |
 sub_69F4 :                    6A00 C |  sub_6AD8 :                    6AE4 C |
 sub_6ADA :                    6AE6 C |  sub_6B04 :                    6B10 C |
 sub_6B06 :                    6B12 C |  sub_6B32 :                    6B3E C |
 sub_6BD6 :                    6BE2 C |  sub_6C20 :                    6C2C C |
 sub_6C3C :                    6C48 C |  sub_71B4C :                  728EA C |
 sub_71C4E :                  729EC C |  sub_71CCA :                  72A68 C |
 sub_71CEC :                  72A8A C |  sub_71D22 :                  72AC0 C |
 sub_71D40 :                  72ADE C |  sub_71D60 :                  72AFE C |
 sub_71D9E :                  72B3C C |  sub_71DC6 :                  72B64 C |
 sub_71E18 :                  72BB6 C |  sub_72504 :                  732C2 C |
 sub_7256A :                  73328 C |  sub_725CA :                  73388 C |
 sub_7260C :                  733CA C |  sub_7267C :                  7343A C |
 sub_726FE :                  734BC C |  sub_72722 :                  734E0 C |
 sub_7272E :                  734EC C |  sub_72764 :                  73522 C |
 sub_72850 :                  7360E C |  sub_72878 :                  73636 C |
 sub_728AC :                  7366A C |  sub_728DC :                  7369A C |
 sub_728E2 :                  736A0 C |  sub_72926 :                  736E4 C |
 sub_7296A :                  73728 C |  sub_729A0 :                  7375E C |
 sub_729B6 :                  73774 C |  sub_72A5A :                  73818 C |
 sub_72C4E :                  73A0C C |  sub_72CB4 :                  73A72 C |
 sub_9404 :                    9410 C |  sub_B09C :                    B186 C |
 sub_D750 :                    D85A C |  sub_D762 :                    D86C C |
 sub_FC2C :                    FD3C C | *tracenum :                       0 - |
 var_1 :           FFFFFFFFFFFFFFFF - | *var_2 :           FFFFFFFFFFFFFFFE - |
 word_125F4 :                 12704 C |  word_12610 :                 12720 C |
 word_12628 :                 12738 C |  word_1263C :                 1274C C |
 word_12650 :                 12760 C |  word_12668 :                 12778 C |
 word_164B2 :                 1672E C |  word_164C6 :                 16742 C |
 word_164DA :                 16756 C |  word_164EE :                 1676A C |
 word_16502 :                 1677E C |  word_16516 :                 16792 C |
 word_168BC :                 16B38 C |  word_168C2 :                 16B3E C |
 word_168C8 :                 16B44 C |  word_168E6 :                 16B62 C |
 word_168EC :                 16B68 C |  word_1690A :                 16B86 C |
 word_16910 :                 16B8C C |  word_1692E :                 16BAA C |
 word_186C :                   186C C |  word_19018 :                 192A8 C |
 word_19FD6 :                 1A266 C |  word_72790 :                 7354E C |
 word_729CE :                 7378C C |  word_B6A4 :                   B78E C |
 word_B9BE :                   BAA8 C |  zeroOffsetOptimization :         0 - |

   6346 symbols
    262 unused symbols

 AS V1.42 Beta [Bld 89] - source file s1.asm - page 3 - 2/27/2022 20:33:18


  defined macros:
  ---------------

_add                                  | _addq                                
_clr                                  | _cmp                                 
_cmpi                                 | _move                                
_tst                                  | align                                
cnop                                  | ds                                   
even                                  | insn1op                              
insn2op                               | org                                  
trace                                 |

     15 macros

 AS V1.42 Beta [Bld 89] - source file s1.asm - page 4 - 2/27/2022 20:33:18


  defined functions:
  ------------------

chkop                                 | notZ80                               

 AS V1.42 Beta [Bld 89] - source file s1.asm - page 5 - 2/27/2022 20:33:18


  codepages:
  ----------

STANDARD (0 changed characters)


0.67 seconds assembly time

  47939 lines source file
  63523 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
